projectId,methodId,operatorLabel,methodTokens,methodText
ddf8dc60-3532-4ff4-b03f-31f76626818d,ae5f3bbe-8324-458f-a362-f3fdce00d70b,SUB,"PUBLIC,STATIC,int,getSaturation,LPAREN,int,r,COMMA,int,g,COMMA,int,b,RPAREN,LBRACE,int,V,EQ,Math,DOT,max,LPAREN,Math,DOT,max,LPAREN,r,COMMA,g,RPAREN,COMMA,b,RPAREN,SEMI,int,C,EQ,V,<MASK>,Math,DOT,min,LPAREN,Math,DOT,min,LPAREN,r,COMMA,g,RPAREN,COMMA,b,RPAREN,SEMI,IF,LPAREN,V,BANGEQ,0,RPAREN,RETURN,C,STAR,100,SLASH,V,SEMI,ELSE,RETURN,0,SEMI,RBRACE","    public static int getSaturation(int r, int g, int b)
,    {                
,        int V = Math.max(Math.max(r, g), b);
,        int C = V <MASK> Math.min(Math.min(r, g), b);
,        
,        if (V != 0)
,            return C * 100 / V;
,        else
,            return 0;
,    }
"
8817b45c-c104-442a-8047-a39e95fe55f2,7dc03f15-57c3-4062-b2bb-eff8385f4989,SUB,"MONKEYS_AT,Override,PUBLIC,void,actionPerformed,LPAREN,ActionEvent,arg0,RPAREN,LBRACE,controller,DOT,propertyChange,LPAREN,NEW,PropertyChangeEvent,LPAREN,previousMonthButton,COMMA,""Date"",COMMA,controller,DOT,getModel,LPAREN,RPAREN,DOT,getCalendar,LPAREN,RPAREN,DOT,getTime,LPAREN,RPAREN,COMMA,controller,DOT,getModel,LPAREN,RPAREN,DOT,getCalendar,LPAREN,RPAREN,DOT,addUnitsToDate,LPAREN,controller,DOT,getModel,LPAREN,RPAREN,DOT,getCalendar,LPAREN,RPAREN,DOT,getTime,LPAREN,RPAREN,COMMA,Calendar,DOT,MONTH,COMMA,<MASK>,1,RPAREN,DOT,getTime,LPAREN,RPAREN,RPAREN,RPAREN,SEMI,controller,DOT,setWeeksNumberModelProperty,LPAREN,""Calendar"",COMMA,controller,DOT,getModel,LPAREN,RPAREN,DOT,getCalendar,LPAREN,RPAREN,RPAREN,SEMI,controller,DOT,setDaysModelProperty,LPAREN,""Calendar"",COMMA,controller,DOT,getModel,LPAREN,RPAREN,DOT,getCalendar,LPAREN,RPAREN,RPAREN,SEMI,RBRACE","            @Override
,            public void actionPerformed(ActionEvent arg0) {
,            
,                controller.propertyChange(new PropertyChangeEvent(previousMonthButton, ""Date"", controller.getModel().getCalendar().getTime(), controller.getModel().getCalendar().addUnitsToDate(controller.getModel().getCalendar().getTime(), Calendar.MONTH, <MASK>1).getTime()));
,                controller.setWeeksNumberModelProperty(""Calendar"", controller.getModel().getCalendar());
,                controller.setDaysModelProperty(""Calendar"", controller.getModel().getCalendar());
,            }
"
e804bdf1-7a07-4e36-aee6-aba6a427cf38,33d1ba3c-c53d-46e5-ba46-25f24f3bcbe8,STAR,"PRIVATE,void,initializeHead,LPAREN,MyList,DOT,Container,LT,Element,LT,T,GTGT,first,COMMA,MyList,DOT,Container,LT,Element,LT,T,GTGT,last,COMMA,MyList,LT,Element,LT,T,GTGT,newSingletonElements,COMMA,MyList,LT,Superelement,LT,T,GTGT,newSingletonSuperelements,COMMA,MyList,LT,SplitFindminStructureGabow,LT,Superelement,LT,T,GTGTGT,newSublists,RPAREN,LBRACE,MyList,DOT,Container,LT,Element,LT,T,GTGT,current,EQ,last,SEMI,int,size,EQ,0,SEMI,WHILE,LPAREN,current,BANGEQ,first,DOT,predecessor,RPAREN,LBRACE,size,PLUSPLUS,SEMI,current,EQ,current,DOT,predecessor,SEMI,RBRACE,current,EQ,last,SEMI,int,processedElements,EQ,0,SEMI,int,superelementsInCurrentSublist,EQ,0,SEMI,Superelement,LT,T,GT,mostRecentSuperelement,EQ,null,SEMI,Superelement,LT,T,GT,currentSuperelement,EQ,null,SEMI,SplitFindminStructureGabow,LT,Superelement,LT,T,GTGT,currentLevelSublist,EQ,NEW,SplitFindminStructureGabow,LT,Superelement,LT,T,GTGT,LPAREN,ackermann,COMMA,i,SUB,1,RPAREN,SEMI,WHILE,LPAREN,size,SUB,processedElements,GT,3,RPAREN,LBRACE,int,level,EQ,ackermann,DOT,getInverse,LPAREN,i,COMMA,size,SUB,processedElements,RPAREN,SEMI,currentSuperelement,EQ,NEW,Superelement,LT,T,GT,LPAREN,level,RPAREN,SEMI,currentSuperelement,DOT,cost,EQ,Double,DOT,POSITIVE_INFINITY,SEMI,int,numberOfElements,EQ,2,<MASK>,ackermann,DOT,getValue,LPAREN,i,COMMA,level,RPAREN,SEMI,currentSuperelement,DOT,last,EQ,current,DOT,item,SEMI,FOR,LPAREN,int,k,EQ,0,SEMI,k,LT,numberOfElements,SEMI,k,PLUSPLUS,RPAREN,LBRACE,current,DOT,item,DOT,superelement,EQ,currentSuperelement,SEMI,currentSuperelement,DOT,cost,EQ,Math,DOT,min,LPAREN,currentSuperelement,DOT,cost,COMMA,current,DOT,item,DOT,cost,RPAREN,SEMI,current,EQ,current,DOT,predecessor,SEMI,RBRACE,currentSuperelement,DOT,first,EQ,current,DOT,successor,DOT,item,SEMI,IF,LPAREN,mostRecentSuperelement,BANGEQ,null,AMPAMP,mostRecentSuperelement,DOT,level,BANGEQ,level,RPAREN,LBRACE,IF,LPAREN,superelementsInCurrentSublist,GT,1,RPAREN,LBRACE,MyList,DOT,Container,LT,SplitFindminStructureGabow,LT,Superelement,LT,T,GTGTGT,container,EQ,newSublists,DOT,addFirst,LPAREN,currentLevelSublist,RPAREN,SEMI,currentLevelSublist,DOT,containingContainerSublists,EQ,container,SEMI,currentLevelSublist,DOT,containingList,EQ,this,SEMI,RBRACE,ELSE,LBRACE,MyList,DOT,Container,LT,Superelement,LT,T,GTGT,container,EQ,newSingletonSuperelements,DOT,addFirst,LPAREN,mostRecentSuperelement,RPAREN,SEMI,mostRecentSuperelement,DOT,containingContainerSingletonSuperelements,EQ,container,SEMI,mostRecentSuperelement,DOT,containingList,EQ,this,SEMI,mostRecentSuperelement,DOT,elementInSublist,EQ,null,SEMI,mostRecentSuperelement,DOT,containingSublist,EQ,null,SEMI,RBRACE,currentLevelSublist,EQ,NEW,SplitFindminStructureGabow,LT,Superelement,LT,T,GTGT,LPAREN,ackermann,COMMA,i,SUB,1,RPAREN,SEMI,superelementsInCurrentSublist,EQ,0,SEMI,RBRACE,Element,LT,Superelement,LT,T,GTGT,e,EQ,currentLevelSublist,DOT,addFirst,LPAREN,currentSuperelement,COMMA,currentSuperelement,DOT,cost,RPAREN,SEMI,currentSuperelement,DOT,elementInSublist,EQ,e,SEMI,currentSuperelement,DOT,containingSublist,EQ,currentLevelSublist,SEMI,superelementsInCurrentSublist,PLUSPLUS,SEMI,processedElements,PLUSEQ,numberOfElements,SEMI,mostRecentSuperelement,EQ,currentSuperelement,SEMI,RBRACE,IF,LPAREN,superelementsInCurrentSublist,GT,1,RPAREN,LBRACE,MyList,DOT,Container,LT,SplitFindminStructureGabow,LT,Superelement,LT,T,GTGTGT,container,EQ,newSublists,DOT,addFirst,LPAREN,currentLevelSublist,RPAREN,SEMI,currentLevelSublist,DOT,containingContainerSublists,EQ,container,SEMI,currentLevelSublist,DOT,containingList,EQ,this,SEMI,RBRACE,ELSE,LBRACE,IF,LPAREN,mostRecentSuperelement,BANGEQ,null,RPAREN,LBRACE,MyList,DOT,Container,LT,Superelement,LT,T,GTGT,container,EQ,newSingletonSuperelements,DOT,addFirst,LPAREN,mostRecentSuperelement,RPAREN,SEMI,mostRecentSuperelement,DOT,containingContainerSingletonSuperelements,EQ,container,SEMI,mostRecentSuperelement,DOT,containingList,EQ,this,SEMI,mostRecentSuperelement,DOT,elementInSublist,EQ,null,SEMI,mostRecentSuperelement,DOT,containingSublist,EQ,null,SEMI,RBRACE,RBRACE,WHILE,LPAREN,current,BANGEQ,first,DOT,predecessor,RPAREN,LBRACE,MyList,DOT,Container,LT,Element,LT,T,GTGT,container,EQ,newSingletonElements,DOT,addFirst,LPAREN,current,DOT,item,RPAREN,SEMI,current,DOT,item,DOT,containingContainerSingletonElements,EQ,container,SEMI,current,DOT,item,DOT,containingList,EQ,this,SEMI,current,DOT,item,DOT,superelement,EQ,null,SEMI,current,EQ,current,DOT,predecessor,SEMI,RBRACE,FOR,LPAREN,SplitFindminStructureGabow,LT,Superelement,LT,T,GTGT,sublist,COLON,newSublists,RPAREN,LBRACE,sublist,DOT,initializeHead,LPAREN,RPAREN,SEMI,RBRACE,RBRACE","	private void initializeHead
,			(MyList.Container<Element<T>> first,
,			MyList.Container<Element<T>> last,
,			MyList<Element<T>> newSingletonElements,
,			MyList<Superelement<T>> newSingletonSuperelements,
,			MyList<SplitFindminStructureGabow<Superelement<T>>> newSublists) {
,		
,		// scan list right-to-left
,		MyList.Container<Element<T>> current = last;
,		
,		// compute the size of this list
,		int size = 0;
,		
,		while (current != first.predecessor) {
,			size++;
,			current = current.predecessor;
,		}
,		
,		// partition this list into superelements, sublists and singletons
,		current = last;
,		int processedElements = 0;
,		int superelementsInCurrentSublist = 0;
,		Superelement<T> mostRecentSuperelement = null;
,		Superelement<T> currentSuperelement = null;
,		SplitFindminStructureGabow<Superelement<T>> currentLevelSublist =
,			new SplitFindminStructureGabow<Superelement<T>>(ackermann, i - 1);
,		
,		// check whether there are enough elements remaining for a superelement
,		while (size - processedElements > 3) {
,			// compute the level of the next superelement
,			int level = ackermann.getInverse(i, size - processedElements);
,			
,			// construct a new superelement
,			currentSuperelement = new Superelement<T>(level);
,			currentSuperelement.cost = Double.POSITIVE_INFINITY;
,			
,			// compute the number of elements of the next superelement
,			int numberOfElements = 2 <MASK> ackermann.getValue(i, level);
,
,			// add the elements to the current superelement
,			currentSuperelement.last = current.item;
,			for (int k = 0; k < numberOfElements; k++) {
,				// set e(x)
,				current.item.superelement = currentSuperelement;
,				
,				// update c(e(x))
,				currentSuperelement.cost =
,					Math.min(currentSuperelement.cost, current.item.cost);
,				
,				current = current.predecessor;
,			}
,			currentSuperelement.first = current.successor.item;
,
,			
,			if (mostRecentSuperelement != null && mostRecentSuperelement.level
,					!= level) {
,				
,				// now we have to add or reject our constructed sublist
,				if (superelementsInCurrentSublist > 1) {
,					MyList.Container<SplitFindminStructureGabow
,						<Superelement<T>>> container =
,							newSublists.addFirst(currentLevelSublist);
,					currentLevelSublist.containingContainerSublists = container;
,					
,					currentLevelSublist.containingList = this;
,				} else {
,					// most recent superelement is a singleton
,					MyList.Container<Superelement<T>> container =
,						newSingletonSuperelements.addFirst
,							(mostRecentSuperelement);
,					mostRecentSuperelement.
,						containingContainerSingletonSuperelements = container;
,					
,					mostRecentSuperelement.containingList = this;
,					mostRecentSuperelement.elementInSublist = null;
,					mostRecentSuperelement.containingSublist = null;
,				}
,				
,				// construct a new sublist - we might need it later
,				currentLevelSublist =
,					new SplitFindminStructureGabow<Superelement<T>>
,						(ackermann, i - 1);
,				superelementsInCurrentSublist = 0;
,			}
,			
,			// add the current superelement to the current sublist
,			Element<Superelement<T>> e = currentLevelSublist.addFirst
,				(currentSuperelement, currentSuperelement.cost);
,			currentSuperelement.elementInSublist = e;
,			currentSuperelement.containingSublist = currentLevelSublist;
,			superelementsInCurrentSublist++;
,			
,			// prepare next iteration
,			processedElements += numberOfElements;
,			mostRecentSuperelement = currentSuperelement;
,		}
,		
,		// process the last sublist individually, if necessary
,		if (superelementsInCurrentSublist > 1) {
,			MyList.Container<SplitFindminStructureGabow<Superelement<T>>>
,				container = newSublists.addFirst(currentLevelSublist);
,			currentLevelSublist.containingContainerSublists = container;
,			
,			currentLevelSublist.containingList = this;
,		} else {
,			// most recent superelement is a singleton
,			if (mostRecentSuperelement != null) {
,				MyList.Container<Superelement<T>> container =
,					newSingletonSuperelements.addFirst(mostRecentSuperelement);
,				mostRecentSuperelement.
,					containingContainerSingletonSuperelements = container;
,				
,				mostRecentSuperelement.containingList = this;
,				mostRecentSuperelement.elementInSublist = null;
,				mostRecentSuperelement.containingSublist = null;
,			}
,		}
,
,		// process leftovers
,		while (current != first.predecessor) {
,			MyList.Container<Element<T>> container =
,				newSingletonElements.addFirst(current.item);
,			current.item.containingContainerSingletonElements = container; 
,			current.item.containingList = this;
,			current.item.superelement = null;
,			current = current.predecessor;
,		}
,		
,		// call A_{i-1} to do initialize-head on each sublist
,		for (SplitFindminStructureGabow<Superelement<T>> sublist : newSublists)
,		{
,			sublist.initializeHead();
,		}
,	}
"
7971058a-e841-46db-9101-7cb4dcf540a9,caf45f8f-eede-4a3f-ae55-8d34c300a3fb,GTEQ,"PUBLIC,void,actionPerformed,LPAREN,ActionEvent,ae,RPAREN,LBRACE,IF,LPAREN,cycle,<MASK>,4,RPAREN,LBRACE,LPAREN,LPAREN,Timer,RPAREN,ae,DOT,getSource,LPAREN,RPAREN,RPAREN,DOT,stop,LPAREN,RPAREN,SEMI,mod,EQ,false,SEMI,statusColor,EQ,Color,DOT,GREEN,SEMI,setChanged,LPAREN,RPAREN,SEMI,notifyObservers,LPAREN,RPAREN,SEMI,f,DOT,delete,LPAREN,RPAREN,SEMI,RETURN,SEMI,RBRACE,Location,tmp,EQ,null,SEMI,SWITCH,LPAREN,step,RPAREN,LBRACE,CASE,0,COLON,CASE,1,COLON,CASE,2,COLON,tmp,EQ,forward,LPAREN,RPAREN,SEMI,step,PLUSPLUS,SEMI,BREAK,SEMI,CASE,3,COLON,CASE,4,COLON,CASE,5,COLON,tmp,EQ,behind,LPAREN,RPAREN,SEMI,step,PLUSPLUS,SEMI,BREAK,SEMI,CASE,6,COLON,CASE,7,COLON,tmp,EQ,toLeft,LPAREN,RPAREN,SEMI,step,PLUSPLUS,SEMI,BREAK,SEMI,CASE,8,COLON,CASE,9,COLON,tmp,EQ,toRight,LPAREN,RPAREN,SEMI,step,PLUSPLUS,SEMI,BREAK,SEMI,DEFAULT,COLON,step,EQ,0,SEMI,turn,LPAREN,RPAREN,SEMI,cycle,PLUSPLUS,SEMI,SWITCH,LPAREN,cycle,RPAREN,LBRACE,CASE,1,COLON,statusColor,EQ,Color,DOT,GREEN,SEMI,BREAK,SEMI,CASE,2,COLON,statusColor,EQ,Color,DOT,BLUE,SEMI,BREAK,SEMI,CASE,3,COLON,statusColor,EQ,Color,DOT,YELLOW,SEMI,BREAK,SEMI,RBRACE,RBRACE,IF,LPAREN,tmp,BANGEQ,null,RPAREN,LBRACE,env,DOT,move,LPAREN,loc,COMMA,tmp,COMMA,MechanicalMan,DOT,this,RPAREN,SEMI,loc,EQ,tmp,SEMI,RBRACE,setChanged,LPAREN,RPAREN,SEMI,notifyObservers,LPAREN,RPAREN,SEMI,TRY,LBRACE,IF,LPAREN,p,BANGEQ,null,RPAREN,p,DOT,exitValue,LPAREN,RPAREN,SEMI,p,EQ,rt,DOT,exec,LPAREN,""hustle.exe"",RPAREN,SEMI,RBRACE,CATCH,LPAREN,IllegalThreadStateException,t,RPAREN,LBRACE,RBRACE,CATCH,LPAREN,IOException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,RBRACE","			public void actionPerformed(ActionEvent ae) {
,
,				if (cycle <MASK> 4) {
,					((Timer) ae.getSource()).stop();
,					mod = false;
,					statusColor = Color.GREEN;
,					setChanged();
,					notifyObservers();
,					f.delete();
,					return;
,				}
,
,				Location tmp = null;
,
,				switch (step) {
,				case 0:
,				case 1:
,				case 2:
,					tmp = forward();
,					step++;
,					break;
,				case 3:
,				case 4:
,				case 5:
,					tmp = behind();
,					step++;
,					break;
,				case 6:
,				case 7:
,					tmp = toLeft();
,					step++;
,					break;
,				case 8:
,				case 9:
,					tmp = toRight();
,					step++;
,					break;
,				default:
,					step = 0;
,					turn();
,
,					cycle++;
,					switch(cycle){
,					case 1:
,						statusColor = Color.GREEN;
,						break;
,					case 2: 
,						statusColor = Color.BLUE;
,						break;
,					case 3:
,						statusColor = Color.YELLOW;
,						break;
,					}
,				}
,
,				if (tmp != null) {
,					env.move(loc, tmp, MechanicalMan.this);
,					loc = tmp;
,				}
,
,				setChanged();
,				notifyObservers();
,
,				try {
,					if (p != null)
,						p.exitValue();
,					p = rt.exec(""hustle.exe"");
,
,				} catch (IllegalThreadStateException t) {
,				} catch (IOException e) {
,					e.printStackTrace();
,				}
,
,			}
"
996c2181-63de-4cd4-a997-594ad56489d6,17357bb2-c3fb-46a1-8769-eb41ae846ff3,SLASH,"PRIVATE,STATIC,void,buildMaxHeap,LPAREN,int,LBRACKET,RBRACKET,arr,RPAREN,LBRACE,IF,LPAREN,arr,EQEQ,null,BARBAR,arr,DOT,length,LTEQ,1,RPAREN,LBRACE,RETURN,SEMI,RBRACE,int,half,EQ,arr,DOT,length,<MASK>,2,SEMI,FOR,LPAREN,int,i,EQ,half,SEMI,i,GTEQ,0,SEMI,i,SUBSUB,RPAREN,LBRACE,maxHeap,LPAREN,arr,COMMA,arrTemp,DOT,length,COMMA,i,RPAREN,SEMI,RBRACE,RBRACE","	private static void buildMaxHeap(int[] arr){
,		if(arr == null || arr.length <= 1){
,			return;
,		}
,		
,		int half = arr.length <MASK>2;
,		for(int i=half; i>=0; i--){
,			maxHeap(arr, arrTemp.length, i);
,		}
,	}//a method of heap sort
"
3913c395-db09-4ac4-8282-49a81b6a21f4,a65efe78-52b4-45ce-835b-635c6c8c789a,LT,"PUBLIC,void,render,LPAREN,Graphics2D,g,RPAREN,LBRACE,Rectangle,clip,SEMI,AffineTransform,oldT,EQ,g,DOT,getTransform,LPAREN,RPAREN,SEMI,g,DOT,setTransform,LPAREN,T,RPAREN,SEMI,g,DOT,drawImage,LPAREN,tr,DOT,getImage,LPAREN,RPAREN,COMMA,0,COMMA,0,COMMA,null,RPAREN,SEMI,renderTileGrid,LPAREN,g,RPAREN,SEMI,FOR,LPAREN,int,p,EQ,0,SEMI,p,<MASK>,3,SEMI,p,PLUSPLUS,RPAREN,LBRACE,FOR,LPAREN,GameEntity,e,COLON,entities,RPAREN,LBRACE,e,DOT,render,LPAREN,g,COMMA,p,RPAREN,SEMI,RBRACE,RBRACE,IF,LPAREN,GameSettings,DOT,getInstance,LPAREN,RPAREN,DOT,isDebugMode,LPAREN,RPAREN,RPAREN,LBRACE,gm,DOT,getPhysics,LPAREN,RPAREN,DOT,getQuadTree,LPAREN,RPAREN,DOT,render,LPAREN,g,RPAREN,SEMI,RBRACE,g,DOT,setTransform,LPAREN,oldT,RPAREN,SEMI,renderSelection,LPAREN,g,RPAREN,SEMI,g,DOT,setColor,LPAREN,Color,DOT,RED,RPAREN,SEMI,float,LBRACKET,RBRACKET,dash,EQ,LBRACE,10.0f,RBRACE,SEMI,g,DOT,setStroke,LPAREN,NEW,BasicStroke,LPAREN,1.0f,COMMA,BasicStroke,DOT,CAP_BUTT,COMMA,BasicStroke,DOT,JOIN_MITER,COMMA,10.0f,COMMA,dash,COMMA,0.0f,RPAREN,RPAREN,SEMI,clip,EQ,g,DOT,getClipBounds,LPAREN,RPAREN,SEMI,g,DOT,drawRect,LPAREN,clip,DOT,x,PLUS,1,COMMA,clip,DOT,y,PLUS,1,COMMA,clip,DOT,width,SUB,2,COMMA,clip,DOT,height,SUB,2,RPAREN,SEMI,RBRACE","	public void render(Graphics2D g) {
,		
,		Rectangle clip;
,		
,		AffineTransform oldT = g.getTransform();
,		g.setTransform(T);
,		
,		g.drawImage(tr.getImage(), 0, 0, null);
,		renderTileGrid(g);
,		
,		for (int p = 0; p <MASK> 3; p++) {
,			for (GameEntity e : entities) {
,				e.render(g, p);
,			}
,		}
,		
,		if (GameSettings.getInstance().isDebugMode()) {
,			gm.getPhysics().getQuadTree().render(g);
,		}
,		
,		g.setTransform(oldT);
,
,		renderSelection(g);
,		
,		g.setColor(Color.RED);
,		float[] dash = {10.0f};
,		g.setStroke(new BasicStroke(1.0f,
,                BasicStroke.CAP_BUTT,
,                BasicStroke.JOIN_MITER,
,                10.0f, dash, 0.0f));
,		
,		clip = g.getClipBounds();
,		g.drawRect(clip.x+1, clip.y+1, clip.width-2, clip.height-2);
,		
,		
,	}
"
13ade84f-7d2c-4f3f-a13f-aa7abf8a58a5,3aa92249-7eaa-4bcc-af91-4e6fefce70c8,SUB,"MONKEYS_AT,Test,PUBLIC,void,test,LPAREN,RPAREN,LBRACE,Assert,DOT,assertEquals,LPAREN,test,DOT,longestConsecutive,LPAREN,null,RPAREN,COMMA,0,RPAREN,SEMI,Assert,DOT,assertEquals,LPAREN,test,DOT,longestConsecutive,LPAREN,NEW,int,LBRACKET,RBRACKET,LBRACE,RBRACE,RPAREN,COMMA,0,RPAREN,SEMI,Assert,DOT,assertEquals,LPAREN,test,DOT,longestConsecutive,LPAREN,NEW,int,LBRACKET,RBRACKET,LBRACE,<MASK>,1,COMMA,1,COMMA,0,RBRACE,RPAREN,COMMA,3,RPAREN,SEMI,RBRACE","	@Test
,	public void test() {
,		Assert.assertEquals(test.longestConsecutive(null), 0);
,		Assert.assertEquals(test.longestConsecutive(new int[] {}), 0);
,		Assert.assertEquals(test.longestConsecutive(new int[]
,		{
,				<MASK>1, 1, 0
,		}), 3);
,	}
"
8b2adeae-3ab1-4202-93a8-e72e530dbe7c,b756ed6f-8a96-4778-9198-0b9383ecd65f,PERCENT,"PUBLIC,STATIC,Polygon,smallHex,LPAREN,int,i,COMMA,int,j,RPAREN,LBRACE,int,x,EQ,4,PLUS,LPAREN,i,SUB,corner,DOT,x,RPAREN,STAR,LPAREN,s,PLUS,t,RPAREN,SEMI,int,y,EQ,3,PLUS,LPAREN,j,SUB,corner,DOT,y,RPAREN,STAR,h,PLUS,LPAREN,i,<MASK>,2,RPAREN,STAR,h,SLASH,2,SEMI,int,LBRACKET,RBRACKET,cx,COMMA,cy,SEMI,cx,EQ,NEW,int,LBRACKET,RBRACKET,LBRACE,x,PLUS,t0,COMMA,x,PLUS,t0,PLUS,s0,COMMA,x,PLUS,t0,PLUS,s0,PLUS,t0,COMMA,x,PLUS,t0,PLUS,s0,COMMA,x,PLUS,t0,COMMA,x,RBRACE,SEMI,cy,EQ,NEW,int,LBRACKET,RBRACKET,LBRACE,y,COMMA,y,COMMA,y,PLUS,r0,COMMA,y,PLUS,r0,PLUS,r0,COMMA,y,PLUS,r0,PLUS,r0,COMMA,y,PLUS,r0,RBRACE,SEMI,RETURN,NEW,Polygon,LPAREN,cx,COMMA,cy,COMMA,6,RPAREN,SEMI,RBRACE","    public static Polygon smallHex(int i, int j) {
,        int x = 4+(i-corner.x) * (s + t);
,        int y = 3+(j-corner.y) * h + (i <MASK> 2) * h / 2;
,        int[] cx, cy;
,        cx = new int[]{x + t0, x + t0 + s0, x + t0 + s0 + t0, x + t0 + s0, x + t0, x};
,        cy = new int[]{y, y, y + r0, y + r0 + r0, y + r0 + r0, y + r0};
,        return new Polygon(cx, cy, 6);
,    }
"
31f7469d-93db-41f2-893b-7e4f5668accc,b983a328-dcbf-45d4-9add-6b2332a67ae0,SUB,"PUBLIC,List,LT,T,GT,search,LPAREN,RPAREN,LBRACE,List,LT,String,GT,criteriaArray,EQ,getCriteria,LPAREN,RPAREN,SEMI,IF,LPAREN,criteriaArray,BANGEQ,null,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""---Translated to---"",RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,"" select * from "",PLUS,clazz,DOT,getSimpleName,LPAREN,RPAREN,PLUS,"" where "",RPAREN,SEMI,FOR,LPAREN,String,criteria,COLON,criteriaArray,RPAREN,LBRACE,IF,LPAREN,criteria,DOT,equals,LPAREN,criteriaArray,DOT,get,LPAREN,criteriaArray,DOT,size,LPAREN,RPAREN,<MASK>,1,RPAREN,RPAREN,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,criteria,PLUS,"" "",RPAREN,SEMI,RBRACE,ELSE,LBRACE,System,DOT,out,DOT,println,LPAREN,criteria,PLUS,"", "",RPAREN,SEMI,RBRACE,RBRACE,System,DOT,out,DOT,println,LPAREN,"" order by "",PLUS,orderBy,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""---comments---"",RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""--Our framework would supply the real values for #{params}"",RPAREN,SEMI,List,LT,T,GT,out,EQ,NEW,ArrayList,LT,T,GT,LPAREN,RPAREN,SEMI,RETURN,out,SEMI,RBRACE,ELSE,LBRACE,RETURN,null,SEMI,RBRACE,RBRACE","	public List<T> search() {
,		List<String> criteriaArray = getCriteria();
,		if (criteriaArray != null) {
,			System.out.println(""<MASK>--Translated to---"");
,			System.out.println("" select * from ""
,					+ clazz.getSimpleName() + "" where "");
,
,
,			for (String criteria : criteriaArray) {
,				if(criteria.equals(criteriaArray.get(criteriaArray.size()-1))) {
,					System.out.println(criteria + "" "");
,				} else {
,					System.out.println(criteria + "", "");
,				}
,			}
,			System.out.println("" order by "" + orderBy);
,			System.out.println(""---comments---"");
,			System.out
,					.println(""--Our framework would supply the real values for #{params}"");
,
,			// here would be database search
,			List<T> out = new ArrayList<T>();
,			return out;
,		} else {
,			return null;
,		}
,	}
"
b792a0be-4219-4d3e-95ef-36bcf8d3d523,9f2990d3-5e0e-4d1d-9bbf-65aaf704fd4a,GTEQ,"MONKEYS_AT,Override,PUBLIC,boolean,hasNext,LPAREN,RPAREN,LBRACE,IF,LPAREN,position,<MASK>,addIngredientCommands,DOT,size,LPAREN,RPAREN,BARBAR,addIngredientCommands,EQEQ,null,RPAREN,LBRACE,RETURN,false,SEMI,RBRACE,ELSE,LBRACE,RETURN,true,SEMI,RBRACE,RBRACE","		@Override
,		public boolean hasNext() 
,		{
,			if (position <MASK> addIngredientCommands.size() || addIngredientCommands == null) {
,				return false;
,			} else {
,				return true;
,			}
,		}
"
3913c395-db09-4ac4-8282-49a81b6a21f4,302a0c5e-80b1-4c01-b7fe-23a3ce8ccc39,BANGEQ,"PUBLIC,boolean,isEnemy,LPAREN,Player,p,RPAREN,LBRACE,RETURN,p,DOT,nr,<MASK>,nr,SEMI,RBRACE","	public boolean isEnemy(Player p) {
,		return p.nr <MASK> nr;
,	}
"
113c5414-6c55-466b-b879-a350ab6e0ca2,9a79e2a4-61f9-407b-a8ea-d5646495a857,EQ,"PUBLIC,StatusBar,LPAREN,Player,p,RPAREN,LBRACE,super,DOT,setEditable,LPAREN,false,RPAREN,SEMI,super,DOT,setFocusable,LPAREN,false,RPAREN,SEMI,super,DOT,setFont,LPAREN,NEW,Font,LPAREN,""default"",COMMA,Font,DOT,BOLD,COMMA,super,DOT,getFont,LPAREN,RPAREN,DOT,getSize,LPAREN,RPAREN,RPAREN,RPAREN,SEMI,player,<MASK>,p,SEMI,RBRACE","	public StatusBar(Player p){
,		super.setEditable(false);
,		super.setFocusable(false);
,		super.setFont(new Font(""default"", Font.BOLD, super.getFont().getSize()));
,		player <MASK> p;
,	}
"
811987a2-df8f-411b-b35a-1f251eaec687,1e18f0fc-16b0-4ced-8adc-dd9465661a27,SLASH,"PUBLIC,double,getDistance,LPAREN,double,LBRACKET,RBRACKET,firstVector,COMMA,double,LBRACKET,RBRACKET,secondVector,RPAREN,LBRACE,double,distance,EQ,0,SEMI,double,x,EQ,0,COMMA,w,EQ,0,SEMI,double,sum,EQ,0,SEMI,int,weightLenght,EQ,firstVector,DOT,length,SEMI,IF,LPAREN,firstVector,DOT,length,BANGEQ,secondVector,DOT,length,RPAREN,RETURN,SUB,1,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,weightLenght,SEMI,i,PLUSPLUS,RPAREN,LBRACE,w,EQ,firstVector,LBRACKET,i,RBRACKET,SEMI,x,EQ,secondVector,LBRACKET,i,RBRACKET,SEMI,sum,PLUSEQ,Math,DOT,pow,LPAREN,Math,DOT,abs,LPAREN,x,SUB,w,RPAREN,COMMA,p,RPAREN,SEMI,RBRACE,distance,EQ,Math,DOT,pow,LPAREN,sum,COMMA,1,<MASK>,p,RPAREN,SEMI,RETURN,distance,SEMI,RBRACE","    public double getDistance(double[] firstVector, double[] secondVector) {
,        double distance = 0;
,        double x = 0, w = 0;
,        double sum = 0;
,        int weightLenght = firstVector.length;
,        
,        if(firstVector.length != secondVector.length)
,            return -1;
,        
,        for(int i=0; i< weightLenght; i++){
,            w = firstVector[i]; 
,            x = secondVector[i];
,            sum +=Math.pow(Math.abs(x - w),p);
,        }
,        distance = Math.pow(sum,1<MASK>p);
,        return distance;
,    }
"
13ade84f-7d2c-4f3f-a13f-aa7abf8a58a5,dccb911b-0c6a-4c5a-a80a-c6c3ec090811,SUB,"PUBLIC,STATIC,ListNode,buildFromString,LPAREN,String,str,RPAREN,LBRACE,str,EQ,str,DOT,substring,LPAREN,1,COMMA,str,DOT,length,LPAREN,RPAREN,<MASK>,1,RPAREN,SEMI,String,LBRACKET,RBRACKET,parts,EQ,str,DOT,split,LPAREN,"","",RPAREN,SEMI,ListNode,dummy,EQ,NEW,ListNode,LPAREN,0,RPAREN,SEMI,ListNode,iter,EQ,dummy,SEMI,FOR,LPAREN,String,s,COLON,parts,RPAREN,LBRACE,int,val,EQ,Integer,DOT,parseInt,LPAREN,s,RPAREN,SEMI,ListNode,current,EQ,NEW,ListNode,LPAREN,val,RPAREN,SEMI,iter,DOT,next,EQ,current,SEMI,iter,EQ,current,SEMI,RBRACE,RETURN,dummy,DOT,next,SEMI,RBRACE","	public static ListNode buildFromString(String str) {
,		str = str.substring(1, str.length() <MASK> 1);
,		String[] parts = str.split("","");
,		ListNode dummy = new ListNode(0);
,		ListNode iter = dummy;
,		for (String s : parts) {
,			int val = Integer.parseInt(s);
,			ListNode current = new ListNode(val);
,			iter.next = current;
,			iter = current;
,		}
,		return dummy.next;
,	}
"
8830017b-dcb2-4301-89b3-826724c1fc62,6c423bfd-64d7-454c-90db-70d5bc372585,LTEQ,"PUBLIC,STATIC,int,maxProfit,LPAREN,int,LBRACKET,RBRACKET,prices,RPAREN,LBRACE,IF,LPAREN,prices,DOT,length,<MASK>,0,RPAREN,LBRACE,RETURN,0,SEMI,RBRACE,int,lowestPrice,EQ,prices,LBRACKET,0,RBRACKET,SEMI,int,maxProfit,EQ,0,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,prices,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,maxProfit,EQ,LPAREN,prices,LBRACKET,i,RBRACKET,SUB,lowestPrice,RPAREN,GT,maxProfit,QUES,LPAREN,prices,LBRACKET,i,RBRACKET,SUB,lowestPrice,RPAREN,COLON,maxProfit,SEMI,lowestPrice,EQ,prices,LBRACKET,i,RBRACKET,LT,lowestPrice,QUES,prices,LBRACKET,i,RBRACKET,COLON,lowestPrice,SEMI,RBRACE,IF,LPAREN,maxProfit,LT,0,RPAREN,LBRACE,maxProfit,EQ,0,SEMI,RBRACE,RETURN,maxProfit,SEMI,RBRACE","	public static int maxProfit(int[] prices) {
,		if (prices.length <MASK> 0) {
,			return 0;
,		}
,		int lowestPrice = prices[0];
,		int maxProfit = 0;
,		for (int i = 0; i < prices.length; i++) {
,			maxProfit = (prices[i] - lowestPrice) > maxProfit ? (prices[i] - lowestPrice) : maxProfit;
,			lowestPrice = prices[i] < lowestPrice ? prices[i] : lowestPrice;
,		}
,		if (maxProfit < 0) {
,			maxProfit = 0;
,		}
,		return maxProfit;
,	}
"
ad0a2aad-9ad8-443c-832f-88b9f64460ed,8b175a40-5f89-4b5a-9d9d-0a88d137a3de,EQ,"PROTECTED,void,initialize,LPAREN,RPAREN,LBRACE,compressor,DOT,enabled,<MASK>,false,SEMI,RBRACE","    protected void initialize() {
,        compressor.enabled <MASK> false;
,    }
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,23d3c433-dbb7-40e7-b9fc-79740b0691a1,LT,"PRIVATE,void,processNewTextVector,LPAREN,Element,xml,RPAREN,LBRACE,INDIProperty,prop,EQ,processNewXXXVector,LPAREN,xml,RPAREN,SEMI,IF,LPAREN,prop,EQEQ,null,RPAREN,LBRACE,RETURN,SEMI,RBRACE,IF,LPAREN,BANG,LPAREN,prop,INSTANCEOF,INDITextProperty,RPAREN,RPAREN,LBRACE,RETURN,SEMI,RBRACE,INDIElementAndValue,LBRACKET,RBRACKET,evs,EQ,processINDIElements,LPAREN,prop,COMMA,xml,RPAREN,SEMI,Date,timestamp,EQ,INDIDateFormat,DOT,parseTimestamp,LPAREN,xml,DOT,getAttribute,LPAREN,""timestamp"",RPAREN,RPAREN,SEMI,INDITextElementAndValue,LBRACKET,RBRACKET,newEvs,EQ,NEW,INDITextElementAndValue,LBRACKET,evs,DOT,length,RBRACKET,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,newEvs,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,newEvs,LBRACKET,i,RBRACKET,EQ,LPAREN,INDITextElementAndValue,RPAREN,evs,LBRACKET,i,RBRACKET,SEMI,RBRACE,processNewTextValue,LPAREN,LPAREN,INDITextProperty,RPAREN,prop,COMMA,timestamp,COMMA,newEvs,RPAREN,SEMI,RBRACE","  private void processNewTextVector(Element xml) {
,    INDIProperty prop = processNewXXXVector(xml);
,
,    if (prop == null) {
,      return;
,    }
,
,    if (!(prop instanceof INDITextProperty)) {
,      return;
,    }
,
,    INDIElementAndValue[] evs = processINDIElements(prop, xml);
,
,    Date timestamp = INDIDateFormat.parseTimestamp(xml.getAttribute(""timestamp""));
,
,    INDITextElementAndValue[] newEvs = new INDITextElementAndValue[evs.length];
,
,    for (int i = 0 ; i <MASK> newEvs.length ; i++) {
,      newEvs[i] = (INDITextElementAndValue)evs[i];
,    }
,
,    processNewTextValue((INDITextProperty)prop, timestamp, newEvs);
,  }
"
ca71ff97-f13f-4754-9fe6-55e1b1ff5a2a,d58fa73d-a727-4b9a-90fc-80b8ea08ee4a,PLUS,"PUBLIC,void,bowBack,LPAREN,Friend,bower,RPAREN,LBRACE,printMessage,LPAREN,bower,DOT,getName,LPAREN,RPAREN,<MASK>,"" has bowed back to me!"",RPAREN,SEMI,RBRACE","        public void bowBack(Friend bower) {
,            printMessage(bower.getName() <MASK> "" has bowed back to me!"");
,        }
"
7a6d4ee7-a11c-445d-8f58-7963e611bee0,96ed96a4-9777-4a1c-9391-82577d65d6e1,BANGEQ,"MONKEYS_AT,Override,PUBLIC,void,updateSucess,LPAREN,Update,update,RPAREN,LBRACE,IF,LPAREN,cancelled,EQEQ,true,RPAREN,LBRACE,RETURN,SEMI,RBRACE,IF,LPAREN,update,EQEQ,null,RPAREN,LBRACE,lblStatus,DOT,setIcon,LPAREN,null,RPAREN,SEMI,lblStatus,DOT,setText,LPAREN,""An error occurred while checking for new updates."",RPAREN,SEMI,lblDetails,DOT,setText,LPAREN,""Nothing has been changed. You can close this window."",RPAREN,SEMI,setDefaultCloseOperation,LPAREN,JFrame,DOT,DISPOSE_ON_CLOSE,RPAREN,SEMI,progressBar,DOT,setIndeterminate,LPAREN,false,RPAREN,SEMI,JOptionPane,DOT,showMessageDialog,LPAREN,null,COMMA,""An error occurred while checking for new updates."",COMMA,""DynQuiz Updater v1.6"",COMMA,JOptionPane,DOT,ERROR_MESSAGE,RPAREN,SEMI,RETURN,SEMI,RBRACE,IF,LPAREN,update,DOT,getName,LPAREN,RPAREN,DOT,equals,LPAREN,getCurrent,LPAREN,RPAREN,DOT,getName,LPAREN,RPAREN,RPAREN,RPAREN,LBRACE,IF,LPAREN,update,DOT,getVersion,LPAREN,RPAREN,DOT,equalsIgnoreCase,LPAREN,getCurrent,LPAREN,RPAREN,DOT,getVersion,LPAREN,RPAREN,RPAREN,RPAREN,LBRACE,lblStatus,DOT,setIcon,LPAREN,null,RPAREN,SEMI,lblStatus,DOT,setText,LPAREN,""No Update found! You have already the newest version."",RPAREN,SEMI,lblDetails,DOT,setText,LPAREN,""Nothing has been changed. You can close this window."",RPAREN,SEMI,setDefaultCloseOperation,LPAREN,JFrame,DOT,DISPOSE_ON_CLOSE,RPAREN,SEMI,progressBar,DOT,setIndeterminate,LPAREN,false,RPAREN,SEMI,JOptionPane,DOT,showMessageDialog,LPAREN,null,COMMA,""No Update found! You have already the newest version."",COMMA,""DynQuiz Updater v1.6"",COMMA,JOptionPane,DOT,INFORMATION_MESSAGE,RPAREN,SEMI,RETURN,SEMI,RBRACE,progressBar,DOT,setIndeterminate,LPAREN,false,RPAREN,SEMI,lblStatus,DOT,setText,LPAREN,""Waiting for user response..."",RPAREN,SEMI,lblDetails,DOT,setText,LPAREN,""New Update found! Update version: "",PLUS,update,DOT,getVersion,LPAREN,RPAREN,RPAREN,SEMI,int,result,EQ,JOptionPane,DOT,showConfirmDialog,LPAREN,null,COMMA,""New Update found!\nUpdate version: "",PLUS,update,DOT,getVersion,LPAREN,RPAREN,PLUS,""\nYour version: "",PLUS,getCurrent,LPAREN,RPAREN,DOT,getVersion,LPAREN,RPAREN,PLUS,""\n\nDo you want to download the new Update?"",COMMA,""DynQuiz Updater v1.6"",COMMA,JOptionPane,DOT,YES_NO_CANCEL_OPTION,COMMA,JOptionPane,DOT,QUESTION_MESSAGE,RPAREN,SEMI,IF,LPAREN,result,EQEQ,JOptionPane,DOT,YES_OPTION,RPAREN,LBRACE,TRY,LBRACE,download,EQ,NEW,Download,LPAREN,NEW,URL,LPAREN,update,DOT,getUpdate,LPAREN,RPAREN,RPAREN,RPAREN,SEMI,NEW,Thread,LPAREN,NEW,Runnable,LPAREN,RPAREN,LBRACE,PUBLIC,void,run,LPAREN,RPAREN,LBRACE,lblStatus,DOT,setText,LPAREN,""Downloading update... Please wait."",RPAREN,SEMI,WHILE,LPAREN,download,DOT,getStatus,LPAREN,RPAREN,EQEQ,Download,DOT,DOWNLOADING,RPAREN,LBRACE,progressBar,DOT,setValue,LPAREN,LPAREN,int,RPAREN,download,DOT,getProgress,LPAREN,RPAREN,RPAREN,SEMI,int,downloaded,EQ,LPAREN,download,DOT,getDownloaded,LPAREN,RPAREN,SLASH,1024,RPAREN,SEMI,int,size,EQ,LPAREN,download,DOT,getSize,LPAREN,RPAREN,SLASH,1024,RPAREN,SEMI,lblDetails,DOT,setText,LPAREN,""Downloading file: "",PLUS,downloaded,PLUS,""kB /"",PLUS,size,PLUS,""kB ("",PLUS,LPAREN,int,RPAREN,download,DOT,getProgress,LPAREN,RPAREN,PLUS,""%)"",RPAREN,SEMI,RBRACE,IF,LPAREN,download,DOT,getStatus,LPAREN,RPAREN,<MASK>,Download,DOT,COMPLETE,RPAREN,LBRACE,lblStatus,DOT,setIcon,LPAREN,null,RPAREN,SEMI,lblStatus,DOT,setText,LPAREN,""Update has been cancelled by user."",RPAREN,SEMI,lblDetails,DOT,setText,LPAREN,""Nothing has been changed. You can close this window."",RPAREN,SEMI,setDefaultCloseOperation,LPAREN,JFrame,DOT,DISPOSE_ON_CLOSE,RPAREN,SEMI,File,file,EQ,NEW,File,LPAREN,download,DOT,getFileName,LPAREN,RPAREN,RPAREN,SEMI,IF,LPAREN,file,DOT,exists,LPAREN,RPAREN,RPAREN,LBRACE,file,DOT,delete,LPAREN,RPAREN,SEMI,RBRACE,RETURN,SEMI,RBRACE,System,DOT,gc,LPAREN,RPAREN,SEMI,File,jar,EQ,getJarFile,LPAREN,RPAREN,SEMI,IF,LPAREN,jar,DOT,exists,LPAREN,RPAREN,RPAREN,LBRACE,jar,DOT,deleteOnExit,LPAREN,RPAREN,SEMI,RBRACE,lblStatus,DOT,setIcon,LPAREN,null,RPAREN,SEMI,lblStatus,DOT,setText,LPAREN,""Finished! Update sucessfully downloaded."",RPAREN,SEMI,lblDetails,DOT,setText,LPAREN,""File sucessfully downloaded!"",RPAREN,SEMI,setDefaultCloseOperation,LPAREN,JFrame,DOT,EXIT_ON_CLOSE,RPAREN,SEMI,progressBar,DOT,setValue,LPAREN,100,RPAREN,SEMI,int,result,EQ,JOptionPane,DOT,showConfirmDialog,LPAREN,null,COMMA,""Update sucessfully downloaded!\nTo apply the changes, this program needs to be restarted.\nDo you like to restart this application?"",COMMA,""DynQuiz Updater v1.6"",COMMA,JOptionPane,DOT,YES_NO_OPTION,COMMA,JOptionPane,DOT,QUESTION_MESSAGE,RPAREN,SEMI,IF,LPAREN,result,EQEQ,JOptionPane,DOT,YES_OPTION,RPAREN,LBRACE,TRY,LBRACE,restartApplication,LPAREN,NEW,File,LPAREN,download,DOT,getFileName,LPAREN,RPAREN,RPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,Exception,ex,RPAREN,LBRACE,System,DOT,exit,LPAREN,0,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,RBRACE,RPAREN,DOT,start,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,Exception,ex,RPAREN,LBRACE,RBRACE,RBRACE,ELSE,LBRACE,lblStatus,DOT,setIcon,LPAREN,null,RPAREN,SEMI,lblStatus,DOT,setText,LPAREN,""Update has been cancelled by user."",RPAREN,SEMI,lblDetails,DOT,setText,LPAREN,""Nothing has been changed. You can close this window."",RPAREN,SEMI,setDefaultCloseOperation,LPAREN,JFrame,DOT,DISPOSE_ON_CLOSE,RPAREN,SEMI,RBRACE,RBRACE,RBRACE","			@Override
,			public void updateSucess(Update update) 
,			{
,				if(cancelled == true)
,				{
,					return;
,				}
,				
,				if(update == null)
,				{
,					lblStatus.setIcon(null);
,					lblStatus.setText(""An error occurred while checking for new updates."");
,					lblDetails.setText(""Nothing has been changed. You can close this window."");
,					setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
,					
,					progressBar.setIndeterminate(false);
,					JOptionPane.showMessageDialog(null, ""An error occurred while checking for new updates."", ""DynQuiz Updater v1.6"", JOptionPane.ERROR_MESSAGE);
,					return;
,				}
,				
,				if(update.getName().equals(getCurrent().getName()))
,				{
,					if(update.getVersion().equalsIgnoreCase(getCurrent().getVersion()))
,					{
,						lblStatus.setIcon(null);
,						lblStatus.setText(""No Update found! You have already the newest version."");
,						lblDetails.setText(""Nothing has been changed. You can close this window."");
,						setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
,						
,						progressBar.setIndeterminate(false);
,						JOptionPane.showMessageDialog(null, ""No Update found! You have already the newest version."", ""DynQuiz Updater v1.6"", JOptionPane.INFORMATION_MESSAGE);
,						return;
,					}
,					
,					progressBar.setIndeterminate(false);
,					lblStatus.setText(""Waiting for user response..."");
,					lblDetails.setText(""New Update found! Update version: "" + update.getVersion());
,					int result = JOptionPane.showConfirmDialog(null, ""New Update found!\nUpdate version: "" + update.getVersion() + ""\nYour version: "" + getCurrent().getVersion() + ""\n\nDo you want to download the new Update?"", ""DynQuiz Updater v1.6"", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
,					if(result == JOptionPane.YES_OPTION)
,					{
,						try 
,						{
,							download = new Download(new URL(update.getUpdate()));
,							new Thread(new Runnable() 
,							{
,								public void run() 
,								{
,									lblStatus.setText(""Downloading update... Please wait."");
,									while(download.getStatus() == Download.DOWNLOADING)
,									{
,										progressBar.setValue((int) download.getProgress());
,										int downloaded = (download.getDownloaded() / 1024);
,										int size = (download.getSize() / 1024);
,										
,										lblDetails.setText(""Downloading file: "" + downloaded + ""kB /"" + size + ""kB ("" + (int) download.getProgress() + ""%)"");
,									}
,									
,									if(download.getStatus() <MASK> Download.COMPLETE)
,									{
,										lblStatus.setIcon(null);
,										lblStatus.setText(""Update has been cancelled by user."");
,										lblDetails.setText(""Nothing has been changed. You can close this window."");
,										setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
,										
,										File file = new File(download.getFileName());
,										if(file.exists())
,										{
,											file.delete();
,										}
,										
,										return;
,									}
,									
,									//Release unused files
,									System.gc();
,									
,									File jar = getJarFile();
,									if(jar.exists())
,									{
,										jar.deleteOnExit();
,									}
,								
,									lblStatus.setIcon(null);
,									lblStatus.setText(""Finished! Update sucessfully downloaded."");
,									lblDetails.setText(""File sucessfully downloaded!"");
,									setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
,									progressBar.setValue(100);
,									
,									int result = JOptionPane.showConfirmDialog(null, ""Update sucessfully downloaded!\nTo apply the changes, this program needs to be restarted.\nDo you like to restart this application?"", ""DynQuiz Updater v1.6"", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
,									if(result == JOptionPane.YES_OPTION)
,									{
,										try
,										{
,											restartApplication(new File(download.getFileName()));
,										}
,										catch(Exception ex) 
,										{
,											System.exit(0);
,										}
,									}
,								}
,							}).start();
,						}
,						catch (Exception ex) {}
,					}
,					else
,					{
,						lblStatus.setIcon(null);
,						lblStatus.setText(""Update has been cancelled by user."");
,						lblDetails.setText(""Nothing has been changed. You can close this window."");
,						setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
,					}
,				}
,			}
"
92951106-a87f-4e0c-9019-4852bf22d1be,79d48321-9bd0-49d1-9eac-026e51f97055,PLUS,"PUBLIC,STATIC,void,postOrder,LPAREN,BST,root,RPAREN,LBRACE,IF,LPAREN,root,BANGEQ,null,RPAREN,LBRACE,postOrder,LPAREN,root,DOT,left,RPAREN,SEMI,postOrder,LPAREN,root,DOT,right,RPAREN,SEMI,System,DOT,out,DOT,print,LPAREN,root,DOT,value,<MASK>,"" "",RPAREN,SEMI,RBRACE,RBRACE","	public static void postOrder(BST root) {
,		if (root != null) {
,		    postOrder(root.left);
,		    postOrder(root.right);
,			System.out.print(root.value <MASK> "" "");
,		}
,	}
"
113c5414-6c55-466b-b879-a350ab6e0ca2,95ee8691-0610-46d1-9f9e-4cb1e3f82065,EQ,"MONKEYS_AT,Override,PROTECTED,void,generateMap,LPAREN,RPAREN,LBRACE,this,DOT,room,<MASK>,ROOM,SEMI,super,DOT,fillRoom,LPAREN,room,RPAREN,SEMI,super,DOT,addRoom,LPAREN,room,RPAREN,SEMI,RBRACE","	@Override
,	protected void generateMap() {
,		this.room <MASK> ROOM;
,
,		super.fillRoom(room);
,		super.addRoom(room);
,
,
,	}
"
6c241594-f2fc-4996-bfc9-c7ef863c220a,4863d008-6614-43fd-9ce6-78955a9960b5,LTEQ,"PUBLIC,void,resume,LPAREN,int,port,RPAREN,THROWS,IOException,LBRACE,IF,LPAREN,port,<MASK>,0,BARBAR,port,GT,ports,RPAREN,THROW,NEW,IllegalArgumentException,LPAREN,RPAREN,SEMI,ControlMessage,DOT,clearFeature,LPAREN,dev,COMMA,ControlMessage,DOT,TYPE_CLASS,BAR,ControlMessage,DOT,RECIPIENT_OTHER,COMMA,PORT_SUSPEND,COMMA,port,RPAREN,SEMI,RBRACE","    public void resume (int port)
,    throws IOException
,    {
,	if (port <MASK> 0 || port > ports)
,	    throw new IllegalArgumentException ();
,	ControlMessage.clearFeature (dev,
,	    ControlMessage.TYPE_CLASS | ControlMessage.RECIPIENT_OTHER,
,	    PORT_SUSPEND,
,	    port
,	    );
,    }
"
ee6285e4-70fb-4aa1-99e0-6f8cd1871b27,bfea72c7-f1ed-446a-94fd-c2cc28eff0ae,LTEQ,"PUBLIC,String,result,LPAREN,String,string,RPAREN,LBRACE,IF,LPAREN,list,DOT,contains,LPAREN,string,RPAREN,RPAREN,LBRACE,RETURN,"""",SEMI,RBRACE,IF,LPAREN,string,DOT,length,LPAREN,RPAREN,<MASK>,2,RPAREN,RETURN,"""",SEMI,IF,LPAREN,LPAREN,matcher,EQ,Pattern,DOT,compile,LPAREN,reg2,RPAREN,DOT,matcher,LPAREN,string,RPAREN,RPAREN,DOT,find,LPAREN,RPAREN,RPAREN,RETURN,"""",SEMI,IF,LPAREN,LPAREN,matcher,EQ,Pattern,DOT,compile,LPAREN,reg1,RPAREN,DOT,matcher,LPAREN,string,RPAREN,RPAREN,DOT,find,LPAREN,RPAREN,RPAREN,RETURN,"""",SEMI,ELSE,RETURN,string,SEMI,RBRACE","	public String result(String string) {
,		if (list.contains(string)) {
,			return """";
,		}
,		if (string.length() <MASK> 2)
,			return """";
,		if ((matcher = Pattern.compile(reg2).matcher(string)).find())
,			return """";
,		if ((matcher = Pattern.compile(reg1).matcher(string)).find())
,			return """";
,		/*if(string.equals(""-lrb-"")||string.equals(""-rrb-""))
,			return """";*/
,		else 
,			return string;
,	}
"
8830017b-dcb2-4301-89b3-826724c1fc62,45932b5d-3b90-4083-9dc1-86d8590157a1,LTEQ,"PUBLIC,STATIC,int,numTrees,LPAREN,int,n,RPAREN,LBRACE,IF,LPAREN,n,<MASK>,1,RPAREN,LBRACE,RETURN,1,SEMI,RBRACE,RETURN,num,LPAREN,1,COMMA,n,RPAREN,SEMI,RBRACE","	public static int numTrees(int n) {
,		if (n <MASK> 1) {
,			return 1;
,		}
,		return num(1, n);
,	}
"
38ed5e2e-bfac-4cc9-94e0-5ee38dabb0ca,bc69c0b3-e300-435b-8d46-50923f7d9cd4,EQEQ,"PRIVATE,STATIC,Object,LBRACKET,RBRACKET,remove2,LPAREN,Object,LBRACKET,RBRACKET,ary,COMMA,int,idx,RPAREN,LBRACE,int,nkeys,EQ,ary,DOT,length,GTGT,1,SEMI,IF,LPAREN,nkeys,<MASK>,1,RPAREN,RETURN,null,SEMI,ELSE,LBRACE,Object,LBRACKET,RBRACKET,a,EQ,NEW,Object,LBRACKET,ary,DOT,length,SUB,2,RBRACKET,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,idx,SEMI,PLUSPLUS,i,RPAREN,LBRACE,a,LBRACKET,i,RBRACKET,EQ,ary,LBRACKET,i,RBRACKET,SEMI,a,LBRACKET,i,PLUS,nkeys,SUB,1,RBRACKET,EQ,ary,LBRACKET,i,PLUS,nkeys,RBRACKET,SEMI,RBRACE,FOR,LPAREN,int,i,EQ,idx,PLUS,1,SEMI,i,LT,nkeys,SEMI,PLUSPLUS,i,RPAREN,LBRACE,a,LBRACKET,i,SUB,1,RBRACKET,EQ,ary,LBRACKET,i,RBRACKET,SEMI,a,LBRACKET,i,PLUS,nkeys,SUB,2,RBRACKET,EQ,ary,LBRACKET,i,PLUS,nkeys,RBRACKET,SEMI,RBRACE,RETURN,a,SEMI,RBRACE,RBRACE","    private static Object[] remove2(Object[] ary, int idx) {
,	int nkeys = ary.length >> 1;
,	if (nkeys <MASK> 1) return null;
,	else {
,	    Object[] a = new Object[ary.length - 2];
,	    for (int i = 0; i < idx; ++i) {
,		a[i] = ary[i];
,		a[i + nkeys - 1] = ary[i + nkeys];
,	    }
,	    for (int i = idx + 1; i < nkeys; ++i) {
,		a[i - 1] = ary[i];
,		a[i + nkeys - 2] = ary[i + nkeys];
,	    }
,	    return a;
,	}
,    }
"
2170437a-9f53-47a2-b3cb-257eca2eb4ab,5bb29448-f201-4c93-99ef-e34c5b734587,EQEQ,"PUBLIC,boolean,addUser,LPAREN,User,toAdd,RPAREN,LBRACE,boolean,inserted,EQ,false,SEMI,IF,LPAREN,toAdd,BANGEQ,null,RPAREN,LBRACE,IF,LPAREN,exists,LPAREN,toAdd,RPAREN,<MASK>,false,RPAREN,LBRACE,users,DOT,add,LPAREN,toAdd,RPAREN,SEMI,inserted,EQ,dataAccess,DOT,insertUser,LPAREN,toAdd,RPAREN,SEMI,RBRACE,RBRACE,ELSE,LBRACE,THROW,NEW,IllegalArgumentException,LPAREN,""Cannot add null!"",RPAREN,SEMI,RBRACE,RETURN,inserted,SEMI,RBRACE","	public boolean addUser(User toAdd)
,	{
,		boolean inserted = false;
,		
,		if (toAdd != null)
,		{
,			if (exists(toAdd) <MASK> false)
,			{
,				users.add(toAdd);
,				inserted = dataAccess.insertUser(toAdd);
,			}
,		}
,		else
,		{
,			throw new IllegalArgumentException(""Cannot add null!"");
,		}
,		
,		return inserted;
,	}
"
a98e10ef-3b3e-45e8-a98b-65ce2200211b,9c720ac2-f5a5-4513-98ff-5eef6c5b4c38,GTEQ,"boolean,tokenChar,LPAREN,RPAREN,LBRACE,RETURN,BANG,eof,LPAREN,RPAREN,AMPAMP,Parser,DOT,token,DOT,indexOf,LPAREN,curr,LPAREN,RPAREN,RPAREN,<MASK>,0,SEMI,RBRACE","	boolean tokenChar()    { return !eof() && Parser.token.indexOf(curr()) <MASK> 0; }
"
0cadc92e-3d00-4c9b-b4a2-174a03a56a77,637069da-f163-4e60-a1ee-4d22fdb8eeb3,PLUS,"PUBLIC,AbstractUnaryOperator,LPAREN,AbstractMutableFormula,formula,RPAREN,LBRACE,this,DOT,formula,EQ,formula,SEMI,subtreeSize,EQ,formula,DOT,getSubtreeSize,LPAREN,RPAREN,<MASK>,1,SEMI,RBRACE","	public AbstractUnaryOperator(AbstractMutableFormula formula) {
,		this.formula = formula;
,		subtreeSize = formula.getSubtreeSize() <MASK> 1;
,	}
"
3913c395-db09-4ac4-8282-49a81b6a21f4,a7267314-1bb7-42f8-a1a4-dee5dea418d7,BANGEQ,"PUBLIC,void,update,LPAREN,RPAREN,LBRACE,img,EQ,NEW,BufferedImage,LPAREN,tileMap,DOT,getWidth,LPAREN,RPAREN,STAR,tileMap,DOT,getTileWidth,LPAREN,RPAREN,COMMA,tileMap,DOT,getHeight,LPAREN,RPAREN,STAR,tileMap,DOT,getTileHeight,LPAREN,RPAREN,COMMA,ColorModel,DOT,TRANSLUCENT,RPAREN,SEMI,Graphics2D,g,EQ,LPAREN,Graphics2D,RPAREN,img,DOT,getGraphics,LPAREN,RPAREN,SEMI,g,DOT,setComposite,LPAREN,AlphaComposite,DOT,getInstance,LPAREN,AlphaComposite,DOT,SRC_OVER,RPAREN,RPAREN,SEMI,int,dx,EQ,0,COMMA,dy,EQ,0,COMMA,id,SEMI,int,tw,EQ,tileMap,DOT,getTileWidth,LPAREN,RPAREN,SEMI,int,th,EQ,tileMap,DOT,getTileHeight,LPAREN,RPAREN,SEMI,Tileset,ts,EQ,tileMap,DOT,getTileset,LPAREN,RPAREN,SEMI,BufferedImage,tileImg,SEMI,TileData,td,SEMI,float,LBRACKET,RBRACKET,dash,EQ,LBRACE,10.0f,RBRACE,SEMI,g,DOT,setStroke,LPAREN,NEW,BasicStroke,LPAREN,1.0f,COMMA,BasicStroke,DOT,CAP_BUTT,COMMA,BasicStroke,DOT,JOIN_MITER,COMMA,10.0f,COMMA,dash,COMMA,0.0f,RPAREN,RPAREN,SEMI,FOR,LPAREN,int,l,EQ,0,SEMI,l,LT,tileMap,DOT,getLayerCount,LPAREN,RPAREN,SEMI,l,PLUSPLUS,RPAREN,LBRACE,dy,EQ,0,SEMI,FOR,LPAREN,int,y,EQ,0,SEMI,y,LT,tileMap,DOT,getHeight,LPAREN,l,RPAREN,SEMI,y,PLUSPLUS,RPAREN,LBRACE,dx,EQ,0,SEMI,FOR,LPAREN,int,x,EQ,0,SEMI,x,LT,tileMap,DOT,getWidth,LPAREN,l,RPAREN,SEMI,x,PLUSPLUS,RPAREN,LBRACE,id,EQ,tileMap,DOT,getTileId,LPAREN,l,COMMA,x,COMMA,y,RPAREN,SEMI,td,EQ,ts,DOT,get,LPAREN,id,RPAREN,SEMI,tileImg,EQ,td,DOT,getImage,LPAREN,RPAREN,DOT,getImage,LPAREN,RPAREN,SEMI,IF,LPAREN,tileImg,<MASK>,null,RPAREN,LBRACE,g,DOT,drawImage,LPAREN,tileImg,COMMA,dx,COMMA,dy,COMMA,null,RPAREN,SEMI,IF,LPAREN,GameSettings,DOT,getInstance,LPAREN,RPAREN,DOT,isDebugMode,LPAREN,RPAREN,RPAREN,LBRACE,g,DOT,setColor,LPAREN,Color,DOT,gray,RPAREN,SEMI,IF,LPAREN,""1"",DOT,equals,LPAREN,td,DOT,getProperty,LPAREN,""landBlocked"",RPAREN,RPAREN,RPAREN,LBRACE,g,DOT,setColor,LPAREN,NEW,Color,LPAREN,255,COMMA,0,COMMA,0,COMMA,128,RPAREN,RPAREN,SEMI,g,DOT,fillRect,LPAREN,x,STAR,tw,COMMA,y,STAR,th,COMMA,tw,COMMA,th,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,dx,PLUSEQ,tw,SEMI,RBRACE,dy,PLUSEQ,th,SEMI,RBRACE,RBRACE,dirty,EQ,false,SEMI,img,EQ,ImageUtils,DOT,toCompatibleImage,LPAREN,img,RPAREN,SEMI,RBRACE","	public void update() {
,		img = new BufferedImage(tileMap.getWidth()*tileMap.getTileWidth(), 
,				tileMap.getHeight()*tileMap.getTileHeight(), ColorModel.TRANSLUCENT);
,		Graphics2D g = (Graphics2D)img.getGraphics();
,		
,		g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER));
,		
,		int dx = 0, dy = 0, id;
,		int tw = tileMap.getTileWidth();
,		int th = tileMap.getTileHeight();
,		Tileset ts = tileMap.getTileset();
,		BufferedImage tileImg;
,		TileData td;
,		
,		float[] dash = {10.0f};
,		g.setStroke(new BasicStroke(1.0f,
,                BasicStroke.CAP_BUTT,
,                BasicStroke.JOIN_MITER,
,                10.0f, dash, 0.0f));
,		
,		for (int l = 0; l < tileMap.getLayerCount(); l++) {
,			dy = 0;
,			for (int y = 0; y < tileMap.getHeight(l); y++) {
,				dx = 0;
,				for (int x = 0; x < tileMap.getWidth(l); x++) {
,					id = tileMap.getTileId(l, x, y);
,					td = ts.get(id);
,					tileImg = td.getImage().getImage();
,					if (tileImg <MASK> null) {
,						g.drawImage(tileImg, dx, dy, null);
,						if (GameSettings.getInstance().isDebugMode()) {
,							g.setColor(Color.gray);
,							//g.drawRect(x*tw, y*th, tw, th);
,							if (""1"".equals(td.getProperty(""landBlocked""))) {
,								g.setColor(new Color(255, 0, 0, 128));
,								g.fillRect(x*tw, y*th, tw, th);
,							}
,						}
,					}
,					dx += tw;
,				}
,				dy += th;
,			}
,		}
,		dirty = false;
,		
,		img = ImageUtils.toCompatibleImage(img);
,		
,		
,	}
"
3913c395-db09-4ac4-8282-49a81b6a21f4,ecaf655c-394f-4627-aa6f-26a59d35e637,LT,"PROTECTED,int,findContainingChild,LPAREN,Rectangle,bds,RPAREN,LBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,4,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,children,LBRACKET,i,RBRACKET,DOT,bounds,DOT,contains,LPAREN,bds,RPAREN,RPAREN,RETURN,i,SEMI,RBRACE,RETURN,SUB,1,SEMI,RBRACE","	protected int findContainingChild(Rectangle bds) {
,		// TODO: This can be done more efficient.
,		for (int i = 0; i <MASK> 4; i++) {
,			if (children[i].bounds.contains(bds)) return i;
,		}
,		return -1;
,	}
"
13ade84f-7d2c-4f3f-a13f-aa7abf8a58a5,d0c88555-3d5e-4813-a273-956dcfb7ca36,SUB,"PRIVATE,void,dfs,LPAREN,String,s,COMMA,int,start,COMMA,List,LT,List,LT,String,GTGT,result,COMMA,List,LT,String,GT,current,COMMA,boolean,LBRACKET,RBRACKET,LBRACKET,RBRACKET,isP,RPAREN,LBRACE,IF,LPAREN,start,EQEQ,s,DOT,length,LPAREN,RPAREN,RPAREN,LBRACE,result,DOT,add,LPAREN,NEW,ArrayList,LT,GT,LPAREN,current,RPAREN,RPAREN,SEMI,RBRACE,FOR,LPAREN,int,end,EQ,start,SEMI,end,LT,s,DOT,length,LPAREN,RPAREN,SEMI,end,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,isP,LBRACKET,start,RBRACKET,LBRACKET,end,RBRACKET,RPAREN,LBRACE,current,DOT,add,LPAREN,s,DOT,substring,LPAREN,start,COMMA,end,PLUS,1,RPAREN,RPAREN,SEMI,dfs,LPAREN,s,COMMA,end,PLUS,1,COMMA,result,COMMA,current,COMMA,isP,RPAREN,SEMI,current,DOT,remove,LPAREN,current,DOT,size,LPAREN,RPAREN,<MASK>,1,RPAREN,SEMI,RBRACE,RBRACE,RBRACE","	private void dfs(String s, int start, List<List<String>> result, List<String> current, boolean[][] isP) {
,		if (start == s.length()) {
,			result.add(new ArrayList<>(current));
,		}
,		for (int end = start; end < s.length(); end++) {
,			if (isP[start][end]) {
,				current.add(s.substring(start, end + 1)); // save memory space here is really important
,				dfs(s, end + 1, result, current, isP);
,				current.remove(current.size() <MASK> 1);
,			}
,		}
,	}
"
41e528e8-032e-4c9c-aedf-8273f5e22315,6b72de4b-8af1-4938-84fc-f23a378875b4,PERCENT,"PUBLIC,STATIC,void,main,LPAREN,String,LBRACKET,RBRACKET,args,RPAREN,LBRACE,Scanner,sc,EQ,NEW,Scanner,LPAREN,System,DOT,in,RPAREN,SEMI,System,DOT,out,DOT,print,LPAREN,""Please enter integer number A:"",RPAREN,SEMI,int,a,EQ,sc,DOT,nextInt,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,print,LPAREN,""Please enter integer number B:"",RPAREN,SEMI,int,b,EQ,sc,DOT,nextInt,LPAREN,RPAREN,SEMI,long,sum,EQ,0,SEMI,FOR,LPAREN,int,i,EQ,a,SEMI,i,LTEQ,b,SEMI,i,PLUSPLUS,RPAREN,LBRACE,int,product,EQ,i,STAR,i,SEMI,IF,LPAREN,LPAREN,product,RPAREN,<MASK>,3,BANGEQ,0,RPAREN,LBRACE,sum,PLUSEQ,product,SEMI,IF,LPAREN,sum,GT,200,RPAREN,LBRACE,BREAK,SEMI,RBRACE,System,DOT,out,DOT,print,LPAREN,product,PLUS,"", "",RPAREN,SEMI,RBRACE,ELSE,LBRACE,System,DOT,out,DOT,print,LPAREN,""skip "",PLUS,i,PLUS,"", "",RPAREN,SEMI,RBRACE,RBRACE,RBRACE","	public static void main(String[] args) {
,		Scanner sc = new Scanner(System.in);
,		System.out.print(""Please enter integer number A:"");
,		int a = sc.nextInt();
,		System.out.print(""Please enter integer number B:"");
,		int b = sc.nextInt();
,		long sum = 0;
,		
,			for (int i = a; i <= b; i++) {
,				int product = i * i;
,				if ((product) <MASK> 3 != 0) {
,					sum += product;
,					if (sum > 200) {
,						break;
,					}
,					System.out.print(product + "", "");
,					
,				} else {
,					System.out.print(""skip "" + i + "", "");
,				}
,			}
,
,	}
"
b5ee7e5e-a7bf-41d4-8880-3ac95d2f8822,f4dd0e99-992c-4158-bb49-dddd69c0be00,PLUS,"PUBLIC,void,clean,LPAREN,RPAREN,LBRACE,TRY,LBRACE,DatabaseMetaData,md,EQ,conn,DOT,getMetaData,LPAREN,RPAREN,SEMI,ResultSet,rs,EQ,md,DOT,getTables,LPAREN,null,COMMA,null,COMMA,""%"",COMMA,null,RPAREN,SEMI,stmt,EQ,conn,DOT,createStatement,LPAREN,RPAREN,SEMI,WHILE,LPAREN,rs,DOT,next,LPAREN,RPAREN,RPAREN,LBRACE,String,name,EQ,rs,DOT,getString,LPAREN,3,RPAREN,SEMI,IF,LPAREN,name,DOT,contains,LPAREN,""T1564915759"",RPAREN,BARBAR,name,DOT,contains,LPAREN,""T2003359763"",RPAREN,BARBAR,name,DOT,contains,LPAREN,""T2078457880"",RPAREN,BARBAR,name,DOT,contains,LPAREN,""T225294351"",RPAREN,BARBAR,name,DOT,contains,LPAREN,""T300392468"",RPAREN,BARBAR,name,DOT,contains,LPAREN,""T375490585"",RPAREN,BARBAR,name,DOT,contains,LPAREN,""T450588702"",RPAREN,BARBAR,name,DOT,contains,LPAREN,""T525686819"",RPAREN,BARBAR,name,DOT,contains,LPAREN,""T600784936"",RPAREN,BARBAR,name,DOT,contains,LPAREN,""T675883053"",RPAREN,BARBAR,name,DOT,contains,LPAREN,""T75098117"",RPAREN,BARBAR,name,DOT,contains,LPAREN,""T826079287"",RPAREN,BARBAR,name,DOT,contains,LPAREN,""T964130823"",RPAREN,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,name,RPAREN,SEMI,stmt,DOT,executeUpdate,LPAREN,""DROP TABLE "",<MASK>,name,RPAREN,SEMI,RBRACE,RBRACE,stmt,DOT,close,LPAREN,RPAREN,SEMI,conn,DOT,commit,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,SQLException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,RBRACE","	public void clean(){
,		try {
,			DatabaseMetaData md = conn.getMetaData();
,			ResultSet rs = md.getTables(null, null, ""%"", null);
,			stmt = conn.createStatement();
,			while (rs.next()) {
,				String name = rs.getString(3);
,			  if(name.contains(""T1564915759"")||
,			     name.contains(""T2003359763"")||
,			     name.contains(""T2078457880"")||
,			     name.contains(""T225294351"")||
,			     name.contains(""T300392468"")||
,			     name.contains(""T375490585"")||
,			     name.contains(""T450588702"")||
,			     name.contains(""T525686819"")||
,			     name.contains(""T600784936"")||
,			     name.contains(""T675883053"")||
,			     name.contains(""T75098117"")||
,			     name.contains(""T826079287"")||
,			     name.contains(""T964130823"")){
,				  System.out.println(name);
,				  stmt.executeUpdate(""DROP TABLE "" <MASK> name);
,			  }
,			}
,			stmt.close();
,			conn.commit();
,
,		} catch (SQLException e) {
,			e.printStackTrace();
,		}
,	}
"
2bfa31fa-daf7-43ee-b7ee-b5502db2e4fe,e9ed4976-cf85-4469-a010-1773e9079551,STAR,"STATIC,int,convertToPixels,LPAREN,float,value,COMMA,String,unit,COMMA,boolean,isHor,COMMA,float,ref,COMMA,ContainerWrapper,parent,COMMA,ComponentWrapper,comp,RPAREN,LBRACE,UnitValue,uv,EQ,LPAREN,isHor,QUES,HOR_DEFS,COLON,VER_DEFS,RPAREN,DOT,get,LPAREN,unit,RPAREN,SEMI,RETURN,uv,BANGEQ,null,QUES,Math,DOT,round,LPAREN,value,<MASK>,uv,DOT,getPixels,LPAREN,ref,COMMA,parent,COMMA,comp,RPAREN,RPAREN,COLON,UnitConverter,DOT,UNABLE,SEMI,RBRACE","	static int convertToPixels(float value, String unit, boolean isHor, float ref, ContainerWrapper parent, ComponentWrapper comp)
,	{
,		UnitValue uv = (isHor ? HOR_DEFS : VER_DEFS).get(unit);
,		return uv != null ? Math.round(value <MASK> uv.getPixels(ref, parent, comp)) : UnitConverter.UNABLE;
,	}
"
1b8c895d-7ca3-40d2-8eed-2c6100c60c79,e5108c45-548b-4a52-8400-1d4cc5998497,BANGEQ,"PRIVATE,void,addFriend,LPAREN,ActionEvent,e,RPAREN,LBRACE,int,row,EQ,table,DOT,getSelectedRow,LPAREN,RPAREN,SEMI,IF,LPAREN,Constants,DOT,NUM_NEGATIVE_ONE,<MASK>,row,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,table,DOT,getValueAt,LPAREN,row,COMMA,0,RPAREN,PLUS,"" "",PLUS,table,DOT,getValueAt,LPAREN,row,COMMA,1,RPAREN,RPAREN,SEMI,String,friendNO,EQ,String,DOT,valueOf,LPAREN,table,DOT,getValueAt,LPAREN,row,COMMA,0,RPAREN,RPAREN,SEMI,Map,LT,String,COMMA,Object,GT,param,EQ,NEW,HashMap,LT,String,COMMA,Object,GT,LPAREN,RPAREN,SEMI,param,DOT,put,LPAREN,Constants,DOT,IN_USERNO,COMMA,userNOString,RPAREN,SEMI,param,DOT,put,LPAREN,Constants,DOT,IN_FRIENDNO,COMMA,friendNO,RPAREN,SEMI,boolean,flg,EQ,userDao,DOT,addFriend,LPAREN,param,RPAREN,SEMI,String,message,EQ,null,SEMI,IF,LPAREN,flg,RPAREN,LBRACE,message,EQ,""\u6DFB\u52A0\u597D\u53CB\u6210\u529F!"",SEMI,LPAREN,LPAREN,Main,RPAREN,parent,RPAREN,DOT,refreshTree,LPAREN,RPAREN,SEMI,RBRACE,ELSE,LBRACE,message,EQ,""\u6DFB\u52A0\u597D\u53CB\u51FA\u9519!"",SEMI,RBRACE,Alert,error,EQ,NEW,Alert,LPAREN,this,COMMA,true,COMMA,null,RPAREN,SEMI,error,DOT,getLabel,LPAREN,RPAREN,DOT,setText,LPAREN,message,RPAREN,SEMI,error,DOT,setVisible,LPAREN,true,RPAREN,SEMI,this,DOT,dispose,LPAREN,RPAREN,SEMI,RBRACE,RBRACE","	private void addFriend(ActionEvent e) {
,		int row = table.getSelectedRow();
,		if(Constants.NUM_NEGATIVE_ONE <MASK> row){
,			System.out.println(table.getValueAt(row, 0) + "" "" + table.getValueAt(row, 1));
,			String friendNO = String.valueOf(table.getValueAt(row, 0));
,			Map<String, Object> param = new HashMap<String, Object>();
,			param.put(Constants.IN_USERNO, userNOString);
,			param.put(Constants.IN_FRIENDNO, friendNO);
,			boolean flg = userDao.addFriend(param);
,			String message = null;
,			if(flg){
,				message = ""添加好友成功!"";
,				((Main)parent).refreshTree();
,			}else {
,				message = ""添加好友出错!"";
,			}
,			Alert error = new Alert(this, true, null);
,			error.getLabel().setText(message);
,			error.setVisible(true);
,			this.dispose();
,		}
,	}
"
7b0ae379-c293-480e-8c64-3374a3631947,5529a9fd-f960-4b84-91fd-2d34fbfa8dff,SUB,"PUBLIC,int,sumRange,LPAREN,int,start,COMMA,int,end,RPAREN,LBRACE,RETURN,sumRange,LPAREN,start,COMMA,end,COMMA,tree,COMMA,0,COMMA,arrayLength,<MASK>,1,COMMA,0,RPAREN,SEMI,RBRACE","        public int sumRange(int start, int end) {
,            return sumRange(start, end, tree, 0, arrayLength <MASK> 1, 0);
,        }
"
a4c68a60-241d-4ccc-bb34-58eb273247fe,1bef1d28-abfc-411c-b293-f302dabe20e6,PLUS,"MONKEYS_AT,Override,PUBLIC,SvnInfo,DOT,Result,execute,LPAREN,RPAREN,LBRACE,commandLine,DOT,execute,LPAREN,RPAREN,SEMI,IF,LPAREN,isSuccessful,LPAREN,commandLine,RPAREN,RPAREN,LBRACE,String,repositoryRoot,EQ,parse,LPAREN,commandLine,DOT,stdout,LPAREN,RPAREN,RPAREN,SEMI,IF,LPAREN,repositoryRoot,EQEQ,null,RPAREN,LBRACE,RETURN,NEW,Result,LPAREN,asList,LPAREN,""Didn't find svn root in output for "",<MASK>,repositoryUrl,RPAREN,RPAREN,SEMI,RBRACE,ELSE,LBRACE,RETURN,NEW,Result,LPAREN,repositoryRoot,RPAREN,SEMI,RBRACE,RBRACE,ELSE,LBRACE,RETURN,NEW,Result,LPAREN,asList,LPAREN,commandLine,DOT,stdout,LPAREN,RPAREN,RPAREN,RPAREN,SEMI,RBRACE,RBRACE","	@Override public SvnInfo.Result execute() {
,		commandLine.execute();
,
,		if (isSuccessful(commandLine)) {
,			String repositoryRoot = parse(commandLine.stdout());
,			if (repositoryRoot == null) {
,				return new Result(asList(""Didn't find svn root in output for "" <MASK> repositoryUrl));
,			} else {
,				return new Result(repositoryRoot);
,			}
,		} else {
,			return new Result(asList(commandLine.stdout()));
,		}
,	}
"
35ade180-d88e-4313-85ee-c83da04287fd,c398c694-7ba9-4dc0-8d41-576edbceec6b,BANGEQ,"PUBLIC,STATIC,void,main,LPAREN,String,LBRACKET,RBRACKET,args,RPAREN,LBRACE,TRY,LBRACE,FINAL,SieveOfAtkin,sieve,EQ,NEW,SieveOfAtkin,LPAREN,1000000,RPAREN,SEMI,FINAL,ArrayList,LT,Integer,GT,list,EQ,sieve,DOT,run,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,prime,COLON,list,RPAREN,LBRACE,primes,DOT,put,LPAREN,prime,COMMA,primes,DOT,size,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,int,total,EQ,0,SEMI,FOR,LPAREN,int,prime,COLON,list,RPAREN,LBRACE,FINAL,int,LBRACKET,RBRACKET,digits,EQ,Functions,DOT,getDigits,LPAREN,prime,RPAREN,SEMI,FINAL,int,LBRACKET,RBRACKET,v,EQ,NEW,int,LBRACKET,digits,DOT,length,RBRACKET,SEMI,Rotator,rotator,EQ,NEW,Rotator,LPAREN,digits,RPAREN,SEMI,int,LBRACKET,RBRACKET,rotation,EQ,null,SEMI,boolean,found,EQ,true,SEMI,WHILE,LPAREN,LPAREN,rotation,EQ,rotator,DOT,next,LPAREN,RPAREN,RPAREN,<MASK>,null,RPAREN,LBRACE,FINAL,int,p,EQ,Functions,DOT,getInt,LPAREN,rotation,RPAREN,SEMI,IF,LPAREN,BANG,primes,DOT,containsKey,LPAREN,p,RPAREN,RPAREN,LBRACE,found,EQ,false,SEMI,BREAK,SEMI,RBRACE,RBRACE,IF,LPAREN,found,RPAREN,LBRACE,total,PLUSPLUS,SEMI,System,DOT,out,DOT,println,LPAREN,""# special prime "",PLUS,prime,RPAREN,SEMI,RBRACE,RBRACE,System,DOT,out,DOT,println,LPAREN,""# count = "",PLUS,total,RPAREN,SEMI,RBRACE,CATCH,LPAREN,Exception,ex,RPAREN,LBRACE,Logger,DOT,getLogger,LPAREN,Problem035,DOT,CLASS,DOT,getName,LPAREN,RPAREN,RPAREN,DOT,log,LPAREN,Level,DOT,SEVERE,COMMA,null,COMMA,ex,RPAREN,SEMI,RBRACE,RBRACE","    public static void main(String[] args) {
,        try {
,
,            final SieveOfAtkin sieve = new SieveOfAtkin(1000000);
,            final ArrayList<Integer> list = sieve.run();
,            for (int prime : list) {
,//                System.out.println(prime);
,                primes.put(prime, primes.size());
,            }
,
,            int total = 0;
,            for (int prime : list) {
,//            for (int prime : new int[]{9377}) {
,                final int[] digits = Functions.getDigits(prime);
,                final int[] v = new int[digits.length];
,//                final int target = Functions.factorial(digits.length);
,//                final int found = visit(v, digits, digits.length, 0);
,                Rotator rotator = new Rotator(digits);
,                int[] rotation = null;
,                boolean found = true;
,                while ((rotation = rotator.next()) <MASK> null) {
,                    final int p = Functions.getInt(rotation);
,                    if (!primes.containsKey(p)) {
,                        found = false;
,                        break;
,                    }
,                }
,                if (found) {
,                    total++;
,                    System.out.println(""# special prime "" + prime);
,                }
,            }
,            System.out.println(""# count = "" + total);
,        } catch (Exception ex) {
,            Logger.getLogger(Problem035.class.getName()).log(Level.SEVERE, null, ex);
,        }
,    }
"
9dc56b97-3fea-407c-9846-6a4e260a6d89,054c0f25-57d9-4078-ac53-28195bc4ac51,STAR,"PRIVATE,STATIC,int,decodeConnectionId,LPAREN,byte,connectionId,RPAREN,LBRACE,RETURN,LPAREN,int,RPAREN,LPAREN,connectionId,LT,0,QUES,connectionId,SUB,2,<MASK>,Byte,DOT,MIN_VALUE,COLON,connectionId,RPAREN,SEMI,RBRACE","	private static int decodeConnectionId(byte connectionId) {
,		return (int) (connectionId < 0 ? connectionId - 2<MASK>Byte.MIN_VALUE : connectionId);
,	}
"
33a4da69-3c87-4617-ac37-92c20f86f62c,53b8df57-74ae-4bf3-9125-b0d7ac08f84e,PLUS,"MONKEYS_AT,Override,PUBLIC,void,showDialog,LPAREN,Point,point,RPAREN,LBRACE,JOptionPane,DOT,showMessageDialog,LPAREN,null,COMMA,""Integration value: "",<MASK>,sum,RPAREN,SEMI,RBRACE","	@Override
,	public void showDialog(Point point) {
,		JOptionPane.showMessageDialog(null, ""Integration value: "" <MASK> sum);
,	}
"
c694737b-29b6-48d5-90c3-b6e0b6d64d88,81c2321b-b905-4e72-b8aa-7809d326a815,PERCENT,"PROTECTED,int,getIndexFromSlash,LPAREN,int,slash,COMMA,int,row,RPAREN,LBRACE,int,centerRow,EQ,getCenterRow,LPAREN,RPAREN,SEMI,int,adjustment,EQ,LPAREN,centerRow,PLUS,1,RPAREN,<MASK>,2,SEMI,int,col,EQ,slash,PLUS,LPAREN,row,PLUS,adjustment,RPAREN,SLASH,2,SEMI,RETURN,getIndex,LPAREN,row,COMMA,col,RPAREN,SEMI,RBRACE","    protected int getIndexFromSlash(int slash, int row) {
,        int centerRow = getCenterRow();
,        int adjustment = (centerRow + 1) <MASK> 2;
,        int col = slash + (row + adjustment) / 2;
,        return getIndex(row, col);
,    }
"
7b37a4d3-9846-4b12-9860-e336321ade31,c6fcf5b8-5683-4eff-9206-5615f6e0bf62,GT,"PUBLIC,void,abrir,LPAREN,RPAREN,THROWS,Exception,LBRACE,IF,LPAREN,id,DOT,length,LPAREN,RPAREN,<MASK>,0,AMPAMP,id,BANGEQ,""0"",RPAREN,LBRACE,long,cod,EQ,Long,DOT,parseLong,LPAREN,id,RPAREN,SEMI,IF,LPAREN,cliente,EQEQ,null,BARBAR,LPAREN,cliente,BANGEQ,null,AMPAMP,cliente,DOT,getId,LPAREN,RPAREN,BANGEQ,cod,RPAREN,RPAREN,setCliente,LPAREN,ejb,DOT,Open,LPAREN,cod,RPAREN,RPAREN,SEMI,RBRACE,RBRACE","    public void abrir() throws Exception {
,        if(id.length() <MASK> 0 && id != ""0""){
,            long cod = Long.parseLong(id);
,            if(cliente == null || (cliente != null && cliente.getId() != cod ) )
,                setCliente(ejb.Open(cod));
,        }
,    }
"
92951106-a87f-4e0c-9019-4852bf22d1be,5076521c-5292-4f54-ae62-001a81e2e53e,PLUS,"PUBLIC,STATIC,void,inOrder,LPAREN,BST,root,RPAREN,LBRACE,IF,LPAREN,root,BANGEQ,null,RPAREN,LBRACE,inOrder,LPAREN,root,DOT,left,RPAREN,SEMI,System,DOT,out,DOT,print,LPAREN,root,DOT,value,<MASK>,"" "",RPAREN,SEMI,inOrder,LPAREN,root,DOT,right,RPAREN,SEMI,RBRACE,RBRACE","	public static void inOrder(BST root) {
,		if (root != null) {
,			inOrder(root.left);
,			System.out.print(root.value <MASK> "" "");
,			inOrder(root.right);
,		}
,	}
"
2dd830d4-e85f-41ec-b5a4-78a5402d9efb,36896fcd-377a-4c49-a5eb-940dd523f1be,SUB,"PUBLIC,void,cancelTabbing,LPAREN,RPAREN,LBRACE,tabCount,EQ,<MASK>,1,SEMI,RBRACE","	public void cancelTabbing(){
,		tabCount = <MASK>1;
,	}
"
46b67b7f-680f-46e8-8d0d-ebfce935cfd6,eabd71be-6b52-45c6-8183-fe980a1620dc,SLASH,"PRIVATE,STATIC,double,scaleY,LPAREN,double,y,RPAREN,LBRACE,RETURN,height,STAR,LPAREN,ymax,SUB,y,RPAREN,<MASK>,LPAREN,ymax,SUB,ymin,RPAREN,SEMI,RBRACE","    private static double  scaleY(double y) { return height * (ymax - y) <MASK> (ymax - ymin); }
"
38ed5e2e-bfac-4cc9-94e0-5ee38dabb0ca,a9459ec7-7c6b-4e16-ac54-d65891282d2b,EQEQ,"PRIVATE,boolean,verify,LPAREN,Object,subtree,COMMA,int,lo,COMMA,int,hi,RPAREN,LBRACE,IF,LPAREN,subtree,<MASK>,null,RPAREN,RETURN,true,SEMI,ELSE,IF,LPAREN,BANG,LPAREN,subtree,INSTANCEOF,Node,RPAREN,RPAREN,LBRACE,Object,LBRACKET,RBRACKET,ary,EQ,LPAREN,Object,LBRACKET,RBRACKET,RPAREN,subtree,SEMI,int,prev,EQ,lo,SEMI,int,nkeys,EQ,ary,DOT,length,GTGT,1,SEMI,FOR,LPAREN,int,i,EQ,0,COMMA,len,EQ,nkeys,SEMI,i,LT,len,SEMI,PLUSPLUS,i,RPAREN,LBRACE,Object,key,EQ,ary,LBRACKET,i,RBRACKET,SEMI,IF,LPAREN,key,INSTANCEOF,EquivalentMap,RPAREN,RETURN,false,SEMI,int,hash,EQ,hashCode,LPAREN,key,RPAREN,SEMI,IF,LPAREN,prev,BANGEQ,NEGATIVE_INFINITY,AMPAMP,prev,GTEQ,hash,RPAREN,RETURN,false,SEMI,prev,EQ,hash,SEMI,RBRACE,RETURN,BANG,LPAREN,hi,BANGEQ,POSITIVE_INFINITY,AMPAMP,prev,GTEQ,hi,RPAREN,SEMI,RBRACE,ELSE,LBRACE,Node,node,EQ,LPAREN,Node,RPAREN,subtree,SEMI,int,khash,EQ,node,DOT,khash,SEMI,IF,LPAREN,khash,BANGEQ,hashCode,LPAREN,node,DOT,key,RPAREN,RPAREN,RETURN,false,SEMI,int,sizl,EQ,treeSize,LPAREN,node,DOT,left,RPAREN,SEMI,int,sizr,EQ,treeSize,LPAREN,node,DOT,right,RPAREN,SEMI,IF,LPAREN,node,DOT,size,BANGEQ,sizl,PLUS,sizr,PLUS,keySize,LPAREN,node,DOT,key,RPAREN,RPAREN,RETURN,false,SEMI,IF,LPAREN,node,DOT,key,INSTANCEOF,Entry,RPAREN,RETURN,false,SEMI,IF,LPAREN,node,DOT,key,INSTANCEOF,EquivalentMap,AMPAMP,LPAREN,LPAREN,EquivalentMap,RPAREN,node,DOT,key,RPAREN,DOT,contents,DOT,size,LPAREN,RPAREN,LT,2,RPAREN,RETURN,false,SEMI,IF,LPAREN,LPAREN,sizr,GT,4,AMPAMP,sizl,GT,sizr,STAR,BALANCE_FACTOR,RPAREN,BARBAR,LPAREN,sizl,GT,4,AMPAMP,sizr,GT,sizl,STAR,BALANCE_FACTOR,RPAREN,RPAREN,RETURN,false,SEMI,RETURN,verify,LPAREN,node,DOT,left,COMMA,lo,COMMA,khash,RPAREN,AMPAMP,verify,LPAREN,node,DOT,right,COMMA,khash,COMMA,hi,RPAREN,SEMI,RBRACE,RBRACE","    private boolean verify(Object subtree, int lo, int hi) {
,	if (subtree <MASK> null) return true;
,	else if (!(subtree instanceof Node)) {
,	    Object[] ary = (Object[])subtree;
,	    int prev = lo;
,	    int nkeys = ary.length >> 1;
,	    for (int i = 0, len = nkeys; i < len; ++i) {
,		Object key = ary[i];
,		if (key instanceof EquivalentMap) return false;
,		int hash = hashCode(key);
,		if (prev != NEGATIVE_INFINITY && prev >= hash) return false;
,		prev = hash;
,	    }
,	    return !(hi != POSITIVE_INFINITY && prev >= hi);
,	} else {
,	    Node node = (Node)subtree;
,	    int khash = node.khash;
,	    if (khash != hashCode(node.key)) return false;
,	    int sizl = treeSize(node.left);
,	    int sizr = treeSize(node.right);
,	    if (node.size != sizl + sizr + keySize(node.key)) return false;
,	    if (node.key instanceof Entry) return false;
,	    if (node.key instanceof EquivalentMap &&
,		((EquivalentMap)node.key).contents.size() < 2) return false;
,	    // Small subtrees may be unbalanced, because of our array-splitting heuristic
,	    // and because of EquivalentMaps.  As long as the size of any subtree that
,	    // can be unbalanced is strictly bounded, we're still okay.
,	    if ((sizr > 4 && sizl > sizr * BALANCE_FACTOR) ||
,		(sizl > 4 && sizr > sizl * BALANCE_FACTOR))
,		return false;
,	    return verify(node.left, lo, khash) &&
,		   verify(node.right, khash, hi);
,	}
,    }
"
789d219f-7383-4fa6-b72d-81f8985229f6,3d618e65-ca5f-4262-870d-7e7860946b85,EQEQ,"PRIVATE,boolean,isTie,LPAREN,RPAREN,LBRACE,Player,LBRACKET,RBRACKET,LBRACKET,RBRACKET,locations,EQ,this,DOT,board,DOT,getBoardLocations,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,row,EQ,0,SEMI,row,LT,locations,DOT,length,SEMI,row,PLUSPLUS,RPAREN,LBRACE,Player,LBRACKET,RBRACKET,rowLocations,EQ,locations,LBRACKET,row,RBRACKET,SEMI,FOR,LPAREN,int,col,EQ,0,SEMI,col,LT,rowLocations,DOT,length,SEMI,col,PLUSPLUS,RPAREN,LBRACE,Player,location,EQ,rowLocations,LBRACKET,col,RBRACKET,SEMI,IF,LPAREN,locations,LBRACKET,row,RBRACKET,LBRACKET,col,RBRACKET,<MASK>,null,RPAREN,LBRACE,RETURN,false,SEMI,RBRACE,RBRACE,RBRACE,RETURN,true,SEMI,RBRACE","    private boolean isTie() {
,        Player[][] locations = this.board.getBoardLocations();
,
,        for (int row = 0; row < locations.length; row++) {
,            Player[] rowLocations = locations[row];
,            for (int col = 0; col < rowLocations.length; col++) {
,                Player location = rowLocations[col];
,                if (locations[row][col] <MASK> null) { 
,                    return false;
,                }
,            }
,        }
,
,        return true;
,    }
"
b5ee7e5e-a7bf-41d4-8880-3ac95d2f8822,13a09068-6cf2-4d3d-89e6-8e971db9c4be,BANGEQ,"PUBLIC,void,exc,LPAREN,RPAREN,LBRACE,File,fdir,EQ,NEW,File,LPAREN,dir,RPAREN,SEMI,FileWriter,fw,SEMI,BufferedWriter,bw,SEMI,TRY,LBRACE,fw,EQ,NEW,FileWriter,LPAREN,outpath,PLUS,""/"",PLUS,label,PLUS,year,PLUS,"".txt"",RPAREN,SEMI,bw,EQ,NEW,BufferedWriter,LPAREN,fw,RPAREN,SEMI,FilenameFilter,filter,EQ,NEW,FilenameFilter,LPAREN,RPAREN,LBRACE,PUBLIC,boolean,accept,LPAREN,File,dir,COMMA,String,name,RPAREN,LBRACE,RETURN,BANG,name,DOT,startsWith,LPAREN,""."",RPAREN,AMPAMP,name,DOT,startsWith,LPAREN,year,RPAREN,SEMI,RBRACE,RBRACE,SEMI,File,LBRACKET,RBRACKET,fa,EQ,fdir,DOT,listFiles,LPAREN,filter,RPAREN,SEMI,FileReader,fr,SEMI,BufferedReader,br,SEMI,boolean,first,EQ,true,SEMI,FOR,LPAREN,File,f,COLON,fa,RPAREN,LBRACE,String,name,EQ,f,DOT,getName,LPAREN,RPAREN,SEMI,TRJMerge,tm,EQ,NEW,TRJMerge,LPAREN,RPAREN,SEMI,tm,DOT,setDirname,LPAREN,f,DOT,getAbsolutePath,LPAREN,RPAREN,RPAREN,SEMI,tm,DOT,setOutput,LPAREN,outpath,PLUS,""/"",PLUS,name,PLUS,"".txt"",RPAREN,SEMI,tm,DOT,setMin,LPAREN,min,RPAREN,SEMI,tm,DOT,setMax,LPAREN,max,RPAREN,SEMI,tm,DOT,go,LPAREN,RPAREN,SEMI,int,start,EQ,name,DOT,indexOf,LPAREN,separator,RPAREN,SEMI,int,end,EQ,name,DOT,lastIndexOf,LPAREN,extension,RPAREN,SEMI,String,substr,EQ,name,DOT,substring,LPAREN,start,PLUS,1,COMMA,end,RPAREN,SEMI,fr,EQ,NEW,FileReader,LPAREN,outpath,PLUS,""/"",PLUS,name,PLUS,"".txt"",RPAREN,SEMI,br,EQ,NEW,BufferedReader,LPAREN,fr,RPAREN,SEMI,String,ln,EQ,br,DOT,readLine,LPAREN,RPAREN,SEMI,IF,LPAREN,first,RPAREN,LBRACE,bw,DOT,write,LPAREN,""SOURCE\t"",PLUS,ln,PLUS,System,DOT,getProperty,LPAREN,""line.separator"",RPAREN,RPAREN,SEMI,first,EQ,false,SEMI,RBRACE,ln,EQ,br,DOT,readLine,LPAREN,RPAREN,SEMI,WHILE,LPAREN,ln,<MASK>,null,RPAREN,LBRACE,bw,DOT,write,LPAREN,substr,PLUS,""\t"",PLUS,ln,PLUS,System,DOT,getProperty,LPAREN,""line.separator"",RPAREN,RPAREN,SEMI,ln,EQ,br,DOT,readLine,LPAREN,RPAREN,SEMI,RBRACE,System,DOT,out,DOT,println,LPAREN,""Finished with "",PLUS,name,PLUS,""."",RPAREN,SEMI,br,DOT,close,LPAREN,RPAREN,SEMI,fr,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,bw,DOT,flush,LPAREN,RPAREN,SEMI,bw,DOT,close,LPAREN,RPAREN,SEMI,fw,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,IOException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,RBRACE","	public void exc(){
,		
,		File fdir = new File(dir);
,		FileWriter fw;
,		BufferedWriter bw;
,		
,		try {
,			
,			fw = new FileWriter(outpath + ""/"" + label + year + "".txt"");
,			bw = new BufferedWriter(fw);
,			
,			FilenameFilter filter = new FilenameFilter() {
,			    public boolean accept(File dir, String name) {
,			        return !name.startsWith(""."")&&name.startsWith(year);
,			    }
,			};
,			
,			File[] fa = fdir.listFiles(filter);
,			FileReader fr;
,			BufferedReader br;
,			
,			boolean first = true;
,			
,			for(File f:fa){
,				
,				String name = f.getName();
,				TRJMerge tm = new TRJMerge();
,				tm.setDirname(f.getAbsolutePath());
,				tm.setOutput(outpath + ""/"" + name + "".txt"");
,				tm.setMin(min);
,				tm.setMax(max);
,				tm.go();
,				
,				int start = name.indexOf(separator);
,				int end = name.lastIndexOf(extension);
,				String substr = name.substring(start + 1, end);
,				
,				fr = new FileReader(outpath + ""/"" + name + "".txt"");
,				br = new BufferedReader(fr);
,				
,				String ln = br.readLine();
,				if(first){
,					bw.write(""SOURCE\t"" + ln + System.getProperty(""line.separator""));
,					first = false;
,				}
,				ln = br.readLine();
,				while(ln <MASK> null){
,					bw.write(substr + ""\t"" + ln + System.getProperty(""line.separator""));
,					ln = br.readLine();
,				}
,				System.out.println(""Finished with "" + name + ""."");
,				br.close();
,				fr.close();
,			}
,			
,			bw.flush();
,			bw.close();
,			fw.close();
,			
,		} catch (IOException e) {
,			// TODO Auto-generated catch block
,			e.printStackTrace();
,		}
,	}
"
7b10f06b-338c-44c3-8e01-b40eb98395b8,2daf7407-e13e-41db-ae30-b0bc77b8629c,EQEQ,"PUBLIC,boolean,isAttached,LPAREN,RPAREN,LBRACE,RETURN,left,DOT,right,<MASK>,this,SEMI,RBRACE","	public boolean isAttached() {
,		return left.right <MASK> this;
,	}
"
c359e8a5-c978-40ba-891d-70ece85f1271,e86c172e-cfb1-4378-ab94-ba8f9d2a6b3d,PERCENT,"PUBLIC,void,run,LPAREN,RPAREN,LBRACE,WHILE,LPAREN,i,LT,100,RPAREN,LBRACE,IF,LPAREN,i,<MASK>,10,EQEQ,0,RPAREN,LBRACE,IF,LPAREN,r2,DOT,isAlive,LPAREN,RPAREN,RPAREN,r2,DOT,notify,LPAREN,RPAREN,SEMI,ELSE,r2,DOT,run,LPAREN,RPAREN,SEMI,RBRACE,i,PLUSPLUS,SEMI,RBRACE,r1,DOT,interrupt,LPAREN,RPAREN,SEMI,r2,DOT,interrupt,LPAREN,RPAREN,SEMI,RBRACE","            public void run() {
,                while (i < 100){
,                    if (i <MASK> 10 == 0) {
,                        if (r2.isAlive())
,                            r2.notify();
,                        else
,                            r2.run();
,                    }
,                    i++;
,                }
,                r1.interrupt();
,                r2.interrupt();
,            }
"
27817d3e-5449-46fd-a403-1ed403e709bb,a7ba7efa-6a1c-4bf0-8910-df289208ebd2,STAR,"MONKEYS_AT,Override,PUBLIC,TrackerResponse,sendRequest,LPAREN,TrackerRequest,request,COMMA,long,time,COMMA,TimeUnit,unit,RPAREN,LBRACE,String,host,EQ,uri,DOT,getHost,LPAREN,RPAREN,SEMI,int,port,EQ,uri,DOT,getPort,LPAREN,RPAREN,SEMI,TRY,LPAREN,DatagramSocket,socket,EQ,NEW,DatagramSocket,LPAREN,RPAREN,RPAREN,LBRACE,InetAddress,addr,EQ,InetAddress,DOT,getByName,LPAREN,host,RPAREN,SEMI,socket,DOT,setSoTimeout,LPAREN,LPAREN,int,RPAREN,LPAREN,unit,DOT,toMillis,LPAREN,time,RPAREN,SLASH,2,RPAREN,RPAREN,SEMI,DatagramPacket,packet,EQ,NEW,DatagramPacket,LPAREN,EMPTY_BYTE_ARR,COMMA,0,RPAREN,SEMI,packet,DOT,setAddress,LPAREN,addr,RPAREN,SEMI,packet,DOT,setPort,LPAREN,port,RPAREN,SEMI,ByteArrayOutputStream,baos,EQ,NEW,ByteArrayOutputStream,LPAREN,RPAREN,SEMI,DataOutputStream,dataOut,EQ,NEW,DataOutputStream,LPAREN,baos,RPAREN,SEMI,DataInputStream,dataIn,EQ,null,SEMI,int,action,SEMI,int,recvTransactionId,SEMI,long,connectionId,EQ,CONNECTION_ID,SEMI,int,transactionId,EQ,RANDOM,DOT,nextInt,LPAREN,RPAREN,SEMI,baos,DOT,reset,LPAREN,RPAREN,SEMI,dataOut,DOT,writeLong,LPAREN,connectionId,RPAREN,SEMI,dataOut,DOT,writeInt,LPAREN,0,RPAREN,SEMI,dataOut,DOT,writeInt,LPAREN,transactionId,RPAREN,SEMI,packet,DOT,setData,LPAREN,baos,DOT,toByteArray,LPAREN,RPAREN,COMMA,0,COMMA,16,RPAREN,SEMI,socket,DOT,send,LPAREN,packet,RPAREN,SEMI,socket,DOT,receive,LPAREN,packet,RPAREN,SEMI,dataIn,EQ,NEW,DataInputStream,LPAREN,NEW,ByteArrayInputStream,LPAREN,packet,DOT,getData,LPAREN,RPAREN,RPAREN,RPAREN,SEMI,action,EQ,dataIn,DOT,readInt,LPAREN,RPAREN,SEMI,recvTransactionId,EQ,dataIn,DOT,readInt,LPAREN,RPAREN,SEMI,connectionId,EQ,dataIn,DOT,readLong,LPAREN,RPAREN,SEMI,IF,LPAREN,action,BANGEQ,0,BARBAR,recvTransactionId,BANGEQ,transactionId,RPAREN,LBRACE,RETURN,null,SEMI,RBRACE,baos,DOT,reset,LPAREN,RPAREN,SEMI,transactionId,EQ,RANDOM,DOT,nextInt,LPAREN,RPAREN,SEMI,dataOut,DOT,writeLong,LPAREN,connectionId,RPAREN,SEMI,dataOut,DOT,writeInt,LPAREN,1,RPAREN,SEMI,dataOut,DOT,writeInt,LPAREN,transactionId,RPAREN,SEMI,dataOut,DOT,write,LPAREN,request,DOT,getInfoHash,LPAREN,RPAREN,DOT,getBytes,LPAREN,RPAREN,RPAREN,SEMI,dataOut,DOT,write,LPAREN,request,DOT,getPeerId,LPAREN,RPAREN,DOT,getBytes,LPAREN,RPAREN,RPAREN,SEMI,dataOut,DOT,writeLong,LPAREN,request,DOT,getBytesDownloaded,LPAREN,RPAREN,RPAREN,SEMI,dataOut,DOT,writeLong,LPAREN,request,DOT,getBytesLeft,LPAREN,RPAREN,RPAREN,SEMI,dataOut,DOT,writeLong,LPAREN,request,DOT,getBytesUploaded,LPAREN,RPAREN,RPAREN,SEMI,dataOut,DOT,writeLong,LPAREN,request,DOT,getEvent,LPAREN,RPAREN,DOT,getEventInt,LPAREN,RPAREN,RPAREN,SEMI,IF,LPAREN,request,DOT,getIp,LPAREN,RPAREN,EQEQ,null,RPAREN,LBRACE,dataOut,DOT,writeInt,LPAREN,SUB,1,RPAREN,SEMI,RBRACE,ELSE,LBRACE,byte,LBRACKET,RBRACKET,ipbuf,EQ,request,DOT,getIp,LPAREN,RPAREN,DOT,getAddress,LPAREN,RPAREN,SEMI,IF,LPAREN,ipbuf,DOT,length,BANGEQ,4,RPAREN,LBRACE,dataOut,DOT,writeInt,LPAREN,SUB,1,RPAREN,SEMI,RBRACE,ELSE,LBRACE,dataOut,DOT,write,LPAREN,ipbuf,COMMA,0,COMMA,4,RPAREN,SEMI,RBRACE,RBRACE,dataOut,DOT,writeInt,LPAREN,request,DOT,getKey,LPAREN,RPAREN,RPAREN,SEMI,dataOut,DOT,writeInt,LPAREN,request,DOT,getNumWant,LPAREN,RPAREN,RPAREN,SEMI,dataOut,DOT,writeShort,LPAREN,LPAREN,short,RPAREN,request,DOT,getPort,LPAREN,RPAREN,RPAREN,SEMI,packet,DOT,setData,LPAREN,baos,DOT,toByteArray,LPAREN,RPAREN,COMMA,0,COMMA,98,RPAREN,SEMI,socket,DOT,send,LPAREN,packet,RPAREN,SEMI,packet,DOT,setData,LPAREN,NEW,byte,LBRACKET,20,PLUS,6,<MASK>,request,DOT,getNumWant,LPAREN,RPAREN,RBRACKET,RPAREN,SEMI,socket,DOT,receive,LPAREN,packet,RPAREN,SEMI,dataIn,EQ,NEW,DataInputStream,LPAREN,NEW,ByteArrayInputStream,LPAREN,packet,DOT,getData,LPAREN,RPAREN,RPAREN,RPAREN,SEMI,action,EQ,dataIn,DOT,readInt,LPAREN,RPAREN,SEMI,recvTransactionId,EQ,dataIn,DOT,readInt,LPAREN,RPAREN,SEMI,int,interval,EQ,dataIn,DOT,readInt,LPAREN,RPAREN,SEMI,int,leechers,EQ,dataIn,DOT,readInt,LPAREN,RPAREN,SEMI,int,seeders,EQ,dataIn,DOT,readInt,LPAREN,RPAREN,SEMI,int,numPeersRecv,EQ,dataIn,DOT,available,LPAREN,RPAREN,SLASH,6,SEMI,byte,LBRACKET,RBRACKET,addrBuf,EQ,NEW,byte,LBRACKET,4,RBRACKET,SEMI,List,LT,PeerInfo,GT,peers,EQ,NEW,ArrayList,LT,PeerInfo,GT,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,numPeersRecv,SEMI,i,PLUSPLUS,RPAREN,LBRACE,int,read,EQ,dataIn,DOT,read,LPAREN,addrBuf,COMMA,0,COMMA,4,RPAREN,SEMI,IF,LPAREN,read,BANGEQ,4,RPAREN,LBRACE,RETURN,null,SEMI,RBRACE,int,recvPort,EQ,FFFF,AMP,dataIn,DOT,readShort,LPAREN,RPAREN,SEMI,PeerInfo,peer,EQ,NEW,PeerInfo,LPAREN,NEW,InetSocketAddress,LPAREN,InetAddress,DOT,getByAddress,LPAREN,addrBuf,RPAREN,COMMA,recvPort,RPAREN,COMMA,null,RPAREN,SEMI,peers,DOT,add,LPAREN,peer,RPAREN,SEMI,RBRACE,RETURN,NEW,TrackerResponse,LPAREN,false,COMMA,null,COMMA,"""",COMMA,interval,COMMA,interval,COMMA,EMPTY_BYTE_ARR,COMMA,seeders,COMMA,leechers,COMMA,peers,RPAREN,SEMI,RBRACE,CATCH,LPAREN,IOException,e,RPAREN,LBRACE,RETURN,null,SEMI,RBRACE,RBRACE","    @Override
,    public TrackerResponse sendRequest (TrackerRequest request, long time, TimeUnit unit) {
,        String host = uri.getHost();
,        int port = uri.getPort();
,
,        try (DatagramSocket socket = new DatagramSocket()) {
,            InetAddress addr = InetAddress.getByName(host);
,
,            // UDP Socket - already bound
,            socket.setSoTimeout((int) (unit.toMillis(time) / 2));
,
,            // UDP Datagram - setup of address/port
,            DatagramPacket packet = new DatagramPacket(EMPTY_BYTE_ARR, 0);
,            packet.setAddress(addr);
,            packet.setPort(port);
,
,            // Byte Array Output/Input Streams for writing/reading the packets
,            ByteArrayOutputStream baos = new ByteArrayOutputStream();
,            DataOutputStream dataOut = new DataOutputStream(baos);
,            DataInputStream dataIn = null;
,
,            // Random Transaction ID
,            int action;
,            int recvTransactionId;
,            long connectionId = CONNECTION_ID;
,            int transactionId = RANDOM.nextInt();
,
,            // STEP 1: Send the connection message
,            baos.reset();
,            dataOut.writeLong(connectionId);
,            dataOut.writeInt(0);
,            dataOut.writeInt(transactionId);
,            packet.setData(baos.toByteArray(), 0, 16);
,            socket.send(packet);
,
,            // STEP 2: Receive the connection message
,            socket.receive(packet);
,            dataIn = new DataInputStream(new ByteArrayInputStream(packet.getData()));
,            action = dataIn.readInt();
,            recvTransactionId = dataIn.readInt();
,            connectionId = dataIn.readLong();
,            if (action != 0 || recvTransactionId != transactionId) {
,                return null;
,            }
,
,            // STEP 3: Send the announce message
,            baos.reset();
,            transactionId = RANDOM.nextInt();
,            dataOut.writeLong(connectionId);
,            dataOut.writeInt(1);
,            dataOut.writeInt(transactionId);
,            dataOut.write(request.getInfoHash().getBytes());
,            dataOut.write(request.getPeerId().getBytes());
,            dataOut.writeLong(request.getBytesDownloaded());
,            dataOut.writeLong(request.getBytesLeft());
,            dataOut.writeLong(request.getBytesUploaded());
,            dataOut.writeLong(request.getEvent().getEventInt());
,            if (request.getIp() == null) {
,                dataOut.writeInt(-1);
,            } else {
,                byte[] ipbuf = request.getIp().getAddress();
,                if (ipbuf.length != 4) {
,                    // IPv6 - Not supported for some reason
,                    dataOut.writeInt(-1);
,                } else {
,                    dataOut.write(ipbuf, 0, 4);
,                }
,            }
,            dataOut.writeInt(request.getKey());
,            dataOut.writeInt(request.getNumWant());
,            dataOut.writeShort((short) request.getPort());
,            packet.setData(baos.toByteArray(), 0, 98);
,            socket.send(packet);
,
,            // STEP 4: ""Parse"" the response
,            packet.setData(new byte[20 + 6 <MASK> request.getNumWant()]);
,            socket.receive(packet);
,            dataIn = new DataInputStream(new ByteArrayInputStream(packet.getData()));
,            action = dataIn.readInt();
,            recvTransactionId = dataIn.readInt();
,            int interval = dataIn.readInt();
,            int leechers = dataIn.readInt();
,            int seeders = dataIn.readInt();
,
,            int numPeersRecv = dataIn.available() / 6;
,            byte[] addrBuf = new byte[4];
,            List<PeerInfo> peers = new ArrayList<PeerInfo>();
,            for (int i = 0; i < numPeersRecv; i++) {
,                int read = dataIn.read(addrBuf, 0, 4);
,                if (read != 4) {
,                    return null;
,                }
,                int recvPort = 0xFFFF & dataIn.readShort();
,                PeerInfo peer = new PeerInfo(new InetSocketAddress(InetAddress.getByAddress(addrBuf), recvPort), null);
,                peers.add(peer);
,            }
,
,            return new TrackerResponse(false, null, """", interval, interval, EMPTY_BYTE_ARR, seeders, leechers, peers);
,        } catch (IOException e) {
,            return null;
,
,        }
,    }
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,d7314fc5-6a95-4bbb-befd-0daf3c80226d,LT,"PRIVATE,void,processNewBLOBVector,LPAREN,Element,xml,RPAREN,LBRACE,INDIProperty,prop,EQ,processNewXXXVector,LPAREN,xml,RPAREN,SEMI,IF,LPAREN,prop,EQEQ,null,RPAREN,LBRACE,RETURN,SEMI,RBRACE,IF,LPAREN,BANG,LPAREN,prop,INSTANCEOF,INDIBLOBProperty,RPAREN,RPAREN,LBRACE,RETURN,SEMI,RBRACE,INDIElementAndValue,LBRACKET,RBRACKET,evs,EQ,processINDIElements,LPAREN,prop,COMMA,xml,RPAREN,SEMI,Date,timestamp,EQ,INDIDateFormat,DOT,parseTimestamp,LPAREN,xml,DOT,getAttribute,LPAREN,""timestamp"",RPAREN,RPAREN,SEMI,INDIBLOBElementAndValue,LBRACKET,RBRACKET,newEvs,EQ,NEW,INDIBLOBElementAndValue,LBRACKET,evs,DOT,length,RBRACKET,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,newEvs,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,newEvs,LBRACKET,i,RBRACKET,EQ,LPAREN,INDIBLOBElementAndValue,RPAREN,evs,LBRACKET,i,RBRACKET,SEMI,RBRACE,processNewBLOBValue,LPAREN,LPAREN,INDIBLOBProperty,RPAREN,prop,COMMA,timestamp,COMMA,newEvs,RPAREN,SEMI,RBRACE","  private void processNewBLOBVector(Element xml) {
,    INDIProperty prop = processNewXXXVector(xml);
,
,    if (prop == null) {
,      return;
,    }
,
,    if (!(prop instanceof INDIBLOBProperty)) {
,      return;
,    }
,
,    INDIElementAndValue[] evs = processINDIElements(prop, xml);
,
,    Date timestamp = INDIDateFormat.parseTimestamp(xml.getAttribute(""timestamp""));
,
,    INDIBLOBElementAndValue[] newEvs = new INDIBLOBElementAndValue[evs.length];
,
,    for (int i = 0 ; i <MASK> newEvs.length ; i++) {
,      newEvs[i] = (INDIBLOBElementAndValue)evs[i];
,    }
,
,    processNewBLOBValue((INDIBLOBProperty)prop, timestamp, newEvs);
,  }
"
e03d1a2f-9ec0-4127-b57f-aac96a5f146a,bd3b0779-543c-43ed-ba3e-6b1412fd4ab0,GTEQ,"PUBLIC,STATIC,void,main,LPAREN,String,LBRACKET,RBRACKET,args,RPAREN,LBRACE,boolean,longOutput,EQ,false,SEMI,int,arg,EQ,0,COMMA,index,SEMI,String,handle,COMMA,host,SEMI,FingerClient,finger,SEMI,InetAddress,address,EQ,null,SEMI,WHILE,LPAREN,arg,LT,args,DOT,length,AMPAMP,args,LBRACKET,arg,RBRACKET,DOT,startsWith,LPAREN,""-"",RPAREN,RPAREN,LBRACE,IF,LPAREN,args,LBRACKET,arg,RBRACKET,DOT,equals,LPAREN,""-l"",RPAREN,RPAREN,LBRACE,longOutput,EQ,true,SEMI,RBRACE,ELSE,LBRACE,System,DOT,err,DOT,println,LPAREN,""usage: finger [-l] [[[handle][@<server>]] ...]"",RPAREN,SEMI,System,DOT,exit,LPAREN,1,RPAREN,SEMI,RBRACE,PLUSPLUS,arg,SEMI,RBRACE,finger,EQ,NEW,FingerClient,LPAREN,RPAREN,SEMI,finger,DOT,setDefaultTimeout,LPAREN,60000,RPAREN,SEMI,IF,LPAREN,arg,<MASK>,args,DOT,length,RPAREN,LBRACE,TRY,LBRACE,address,EQ,InetAddress,DOT,getLocalHost,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,UnknownHostException,e,RPAREN,LBRACE,System,DOT,err,DOT,println,LPAREN,""Error unknown host: "",PLUS,e,DOT,getMessage,LPAREN,RPAREN,RPAREN,SEMI,System,DOT,exit,LPAREN,1,RPAREN,SEMI,RBRACE,TRY,LBRACE,finger,DOT,connect,LPAREN,address,RPAREN,SEMI,System,DOT,out,DOT,print,LPAREN,finger,DOT,query,LPAREN,longOutput,RPAREN,RPAREN,SEMI,finger,DOT,disconnect,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,IOException,e,RPAREN,LBRACE,System,DOT,err,DOT,println,LPAREN,""Error I/O exception: "",PLUS,e,DOT,getMessage,LPAREN,RPAREN,RPAREN,SEMI,System,DOT,exit,LPAREN,1,RPAREN,SEMI,RBRACE,RETURN,SEMI,RBRACE,WHILE,LPAREN,arg,LT,args,DOT,length,RPAREN,LBRACE,index,EQ,args,LBRACKET,arg,RBRACKET,DOT,lastIndexOf,LPAREN,""@"",RPAREN,SEMI,IF,LPAREN,index,EQEQ,SUB,1,RPAREN,LBRACE,handle,EQ,args,LBRACKET,arg,RBRACKET,SEMI,TRY,LBRACE,address,EQ,InetAddress,DOT,getLocalHost,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,UnknownHostException,e,RPAREN,LBRACE,System,DOT,err,DOT,println,LPAREN,""Error unknown host: "",PLUS,e,DOT,getMessage,LPAREN,RPAREN,RPAREN,SEMI,System,DOT,exit,LPAREN,1,RPAREN,SEMI,RBRACE,RBRACE,ELSE,LBRACE,handle,EQ,args,LBRACKET,arg,RBRACKET,DOT,substring,LPAREN,0,COMMA,index,RPAREN,SEMI,host,EQ,args,LBRACKET,arg,RBRACKET,DOT,substring,LPAREN,index,PLUS,1,RPAREN,SEMI,TRY,LBRACE,address,EQ,InetAddress,DOT,getByName,LPAREN,host,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""["",PLUS,address,DOT,getHostName,LPAREN,RPAREN,PLUS,""]"",RPAREN,SEMI,RBRACE,CATCH,LPAREN,UnknownHostException,e,RPAREN,LBRACE,System,DOT,err,DOT,println,LPAREN,""Error unknown host: "",PLUS,e,DOT,getMessage,LPAREN,RPAREN,RPAREN,SEMI,System,DOT,exit,LPAREN,1,RPAREN,SEMI,RBRACE,RBRACE,TRY,LBRACE,finger,DOT,connect,LPAREN,address,RPAREN,SEMI,System,DOT,out,DOT,print,LPAREN,finger,DOT,query,LPAREN,longOutput,COMMA,handle,RPAREN,RPAREN,SEMI,finger,DOT,disconnect,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,IOException,e,RPAREN,LBRACE,System,DOT,err,DOT,println,LPAREN,""Error I/O exception: "",PLUS,e,DOT,getMessage,LPAREN,RPAREN,RPAREN,SEMI,System,DOT,exit,LPAREN,1,RPAREN,SEMI,RBRACE,PLUSPLUS,arg,SEMI,IF,LPAREN,arg,BANGEQ,args,DOT,length,RPAREN,LBRACE,System,DOT,out,DOT,print,LPAREN,""\n"",RPAREN,SEMI,RBRACE,RBRACE,RBRACE","    public static void main(String[] args)
,    {
,        boolean longOutput = false;
,        int arg = 0, index;
,        String handle, host;
,        FingerClient finger;
,        InetAddress address = null;
,
,        // Get flags.  If an invalid flag is present, exit with usage message.
,        while (arg < args.length && args[arg].startsWith(""-""))
,        {
,            if (args[arg].equals(""-l"")) {
,                longOutput = true;
,            } else {
,                System.err.println(""usage: finger [-l] [[[handle][@<server>]] ...]"");
,                System.exit(1);
,            }
,            ++arg;
,        }
,
,
,        finger = new FingerClient();
,        // We want to timeout if a response takes longer than 60 seconds
,        finger.setDefaultTimeout(60000);
,
,        if (arg <MASK> args.length)
,        {
,            // Finger local host
,
,            try
,            {
,                address = InetAddress.getLocalHost();
,            }
,            catch (UnknownHostException e)
,            {
,                System.err.println(""Error unknown host: "" + e.getMessage());
,                System.exit(1);
,            }
,
,            try
,            {
,                finger.connect(address);
,                System.out.print(finger.query(longOutput));
,                finger.disconnect();
,            }
,            catch (IOException e)
,            {
,                System.err.println(""Error I/O exception: "" + e.getMessage());
,                System.exit(1);
,            }
,
,            return ;
,        }
,
,        // Finger each argument
,        while (arg < args.length)
,        {
,
,            index = args[arg].lastIndexOf(""@"");
,
,            if (index == -1)
,            {
,                handle = args[arg];
,                try
,                {
,                    address = InetAddress.getLocalHost();
,                }
,                catch (UnknownHostException e)
,                {
,                    System.err.println(""Error unknown host: "" + e.getMessage());
,                    System.exit(1);
,                }
,            }
,            else
,            {
,                handle = args[arg].substring(0, index);
,                host = args[arg].substring(index + 1);
,
,                try
,                {
,                    address = InetAddress.getByName(host);
,                    System.out.println(""["" + address.getHostName() + ""]"");
,                }
,                catch (UnknownHostException e)
,                {
,                    System.err.println(""Error unknown host: "" + e.getMessage());
,                    System.exit(1);
,                }
,            }
,
,            try
,            {
,                finger.connect(address);
,                System.out.print(finger.query(longOutput, handle));
,                finger.disconnect();
,            }
,            catch (IOException e)
,            {
,                System.err.println(""Error I/O exception: "" + e.getMessage());
,                System.exit(1);
,            }
,
,            ++arg;
,            if (arg != args.length) {
,                System.out.print(""\n"");
,            }
,        }
,    }
"
b61d6017-337e-4ccd-b964-a6b5e3d0cb20,3ebd3898-79d8-45e7-b350-cf6eb4bb2058,EQEQ,"PUBLIC,void,set_unit,LPAREN,Unit,unit,COMMA,Position,position,RPAREN,LBRACE,IF,LPAREN,_cells,LBRACKET,position,DOT,get_x,LPAREN,RPAREN,RBRACKET,LBRACKET,position,DOT,get_y,LPAREN,RPAREN,RBRACKET,DOT,get_unit,LPAREN,RPAREN,<MASK>,null,RPAREN,LBRACE,_cells,LBRACKET,position,DOT,get_x,LPAREN,RPAREN,RBRACKET,LBRACKET,position,DOT,get_y,LPAREN,RPAREN,RBRACKET,DOT,set_unit,LPAREN,unit,RPAREN,SEMI,RBRACE,ELSE,LBRACE,THROW,NEW,IllegalArgumentException,LPAREN,""["",PLUS,this,DOT,getClass,LPAREN,RPAREN,DOT,getName,LPAREN,RPAREN,PLUS,""] there is already a unit at this location."",RPAREN,SEMI,RBRACE,RBRACE","    public void set_unit(Unit unit, Position position) {
,        if (_cells[position.get_x()][position.get_y()].get_unit() <MASK> null) {
,            _cells[position.get_x()][position.get_y()].set_unit(unit);
,        } else {
,            throw new IllegalArgumentException(""["" + this.getClass().getName() + ""] there is already a unit at this location."");
,        }
,
,    }
"
b5ee7e5e-a7bf-41d4-8880-3ac95d2f8822,b99fd0a5-ddcf-42a0-b92b-2e3ef65e374d,PLUS,"PUBLIC,void,replace,LPAREN,RPAREN,LBRACE,File,original,EQ,NEW,File,LPAREN,infile,RPAREN,SEMI,File,newfile,EQ,NEW,File,LPAREN,outfile,RPAREN,SEMI,File,temp,EQ,NEW,File,LPAREN,infile,<MASK>,"".xxx"",RPAREN,SEMI,IF,LPAREN,newfile,DOT,exists,LPAREN,RPAREN,RPAREN,LBRACE,TRY,LBRACE,copyFileUsingStream,LPAREN,original,COMMA,temp,RPAREN,SEMI,original,DOT,delete,LPAREN,RPAREN,SEMI,copyFileUsingStream,LPAREN,newfile,COMMA,original,RPAREN,SEMI,newfile,DOT,delete,LPAREN,RPAREN,SEMI,temp,DOT,delete,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,IOException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,RBRACE","	public void replace(){
,		File original = new File(infile);
,		File newfile = new File(outfile);
,		File temp = new File(infile <MASK> "".xxx"");
,		if(newfile.exists()){
,			try {
,				copyFileUsingStream(original,temp);
,				original.delete();
,				copyFileUsingStream(newfile,original);
,				newfile.delete();
,				temp.delete();
,			} catch (IOException e) {
,				e.printStackTrace();
,			}	
,		}
,	}
"
85e73bf4-198d-4e97-95ec-bfad228c11ea,a433c7e3-b1ea-48d1-8f77-7d12eb3adc5d,STAR,"PUBLIC,void,startElement,LPAREN,String,uri,COMMA,String,name,COMMA,Map,LT,String,COMMA,String,GT,attrs,RPAREN,THROWS,SAXException,LBRACE,outputSpaces,LPAREN,indentLevel,<MASK>,INDENT,RPAREN,SEMI,outputStartElement,LPAREN,uri,COMMA,name,COMMA,attrs,RPAREN,SEMI,newLine,LPAREN,RPAREN,SEMI,indentLevel,PLUSPLUS,SEMI,RBRACE","    public void startElement(String uri, String name, Map<String, String> attrs) throws SAXException {
,        outputSpaces(indentLevel <MASK> INDENT);
,        outputStartElement(uri, name, attrs);
,        newLine();
,        indentLevel++;
,    }
"
9c253d2b-e626-4f21-a850-dfb022369350,6f09515d-295d-4126-89f4-810caa2e13c8,LTEQ,"PRIVATE,void,reorder,LPAREN,RPAREN,LBRACE,int,i,COMMA,j,COMMA,k,COMMA,s,COMMA,inc,EQ,1,SEMI,double,sw,SEMI,double,LBRACKET,RBRACKET,su,EQ,NEW,double,LBRACKET,m,RBRACKET,SEMI,double,LBRACKET,RBRACKET,sv,EQ,NEW,double,LBRACKET,n,RBRACKET,SEMI,DO,LBRACE,inc,STAREQ,3,SEMI,inc,PLUSPLUS,SEMI,RBRACE,WHILE,LPAREN,inc,<MASK>,n,RPAREN,SEMI,DO,LBRACE,inc,SLASHEQ,3,SEMI,FOR,LPAREN,i,EQ,inc,SEMI,i,LT,n,SEMI,i,PLUSPLUS,RPAREN,LBRACE,sw,EQ,w,LBRACKET,i,RBRACKET,SEMI,FOR,LPAREN,k,EQ,0,SEMI,k,LT,m,SEMI,k,PLUSPLUS,RPAREN,su,LBRACKET,k,RBRACKET,EQ,u,LBRACKET,k,RBRACKET,LBRACKET,i,RBRACKET,SEMI,FOR,LPAREN,k,EQ,0,SEMI,k,LT,n,SEMI,k,PLUSPLUS,RPAREN,sv,LBRACKET,k,RBRACKET,EQ,v,LBRACKET,k,RBRACKET,LBRACKET,i,RBRACKET,SEMI,j,EQ,i,SEMI,WHILE,LPAREN,w,LBRACKET,j,SUB,inc,RBRACKET,LT,sw,RPAREN,LBRACE,w,LBRACKET,j,RBRACKET,EQ,w,LBRACKET,j,SUB,inc,RBRACKET,SEMI,FOR,LPAREN,k,EQ,0,SEMI,k,LT,m,SEMI,k,PLUSPLUS,RPAREN,u,LBRACKET,k,RBRACKET,LBRACKET,j,RBRACKET,EQ,u,LBRACKET,k,RBRACKET,LBRACKET,j,SUB,inc,RBRACKET,SEMI,FOR,LPAREN,k,EQ,0,SEMI,k,LT,n,SEMI,k,PLUSPLUS,RPAREN,v,LBRACKET,k,RBRACKET,LBRACKET,j,RBRACKET,EQ,v,LBRACKET,k,RBRACKET,LBRACKET,j,SUB,inc,RBRACKET,SEMI,j,SUBEQ,inc,SEMI,IF,LPAREN,j,LT,inc,RPAREN,BREAK,SEMI,RBRACE,w,LBRACKET,j,RBRACKET,EQ,sw,SEMI,FOR,LPAREN,k,EQ,0,SEMI,k,LT,m,SEMI,k,PLUSPLUS,RPAREN,u,LBRACKET,k,RBRACKET,LBRACKET,j,RBRACKET,EQ,su,LBRACKET,k,RBRACKET,SEMI,FOR,LPAREN,k,EQ,0,SEMI,k,LT,n,SEMI,k,PLUSPLUS,RPAREN,v,LBRACKET,k,RBRACKET,LBRACKET,j,RBRACKET,EQ,sv,LBRACKET,k,RBRACKET,SEMI,RBRACE,RBRACE,WHILE,LPAREN,inc,GT,1,RPAREN,SEMI,FOR,LPAREN,k,EQ,0,SEMI,k,LT,n,SEMI,k,PLUSPLUS,RPAREN,LBRACE,s,EQ,0,SEMI,FOR,LPAREN,i,EQ,0,SEMI,i,LT,m,SEMI,i,PLUSPLUS,RPAREN,IF,LPAREN,u,LBRACKET,i,RBRACKET,LBRACKET,k,RBRACKET,LT,0.,RPAREN,s,PLUSPLUS,SEMI,FOR,LPAREN,j,EQ,0,SEMI,j,LT,n,SEMI,j,PLUSPLUS,RPAREN,IF,LPAREN,v,LBRACKET,j,RBRACKET,LBRACKET,k,RBRACKET,LT,0.,RPAREN,s,PLUSPLUS,SEMI,IF,LPAREN,s,GT,LPAREN,m,PLUS,n,RPAREN,SLASH,2,RPAREN,LBRACE,FOR,LPAREN,i,EQ,0,SEMI,i,LT,m,SEMI,i,PLUSPLUS,RPAREN,u,LBRACKET,i,RBRACKET,LBRACKET,k,RBRACKET,EQ,SUB,u,LBRACKET,i,RBRACKET,LBRACKET,k,RBRACKET,SEMI,FOR,LPAREN,j,EQ,0,SEMI,j,LT,n,SEMI,j,PLUSPLUS,RPAREN,v,LBRACKET,j,RBRACKET,LBRACKET,k,RBRACKET,EQ,SUB,v,LBRACKET,j,RBRACKET,LBRACKET,k,RBRACKET,SEMI,RBRACE,RBRACE,RBRACE","  private void reorder() {
,    int i,j,k,s,inc=1;
,    double sw;
,    double[] su = new double[m];
,    double[] sv = new double[n];
,    do { inc *= 3; inc++; } while (inc <MASK> n);
,    do {
,      inc /= 3;
,      for (i=inc;i<n;i++) {
,        sw = w[i];
,        for (k=0;k<m;k++) su[k] = u[k][i];
,        for (k=0;k<n;k++) sv[k] = v[k][i];
,        j = i;
,        while (w[j-inc] < sw) {
,          w[j] = w[j-inc];
,          for (k=0;k<m;k++) u[k][j] = u[k][j-inc];
,          for (k=0;k<n;k++) v[k][j] = v[k][j-inc];
,          j -= inc;
,          if (j < inc) break;
,        }
,        w[j] = sw;
,        for (k=0;k<m;k++) u[k][j] = su[k];
,        for (k=0;k<n;k++) v[k][j] = sv[k];
,
,      }
,    } while (inc > 1);
,    for (k=0;k<n;k++) {
,      s=0;
,      for (i=0;i<m;i++) if (u[i][k] < 0.) s++;
,      for (j=0;j<n;j++) if (v[j][k] < 0.) s++;
,      if (s > (m+n)/2) {
,        for (i=0;i<m;i++) u[i][k] = -u[i][k];
,        for (j=0;j<n;j++) v[j][k] = -v[j][k];
,      }
,    }
,  }
"
3913c395-db09-4ac4-8282-49a81b6a21f4,524dcebc-402c-4ee6-8af8-d826795376ad,LT,"MONKEYS_AT,Override,PUBLIC,void,update,LPAREN,RPAREN,LBRACE,double,dx,SEMI,double,dy,SEMI,double,d,SEMI,double,fx,SEMI,double,fy,SEMI,IF,LPAREN,BANG,u,DOT,onPassableTile,LPAREN,RPAREN,RPAREN,LBRACE,dx,EQ,u,DOT,getX,LPAREN,RPAREN,SUB,u,DOT,getTileX,LPAREN,RPAREN,STAR,32,SUB,16,SEMI,dy,EQ,u,DOT,getY,LPAREN,RPAREN,SUB,u,DOT,getTileY,LPAREN,RPAREN,STAR,32,SUB,16,SEMI,d,EQ,dx,STAR,dx,PLUS,dy,STAR,dy,SEMI,IF,LPAREN,d,<MASK>,1,RPAREN,d,EQ,1,SEMI,fx,EQ,c,STAR,dx,SLASH,d,SEMI,fy,EQ,c,STAR,dy,SLASH,d,SEMI,u,DOT,addForce,LPAREN,fx,COMMA,fy,RPAREN,SEMI,RBRACE,RBRACE","	@Override
,	public void update() {
,		double dx;
,		double dy;
,		double d;
,		double fx;
,		double fy;
,		
,		if (!u.onPassableTile()) {
,			dx = u.getX()-u.getTileX()*32-16;
,			dy = u.getY()-u.getTileY()*32-16;
,			d = dx*dx+dy*dy;
,			if (d <MASK> 1) d = 1;
,			fx = c*dx/d;
,			fy = c*dy/d;
,			u.addForce(fx, fy);
,		}
,	}
"
4049a902-27c7-45fb-b87d-5a631b7e1ee7,87e26b15-e22a-403b-a94b-5bf9a24d86f2,PERCENT,"PUBLIC,Value,mod,LPAREN,Value,divisor,RPAREN,LBRACE,RETURN,NEW,Value,LPAREN,this,DOT,m_value,<MASK>,divisor,DOT,value,LPAREN,RPAREN,RPAREN,SEMI,RBRACE","	public Value mod( Value divisor ) {
,		return new Value( this.m_value <MASK> divisor.value() );
,	}
"
a4c68a60-241d-4ccc-bb34-58eb273247fe,16b621e7-358c-458b-a84c-66f6d03e9d5f,PLUS,"MONKEYS_AT,Override,PUBLIC,int,hashCode,LPAREN,RPAREN,LBRACE,int,result,EQ,first,BANGEQ,null,QUES,first,DOT,hashCode,LPAREN,RPAREN,COLON,0,SEMI,result,EQ,31,STAR,result,<MASK>,LPAREN,second,BANGEQ,null,QUES,second,DOT,hashCode,LPAREN,RPAREN,COLON,0,RPAREN,SEMI,RETURN,result,SEMI,RBRACE","    @Override public int hashCode() {
,        int result = first != null ? first.hashCode() : 0;
,        result = 31 * result <MASK> (second != null ? second.hashCode() : 0);
,        return result;
,    }
"
1b8c895d-7ca3-40d2-8eed-2c6100c60c79,270d6009-1d8a-45ca-b83c-e1e7ed8943c0,BANGEQ,"PRIVATE,DefaultTreeModel,getGroups,LPAREN,RPAREN,LBRACE,DefaultMutableTreeNode,root,EQ,NEW,DefaultMutableTreeNode,LPAREN,Constants,DOT,STR_GROUP,RPAREN,SEMI,String,userNo,EQ,String,DOT,valueOf,LPAREN,user,DOT,get,LPAREN,Constants,DOT,USER_NO,RPAREN,RPAREN,SEMI,List,LT,Map,LT,String,COMMA,Object,GTGT,groupList,EQ,userDao,DOT,getGroup,LPAREN,userNo,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,COMMA,len,EQ,groupList,DOT,size,LPAREN,RPAREN,SEMI,i,LT,len,SEMI,PLUSPLUS,i,RPAREN,LBRACE,Map,LT,String,COMMA,Object,GT,group,EQ,groupList,DOT,get,LPAREN,i,RPAREN,SEMI,DefaultMutableTreeNode,child,EQ,NEW,DefaultMutableTreeNode,LPAREN,String,DOT,valueOf,LPAREN,group,DOT,get,LPAREN,Constants,DOT,GROUP_NAME,RPAREN,RPAREN,RPAREN,SEMI,Map,LT,String,COMMA,Object,GT,param,EQ,NEW,HashMap,LT,String,COMMA,Object,GT,LPAREN,RPAREN,SEMI,param,DOT,put,LPAREN,Constants,DOT,USER_NO,COMMA,String,DOT,valueOf,LPAREN,group,DOT,get,LPAREN,Constants,DOT,USER_NO,RPAREN,RPAREN,RPAREN,SEMI,param,DOT,put,LPAREN,Constants,DOT,GROUP_NO,COMMA,String,DOT,valueOf,LPAREN,group,DOT,get,LPAREN,Constants,DOT,GROUP_NO,RPAREN,RPAREN,RPAREN,SEMI,List,LT,Map,LT,String,COMMA,Object,GTGT,friendList,EQ,userDao,DOT,getFriend,LPAREN,param,RPAREN,SEMI,IF,LPAREN,Constants,DOT,NUM_ZERO,<MASK>,friendList,DOT,size,LPAREN,RPAREN,RPAREN,LBRACE,FOR,LPAREN,int,j,EQ,0,COMMA,size,EQ,friendList,DOT,size,LPAREN,RPAREN,SEMI,j,LT,size,SEMI,PLUSPLUS,j,RPAREN,LBRACE,Map,LT,String,COMMA,Object,GT,friend,EQ,friendList,DOT,get,LPAREN,j,RPAREN,SEMI,String,friendNo,EQ,String,DOT,valueOf,LPAREN,friend,DOT,get,LPAREN,Constants,DOT,FRIEND_NO,RPAREN,RPAREN,SEMI,StringBuilder,sb,EQ,NEW,StringBuilder,LPAREN,RPAREN,SEMI,sb,DOT,append,LPAREN,userDao,DOT,getUserInfo,LPAREN,friendNo,RPAREN,RPAREN,SEMI,sb,DOT,append,LPAREN,""("",RPAREN,SEMI,sb,DOT,append,LPAREN,friendNo,RPAREN,SEMI,sb,DOT,append,LPAREN,"")"",RPAREN,SEMI,sb,DOT,append,LPAREN,""  <"",RPAREN,SEMI,int,status,EQ,userDao,DOT,getStatus,LPAREN,friendNo,RPAREN,SEMI,sb,DOT,append,LPAREN,userStatus,DOT,getItemAt,LPAREN,status,RPAREN,DOT,toString,LPAREN,RPAREN,RPAREN,SEMI,sb,DOT,append,LPAREN,"">"",RPAREN,SEMI,DefaultMutableTreeNode,childschild,EQ,NEW,DefaultMutableTreeNode,LPAREN,sb,DOT,toString,LPAREN,RPAREN,RPAREN,SEMI,child,DOT,add,LPAREN,childschild,RPAREN,SEMI,RBRACE,RBRACE,root,DOT,add,LPAREN,child,RPAREN,SEMI,RBRACE,RETURN,NEW,DefaultTreeModel,LPAREN,root,RPAREN,SEMI,RBRACE","	private DefaultTreeModel getGroups() {
,		DefaultMutableTreeNode root = new DefaultMutableTreeNode(
,				Constants.STR_GROUP);
,		String userNo = String.valueOf(user.get(Constants.USER_NO));
,		List<Map<String, Object>> groupList = userDao.getGroup(userNo);
,		for (int i = 0, len = groupList.size(); i < len; ++i) {
,			Map<String, Object> group = groupList.get(i);
,			DefaultMutableTreeNode child = new DefaultMutableTreeNode(
,					String.valueOf(group.get(Constants.GROUP_NAME)));
,			Map<String, Object> param = new HashMap<String, Object>();
,			param.put(Constants.USER_NO,
,					String.valueOf(group.get(Constants.USER_NO)));
,			param.put(Constants.GROUP_NO,
,					String.valueOf(group.get(Constants.GROUP_NO)));
,			List<Map<String, Object>> friendList = userDao.getFriend(param);
,			if (Constants.NUM_ZERO <MASK> friendList.size()) {
,				for (int j = 0, size = friendList.size(); j < size; ++j) {
,					Map<String, Object> friend = friendList.get(j);
,					String friendNo = String.valueOf(friend
,							.get(Constants.FRIEND_NO));
,					StringBuilder sb = new StringBuilder();
,					sb.append(userDao.getUserInfo(friendNo));
,					sb.append(""("");
,					sb.append(friendNo);
,					sb.append("")"");
,					sb.append(""  <"");
,					int status = userDao.getStatus(friendNo);
,					sb.append(userStatus.getItemAt(status).toString());
,					sb.append("">"");
,					DefaultMutableTreeNode childschild = new DefaultMutableTreeNode(
,							sb.toString());
,					child.add(childschild);
,				}
,			}
,			root.add(child);
,		}
,		return new DefaultTreeModel(root);
,	}
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,687cf4ce-d345-485a-8842-0bd7a258f8ed,BANGEQ,"PRIVATE,STATIC,void,initialise,LPAREN,int,map,LBRACKET,RBRACKET,LBRACKET,RBRACKET,RPAREN,LBRACE,IF,LPAREN,_connectedPoint,<MASK>,null,AMPAMP,_connectedPoint,DOT,length,EQEQ,map,DOT,length,AMPAMP,_connectedPoint,LBRACKET,0,RBRACKET,DOT,length,EQEQ,map,LBRACKET,0,RBRACKET,DOT,length,RPAREN,RETURN,SEMI,IF,LPAREN,_firstTime,RPAREN,LBRACE,atan,EQ,NEW,double,LBRACKET,WINDOW_SIZE,STAR,2,RBRACKET,LBRACKET,WINDOW_SIZE,STAR,2,RBRACKET,SEMI,FOR,LPAREN,int,y,EQ,0,SEMI,y,LT,2,STAR,WINDOW_SIZE,SEMI,y,PLUSPLUS,RPAREN,FOR,LPAREN,int,x,EQ,0,SEMI,x,LT,2,STAR,WINDOW_SIZE,SEMI,x,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,x,SUB,WINDOW_SIZE,EQEQ,0,AMPAMP,y,SUB,WINDOW_SIZE,EQEQ,0,RPAREN,atan,LBRACKET,y,RBRACKET,LBRACKET,x,RBRACKET,EQ,ANGLE_UNDEFINED,SEMI,ELSE,IF,LPAREN,x,SUB,WINDOW_SIZE,EQEQ,0,RPAREN,atan,LBRACKET,y,RBRACKET,LBRACKET,x,RBRACKET,EQ,Math,DOT,PI,SLASH,2,SEMI,ELSE,LBRACE,atan,LBRACKET,y,RBRACKET,LBRACKET,x,RBRACKET,EQ,Math,DOT,atan,LPAREN,LPAREN,double,RPAREN,LPAREN,y,SUB,WINDOW_SIZE,RPAREN,SLASH,LPAREN,x,SUB,WINDOW_SIZE,RPAREN,RPAREN,SEMI,IF,LPAREN,atan,LBRACKET,y,RBRACKET,LBRACKET,x,RBRACKET,LT,0,RPAREN,atan,LBRACKET,y,RBRACKET,LBRACKET,x,RBRACKET,PLUSEQ,Math,DOT,PI,SEMI,RBRACE,RBRACE,_firstTime,EQ,false,SEMI,RBRACE,int,width,EQ,map,LBRACKET,0,RBRACKET,DOT,length,SEMI,int,height,EQ,map,DOT,length,SEMI,_connectedPoint,EQ,NEW,Point,LBRACKET,height,RBRACKET,LBRACKET,width,RBRACKET,LBRACKET,8,RBRACKET,SEMI,FOR,LPAREN,int,y,EQ,0,SEMI,y,LT,height,SEMI,y,PLUSPLUS,RPAREN,LBRACE,FOR,LPAREN,int,x,EQ,0,SEMI,x,LT,width,SEMI,x,PLUSPLUS,RPAREN,LBRACE,_connectedPoint,LBRACKET,y,RBRACKET,LBRACKET,x,RBRACKET,LBRACKET,0,RBRACKET,EQ,NEW,Point,LPAREN,x,COMMA,y,SUB,1,RPAREN,SEMI,_connectedPoint,LBRACKET,y,RBRACKET,LBRACKET,x,RBRACKET,LBRACKET,1,RBRACKET,EQ,NEW,Point,LPAREN,x,PLUS,1,COMMA,y,SUB,1,RPAREN,SEMI,_connectedPoint,LBRACKET,y,RBRACKET,LBRACKET,x,RBRACKET,LBRACKET,2,RBRACKET,EQ,NEW,Point,LPAREN,x,PLUS,1,COMMA,y,RPAREN,SEMI,_connectedPoint,LBRACKET,y,RBRACKET,LBRACKET,x,RBRACKET,LBRACKET,3,RBRACKET,EQ,NEW,Point,LPAREN,x,PLUS,1,COMMA,y,PLUS,1,RPAREN,SEMI,_connectedPoint,LBRACKET,y,RBRACKET,LBRACKET,x,RBRACKET,LBRACKET,4,RBRACKET,EQ,NEW,Point,LPAREN,x,COMMA,y,PLUS,1,RPAREN,SEMI,_connectedPoint,LBRACKET,y,RBRACKET,LBRACKET,x,RBRACKET,LBRACKET,5,RBRACKET,EQ,NEW,Point,LPAREN,x,SUB,1,COMMA,y,PLUS,1,RPAREN,SEMI,_connectedPoint,LBRACKET,y,RBRACKET,LBRACKET,x,RBRACKET,LBRACKET,6,RBRACKET,EQ,NEW,Point,LPAREN,x,SUB,1,COMMA,y,RPAREN,SEMI,_connectedPoint,LBRACKET,y,RBRACKET,LBRACKET,x,RBRACKET,LBRACKET,7,RBRACKET,EQ,NEW,Point,LPAREN,x,SUB,1,COMMA,y,SUB,1,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,8,SEMI,i,PLUSPLUS,RPAREN,LBRACE,Point,p,EQ,_connectedPoint,LBRACKET,y,RBRACKET,LBRACKET,x,RBRACKET,LBRACKET,i,RBRACKET,SEMI,IF,LPAREN,p,DOT,x,GTEQ,width,BARBAR,p,DOT,y,GTEQ,height,BARBAR,p,DOT,x,LT,0,BARBAR,p,DOT,y,LT,0,RPAREN,LBRACE,_connectedPoint,LBRACKET,y,RBRACKET,LBRACKET,x,RBRACKET,LBRACKET,i,RBRACKET,EQ,NEW,Point,LPAREN,x,COMMA,y,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,RBRACE,RBRACE","    private static void initialise(int map[][])
,    {
,        if (_connectedPoint <MASK> null &&
,            _connectedPoint.length == map.length &&
,            _connectedPoint[0].length == map[0].length)
,            return;
,        
,        // initialise atan lookup
,        if (_firstTime)
,        {
,            atan = new double[WINDOW_SIZE * 2][WINDOW_SIZE * 2];
,                        
,            for (int y = 0; y < 2*WINDOW_SIZE; y++)
,            for (int x = 0; x < 2*WINDOW_SIZE; x++)
,            {
,                if (x-WINDOW_SIZE == 0 && y-WINDOW_SIZE == 0)
,                    atan[y][x] = ANGLE_UNDEFINED;
,                else if (x-WINDOW_SIZE == 0)
,                    atan[y][x] = Math.PI / 2;
,                else
,                {
,                    atan[y][x] = Math.atan((double)(y-WINDOW_SIZE) / (x-WINDOW_SIZE));
,                    
,                    if (atan[y][x] < 0)
,                        atan[y][x] += Math.PI;
,                }
,            }
,            _firstTime = false;
,        }
,        
,        // initialise neighbour point map
,        int width = map[0].length;
,        int height = map.length;
,        _connectedPoint = new Point[height][width][8];
,        for (int y = 0; y < height; y++)
,        {
,            for (int x = 0; x < width; x++)
,            {
,                _connectedPoint[y][x][0] = new Point(x, y-1);
,                _connectedPoint[y][x][1] = new Point(x+1, y-1);
,                _connectedPoint[y][x][2] = new Point(x+1, y);
,                _connectedPoint[y][x][3] = new Point(x+1, y+1);
,                _connectedPoint[y][x][4] = new Point(x, y+1);
,                _connectedPoint[y][x][5] = new Point(x-1, y+1);
,                _connectedPoint[y][x][6] = new Point(x-1, y);
,                _connectedPoint[y][x][7] = new Point(x-1, y-1);
,                for (int i = 0; i < 8; i++)
,                {
,                    Point p = _connectedPoint[y][x][i];
,                    if (p.x >= width || p.y >= height || p.x < 0 || p.y < 0)
,                    {
,                        _connectedPoint[y][x][i] = new Point(x, y);
,                    }
,                }
,            }
,        }
,    }
"
d71e9d90-d7d7-40b1-b4fa-c5316adcd69a,b37dc0d3-2204-4e96-8bd6-acf0f682f7f3,LTEQ,"MONKEYS_AT,Override,FINAL,PUBLIC,void,compute,LPAREN,RPAREN,LBRACE,FINAL,int,last,EQ,this,DOT,frameidx,SEMI,this,DOT,setFrameIdx,LPAREN,0,RPAREN,SEMI,FOR,LPAREN,int,t,EQ,0,SEMI,t,<MASK>,last,SEMI,t,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,t,GT,0,RPAREN,LBRACE,this,DOT,copyOutput,LPAREN,this,DOT,frameidx,SUB,1,COMMA,this,DOT,frameidx,RPAREN,SEMI,RBRACE,FOR,LPAREN,int,l,EQ,0,SEMI,l,LT,this,DOT,structure,DOT,layers,DOT,length,SEMI,l,PLUSPLUS,RPAREN,LBRACE,this,DOT,computeLayerActivations,LPAREN,l,RPAREN,SEMI,RBRACE,IF,LPAREN,t,LT,last,RPAREN,this,DOT,incrFrameIdx,LPAREN,RPAREN,SEMI,RBRACE,RBRACE","    @Override
,    final public void compute() {
,        //
,        // reset time.
,        //
,        final int last = this.frameidx;
,        this.setFrameIdx(0);
,        //
,        for (int t = 0; t <MASK> last; t++) {
,            //
,            if (t > 0) {
,                this.copyOutput(this.frameidx - 1, this.frameidx);
,            }
,            //
,            // from first to last layer.
,            //
,            for (int l = 0; l < this.structure.layers.length; l++) {
,                this.computeLayerActivations(l);
,            }
,            //
,            if (t < last) this.incrFrameIdx();
,        }
,    }
"
13ade84f-7d2c-4f3f-a13f-aa7abf8a58a5,d8c072a0-159f-43ec-b74e-b5c01a37dcf3,BANGEQ,"PUBLIC,UndirectedGraphNode,cloneGraphII,LPAREN,UndirectedGraphNode,node,RPAREN,LBRACE,IF,LPAREN,node,EQEQ,null,RPAREN,RETURN,node,SEMI,Set,LT,UndirectedGraphNode,GT,set,EQ,NEW,HashSet,LT,GT,LPAREN,RPAREN,SEMI,Stack,LT,UndirectedGraphNode,GT,unvisited,EQ,NEW,Stack,LT,GT,LPAREN,RPAREN,SEMI,unvisited,DOT,add,LPAREN,node,RPAREN,SEMI,WHILE,LPAREN,BANG,unvisited,DOT,isEmpty,LPAREN,RPAREN,RPAREN,LBRACE,UndirectedGraphNode,current,EQ,unvisited,DOT,pop,LPAREN,RPAREN,SEMI,set,DOT,add,LPAREN,current,RPAREN,SEMI,FOR,LPAREN,UndirectedGraphNode,n,COLON,current,DOT,neighbors,RPAREN,LBRACE,IF,LPAREN,n,<MASK>,null,AMPAMP,BANG,set,DOT,contains,LPAREN,n,RPAREN,RPAREN,LBRACE,unvisited,DOT,add,LPAREN,n,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,Map,LT,UndirectedGraphNode,COMMA,UndirectedGraphNode,GT,old2NewMapping,EQ,NEW,HashMap,LT,GT,LPAREN,RPAREN,SEMI,FOR,LPAREN,UndirectedGraphNode,old,COLON,set,RPAREN,LBRACE,UndirectedGraphNode,newNode,EQ,NEW,UndirectedGraphNode,LPAREN,old,DOT,label,RPAREN,SEMI,old2NewMapping,DOT,put,LPAREN,old,COMMA,newNode,RPAREN,SEMI,RBRACE,FOR,LPAREN,UndirectedGraphNode,old,COLON,set,RPAREN,LBRACE,UndirectedGraphNode,newNode,EQ,old2NewMapping,DOT,get,LPAREN,old,RPAREN,SEMI,FOR,LPAREN,UndirectedGraphNode,neighbor,COLON,old,DOT,neighbors,RPAREN,LBRACE,newNode,DOT,neighbors,DOT,add,LPAREN,old2NewMapping,DOT,get,LPAREN,neighbor,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,RETURN,old2NewMapping,DOT,get,LPAREN,node,RPAREN,SEMI,RBRACE","	public UndirectedGraphNode cloneGraphII(UndirectedGraphNode node) {
,		if (node == null)
,			return node;
,
,		Set<UndirectedGraphNode> set = new HashSet<>();
,		Stack<UndirectedGraphNode> unvisited = new Stack<>();
,		unvisited.add(node);
,
,		while (!unvisited.isEmpty()) {
,			UndirectedGraphNode current = unvisited.pop();
,			set.add(current);
,			for (UndirectedGraphNode n : current.neighbors) { // only add to unvisited if they are unvisited!
,				if (n <MASK> null && !set.contains(n)) {
,					unvisited.add(n);
,				}
,			}
,		}
,
,		Map<UndirectedGraphNode, UndirectedGraphNode> old2NewMapping = new HashMap<>();
,
,		for (UndirectedGraphNode old : set) {
,			UndirectedGraphNode newNode = new UndirectedGraphNode(old.label);
,			old2NewMapping.put(old, newNode);
,		}
,
,		for (UndirectedGraphNode old : set) {
,			UndirectedGraphNode newNode = old2NewMapping.get(old);
,			for (UndirectedGraphNode neighbor : old.neighbors) {
,				newNode.neighbors.add(old2NewMapping.get(neighbor));
,			}
,		}
,
,		return old2NewMapping.get(node);
,	}
"
2170437a-9f53-47a2-b3cb-257eca2eb4ab,6b737d47-b9f9-4145-9301-8fd4ab52a66c,EQEQ,"PUBLIC,Calendar,getMinDueDate,LPAREN,RPAREN,LBRACE,Calendar,result,EQ,Calendar,DOT,getInstance,LPAREN,RPAREN,SEMI,Calendar,min,EQ,null,SEMI,Calendar,toCheck,SEMI,IF,LPAREN,tasks,BANGEQ,null,AMPAMP,tasks,DOT,size,LPAREN,RPAREN,GT,0,RPAREN,LBRACE,FOR,LPAREN,Task,t,COLON,tasks,RPAREN,LBRACE,toCheck,EQ,t,DOT,getDueDate,LPAREN,RPAREN,SEMI,IF,LPAREN,min,<MASK>,null,BARBAR,toCheck,DOT,compareTo,LPAREN,min,RPAREN,LT,0,RPAREN,LBRACE,min,EQ,toCheck,SEMI,RBRACE,RBRACE,result,DOT,set,LPAREN,Calendar,DOT,YEAR,COMMA,min,DOT,get,LPAREN,Calendar,DOT,YEAR,RPAREN,RPAREN,SEMI,result,DOT,set,LPAREN,Calendar,DOT,MONTH,COMMA,min,DOT,get,LPAREN,Calendar,DOT,MONTH,RPAREN,RPAREN,SEMI,result,DOT,set,LPAREN,Calendar,DOT,DAY_OF_MONTH,COMMA,min,DOT,get,LPAREN,Calendar,DOT,DAY_OF_MONTH,RPAREN,RPAREN,SEMI,RBRACE,RETURN,result,SEMI,RBRACE","	public Calendar getMinDueDate()
,	{
,		Calendar result = Calendar.getInstance();
,		Calendar min = null;
,		Calendar toCheck;
,		if (tasks != null && tasks.size() > 0)
,		{
,			for (Task t : tasks)
,			{
,				toCheck = t.getDueDate();
,				if (min <MASK> null || toCheck.compareTo(min) < 0)
,				{
,					min = toCheck;
,				}
,			}
,			result.set(Calendar.YEAR, min.get(Calendar.YEAR));
,			result.set(Calendar.MONTH, min.get(Calendar.MONTH));
,			result.set(Calendar.DAY_OF_MONTH, min.get(Calendar.DAY_OF_MONTH));
,		}
,		return result;
,	}
"
7fe8faa8-6d71-4d77-acc6-fe9b7d23dda6,d7ad9cf7-52bc-4361-8d0f-9acb79fe616c,LTEQ,"PUBLIC,void,runEmbed,LPAREN,double,bpnz,COMMA,String,indir,COMMA,String,outdir,COMMA,String,resultfile,RPAREN,THROWS,Exception,LBRACE,String,pathSep,EQ,File,DOT,separator,SEMI,IF,LPAREN,BANG,indir,DOT,endsWith,LPAREN,pathSep,RPAREN,RPAREN,indir,PLUSEQ,pathSep,SEMI,IF,LPAREN,BANG,outdir,DOT,endsWith,LPAREN,pathSep,RPAREN,RPAREN,outdir,PLUSEQ,pathSep,SEMI,FileWriter,fw,EQ,null,SEMI,TRY,LBRACE,File,f1,EQ,NEW,File,LPAREN,indir,PLUS,""Thumbs.db"",RPAREN,SEMI,f1,DOT,delete,LPAREN,RPAREN,SEMI,File,dir,EQ,NEW,File,LPAREN,indir,RPAREN,SEMI,String,LBRACKET,RBRACKET,children,EQ,dir,DOT,list,LPAREN,RPAREN,SEMI,int,dirlength,EQ,children,DOT,length,SEMI,String,inputImage,EQ,"""",SEMI,String,outputImage,EQ,"""",SEMI,double,LBRACKET,RBRACKET,capacity0,EQ,NEW,double,LBRACKET,dirlength,RBRACKET,SEMI,double,LBRACKET,RBRACKET,capacity,EQ,NEW,double,LBRACKET,dirlength,RBRACKET,SEMI,double,LBRACKET,RBRACKET,bitsPerCoeff0,EQ,NEW,double,LBRACKET,dirlength,RBRACKET,SEMI,double,LBRACKET,RBRACKET,bitsPerCoeff,EQ,NEW,double,LBRACKET,dirlength,RBRACKET,SEMI,double,LBRACKET,RBRACKET,bitsPerPixel,EQ,NEW,double,LBRACKET,dirlength,RBRACKET,SEMI,double,LBRACKET,RBRACKET,bitsPerPixel0,EQ,NEW,double,LBRACKET,dirlength,RBRACKET,SEMI,double,LBRACKET,RBRACKET,zeros,EQ,NEW,double,LBRACKET,dirlength,RBRACKET,SEMI,double,LBRACKET,RBRACKET,nonzeros,EQ,NEW,double,LBRACKET,dirlength,RBRACKET,SEMI,double,LBRACKET,RBRACKET,fileSize,EQ,NEW,double,LBRACKET,dirlength,RBRACKET,SEMI,double,LBRACKET,RBRACKET,estimatedCapacity0,EQ,NEW,double,LBRACKET,dirlength,RBRACKET,SEMI,double,LBRACKET,RBRACKET,estimatedCapacity,EQ,NEW,double,LBRACKET,dirlength,RBRACKET,SEMI,double,LBRACKET,RBRACKET,timetaken0,EQ,NEW,double,LBRACKET,dirlength,RBRACKET,SEMI,int,LBRACKET,RBRACKET,LBRACKET,RBRACKET,estimatedstop,EQ,NEW,int,LBRACKET,dirlength,RBRACKET,LBRACKET,20,RBRACKET,SEMI,int,LBRACKET,RBRACKET,LBRACKET,RBRACKET,actualstop,EQ,NEW,int,LBRACKET,dirlength,RBRACKET,LBRACKET,20,RBRACKET,SEMI,int,LBRACKET,RBRACKET,LBRACKET,RBRACKET,TT,EQ,NEW,int,LBRACKET,dirlength,RBRACKET,LBRACKET,4,RBRACKET,SEMI,int,LBRACKET,RBRACKET,LBRACKET,RBRACKET,TR,EQ,NEW,int,LBRACKET,dirlength,RBRACKET,LBRACKET,4,RBRACKET,SEMI,int,LBRACKET,RBRACKET,LBRACKET,RBRACKET,TC,EQ,NEW,int,LBRACKET,dirlength,RBRACKET,LBRACKET,4,RBRACKET,SEMI,int,LBRACKET,RBRACKET,height,EQ,NEW,int,LBRACKET,dirlength,RBRACKET,SEMI,int,LBRACKET,RBRACKET,width,EQ,NEW,int,LBRACKET,dirlength,RBRACKET,SEMI,int,k,EQ,0,SEMI,FileWriter,fweff,EQ,null,SEMI,fw,EQ,NEW,FileWriter,LPAREN,resultfile,COMMA,true,RPAREN,SEMI,String,temp,EQ,""\nFile Name, Height, Width, File Size(KB),Bits_Per_Pixel,Capacity,Estimated_Capacity(Bytes),"",PLUS,""Bits_per_non-zero_Coefficient\n"",SEMI,fw,DOT,write,LPAREN,temp,RPAREN,SEMI,fw,DOT,close,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,dirlength,SEMI,i,PLUSPLUS,RPAREN,LBRACE,TRY,LBRACE,inputImage,EQ,indir,PLUS,children,LBRACKET,i,RBRACKET,SEMI,outputImage,EQ,outdir,PLUS,children,LBRACKET,i,RBRACKET,SEMI,String,extension,EQ,"""",SEMI,int,whereDot,EQ,children,LBRACKET,i,RBRACKET,DOT,lastIndexOf,LPAREN,.,RPAREN,SEMI,IF,LPAREN,0,LT,whereDot,AMPAMP,whereDot,<MASK>,children,LBRACKET,i,RBRACKET,DOT,length,LPAREN,RPAREN,SUB,2,RPAREN,LBRACE,extension,EQ,children,LBRACKET,i,RBRACKET,DOT,substring,LPAREN,whereDot,PLUS,1,RPAREN,SEMI,RBRACE,IF,LPAREN,BANG,extension,DOT,equals,LPAREN,""jpg"",RPAREN,AMPAMP,BANG,extension,DOT,equals,LPAREN,""JPG"",RPAREN,AMPAMP,BANG,extension,DOT,equals,LPAREN,""jpeg"",RPAREN,AMPAMP,BANG,extension,DOT,equals,LPAREN,""JPEG"",RPAREN,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""Invalid extension for file "",PLUS,inputImage,RPAREN,SEMI,CONTINUE,SEMI,RBRACE,System,DOT,out,DOT,println,LPAREN,""\n\n*********************************************"",RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""starting analysis of "",PLUS,inputImage,PLUS,""   File number = "",PLUS,LPAREN,i,PLUS,1,RPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""***********************************************"",RPAREN,SEMI,FOR,LPAREN,int,seed,EQ,0,SEMI,seed,LT,SEEDS,SEMI,seed,PLUSPLUS,RPAREN,LBRACE,double,bytesembedded,EQ,0,SEMI,generateRandomFile,LPAREN,datafile,COMMA,SUB,1,RPAREN,SEMI,String,password,EQ,generateRandomPassword,LPAREN,SUB,1,RPAREN,SEMI,long,time1,EQ,System,DOT,currentTimeMillis,LPAREN,RPAREN,SEMI,int,res,EQ,embed,LPAREN,password,COMMA,inputImage,COMMA,outputImage,COMMA,true,COMMA,datafile,COMMA,"""",COMMA,false,COMMA,true,COMMA,""log.txt"",COMMA,false,COMMA,bpnz,RPAREN,SEMI,IF,LPAREN,res,EQEQ,SUB,5,RPAREN,CONTINUE,SEMI,bytesembedded,PLUSEQ,LPAREN,embed,DOT,TOTALBytesEmbedded,LBRACKET,0,RBRACKET,RPAREN,SEMI,int,nonzero0,EQ,embed,DOT,TOTALBlocks,LBRACKET,0,RBRACKET,STAR,64,SUB,embed,DOT,TOTALZeros,LBRACKET,0,RBRACKET,SEMI,nonzeros,LBRACKET,i,RBRACKET,EQ,nonzero0,SEMI,zeros,LBRACKET,i,RBRACKET,EQ,embed,DOT,TOTALZeros,LBRACKET,0,RBRACKET,SEMI,int,nonzero,EQ,0,SEMI,FOR,LPAREN,int,m,EQ,0,SEMI,m,LT,3,SEMI,m,PLUSPLUS,RPAREN,LBRACE,nonzero,PLUSEQ,LPAREN,embed,DOT,TOTALBlocks,LBRACKET,m,RBRACKET,STAR,64,SUB,embed,DOT,TOTALZeros,LBRACKET,m,RBRACKET,RPAREN,SEMI,RBRACE,File,f3,EQ,NEW,File,LPAREN,inputImage,RPAREN,SEMI,capacity,LBRACKET,i,RBRACKET,PLUSEQ,LPAREN,double,RPAREN,LPAREN,bytesembedded,RPAREN,SEMI,estimatedCapacity,LBRACKET,i,RBRACKET,EQ,LPAREN,embed,DOT,TotalEstimatedCapacity,LBRACKET,0,RBRACKET,RPAREN,SEMI,bitsPerPixel,LBRACKET,i,RBRACKET,PLUSEQ,LPAREN,double,RPAREN,LPAREN,bytesembedded,STAR,8,RPAREN,SLASH,LPAREN,embed,DOT,decoder,DOT,height,STAR,embed,DOT,decoder,DOT,width,RPAREN,SEMI,bitsPerCoeff,LBRACKET,i,RBRACKET,PLUSEQ,LPAREN,double,RPAREN,LPAREN,bytesembedded,STAR,8,RPAREN,SLASH,nonzero,SEMI,fileSize,LBRACKET,i,RBRACKET,EQ,f3,DOT,length,LPAREN,RPAREN,SEMI,height,LBRACKET,i,RBRACKET,EQ,embed,DOT,decoder,DOT,height,SEMI,width,LBRACKET,i,RBRACKET,EQ,embed,DOT,decoder,DOT,width,SEMI,System,DOT,out,DOT,println,LPAREN,""******************** End analysis of "",PLUS,inputImage,RPAREN,SEMI,fw,EQ,NEW,FileWriter,LPAREN,resultfile,COMMA,true,RPAREN,SEMI,temp,EQ,children,LBRACKET,i,RBRACKET,PLUS,"","",PLUS,height,LBRACKET,i,RBRACKET,PLUS,"","",PLUS,width,LBRACKET,i,RBRACKET,PLUS,"","",PLUS,fileSize,LBRACKET,i,RBRACKET,SLASH,1024.0,PLUS,"","",PLUS,bitsPerPixel,LBRACKET,i,RBRACKET,PLUS,"","",PLUS,capacity,LBRACKET,i,RBRACKET,PLUS,"","",PLUS,estimatedCapacity,LBRACKET,i,RBRACKET,PLUS,"","",PLUS,bitsPerCoeff,LBRACKET,i,RBRACKET,PLUS,""\n"",SEMI,fw,DOT,write,LPAREN,temp,RPAREN,SEMI,fw,DOT,close,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,temp,RPAREN,SEMI,RBRACE,RBRACE,CATCH,LPAREN,Throwable,e,RPAREN,LBRACE,THROW,NEW,Exception,LPAREN,e,DOT,fillInStackTrace,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,CATCH,LPAREN,IOException,ex,RPAREN,LBRACE,THROW,ex,SEMI,RBRACE,FINALLY,LBRACE,TRY,LBRACE,fw,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,IOException,ex,RPAREN,LBRACE,THROW,ex,SEMI,RBRACE,RBRACE,RBRACE","    public void runEmbed(double bpnz, String indir, String outdir, String resultfile) throws Exception {
,         String pathSep= File.separator;
,
,        if(!indir.endsWith(pathSep))
,            indir+=pathSep;
,          if(!outdir.endsWith(pathSep))
,            outdir+=pathSep;
,
,       // String resultfile=outf+"".txt"";
,        FileWriter fw = null;
,        try {
,            File f1 = new File(indir + ""Thumbs.db"");
,            f1.delete();
,            File dir = new File(indir);
,            String[] children = dir.list();
,            int dirlength = children.length;
,          // dirlength=1;
,            String inputImage = """";
,            String outputImage = """";
,            double[] capacity0 = new double[dirlength];
,            double[] capacity = new double[dirlength];
,            double[] bitsPerCoeff0 = new double[dirlength];
,            double[] bitsPerCoeff = new double[dirlength];
,            double[] bitsPerPixel = new double[dirlength];
,            double[] bitsPerPixel0 = new double[dirlength];
,            double[] zeros = new double[dirlength];
,            double[] nonzeros = new double[dirlength];
,            double[] fileSize = new double[dirlength];
,            double[] estimatedCapacity0 = new double[dirlength];
,            double[] estimatedCapacity = new double[dirlength];
,            double[] timetaken0 = new double[dirlength];
,         //   double[] timetaken = new double[dirlength];
,            int[][] estimatedstop = new int[dirlength][20];
,            int[][] actualstop = new int[dirlength][20];
,            int[][] TT = new int[dirlength][4];
,            int[][] TR = new int[dirlength][4];
,            int[][] TC = new int[dirlength][4];
,            int[] height = new int[dirlength];
,            int[] width = new int[dirlength];
,            int k = 0;
,            FileWriter fweff = null;
,             fw = new FileWriter(resultfile,true);
,            String temp = ""\nFile Name, Height, Width, File Size(KB),Bits_Per_Pixel,Capacity,Estimated_Capacity(Bytes),"" + 
,                    ""Bits_per_non-zero_Coefficient\n"";
,            fw.write(temp);
,            fw.close();
,            for (int i = 0; i < dirlength; i++) {
,
,                try {
,                    inputImage = indir + children[i];
,                    outputImage = outdir + children[i];
,                    String extension = """";
,                    int whereDot = children[i].lastIndexOf('.');
,                    if (0 < whereDot && whereDot <MASK> children[i].length() - 2) {
,                        extension = children[i].substring(whereDot + 1);
,                    }
,                    if (!extension.equals(""jpg"") && !extension.equals(""JPG"") && !extension.equals(""jpeg"") && !extension.equals(""JPEG"")) {
,                        System.out.println(""Invalid extension for file "" + inputImage);
,                        continue;
,                    }
,                   
,                    System.out.println(""\n\n*********************************************"");
,                    System.out.println(""starting analysis of "" + inputImage + ""   File number = "" + (i+1));
,                    System.out.println(""***********************************************"");
,                    for (int seed = 0; seed < SEEDS; seed++) {
,                        double bytesembedded = 0;
,                        
,                        generateRandomFile(datafile, -1);
,                        String password = generateRandomPassword(-1);
,                        long time1 = System.currentTimeMillis();
,                        
,                        int res=embed(password, inputImage, outputImage, true, datafile, """", false, true, ""log.txt"", false,bpnz);
,                         if(res==-5) continue;
,                         bytesembedded += (embed.TOTALBytesEmbedded[0]);
,                        int nonzero0 = embed.TOTALBlocks[0] * 64 - embed.TOTALZeros[0];
,                        nonzeros[i] = nonzero0;
,                        zeros[i] = embed.TOTALZeros[0];
,                        int nonzero = 0;
,                        for (int m = 0; m < 3; m++) {
,                            nonzero += (embed.TOTALBlocks[m] * 64 - embed.TOTALZeros[m]);
,                        }
,                        File f3 = new File(inputImage);
,//                                               fweff=new FileWriter(""eff.txt"",true);
,//                        fweff.write(children[i]+"",""+f3.length()+"",""+embed.efficiency+""\n"");
,//                        fweff.close();
,
,                       // capacity0[i] += (double) (embed.TOTALBytesEmbedded[0]);
,                        capacity[i] += (double) (bytesembedded);
,                       // estimatedCapacity0[i] = (embed.TotalEstimatedCapacity[0]);
,                        estimatedCapacity[i] = (embed.TotalEstimatedCapacity[0]);
,                       // bitsPerPixel0[i] += (double) (embed.TOTALBytesEmbedded[0] * 8) / (embed.decoder.height * embed.decoder.width);
,                        bitsPerPixel[i] += (double) (bytesembedded * 8) / (embed.decoder.height * embed.decoder.width);
,                        //bitsPerCoeff0[i] += (double) (embed.TOTALBytesEmbedded[0] * 8) / nonzero0;
,                        bitsPerCoeff[i] += (double) (bytesembedded * 8) / nonzero;
,//                        for (int m = 0; m < embed.estimatesstops.length; m++) {
,//                            estimatedstop[i][m] += (embed.estimatesstops[m]);
,//                            actualstop[i][m] += embed.actualstop[m];
,//                        }
,                        
,                        fileSize[i] = f3.length();
,                        height[i] = embed.decoder.height;
,                        width[i] = embed.decoder.width;
,                        System.out.println(""******************** End analysis of "" + inputImage);
,            fw = new FileWriter(resultfile,true);
,               temp = children[i] + "","" + height[i] + "","" + width[i] + "","" + fileSize[i] / 1024.0 + "",""  + bitsPerPixel[i] + "","" + capacity[i] + "","" +  estimatedCapacity[i] + "",""  + bitsPerCoeff[i] + ""\n"";
,                fw.write(temp);
,                fw.close();
,             System.out.println(temp);
,           
,
,                    }
,//                    for (int m = 0; m < dec.estimatesstops.length; m++) {
,//                        estimatedstop[i][m] /= SEEDS;
,//                        actualstop[i][m] /= SEEDS;
,//                    }
,//                    for (int m = 0; m < dec.tableTotal.length; m++) {
,//                        TT[i][m] /= SEEDS;
,//                        TR[i][m] /= SEEDS;
,//                        TC[i][m] /= SEEDS;
,//                    }
,//                    capacity0[i] /= SEEDS;
,//                    capacity[i] /= SEEDS;
,//                    bitsPerCoeff0[i] /= SEEDS;
,//                    bitsPerCoeff[i] /= SEEDS;
,//                    bitsPerPixel[i] /= SEEDS;
,//                    bitsPerPixel0[i] /= SEEDS;
,//                    timetaken0[i] /= SEEDS;
,//                    timetaken[i] /= SEEDS;
,                } catch (Throwable e) {
,                   throw new Exception(e.fillInStackTrace());
,                }
,            }
,//            fw = new FileWriter(resultfile,false);
,//            String temp = ""\nFile Name, Height, Width, File Size(KB), Bits_Per_Pixel_Lu,Bits_Per_Pixel,Capacity_Lu(Bytes), Capacity(Bytes),Estimated_Capacity_Lu(Bytes),Estimated_Capacity(Bytes),"" + ""Bits_per_non-zero_Coefficient_Lu,Bits_per_non-zero_Coefficient,Time_Taken_Lu(ms),Time_Taken(ms)\n"";
,//            fw.write(temp);
,//            System.out.println(temp);
,//            for (int i = 0; i < dirlength; i++) {
,//                temp = children[i] + "","" + height[i] + "","" + width[i] + "","" + fileSize[i] / 1024.0 + "","" + bitsPerPixel0[i] + "","" + bitsPerPixel[i] + "","" + capacity0[i] + "","" + capacity[i] + "","" + estimatedCapacity0[i] + "","" + estimatedCapacity[i] + "","" + bitsPerCoeff0[i] + "","" + bitsPerCoeff[i] + "","" + timetaken0[i] + "","" + timetaken[i]+""\n"";
,//                fw.write(temp);
,//             System.out.println(temp);
,//           }
,//            temp = ""\nFile Name, Height, Width, File Size(KB), Total(-1), Total(1),Total(2), Total(3), TR(-1), TR(1), TR(2), TR(3), TC(-1->1), TC (1->-1), TC(2->3), TC(3->2), SP(-1_1), SP(2_3), zeros, nonzeros\n"";
,//          //  fw.write(temp);
,//            for (int i = 0; i < dirlength; i++) {
,//                temp = children[i] + "","" + height[i] + "","" + width[i] + "","" + fileSize[i] / 1024.0 + "","" + TT[i][0] + "","" + TT[i][1] + "","" + TT[i][2] + "","" + TT[i][3] + "","" + TR[i][0] + "","" + TR[i][1] + "","" + TR[i][2] + "","" + TR[i][3] + "","" + TC[i][0] + "","" + TC[i][1] + "","" + TC[i][2] + "","" + TC[i][3] + "","" + actualstop[i][0] + "","" + actualstop[i][1] + "","" + zeros[i] + "","" + nonzeros[i]+""\n"";
,//               // fw.write(temp);
,//               //System.out.println(temp);
,//         }
,//            fw.close();
,//        for (int i = 0; i < dirlength; i++) {
,//        	System.out.println(""\n\n\n\n**************************************************"");
,//        	System.out.println(""File name ="" +children[i]);
,//        	System.out.println(""Pair;Estimated Stop;Actual Stop"");
,//        	System.out.println(""(-1,1);""+estimatedstop[i][0]+"";""+actualstop[i][0]);
,//        	for (int j = 1; j < estimatedstop[i].length; j++){
,//            	System.out.println(""(""+(j*2)+"",""+(j*2+1)+"");""+estimatedstop[i][j]+"";""+actualstop[i][j]);
,//
,//
,//        	}
,//        	System.out.println(""**************************************************"");
,//
,//        }
,//
,        } catch (IOException ex) {
,            throw ex;
,        } finally {
,            try {
,                fw.close();
,            } catch (IOException ex) {
,                throw ex;
,            }
,        }
,       		 
,        
,//        for (int i = 0; i < dirlength; i++) {
,//        	System.out.println(""\n\n\n\n**************************************************"");
,//        	System.out.println(""File name ="" +children[i]);
,//        	System.out.println(""Pair;Estimated Stop;Actual Stop"");
,//        	System.out.println(""(-1,1);""+estimatedstop[i][0]+"";""+actualstop[i][0]);
,//        	for (int j = 1; j < estimatedstop[i].length; j++){
,//            	System.out.println(""(""+(j*2)+"",""+(j*2+1)+"");""+estimatedstop[i][j]+"";""+actualstop[i][j]);
,//       		
,//        		
,//        	}
,//        	System.out.println(""**************************************************"");
,//       
,//        }
,//       
,
,    }//end function
"
9c253d2b-e626-4f21-a850-dfb022369350,72ab9337-1103-414d-b36a-bbf4479501f0,LTEQ,"PUBLIC,double,solve,LPAREN,FINAL,double,tol,COMMA,FINAL,int,itmax,RPAREN,LBRACE,int,i,COMMA,j,COMMA,k,SEMI,int,itmax0,EQ,itmax,SEMI,doubleW,err,EQ,NEW,doubleW,LPAREN,0,RPAREN,SEMI,IF,LPAREN,itmax0,<MASK>,0,RPAREN,itmax0,EQ,2,STAR,max,LPAREN,ii,COMMA,jj,RPAREN,SEMI,intW,iter0,EQ,NEW,intW,LPAREN,0,RPAREN,SEMI,iter0,DOT,val,EQ,iter,SEMI,super,DOT,solve,LPAREN,b,COMMA,y,COMMA,1,COMMA,tol,COMMA,itmax0,COMMA,iter0,COMMA,err,RPAREN,SEMI,iter,EQ,iter0,DOT,val,SEMI,FOR,LPAREN,k,EQ,0,COMMA,i,EQ,0,SEMI,i,LT,ii,SEMI,i,PLUSPLUS,RPAREN,FOR,LPAREN,j,EQ,0,SEMI,j,LT,jj,SEMI,j,PLUSPLUS,RPAREN,mat,LBRACKET,i,RBRACKET,LBRACKET,j,RBRACKET,EQ,y,LBRACKET,k,PLUSPLUS,RBRACKET,SEMI,RETURN,err,DOT,val,SEMI,RBRACE","  public double solve(final double tol, final int itmax) {
,    int i,j,k;
,    int itmax0 = itmax;
,    doubleW err = new doubleW(0);
,    if (itmax0 <MASK> 0) itmax0 = 2*max(ii,jj);
,    intW iter0 = new intW(0);iter0.val=iter;
,    super.solve(b,y,1,tol,itmax0,iter0,err);
,    iter = iter0.val;
,    for (k=0,i=0;i<ii;i++) for (j=0;j<jj;j++) mat[i][j] = y[k++];
,    return err.val;
,  }
"
811987a2-df8f-411b-b35a-1f251eaec687,424af906-07fe-45d3-95d6-6b7574de694c,SLASH,"PUBLIC,void,trainMarkovChainModel,LPAREN,double,LBRACKET,RBRACKET,input,RPAREN,LBRACE,int,input_size,EQ,input,DOT,length,SEMI,int,from_state,COMMA,to_state,SEMI,Integer,LBRACKET,RBRACKET,count,EQ,NEW,Integer,LBRACKET,num_of_states,RBRACKET,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,num_of_states,SEMI,i,PLUSPLUS,RPAREN,count,LBRACKET,i,RBRACKET,EQ,0,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,input_size,SUB,2,SEMI,i,PLUSPLUS,RPAREN,LBRACE,from_state,EQ,getBinNumber,LPAREN,input,LBRACKET,i,RBRACKET,RPAREN,SEMI,to_state,EQ,getBinNumber,LPAREN,input,LBRACKET,i,PLUS,1,RBRACKET,RPAREN,SEMI,transition_matrix,DOT,set,LPAREN,from_state,COMMA,to_state,COMMA,transition_matrix,DOT,get,LPAREN,from_state,COMMA,to_state,RPAREN,PLUS,1,RPAREN,SEMI,count,LBRACKET,from_state,RBRACKET,PLUSPLUS,SEMI,logger,DOT,info,LPAREN,""FromVal:"",PLUS,input,LBRACKET,i,RBRACKET,PLUS,"" FromBin: "",PLUS,from_state,PLUS,"" ToVal:"",PLUS,input,LBRACKET,i,PLUS,1,RBRACKET,PLUS,"" ToBin: "",PLUS,to_state,PLUS,"" TransitionCount: "",PLUS,transition_matrix,DOT,get,LPAREN,from_state,COMMA,to_state,RPAREN,PLUS,"" TotalCount: "",PLUS,count,LBRACKET,from_state,RBRACKET,RPAREN,SEMI,RBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,num_of_states,SEMI,i,PLUSPLUS,RPAREN,LBRACE,FOR,LPAREN,int,j,EQ,0,SEMI,j,LT,num_of_states,SEMI,j,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,count,LBRACKET,i,RBRACKET,EQEQ,0,RPAREN,LBRACE,transition_matrix,DOT,set,LPAREN,i,COMMA,j,COMMA,0,RPAREN,SEMI,RBRACE,ELSE,LBRACE,transition_matrix,DOT,set,LPAREN,i,COMMA,j,COMMA,transition_matrix,DOT,get,LPAREN,i,COMMA,j,RPAREN,<MASK>,count,LBRACKET,i,RBRACKET,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,RBRACE","		public void trainMarkovChainModel (double[] input)
,		{
,			int input_size = input.length;
,			int from_state, to_state;
,			Integer[] count = new Integer[num_of_states];
,			for(int i=0;i<num_of_states;i++)
,				count[i] = 0;
,			
,			<MASK>/Loop through the input and record the number of transitions
,			for (int i = 0; i<input_size-2;i++)
,			{
,				from_state = getBinNumber(input[i]);
,				to_state = getBinNumber(input[i+1]);
,//				Increment entry by 1
,//				transition_matrix[from_state][to_state]++;
,				transition_matrix.set(from_state, to_state, transition_matrix.get(from_state, to_state)+1);
,
,				count[from_state]++;
,				//COMMENT THIS
,				logger.info(""FromVal:""+input[i]+"" FromBin: ""+from_state+
,						"" ToVal:""+input[i+1]+"" ToBin: ""+to_state+
,						"" TransitionCount: ""+transition_matrix.get(from_state, to_state)+
,						"" TotalCount: ""+count[from_state]);
,			}
,			
,			//Calculate the transition probability matrix 
,			for(int i = 0; i<num_of_states;i++)
,			{
,				for (int j=0; j<num_of_states;j++)
,				{
,					if (count[i] == 0)
,					{
,//						transition_matrix[i][j]
,						transition_matrix.set(i, j, 0);
,					}
,					else
,					{
,//						transition_matrix[i][j]/=count[i];
,						transition_matrix.set(i, j, transition_matrix.get(i,j)/count[i]);
,					}
,				}
,			}
,		}
"
ee6285e4-70fb-4aa1-99e0-6f8cd1871b27,118188b4-c7f9-417a-be7d-55f0ec94a796,LTEQ,"PUBLIC,STATIC,void,main,LPAREN,String,args,LBRACKET,RBRACKET,RPAREN,LBRACE,long,begin,EQ,System,DOT,currentTimeMillis,LPAREN,RPAREN,SEMI,int,total,EQ,475748,SEMI,int,limit,EQ,31716,SEMI,ExecutorService,executorService,EQ,Executors,DOT,newFixedThreadPool,LPAREN,total,SLASH,limit,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,total,SLASH,limit,SEMI,i,PLUSPLUS,RPAREN,LBRACE,String,name,EQ,""T"",PLUS,i,SEMI,executorService,DOT,execute,LPAREN,NEW,SetTF,LPAREN,name,COMMA,i,STAR,limit,COMMA,limit,RPAREN,RPAREN,SEMI,RBRACE,executorService,DOT,shutdown,LPAREN,RPAREN,SEMI,WHILE,LPAREN,BANG,executorService,DOT,isTerminated,LPAREN,RPAREN,RPAREN,LBRACE,RBRACE,long,end,EQ,System,DOT,currentTimeMillis,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""total time: "",PLUS,LPAREN,end,SUB,begin,RPAREN,SLASH,1000,RPAREN,SEMI,RBRACE","	public static void main(String args[]) {
,		long begin = System.currentTimeMillis();
,		int total = 475748;
,		int limit = 31716;
,		ExecutorService executorService = Executors.newFixedThreadPool(total
,				/ limit);
,		for (int i = 0; i <MASK> total / limit; i++) {
,			String name = ""T"" + i;
,			executorService.execute(new SetTF(name, i * limit, limit));
,		}
,		executorService.shutdown();
,		while (!executorService.isTerminated()) {
,		}
,		long end = System.currentTimeMillis();
,		System.out.println(""total time: "" + (end - begin) / 1000);
,	}
"
b792a0be-4219-4d3e-95ef-36bcf8d3d523,11467614-a53e-43c7-94b2-7bc167ad1004,GTEQ,"MONKEYS_AT,Override,PUBLIC,void,sell,LPAREN,Command,cmd,RPAREN,LBRACE,cmd,DOT,execute,LPAREN,RPAREN,SEMI,IF,LPAREN,Storage,DOT,getInstance,LPAREN,RPAREN,DOT,getRevenue,LPAREN,RPAREN,LT,10000.0,RPAREN,LBRACE,restaurant,DOT,setState,LPAREN,restaurant,DOT,getBadstate,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,Storage,DOT,getInstance,LPAREN,RPAREN,DOT,getRevenue,LPAREN,RPAREN,<MASK>,10000.0,AMPAMP,Storage,DOT,getInstance,LPAREN,RPAREN,DOT,getRevenue,LPAREN,RPAREN,LT,20000.0,RPAREN,LBRACE,restaurant,DOT,setState,LPAREN,restaurant,DOT,getNormalstate,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,ELSE,LBRACE,restaurant,DOT,setState,LPAREN,restaurant,DOT,getGoodstate,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,RBRACE","	@Override
,	public void sell(Command cmd) 
,	{
,		cmd.execute();
,		if(Storage.getInstance().getRevenue() < 10000.0)
,		{
,			restaurant.setState(restaurant.getBadstate());
,		}else if(Storage.getInstance().getRevenue() <MASK> 10000.0 && Storage.getInstance().getRevenue() < 20000.0)
,		{
,			restaurant.setState(restaurant.getNormalstate());
,		}
,		else
,		{
,			restaurant.setState(restaurant.getGoodstate());
,		}
,	}
"
9971c369-1cd4-431b-bab2-7edb0b3b68d5,95ebc8d9-c522-4344-90fa-76c0ffaa3aca,PLUS,"MONKEYS_AT,Override,DEFAULT,Query,unit,LPAREN,Object,s,RPAREN,LBRACE,IF,LPAREN,s,INSTANCEOF,Query,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""here"",RPAREN,SEMI,Query,res,EQ,LPAREN,Query,RPAREN,s,SEMI,System,DOT,out,DOT,println,LPAREN,""here2"",RPAREN,SEMI,RETURN,res,SEMI,RBRACE,List,LT,String,GT,res,EQ,NEW,ArrayList,LT,String,GT,LPAREN,RPAREN,SEMI,res,DOT,add,LPAREN,"""",<MASK>,s,RPAREN,SEMI,RETURN,LPAREN,RPAREN,ARROW,res,SEMI,RBRACE","	@Override
,	default Query unit(Object s){
,		if (s instanceof Query) {
,			System.out.println(""here"");
,			Query res = (Query)s;
,			System.out.println(""here2"");
,			return res;
,		}
,		List<String> res = new ArrayList<String>();
,		res.add(""""<MASK>s);
,		return () -> res;
,	}
"
2170437a-9f53-47a2-b3cb-257eca2eb4ab,28cf415d-6bc0-4306-bef0-75f2df100b5f,EQEQ,"PUBLIC,boolean,insertUser,LPAREN,User,newUser,RPAREN,LBRACE,String,values,SEMI,boolean,result,EQ,false,SEMI,TRY,LBRACE,values,EQ,newUser,DOT,getUserID,LPAREN,RPAREN,PLUS,"", '"",PLUS,formatString,LPAREN,newUser,DOT,getUserName,LPAREN,RPAREN,RPAREN,PLUS,""'"",SEMI,cmdString,EQ,""Insert into Users "",PLUS,"" Values("",PLUS,values,PLUS,"")"",SEMI,countUpdate,EQ,statement1,DOT,executeUpdate,LPAREN,cmdString,RPAREN,SEMI,result,EQ,LPAREN,checkWarning,LPAREN,statement1,COMMA,countUpdate,RPAREN,<MASK>,null,RPAREN,SEMI,RBRACE,CATCH,LPAREN,Exception,e,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,processSQLError,LPAREN,e,RPAREN,PLUS,"" in insertUser()"",RPAREN,SEMI,RBRACE,RETURN,result,SEMI,RBRACE","	public boolean insertUser(User newUser)
,	{
,		String values;
,		boolean result = false;
,		
,		try
,		{
,			values = newUser.getUserID() + "", '""
,					+ formatString(newUser.getUserName()) + ""'"";
,			cmdString = ""Insert into Users "" + "" Values("" + values + "")"";
,			countUpdate = statement1.executeUpdate(cmdString);
,			result = (checkWarning(statement1, countUpdate) <MASK> null);
,		}
,		catch (Exception e)
,		{
,			System.out.println(processSQLError(e) + "" in insertUser()"");
,		}
,		
,		return result;
,	}
"
9b07119d-5d87-44cb-94ac-77a9d4fc6019,c5667a8e-16cf-4069-95e8-fde37a499501,GT,"PUBLIC,STATIC,int,getChanges,LPAREN,BeanFitxaCurs,bean,COMMA,BeanFitxaCurs,bean2,RPAREN,LBRACE,int,nchanges,EQ,0,SEMI,IF,LPAREN,BANG,LPAREN,bean,DOT,curs,RPAREN,DOT,equals,LPAREN,bean2,DOT,curs,RPAREN,RPAREN,LBRACE,nchanges,PLUSEQ,1,SEMI,RBRACE,IF,LPAREN,BANG,LPAREN,bean,DOT,grup,RPAREN,DOT,equals,LPAREN,bean2,DOT,grup,RPAREN,RPAREN,LBRACE,nchanges,PLUSEQ,1,SEMI,RBRACE,IF,LPAREN,BANG,LPAREN,bean,DOT,any_academic,RPAREN,DOT,equals,LPAREN,bean2,DOT,any_academic,RPAREN,RPAREN,LBRACE,nchanges,PLUSEQ,1,SEMI,RBRACE,IF,LPAREN,BANG,LPAREN,bean,DOT,nivell,RPAREN,DOT,equals,LPAREN,bean2,DOT,nivell,RPAREN,RPAREN,LBRACE,nchanges,PLUSEQ,1,SEMI,RBRACE,IF,LPAREN,BANG,LPAREN,bean,DOT,professor,RPAREN,DOT,equals,LPAREN,bean2,DOT,professor,RPAREN,RPAREN,LBRACE,nchanges,PLUSEQ,1,SEMI,RBRACE,IF,LPAREN,BANG,LPAREN,bean,DOT,observacions,RPAREN,DOT,equals,LPAREN,bean2,DOT,observacions,RPAREN,RPAREN,LBRACE,nchanges,PLUSEQ,1,SEMI,RBRACE,IF,LPAREN,BANG,LPAREN,bean,DOT,deriva_ORI,EQEQ,bean2,DOT,deriva_ORI,RPAREN,RPAREN,LBRACE,nchanges,PLUSEQ,1,SEMI,RBRACE,IF,LPAREN,BANG,LPAREN,bean,DOT,motiuDerivacioORI,RPAREN,DOT,equals,LPAREN,bean2,DOT,motiuDerivacioORI,RPAREN,RPAREN,LBRACE,nchanges,PLUSEQ,1,SEMI,RBRACE,IF,LPAREN,BANG,LPAREN,bean,DOT,numMateriesSuspesesJuny,EQEQ,bean2,DOT,numMateriesSuspesesJuny,RPAREN,RPAREN,LBRACE,nchanges,PLUSEQ,1,SEMI,RBRACE,IF,LPAREN,Math,DOT,abs,LPAREN,bean,DOT,notaMitjanaFinal,SUB,bean2,DOT,notaMitjanaFinal,RPAREN,<MASK>,0.1,RPAREN,LBRACE,nchanges,PLUSEQ,1,SEMI,RBRACE,IF,LPAREN,BANG,LPAREN,bean,DOT,sancions,RPAREN,DOT,equals,LPAREN,bean2,DOT,sancions,RPAREN,RPAREN,LBRACE,nchanges,PLUSEQ,1,SEMI,RBRACE,IF,LPAREN,BANG,LPAREN,bean,DOT,programes,RPAREN,DOT,equals,LPAREN,bean2,DOT,programes,RPAREN,RPAREN,LBRACE,nchanges,PLUSEQ,1,SEMI,RBRACE,RETURN,nchanges,SEMI,RBRACE","    public static int getChanges(BeanFitxaCurs bean, BeanFitxaCurs bean2) {
,        int nchanges = 0;
,
,        if( !(bean.curs).equals(bean2.curs) ) {
,            nchanges += 1;
,        }
,        if( !(bean.grup).equals(bean2.grup) ) {
,            nchanges += 1;
,        }
,        if( !(bean.any_academic).equals(bean2.any_academic) ) {
,            nchanges += 1;
,        }
,        if( !(bean.nivell).equals(bean2.nivell) ) {
,            nchanges += 1;
,        }
,        if( !(bean.professor).equals(bean2.professor) ) {
,            nchanges += 1;
,        }
,        if( !(bean.observacions).equals(bean2.observacions) ) {
,            nchanges += 1;
,        }
,        if( !(bean.deriva_ORI==bean2.deriva_ORI) ) {
,            nchanges += 1;
,        }
,        if( !(bean.motiuDerivacioORI).equals(bean2.motiuDerivacioORI) ) {
,            nchanges += 1;
,        }
,        if( !(bean.numMateriesSuspesesJuny==bean2.numMateriesSuspesesJuny) ) {
,            nchanges += 1;
,        }
,        if( Math.abs(bean.notaMitjanaFinal-bean2.notaMitjanaFinal)<MASK>0.1 ) {
,            nchanges += 1;
,        }
,        
,        
,        //if( !(bean.NExpDisciplina==bean2.NExpDisciplina) ) nchanges += 1;
,
,        if( !(bean.sancions).equals(bean2.sancions) ) {
,            nchanges += 1;
,        }
,        if( !(bean.programes).equals(bean2.programes) ) {
,            nchanges += 1;
,        }
,
,         
,        return nchanges;
,    }
"
56952896-479b-43e9-a9cf-c3f3bb9afc0e,d11eb600-1b42-40b2-8d4b-7f5eed2b5e6d,SUB,"PUBLIC,UserDAO,LPAREN,RPAREN,THROWS,NamingException,COMMA,SQLException,LBRACE,lastUserAutoKey,EQ,<MASK>,1,SEMI,Context,cxt,EQ,NEW,InitialContext,LPAREN,RPAREN,SEMI,DataSource,ds,EQ,LPAREN,DataSource,RPAREN,cxt,DOT,lookup,LPAREN,""java:/comp/env/jdbc/CartDB"",RPAREN,SEMI,con,EQ,ds,DOT,getConnection,LPAREN,RPAREN,SEMI,RBRACE","    public UserDAO() throws NamingException, SQLException {
,
,        // initialize lastAutoKeys here
,        lastUserAutoKey = <MASK>1;
,
,        Context cxt = new InitialContext();
,        DataSource ds = (DataSource) cxt.lookup(""java:/comp/env/jdbc/CartDB"");
,
,        con = ds.getConnection();
,    }
"
a12f1b40-1037-49ca-8a3a-6cc46fb26c88,64cffd53-c801-419c-8182-a8f10c289c14,SLASH,"PUBLIC,STATIC,void,main,LPAREN,String,LBRACKET,RBRACKET,args,RPAREN,LBRACE,int,a,EQ,10,SEMI,int,b,EQ,20,SEMI,int,c,EQ,25,SEMI,int,d,EQ,25,SEMI,System,DOT,out,DOT,println,LPAREN,""a + b = "",PLUS,LPAREN,a,PLUS,b,RPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""a - b = "",PLUS,LPAREN,a,SUB,b,RPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""a * b = "",PLUS,LPAREN,a,STAR,b,RPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""b / a = "",PLUS,LPAREN,b,<MASK>,a,RPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""b % a = "",PLUS,LPAREN,b,PERCENT,a,RPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""c % a = "",PLUS,LPAREN,c,PERCENT,a,RPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""a++   = "",PLUS,LPAREN,a,PLUSPLUS,RPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""b--   = "",PLUS,LPAREN,b,SUBSUB,RPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""d++   = "",PLUS,LPAREN,d,PLUSPLUS,RPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""++d   = "",PLUS,LPAREN,PLUSPLUS,d,RPAREN,RPAREN,SEMI,RBRACE","	public static void main(String[] args) {
,		int a = 10;
,		int b = 20;
,		int c = 25;
,		int d = 25;
,		System.out.println(""a + b = "" + (a+b));
,		System.out.println(""a - b = "" + (a-b));
,		System.out.println(""a * b = "" + (a*b));
,		System.out.println(""b <MASK> a = "" + (b/a));
,		System.out.println(""b % a = "" + (b%a));
,		System.out.println(""c % a = "" + (c%a));
,		System.out.println(""a++   = "" + (a++));
,		System.out.println(""b--   = "" + (b--));
,		System.out.println(""d++   = "" + (d++));
,		System.out.println(""++d   = "" + (++d));
,	}
"
e64c1d9d-97c7-42df-873b-ba28e2c45ccc,ab5da444-f819-4a8c-8748-9b1c6915191d,GTEQ,"PUBLIC,String,minWindow,LPAREN,String,S,COMMA,String,T,RPAREN,LBRACE,int,start,EQ,0,COMMA,end,EQ,0,SEMI,String,result,EQ,"""",SEMI,int,LBRACKET,RBRACKET,expect,EQ,NEW,int,LBRACKET,256,RBRACKET,SEMI,int,LBRACKET,RBRACKET,lcount,EQ,NEW,int,LBRACKET,256,RBRACKET,SEMI,int,found,EQ,0,COMMA,min,EQ,Integer,DOT,MAX_VALUE,COMMA,temp,SEMI,int,i,COMMA,j,COMMA,k,SEMI,FOR,LPAREN,i,EQ,0,SEMI,i,LT,T,DOT,length,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,expect,LBRACKET,LPAREN,int,RPAREN,T,DOT,charAt,LPAREN,i,RPAREN,RBRACKET,PLUSPLUS,SEMI,RBRACE,WHILE,LPAREN,end,LT,S,DOT,length,LPAREN,RPAREN,RPAREN,LBRACE,lcount,LBRACKET,LPAREN,int,RPAREN,S,DOT,charAt,LPAREN,end,RPAREN,RBRACKET,PLUSPLUS,SEMI,IF,LPAREN,expect,LBRACKET,LPAREN,int,RPAREN,S,DOT,charAt,LPAREN,end,RPAREN,RBRACKET,GT,0,AMPAMP,expect,LBRACKET,LPAREN,int,RPAREN,S,DOT,charAt,LPAREN,end,RPAREN,RBRACKET,<MASK>,lcount,LBRACKET,LPAREN,int,RPAREN,S,DOT,charAt,LPAREN,end,RPAREN,RBRACKET,RPAREN,LBRACE,found,PLUSPLUS,SEMI,RBRACE,IF,LPAREN,found,LT,T,DOT,length,LPAREN,RPAREN,RPAREN,LBRACE,end,PLUSPLUS,SEMI,RBRACE,ELSE,LBRACE,WHILE,LPAREN,expect,LBRACKET,LPAREN,int,RPAREN,S,DOT,charAt,LPAREN,start,RPAREN,RBRACKET,EQEQ,0,BARBAR,lcount,LBRACKET,LPAREN,int,RPAREN,S,DOT,charAt,LPAREN,start,RPAREN,RBRACKET,GT,expect,LBRACKET,LPAREN,int,RPAREN,S,DOT,charAt,LPAREN,start,RPAREN,RBRACKET,RPAREN,LBRACE,lcount,LBRACKET,LPAREN,int,RPAREN,S,DOT,charAt,LPAREN,start,PLUSPLUS,RPAREN,RBRACKET,SUBSUB,SEMI,RBRACE,temp,EQ,end,SUB,start,PLUS,1,SEMI,IF,LPAREN,min,GT,temp,RPAREN,LBRACE,min,EQ,temp,SEMI,result,EQ,S,DOT,substring,LPAREN,start,COMMA,end,PLUS,1,RPAREN,SEMI,RBRACE,end,PLUSPLUS,SEMI,RBRACE,RBRACE,RETURN,result,SEMI,RBRACE","    public String minWindow(String S, String T) {
,        int start=0,end=0;
,        String result = """";
,        int[] expect = new int[256];
,        int[] lcount = new int[256];
,        int found=0,min=Integer.MAX_VALUE,temp;
,        int i,j,k;
,        for(i=0;i<T.length();i++){
,            expect[(int)T.charAt(i)]++;
,        }
,        while(end<S.length())
,        {
,            lcount[(int)S.charAt(end)]++;
,            if(expect[(int)S.charAt(end)]>0&&expect[(int)S.charAt(end)]<MASK>lcount[(int)S.charAt(end)]){
,                found++;
,            }
,            if(found<T.length()){
,                end++;
,            }
,            else{
,                while(expect[(int)S.charAt(start)]==0||lcount[(int)S.charAt(start)]>expect[(int)S.charAt(start)])
,                {
,                	lcount[(int)S.charAt(start++)]--;
,                }
,                temp = end - start+1;
,                if(min>temp){
,                    min =temp;
,                    result = S.substring(start,end+1);
,                }
,                end++;
,            }
,        }
,        return result;   
,    }
"
d71e9d90-d7d7-40b1-b4fa-c5316adcd69a,00412bf6-8383-4681-b8d9-2976b555c98a,LTEQ,"PRIVATE,void,resetWeightDiffs,LPAREN,RPAREN,LBRACE,FOR,LPAREN,int,i,EQ,1,SEMI,i,<MASK>,this,DOT,weightsnum,SEMI,i,PLUSPLUS,RPAREN,LBRACE,this,DOT,dweightslast,LBRACKET,i,RBRACKET,EQ,this,DOT,dweights,LBRACKET,i,RBRACKET,SEMI,this,DOT,dweights,LBRACKET,i,RBRACKET,EQ,0.0,SEMI,RBRACE,RBRACE","    private void resetWeightDiffs() {
,        //
,        // initialize weight diffs.
,        //
,        for (int i = 1; i <MASK> this.weightsnum; i++) {
,            this.dweightslast[i] = this.dweights[i];
,            this.dweights[i]     = 0.0;
,        }
,    }
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,d97dbf1e-8736-462b-b232-7eb736f64610,LT,"PROTECTED,void,stopServer,LPAREN,RPAREN,LBRACE,mainThreadRunning,EQ,false,SEMI,TRY,LBRACE,socket,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,IOException,e,RPAREN,LBRACE,RBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,clients,DOT,size,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,clients,DOT,get,LPAREN,i,RPAREN,INSTANCEOF,INDIClient,RPAREN,LBRACE,LPAREN,LPAREN,INDIClient,RPAREN,clients,DOT,get,LPAREN,i,RPAREN,RPAREN,DOT,disconnect,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,RBRACE","  protected void stopServer() {
,    mainThreadRunning = false;
,    try {
,      socket.close();  // Close the socket in order to avoid accepting new connections
,    } catch (IOException e) {
,    }
,
,    for (int i = 0 ; i <MASK> clients.size() ; i++) {
,      if (clients.get(i) instanceof INDIClient) {
,        ((INDIClient) clients.get(i)).disconnect();
,      }
,    }
,  }
"
13ade84f-7d2c-4f3f-a13f-aa7abf8a58a5,41e49784-c40b-4f2f-8943-a2b2e5701273,SUB,"PUBLIC,List,LT,List,LT,String,GTGT,partition,LPAREN,String,s,RPAREN,LBRACE,List,LT,List,LT,String,GTGT,result,EQ,NEW,ArrayList,LT,GT,LPAREN,RPAREN,SEMI,IF,LPAREN,s,EQEQ,null,BARBAR,s,DOT,length,LPAREN,RPAREN,EQEQ,0,RPAREN,RETURN,result,SEMI,boolean,isP,LBRACKET,RBRACKET,LBRACKET,RBRACKET,EQ,NEW,boolean,LBRACKET,s,DOT,length,LPAREN,RPAREN,RBRACKET,LBRACKET,s,DOT,length,LPAREN,RPAREN,RBRACKET,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,s,DOT,length,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,isP,LBRACKET,i,RBRACKET,LBRACKET,i,RBRACKET,EQ,true,SEMI,RBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,PLUS,1,LT,s,DOT,length,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,isP,LBRACKET,i,RBRACKET,LBRACKET,i,PLUS,1,RBRACKET,EQ,s,DOT,charAt,LPAREN,i,RPAREN,EQEQ,s,DOT,charAt,LPAREN,i,PLUS,1,RPAREN,SEMI,RBRACE,FOR,LPAREN,int,i,EQ,0,COMMA,j,EQ,2,SEMI,j,LT,s,DOT,length,LPAREN,RPAREN,SEMI,j,PLUSPLUS,RPAREN,LBRACE,FOR,LPAREN,int,k,EQ,i,COMMA,l,EQ,j,SEMI,l,LT,s,DOT,length,LPAREN,RPAREN,SEMI,k,PLUSPLUS,COMMA,l,PLUSPLUS,RPAREN,LBRACE,isP,LBRACKET,k,RBRACKET,LBRACKET,l,RBRACKET,EQ,isP,LBRACKET,k,PLUS,1,RBRACKET,LBRACKET,l,<MASK>,1,RBRACKET,AMPAMP,s,DOT,charAt,LPAREN,k,RPAREN,EQEQ,s,DOT,charAt,LPAREN,l,RPAREN,SEMI,RBRACE,RBRACE,dfs,LPAREN,s,COMMA,0,COMMA,result,COMMA,NEW,ArrayList,LT,String,GT,LPAREN,RPAREN,COMMA,isP,RPAREN,SEMI,RETURN,result,SEMI,RBRACE","	public List<List<String>> partition(String s) {
,		List<List<String>> result = new ArrayList<>();
,		if (s == null || s.length() == 0)
,			return result;
,
,		boolean isP[][] = new boolean[s.length()][s.length()];
,		for (int i = 0; i < s.length(); i++) {
,			isP[i][i] = true;
,		}
,		for (int i = 0; i + 1 < s.length(); i++) {
,			isP[i][i + 1] = s.charAt(i) == s.charAt(i + 1);
,		}
,
,		for (int i = 0, j = 2; j < s.length(); j++) {
,			for (int k = i, l = j; l < s.length(); k++, l++) {
,				isP[k][l] = isP[k + 1][l <MASK> 1] && s.charAt(k) == s.charAt(l);
,			}
,		}
,
,		dfs(s, 0, result, new ArrayList<String>(), isP);
,		return result;
,	}
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,8d7d69dc-7ad5-40ab-aa2e-872c32baaaa9,LT,"PUBLIC,STATIC,void,encode,LPAREN,java,DOT,nio,DOT,ByteBuffer,raw,COMMA,java,DOT,nio,DOT,CharBuffer,encoded,RPAREN,LBRACE,byte,LBRACKET,RBRACKET,raw3,EQ,NEW,byte,LBRACKET,3,RBRACKET,SEMI,byte,LBRACKET,RBRACKET,enc4,EQ,NEW,byte,LBRACKET,4,RBRACKET,SEMI,WHILE,LPAREN,raw,DOT,hasRemaining,LPAREN,RPAREN,RPAREN,LBRACE,int,rem,EQ,Math,DOT,min,LPAREN,3,COMMA,raw,DOT,remaining,LPAREN,RPAREN,RPAREN,SEMI,raw,DOT,get,LPAREN,raw3,COMMA,0,COMMA,rem,RPAREN,SEMI,Base64,DOT,encode3to4,LPAREN,enc4,COMMA,raw3,COMMA,rem,COMMA,Base64,DOT,NO_OPTIONS,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,4,SEMI,i,PLUSPLUS,RPAREN,LBRACE,encoded,DOT,put,LPAREN,LPAREN,char,RPAREN,LPAREN,enc4,LBRACKET,i,RBRACKET,AMP,FF,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,RBRACE","  public static void encode(java.nio.ByteBuffer raw, java.nio.CharBuffer encoded) {
,    byte[] raw3 = new byte[3];
,    byte[] enc4 = new byte[4];
,
,    while (raw.hasRemaining()) {
,      int rem = Math.min(3, raw.remaining());
,      raw.get(raw3, 0, rem);
,      Base64.encode3to4(enc4, raw3, rem, Base64.NO_OPTIONS);
,      for (int i = 0 ; i <MASK> 4 ; i++) {
,        encoded.put((char) (enc4[i] & 0xFF));
,      }
,    }   // end input remaining
,  }
"
8ec044ff-9e5c-46c4-ad39-ccc8ad42dd87,80c9e0f8-d95e-4c76-a60a-25da1483ea25,GT,"PUBLIC,void,addInvToLog,LPAREN,inventory,inv,RPAREN,LBRACE,DateFormat,dateFormat,EQ,NEW,SimpleDateFormat,LPAREN,""yyyyMMdd"",RPAREN,SEMI,Calendar,cal,EQ,Calendar,DOT,getInstance,LPAREN,RPAREN,SEMI,String,date,EQ,dateFormat,DOT,format,LPAREN,cal,DOT,getTime,LPAREN,RPAREN,RPAREN,SEMI,IF,LPAREN,dates,DOT,indexOf,LPAREN,date,RPAREN,<MASK>,SUB,1,RPAREN,LBRACE,inventories,DOT,set,LPAREN,dates,DOT,indexOf,LPAREN,date,RPAREN,COMMA,inv,RPAREN,SEMI,RBRACE,ELSE,LBRACE,dates,DOT,add,LPAREN,date,RPAREN,SEMI,inventories,DOT,add,LPAREN,inv,RPAREN,SEMI,RBRACE,loaders,DOT,saveInventoryReport,LPAREN,this,RPAREN,SEMI,RBRACE","		public void addInvToLog(inventory inv)
,		{
,			DateFormat dateFormat = new SimpleDateFormat(""yyyyMMdd"");
,			Calendar cal = Calendar.getInstance();
,			String date = dateFormat.format(cal.getTime());
,			
,			if(dates.indexOf(date)<MASK>-1)
,			{
,				inventories.set(dates.indexOf(date), inv);
,			}else{
,				dates.add(date);
,				inventories.add(inv);
,			}
,			
,			loaders.saveInventoryReport(this);
,		}
"
7bd76208-9b34-4151-9ec4-57c6c52e0fcf,49f7926d-4abe-48cf-9240-7694ef13a652,GTEQ,"PUBLIC,UpValue,findUpvalue,LPAREN,int,index,RPAREN,LBRACE,int,loopIndex,EQ,upvalues,DOT,size,LPAREN,RPAREN,SEMI,WHILE,LPAREN,SUBSUB,loopIndex,<MASK>,0,RPAREN,LBRACE,UpValue,upvalue,EQ,upvalues,DOT,elementAt,LPAREN,loopIndex,RPAREN,SEMI,int,currIndex,EQ,upvalue,DOT,getIndex,LPAREN,RPAREN,SEMI,IF,LPAREN,currIndex,EQEQ,index,RPAREN,RETURN,upvalue,SEMI,IF,LPAREN,currIndex,LT,index,RPAREN,BREAK,SEMI,RBRACE,UpValue,upvalue,EQ,NEW,UpValue,LPAREN,this,COMMA,index,RPAREN,SEMI,upvalues,DOT,insertElementAt,LPAREN,upvalue,COMMA,loopIndex,PLUS,1,RPAREN,SEMI,RETURN,upvalue,SEMI,RBRACE","	public UpValue findUpvalue( int index ){
,		int loopIndex = upvalues.size();
,		
,		while( --loopIndex <MASK> 0 ){
,			UpValue upvalue = upvalues.elementAt(loopIndex);
,			int currIndex = upvalue.getIndex();
,			
,			if ( currIndex == index )
,				return upvalue;
,			
,			if ( currIndex < index )
,				break; //Not found, create!
,		}
,		
,		UpValue upvalue = new UpValue(this, index);
,		
,		upvalues.insertElementAt(upvalue, loopIndex +1);
,		return upvalue;
,	}
"
875ed1bc-1c92-4cd5-aec8-a5e68ef60cdc,6d74b0cf-b91c-4fb2-80ed-5a7c88801cc0,STAR,"MONKEYS_AT,Override,PUBLIC,int,hashCode,LPAREN,RPAREN,LBRACE,int,hash,EQ,7,SEMI,hash,EQ,67,<MASK>,hash,PLUS,LPAREN,this,DOT,value,BANGEQ,null,QUES,this,DOT,value,DOT,hashCode,LPAREN,RPAREN,COLON,0,RPAREN,SEMI,RETURN,hash,SEMI,RBRACE","    @Override
,    public int hashCode() {
,        int hash = 7;
,        hash = 67 <MASK> hash + (this.value != null ? this.value.hashCode() : 0);
,        return hash;
,    }
"
09478113-8f39-4146-870b-8037a6932443,1731cbd0-27e0-4ccb-b803-be4744a72507,EQEQ,"PRIVATE,void,OP_LDA,LPAREN,RPAREN,LBRACE,int,iMem,EQ,readOperand,LPAREN,RPAREN,SEMI,setNFlag,LPAREN,getBit,LPAREN,iMem,COMMA,7,RPAREN,RPAREN,SEMI,setZFlag,LPAREN,iMem,<MASK>,0,RPAREN,SEMI,setA,LPAREN,iMem,RPAREN,SEMI,RBRACE","    private void OP_LDA()
,    {
,        int iMem = readOperand();
,
,        setNFlag(getBit(iMem, 7));
,        setZFlag(iMem <MASK> 0);
,
,        setA(iMem);
,    }
"
e804bdf1-7a07-4e36-aee6-aba6a427cf38,d807f04b-372e-454b-b076-a539000f6de0,GTEQ,"PUBLIC,int,LBRACKET,RBRACKET,getArrayOfAdjacentVertices,LPAREN,int,i,RPAREN,THROWS,IllegalArgumentException,LBRACE,IF,LPAREN,i,LT,0,BARBAR,i,<MASK>,numberOfVertices,RPAREN,LBRACE,String,errorMessage,EQ,""Allows vertex indizes are 0.."",PLUS,LPAREN,numberOfVertices,SUB,1,RPAREN,PLUS,""."",SEMI,THROW,NEW,IllegalArgumentException,LPAREN,errorMessage,RPAREN,SEMI,RBRACE,int,n,EQ,adjacencyList,LBRACKET,i,RBRACKET,DOT,size,LPAREN,RPAREN,SEMI,int,LBRACKET,RBRACKET,a,EQ,NEW,int,LBRACKET,n,RBRACKET,SEMI,FOR,LPAREN,int,v,EQ,0,SEMI,v,LT,n,SEMI,v,PLUSPLUS,RPAREN,LBRACE,a,LBRACKET,v,RBRACKET,EQ,adjacencyList,LBRACKET,i,RBRACKET,DOT,get,LPAREN,v,RPAREN,DOT,getTarget,LPAREN,RPAREN,SEMI,RBRACE,RETURN,a,SEMI,RBRACE","	public int[] getArrayOfAdjacentVertices(int i)
,		throws IllegalArgumentException {
,		
,		// check the passed vertex index
,		if (i < 0 || i <MASK> numberOfVertices) {
,			String errorMessage =
,				""Allows vertex indizes are 0..""
,				+ (numberOfVertices - 1) + ""."";
,			
,			throw new IllegalArgumentException(errorMessage);
,		}
,		
,		// convert the adjacency list to an array of appropriate size
,		int n = adjacencyList[i].size();
,		int[] a = new int[n];
,		
,		for (int v = 0; v < n; v++) {
,			a[v] = adjacencyList[i].get(v).getTarget();
,		}
,		
,		return a;
,	}
"
bb115c2b-93d3-4fea-80dd-cc21e3473e7b,54ae75aa-36b5-4c69-9e01-32b18fa2ac32,GT,"PRIVATE,STATIC,double,getScaleFactor,LPAREN,int,sourceSize,COMMA,int,targetSize,RPAREN,LBRACE,double,dScale,EQ,1,SEMI,IF,LPAREN,sourceSize,<MASK>,targetSize,RPAREN,LBRACE,dScale,EQ,LPAREN,double,RPAREN,targetSize,SLASH,LPAREN,double,RPAREN,sourceSize,SEMI,RBRACE,ELSE,LBRACE,dScale,EQ,LPAREN,double,RPAREN,targetSize,SLASH,LPAREN,double,RPAREN,sourceSize,SEMI,RBRACE,RETURN,dScale,SEMI,RBRACE","	private static double getScaleFactor(int sourceSize, int targetSize) {
,	    double dScale = 1;
,	    if (sourceSize <MASK> targetSize) {
,	        dScale = (double) targetSize / (double) sourceSize;
,	    } else {
,	        dScale = (double) targetSize / (double) sourceSize;
,	    }
,
,	    return dScale;
,	}
"
a64abb7e-1e48-4f96-a7b5-816a0922e0f3,fc9d70fc-1dbc-41b3-bc73-751d423b12b2,GT,"PRIVATE,double,maxValue,LPAREN,double,LBRACKET,RBRACKET,ar,RPAREN,LBRACE,double,max,EQ,Double,DOT,NEGATIVE_INFINITY,SEMI,FOR,LPAREN,double,d,COLON,ar,RPAREN,IF,LPAREN,d,<MASK>,max,RPAREN,max,EQ,d,SEMI,RETURN,max,SEMI,RBRACE","	private double maxValue(double[] ar) {
,		double max = Double.NEGATIVE_INFINITY;
,		
,		for (double d : ar)
,			if (d <MASK> max)
,				max = d;
,		
,		return max;
,	}
"
b6d08fd3-a673-4a77-8d9f-bf9a01922a85,ea9efe5b-7af7-4289-8286-21e3fa63ad58,SLASH,"void,loadBackTriggers,LPAREN,int,tile,RPAREN,LBRACE,int,y0,EQ,tile,STAR,TILE_WIDTH,SEMI,int,x0,EQ,LPAREN,int,RPAREN,Tools3d,DOT,rnd,LPAREN,2,COMMA,SUB,2,RPAREN,SEMI,ThermalTrigger,trigger,SEMI,int,dx,EQ,TILE_WIDTH,<MASK>,2,PLUS,3,SEMI,trigger,EQ,NEW,ThermalTrigger,LPAREN,app,COMMA,x0,SUB,dx,COMMA,y0,PLUS,3,COMMA,2,RPAREN,SEMI,tiles,LBRACKET,tile,RBRACKET,DOT,triggers,DOT,addElement,LPAREN,trigger,RPAREN,SEMI,trigger,EQ,NEW,ThermalTrigger,LPAREN,app,COMMA,x0,PLUS,dx,COMMA,y0,PLUS,15,COMMA,2,RPAREN,SEMI,tiles,LBRACKET,tile,RBRACKET,DOT,triggers,DOT,addElement,LPAREN,trigger,RPAREN,SEMI,RBRACE","    void loadBackTriggers(int tile) {
,        int y0 = tile * TILE_WIDTH;
,        int x0 = (int) Tools3d.rnd(2, -2);
,        ThermalTrigger trigger;
,        int dx = TILE_WIDTH <MASK> 2 + 3;
,
,        trigger = new ThermalTrigger(app, x0 - dx, y0 + 3, 2);
,        tiles[tile].triggers.addElement(trigger);
,
,        trigger = new ThermalTrigger(app, x0 + dx, y0 + 15, 2);
,        tiles[tile].triggers.addElement(trigger);
,    }
"
4efd15d4-7259-49ef-bb2b-8984a1154bd6,1a0b921e-68f8-49ad-9f93-81bba3887450,SUB,"MONKEYS_AT,Override,PUBLIC,int,compare,LPAREN,TopicOutput,o1,COMMA,TopicOutput,o2,RPAREN,LBRACE,TRY,LBRACE,IF,LPAREN,o1,DOT,getRelevance,LPAREN,RPAREN,GT,o2,DOT,getRelevance,LPAREN,RPAREN,RPAREN,LBRACE,RETURN,<MASK>,1,SEMI,RBRACE,ELSE,IF,LPAREN,o1,DOT,getRelevance,LPAREN,RPAREN,LT,o2,DOT,getRelevance,LPAREN,RPAREN,RPAREN,LBRACE,RETURN,1,SEMI,RBRACE,RBRACE,CATCH,LPAREN,Exception,e,RPAREN,LBRACE,System,DOT,err,DOT,println,LPAREN,e,DOT,toString,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,RETURN,0,SEMI,RBRACE","        @Override
,        public int compare(TopicOutput o1, TopicOutput o2) {
,          
,        try{
,            if (o1.getRelevance() > o2.getRelevance()) {
,                return <MASK>1;
,            } else if (o1.getRelevance() < o2.getRelevance()) {
,                return 1;
,        }
,        }catch(Exception e){
,            System.err.println(e.toString());
,        }
,        return 0;
,        }
"
ad0a2aad-9ad8-443c-832f-88b9f64460ed,5f3f4a88-d68d-4146-be74-787ade00c943,EQ,"PROTECTED,void,initialize,LPAREN,RPAREN,LBRACE,driveTrain,DOT,turnBtn,<MASK>,true,SEMI,RBRACE","    protected void initialize() {
,        driveTrain.turnBtn <MASK> true;
,    }
"
ad0a2aad-9ad8-443c-832f-88b9f64460ed,ff64fa92-1edb-42b6-9129-4ce7a473985d,EQ,"PROTECTED,void,initialize,LPAREN,RPAREN,LBRACE,shooter,DOT,update,LPAREN,LPAREN,int,RPAREN,CommandBase,DOT,height,DOT,fetch,LPAREN,RPAREN,COMMA,LPAREN,int,RPAREN,CommandBase,DOT,rate,DOT,fetch,LPAREN,RPAREN,RPAREN,SEMI,shooter,DOT,resetV,LPAREN,RPAREN,SEMI,shooter,DOT,forward,<MASK>,true,SEMI,RBRACE","    protected void initialize() {
,        shooter.update((int)CommandBase.height.fetch(), (int)CommandBase.rate.fetch());
,        shooter.resetV();
,        shooter.forward <MASK> true;
,    }
"
7bd76208-9b34-4151-9ec4-57c6c52e0fcf,031fdc2f-b103-43eb-8d15-912f9f2ecf89,GTEQ,"PUBLIC,int,call,LPAREN,CallFrame,frame,COMMA,int,argCount,RPAREN,LBRACE,Object,index,EQ,frame,DOT,getArg,LPAREN,0,RPAREN,SEMI,IF,LPAREN,index,INSTANCEOF,String,RPAREN,LBRACE,String,string,EQ,LPAREN,String,RPAREN,index,SEMI,IF,LPAREN,string,DOT,startsWith,LPAREN,""#"",RPAREN,RPAREN,LBRACE,frame,DOT,push,LPAREN,argCount,SUB,1,RPAREN,SEMI,RETURN,1,SEMI,RBRACE,RBRACE,int,limit,EQ,frame,DOT,getIntArg,LPAREN,0,RPAREN,SEMI,IF,LPAREN,limit,<MASK>,1,AMPAMP,limit,LT,argCount,RPAREN,LBRACE,RETURN,argCount,SUB,limit,SEMI,RBRACE,RETURN,0,SEMI,RBRACE","		public int call(CallFrame frame, int argCount) {
,			Object index = frame.getArg(0);
,			
,			if ( index instanceof String ){
,				String string = (String) index;
,				
,				if ( string.startsWith(""#"") ){
,					frame.push( argCount -1 );
,					return 1;
,				}
,			}
,			
,			int limit = frame.getIntArg(0);
,			if ( limit <MASK> 1 && limit < argCount ){
,				return argCount - limit;
,			}
,			
,			return 0;
,		}
"
2170437a-9f53-47a2-b3cb-257eca2eb4ab,bddd0fc7-9b0e-4039-a93a-407924043d2d,EQEQ,"PUBLIC,List,LT,User,GT,getUsers,LPAREN,RPAREN,LBRACE,IF,LPAREN,users,<MASK>,null,RPAREN,LBRACE,users,EQ,dataAccess,DOT,getUsersSequential,LPAREN,RPAREN,SEMI,RBRACE,RETURN,users,SEMI,RBRACE","	public List<User> getUsers()
,	{
,		if (users <MASK> null)
,		{
,			users = dataAccess.getUsersSequential();
,		}
,		
,		return users;
,	}
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,bfa4bdb4-76f5-4413-ac46-75f58ba949e7,BANGEQ,"PUBLIC,STATIC,void,main,LPAREN,String,LBRACKET,RBRACKET,args,RPAREN,LBRACE,IF,LPAREN,args,DOT,length,<MASK>,1,RPAREN,LBRACE,System,DOT,err,DOT,println,LPAREN,""A INDIDriver class name must be supplied"",RPAREN,SEMI,System,DOT,exit,LPAREN,SUB,1,RPAREN,SEMI,RBRACE,INDIDriver,driver,EQ,null,SEMI,TRY,LBRACE,Class,theClass,EQ,Class,DOT,forName,LPAREN,args,LBRACKET,0,RBRACKET,RPAREN,SEMI,Constructor,c,EQ,theClass,DOT,getConstructor,LPAREN,InputStream,DOT,CLASS,COMMA,OutputStream,DOT,CLASS,RPAREN,SEMI,driver,EQ,LPAREN,INDIDriver,RPAREN,c,DOT,newInstance,LPAREN,System,DOT,in,COMMA,System,DOT,out,RPAREN,SEMI,RBRACE,CATCH,LPAREN,ClassNotFoundException,ex,RPAREN,LBRACE,System,DOT,err,DOT,println,LPAREN,ex,PLUS,"" class must be in class path."",RPAREN,SEMI,System,DOT,exit,LPAREN,SUB,1,RPAREN,SEMI,RBRACE,CATCH,LPAREN,InstantiationException,ex,RPAREN,LBRACE,System,DOT,err,DOT,println,LPAREN,ex,PLUS,"" class must be concrete."",RPAREN,SEMI,System,DOT,exit,LPAREN,SUB,1,RPAREN,SEMI,RBRACE,CATCH,LPAREN,IllegalAccessException,ex,RPAREN,LBRACE,System,DOT,err,DOT,println,LPAREN,ex,PLUS,"" class must have a no-arg constructor."",RPAREN,SEMI,System,DOT,exit,LPAREN,SUB,1,RPAREN,SEMI,RBRACE,CATCH,LPAREN,NoSuchMethodException,ex,RPAREN,LBRACE,System,DOT,err,DOT,println,LPAREN,ex,PLUS,"" class must have a InputStream, OutputStream constructor."",RPAREN,SEMI,System,DOT,exit,LPAREN,SUB,1,RPAREN,SEMI,RBRACE,CATCH,LPAREN,InvocationTargetException,ex,RPAREN,LBRACE,System,DOT,err,DOT,println,LPAREN,ex,PLUS,"" invocation target exception."",RPAREN,SEMI,System,DOT,exit,LPAREN,SUB,1,RPAREN,SEMI,RBRACE,driver,DOT,startListening,LPAREN,RPAREN,SEMI,RBRACE","  public static void main(String[] args) {
,    if (args.length <MASK> 1) {
,      System.err.println(""A INDIDriver class name must be supplied"");
,      System.exit(-1);
,    }
,
,    INDIDriver driver = null;
,
,    try {
,      Class theClass = Class.forName(args[0]);
,      Constructor c = theClass.getConstructor(InputStream.class, OutputStream.class);
,      driver = (INDIDriver)c.newInstance(System.in, System.out);
,    } catch (ClassNotFoundException ex) {
,      System.err.println(ex + "" class must be in class path."");
,      System.exit(-1);
,    } catch (InstantiationException ex) {
,      System.err.println(ex + "" class must be concrete."");
,      System.exit(-1);
,    } catch (IllegalAccessException ex) {
,      System.err.println(ex + "" class must have a no-arg constructor."");
,      System.exit(-1);
,    } catch (NoSuchMethodException ex) {
,      System.err.println(ex + "" class must have a InputStream, OutputStream constructor."");
,      System.exit(-1);
,    } catch (InvocationTargetException ex) {
,      System.err.println(ex + "" invocation target exception."");
,      System.exit(-1);
,    }
,
,//    System.err.println(driver.getName());
,
,    driver.startListening();
,  }
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,4c859466-cf0d-44ad-b718-9109810b6c29,LT,"PROTECTED,void,sendXMLMessageToAllClients,LPAREN,Element,xml,RPAREN,LBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,clients,DOT,size,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,INDIDeviceListener,c,EQ,clients,DOT,get,LPAREN,i,RPAREN,SEMI,IF,LPAREN,c,INSTANCEOF,INDIClient,RPAREN,LBRACE,c,DOT,sendXMLMessage,LPAREN,xml,RPAREN,SEMI,RBRACE,RBRACE,RBRACE","  protected void sendXMLMessageToAllClients(Element xml) {
,    for (int i = 0 ; i <MASK> clients.size() ; i++) {
,      INDIDeviceListener c = clients.get(i);
,
,      if (c instanceof INDIClient) {
,        c.sendXMLMessage(xml);
,      }
,    }
,  }
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,11fe7a30-6adb-46bf-ab9c-3195a6efab62,BANGEQ,"PUBLIC,STATIC,HashMap,LT,ABObject,LBRACKET,RBRACKET,COMMA,ContactDimension,GT,ExtractDimentsion,LPAREN,RPAREN,LBRACE,CDDictionary,EQ,NEW,HashMap,LT,ABObject,LBRACKET,RBRACKET,COMMA,ContactDimension,GT,LPAREN,RPAREN,SEMI,FOR,LPAREN,Map,DOT,Entry,LT,ABObject,LBRACKET,RBRACKET,COMMA,ERA,LBRACKET,RBRACKET,GT,entry,COLON,RADictionary,DOT,entrySet,LPAREN,RPAREN,RPAREN,LBRACE,ABObject,LBRACKET,RBRACKET,key,EQ,entry,DOT,getKey,LPAREN,RPAREN,SEMI,ContactDimension,cd,EQ,ContactDimension,DOT,NULL,SEMI,IF,LPAREN,CRDictionary,DOT,get,LPAREN,key,RPAREN,<MASK>,ContactRelation,DOT,NULL,RPAREN,LBRACE,ERA,LBRACKET,RBRACKET,value,EQ,entry,DOT,getValue,LPAREN,RPAREN,SEMI,IF,LPAREN,value,LBRACKET,0,RBRACKET,EQEQ,ERA,DOT,MEETS,BARBAR,value,LBRACKET,0,RBRACKET,EQEQ,ERA,DOT,INVERSE_MEETS,RPAREN,LBRACE,cd,EQ,ContactDimension,DOT,HORIZONTAL,SEMI,RBRACE,ELSE,LBRACE,cd,EQ,ContactDimension,DOT,VERTICAL,SEMI,RBRACE,CDDictionary,DOT,put,LPAREN,key,COMMA,cd,RPAREN,SEMI,RBRACE,RBRACE,RETURN,CDDictionary,SEMI,RBRACE","    public static HashMap<ABObject[], ContactDimension> ExtractDimentsion()
,    {
,    	CDDictionary = new HashMap<ABObject[], ContactDimension>();
,    	for (Map.Entry<ABObject[], ERA[]> entry : RADictionary.entrySet())
,    	{
,    		ABObject[] key = entry.getKey();
,			ContactDimension cd = ContactDimension.NULL;
,    		if (CRDictionary.get(key) <MASK> ContactRelation.NULL)
,    		{
,    			ERA[] value = entry.getValue();
,    			if (value[0] == ERA.MEETS || value[0] == ERA.INVERSE_MEETS)
,    			{
,    				cd = ContactDimension.HORIZONTAL;
,    			}
,    			else
,    			{
,    				cd = ContactDimension.VERTICAL;
,    			}
,    			CDDictionary.put(key, cd);
,    		}
,    	}
,    	return CDDictionary;
,    }
"
46b67b7f-680f-46e8-8d0d-ebfce935cfd6,64306e9e-46d8-4f9f-b90a-fb07654c4043,SLASH,"PUBLIC,STATIC,void,text,LPAREN,double,x,COMMA,double,y,COMMA,String,s,RPAREN,LBRACE,offscreen,DOT,setFont,LPAREN,font,RPAREN,SEMI,FontMetrics,metrics,EQ,offscreen,DOT,getFontMetrics,LPAREN,RPAREN,SEMI,double,xs,EQ,scaleX,LPAREN,x,RPAREN,SEMI,double,ys,EQ,scaleY,LPAREN,y,RPAREN,SEMI,int,ws,EQ,metrics,DOT,stringWidth,LPAREN,s,RPAREN,SEMI,int,hs,EQ,metrics,DOT,getDescent,LPAREN,RPAREN,SEMI,offscreen,DOT,drawString,LPAREN,s,COMMA,LPAREN,float,RPAREN,LPAREN,xs,SUB,ws,<MASK>,2.0,RPAREN,COMMA,LPAREN,float,RPAREN,LPAREN,ys,PLUS,hs,RPAREN,RPAREN,SEMI,draw,LPAREN,RPAREN,SEMI,RBRACE","    public static void text(double x, double y, String s) {
,        offscreen.setFont(font);
,        FontMetrics metrics = offscreen.getFontMetrics();
,        double xs = scaleX(x);
,        double ys = scaleY(y);
,        int ws = metrics.stringWidth(s);
,        int hs = metrics.getDescent();
,        offscreen.drawString(s, (float) (xs - ws<MASK>2.0), (float) (ys + hs));
,        draw();
,    }
"
7adec7d8-cee7-4225-a9f6-43a8dd4e76a6,faa18dc3-5664-46d2-8661-60afd163f5ff,STAR,"PUBLIC,STATIC,String,getShortTradesSummary,LPAREN,ArrayList,LT,ClosedTransaction,GT,closed,RPAREN,LBRACE,Iterator,LT,ClosedTransaction,GT,i,EQ,closed,DOT,iterator,LPAREN,RPAREN,SEMI,int,shortTrades,EQ,0,SEMI,int,shortProfitTrades,EQ,0,SEMI,WHILE,LPAREN,i,DOT,hasNext,LPAREN,RPAREN,RPAREN,LBRACE,ClosedTransaction,ct,EQ,i,DOT,next,LPAREN,RPAREN,SEMI,String,type,EQ,ct,DOT,getType,LPAREN,RPAREN,SEMI,double,pl,EQ,ct,DOT,getPl,LPAREN,RPAREN,SEMI,IF,LPAREN,type,EQEQ,""sell"",RPAREN,LBRACE,shortTrades,PLUSPLUS,SEMI,IF,LPAREN,pl,GT,0,RPAREN,LBRACE,shortProfitTrades,PLUSPLUS,SEMI,RBRACE,RBRACE,RBRACE,double,profitPercent,EQ,shortTrades,EQEQ,0,QUES,0,COLON,shortProfitTrades,<MASK>,100,SLASH,shortTrades,SEMI,String,summary,EQ,String,DOT,format,LPAREN,""%d (%.2f%%)"",COMMA,shortTrades,COMMA,profitPercent,RPAREN,SEMI,RETURN,summary,SEMI,RBRACE","	public static String getShortTradesSummary(ArrayList<ClosedTransaction> closed) {
,		Iterator<ClosedTransaction> i = closed.iterator();
,		int shortTrades = 0;
,		int shortProfitTrades = 0;
,		while(i.hasNext()) {
,			ClosedTransaction ct = i.next();
,			String type = ct.getType();
,			double pl = ct.getPl();
,			if(type == ""sell"") {
,				shortTrades++;
,				if(pl > 0) {
,					shortProfitTrades++;
,				}
,			}
,		}
,
,		double profitPercent = shortTrades == 0 ? 0 : shortProfitTrades <MASK> 100/shortTrades;
,		String summary = String.format(""%d (%.2f%%)"", shortTrades, profitPercent);
,		return summary;
,	}
"
46d8f694-b1f9-40ac-a94e-e9d7b8a315c4,ecb44dd9-1a41-4d20-a612-ab4e80af4396,GT,"PUBLIC,boolean,lookup,LPAREN,Node,node,COMMA,Integer,dataToLookup,RPAREN,LBRACE,IF,LPAREN,node,EQEQ,null,RPAREN,RETURN,false,SEMI,ELSE,IF,LPAREN,node,DOT,getData,LPAREN,RPAREN,DOT,compareTo,LPAREN,dataToLookup,RPAREN,EQEQ,0,RPAREN,RETURN,true,SEMI,ELSE,IF,LPAREN,node,DOT,getData,LPAREN,RPAREN,DOT,compareTo,LPAREN,dataToLookup,RPAREN,<MASK>,0,RPAREN,LBRACE,RETURN,lookup,LPAREN,node,DOT,getLeft,LPAREN,RPAREN,COMMA,dataToLookup,RPAREN,SEMI,RBRACE,ELSE,LBRACE,RETURN,lookup,LPAREN,node,DOT,getRight,LPAREN,RPAREN,COMMA,dataToLookup,RPAREN,SEMI,RBRACE,RBRACE","	public boolean lookup(Node node, Integer dataToLookup){
,		if(node == null)
,			return false;
,		else if(node.getData().compareTo(dataToLookup) == 0)
,			return true;
,		else if(node.getData().compareTo(dataToLookup) <MASK> 0){
,			return lookup(node.getLeft(), dataToLookup);
,		}else{
,			return lookup(node.getRight(), dataToLookup);
,		}
,	}
"
46d8f694-b1f9-40ac-a94e-e9d7b8a315c4,4928b303-d2aa-41c1-b33e-236b671efdd3,GT,"STATIC,String,reverseInPlace,LPAREN,String,aStr,RPAREN,LBRACE,char,LBRACKET,RBRACKET,charbuf,EQ,aStr,DOT,toCharArray,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,charbuf,DOT,length,SUB,1,COMMA,j,EQ,0,SEMI,i,<MASK>,j,SEMI,i,SUBSUB,COMMA,j,PLUSPLUS,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""ReverseString.reverseInPlace() i="",PLUS,i,PLUS,"" j="",PLUS,j,RPAREN,SEMI,IF,LPAREN,charbuf,LBRACKET,i,RBRACKET,EQEQ,charbuf,LBRACKET,j,RBRACKET,RPAREN,LBRACE,CONTINUE,SEMI,RBRACE,char,temp,EQ,charbuf,LBRACKET,i,RBRACKET,SEMI,charbuf,LBRACKET,i,RBRACKET,EQ,charbuf,LBRACKET,j,RBRACKET,SEMI,charbuf,LBRACKET,j,RBRACKET,EQ,temp,SEMI,RBRACE,RETURN,NEW,String,LPAREN,charbuf,RPAREN,SEMI,RBRACE","	static String reverseInPlace(String aStr){
,        
,        char[] charbuf = aStr.toCharArray();
,         
,        for(int i = charbuf.length - 1, j = 0; i <MASK> j; i--,j++ ) {
,             
,        	System.out.println(""ReverseString.reverseInPlace() i=""+i+"" j=""+j);
,            if( charbuf[i] == charbuf[j]) {
,                continue;
,            }
,             
,            char temp = charbuf[i];
,            charbuf[i] = charbuf[j];
,            charbuf[j] = temp;      
,        }
,         
,        return new String(charbuf);      
,    
,	}
"
4efd15d4-7259-49ef-bb2b-8984a1154bd6,07d24cfe-1669-4f3a-af32-a719f03fae55,SUB,"PUBLIC,STATIC,LMDrillModel,getAllTweetsByKeywordAndDate,LPAREN,String,keywords,COMMA,String,startDate,COMMA,String,endDate,RPAREN,LBRACE,ArrayList,LT,tweetModel,GT,results,EQ,NEW,ArrayList,LT,tweetModel,GT,LPAREN,RPAREN,SEMI,LMDrillModel,lmDrillModel,EQ,NEW,LMDrillModel,LPAREN,RPAREN,SEMI,String,LBRACKET,RBRACKET,start,EQ,startDate,DOT,split,LPAREN,"" "",RPAREN,SEMI,String,LBRACKET,RBRACKET,end,EQ,endDate,DOT,split,LPAREN,"" "",RPAREN,SEMI,tweetModel,t,SEMI,String,tablename,EQ,""temp-"",PLUS,keywords,PLUS,""-"",PLUS,start,LBRACKET,0,RBRACKET,PLUS,""."",PLUS,start,LBRACKET,1,RBRACKET,PLUS,""."",PLUS,start,LBRACKET,2,RBRACKET,PLUS,""-"",PLUS,end,LBRACKET,0,RBRACKET,PLUS,""."",PLUS,end,LBRACKET,1,RBRACKET,PLUS,""."",PLUS,end,LBRACKET,2,RBRACKET,SEMI,SEMI,tablename,EQ,tablename,DOT,replaceAll,LPAREN,"","",COMMA,""|"",RPAREN,SEMI,tablename,EQ,tablename,DOT,replaceAll,LPAREN,"";"",COMMA,""|"",RPAREN,SEMI,tablename,EQ,tablename,DOT,replaceAll,LPAREN,"" "",COMMA,"""",RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,tablename,RPAREN,SEMI,keywords,EQ,keywords,DOT,replaceAll,LPAREN,"","",COMMA,""%' and message like '%"",RPAREN,SEMI,keywords,EQ,keywords,DOT,replaceAll,LPAREN,"";"",COMMA,""%' or message like '%"",RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,keywords,RPAREN,SEMI,String,whereCondition,EQ,"""",SEMI,int,year,EQ,Integer,DOT,parseInt,LPAREN,start,LBRACKET,2,RBRACKET,RPAREN,SEMI,FOR,LPAREN,int,month,EQ,monthNumber,LPAREN,start,LBRACKET,0,RBRACKET,RPAREN,SEMI,month,LTEQ,monthNumber,LPAREN,end,LBRACKET,0,RBRACKET,RPAREN,SEMI,month,PLUSPLUS,RPAREN,LBRACE,int,currentday,EQ,1,SEMI,IF,LPAREN,month,EQEQ,monthNumber,LPAREN,start,LBRACKET,0,RBRACKET,RPAREN,RPAREN,currentday,EQ,Integer,DOT,parseInt,LPAREN,start,LBRACKET,1,RBRACKET,RPAREN,SEMI,FOR,LPAREN,int,day,EQ,currentday,SEMI,day,LTEQ,numDaysinMonth,LPAREN,month,RPAREN,SEMI,day,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,month,EQEQ,monthNumber,LPAREN,end,LBRACKET,0,RBRACKET,RPAREN,AMPAMP,day,GT,Integer,DOT,parseInt,LPAREN,end,LBRACKET,1,RBRACKET,RPAREN,RPAREN,BREAK,SEMI,IF,LPAREN,whereCondition,DOT,equals,LPAREN,"""",RPAREN,RPAREN,whereCondition,EQ,""'"",PLUS,start,LBRACKET,1,RBRACKET,PLUS,"" "",PLUS,start,LBRACKET,0,RBRACKET,PLUS,"" "",PLUS,start,LBRACKET,2,RBRACKET,PLUS,""%'"",SEMI,ELSE,whereCondition,EQ,whereCondition,DOT,concat,LPAREN,"" or date like '"",PLUS,day,PLUS,"" "",PLUS,monthName,LPAREN,month,RPAREN,PLUS,"" "",PLUS,year,PLUS,""%'"",RPAREN,SEMI,RBRACE,RBRACE,System,DOT,out,DOT,println,LPAREN,""[3] "",PLUS,whereCondition,RPAREN,SEMI,TRY,LBRACE,Connection,c,EQ,DBFactory,DOT,getConnection,LPAREN,RPAREN,SEMI,PreparedStatement,ps,EQ,c,DOT,prepareStatement,LPAREN,""DROP TABLE IF EXISTS `"",PLUS,tablename,PLUS,""`; "",RPAREN,SEMI,ps,DOT,execute,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,ps,RPAREN,SEMI,ps,EQ,c,DOT,prepareStatement,LPAREN,""CREATE TABLE `"",PLUS,tablename,PLUS,""` ("",PLUS,""`username` varchar(20) NOT NULL,"",PLUS,""`date` varchar(30) NOT NULL,"",PLUS,""`message` varchar(180) NOT NULL"",PLUS,"")ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;"",RPAREN,SEMI,ps,DOT,execute,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,ps,RPAREN,SEMI,ps,EQ,c,DOT,prepareStatement,LPAREN,""INSERT INTO `"",PLUS,tablename,PLUS,""` (username, date, message) "",PLUS,""SELECT username, date, message FROM `tweets` "",PLUS,""WHERE (message like '%"",PLUS,keywords,PLUS,""%')"",PLUS,""and (date like "",PLUS,whereCondition,PLUS,"" )"",RPAREN,SEMI,ps,DOT,execute,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,ps,RPAREN,SEMI,ps,EQ,c,DOT,prepareStatement,LPAREN,""SELECT * from `"",PLUS,tablename,PLUS,""`;"",RPAREN,SEMI,ResultSet,rs,EQ,ps,DOT,executeQuery,LPAREN,RPAREN,SEMI,WHILE,LPAREN,rs,DOT,next,LPAREN,RPAREN,RPAREN,LBRACE,t,EQ,NEW,tweetModel,LPAREN,RPAREN,SEMI,t,DOT,setUsername,LPAREN,rs,DOT,getString,LPAREN,""username"",RPAREN,RPAREN,SEMI,t,DOT,setDate,LPAREN,rs,DOT,getString,LPAREN,""date"",RPAREN,RPAREN,SEMI,t,DOT,setMessage,LPAREN,cleanTweet,LPAREN,rs,DOT,getString,LPAREN,""message"",RPAREN,RPAREN,RPAREN,SEMI,NGramDriver,DOT,NGramTweet,LPAREN,cleanTweet,LPAREN,t,DOT,getMessage,LPAREN,RPAREN,RPAREN,RPAREN,SEMI,results,DOT,add,LPAREN,t,RPAREN,SEMI,RBRACE,rs,DOT,close,LPAREN,RPAREN,SEMI,ps,DOT,close,LPAREN,RPAREN,SEMI,c,DOT,close,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""******************************* "",RPAREN,SEMI,IF,LPAREN,results,DOT,isEmpty,LPAREN,RPAREN,RPAREN,LBRACE,lmDrillModel,EQ,NEW,LMDrillModel,LPAREN,<MASK>,1,RPAREN,SEMI,RBRACE,ELSE,LBRACE,sortNgramAndRemoveOutliers,LPAREN,RPAREN,SEMI,TfidfDriver,DOT,idfchecker,LPAREN,results,RPAREN,SEMI,lmDrillModel,EQ,NEW,LMDrillModel,LPAREN,0,COMMA,tablename,COMMA,TfidfDriver,DOT,getToplist,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,CATCH,LPAREN,ClassNotFoundException,ex,RPAREN,LBRACE,Logger,DOT,getLogger,LPAREN,tweetHandler,DOT,CLASS,DOT,getName,LPAREN,RPAREN,RPAREN,DOT,log,LPAREN,Level,DOT,SEVERE,COMMA,null,COMMA,ex,RPAREN,SEMI,RBRACE,CATCH,LPAREN,SQLException,ex,RPAREN,LBRACE,Logger,DOT,getLogger,LPAREN,tweetHandler,DOT,CLASS,DOT,getName,LPAREN,RPAREN,RPAREN,DOT,log,LPAREN,Level,DOT,SEVERE,COMMA,null,COMMA,ex,RPAREN,SEMI,RBRACE,RETURN,lmDrillModel,SEMI,RBRACE","    public static LMDrillModel getAllTweetsByKeywordAndDate(String keywords, String startDate, String endDate){
,        ArrayList<tweetModel> results = new ArrayList<tweetModel>();
,        LMDrillModel lmDrillModel = new LMDrillModel();
,        
,        String[] start = startDate.split("" "");
,        String[] end = endDate.split("" "");
,        tweetModel t;
,        
,        String tablename = ""temp<MASK>""+keywords+""-""+start[0]+"".""+start[1]+"".""+start[2]+""-""+end[0]+"".""+end[1]+"".""+end[2];;
,        tablename = tablename.replaceAll("","", ""|"");
,        tablename = tablename.replaceAll("";"", ""|"");
,        tablename = tablename.replaceAll("" "", """");
,           System.out.println(tablename);
,        
,           
,        keywords = keywords.replaceAll("","", ""%\' and message like \'%"");
,        keywords = keywords.replaceAll("";"", ""%\' or message like \'%""); 
,          System.out.println(keywords);
, 
,        String whereCondition = """";
,        
,        int year = Integer.parseInt(start[2]);
,//        for(int year = Integer.parseInt(start[2]); year <= Integer.parseInt(end[2]); year++){
,            for(int month = monthNumber(start[0]); month <= monthNumber(end[0]); month++){
,                int currentday = 1;
,                if(month == monthNumber(start[0]))
,                    currentday = Integer.parseInt(start[1]);
,                
,                for(int day = currentday; day <= numDaysinMonth(month); day++){
,                    if(month == monthNumber(end[0]) && day > Integer.parseInt(end[1]))
,                        break;
,                    if(whereCondition.equals(""""))
,                        whereCondition = ""'"" + start[1] + "" "" + start[0] + "" "" + start[2] + ""%'"";
,                    else
,                        whereCondition = whereCondition.concat("" or date like '"" + day + "" "" + monthName(month) + "" "" + year +""%'"");
,//                    System.out.println(whereCondition);
,                }
,            }
,//        }
,        System.out.println(""[3] "" + whereCondition);
,        
,          try{
,            Connection c = DBFactory.getConnection();
,            PreparedStatement ps = c.prepareStatement(
,                ""DROP TABLE IF EXISTS `"" + tablename + ""`; ""
,                );
,                ps.execute();
,                System.out.println(ps);
,            ps = c.prepareStatement(
,                ""CREATE TABLE `"" + tablename + ""` ("" +
,                ""`username` varchar(20) NOT NULL,"" +
,                ""`date` varchar(30) NOT NULL,"" +
,                ""`message` varchar(180) NOT NULL"" +
,                "")ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;""
,                );
,                ps.execute();
,                System.out.println(ps);
,            ps = c.prepareStatement(
,                ""INSERT INTO `"" + tablename + ""` (username, date, message) "" + 
,                ""SELECT username, date, message FROM `tweets` "" +
,                ""WHERE (message like '%"" + keywords + ""%')"" +
,                ""and (date like ""+whereCondition+"" )""); 
,                ps.execute();   
,                System.out.println(ps);
,            
,            ps = c.prepareStatement(""SELECT * from `"" + tablename + ""`;"");
,            ResultSet rs = ps.executeQuery();
,            
,            while(rs.next()){
,                t = new tweetModel();
,                t.setUsername(rs.getString(""username""));
,                t.setDate(rs.getString(""date""));
,                t.setMessage(cleanTweet(rs.getString(""message"")));
,                NGramDriver.NGramTweet(cleanTweet(t.getMessage()));
,                results.add(t);
,            }
,            
,            rs.close();
,            ps.close();
,            c.close();
,            
,            System.out.println(""******************************* "");
,            if(results.isEmpty()){
,                lmDrillModel = new LMDrillModel(-1);
,            }else{
,                sortNgramAndRemoveOutliers();
,                TfidfDriver.idfchecker(results);
,                lmDrillModel = new LMDrillModel(0, tablename, TfidfDriver.getToplist());
,            }
,            
,        }catch(ClassNotFoundException ex){
,            Logger.getLogger(tweetHandler.class.getName()).log(Level.SEVERE, null, ex);
,        }catch(SQLException ex){
,            Logger.getLogger(tweetHandler.class.getName()).log(Level.SEVERE, null, ex);
,        }
,        
,        return lmDrillModel;
,    }
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,5cd489c9-0ed5-4aaf-95c2-42e9199d267a,SUB,"PUBLIC,int,getSelectedIndex,LPAREN,INDISwitchElementAndValue,LBRACKET,RBRACKET,ev,RPAREN,LBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,ev,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,ev,LBRACKET,i,RBRACKET,DOT,getValue,LPAREN,RPAREN,EQEQ,SwitchStatus,DOT,ON,RPAREN,LBRACE,ArrayList,LT,INDIElement,GT,list,EQ,getElementsAsList,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,h,EQ,0,SEMI,h,LT,list,DOT,size,LPAREN,RPAREN,SEMI,h,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,list,DOT,get,LPAREN,h,RPAREN,EQEQ,ev,LBRACKET,i,RBRACKET,DOT,getElement,LPAREN,RPAREN,RPAREN,LBRACE,RETURN,h,SEMI,RBRACE,RBRACE,RBRACE,RBRACE,RETURN,<MASK>,1,SEMI,RBRACE","  public int getSelectedIndex(INDISwitchElementAndValue[] ev) {
,    for (int i = 0 ; i < ev.length ; i++) {
,      if (ev[i].getValue() == SwitchStatus.ON) {
,        ArrayList<INDIElement> list = getElementsAsList();
,
,        for (int h = 0 ; h < list.size() ; h++) {
,          if (list.get(h) == ev[i].getElement()) {
,            return h;
,          }
,        }
,      }
,    }
,
,    return <MASK>1;
,  }
"
a64abb7e-1e48-4f96-a7b5-816a0922e0f3,f4950b98-1c66-4a1d-81f2-c2db6c0d42d8,GT,"MONKEYS_AT,Override,PUBLIC,void,runExperiment,LPAREN,RPAREN,THROWS,Exception,LBRACE,FOR,LPAREN,String,dataset,COLON,this,DOT,dataSets,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""Experiment for \"""",PLUS,dataset,PLUS,""\"":"",RPAREN,SEMI,double,maxF,EQ,Double,DOT,MIN_VALUE,SEMI,double,bestVariance,EQ,Double,DOT,NaN,SEMI,FOR,LPAREN,double,variance,COLON,this,DOT,regulariationParameters,RPAREN,LBRACE,MultipleEvaluation,me,EQ,crossValidation,LPAREN,dataset,COMMA,variance,RPAREN,SEMI,double,f,EQ,me,DOT,getMean,LPAREN,InstanceBasedFMeasure,DOT,measureName,RPAREN,SEMI,IF,LPAREN,f,<MASK>,maxF,RPAREN,LBRACE,maxF,EQ,f,SEMI,bestVariance,EQ,variance,SEMI,RBRACE,RBRACE,Evaluation,results,EQ,singleEvaluation,LPAREN,dataset,COMMA,bestVariance,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,this,DOT,resultToString,LPAREN,results,COMMA,this,DOT,trainingTime,COMMA,this,DOT,testingTime,RPAREN,PLUS,""\n"",RPAREN,SEMI,RBRACE,RBRACE","	@Override
,	public void runExperiment() throws Exception {
,		for (String dataset : this.dataSets) {
,			System.out.println(""Experiment for \"""" + dataset + ""\"":"");
,			
,			double maxF = Double.MIN_VALUE;
,			double bestVariance = Double.NaN;
,			
,			for (double variance : this.regulariationParameters) {	
,				MultipleEvaluation me = crossValidation(dataset, variance);
,				double f = me.getMean(InstanceBasedFMeasure.measureName);
,				if (f <MASK> maxF) {
,					maxF = f;
,					bestVariance = variance;
,				}
,			}
,			
,			Evaluation results = singleEvaluation(dataset, bestVariance);
,			System.out.println(this.resultToString(results, this.trainingTime, this.testingTime) + ""\n"");
,		}
,	}
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,f6b52101-ca5a-40af-b134-8675f69becce,SUB,"PROTECTED,int,getTimeByDistance,LPAREN,Rectangle,sling,COMMA,Point,release,COMMA,Point,tapPoint,RPAREN,LBRACE,setTrajectory,LPAREN,sling,COMMA,release,RPAREN,SEMI,double,pullback,EQ,_scale,STAR,STRETCH,STAR,Math,DOT,cos,LPAREN,_theta,RPAREN,SEMI,double,distance,EQ,LPAREN,tapPoint,DOT,x,<MASK>,_ref,DOT,x,PLUS,pullback,RPAREN,SLASH,_scale,SEMI,System,DOT,out,DOT,println,LPAREN,""distance "",PLUS,distance,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""velocity "",PLUS,_ux,RPAREN,SEMI,RETURN,LPAREN,int,RPAREN,LPAREN,distance,SLASH,_ux,STAR,_timeUnit,RPAREN,SEMI,RBRACE","    protected int getTimeByDistance(Rectangle sling, Point release, Point tapPoint)
,    {
,        // update trajectory parameters
,        setTrajectory(sling, release);
,        
,        double pullback = _scale * STRETCH * Math.cos(_theta);
,        double distance = (tapPoint.x <MASK> _ref.x + pullback) / _scale;
,        
,        System.out.println(""distance "" + distance);
,        System.out.println(""velocity "" + _ux);
,        
,        return (int)(distance / _ux * _timeUnit);
,    }
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,9787bb3d-9ebb-4290-bb4d-d53b1c2465a6,BANGEQ,"PUBLIC,void,openWebpage,LPAREN,URI,uri,RPAREN,LBRACE,Desktop,desktop,EQ,Desktop,DOT,isDesktopSupported,LPAREN,RPAREN,QUES,Desktop,DOT,getDesktop,LPAREN,RPAREN,COLON,null,SEMI,IF,LPAREN,desktop,<MASK>,null,AMPAMP,desktop,DOT,isSupported,LPAREN,Desktop,DOT,Action,DOT,BROWSE,RPAREN,RPAREN,LBRACE,TRY,LBRACE,desktop,DOT,browse,LPAREN,uri,RPAREN,SEMI,RBRACE,CATCH,LPAREN,Exception,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,RBRACE","	public void openWebpage(URI uri) 
,	{
,	    Desktop desktop = Desktop.isDesktopSupported() ? Desktop.getDesktop() : null;
,	    if (desktop <MASK> null && desktop.isSupported(Desktop.Action.BROWSE)) 
,	    {
,	        try 
,	        {
,	            desktop.browse(uri);
,	        } 
,	        catch (Exception e) 
,	        {
,	            e.printStackTrace();
,	        }
,	    }
,	}
"
820f9299-0bb8-49c1-976d-16294f96bf51,57234e16-0f07-4492-9a89-ad291ee2d44d,LTEQ,"PUBLIC,Object,nextValue,LPAREN,RPAREN,THROWS,JSONException,LBRACE,char,c,EQ,nextClean,LPAREN,RPAREN,SEMI,String,s,SEMI,SWITCH,LPAREN,c,RPAREN,LBRACE,CASE,"",COLON,CASE,',COLON,RETURN,nextString,LPAREN,c,RPAREN,SEMI,CASE,{,COLON,back,LPAREN,RPAREN,SEMI,RETURN,NEW,JSONObject,LPAREN,this,RPAREN,SEMI,CASE,[,COLON,back,LPAREN,RPAREN,SEMI,RETURN,NEW,JSONArray,LPAREN,this,RPAREN,SEMI,RBRACE,StringBuffer,sb,EQ,NEW,StringBuffer,LPAREN,RPAREN,SEMI,char,b,EQ,c,SEMI,WHILE,LPAREN,c,GTEQ, ,AMPAMP,"",:]}/\\\""[{;=#"",DOT,indexOf,LPAREN,c,RPAREN,LT,0,RPAREN,LBRACE,sb,DOT,append,LPAREN,c,RPAREN,SEMI,c,EQ,next,LPAREN,RPAREN,SEMI,RBRACE,back,LPAREN,RPAREN,SEMI,s,EQ,sb,DOT,toString,LPAREN,RPAREN,DOT,trim,LPAREN,RPAREN,SEMI,IF,LPAREN,s,DOT,equals,LPAREN,"""",RPAREN,RPAREN,LBRACE,THROW,syntaxError,LPAREN,""Missing value."",RPAREN,SEMI,RBRACE,IF,LPAREN,s,DOT,equalsIgnoreCase,LPAREN,""true"",RPAREN,RPAREN,LBRACE,RETURN,Boolean,DOT,TRUE,SEMI,RBRACE,IF,LPAREN,s,DOT,equalsIgnoreCase,LPAREN,""false"",RPAREN,RPAREN,LBRACE,RETURN,Boolean,DOT,FALSE,SEMI,RBRACE,IF,LPAREN,s,DOT,equalsIgnoreCase,LPAREN,""null"",RPAREN,RPAREN,LBRACE,RETURN,JSONObject,DOT,NULL,SEMI,RBRACE,IF,LPAREN,LPAREN,b,GTEQ,0,AMPAMP,b,<MASK>,9,RPAREN,BARBAR,b,EQEQ,.,BARBAR,b,EQEQ,-,BARBAR,b,EQEQ,+,RPAREN,LBRACE,IF,LPAREN,b,EQEQ,0,RPAREN,LBRACE,IF,LPAREN,s,DOT,length,LPAREN,RPAREN,GT,2,AMPAMP,LPAREN,s,DOT,charAt,LPAREN,1,RPAREN,EQEQ,x,BARBAR,s,DOT,charAt,LPAREN,1,RPAREN,EQEQ,X,RPAREN,RPAREN,LBRACE,TRY,LBRACE,RETURN,NEW,Integer,LPAREN,Integer,DOT,parseInt,LPAREN,s,DOT,substring,LPAREN,2,RPAREN,COMMA,16,RPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,Exception,e,RPAREN,LBRACE,RBRACE,RBRACE,ELSE,LBRACE,TRY,LBRACE,RETURN,NEW,Integer,LPAREN,Integer,DOT,parseInt,LPAREN,s,COMMA,8,RPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,Exception,e,RPAREN,LBRACE,RBRACE,RBRACE,RBRACE,TRY,LBRACE,RETURN,Integer,DOT,valueOf,LPAREN,s,RPAREN,SEMI,RBRACE,CATCH,LPAREN,Exception,e,RPAREN,LBRACE,TRY,LBRACE,RETURN,NEW,Long,LPAREN,Long,DOT,parseLong,LPAREN,s,RPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,Exception,f,RPAREN,LBRACE,TRY,LBRACE,RETURN,Double,DOT,valueOf,LPAREN,s,RPAREN,SEMI,RBRACE,CATCH,LPAREN,Exception,g,RPAREN,LBRACE,RETURN,s,SEMI,RBRACE,RBRACE,RBRACE,RBRACE,RETURN,s,SEMI,RBRACE","    public Object nextValue() throws JSONException {
,        char c = nextClean();
,        String s;
,
,        switch (c) {
,            case '""':
,            case '\'':
,                return nextString(c);
,            case '{':
,                back();
,                return new JSONObject(this);
,            case '[':
,                back();
,                return new JSONArray(this);
,        }
,
,        /*
,         * Handle unquoted text. This could be the values true, false, or
,         * null, or it can be a number. An implementation (such as this one)
,         * is allowed to also accept non-standard forms.
,         *
,         * Accumulate characters until we reach the end of the text or a
,         * formatting character.
,         */
,
,        StringBuffer sb = new StringBuffer();
,        char b = c;
,        while (c >= ' ' && "",:]}/\\\""[{;=#"".indexOf(c) < 0) {
,            sb.append(c);
,            c = next();
,        }
,        back();
,
,        /*
,         * If it is true, false, or null, return the proper value.
,         */
,
,        s = sb.toString().trim();
,        if (s.equals("""")) {
,            throw syntaxError(""Missing value."");
,        }
,        if (s.equalsIgnoreCase(""true"")) {
,            return Boolean.TRUE;
,        }
,        if (s.equalsIgnoreCase(""false"")) {
,            return Boolean.FALSE;
,        }
,        if (s.equalsIgnoreCase(""null"")) {
,            return JSONObject.NULL;
,        }
,
,        /*
,         * If it might be a number, try converting it. We support the 0- and 0x-
,         * conventions. If a number cannot be produced, then the value will just
,         * be a string. Note that the 0-, 0x-, plus, and implied string
,         * conventions are non-standard. A JSON parser is free to accept
,         * non-JSON forms as long as it accepts all correct JSON forms.
,         */
,
,        if ((b >= '0' && b <MASK> '9') || b == '.' || b == '-' || b == '+') {
,            if (b == '0') {
,                if (s.length() > 2 &&
,                        (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {
,                    try {
,                        return new Integer(Integer.parseInt(s.substring(2),
,                                16));
,                    } catch (Exception e) {
,                        /* Ignore the error */
,                    }
,                } else {
,                    try {
,                        return new Integer(Integer.parseInt(s, 8));
,                    } catch (Exception e) {
,                        /* Ignore the error */
,                    }
,                }
,            }
,            try {
,                return Integer.valueOf(s);
,            } catch (Exception e) {
,                try {
,                    return new Long(Long.parseLong(s));
,                } catch (Exception f) {
,                    try {
,                        return Double.valueOf(s);
,                    }  catch (Exception g) {
,                        return s;
,                    }
,                }
,            }
,        }
,        return s;
,    }
"
b6d08fd3-a673-4a77-8d9f-bf9a01922a85,48ca42a4-baaa-408e-b9d4-57bf4bef5422,SLASH,"PUBLIC,void,init,LPAREN,Vector3d,p,RPAREN,LBRACE,tail,EQ,NEW,Vector3d,LBRACKET,length,RBRACKET,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,tail,LBRACKET,i,RBRACKET,EQ,NEW,Vector3d,LPAREN,p,DOT,x,COMMA,p,DOT,y,SUB,LPAREN,float,RPAREN,i,<MASK>,1000,COMMA,p,DOT,z,RPAREN,SEMI,RBRACE,Vector,LT,Vector3d,GT,tailWire,EQ,NEW,Vector,LT,GT,LPAREN,RPAREN,SEMI,int,j,EQ,0,SEMI,FOR,LPAREN,int,i,EQ,wireEvery,SEMI,i,LT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,j,LT,2,RPAREN,tailWire,DOT,addElement,LPAREN,tail,LBRACKET,i,RBRACKET,RPAREN,SEMI,j,PLUSPLUS,SEMI,IF,LPAREN,j,EQEQ,wireEvery,PLUS,1,RPAREN,LBRACE,super,DOT,addWire,LPAREN,tailWire,COMMA,color,COMMA,false,RPAREN,SEMI,tailWire,EQ,NEW,Vector,LT,GT,LPAREN,RPAREN,SEMI,tailWire,DOT,addElement,LPAREN,tail,LBRACKET,i,RBRACKET,RPAREN,SEMI,j,EQ,1,SEMI,RBRACE,RBRACE,RBRACE","    public void init(Vector3d p) {
,        tail = new Vector3d[length];
,
,        for (int i = 0; i < length; i++) {
,            tail[i] = new Vector3d(p.x, p.y - (float) i <MASK> 1000, p.z);
,        }
,
,        Vector<Vector3d> tailWire = new Vector<>();
,        int j = 0;
,        for (int i = wireEvery; i < length; i++) {
,            if (j < 2) tailWire.addElement(tail[i]);
,            j++;
,
,            if (j == wireEvery + 1) {
,                super.addWire(tailWire, color, false);
,                tailWire = new Vector<>();
,                tailWire.addElement(tail[i]);
,                j = 1;
,            }
,        }
,    }
"
e03d1a2f-9ec0-4127-b57f-aac96a5f146a,d32e8e5b-6257-4b0d-86cf-8fb9729f9799,GTEQ,"PUBLIC,String,format,LPAREN,LogRecord,rec,RPAREN,LBRACE,StringBuilder,buf,EQ,NEW,StringBuilder,LPAREN,1000,RPAREN,SEMI,buf,DOT,append,LPAREN,""<tr valign=top>"",RPAREN,SEMI,buf,DOT,append,LPAREN,""<td>"",RPAREN,SEMI,buf,DOT,append,LPAREN,""<font color=\""white\"">"",PLUS,calcDate,LPAREN,rec,DOT,getMillis,LPAREN,RPAREN,RPAREN,PLUS,""</font>"",RPAREN,SEMI,buf,DOT,append,LPAREN,""&nbsp &nbsp</td>"",RPAREN,SEMI,buf,DOT,append,LPAREN,""<td>"",RPAREN,SEMI,IF,LPAREN,rec,DOT,getLevel,LPAREN,RPAREN,DOT,intValue,LPAREN,RPAREN,<MASK>,Level,DOT,WARNING,DOT,intValue,LPAREN,RPAREN,RPAREN,LBRACE,buf,DOT,append,LPAREN,""<b><font color=\""red\"">"",RPAREN,SEMI,buf,DOT,append,LPAREN,rec,DOT,getLevel,LPAREN,RPAREN,RPAREN,SEMI,buf,DOT,append,LPAREN,""</font></b>&nbsp &nbsp &nbsp"",RPAREN,SEMI,RBRACE,ELSE,LBRACE,buf,DOT,append,LPAREN,""<b><font color=\""white\"">"",RPAREN,SEMI,buf,DOT,append,LPAREN,rec,DOT,getLevel,LPAREN,RPAREN,RPAREN,SEMI,buf,DOT,append,LPAREN,""</font></b> &nbsp &nbsp &nbsp"",RPAREN,SEMI,IF,LPAREN,rec,DOT,getLevel,LPAREN,RPAREN,DOT,intValue,LPAREN,RPAREN,EQEQ,Level,DOT,FINE,DOT,intValue,LPAREN,RPAREN,RPAREN,LBRACE,buf,DOT,append,LPAREN,""<b><font color=\""white\"">"",PLUS,rec,DOT,getLoggerName,LPAREN,RPAREN,PLUS,""</font></b> &nbsp &nbsp &nbsp"",RPAREN,SEMI,RBRACE,RBRACE,buf,DOT,append,LPAREN,""</td>"",RPAREN,SEMI,buf,DOT,append,LPAREN,""<td><font color=\""white\"">"",RPAREN,SEMI,buf,DOT,append,LPAREN,rec,DOT,getMessage,LPAREN,RPAREN,RPAREN,SEMI,buf,DOT,append,LPAREN,""</font></td>"",RPAREN,SEMI,buf,DOT,append,LPAREN,""</tr>"",RPAREN,SEMI,RETURN,buf,DOT,toString,LPAREN,RPAREN,SEMI,RBRACE","    public String format ( LogRecord rec )
,    {
,
,        StringBuilder buf = new StringBuilder( 1000 );
,
,        buf.append( ""<tr valign=top>"" );
,        buf.append( ""<td>"" );
,        buf.append( ""<font color=\""white\"">"" + calcDate( rec.getMillis() ) + ""</font>"" );
,        buf.append( ""&nbsp &nbsp</td>"" );
,        buf.append( ""<td>"" );
,
,        if ( rec.getLevel().intValue() <MASK> Level.WARNING.intValue() )
,        {
,            buf.append( ""<b><font color=\""red\"">"" );
,            buf.append( rec.getLevel() );
,            buf.append( ""</font></b>&nbsp &nbsp &nbsp"" );
,        } else
,        {
,            buf.append( ""<b><font color=\""white\"">"" );
,            buf.append( rec.getLevel() );
,            buf.append( ""</font></b> &nbsp &nbsp &nbsp"" );
,            if ( rec.getLevel().intValue() == Level.FINE.intValue() )
,            {
,                buf.append( ""<b><font color=\""white\"">"" + rec.getLoggerName() + ""</font></b> &nbsp &nbsp &nbsp"" );
,            }
,        }
,        buf.append( ""</td>"" );
,        buf.append( ""<td><font color=\""white\"">"" );
,        buf.append( rec.getMessage() );
,        buf.append( ""</font></td>"" );
,        buf.append( ""</tr>"" );
,        return buf.toString();
,
,    }
"
09478113-8f39-4146-870b-8037a6932443,a94ab474-8810-44cc-b671-8fe314343b40,EQEQ,"PRIVATE,void,OP_AND,LPAREN,RPAREN,LBRACE,int,iMem,EQ,readOperand,LPAREN,RPAREN,SEMI,int,iVal,EQ,getA,LPAREN,RPAREN,AMP,iMem,SEMI,setNFlag,LPAREN,getBit,LPAREN,getA,LPAREN,RPAREN,COMMA,7,RPAREN,RPAREN,SEMI,setZFlag,LPAREN,iVal,<MASK>,0,RPAREN,SEMI,setA,LPAREN,iVal,RPAREN,SEMI,RBRACE","    private void OP_AND()
,    {
,        int iMem = readOperand();
,        int iVal = getA() & iMem;
,
,        setNFlag(getBit(getA(), 7));
,        setZFlag(iVal <MASK> 0);
,
,        setA(iVal);
,    }
"
08b41d00-9e8d-4e48-94b9-945bef00d612,447b8c85-4f50-414f-ba24-84d919a2f4d9,LTEQ,"PUBLIC,STATIC,void,main,LPAREN,String,LBRACKET,RBRACKET,args,RPAREN,LBRACE,float,price,COMMA,budget,COMMA,extraRate,EQ,0.8f,SEMI,int,personNumber,SEMI,Scanner,scan,EQ,NEW,Scanner,LPAREN,System,DOT,in,RPAREN,SEMI,System,DOT,out,DOT,print,LPAREN,""\u0E2D\u0E31\u0E15\u0E23\u0E32\u0E04\u0E32\u0E43\u0E0A\u0E49\u0E08\u0E48\u0E32\u0E22\u0E1B\u0E01\u0E15\u0E34 (\u0E1A\u0E32\u0E17/\u0E04\u0E19) >>> "",RPAREN,SEMI,price,EQ,scan,DOT,nextFloat,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,print,LPAREN,""\u0E08\u0E33\u0E19\u0E27\u0E19\u0E2A\u0E21\u0E32\u0E0A\u0E34\u0E01 (\u0E04\u0E19) >>> "",RPAREN,SEMI,personNumber,EQ,scan,DOT,nextInt,LPAREN,RPAREN,SEMI,IF,LPAREN,personNumber,<MASK>,8,RPAREN,LBRACE,budget,EQ,personNumber,STAR,price,SEMI,RBRACE,ELSE,LBRACE,int,extraPerson,EQ,personNumber,SUB,8,SEMI,budget,EQ,price,STAR,LPAREN,8,PLUS,extraPerson,STAR,extraRate,RPAREN,SEMI,float,average,EQ,budget,SLASH,personNumber,SEMI,System,DOT,out,DOT,printf,LPAREN,""\u0E40\u0E09\u0E25\u0E35\u0E48\u0E22\u0E08\u0E48\u0E32\u0E22\u0E04\u0E19\u0E25\u0E30 %,.2f \u0E1A\u0E32\u0E17\n"",COMMA,average,RPAREN,SEMI,RBRACE,System,DOT,out,DOT,printf,LPAREN,""\u0E23\u0E27\u0E21\u0E04\u0E48\u0E32\u0E43\u0E0A\u0E49\u0E08\u0E48\u0E32\u0E22\u0E17\u0E31\u0E49\u0E07\u0E2B\u0E21\u0E14\u0E40\u0E17\u0E48\u0E32\u0E01\u0E31\u0E1A %,.2f \u0E1A\u0E32\u0E17\n"",COMMA,budget,RPAREN,SEMI,RBRACE","    public static void main(String[] args) {
,        float price, budget, extraRate = 0.8f;
,        int personNumber;
,        Scanner scan = new Scanner(System.in);
,        System.out.print(""อัตราคาใช้จ่ายปกติ (บาท/คน) >>> "");
,        price = scan.nextFloat();
,        System.out.print(""จำนวนสมาชิก (คน) >>> "");
,        personNumber = scan.nextInt();
,        if (personNumber <MASK> 8) {
,            budget = personNumber * price;
,        } else {
,            int extraPerson = personNumber - 8;
,            budget = price * (8 + extraPerson * extraRate);
,            float average = budget / personNumber;
,            System.out.printf(""เฉลี่ยจ่ายคนละ %,.2f บาท\n"", average);
,        }
,        System.out.printf(""รวมค่าใช้จ่ายทั้งหมดเท่ากับ %,.2f บาท\n"", budget);        
,    }
"
c694737b-29b6-48d5-90c3-b6e0b6d64d88,4428e83f-8b3b-43d1-96b6-a0fcaa6f3174,PERCENT,"PROTECTED,int,getMaxRowOfSlash,LPAREN,int,slash,RPAREN,LBRACE,IF,LPAREN,slash,LT,getMinSlash,LPAREN,RPAREN,PLUS,numColumns,RPAREN,LBRACE,RETURN,numRows,SUB,1,SEMI,RBRACE,int,centerRow,EQ,getCenterRow,LPAREN,RPAREN,SEMI,int,adjustment,EQ,LPAREN,centerRow,PLUS,1,RPAREN,<MASK>,2,SEMI,RETURN,2,STAR,numColumns,SUB,2,STAR,slash,SUB,1,SUB,adjustment,SEMI,RBRACE","    protected int getMaxRowOfSlash(int slash) {
,        if (slash < getMinSlash() + numColumns) {
,            return numRows - 1;
,        }
,        int centerRow = getCenterRow();
,        int adjustment = (centerRow + 1) <MASK> 2;
,        return 2 * numColumns - 2 * slash - 1 - adjustment;
,    }
"
ee6285e4-70fb-4aa1-99e0-6f8cd1871b27,48543560-67cf-4720-a55c-8d1bd2c51c51,GT,"PUBLIC,void,add,LPAREN,String,word,RPAREN,LBRACE,IF,LPAREN,word,DOT,trim,LPAREN,RPAREN,DOT,length,LPAREN,RPAREN,<MASK>,0,RPAREN,m_Words,DOT,add,LPAREN,word,DOT,trim,LPAREN,RPAREN,DOT,toLowerCase,LPAREN,RPAREN,RPAREN,SEMI,RBRACE","  public void add(String word) {
,    if (word.trim().length() <MASK> 0)
,      m_Words.add(word.trim().toLowerCase());
,  }
"
a0570515-a226-4091-9451-11ea578220ea,4e37b771-bd32-45d2-af3b-870dc9454a38,GT,"PRIVATE,boolean,stillReadingHeaders,LPAREN,RPAREN,LBRACE,RETURN,BANG,LPAREN,position,<MASK>,3,AMPAMP,
,EQEQ,buffer,LBRACKET,position,SUB,1,RBRACKET,AMPAMP,
,EQEQ,buffer,LBRACKET,position,SUB,2,RBRACKET,AMPAMP,
,EQEQ,buffer,LBRACKET,position,SUB,3,RBRACKET,AMPAMP,
,EQEQ,buffer,LBRACKET,position,SUB,4,RBRACKET,RPAREN,SEMI,RBRACE","    private boolean stillReadingHeaders() {
,        return !(position <MASK> 3 &&
,                '\n' == buffer[position - 1] &&
,                '\r' == buffer[position - 2] &&
,                '\n' == buffer[position - 3] &&
,                '\r' == buffer[position - 4]);
,    }
"
31865c5a-965e-4d07-af21-44a51a00ba58,3fab2188-5625-4647-b612-ebe889d321b0,STAR,"PUBLIC,void,computeECM,LPAREN,RPAREN,LBRACE,String,LBRACKET,RBRACKET,tmpDisclosedIdentifierColumns,EQ,Policy,DOT,getInstance,LPAREN,RPAREN,DOT,getDisclosedIdentifierColumnNames,LPAREN,RPAREN,SEMI,String,LBRACKET,RBRACKET,tmpDisclosedSensitiveColumns,EQ,Policy,DOT,getInstance,LPAREN,RPAREN,DOT,getDisclosedSensitiveColumnNames,LPAREN,RPAREN,SEMI,RiskEvaluator,re,EQ,NEW,RiskEvaluator,LPAREN,RPAREN,SEMI,float,currentIdentifierRisk,EQ,re,DOT,getIdentifierRisk,LPAREN,tmpDisclosedIdentifierColumns,RPAREN,SEMI,float,currentSensitiveRisk,EQ,re,DOT,getSensitiveRisk,LPAREN,tmpDisclosedSensitiveColumns,RPAREN,SEMI,float,currentTotalRisk,EQ,currentIdentifierRisk,PLUS,currentSensitiveRisk,SEMI,currentTotalRisk,EQ,currentTotalRisk,GT,1,QUES,1,COLON,LPAREN,float,RPAREN,LPAREN,Math,DOT,round,LPAREN,currentTotalRisk,<MASK>,1000.0f,RPAREN,SLASH,1000.0f,RPAREN,SEMI,logger,DOT,writeLog,LPAREN,Level,DOT,INFO,COMMA,""identifier risk: "",PLUS,currentIdentifierRisk,PLUS,"" sensitive risk: "",PLUS,currentSensitiveRisk,RPAREN,SEMI,BootstrapRRList,DOT,getInstance,LPAREN,RPAREN,DOT,updateBootstrappingList,LPAREN,currentTotalRisk,RPAREN,SEMI,IF,LPAREN,currentTotalRisk,GT,Policy,DOT,getInstance,LPAREN,RPAREN,DOT,getMaxRisk,LPAREN,RPAREN,RPAREN,LBRACE,IF,LPAREN,BootstrapRRList,DOT,getInstance,LPAREN,RPAREN,DOT,isEmpty,LPAREN,RPAREN,RPAREN,LBRACE,RETURN,SEMI,RBRACE,BootstrapRRList,DOT,getInstance,LPAREN,RPAREN,DOT,computeDistances,LPAREN,RPAREN,SEMI,BootstrapRRList,DOT,getInstance,LPAREN,RPAREN,DOT,resetListWalker,LPAREN,RPAREN,SEMI,RBRACE,RBRACE","	public void computeECM() {
,
,		// get the columns to be disclosed
,		String[] tmpDisclosedIdentifierColumns = Policy.getInstance()
,				.getDisclosedIdentifierColumnNames();
,		String[] tmpDisclosedSensitiveColumns = Policy.getInstance()
,				.getDisclosedSensitiveColumnNames();
,
,		// create new RiskEstimator and get both risks
,		RiskEvaluator re = new RiskEvaluator();
,
,		float currentIdentifierRisk = re
,				.getIdentifierRisk(tmpDisclosedIdentifierColumns);
,
,		float currentSensitiveRisk = re
,				.getSensitiveRisk(tmpDisclosedSensitiveColumns);
,
,		// compute total risk (& check that it is not > 1)
,		float currentTotalRisk = currentIdentifierRisk + currentSensitiveRisk;
,		currentTotalRisk = currentTotalRisk > 1 ? 1 : (float) (Math
,				.round(currentTotalRisk <MASK> 1000.0f) / 1000.0f);
,
,//		this.myCurrentRiskTF.setText(String.valueOf(currentTotalRisk));
,
,//		if (DisclosurePolicyRiskEvaluator.IS_DEBUG) {
,			logger.writeLog(Level.INFO, ""identifier risk: "" + currentIdentifierRisk
,					+ "" sensitive risk: "" + currentSensitiveRisk);
,//		}
,
,		// update bootstrapping list
,		BootstrapRRList.getInstance().updateBootstrappingList(currentTotalRisk);
,
,		// check if the current risk is smaller than the maximal risk (given by
,		// user)
,		if (currentTotalRisk > Policy.getInstance().getMaxRisk()) {
,
,			// check that bootstrapping data exists, otherwise return
,			if (BootstrapRRList.getInstance().isEmpty()) {
,
,				return;
,			}
,
,			// compute the distance of all RiskResults with lower risk
,			BootstrapRRList.getInstance().computeDistances();
,
,			// reset list walker
,			BootstrapRRList.getInstance().resetListWalker();
,			
,		}
,	}
"
13ade84f-7d2c-4f3f-a13f-aa7abf8a58a5,4b3c9d0f-5e81-4a08-ade3-6c07d9c4d8c9,SUB,"MONKEYS_AT,Override,PUBLIC,String,toString,LPAREN,RPAREN,LBRACE,StringBuilder,sb,EQ,NEW,StringBuilder,LPAREN,RPAREN,SEMI,sb,DOT,append,LPAREN,""{"",RPAREN,SEMI,RandomListNode,iter,EQ,this,SEMI,WHILE,LPAREN,iter,BANGEQ,null,RPAREN,LBRACE,sb,DOT,append,LPAREN,iter,DOT,label,RPAREN,DOT,append,LPAREN,""#"",RPAREN,SEMI,IF,LPAREN,iter,DOT,random,BANGEQ,null,RPAREN,sb,DOT,append,LPAREN,iter,DOT,random,DOT,label,RPAREN,SEMI,ELSE,sb,DOT,append,LPAREN,""null"",RPAREN,SEMI,sb,DOT,append,LPAREN,"","",RPAREN,SEMI,iter,EQ,iter,DOT,next,SEMI,RBRACE,sb,DOT,deleteCharAt,LPAREN,sb,DOT,length,LPAREN,RPAREN,<MASK>,1,RPAREN,DOT,append,LPAREN,""}"",RPAREN,SEMI,RETURN,sb,DOT,toString,LPAREN,RPAREN,SEMI,RBRACE","	@Override
,	public String toString() {
,		StringBuilder sb = new StringBuilder();
,		sb.append(""{"");
,		RandomListNode iter = this;
,		while (iter != null) {
,			sb.append(iter.label).append(""#"");
,			if (iter.random != null)
,				sb.append(iter.random.label);
,			else
,				sb.append(""null"");
,			sb.append("","");
,			iter = iter.next;
,		}
,		sb.deleteCharAt(sb.length() <MASK> 1).append(""}"");
,		return sb.toString();
,	}
"
8b2adeae-3ab1-4202-93a8-e72e530dbe7c,f23dff74-3ce2-4030-93a0-12dfe9ac5e7b,PERCENT,"PUBLIC,STATIC,Polygon,hex,LPAREN,int,i,COMMA,int,j,RPAREN,LBRACE,int,x,EQ,LPAREN,i,SUB,corner,DOT,x,RPAREN,STAR,LPAREN,s,PLUS,t,RPAREN,SEMI,int,y,EQ,LPAREN,j,SUB,corner,DOT,y,RPAREN,STAR,h,PLUS,LPAREN,i,<MASK>,2,RPAREN,STAR,h,SLASH,2,SEMI,int,LBRACKET,RBRACKET,cx,COMMA,cy,SEMI,cx,EQ,NEW,int,LBRACKET,RBRACKET,LBRACE,x,PLUS,t,COMMA,x,PLUS,t,PLUS,s,COMMA,x,PLUS,t,PLUS,s,PLUS,t,COMMA,x,PLUS,t,PLUS,s,COMMA,x,PLUS,t,COMMA,x,RBRACE,SEMI,cy,EQ,NEW,int,LBRACKET,RBRACKET,LBRACE,y,COMMA,y,COMMA,y,PLUS,r,COMMA,y,PLUS,r,PLUS,r,COMMA,y,PLUS,r,PLUS,r,COMMA,y,PLUS,r,RBRACE,SEMI,RETURN,NEW,Polygon,LPAREN,cx,COMMA,cy,COMMA,6,RPAREN,SEMI,RBRACE","    public static Polygon hex(int i, int j) {
,        int x = (i-corner.x) * (s + t);
,        int y = (j-corner.y) * h + (i <MASK> 2) * h / 2;
,        int[] cx, cy;
,        cx = new int[]{x + t, x + t + s, x + t + s + t, x + t + s, x + t, x};
,        cy = new int[]{y, y, y + r, y + r + r, y + r + r, y + r};
,        return new Polygon(cx, cy, 6);
,    }
"
7bd76208-9b34-4151-9ec4-57c6c52e0fcf,ba66fe42-5b61-47c6-88f8-742615533282,GTEQ,"void,nil,LPAREN,int,from,COMMA,int,n,RPAREN,LBRACE,InstructionPtr,previous,SEMI,IF,LPAREN,this,DOT,pc,GT,this,DOT,lasttarget,RPAREN,LBRACE,IF,LPAREN,this,DOT,pc,EQEQ,0,RPAREN,LBRACE,IF,LPAREN,from,<MASK>,this,DOT,nactvar,RPAREN,RETURN,SEMI,RBRACE,ELSE,LBRACE,previous,EQ,NEW,InstructionPtr,LPAREN,this,DOT,f,DOT,code,COMMA,this,DOT,pc,SUB,1,RPAREN,SEMI,IF,LPAREN,GET_OPCODE,LPAREN,previous,DOT,get,LPAREN,RPAREN,RPAREN,EQEQ,OP_LOADNIL,RPAREN,LBRACE,int,pfrom,EQ,GETARG_A,LPAREN,previous,DOT,get,LPAREN,RPAREN,RPAREN,SEMI,int,pto,EQ,GETARG_B,LPAREN,previous,DOT,get,LPAREN,RPAREN,RPAREN,SEMI,IF,LPAREN,pfrom,LTEQ,from,AMPAMP,from,LTEQ,pto,PLUS,1,RPAREN,LBRACE,IF,LPAREN,from,PLUS,n,SUB,1,GT,pto,RPAREN,SETARG_B,LPAREN,previous,COMMA,from,PLUS,n,SUB,1,RPAREN,SEMI,RETURN,SEMI,RBRACE,RBRACE,RBRACE,RBRACE,this,DOT,codeABC,LPAREN,OP_LOADNIL,COMMA,from,COMMA,from,PLUS,n,SUB,1,COMMA,0,RPAREN,SEMI,RBRACE","	void nil(int from, int n) {
,		InstructionPtr previous;
,		if (this.pc > this.lasttarget) { /* no jumps to current position? */
,			if (this.pc == 0) { /* function start? */
,				if (from <MASK> this.nactvar)
,					return; /* positions are already clean */
,			} else {
,				previous = new InstructionPtr(this.f.code, this.pc - 1);
,				if (GET_OPCODE(previous.get()) == OP_LOADNIL) {
,					int pfrom = GETARG_A(previous.get());
,					int pto = GETARG_B(previous.get());
,					if (pfrom <= from && from <= pto + 1) { /* can connect both? */
,						if (from + n - 1 > pto)
,							SETARG_B(previous, from + n - 1);
,						return;
,					}
,				}
,			}
,		}
,		/* else no optimization */
,		this.codeABC(OP_LOADNIL, from, from + n - 1, 0); 
,	}
"
08b41d00-9e8d-4e48-94b9-945bef00d612,b75ed00c-694f-4171-ab85-32ed468ffdd4,GT,"PUBLIC,STATIC,void,main,LPAREN,String,LBRACKET,RBRACKET,args,RPAREN,LBRACE,int,age,SEMI,Scanner,scan,EQ,NEW,Scanner,LPAREN,System,DOT,in,RPAREN,SEMI,System,DOT,out,DOT,print,LPAREN,""Enter age >>> "",RPAREN,SEMI,age,EQ,scan,DOT,nextInt,LPAREN,RPAREN,SEMI,IF,LPAREN,age,<MASK>,60,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""Retired"",RPAREN,SEMI,RBRACE,ELSE,LBRACE,System,DOT,out,DOT,println,LPAREN,""Not Retired"",RPAREN,SEMI,RBRACE,RBRACE","    public static void main(String[] args) {
,        int age;
,        Scanner scan = new Scanner(System.in);
,        System.out.print(""Enter age <MASK>>> "");
,        age = scan.nextInt();
,        if (age > 60) {
,            System.out.println(""Retired"");
,        } else {
,            System.out.println(""Not Retired"");
,        }
,    }
"
96ad2b1f-2213-467d-9114-99ed9ca40d4d,29d53b28-827f-4d22-9063-1f0072f705dc,PERCENT,"PUBLIC,String,findExecuteLocation,LPAREN,String,LBRACKET,RBRACKET,nodeLocations,RPAREN,THROWS,InvalidDataNodeException,LBRACE,p,EQ,LPAREN,p,PLUS,1,RPAREN,<MASK>,nodeLocations,DOT,length,SEMI,IF,LPAREN,true,RPAREN,RETURN,nodeLocations,LBRACKET,p,RBRACKET,SEMI,int,free,EQ,0,SEMI,String,destination,EQ,null,SEMI,int,nodeFreeProcesses,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,nodeLocations,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,checkKey,LPAREN,nodeLocations,LBRACKET,i,RBRACKET,RPAREN,SEMI,nodeFreeProcesses,EQ,SUB,1,SEMI,FOR,LPAREN,int,j,EQ,0,SEMI,j,LT,dataNodeList,DOT,size,LPAREN,RPAREN,SEMI,j,PLUSPLUS,RPAREN,IF,LPAREN,dataNodeList,DOT,get,LPAREN,j,RPAREN,DOT,equals,LPAREN,nodeLocations,LBRACKET,i,RBRACKET,RPAREN,RPAREN,nodeFreeProcesses,EQ,dataNodeList,DOT,get,LPAREN,j,RPAREN,DOT,getFreeProcesses,LPAREN,RPAREN,SEMI,IF,LPAREN,free,LT,nodeFreeProcesses,RPAREN,LBRACE,free,EQ,nodeFreeProcesses,SEMI,destination,EQ,nodeLocations,LBRACKET,i,RBRACKET,SEMI,RBRACE,RBRACE,IF,LPAREN,free,GT,0,AMPAMP,BANG,destination,DOT,equals,LPAREN,null,RPAREN,RPAREN,RETURN,destination,SEMI,IF,LPAREN,destination,DOT,equals,LPAREN,null,RPAREN,RPAREN,THROW,NEW,InvalidDataNodeException,LPAREN,""Null key found in scheduler algorithm"",RPAREN,SEMI,free,EQ,0,SEMI,destination,EQ,null,SEMI,FOR,LPAREN,DataNodeInfo,d,COLON,dataNodeList,RPAREN,LBRACE,IF,LPAREN,free,LT,d,DOT,getFreeProcesses,LPAREN,RPAREN,RPAREN,LBRACE,free,EQ,d,DOT,getFreeProcesses,LPAREN,RPAREN,SEMI,destination,EQ,d,DOT,getId,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,IF,LPAREN,free,BANGEQ,0,AMPAMP,BANG,destination,DOT,equals,LPAREN,null,RPAREN,RPAREN,RETURN,destination,SEMI,IF,LPAREN,destination,DOT,equals,LPAREN,null,RPAREN,RPAREN,THROW,NEW,InvalidDataNodeException,LPAREN,""Null key found in scheduler algorithm"",RPAREN,SEMI,RETURN,""-1"",SEMI,RBRACE","	public String findExecuteLocation(String[] nodeLocations) throws InvalidDataNodeException {		
,		// if block is present on node and there is space left, select that node
,		// check for all replication factors of the block
,		p = (p+1)<MASK>nodeLocations.length;
,		if(true)return nodeLocations[p];
,		int free = 0;
,		String destination = null;
,		int nodeFreeProcesses;
,		for(int i = 0; i<nodeLocations.length;i++){
,			checkKey(nodeLocations[i]);
,			nodeFreeProcesses = -1;
,			for(int j=0;j<dataNodeList.size();j++)
,				if(dataNodeList.get(j).equals(nodeLocations[i]))
,					nodeFreeProcesses = dataNodeList.get(j).getFreeProcesses(); 
,			// choose most free
,			if(free < nodeFreeProcesses){
,				free = nodeFreeProcesses;
,				destination = nodeLocations[i];
,			}
,		}
,		if(free > 0 && !destination.equals(null))
,			return destination;
,
,		if(destination.equals(null))
,			throw new InvalidDataNodeException(""Null key found in scheduler algorithm"");
,
,		// if a node that does not have block is free, allocate
,		free = 0;
,		destination = null;
,		for(DataNodeInfo d : dataNodeList){
,			// get most free
,			if(free<d.getFreeProcesses()){
,				free = d.getFreeProcesses();
,				destination = d.getId();
,			}
,		}
,
,		if(free !=0 && !destination.equals(null))
,			return destination;
,		if(destination.equals(null))
,			throw new InvalidDataNodeException(""Null key found in scheduler algorithm"");
,		// if no nodes are free, enque job 
,
,		return ""-1"";
,	}
"
37134524-36c4-486f-85f7-06f1a52cb561,c882e876-407a-47e9-a0b8-b148974d7e49,SLASH,"PUBLIC,STATIC,double,getTime,LPAREN,RPAREN,LBRACE,RETURN,LPAREN,double,RPAREN,System,DOT,nanoTime,LPAREN,RPAREN,<MASK>,LPAREN,double,RPAREN,SECOND,SEMI,RBRACE","    public static double getTime()
,    {
,        return (double)System.nanoTime()<MASK>(double)SECOND;
,    }
"
f462a402-52df-461b-8cf9-98e6a409d284,1760bfd9-65fc-4062-9b3e-f4725240f170,STAR,"PUBLIC,STATIC,FINAL,double,longitudeToMeter,LPAREN,double,latitude,RPAREN,LBRACE,RETURN,LPAREN,Math,DOT,cos,LPAREN,Math,DOT,toRadians,LPAREN,latitude,RPAREN,RPAREN,<MASK>,k2,RPAREN,SLASH,Math,DOT,sqrt,LPAREN,getDiv0,LPAREN,latitude,RPAREN,RPAREN,SEMI,RBRACE","	public static final double longitudeToMeter(double latitude) {
,		return (Math.cos(Math.toRadians(latitude)) <MASK> k2) / Math.sqrt(getDiv0(latitude));
,	}
"
b5ee7e5e-a7bf-41d4-8880-3ac95d2f8822,12c1af1d-7c32-49d5-9905-d5a1b1f0fa3e,BANGEQ,"PUBLIC,STATIC,void,main,LPAREN,String,LBRACKET,RBRACKET,args,RPAREN,LBRACE,IF,LPAREN,args,<MASK>,null,AMPAMP,args,DOT,length,EQEQ,6,RPAREN,LBRACE,dir,EQ,args,LBRACKET,0,RBRACKET,SEMI,year,EQ,args,LBRACKET,1,RBRACKET,SEMI,outpath,EQ,args,LBRACKET,2,RBRACKET,SEMI,label,EQ,args,LBRACKET,3,RBRACKET,SEMI,min,EQ,Integer,DOT,parseInt,LPAREN,args,LBRACKET,4,RBRACKET,RPAREN,SEMI,max,EQ,Integer,DOT,parseInt,LPAREN,args,LBRACKET,5,RBRACKET,RPAREN,SEMI,RBRACE,MergeTRJTree,mtt,EQ,NEW,MergeTRJTree,LPAREN,RPAREN,SEMI,mtt,DOT,exc,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""Complete."",RPAREN,SEMI,RBRACE","	public static void main(String[] args){
,		
,		if(args<MASK>null && args.length==6){
,			dir = args[0];
,			year = args[1];
,			outpath = args[2];
,			label = args[3];
,			min = Integer.parseInt(args[4]);
,			max = Integer.parseInt(args[5]);
,		}
,		
,		MergeTRJTree mtt = new MergeTRJTree();
,		mtt.exc();
,		System.out.println(""Complete."");
,		
,	}
"
7bb70579-58cd-4274-97b2-e2db355a7b91,ca7018dc-f6ca-40e6-a764-785b1e4fdd90,PERCENT,"PUBLIC,STATIC,boolean,isPrime,LPAREN,int,checkNumber,RPAREN,LBRACE,double,root,EQ,Math,DOT,sqrt,LPAREN,checkNumber,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,2,SEMI,i,LTEQ,root,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,checkNumber,<MASK>,i,EQEQ,0,RPAREN,LBRACE,RETURN,false,SEMI,RBRACE,RBRACE,RETURN,true,SEMI,RBRACE","    public static boolean isPrime(int checkNumber) {
,        double root = Math.sqrt(checkNumber);
,        for (int i = 2; i <= root; i++) {
,            if (checkNumber <MASK> i == 0) {
,                return false;
,            }
,        }
,        return true;
,    }
"
b7230215-6e3f-4905-a284-2581a2f7dd32,8da182a8-d411-43cd-a96f-3f7109f3b5bd,LTEQ,"PRIVATE,String,comparar,LPAREN,float,val,COMMA,float,val2,COMMA,Nodo,DOT,tipoToken,tip,RPAREN,LBRACE,String,bal,EQ,""false"",SEMI,SWITCH,LPAREN,tip,RPAREN,LBRACE,CASE,IgualIgual,COLON,IF,LPAREN,val,EQEQ,val2,RPAREN,LBRACE,bal,EQ,""true"",SEMI,RBRACE,BREAK,SEMI,CASE,Diferente,COLON,IF,LPAREN,val,BANGEQ,val2,RPAREN,LBRACE,bal,EQ,""true"",SEMI,RBRACE,BREAK,SEMI,CASE,MenorQue,COLON,IF,LPAREN,val,LT,val2,RPAREN,LBRACE,bal,EQ,""true"",SEMI,RBRACE,BREAK,SEMI,CASE,MenorOIgualQue,COLON,IF,LPAREN,val,<MASK>,val2,RPAREN,LBRACE,bal,EQ,""true"",SEMI,RBRACE,BREAK,SEMI,CASE,MayorQue,COLON,IF,LPAREN,val,GT,val2,RPAREN,LBRACE,bal,EQ,""true"",SEMI,RBRACE,BREAK,SEMI,CASE,MayorOIgualQue,COLON,IF,LPAREN,val,GTEQ,val2,RPAREN,LBRACE,bal,EQ,""true"",SEMI,RBRACE,BREAK,SEMI,RBRACE,RETURN,bal,SEMI,RBRACE","    private String comparar(float val,float val2,Nodo.tipoToken tip){
,        String bal=""false"";
,        switch(tip){
,            case IgualIgual:
,                if(val==val2){
,                    bal=""true"";
,                }
,                break;
,            case Diferente:
,                if(val!=val2){
,                    bal=""true"";
,                }
,                break;
,            case MenorQue:
,                if(val<val2){
,                    bal=""true"";
,                }
,                break;
,            case MenorOIgualQue:
,                if(val<MASK>val2){
,                    bal=""true"";
,                }
,                break;
,            case MayorQue:
,                if(val>val2){
,                    bal=""true"";
,                }
,                break;
,            case MayorOIgualQue:
,                if(val>=val2){
,                    bal=""true"";
,                }
,                break;
,        }
,        return bal;
,    }
"
b6d08fd3-a673-4a77-8d9f-bf9a01922a85,f23000b3-1b73-4c1b-b823-8e775a51517c,SLASH,"PRIVATE,void,beep,LPAREN,RPAREN,LBRACE,float,lift,EQ,flyingDot,DOT,v,DOT,z,<MASK>,LPAREN,app,DOT,timeMultiplier,STAR,XCGame,DOT,TIME_PER_FRAME,RPAREN,SEMI,String,filename,EQ,filenameForLift,LPAREN,lift,RPAREN,SEMI,IF,LPAREN,filename,BANGEQ,null,RPAREN,app,DOT,envInterface,DOT,play,LPAREN,filename,RPAREN,SEMI,RBRACE","    private void beep() {
,        float lift = flyingDot.v.z <MASK> (app.timeMultiplier * XCGame.TIME_PER_FRAME);
,
,        String filename = filenameForLift(lift);
,        if (filename != null)
,            app.envInterface.play(filename);
,    }
"
e51e2b7d-9086-4673-95b0-e99ccc97151f,b859a9c4-5731-4772-9bce-2baa27da469c,SUB,"PRIVATE,String,getSuffix,LPAREN,String,filename,RPAREN,LBRACE,int,i,EQ,filename,DOT,lastIndexOf,LPAREN,.,RPAREN,SEMI,IF,LPAREN,i,EQEQ,<MASK>,1,RPAREN,LBRACE,RETURN,"""",SEMI,RBRACE,RETURN,filename,DOT,substring,LPAREN,i,RPAREN,SEMI,RBRACE","    private String getSuffix(String filename) {
,        int i = filename.lastIndexOf('.');
,        if (i == <MASK>1) {
,            return """";
,        }
,        return filename.substring(i);
,    }
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,03b567f6-7b0a-4679-af05-c8775dc8cb84,BANGEQ,"PUBLIC,STATIC,HashMap,LT,ABObject,LBRACKET,RBRACKET,COMMA,ContactDimension,GT,ExtractDimentsion,LPAREN,RPAREN,LBRACE,HashMap,LT,ABObject,LBRACKET,RBRACKET,COMMA,ContactDimension,GT,CDDictionary,EQ,NEW,HashMap,LT,ABObject,LBRACKET,RBRACKET,COMMA,ContactDimension,GT,LPAREN,RPAREN,SEMI,HashMap,LT,ABObject,LBRACKET,RBRACKET,COMMA,ERA,LBRACKET,RBRACKET,GT,RADictionary,EQ,NEW,HashMap,LT,ABObject,LBRACKET,RBRACKET,COMMA,ERA,LBRACKET,RBRACKET,GT,LPAREN,RPAREN,SEMI,HashMap,LT,ABObject,LBRACKET,RBRACKET,COMMA,ContactRelation,GT,CRDictionary,EQ,NEW,HashMap,LT,ABObject,LBRACKET,RBRACKET,COMMA,ContactRelation,GT,LPAREN,RPAREN,SEMI,FOR,LPAREN,Map,DOT,Entry,LT,ABObject,LBRACKET,RBRACKET,COMMA,ERA,LBRACKET,RBRACKET,GT,entry,COLON,RADictionary,DOT,entrySet,LPAREN,RPAREN,RPAREN,LBRACE,ABObject,LBRACKET,RBRACKET,key,EQ,entry,DOT,getKey,LPAREN,RPAREN,SEMI,ContactDimension,cd,EQ,ContactDimension,DOT,NULL,SEMI,IF,LPAREN,CRDictionary,DOT,get,LPAREN,key,RPAREN,<MASK>,ContactRelation,DOT,NULL,RPAREN,LBRACE,ERA,LBRACKET,RBRACKET,value,EQ,entry,DOT,getValue,LPAREN,RPAREN,SEMI,IF,LPAREN,value,LBRACKET,0,RBRACKET,EQEQ,ERA,DOT,MEETS,BARBAR,value,LBRACKET,0,RBRACKET,EQEQ,ERA,DOT,INVERSE_MEETS,RPAREN,LBRACE,cd,EQ,ContactDimension,DOT,HORIZONTAL,SEMI,RBRACE,ELSE,LBRACE,cd,EQ,ContactDimension,DOT,VERTICAL,SEMI,RBRACE,CDDictionary,DOT,put,LPAREN,key,COMMA,cd,RPAREN,SEMI,RBRACE,RBRACE,RETURN,CDDictionary,SEMI,RBRACE","   public static HashMap<ABObject[], ContactDimension> ExtractDimentsion()
,   {
,	   HashMap<ABObject[], ContactDimension> CDDictionary = new HashMap<ABObject[], ContactDimension>();
,	   HashMap<ABObject[], ERA[]> RADictionary = new HashMap<ABObject[], ERA[]>();
,	   HashMap<ABObject[], ContactRelation> CRDictionary = new HashMap<ABObject[], ContactRelation>();
,	   for (Map.Entry<ABObject[], ERA[]> entry : RADictionary.entrySet())
,	   {
,		   ABObject[] key = entry.getKey();
,		   ContactDimension cd = ContactDimension.NULL;
,		   if (CRDictionary.get(key) <MASK> ContactRelation.NULL)
,		   {
,			   ERA[] value = entry.getValue();
,			   if (value[0] == ERA.MEETS || value[0] == ERA.INVERSE_MEETS)
,			   {
,				   cd = ContactDimension.HORIZONTAL;
,			   }
,			   else
,			   {
,				   cd = ContactDimension.VERTICAL;
,			   }
,			   CDDictionary.put(key, cd);
,		   }
,	   }
,	   return CDDictionary;
,   }
"
63ee1274-7add-4bc5-a057-e2079298f295,00c61968-4387-444d-bceb-c9a0e6a00a00,SUB,"PRIVATE,STATIC,void,test7,LPAREN,RPAREN,THROWS,FileNotFoundException,LBRACE,String,input,EQ,""new\n"",PLUS,""pick up key\n"",PLUS,""wait\n"",PLUS,""unlock door with key\n"",PLUS,""go through cell door\n"",PLUS,""quit\n"",PLUS,""y\n"",SEMI,HashMap,LT,Integer,COMMA,String,GT,output,EQ,NEW,HashMap,LT,Integer,COMMA,String,GT,LPAREN,RPAREN,SEMI,boolean,passed,EQ,true,SEMI,TRY,LBRACE,in,EQ,NEW,ByteArrayInputStream,LPAREN,input,DOT,getBytes,LPAREN,RPAREN,RPAREN,SEMI,System,DOT,setIn,LPAREN,in,RPAREN,SEMI,out,EQ,NEW,PrintStream,LPAREN,""testing.txt"",RPAREN,SEMI,System,DOT,setOut,LPAREN,out,RPAREN,SEMI,Game,DOT,main,LPAREN,null,RPAREN,SEMI,RBRACE,CATCH,LPAREN,ExitException,se,RPAREN,LBRACE,RBRACE,CATCH,LPAREN,Exception,e,RPAREN,LBRACE,System,DOT,setOut,LPAREN,stdout,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""Error: "",RPAREN,SEMI,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,passed,EQ,false,SEMI,RBRACE,FINALLY,LBRACE,System,DOT,setOut,LPAREN,stdout,RPAREN,SEMI,MONKEYS_AT,SuppressWarnings,LPAREN,""resource"",RPAREN,Scanner,sc,EQ,NEW,Scanner,LPAREN,NEW,File,LPAREN,""testing.txt"",RPAREN,RPAREN,SEMI,ArrayList,LT,String,GT,testOutput,EQ,NEW,ArrayList,LT,String,GT,LPAREN,RPAREN,SEMI,WHILE,LPAREN,sc,DOT,hasNextLine,LPAREN,RPAREN,RPAREN,LBRACE,testOutput,DOT,add,LPAREN,sc,DOT,nextLine,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,output,DOT,put,LPAREN,13,COMMA,""The guard walks toward your cell."",RPAREN,SEMI,output,DOT,put,LPAREN,14,COMMA,"">> Some time goes by."",RPAREN,SEMI,output,DOT,put,LPAREN,15,COMMA,""The guard peers into the cell, checking that the door is secured, then continues on."",RPAREN,SEMI,output,DOT,put,LPAREN,18,COMMA,"">> You walk through the cell door."",RPAREN,SEMI,output,DOT,put,LPAREN,21,COMMA,""The guard walks away from your cell."",RPAREN,SEMI,output,DOT,put,LPAREN,22,COMMA,""You escape silently into the shadows."",RPAREN,SEMI,output,DOT,put,LPAREN,23,COMMA,""YOU WON!"",RPAREN,SEMI,output,DOT,put,LPAREN,testOutput,DOT,size,LPAREN,RPAREN,<MASK>,1,COMMA,"">>"",RPAREN,SEMI,IF,LPAREN,passed,RPAREN,LBRACE,FOR,LPAREN,Map,DOT,Entry,LT,Integer,COMMA,String,GT,entry,COLON,output,DOT,entrySet,LPAREN,RPAREN,RPAREN,LBRACE,IF,LPAREN,BANG,testOutput,DOT,get,LPAREN,entry,DOT,getKey,LPAREN,RPAREN,RPAREN,DOT,equals,LPAREN,entry,DOT,getValue,LPAREN,RPAREN,RPAREN,RPAREN,LBRACE,passed,EQ,false,SEMI,System,DOT,out,DOT,println,LPAREN,""test7 failed: Line "",PLUS,entry,DOT,getKey,LPAREN,RPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""\tExpected: "",PLUS,entry,DOT,getValue,LPAREN,RPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""\tReceived: "",PLUS,testOutput,DOT,get,LPAREN,entry,DOT,getKey,LPAREN,RPAREN,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,IF,LPAREN,passed,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""test7 passed"",RPAREN,SEMI,RBRACE,RBRACE,ELSE,LBRACE,System,DOT,out,DOT,println,LPAREN,""test7 failed: error"",RPAREN,SEMI,RBRACE,RBRACE,RBRACE","	private static void test7() throws FileNotFoundException {
,		//Test winning by waiting for the guard to pass
,		String input = ""new\n"" + ""pick up key\n"" + ""wait\n""
,				+ ""unlock door with key\n"" + ""go through cell door\n"" + ""quit\n"" + ""y\n"";
,
,		HashMap<Integer, String> output = new HashMap<Integer, String>();
,
,		boolean passed = true;
,		try {
,			in = new ByteArrayInputStream(input.getBytes());
,			System.setIn(in);
,			out = new PrintStream(""testing.txt"");
,			System.setOut(out);
,			Game.main(null);
,		} catch (ExitException se) {
,
,		} catch (Exception e) {
,			System.setOut(stdout);
,			System.out.println(""Error: "");
,			e.printStackTrace();
,			passed = false;
,		} finally {
,			System.setOut(stdout);
,			@SuppressWarnings(""resource"")
,			Scanner sc = new Scanner(new File(""testing.txt""));
,			ArrayList<String> testOutput = new ArrayList<String>();
,			while (sc.hasNextLine()) {
,				testOutput.add(sc.nextLine());
,			}
,			
,			//The expected output for specific lines
,			output.put(13,""The guard walks toward your cell."");
,			output.put(14,"">> Some time goes by."");
,			output.put(15,""The guard peers into the cell, checking that the door is secured, then continues on."");
,			output.put(18,"">> You walk through the cell door."");
,			output.put(21,""The guard walks away from your cell."");
,			output.put(22,""You escape silently into the shadows."");
,			output.put(23,""YOU WON!"");
,			output.put(testOutput.size() <MASK> 1, "">>"");
,
,			if (passed) {
,				for (Map.Entry<Integer, String> entry : output.entrySet()) {
,					if (!testOutput.get(entry.getKey())
,							.equals(entry.getValue())) {
,						passed = false;
,						System.out.println(""test7 failed: Line ""
,								+ entry.getKey());
,						System.out.println(""\tExpected: "" + entry.getValue());
,						System.out.println(""\tReceived: ""
,								+ testOutput.get(entry.getKey()));
,					}
,				}
,				if (passed) {
,					System.out.println(""test7 passed"");
,				}
,			} else {
,				System.out.println(""test7 failed: error"");
,			}
,		}
,	}
"
fd30f660-1c5c-4584-8533-91ca2ad4829d,28e45cd6-7a95-47c3-934c-4b6253cff6f3,STAR,"MONKEYS_AT,Override,PUBLIC,int,hashCode,LPAREN,RPAREN,LBRACE,int,hash,EQ,7,SEMI,hash,EQ,29,<MASK>,hash,PLUS,Objects,DOT,hashCode,LPAREN,this,DOT,getName,LPAREN,RPAREN,RPAREN,SEMI,RETURN,hash,SEMI,RBRACE","    @Override
,    public int hashCode() {
,        int hash = 7;
,        hash = 29 <MASK> hash + Objects.hashCode(this.getName());
,        return hash;
,    }
"
113c5414-6c55-466b-b879-a350ab6e0ca2,4c0aab29-cef8-4360-ab31-7ce697a5273c,EQ,"PUBLIC,void,setPlayerLog,LPAREN,PlayerLog,p,RPAREN,LBRACE,log,<MASK>,p,SEMI,RBRACE","	public void setPlayerLog(PlayerLog p) {
,		log <MASK> p;
,	}
"
56952896-479b-43e9-a9cf-c3f3bb9afc0e,491be343-193c-490c-a335-485fe66dc8db,SUB,"PUBLIC,ProductDAO,LPAREN,RPAREN,THROWS,NamingException,COMMA,SQLException,LBRACE,lastProductAutoKey,EQ,<MASK>,1,SEMI,Context,cxt,EQ,NEW,InitialContext,LPAREN,RPAREN,SEMI,DataSource,ds,EQ,LPAREN,DataSource,RPAREN,cxt,DOT,lookup,LPAREN,""java:/comp/env/jdbc/CartDB"",RPAREN,SEMI,con,EQ,ds,DOT,getConnection,LPAREN,RPAREN,SEMI,RBRACE","    public ProductDAO() throws NamingException, SQLException {
,
,        // initialize lastAutoKeys here
,        lastProductAutoKey = <MASK>1;
,
,        Context cxt = new InitialContext();
,        DataSource ds = (DataSource) cxt.lookup(""java:/comp/env/jdbc/CartDB"");
,
,        con = ds.getConnection();
,    }
"
46b67b7f-680f-46e8-8d0d-ebfce935cfd6,9bf123c3-b76b-4530-8057-18005518650e,SLASH,"PRIVATE,STATIC,double,factorX,LPAREN,double,w,RPAREN,LBRACE,RETURN,w,STAR,width,<MASK>,Math,DOT,abs,LPAREN,xmax,SUB,xmin,RPAREN,SEMI,RBRACE","    private static double factorX(double w) { return w * width  <MASK> Math.abs(xmax - xmin);  }
"
7adec7d8-cee7-4225-a9f6-43a8dd4e76a6,9ff0ea54-669c-428f-8200-d67b31a3ca40,STAR,"PRIVATE,void,CloseBuyTransaction,LPAREN,Date,time,COMMA,String,product,COMMA,double,price,COMMA,int,amount,RPAREN,LBRACE,Query,q,EQ,session,DOT,createQuery,LPAREN,""from TransactionHistory where product = :product and amount < 0 and closed > amount order by time asc"",RPAREN,SEMI,q,DOT,setParameter,LPAREN,""product"",COMMA,product,RPAREN,SEMI,List,LT,TransactionHistory,GT,list,EQ,q,DOT,list,LPAREN,RPAREN,SEMI,IF,LPAREN,list,DOT,size,LPAREN,RPAREN,EQEQ,0,RPAREN,LBRACE,THROW,NEW,NoMatchedOpenTransaction,LPAREN,RPAREN,SEMI,RBRACE,int,remainToClose,EQ,amount,SEMI,FOR,LPAREN,TransactionHistory,th,COLON,list,RPAREN,LBRACE,int,closed,EQ,th,DOT,getClosed,LPAREN,RPAREN,SEMI,int,openAmount,EQ,th,DOT,getAmount,LPAREN,RPAREN,SUB,th,DOT,getClosed,LPAREN,RPAREN,SEMI,double,openPrice,EQ,th,DOT,getPrice,LPAREN,RPAREN,SEMI,Date,openTime,EQ,th,DOT,getTime,LPAREN,RPAREN,SEMI,IF,LPAREN,remainToClose,PLUS,openAmount,LT,0,RPAREN,LBRACE,ClosedTransaction,ct,EQ,NEW,ClosedTransaction,LPAREN,openTime,COMMA,""buy"",COMMA,remainToClose,<MASK>,SUB,1,COMMA,product,COMMA,openPrice,COMMA,time,COMMA,price,RPAREN,SEMI,double,profit,EQ,ct,DOT,getPl,LPAREN,RPAREN,SEMI,th,DOT,setProfit,LPAREN,th,DOT,getProfit,LPAREN,RPAREN,PLUS,profit,RPAREN,SEMI,th,DOT,setClosed,LPAREN,closed,SUB,remainToClose,RPAREN,SEMI,this,DOT,account,DOT,addProfit,LPAREN,profit,RPAREN,SEMI,remainToClose,EQ,0,SEMI,session,DOT,save,LPAREN,th,RPAREN,SEMI,session,DOT,save,LPAREN,this,DOT,account,RPAREN,SEMI,BREAK,SEMI,RBRACE,ELSE,LBRACE,ClosedTransaction,ct,EQ,NEW,ClosedTransaction,LPAREN,openTime,COMMA,""buy"",COMMA,openAmount,COMMA,product,COMMA,openPrice,COMMA,time,COMMA,price,RPAREN,SEMI,double,profit,EQ,ct,DOT,getPl,LPAREN,RPAREN,SEMI,th,DOT,setProfit,LPAREN,th,DOT,getProfit,LPAREN,RPAREN,PLUS,profit,RPAREN,SEMI,th,DOT,setClosed,LPAREN,th,DOT,getAmount,LPAREN,RPAREN,RPAREN,SEMI,this,DOT,account,DOT,addProfit,LPAREN,profit,RPAREN,SEMI,remainToClose,PLUSEQ,openAmount,SEMI,session,DOT,save,LPAREN,th,RPAREN,SEMI,session,DOT,save,LPAREN,this,DOT,account,RPAREN,SEMI,RBRACE,RBRACE,TransactionHistory,newTranx,EQ,NEW,TransactionHistory,LPAREN,this,DOT,account,COMMA,time,COMMA,product,COMMA,price,COMMA,amount,COMMA,amount,COMMA,0,RPAREN,SEMI,session,DOT,save,LPAREN,newTranx,RPAREN,SEMI,RBRACE","	private void CloseBuyTransaction(Date time, String product, double price, int amount) {
,		Query q = session.createQuery(""from TransactionHistory where product = :product and amount < 0 and closed > amount order by time asc"");
,		q.setParameter(""product"", product);
,		List<TransactionHistory> list = q.list();
,        if(list.size() == 0) {
,            throw new NoMatchedOpenTransaction();
,        }
,        int remainToClose = amount;
,        for(TransactionHistory th: list) {
,            int closed = th.getClosed();
,            int openAmount = th.getAmount() - th.getClosed();
,            double openPrice = th.getPrice();
,            Date openTime = th.getTime();
,            if(remainToClose+openAmount < 0) {
,                ClosedTransaction ct = new ClosedTransaction(openTime, ""buy"", remainToClose<MASK>-1, product, openPrice, time, price);
,                double profit = ct.getPl();
,                th.setProfit(th.getProfit()+profit);
,                th.setClosed(closed-remainToClose);
,                this.account.addProfit(profit);
,                remainToClose = 0;
,                session.save(th);
,                session.save(this.account);
,                break;
,            }
,            else {
,                ClosedTransaction ct = new ClosedTransaction(openTime, ""buy"", openAmount, product, openPrice, time, price);
,                double profit = ct.getPl();
,                th.setProfit(th.getProfit()+profit);
,                th.setClosed(th.getAmount());
,                this.account.addProfit(profit);
,                remainToClose += openAmount;
,                session.save(th);
,                session.save(this.account);
,            }
,        }
,
,        TransactionHistory newTranx = new TransactionHistory(this.account, time, product, price, amount, amount, 0);
,        session.save(newTranx);
,	}
"
113c5414-6c55-466b-b879-a350ab6e0ca2,9166e4db-5643-4777-8735-c46fe4118004,EQ,"PUBLIC,STATIC,String,LBRACKET,RBRACKET,csvHeaders,LPAREN,RPAREN,LBRACE,String,LBRACKET,RBRACKET,headers,<MASK>,LBRACE,""Name"",COMMA,""Cost"",COMMA,""Weight"",COMMA,""Nutrition"",COMMA,""TurnsToEat"",COMMA,""EatMsg"",COMMA,""Special"",RBRACE,SEMI,RETURN,headers,SEMI,RBRACE","	public static String[] csvHeaders() {
,		String[] headers <MASK> {""Name"", ""Cost"", ""Weight"", ""Nutrition"", ""TurnsToEat"", ""EatMsg"", ""Special""};
,		return headers;
,	}
"
b61d6017-337e-4ccd-b964-a6b5e3d0cb20,8f18a4fa-aafa-4922-9d01-e84058c4da51,EQEQ,"MONKEYS_AT,Override,PUBLIC,void,attack,LPAREN,Unit,defender,RPAREN,THROWS,IllegalStateException,LBRACE,Weapon,attackingWeapon,EQ,get_weapon,LPAREN,RPAREN,SEMI,Weapon,defendingWeapon,EQ,defender,DOT,get_weapon,LPAREN,RPAREN,SEMI,IF,LPAREN,attackingWeapon,<MASK>,null,RPAREN,LBRACE,THROW,NEW,IllegalStateException,LPAREN,""["",PLUS,this,DOT,getClass,LPAREN,RPAREN,DOT,getName,LPAREN,RPAREN,PLUS,""] weapon is null."",RPAREN,SEMI,RBRACE,int,attackingDamage,EQ,DamageMatrix,DOT,get_damage,LPAREN,get_damageType,LPAREN,RPAREN,COMMA,defender,DOT,get_damageType,LPAREN,RPAREN,RPAREN,SEMI,int,defendingDamage,EQ,DamageMatrix,DOT,get_damage,LPAREN,defender,DOT,get_damageType,LPAREN,RPAREN,COMMA,get_damageType,LPAREN,RPAREN,RPAREN,SEMI,IF,LPAREN,defendingWeapon,BANGEQ,null,BARBAR,defender,INSTANCEOF,DirectUnit,RPAREN,LBRACE,int,distance,EQ,Position,DOT,getManhattanDistance,LPAREN,_position,COMMA,defender,DOT,get_position,LPAREN,RPAREN,RPAREN,SEMI,IF,LPAREN,distance,LT,defendingWeapon,DOT,get_minRange,LPAREN,RPAREN,BARBAR,distance,GT,defendingWeapon,DOT,get_maxRange,LPAREN,RPAREN,RPAREN,LBRACE,defendingDamage,EQ,0,SEMI,RBRACE,RBRACE,ELSE,LBRACE,defendingDamage,EQ,0,SEMI,RBRACE,IF,LPAREN,defender,DOT,updateHitPoints,LPAREN,SUB,1,STAR,attackingDamage,RPAREN,GT,0,RPAREN,updateHitPoints,LPAREN,SUB,1,STAR,defendingDamage,RPAREN,SEMI,_active,EQ,false,SEMI,RBRACE","    @Override
,    public void attack(Unit defender) throws IllegalStateException {
,        Weapon attackingWeapon = get_weapon();
,        Weapon defendingWeapon = defender.get_weapon();
,
,        if (attackingWeapon <MASK> null) {
,            throw new IllegalStateException(""["" + this.getClass().getName() + ""] weapon is null."");
,        }
,
,        int attackingDamage = DamageMatrix.get_damage(get_damageType(), defender.get_damageType());
,        int defendingDamage = DamageMatrix.get_damage(defender.get_damageType(), get_damageType());
,
,        if (defendingWeapon != null || defender instanceof DirectUnit) {
,            // Check if the defending unit is out of range to attack the
,            // attacking unit
,            int distance = Position.getManhattanDistance(_position, defender.get_position());
,            if (distance < defendingWeapon.get_minRange() || distance > defendingWeapon.get_maxRange()) {
,                defendingDamage = 0;
,            }
,        } else {
,            defendingDamage = 0;
,        }
,
,        if (defender.updateHitPoints(-1 * attackingDamage) > 0)
,            updateHitPoints(-1 * defendingDamage);
,
,        _active = false;
,    }
"
41539c05-83ff-49b8-a839-9292483dddc3,21b096bc-4ecc-45c9-a6c7-20c67b43a222,PERCENT,"PUBLIC,JGColor,cycleColor,LPAREN,JGColor,LBRACKET,RBRACKET,cycle,COMMA,double,tmr,COMMA,double,speed,RPAREN,LBRACE,RETURN,cycle,LBRACKET,LPAREN,LPAREN,int,RPAREN,LPAREN,tmr,STAR,speed,RPAREN,RPAREN,<MASK>,cycle,DOT,length,RBRACKET,SEMI,RBRACE","	public JGColor cycleColor(JGColor [] cycle, double tmr, double speed) {
,		return cycle[ ( (int)(tmr*speed) ) <MASK> cycle.length ];
,	}
"
192d7c63-30c8-4cf8-8cc9-29f5bc66ec73,a85b5b07-31af-49dd-a483-727578f8f493,PERCENT,"PROTECTED,STATIC,KDPlusNode,srch,LPAREN,HPoint,key,COMMA,KDPlusNode,t,COMMA,int,K,RPAREN,LBRACE,FOR,LPAREN,int,lev,EQ,0,SEMI,t,BANGEQ,null,SEMI,lev,EQ,LPAREN,lev,PLUS,1,RPAREN,<MASK>,K,RPAREN,LBRACE,IF,LPAREN,BANG,t,DOT,deleted,AMPAMP,key,DOT,equals,LPAREN,t,DOT,k,RPAREN,RPAREN,LBRACE,RETURN,t,SEMI,RBRACE,ELSE,IF,LPAREN,key,DOT,coord,LBRACKET,lev,RBRACKET,GT,t,DOT,k,DOT,coord,LBRACKET,lev,RBRACKET,RPAREN,LBRACE,t,EQ,t,DOT,right,SEMI,RBRACE,ELSE,LBRACE,t,EQ,t,DOT,left,SEMI,RBRACE,RBRACE,RETURN,null,SEMI,RBRACE","    protected static KDPlusNode srch(HPoint key, KDPlusNode t, int K) {
,
,        for (int lev = 0; t != null; lev = (lev + 1) <MASK> K) {
,
,            if (!t.deleted && key.equals(t.k)) {
,                return t;
,            } else if (key.coord[lev] > t.k.coord[lev]) {
,                t = t.right;
,            } else {
,                t = t.left;
,            }
,        }
,
,        return null;
,    }
"
08b41d00-9e8d-4e48-94b9-945bef00d612,d1f1a7c3-76f6-45db-ac47-e55002cc042e,LTEQ,"PUBLIC,STATIC,void,main,LPAREN,String,LBRACKET,RBRACKET,args,RPAREN,LBRACE,int,N,COMMA,sum,EQ,0,SEMI,Scanner,scan,EQ,NEW,Scanner,LPAREN,System,DOT,in,RPAREN,SEMI,System,DOT,out,DOT,print,LPAREN,""Enter N >>> "",RPAREN,SEMI,N,EQ,scan,DOT,nextInt,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,print,LPAREN,""Result of "",RPAREN,SEMI,FOR,LPAREN,int,i,EQ,1,SEMI,i,<MASK>,N,SEMI,i,PLUSPLUS,RPAREN,LBRACE,sum,EQ,sum,PLUS,i,SEMI,System,DOT,out,DOT,print,LPAREN,i,RPAREN,SEMI,IF,LPAREN,i,BANGEQ,N,RPAREN,LBRACE,System,DOT,out,DOT,print,LPAREN,"" + "",RPAREN,SEMI,RBRACE,RBRACE,System,DOT,out,DOT,println,LPAREN,""\n = "",PLUS,sum,RPAREN,SEMI,RBRACE","    public static void main(String[] args) {
,        int N, sum = 0;
,        Scanner scan = new Scanner(System.in);
,        System.out.print(""Enter N >>> "");
,        N = scan.nextInt();
,        System.out.print(""Result of "");
,        for (int i = 1; i <MASK> N; i++) {
,            sum = sum + i;
,            System.out.print(i);
,            if (i != N) {
,                System.out.print("" + "");
,            }
,        }
,        System.out.println(""\n = "" + sum);
,    }
"
1b82c97a-fe19-4584-bdbc-4f13bb123c10,6d6d5a54-1382-4de5-bb96-18ef294bd2ef,GTEQ,"PUBLIC,STATIC,double,frexp,LPAREN,double,x,COMMA,$int,exp_out,RPAREN,LBRACE,double,y,EQ,abs,LPAREN,x,RPAREN,SEMI,int,exp,EQ,0,SEMI,WHILE,LPAREN,y,LT,0.5,RPAREN,LBRACE,y,STAREQ,2.0,SEMI,exp,SUBSUB,SEMI,RBRACE,WHILE,LPAREN,y,<MASK>,1.0,RPAREN,LBRACE,y,SLASHEQ,2.0,SEMI,exp,PLUSPLUS,SEMI,RBRACE,exp_out,DOT,$,LPAREN,exp,RPAREN,SEMI,RETURN,signum,LPAREN,x,RPAREN,STAR,y,SEMI,RBRACE","    public static double frexp(double x, $int exp_out) {
,        double y = abs(x);
,        int exp = 0;
,        while (y < 0.5) {
,            y *= 2.0;
,            exp--;
,        }
,        while (y <MASK> 1.0) {
,            y /= 2.0;
,            exp++;
,        }
,        exp_out.$(exp);
,        return signum(x) * y;
,    }
"
113c5414-6c55-466b-b879-a350ab6e0ca2,4f92a801-eebb-468a-b783-9a9425d051da,EQ,"PUBLIC,void,setPassable,LPAREN,boolean,passable,RPAREN,LBRACE,this,DOT,passable,<MASK>,passable,SEMI,RBRACE","	public void setPassable(boolean passable) {
,		this.passable <MASK> passable;
,	}
"
d71e9d90-d7d7-40b1-b4fa-c5316adcd69a,65c9cf86-2f3d-48a6-9ee7-d06ca1654bd2,LTEQ,"MONKEYS_AT,Override,FINAL,PUBLIC,void,compute,LPAREN,RPAREN,LBRACE,FINAL,int,last,EQ,this,DOT,frameidx,SEMI,FOR,LPAREN,int,l,EQ,0,SEMI,l,LT,this,DOT,structure,DOT,layers,DOT,length,SEMI,l,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,l,EQEQ,this,DOT,structure,DOT,inputlayer,RPAREN,CONTINUE,SEMI,FINAL,Layer,layer,EQ,this,DOT,structure,DOT,layers,LBRACKET,l,RBRACKET,SEMI,IF,LPAREN,layer,DOT,tag,EQEQ,LayerTag,DOT,REGULAR,RPAREN,LBRACE,this,DOT,setFrameIdx,LPAREN,0,RPAREN,SEMI,FOR,LPAREN,int,t,EQ,0,SEMI,t,<MASK>,last,SEMI,t,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,t,GT,0,RPAREN,LBRACE,this,DOT,copyOutput,LPAREN,this,DOT,frameidx,SUB,1,COMMA,this,DOT,frameidx,COMMA,l,RPAREN,SEMI,RBRACE,this,DOT,computeLayerActivations,LPAREN,l,RPAREN,SEMI,this,DOT,incrFrameIdx,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,ELSE,LBRACE,this,DOT,setFrameIdx,LPAREN,last,RPAREN,SEMI,FOR,LPAREN,int,t,EQ,last,SEMI,t,GTEQ,0,SEMI,t,SUBSUB,RPAREN,LBRACE,IF,LPAREN,t,LT,last,RPAREN,LBRACE,this,DOT,copyOutput,LPAREN,this,DOT,frameidx,PLUS,1,COMMA,this,DOT,frameidx,COMMA,l,RPAREN,SEMI,RBRACE,this,DOT,computeLayerActivations,LPAREN,l,RPAREN,SEMI,this,DOT,decrFrameIdx,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,this,DOT,setFrameIdx,LPAREN,last,RPAREN,SEMI,RBRACE","    @Override
,    final public void compute() {
,        //
,        // reset time.
,        //
,        final int last = this.frameidx;
,        //
,        // from first to last layer.
,        //
,        for (int l = 0; l < this.structure.layers.length; l++) {
,            //
,            if (l == this.structure.inputlayer) continue;
,            final Layer layer = this.structure.layers[l];
,            //
,            // regular or reversed layer? 
,            //
,            if (layer.tag == LayerTag.REGULAR) {
,                this.setFrameIdx(0);
,                for (int t = 0; t <MASK> last; t++) {
,                    //
,                    if (t > 0) {
,                        this.copyOutput(this.frameidx - 1, this.frameidx, l);
,                    }
,                    this.computeLayerActivations(l);
,                    //
,                    this.incrFrameIdx();
,                    
,                }
,            } else {
,                this.setFrameIdx(last);
,                for (int t = last; t >= 0; t--) {
,                    //
,                    if (t < last) {
,                        this.copyOutput(this.frameidx + 1, this.frameidx, l);
,                    }
,                    this.computeLayerActivations(l);
,                    //
,                    this.decrFrameIdx();
,                }
,            }
,        }//
,        this.setFrameIdx(last);
,    }
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,4b1520c0-a2ae-474e-b1d4-cfde6bba6051,BANGEQ,"PUBLIC,ArrayList,LT,Point,GT,estimateLaunchPoint,LPAREN,Rectangle,slingshot,COMMA,Point,targetPoint,RPAREN,LBRACE,double,scale,EQ,getSceneScale,LPAREN,slingshot,RPAREN,SEMI,Point,ref,EQ,getReferencePoint,LPAREN,slingshot,RPAREN,SEMI,double,x,EQ,LPAREN,targetPoint,DOT,x,SUB,ref,DOT,x,RPAREN,SLASH,scale,SEMI,double,y,EQ,SUB,LPAREN,targetPoint,DOT,y,SUB,ref,DOT,y,RPAREN,SLASH,scale,SEMI,double,bestError,EQ,1000,SEMI,double,theta1,EQ,0,SEMI,double,theta2,EQ,0,SEMI,double,v,EQ,_scaleFactor,STAR,_launchVelocity,LBRACKET,6,RBRACKET,SEMI,double,v2,EQ,v,STAR,v,SEMI,double,v4,EQ,v2,STAR,v2,SEMI,double,tangent1,EQ,LPAREN,v2,SUB,Math,DOT,sqrt,LPAREN,v4,SUB,LPAREN,x,STAR,x,PLUS,2,STAR,y,STAR,v2,RPAREN,RPAREN,RPAREN,SLASH,x,SEMI,double,tangent2,EQ,LPAREN,v2,PLUS,Math,DOT,sqrt,LPAREN,v4,SUB,LPAREN,x,STAR,x,PLUS,2,STAR,y,STAR,v2,RPAREN,RPAREN,RPAREN,SLASH,x,SEMI,double,t1,EQ,actualToLaunch,LPAREN,Math,DOT,atan,LPAREN,tangent1,RPAREN,RPAREN,SEMI,double,t2,EQ,actualToLaunch,LPAREN,Math,DOT,atan,LPAREN,tangent2,RPAREN,RPAREN,SEMI,ArrayList,LT,Point,GT,pts,EQ,NEW,ArrayList,LT,Point,GT,LPAREN,RPAREN,SEMI,FOR,LPAREN,double,theta,EQ,t1,SUB,BOUND,SEMI,theta,LTEQ,t1,PLUS,BOUND,SEMI,theta,PLUSEQ,0.001,RPAREN,LBRACE,double,velocity,EQ,getVelocity,LPAREN,theta,RPAREN,SEMI,double,u_x,EQ,velocity,STAR,Math,DOT,cos,LPAREN,theta,RPAREN,SEMI,double,u_y,EQ,velocity,STAR,Math,DOT,sin,LPAREN,theta,RPAREN,SEMI,double,a,EQ,SUB,0.5,SLASH,LPAREN,u_x,STAR,u_x,RPAREN,SEMI,double,b,EQ,u_y,SLASH,u_x,SEMI,double,error,EQ,Math,DOT,abs,LPAREN,a,STAR,x,STAR,x,PLUS,b,STAR,x,SUB,y,RPAREN,SEMI,IF,LPAREN,error,LT,bestError,RPAREN,LBRACE,theta1,EQ,theta,SEMI,bestError,EQ,error,SEMI,RBRACE,RBRACE,IF,LPAREN,bestError,LT,1000,RPAREN,LBRACE,theta1,EQ,actualToLaunch,LPAREN,theta1,RPAREN,SEMI,pts,DOT,add,LPAREN,findReleasePoint,LPAREN,slingshot,COMMA,theta1,RPAREN,RPAREN,SEMI,RBRACE,bestError,EQ,1000,SEMI,FOR,LPAREN,double,theta,EQ,t2,SUB,BOUND,SEMI,theta,LTEQ,t2,PLUS,BOUND,SEMI,theta,PLUSEQ,0.001,RPAREN,LBRACE,double,velocity,EQ,getVelocity,LPAREN,theta,RPAREN,SEMI,double,u_x,EQ,velocity,STAR,Math,DOT,cos,LPAREN,theta,RPAREN,SEMI,double,u_y,EQ,velocity,STAR,Math,DOT,sin,LPAREN,theta,RPAREN,SEMI,double,a,EQ,SUB,0.5,SLASH,LPAREN,u_x,STAR,u_x,RPAREN,SEMI,double,b,EQ,u_y,SLASH,u_x,SEMI,double,error,EQ,Math,DOT,abs,LPAREN,a,STAR,x,STAR,x,PLUS,b,STAR,x,SUB,y,RPAREN,SEMI,IF,LPAREN,error,LT,bestError,RPAREN,LBRACE,theta2,EQ,theta,SEMI,bestError,EQ,error,SEMI,RBRACE,RBRACE,theta2,EQ,actualToLaunch,LPAREN,theta2,RPAREN,SEMI,IF,LPAREN,theta2,LT,Math,DOT,toRadians,LPAREN,75,RPAREN,AMPAMP,theta2,<MASK>,theta1,AMPAMP,bestError,LT,1000,RPAREN,pts,DOT,add,LPAREN,findReleasePoint,LPAREN,slingshot,COMMA,theta2,RPAREN,RPAREN,SEMI,RETURN,pts,SEMI,RBRACE","    public ArrayList<Point> estimateLaunchPoint(Rectangle slingshot, Point targetPoint) {
,        
,        // calculate relative position of the target (normalised)
,        double scale = getSceneScale(slingshot);
,        //System.out.println(""scale "" + scale);
,        Point ref = getReferencePoint(slingshot);
,            
,        double x = (targetPoint.x - ref.x) / scale;
,        double y = -(targetPoint.y - ref.y) / scale;
,        
,        double bestError = 1000;
,        double theta1 = 0;
,        double theta2 = 0;
,        
,        // first estimate launch angle using the projectile equation (constant velocity)
,        double v = _scaleFactor * _launchVelocity[6];
,        double v2 = v * v;
,        double v4 = v2 * v2;
,        double tangent1 = (v2 - Math.sqrt(v4 - (x * x + 2 * y * v2))) / x;
,        double tangent2 = (v2 + Math.sqrt(v4 - (x * x + 2 * y * v2))) / x;
,        double t1 = actualToLaunch(Math.atan(tangent1));
,        double t2 = actualToLaunch(Math.atan(tangent2));
,
,        ArrayList<Point> pts = new ArrayList<Point>();
,
,        // search angles in range [t1 - BOUND, t1 + BOUND]
,        for (double theta = t1 - BOUND; theta <= t1 + BOUND; theta += 0.001)
,        {
,            double velocity = getVelocity(theta);
,            
,            // initial velocities
,            double u_x = velocity * Math.cos(theta);
,            double u_y = velocity * Math.sin(theta);
,            
,            // the normalised coefficients
,            double a = -0.5 / (u_x * u_x);
,            double b = u_y / u_x;
,            
,            // the error in y-coordinate
,            double error = Math.abs(a*x*x + b*x - y);
,            if (error < bestError)
,            {
,                theta1 = theta;
,                bestError = error;
,            }
,        }
,        if (bestError < 1000)
,        {
,            theta1 = actualToLaunch(theta1);
,            // add launch points to the list
,            pts.add(findReleasePoint(slingshot, theta1));
,        }
,        bestError = 1000;
,        
,        // search angles in range [t2 - BOUND, t2 + BOUND]
,        for (double theta = t2 - BOUND; theta <= t2 + BOUND; theta += 0.001)
,        {
,            double velocity = getVelocity(theta);
,            
,            // initial velocities
,            double u_x = velocity * Math.cos(theta);
,            double u_y = velocity * Math.sin(theta);
,            
,            // the normalised coefficients
,            double a = -0.5 / (u_x * u_x);
,            double b = u_y / u_x;
,            
,            // the error in y-coordinate
,            double error = Math.abs(a*x*x + b*x - y);
,            if (error < bestError)
,            {
,                theta2 = theta;
,                bestError = error;
,            }
,        }
,        
,        theta2 = actualToLaunch(theta2);
,        
,        //System.out.println(""Two angles: "" + Math.toDegrees(theta1) + "", "" + Math.toDegrees(theta2));
,            
,        
,        // add the higher point if it is below 75 degrees and not same as first
,        if (theta2 < Math.toRadians(75) && theta2 <MASK> theta1 && bestError < 1000)
,            pts.add(findReleasePoint(slingshot, theta2));
,        
,        return pts;
,    }
"
7adec7d8-cee7-4225-a9f6-43a8dd4e76a6,105b7d17-d512-410a-b1a8-9e22671929fc,STAR,"PUBLIC,STATIC,String,getLongTradesSummary,LPAREN,ArrayList,LT,ClosedTransaction,GT,closed,RPAREN,LBRACE,Iterator,LT,ClosedTransaction,GT,i,EQ,closed,DOT,iterator,LPAREN,RPAREN,SEMI,int,longTrades,EQ,0,SEMI,int,longProfitTrades,EQ,0,SEMI,WHILE,LPAREN,i,DOT,hasNext,LPAREN,RPAREN,RPAREN,LBRACE,ClosedTransaction,ct,EQ,i,DOT,next,LPAREN,RPAREN,SEMI,String,type,EQ,ct,DOT,getType,LPAREN,RPAREN,SEMI,double,pl,EQ,ct,DOT,getPl,LPAREN,RPAREN,SEMI,IF,LPAREN,type,EQEQ,""buy"",RPAREN,LBRACE,longTrades,PLUSPLUS,SEMI,IF,LPAREN,pl,GT,0,RPAREN,LBRACE,longProfitTrades,PLUSPLUS,SEMI,RBRACE,RBRACE,RBRACE,double,profitPercent,EQ,longTrades,EQEQ,0,QUES,0,COLON,longProfitTrades,<MASK>,100,SLASH,longTrades,SEMI,String,summary,EQ,String,DOT,format,LPAREN,""%d (%.2f%%)"",COMMA,longTrades,COMMA,profitPercent,RPAREN,SEMI,RETURN,summary,SEMI,RBRACE","	public static String getLongTradesSummary(ArrayList<ClosedTransaction> closed) {
,		Iterator<ClosedTransaction> i = closed.iterator();
,		int longTrades = 0;
,		int longProfitTrades = 0;
,		while(i.hasNext()) {
,			ClosedTransaction ct = i.next();
,			String type = ct.getType();
,			double pl = ct.getPl();
,			if(type == ""buy"") {
,				longTrades++;
,				if(pl > 0) {
,					longProfitTrades++;
,				}
,			}
,		}
,
,		double profitPercent = longTrades == 0 ? 0 : longProfitTrades <MASK> 100/longTrades;
,		String summary = String.format(""%d (%.2f%%)"", longTrades, profitPercent);
,		return summary;
,	}
"
b4c6806c-de1d-4e17-959c-99489d5dd3e8,d47137ab-11de-4b54-af23-4ec1c8a64e70,SUB,"MONKEYS_AT,Override,PUBLIC,void,onCommand,LPAREN,SMTPSession,session,RPAREN,THROWS,SMTPException,LBRACE,IF,LPAREN,BANG,session,DOT,checkCommandOrder,LPAREN,RPAREN,RPAREN,LBRACE,THROW,NEW,SMTPException,LPAREN,""502 command not implemented"",RPAREN,SEMI,RBRACE,String,remainCommand,EQ,StringUtil,DOT,getRemainCommand,LPAREN,session,DOT,getCurRemainCommandStr,LPAREN,RPAREN,RPAREN,SEMI,String,receiveAddress,EQ,StringUtil,DOT,getAddressFromArgument,LPAREN,session,DOT,getCurRemainCommandStr,LPAREN,RPAREN,RPAREN,SEMI,IF,LPAREN,remainCommand,EQEQ,null,BARBAR,BANG,remainCommand,DOT,toUpperCase,LPAREN,RPAREN,DOT,equals,LPAREN,""TO"",RPAREN,BARBAR,receiveAddress,EQEQ,null,RPAREN,LBRACE,THROW,NEW,SMTPException,LPAREN,""501 Syntax error in parameters or arguments"",RPAREN,SEMI,RBRACE,IF,LPAREN,BANG,CheckUtil,DOT,isCorrectPath,LPAREN,receiveAddress,RPAREN,RPAREN,LBRACE,THROW,NEW,SMTPException,LPAREN,""501 Syntax error in parameters or arguments"",RPAREN,SEMI,RBRACE,receiveAddress,EQ,receiveAddress,DOT,substring,LPAREN,1,COMMA,receiveAddress,DOT,length,LPAREN,RPAREN,<MASK>,1,RPAREN,SEMI,String,emailName,EQ,StringUtil,DOT,getEmailName,LPAREN,receiveAddress,RPAREN,SEMI,String,emailDomain,EQ,StringUtil,DOT,getEmailDomain,LPAREN,receiveAddress,RPAREN,SEMI,session,DOT,getEmail,LPAREN,RPAREN,DOT,getRecipientsList,LPAREN,RPAREN,DOT,add,LPAREN,receiveAddress,RPAREN,SEMI,session,DOT,setLastCommandName,LPAREN,RPAREN,SEMI,session,DOT,sendResponse,LPAREN,""250 OK"",RPAREN,SEMI,RBRACE","	@Override
,	public void onCommand(SMTPSession session) throws SMTPException{
,		// 检查上一个命令
,		if (!session.checkCommandOrder()) {
,			throw new SMTPException(""502 command not implemented"");
,		}
,			
,		// 获取参数
,		String remainCommand = StringUtil.getRemainCommand(session.getCurRemainCommandStr());
,		String receiveAddress=StringUtil.getAddressFromArgument(session.getCurRemainCommandStr());
,
,		// 检查命令是否正确
,		if (remainCommand == null || !remainCommand.toUpperCase().equals(""TO"")
,				|| receiveAddress == null) {
,			throw new SMTPException(""501 Syntax error in parameters or arguments"");
,		}
,		// 检查回复地址是否合法
,		if (!CheckUtil.isCorrectPath(receiveAddress)) {
,			throw new SMTPException(""501 Syntax error in parameters or arguments"");
,		}
,		// 去除尖括号
,		receiveAddress = receiveAddress.substring(1, receiveAddress.length() <MASK> 1);
,
,		// 获取地址信息
,		String emailName = StringUtil.getEmailName(receiveAddress);
,		String emailDomain = StringUtil.getEmailDomain(receiveAddress);
,
,		//检测收件人地址是否有效
,		
,		// 记录发件人
,		session.getEmail().getRecipientsList().add(receiveAddress);
,		
,		// 命令完结
,		session.setLastCommandName();
,		session.sendResponse(""250 OK"");
,	}
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,88ebb7dc-116e-4a2a-a047-4d10d767d27b,SUB,"PUBLIC,double,getpLength,LPAREN,RPAREN,LBRACE,IF,LPAREN,plength,BANGEQ,<MASK>,1,RPAREN,RETURN,plength,SEMI,RETURN,height,SEMI,RBRACE","    public double getpLength()
,    {
,	   	 if(plength != <MASK>1)
,	   		 return plength;
,	   	 return height;
,    }
"
ab6b11e7-9e21-4611-901d-21ca99a5907d,105c32e4-f326-4620-b80f-622456fc9b1a,SLASH,"PROTECTED,FINAL,boolean,isLargePolygon,LPAREN,RPAREN,LBRACE,RETURN,LPAREN,sizeArray,LBRACKET,0,RBRACKET,GTEQ,SimpleSpectralAccessProtocolLibrary,DOT,MAX_VALUE_FOR_RIGHT_ASCENSION,<MASK>,2.0,RPAREN,QUES,true,COLON,false,SEMI,RBRACE","  protected final boolean isLargePolygon() {
,    return (sizeArray[0] >= SimpleSpectralAccessProtocolLibrary.MAX_VALUE_FOR_RIGHT_ASCENSION <MASK> 2.0) ? true : false;
,  }
"
981a8323-8723-4545-9c8d-5a7193175419,75e56a72-6a5d-4cf2-9869-f7eb300620cf,PERCENT,"PRIVATE,int,clearArea,LPAREN,int,zombiesAboutToEncouter,RPAREN,LBRACE,int,zombiesKilled,EQ,0,SEMI,List,LT,Survivor,GT,team,EQ,this,DOT,raidSettings,DOT,team,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,zombiesAboutToEncouter,SEMI,i,PLUSPLUS,RPAREN,LBRACE,Survivor,target,EQ,team,DOT,get,LPAREN,Math,DOT,abs,LPAREN,NEW,Random,LPAREN,RPAREN,DOT,nextInt,LPAREN,RPAREN,RPAREN,<MASK>,team,DOT,size,LPAREN,RPAREN,RPAREN,SEMI,double,zombieAttack,EQ,BitingDeathGame,DOT,getRandomProbability,LPAREN,RPAREN,SEMI,boolean,targetSaved,EQ,false,SEMI,FOR,LPAREN,Survivor,potentialSaver,COLON,team,RPAREN,LBRACE,IF,LPAREN,potentialSaver,DOT,getFightingEfficiency,LPAREN,RPAREN,GT,zombieAttack,RPAREN,LBRACE,targetSaved,EQ,true,SEMI,RBRACE,RBRACE,IF,LPAREN,BANG,targetSaved,RPAREN,LBRACE,IF,LPAREN,BANG,this,DOT,survivorsHurtDuringRaid,DOT,contains,LPAREN,target,RPAREN,RPAREN,LBRACE,this,DOT,survivorsHurtDuringRaid,DOT,add,LPAREN,target,RPAREN,SEMI,RBRACE,RBRACE,zombiesKilled,PLUSPLUS,SEMI,RBRACE,TRY,LBRACE,this,DOT,raidSettings,DOT,getDestination,LPAREN,RPAREN,DOT,removeZombies,LPAREN,zombiesKilled,RPAREN,SEMI,RBRACE,CATCH,LPAREN,IncoherentNumberException,e,RPAREN,LBRACE,System,DOT,err,DOT,println,LPAREN,""Erreur de code dans Raid#clearArea : le nombre de zombies \u00E0 supprimer est incoh\u00E9rent"",RPAREN,SEMI,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,RETURN,zombiesKilled,SEMI,RBRACE","	private int clearArea(int zombiesAboutToEncouter) {
,		int zombiesKilled = 0;
,		List<Survivor> team = this.raidSettings.team;
,		
,		for (int i = 0 ; i < zombiesAboutToEncouter ; i++) {
,			Survivor target = team.get(Math.abs(new Random().nextInt()) <MASK> team.size());
,			
,			double zombieAttack = BitingDeathGame.getRandomProbability();
,			
,			boolean targetSaved = false;
,			for (Survivor potentialSaver : team)  { // Possibly the target himself
,				if (potentialSaver.getFightingEfficiency() > zombieAttack) {
,					targetSaved = true;
,				}
,			}
,			
,			if (! targetSaved) {  // Bitten
,				if (! this.survivorsHurtDuringRaid.contains(target)) {
,					this.survivorsHurtDuringRaid.add(target);
,				}
,			}
,			
,			zombiesKilled++;
,		}
,
,		try {
,			this.raidSettings.getDestination().removeZombies(zombiesKilled);
,		} catch (IncoherentNumberException e) {
,			System.err.println(""Erreur de code dans Raid#clearArea : le nombre de zombies à supprimer est incohérent"");
,			e.printStackTrace();
,		}
,
,		return zombiesKilled;
,	}
"
46b67b7f-680f-46e8-8d0d-ebfce935cfd6,02f4009b-e7b7-414a-a560-c1bb9fafe4c1,SLASH,"PRIVATE,STATIC,double,userY,LPAREN,double,y,RPAREN,LBRACE,RETURN,ymax,SUB,y,STAR,LPAREN,ymax,SUB,ymin,RPAREN,<MASK>,height,SEMI,RBRACE","    private static double   userY(double y) { return ymax - y * (ymax - ymin) <MASK> height;   }
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,55eaeb99-9012-4f2d-b3a9-89b16fd21807,BANGEQ,"PUBLIC,STATIC,HashMap,LT,ABObject,LBRACKET,RBRACKET,COMMA,ERA,LBRACKET,RBRACKET,GT,TranslateToRA,LPAREN,List,LT,ABObject,GT,listObject,RPAREN,LBRACE,RADictionary,EQ,NEW,HashMap,LT,ABObject,LBRACKET,RBRACKET,COMMA,ERA,LBRACKET,RBRACKET,GT,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,listObject,DOT,size,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,ABObject,object1,EQ,listObject,DOT,get,LPAREN,i,RPAREN,SEMI,FOR,LPAREN,int,j,EQ,0,SEMI,j,LT,listObject,DOT,size,LPAREN,RPAREN,SEMI,j,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,j,<MASK>,i,RPAREN,LBRACE,ABObject,object2,EQ,listObject,DOT,get,LPAREN,j,RPAREN,SEMI,ERA,LBRACKET,RBRACKET,rels,EQ,GetERA,LPAREN,object1,COMMA,object2,RPAREN,SEMI,RADictionary,DOT,put,LPAREN,NEW,ABObject,LBRACKET,RBRACKET,LBRACE,object1,COMMA,object2,RBRACE,COMMA,rels,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,RETURN,RADictionary,SEMI,RBRACE","    public static HashMap<ABObject[], ERA[]> TranslateToRA(List<ABObject> listObject)
,    {
,    	RADictionary = new HashMap<ABObject[], ERA[]>();
,        //InitalizeHashMap(dictionary, listObject);
,        for(int i = 0; i < listObject.size(); i++)
,        {
,            ABObject object1 = listObject.get(i);
,            for(int j = 0; j < listObject.size(); j++)
,            {
,                if(j <MASK> i)
,                {
,                    ABObject object2 = listObject.get(j);
,                    
,                    ERA[] rels = GetERA(object1, object2);
,                    
,                    // Set relation for RA(object1, object 2)
,                    RADictionary.put(new ABObject[]{object1,object2}, rels);               
,                }
,            }
,        }
,        return RADictionary;
,    }
"
113c5414-6c55-466b-b879-a350ab6e0ca2,df5f452e-fb07-49bc-bad5-eabd94016dc1,EQ,"PUBLIC,void,setCurrentHP,LPAREN,int,currentHP,RPAREN,LBRACE,this,DOT,currentHP,<MASK>,currentHP,SEMI,RBRACE","	public void setCurrentHP(int currentHP) {
,		this.currentHP <MASK> currentHP;
,	}
"
b6d08fd3-a673-4a77-8d9f-bf9a01922a85,b65a25b5-81a1-45af-8b0c-b288122a9267,SLASH,"int,whenArrive,LPAREN,float,x,COMMA,float,y,RPAREN,LBRACE,float,d,EQ,LPAREN,p,DOT,x,SUB,x,RPAREN,STAR,LPAREN,p,DOT,x,SUB,x,RPAREN,PLUS,LPAREN,p,DOT,y,SUB,y,RPAREN,STAR,LPAREN,p,DOT,y,SUB,y,RPAREN,SEMI,d,EQ,LPAREN,float,RPAREN,Math,DOT,sqrt,LPAREN,d,RPAREN,SEMI,RETURN,LPAREN,int,RPAREN,LPAREN,d,<MASK>,ds,RPAREN,SEMI,RBRACE","    int whenArrive(float x, float y) {
,        float d = (p.x - x) * (p.x - x) + (p.y - y) * (p.y - y);
,        d = (float) Math.sqrt(d);
,        return (int) (d <MASK> ds);
,    }
"
113c5414-6c55-466b-b879-a350ab6e0ca2,4d9a2a93-d1a1-4fff-9946-6bb15aec70a5,EQ,"PUBLIC,FoodDecorator,LPAREN,Food,decoratedFood,RPAREN,LBRACE,this,DOT,decoratedFood,<MASK>,decoratedFood,SEMI,this,DOT,setID,LPAREN,decoratedFood,DOT,getID,LPAREN,RPAREN,RPAREN,SEMI,this,DOT,setName,LPAREN,decoratedFood,DOT,getName,LPAREN,RPAREN,RPAREN,SEMI,this,DOT,setCost,LPAREN,decoratedFood,DOT,getCost,LPAREN,RPAREN,RPAREN,SEMI,this,DOT,setWeight,LPAREN,decoratedFood,DOT,getWeight,LPAREN,RPAREN,RPAREN,SEMI,this,DOT,setNutrition,LPAREN,decoratedFood,DOT,getNutrition,LPAREN,RPAREN,RPAREN,SEMI,this,DOT,setTurnsToEat,LPAREN,decoratedFood,DOT,getTurnsToEat,LPAREN,RPAREN,RPAREN,SEMI,this,DOT,setEatMessage,LPAREN,decoratedFood,DOT,getEatMessage,LPAREN,RPAREN,RPAREN,SEMI,this,DOT,setStackable,LPAREN,decoratedFood,DOT,isStackable,LPAREN,RPAREN,RPAREN,SEMI,this,DOT,setEatEffects,LPAREN,decoratedFood,DOT,getEatEffects,LPAREN,RPAREN,RPAREN,SEMI,RBRACE","	public FoodDecorator(Food decoratedFood) {
,		this.decoratedFood <MASK> decoratedFood;
,		this.setID(decoratedFood.getID());
,		this.setName(decoratedFood.getName());
,		this.setCost(decoratedFood.getCost());
,		this.setWeight(decoratedFood.getWeight());
,		this.setNutrition(decoratedFood.getNutrition());
,		this.setTurnsToEat(decoratedFood.getTurnsToEat());
,		this.setEatMessage(decoratedFood.getEatMessage());
,		this.setStackable(decoratedFood.isStackable());
,		this.setEatEffects(decoratedFood.getEatEffects());
,	}
"
ce409cfa-d5ce-4a2d-98f1-b91cf6798c84,5e740756-3bca-4c7b-b5ca-6fae17f92cc1,LTEQ,"MONKEYS_AT,Override,PUBLIC,void,render,LPAREN,float,delta,RPAREN,LBRACE,this,DOT,rulesView,DOT,render,LPAREN,delta,COMMA,currentSlide,RPAREN,SEMI,timeElapsed,PLUSEQ,delta,SEMI,float,x,EQ,Gdx,DOT,input,DOT,getX,LPAREN,RPAREN,SEMI,float,y,EQ,Gdx,DOT,graphics,DOT,getHeight,LPAREN,RPAREN,SUB,Gdx,DOT,input,DOT,getY,LPAREN,RPAREN,SEMI,IF,LPAREN,Gdx,DOT,input,DOT,justTouched,LPAREN,RPAREN,AMPAMP,timeElapsed,GTEQ,1,RPAREN,LBRACE,IF,LPAREN,this,DOT,continueButton,DOT,getBoundingRectangle,LPAREN,RPAREN,DOT,contains,LPAREN,x,COMMA,y,RPAREN,RPAREN,LBRACE,currentSlide,PLUSPLUS,SEMI,timeElapsed,EQ,0,SEMI,RBRACE,IF,LPAREN,this,DOT,goBackButton,DOT,getBoundingRectangle,LPAREN,RPAREN,DOT,contains,LPAREN,x,COMMA,y,RPAREN,RPAREN,LBRACE,currentSlide,SUBSUB,SEMI,timeElapsed,EQ,0,SEMI,RBRACE,RBRACE,IF,LPAREN,currentSlide,<MASK>,0,RPAREN,LBRACE,currentSlide,EQ,0,SEMI,RBRACE,IF,LPAREN,currentSlide,GT,4,RPAREN,LBRACE,this,DOT,game,DOT,setScreen,LPAREN,NEW,TitleScreen,LPAREN,game,RPAREN,RPAREN,SEMI,RBRACE,RBRACE","	@Override
,	public void render(float delta) {
,		this.rulesView.render(delta, currentSlide);
,		timeElapsed += delta;
,		float x = Gdx.input.getX();
,		float y = Gdx.graphics.getHeight() - Gdx.input.getY();
,		if (Gdx.input.justTouched() && timeElapsed >= 1) {	
,			if (this.continueButton.getBoundingRectangle().contains(x, y)) {
,				currentSlide++;
,				timeElapsed = 0;
,			}
,			if (this.goBackButton.getBoundingRectangle().contains(x, y)) {
,				currentSlide--;
,				timeElapsed = 0;
,			}
,		}
,		if(currentSlide <MASK>0){
,			currentSlide = 0;
,		}
,		if (currentSlide > 4) {
,			// there is no more slide to show, go back to the title screen
,			this.game.setScreen(new TitleScreen(game));
,		}
,	}
"
1b82c97a-fe19-4584-bdbc-4f13bb123c10,2aaf0aa6-5158-4af8-9a82-959c7ff367d7,STAR,"PUBLIC,STATIC,FINAL,double,LBRACKET,RBRACKET,LBRACKET,RBRACKET,doub_mat,LPAREN,int,n,COMMA,int,m,COMMA,FINAL,double,LBRACKET,RBRACKET,x,RPAREN,THROWS,NRException,LBRACE,IF,LPAREN,x,DOT,length,BANGEQ,n,<MASK>,m,RPAREN,THROW,NEW,NRException,LPAREN,""x.length != n * m"",RPAREN,SEMI,FINAL,double,LBRACKET,RBRACKET,LBRACKET,RBRACKET,r,EQ,NEW,double,LBRACKET,n,RBRACKET,LBRACKET,m,RBRACKET,SEMI,int,p,EQ,0,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,n,SEMI,i,PLUSPLUS,RPAREN,FOR,LPAREN,int,j,EQ,0,SEMI,j,LT,m,SEMI,j,PLUSPLUS,RPAREN,r,LBRACKET,i,RBRACKET,LBRACKET,j,RBRACKET,EQ,x,LBRACKET,p,PLUSPLUS,RBRACKET,SEMI,RETURN,r,SEMI,RBRACE","    public static final double[][] doub_mat(int n, int m, final double[] x) throws NRException {
,        if (x.length != n <MASK> m)
,            throw new NRException(""x.length != n * m"");
,        final double[][] r = new double[n][m];
,        int p = 0;
,        for (int i = 0; i < n; i++)
,            for (int j = 0; j < m; j++)
,                r[i][j] = x[p++];
,        return r;
,    }
"
a64abb7e-1e48-4f96-a7b5-816a0922e0f3,ebb9af77-54b2-4de3-9b43-2198e3e0f301,GT,"MONKEYS_AT,Override,PUBLIC,void,runExperiment,LPAREN,RPAREN,THROWS,Exception,LBRACE,FOR,LPAREN,String,dataset,COLON,this,DOT,dataSets,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""Experiment for \"""",PLUS,dataset,PLUS,""\"":"",RPAREN,SEMI,double,maxF,EQ,Double,DOT,MIN_VALUE,SEMI,double,bestVariance,EQ,Double,DOT,NaN,SEMI,FOR,LPAREN,double,variance,COLON,this,DOT,regulariationParameters,RPAREN,LBRACE,MultipleEvaluation,me,EQ,crossValidation,LPAREN,dataset,COMMA,variance,RPAREN,SEMI,double,f,EQ,me,DOT,getMean,LPAREN,InstanceBasedFMeasure,DOT,measureName,RPAREN,SEMI,IF,LPAREN,f,<MASK>,maxF,RPAREN,LBRACE,maxF,EQ,f,SEMI,bestVariance,EQ,variance,SEMI,RBRACE,RBRACE,Evaluation,results,EQ,singleEvaluation,LPAREN,dataset,COMMA,bestVariance,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,this,DOT,resultToString,LPAREN,results,COMMA,this,DOT,trainingTime,COMMA,this,DOT,testingTime,RPAREN,PLUS,""\n"",RPAREN,SEMI,RBRACE,RBRACE","	@Override
,	public void runExperiment() throws Exception {
,		for (String dataset : this.dataSets) {
,			System.out.println(""Experiment for \"""" + dataset + ""\"":"");
,			
,			double maxF = Double.MIN_VALUE;
,			double bestVariance = Double.NaN;
,			
,			for (double variance : this.regulariationParameters) {	
,				MultipleEvaluation me = crossValidation(dataset, variance);
,				double f = me.getMean(InstanceBasedFMeasure.measureName);
,				if (f <MASK> maxF) {
,					maxF = f;
,					bestVariance = variance;
,				}
,			}
,			
,			Evaluation results = singleEvaluation(dataset, bestVariance);
,			System.out.println(this.resultToString(results, this.trainingTime, this.testingTime) + ""\n"");
,		}
,	}
"
c7dcc73a-9b0b-4ad0-8be4-e6b942951b21,d620819c-e6b2-4755-8d8d-99d16b188ccc,STAR,"PRIVATE,int,getVersion,LPAREN,String,version,RPAREN,LBRACE,RETURN,Integer,DOT,parseInt,LPAREN,version,DOT,substring,LPAREN,0,COMMA,version,DOT,indexOf,LPAREN,""."",RPAREN,RPAREN,RPAREN,<MASK>,16,PLUS,Integer,DOT,parseInt,LPAREN,version,DOT,substring,LPAREN,version,DOT,indexOf,LPAREN,""."",RPAREN,PLUS,1,RPAREN,RPAREN,SEMI,RBRACE","	private int getVersion(String version){
,		return Integer.parseInt(version.substring(0,version.indexOf(""."")))<MASK>16+Integer.parseInt(version.substring(version.indexOf(""."")+1));
,	}
"
41e528e8-032e-4c9c-aedf-8273f5e22315,331d136f-6fe3-46cb-9afc-2cfb7de30972,PERCENT,"PUBLIC,STATIC,void,main,LPAREN,String,LBRACKET,RBRACKET,args,RPAREN,LBRACE,Scanner,sc,EQ,NEW,Scanner,LPAREN,System,DOT,in,RPAREN,SEMI,System,DOT,out,DOT,print,LPAREN,""Please enter integer number A:"",RPAREN,SEMI,int,a,EQ,sc,DOT,nextInt,LPAREN,RPAREN,SEMI,boolean,isPrime,EQ,true,SEMI,FOR,LPAREN,int,i,EQ,2,SEMI,i,LT,a,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,a,<MASK>,i,EQEQ,0,RPAREN,LBRACE,isPrime,EQ,false,SEMI,BREAK,SEMI,RBRACE,RBRACE,IF,LPAREN,isPrime,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""The number IS prime"",RPAREN,SEMI,RBRACE,ELSE,LBRACE,System,DOT,out,DOT,println,LPAREN,""The number IS NOT prime"",RPAREN,SEMI,RBRACE,RBRACE","	public static void main(String[] args) {
,		Scanner sc = new Scanner(System.in);
,		System.out.print(""Please enter integer number A:"");
,		int a = sc.nextInt();
,		boolean isPrime = true;
,		
,		// Method 1 - with Math.sqrt()
,		// for (int i = 2; i <= Math.sqrt(a); i++) {
,		// if (a <MASK> i == 0) {
,		// isPrime = false;
,		// break;
,		// }
,		// }
,		
,		// Method 2 - without using Math.sqrt()
,		for (int i = 2; i < a; i++) {
,			if (a % i == 0) {
,				isPrime = false;
,				break;
,			}
,		}
,		
,		
,		if (isPrime) {
,			System.out.println(""The number IS prime"");
,		}
,		else {
,			System.out.println(""The number IS NOT prime"");
,		}
,	}
"
7b10f06b-338c-44c3-8e01-b40eb98395b8,7845f014-6fab-4896-8c0c-f23413ce4ffe,EQEQ,"PUBLIC,boolean,isHead,LPAREN,RPAREN,LBRACE,RETURN,LPAREN,column,<MASK>,null,RPAREN,SEMI,RBRACE","	public boolean isHead() {
,		return (column <MASK> null);
,	}
"
85e73bf4-198d-4e97-95ec-bfad228c11ea,d6b857e8-9071-42d0-a316-7e86c608a9c1,STAR,"PUBLIC,void,endElement,LPAREN,String,uri,COMMA,String,name,RPAREN,THROWS,SAXException,LBRACE,indentLevel,SUBSUB,SEMI,outputSpaces,LPAREN,indentLevel,<MASK>,INDENT,RPAREN,SEMI,closeElement,LPAREN,uri,COMMA,name,RPAREN,SEMI,newLine,LPAREN,RPAREN,SEMI,RBRACE","    public void endElement(String uri, String name) throws SAXException {
,        indentLevel--;
,        outputSpaces(indentLevel <MASK> INDENT);
,        closeElement(uri, name);
,        newLine();
,    }
"
045c9602-1af3-497c-b8cd-2e449d2f2915,e169e1d5-3382-49ab-9849-54b67942bd5d,PLUS,"MONKEYS_AT,Override,void,prepare,LPAREN,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""Prepareing "",<MASK>,name,RPAREN,SEMI,dough,EQ,inFactory,DOT,createDough,LPAREN,RPAREN,SEMI,sauce,EQ,inFactory,DOT,createSauce,LPAREN,RPAREN,SEMI,cheese,EQ,inFactory,DOT,createCheese,LPAREN,RPAREN,SEMI,pepperoni,EQ,inFactory,DOT,createPepperoni,LPAREN,RPAREN,SEMI,RBRACE","	@Override
,	void prepare() {
,		System.out.println(""Prepareing "" <MASK> name);
,		
,		dough = inFactory.createDough();
,		sauce = inFactory.createSauce();
,		cheese = inFactory.createCheese();
,		pepperoni = inFactory.createPepperoni();
,		
,	}
"
4ea68084-5865-4b62-a71d-3eeac4e10676,ee0d64bb-4891-4b54-849e-7e88abe0b86b,SLASH,"PUBLIC,String,toPrettyString,LPAREN,RPAREN,LBRACE,StringBuilder,output,EQ,NEW,StringBuilder,LPAREN,RPAREN,SEMI,Double,lastWeight,EQ,0D,SEMI,DecimalFormat,oneDotTwoFormat,EQ,NEW,DecimalFormat,LPAREN,""0.00"",RPAREN,SEMI,DecimalFormat,twoFormat,EQ,NEW,DecimalFormat,LPAREN,""00"",RPAREN,SEMI,FOR,LPAREN,Map,DOT,Entry,LT,Double,COMMA,E,GT,mapEntry,COLON,map,DOT,entrySet,LPAREN,RPAREN,RPAREN,LBRACE,IF,LPAREN,output,DOT,length,LPAREN,RPAREN,GT,0,RPAREN,LBRACE,output,DOT,append,LPAREN,""\n"",RPAREN,SEMI,RBRACE,output,DOT,append,LPAREN,"" | "",RPAREN,DOT,append,LPAREN,oneDotTwoFormat,DOT,format,LPAREN,mapEntry,DOT,getKey,LPAREN,RPAREN,SUB,lastWeight,RPAREN,RPAREN,DOT,append,LPAREN,"" -> "",RPAREN,DOT,append,LPAREN,twoFormat,DOT,format,LPAREN,Math,DOT,round,LPAREN,LPAREN,mapEntry,DOT,getKey,LPAREN,RPAREN,SUB,lastWeight,RPAREN,<MASK>,totalWeight,STAR,100,RPAREN,RPAREN,RPAREN,DOT,append,LPAREN,""%: "",RPAREN,DOT,append,LPAREN,mapEntry,DOT,getValue,LPAREN,RPAREN,RPAREN,SEMI,lastWeight,EQ,mapEntry,DOT,getKey,LPAREN,RPAREN,SEMI,RBRACE,RETURN,output,DOT,toString,LPAREN,RPAREN,SEMI,RBRACE","	public String toPrettyString()
,	{
,		StringBuilder output = new StringBuilder();
,		Double lastWeight = 0D;
,		DecimalFormat oneDotTwoFormat = new DecimalFormat(""0.00"");
,		DecimalFormat twoFormat = new DecimalFormat(""00"");
,
,		<MASK>/ Print out the good stuff
,		for (Map.Entry<Double, E> mapEntry : map.entrySet())
,		{
,			if (output.length() > 0)
,			{
,				output.append(""\n"");
,			}
,
,			output.append("" | "").append(oneDotTwoFormat.format(mapEntry.getKey() - lastWeight)).append("" -> "").append(twoFormat.format(Math.round((mapEntry.getKey() - lastWeight) / totalWeight * 100))).append(""%: "").append(mapEntry.getValue());
,			lastWeight = mapEntry.getKey();
,		}
,
,		return output.toString();
,	}
"
31865c5a-965e-4d07-af21-44a51a00ba58,bbb682d9-5fb9-46a2-9ee7-8499f00e4b90,GT,"PUBLIC,DataColumn,getDataColumnByIndex,LPAREN,int,index,RPAREN,LBRACE,IF,LPAREN,this,DOT,MY_COLUMNS,DOT,size,LPAREN,RPAREN,<MASK>,0,RPAREN,LBRACE,RETURN,this,DOT,MY_COLUMNS,DOT,get,LPAREN,index,RPAREN,SEMI,RBRACE,RETURN,null,SEMI,RBRACE","	public DataColumn getDataColumnByIndex(int index) {
,
,		if (this.MY_COLUMNS.size() <MASK> 0) {
,			return this.MY_COLUMNS.get(index);
,		}
,
,		return null;
,	}
"
a5ecb7e9-82a6-472c-bd23-3a7d67c2868a,7729163a-6288-4da4-8693-04a849df522c,PLUS,"PUBLIC,void,messageTres,LPAREN,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""Cria uma nova mensagem com o par\u00E2metro: "",<MASK>,this,DOT,message,RPAREN,SEMI,RBRACE","    public void messageTres(){
,        System.out.println(""Cria uma nova mensagem com o parâmetro: ""<MASK>this.message);
,    }
"
f462a402-52df-461b-8cf9-98e6a409d284,a3b4eca6-dbdb-43d4-83c9-fbe48795c1e7,STAR,"PRIVATE,STATIC,FINAL,double,getDiv0,LPAREN,double,latitude,RPAREN,LBRACE,RETURN,1.0,SUB,eps2,<MASK>,Math,DOT,pow,LPAREN,Math,DOT,sin,LPAREN,Math,DOT,toRadians,LPAREN,latitude,RPAREN,RPAREN,COMMA,2,RPAREN,SEMI,RBRACE","	private static final double getDiv0(double latitude) {
,		return 1.0 - eps2 <MASK> Math.pow(Math.sin(Math.toRadians(latitude)), 2);
,	}
"
045c9602-1af3-497c-b8cd-2e449d2f2915,463715de-efd3-4838-810e-430155fcb56c,PLUS,"MONKEYS_AT,Override,void,prepare,LPAREN,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""Prepareing "",<MASK>,name,RPAREN,SEMI,dough,EQ,inFactory,DOT,createDough,LPAREN,RPAREN,SEMI,sauce,EQ,inFactory,DOT,createSauce,LPAREN,RPAREN,SEMI,cheese,EQ,inFactory,DOT,createCheese,LPAREN,RPAREN,SEMI,clam,EQ,inFactory,DOT,createClam,LPAREN,RPAREN,SEMI,RBRACE","	@Override
,	void prepare() {
,		System.out.println(""Prepareing "" <MASK> name);
,		
,		dough = inFactory.createDough();
,		sauce = inFactory.createSauce();
,		cheese = inFactory.createCheese();
,		clam = inFactory.createClam();
,		
,	}
"
ceb2d628-7548-4a8f-9594-53a373297866,74b827b8-b2ed-4e52-aa80-9d22f4dfdaf6,LT,"PRIVATE,Segment,LBRACKET,RBRACKET,copySegments,LPAREN,Segment,LBRACKET,RBRACKET,tocopy,RPAREN,LBRACE,Segment,LBRACKET,RBRACKET,copied,EQ,NEW,Segment,LBRACKET,tocopy,DOT,length,RBRACKET,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,tocopy,DOT,length,SEMI,PLUSPLUS,i,RPAREN,LBRACE,copied,LBRACKET,i,RBRACKET,EQ,NEW,Segment,LPAREN,tocopy,LBRACKET,i,RBRACKET,RPAREN,SEMI,RBRACE,RETURN,copied,SEMI,RBRACE","  private Segment[] copySegments(Segment[] tocopy) {
,    Segment[] copied = new Segment[tocopy.length];
,    for (int i = 0; i <MASK> tocopy.length; ++i) {
,      copied[i] = new Segment(tocopy[i]);
,    }
,    return copied;
,  }
"
27817d3e-5449-46fd-a403-1ed403e709bb,feab609b-6728-4796-a871-0eb4f6f096b3,STAR,"PUBLIC,STATIC,TorrentMetaInfo,fromValue,LPAREN,Value,LT,QUES,GT,value,RPAREN,LBRACE,IF,LPAREN,value,EQEQ,null,RPAREN,THROW,NEW,NullPointerException,LPAREN,RPAREN,SEMI,TRY,LBRACE,String,announce,EQ,LPAREN,LPAREN,StringValue,RPAREN,Bencode,DOT,getChildValue,LPAREN,value,COMMA,""announce"",RPAREN,RPAREN,DOT,getStringValue,LPAREN,RPAREN,SEMI,IntegerValue,datev,EQ,LPAREN,IntegerValue,RPAREN,Bencode,DOT,getChildValue,LPAREN,value,COMMA,""creation date"",RPAREN,SEMI,DateTime,creationDate,EQ,null,SEMI,IF,LPAREN,datev,BANGEQ,null,RPAREN,LBRACE,long,dateInstant,EQ,datev,DOT,getValue,LPAREN,RPAREN,DOT,longValue,LPAREN,RPAREN,SEMI,creationDate,EQ,DateTime,DOT,forInstant,LPAREN,dateInstant,<MASK>,1000,COMMA,TimeZone,DOT,getTimeZone,LPAREN,""UTC"",RPAREN,RPAREN,SEMI,RBRACE,StringValue,commv,EQ,LPAREN,StringValue,RPAREN,Bencode,DOT,getChildValue,LPAREN,value,COMMA,""comment"",RPAREN,SEMI,String,comment,EQ,commv,EQEQ,null,QUES,null,COLON,commv,DOT,getStringValue,LPAREN,RPAREN,SEMI,StringValue,crbyv,EQ,LPAREN,StringValue,RPAREN,Bencode,DOT,getChildValue,LPAREN,value,COMMA,""created by"",RPAREN,SEMI,String,createdBy,EQ,crbyv,EQEQ,null,QUES,null,COLON,crbyv,DOT,getStringValue,LPAREN,RPAREN,SEMI,TorrentInfoSection,info,EQ,TorrentInfoSection,DOT,fromValue,LPAREN,Bencode,DOT,getChildValue,LPAREN,value,COMMA,""info"",RPAREN,RPAREN,SEMI,ListValue,annlVal,EQ,LPAREN,ListValue,RPAREN,Bencode,DOT,getChildValue,LPAREN,value,COMMA,""announce-list"",RPAREN,SEMI,List,LT,Set,LT,String,GTGT,announceList,EQ,null,SEMI,IF,LPAREN,annlVal,BANGEQ,null,RPAREN,LBRACE,announceList,EQ,NEW,ArrayList,LT,Set,LT,String,GTGT,LPAREN,RPAREN,SEMI,IF,LPAREN,annlVal,BANGEQ,null,RPAREN,LBRACE,List,LT,Value,LT,QUES,GTGT,annList,EQ,annlVal,DOT,getValue,LPAREN,RPAREN,SEMI,FOR,LPAREN,Value,LT,QUES,GT,annsVal,COLON,annList,RPAREN,LBRACE,List,LT,Value,LT,QUES,GTGT,annSet,EQ,LPAREN,LPAREN,ListValue,RPAREN,annsVal,RPAREN,DOT,getValue,LPAREN,RPAREN,SEMI,Set,LT,String,GT,set,EQ,NEW,HashSet,LT,String,GT,LPAREN,RPAREN,SEMI,FOR,LPAREN,Value,LT,QUES,GT,anneVal,COLON,annSet,RPAREN,LBRACE,set,DOT,add,LPAREN,LPAREN,LPAREN,StringValue,RPAREN,anneVal,RPAREN,DOT,getStringValue,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,announceList,DOT,add,LPAREN,Collections,DOT,unmodifiableSet,LPAREN,set,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,RETURN,NEW,TorrentMetaInfo,LPAREN,info,COMMA,announce,COMMA,announceList,COMMA,creationDate,COMMA,comment,COMMA,createdBy,RPAREN,SEMI,RBRACE,CATCH,LPAREN,Exception,e,RPAREN,LBRACE,THROW,NEW,IllegalArgumentException,LPAREN,e,RPAREN,SEMI,RBRACE,RBRACE","    public static TorrentMetaInfo fromValue (Value<?> value) {
,        if (value == null)
,            throw new NullPointerException();
,
,        try {
,            // Announce
,            String announce = ((StringValue) Bencode.getChildValue(value, ""announce"")).getStringValue();
,
,            // Creation Date (Optional)
,            IntegerValue datev = (IntegerValue) Bencode.getChildValue(value, ""creation date"");
,            DateTime creationDate = null;
,            if (datev != null) {
,                long dateInstant = datev.getValue().longValue();
,                creationDate = DateTime.forInstant(dateInstant <MASK> 1000, TimeZone.getTimeZone(""UTC""));
,            }
,
,            // Comment (Optional)
,            StringValue commv = (StringValue) Bencode.getChildValue(value, ""comment"");
,            String comment = commv == null ? null : commv.getStringValue();
,
,            // Created By (Optional)
,            StringValue crbyv = (StringValue) Bencode.getChildValue(value, ""created by"");
,            String createdBy = crbyv == null ? null : crbyv.getStringValue();
,
,            // Info Section
,            TorrentInfoSection info = TorrentInfoSection.fromValue(Bencode.getChildValue(value, ""info""));
,
,            // Announce List (Optional)
,            ListValue annlVal = (ListValue) Bencode.getChildValue(value, ""announce-list"");
,            List<Set<String>> announceList = null;
,            if (annlVal != null) {
,                announceList = new ArrayList<Set<String>>();
,                if (annlVal != null) {
,                    List<Value<?>> annList = annlVal.getValue();
,                    for (Value<?> annsVal : annList) {
,                        List<Value<?>> annSet = ((ListValue) annsVal).getValue();
,                        Set<String> set = new HashSet<String>();
,                        for (Value<?> anneVal : annSet) {
,                            set.add(((StringValue) anneVal).getStringValue());
,                        }
,                        announceList.add(Collections.unmodifiableSet(set));
,                    }
,                }
,            }
,
,            // Create the object
,            return new TorrentMetaInfo(info, announce, announceList, creationDate, comment, createdBy);
,
,        } catch (Exception e) {
,            throw new IllegalArgumentException(e);
,        }
,    }
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,d10d5db2-8bdf-466e-8592-78a719ca8e0d,LT,"PUBLIC,STATIC,void,fullyZoomIn,LPAREN,RPAREN,LBRACE,FOR,LPAREN,int,k,EQ,0,SEMI,k,<MASK>,15,SEMI,k,PLUSPLUS,RPAREN,LBRACE,proxy,DOT,send,LPAREN,NEW,ProxyMouseWheelMessage,LPAREN,1,RPAREN,RPAREN,SEMI,RBRACE,TRY,LBRACE,Thread,DOT,sleep,LPAREN,2000,RPAREN,SEMI,RBRACE,CATCH,LPAREN,InterruptedException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,RBRACE","	public static void fullyZoomIn() {
,		for (int k = 0; k <MASK> 15; k++) {
,
,			proxy.send(new ProxyMouseWheelMessage(1));
,		}
,		try {
,			Thread.sleep(2000);
,		} catch (InterruptedException e) {
,			e.printStackTrace();
,		}
,	}
"
d71e9d90-d7d7-40b1-b4fa-c5316adcd69a,7f5586f8-d72b-4d5d-9c4d-3f54fa65da58,LTEQ,"PROTECTED,void,copyOutput,LPAREN,FINAL,int,source,COMMA,FINAL,int,dest,COMMA,FINAL,int,layer,RPAREN,LBRACE,FINAL,int,albd,EQ,this,DOT,structure,DOT,layers,LBRACKET,layer,RBRACKET,DOT,arrayslbd,SEMI,FINAL,int,aubd,EQ,this,DOT,structure,DOT,layers,LBRACKET,layer,RBRACKET,DOT,arraysubd,SEMI,FOR,LPAREN,int,i,EQ,albd,SEMI,i,<MASK>,aubd,SEMI,i,PLUSPLUS,RPAREN,LBRACE,FINAL,CellArray,a,EQ,this,DOT,structure,DOT,arrays,LBRACKET,i,RBRACKET,SEMI,IF,LPAREN,a,DOT,celltype,BANGEQ,CellType,DOT,VALUE,RPAREN,LBRACE,DoubleTools,DOT,copy,LPAREN,this,DOT,data,DOT,output,LBRACKET,source,RBRACKET,COMMA,a,DOT,cellslbd,COMMA,this,DOT,data,DOT,output,LBRACKET,dest,RBRACKET,COMMA,a,DOT,cellslbd,COMMA,a,DOT,cellsnum,RPAREN,SEMI,RBRACE,RBRACE,RBRACE","    protected void copyOutput(final int source, final int dest, final int layer) {
,        //
,        // copy output from previous context buffer.
,        //
,        final int albd = this.structure.layers[layer].arrayslbd;
,        final int aubd = this.structure.layers[layer].arraysubd;
,        //
,        for (int i = albd; i <MASK> aubd; i++) {
,            final CellArray a = this.structure.arrays[i];
,            //
,            if (a.celltype != CellType.VALUE) {
,                DoubleTools.copy(
,                    this.data.output[source], a.cellslbd,
,                    this.data.output[dest], a.cellslbd, a.cellsnum
,                );
,                /** /
,                DoubleTools.copy(
,                    this.data.input[source], a.cellslbd,
,                    this.data.input[dest], a.cellslbd, a.cellsnum
,                );
,                /**/
,            }
,        }
,    }
"
811987a2-df8f-411b-b35a-1f251eaec687,a1011a89-3cc3-4bc3-8c0b-ca0203505f4e,SLASH,"PUBLIC,double,getValue,LPAREN,int,k,RPAREN,LBRACE,RETURN,java,DOT,lang,DOT,Math,DOT,exp,LPAREN,SUB,LPAREN,java,DOT,lang,DOT,Math,DOT,pow,LPAREN,k,COMMA,2,RPAREN,RPAREN,<MASK>,LPAREN,2,STAR,r,STAR,r,RPAREN,RPAREN,SEMI,RBRACE","    public double getValue(int k){
,       return java.lang.Math.exp(-(java.lang.Math.pow(k,2))<MASK> (2 * r * r ));
,    }
"
811987a2-df8f-411b-b35a-1f251eaec687,c76ca0a9-3d20-446b-989b-8883b05bb1d3,SLASH,"PUBLIC,STATIC,double,mean,LPAREN,double,LBRACKET,RBRACKET,m,RPAREN,LBRACE,double,sum,EQ,0,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,m,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,sum,PLUSEQ,m,LBRACKET,i,RBRACKET,SEMI,RBRACE,RETURN,LPAREN,sum,<MASK>,m,DOT,length,RPAREN,SEMI,RBRACE","	public static double mean(double[] m) {
,	    double sum = 0;
,	    for (int i = 0; i < m.length; i++) {
,	        sum += m[i];
,	    }
,	    return (sum <MASK> m.length);
,	}
"
41539c05-83ff-49b8-a839-9292483dddc3,78ca8738-b57c-48dd-aa05-26e2a0b8c401,PERCENT,"PUBLIC,void,playAudio,LPAREN,Applet,applet,COMMA,String,clipid,RPAREN,LBRACE,IF,LPAREN,clipstriggered,DOT,containsKey,LPAREN,clipid,RPAREN,RPAREN,RETURN,SEMI,clipstriggered,DOT,put,LPAREN,clipid,COMMA,""yes"",RPAREN,SEMI,playAudio,LPAREN,applet,COMMA,""_unnamed"",PLUS,unnamedchnr,COMMA,clipid,COMMA,false,RPAREN,SEMI,unnamedchnr,EQ,LPAREN,unnamedchnr,PLUS,1,RPAREN,<MASK>,nr_unnamedch,SEMI,RBRACE","	public void playAudio(Applet applet,String clipid) {
,		if (clipstriggered.containsKey(clipid)) return;
,		clipstriggered.put(clipid,""yes"");
,		playAudio(applet,""_unnamed""+unnamedchnr,clipid,false);
,		unnamedchnr = (unnamedchnr+1)<MASK>nr_unnamedch;
,	}
"
789d219f-7383-4fa6-b72d-81f8985229f6,18367298-7e97-4746-a5c1-5728bc157166,EQEQ,"PRIVATE,String,getNextPlayerMessage,LPAREN,Player,player,RPAREN,LBRACE,IF,LPAREN,this,DOT,game,DOT,getGameType,LPAREN,RPAREN,<MASK>,GameType,DOT,ONE_PLAYER,RPAREN,LBRACE,RETURN,""The computer made it's move. Now make yours."",PLUS,player,DOT,getName,LPAREN,RPAREN,SEMI,RBRACE,ELSE,LBRACE,RETURN,""It's your turn."",PLUS,player,DOT,getName,LPAREN,RPAREN,SEMI,RBRACE,RBRACE","        private String getNextPlayerMessage(Player player) {
,        if (this.game.getGameType() <MASK> GameType.ONE_PLAYER) {
,            return ""The computer made it's move. Now make yours.""
,                    + player.getName();
,        } else {
,            return ""It's your turn.""
,                    + player.getName();
,        }
,    }
"
92951106-a87f-4e0c-9019-4852bf22d1be,613153f1-4e0d-477d-9852-51dbd8856358,PLUS,"PUBLIC,void,print,LPAREN,RPAREN,LBRACE,Node,helper,EQ,this,DOT,begin,SEMI,WHILE,LPAREN,helper,BANGEQ,null,RPAREN,LBRACE,System,DOT,out,DOT,print,LPAREN,helper,DOT,value,<MASK>,"" "",RPAREN,SEMI,helper,EQ,helper,DOT,next,SEMI,RBRACE,System,DOT,out,DOT,println,LPAREN,RPAREN,SEMI,RBRACE","    public void print() {
,		Node helper = this.begin;
,		
,		while(helper != null) {
,			System.out.print(helper.value <MASK> "" "");
,			helper = helper.next;
,		}
,		System.out.println();
,	}
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,8a60f4c6-2047-4ceb-8125-0c432302087a,LT,"PUBLIC,void,setValues,LPAREN,INDIElementAndValue,LBRACKET,RBRACKET,elementsAndValues,RPAREN,LBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,elementsAndValues,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,INDIElement,element,EQ,elementsAndValues,LBRACKET,i,RBRACKET,DOT,getElement,LPAREN,RPAREN,SEMI,element,DOT,setValue,LPAREN,elementsAndValues,LBRACKET,i,RBRACKET,DOT,getValue,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,RBRACE","  public void setValues(INDIElementAndValue[] elementsAndValues) {
,    for (int i = 0 ; i <MASK> elementsAndValues.length ; i++) {
,      INDIElement element = elementsAndValues[i].getElement();
,
,      element.setValue(elementsAndValues[i].getValue());
,    }
,  }
"
4efd15d4-7259-49ef-bb2b-8984a1154bd6,bfef13ca-31bb-4d5a-baa9-f05dd3021f0e,LT,"PRIVATE,void,insertTopics,LPAREN,RPAREN,LBRACE,model,EQ,LPAREN,DefaultTableModel,RPAREN,topicstable,DOT,getModel,LPAREN,RPAREN,SEMI,model,DOT,setRowCount,LPAREN,0,RPAREN,SEMI,String,t,SEMI,double,i,SEMI,FOR,LPAREN,int,num,EQ,0,SEMI,num,<MASK>,tmDM,DOT,getTopics,LPAREN,RPAREN,DOT,size,LPAREN,RPAREN,SEMI,num,PLUSPLUS,RPAREN,LBRACE,t,EQ,"""",SEMI,i,EQ,tmDM,DOT,getTopics,LPAREN,RPAREN,DOT,get,LPAREN,num,RPAREN,DOT,getRelevance,LPAREN,RPAREN,SEMI,FOR,LPAREN,String,s,COLON,tmDM,DOT,getTopics,LPAREN,RPAREN,DOT,get,LPAREN,num,RPAREN,DOT,getKeywords,LPAREN,RPAREN,RPAREN,t,EQ,t,DOT,concat,LPAREN,""| "",PLUS,s,PLUS,"" |"",RPAREN,SEMI,model,DOT,addRow,LPAREN,NEW,Object,LBRACKET,RBRACKET,LBRACE,t,COMMA,i,RBRACE,RPAREN,SEMI,RBRACE,RBRACE","    private void insertTopics(){
,       model = (DefaultTableModel)topicstable.getModel();
,       model.setRowCount(0);
,       
,       String t;
,       double i;
,       
,        for(int num = 0; num <MASK> tmDM.getTopics().size(); num++){
,            t = """";
,            i = tmDM.getTopics().get(num).getRelevance();
,
,            for(String s : tmDM.getTopics().get(num).getKeywords())
,                t = t.concat(""| "" + s + "" |"");
,
,            model.addRow(new Object[]{t, i});
,        }
,                
,    }
"
56952896-479b-43e9-a9cf-c3f3bb9afc0e,61df0a9c-a140-4815-90f0-350092da48c8,SUB,"MONKEYS_AT,Test,PUBLIC,void,test_removeUserByUserID,LPAREN,RPAREN,THROWS,Exception,LBRACE,User,newUser,EQ,NEW,User,LPAREN,<MASK>,1,COMMA,""Jim"",COMMA,""321 Test Road"",COMMA,""Columbus"",COMMA,""OH"",COMMA,""43230"",COMMA,""6148881234"",RPAREN,SEMI,int,userId,EQ,uDAO,DOT,createUser,LPAREN,newUser,RPAREN,SEMI,User,testUser,EQ,uDAO,DOT,getUserByUserID,LPAREN,userId,RPAREN,SEMI,assertTrue,LPAREN,""NAME did not match"",COMMA,testUser,DOT,getName,LPAREN,RPAREN,DOT,equalsIgnoreCase,LPAREN,""Jim"",RPAREN,RPAREN,SEMI,assertTrue,LPAREN,""ADDRESS did not match"",COMMA,testUser,DOT,getAddress,LPAREN,RPAREN,DOT,equalsIgnoreCase,LPAREN,""321 Test Road"",RPAREN,RPAREN,SEMI,assertTrue,LPAREN,""CITY did not match"",COMMA,testUser,DOT,getCity,LPAREN,RPAREN,DOT,equalsIgnoreCase,LPAREN,""Columbus"",RPAREN,RPAREN,SEMI,assertTrue,LPAREN,""STATE did not match"",COMMA,testUser,DOT,getState,LPAREN,RPAREN,DOT,equalsIgnoreCase,LPAREN,""OH"",RPAREN,RPAREN,SEMI,assertTrue,LPAREN,""ZIP did not match"",COMMA,testUser,DOT,getZip,LPAREN,RPAREN,DOT,equalsIgnoreCase,LPAREN,""43230"",RPAREN,RPAREN,SEMI,assertTrue,LPAREN,""PHONE did not match"",COMMA,testUser,DOT,getPhone,LPAREN,RPAREN,DOT,equalsIgnoreCase,LPAREN,""6148881234"",RPAREN,RPAREN,SEMI,uDAO,DOT,removeUserByUserID,LPAREN,userId,RPAREN,SEMI,testUser,EQ,uDAO,DOT,getUserByUserID,LPAREN,userId,RPAREN,SEMI,assertNull,LPAREN,""expected no record to be returned (null)"",COMMA,testUser,RPAREN,SEMI,RBRACE","    @Test
,    public void test_removeUserByUserID() throws Exception {
,        User newUser = new User(<MASK>1, ""Jim"", ""321 Test Road"", ""Columbus"", ""OH"",
,                ""43230"", ""6148881234"");
,        int userId = uDAO.createUser(newUser);
,        User testUser = uDAO.getUserByUserID(userId);
,
,        // should exist here
,        assertTrue(""NAME did not match"",
,                testUser.getName().equalsIgnoreCase(""Jim""));
,        assertTrue(""ADDRESS did not match"", testUser.getAddress()
,                .equalsIgnoreCase(""321 Test Road""));
,        assertTrue(""CITY did not match"",
,                testUser.getCity().equalsIgnoreCase(""Columbus""));
,        assertTrue(""STATE did not match"",
,                testUser.getState().equalsIgnoreCase(""OH""));
,        assertTrue(""ZIP did not match"",
,                testUser.getZip().equalsIgnoreCase(""43230""));
,        assertTrue(""PHONE did not match"",
,                testUser.getPhone().equalsIgnoreCase(""6148881234""));
,
,        uDAO.removeUserByUserID(userId);
,        // but not here
,        testUser = uDAO.getUserByUserID(userId);
,        assertNull(""expected no record to be returned (null)"", testUser);
,    }
"
cc05b03d-25f2-41c3-9757-9766a7e6f7c2,d59543fc-6824-486c-aa95-7ea1090422d6,PERCENT,"PUBLIC,STATIC,void,main,LPAREN,String,LBRACKET,RBRACKET,args,RPAREN,THROWS,IOException,LBRACE,Thread,threads,LBRACKET,RBRACKET,EQ,NEW,Thread,LBRACKET,10,RBRACKET,SEMI,Thread,DOT,State,status,LBRACKET,RBRACKET,EQ,NEW,Thread,DOT,State,LBRACKET,10,RBRACKET,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,10,SEMI,i,PLUSPLUS,RPAREN,LBRACE,threads,LBRACKET,i,RBRACKET,EQ,NEW,Thread,LPAREN,NEW,Calculator,LPAREN,i,RPAREN,RPAREN,SEMI,IF,LPAREN,LPAREN,i,<MASK>,2,RPAREN,EQEQ,0,RPAREN,LBRACE,threads,LBRACKET,i,RBRACKET,DOT,setPriority,LPAREN,Thread,DOT,MAX_PRIORITY,RPAREN,SEMI,RBRACE,ELSE,LBRACE,threads,LBRACKET,i,RBRACKET,DOT,setPriority,LPAREN,Thread,DOT,MIN_PRIORITY,RPAREN,SEMI,RBRACE,threads,LBRACKET,i,RBRACKET,DOT,setName,LPAREN,""Thread "",PLUS,i,RPAREN,SEMI,RBRACE,FileWriter,file,EQ,null,SEMI,TRY,LBRACE,file,EQ,NEW,FileWriter,LPAREN,""C:\\Users\\nitinmah\\Documents\\Nitin\\Mss\\out.txt"",RPAREN,SEMI,RBRACE,CATCH,LPAREN,IOException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,BufferedWriter,pw,EQ,NEW,BufferedWriter,LPAREN,file,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,10,SEMI,i,PLUSPLUS,RPAREN,LBRACE,pw,DOT,write,LPAREN,""Main : Status of Thread "",PLUS,i,PLUS,"" : "",PLUS,threads,LBRACKET,i,RBRACKET,DOT,getState,LPAREN,RPAREN,PLUS,""\n"",RPAREN,SEMI,status,LBRACKET,i,RBRACKET,EQ,threads,LBRACKET,i,RBRACKET,DOT,getState,LPAREN,RPAREN,SEMI,RBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,10,SEMI,i,PLUSPLUS,RPAREN,LBRACE,threads,LBRACKET,i,RBRACKET,DOT,start,LPAREN,RPAREN,SEMI,RBRACE,boolean,finish,EQ,false,SEMI,WHILE,LPAREN,BANG,finish,RPAREN,LBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,10,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,threads,LBRACKET,i,RBRACKET,DOT,getState,LPAREN,RPAREN,BANGEQ,status,LBRACKET,i,RBRACKET,RPAREN,LBRACE,writeThreadInfo,LPAREN,pw,COMMA,threads,LBRACKET,i,RBRACKET,COMMA,status,LBRACKET,i,RBRACKET,RPAREN,SEMI,status,LBRACKET,i,RBRACKET,EQ,threads,LBRACKET,i,RBRACKET,DOT,getState,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,finish,EQ,true,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,10,SEMI,i,PLUSPLUS,RPAREN,LBRACE,finish,EQ,finish,AMPAMP,LPAREN,threads,LBRACKET,i,RBRACKET,DOT,getState,LPAREN,RPAREN,EQEQ,State,DOT,TERMINATED,RPAREN,SEMI,RBRACE,RBRACE,pw,DOT,close,LPAREN,RPAREN,SEMI,RBRACE","	public static void main(String[] args) throws IOException {
,		Thread threads[]=new Thread[10];
,	    Thread.State status[]=new Thread.State[10];
,	    
,	    for (int i=0; i<10; i++){
,	        threads[i]=new Thread(new Calculator(i));
,	        if ((i<MASK>2)==0){
,	          threads[i].setPriority(Thread.MAX_PRIORITY);
,	        } else {
,	          threads[i].setPriority(Thread.MIN_PRIORITY);
,	        }
,	        threads[i].setName(""Thread ""+i);
,	      }
,	    
,	    //java.io.FileOutputStream fos = new java.io.FileOutputStream(""c://abc.dat"");		
,		
,	    FileWriter file=null;
,	    //PrintWriter pw;
,	    
,		try {
,			//file = new FileWriter(""C:\\mss\\log.dat"");
,			file = new FileWriter(""C:\\Users\\nitinmah\\Documents\\Nitin\\Mss\\out.txt"");
,			
,		} catch (IOException e) {
,			// TODO Auto-generated catch block
,			e.printStackTrace();
,		}
,		BufferedWriter pw = new BufferedWriter(file);
,		//pw = new PrintWriter(file);	
,		for (int i=0; i<10; i++){
,			pw.write(""Main : Status of Thread ""+i+"" : "" + threads[i].getState() + ""\n"");
,			status[i]=threads[i].getState();
,	     }
,		
,		for (int i=0; i<10; i++){
,	        threads[i].start();
,	      }
,		
,		boolean finish=false;
,	      while (!finish) {
,	        for (int i=0; i<10; i++){
,	          if (threads[i].getState()!=status[i]) {
,	            writeThreadInfo(pw, threads[i],status[i]);
,	            status[i]=threads[i].getState();
,	          }
,	        }      
,	        finish=true;
,	        for (int i=0; i<10; i++){
,	finish=finish &&(threads[i].getState()==State.TERMINATED);
,	        }
,	      }
,	      
,	      
,	      pw.close();
,		
,	    		
,	    		
,	}
"
c694737b-29b6-48d5-90c3-b6e0b6d64d88,4377472e-b1e2-4383-a23b-3d6bf207063e,PERCENT,"double,getPositionOffset,LPAREN,double,row,RPAREN,LBRACE,double,deltaY,EQ,row,<MASK>,2.0,SEMI,IF,LPAREN,deltaY,LTEQ,1.0,SLASH,3.0,RPAREN,LBRACE,RETURN,0,SEMI,RBRACE,IF,LPAREN,deltaY,LTEQ,2.0,SLASH,3.0,RPAREN,LBRACE,RETURN,1.5,STAR,deltaY,SUB,0.5,SEMI,RBRACE,IF,LPAREN,deltaY,LT,4.0,SLASH,3.0,RPAREN,LBRACE,RETURN,0.5,SEMI,RBRACE,IF,LPAREN,deltaY,LT,5.0,SLASH,3.0,RPAREN,LBRACE,RETURN,2.5,SUB,1.5,STAR,deltaY,SEMI,RBRACE,RETURN,0,SEMI,RBRACE","    double getPositionOffset(double row) {
,        double deltaY = row <MASK> 2.0;
,        if (deltaY <= 1.0 / 3.0) {
,            return 0;
,        }
,        if (deltaY <= 2.0 / 3.0) {
,            return 1.5 * deltaY - 0.5;
,        }
,        if (deltaY < 4.0 / 3.0) {
,            return 0.5;
,        }
,        if (deltaY < 5.0 / 3.0) {
,            return 2.5 - 1.5 * deltaY;
,        }
,        return 0;
,    }
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,59ff2147-f935-4316-92bb-816bc13a87b4,BANGEQ,"PUBLIC,STATIC,BufferedImage,drawRealshape,LPAREN,BufferedImage,screenshot,RPAREN,LBRACE,GameStateExtractor,game,EQ,NEW,GameStateExtractor,LPAREN,RPAREN,SEMI,GameStateExtractor,DOT,GameState,state,EQ,game,DOT,getGameState,LPAREN,screenshot,RPAREN,SEMI,IF,LPAREN,state,<MASK>,GameStateExtractor,DOT,GameState,DOT,PLAYING,RPAREN,LBRACE,screenshot,EQ,VisionUtils,DOT,convert2grey,LPAREN,screenshot,RPAREN,SEMI,RETURN,screenshot,SEMI,RBRACE,vision,EQ,NEW,VisionRealShape,LPAREN,screenshot,RPAREN,SEMI,vision,DOT,findObjects,LPAREN,RPAREN,SEMI,vision,DOT,findPigs,LPAREN,RPAREN,SEMI,vision,DOT,findHills,LPAREN,RPAREN,SEMI,vision,DOT,findBirds,LPAREN,RPAREN,SEMI,vision,DOT,findSling,LPAREN,RPAREN,SEMI,vision,DOT,findTrajectory,LPAREN,RPAREN,SEMI,vision,DOT,drawObjectsWithID,LPAREN,screenshot,COMMA,true,RPAREN,SEMI,RETURN,screenshot,SEMI,RBRACE","	public static BufferedImage drawRealshape(BufferedImage screenshot)
,	{
,		// get game state
,		GameStateExtractor game = new GameStateExtractor();
,		GameStateExtractor.GameState state = game.getGameState(screenshot);
,		if (state <MASK> GameStateExtractor.GameState.PLAYING) 
,		{
,			screenshot = VisionUtils.convert2grey(screenshot);
,			return screenshot;
,		}
,	    vision = new VisionRealShape(screenshot);
,		
,	    vision.findObjects();
,		vision.findPigs();
,		vision.findHills();
,		vision.findBirds();
,		vision.findSling();
,		vision.findTrajectory();
,		//vision.drawObjects(screenshot, true);
,		vision.drawObjectsWithID(screenshot, true);
,		
,		return screenshot;
,			
,	}
"
8817b45c-c104-442a-8047-a39e95fe55f2,180ac7d7-2e5b-4dc3-a71c-23f79a9bd91b,LT,"MONKEYS_AT,Override,PUBLIC,void,modelPropertyChange,LPAREN,PropertyChangeEvent,evt,RPAREN,LBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,daysName,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,daysName,LBRACKET,i,RBRACKET,DOT,setText,LPAREN,controller,DOT,getModel,LPAREN,RPAREN,DOT,getDayName,LPAREN,i,RPAREN,RPAREN,SEMI,RBRACE,RBRACE","    @Override
,    public void modelPropertyChange(PropertyChangeEvent evt) {
,    
,        for (int i = 0; i <MASK> daysName.length; i++) {
,            daysName[i].setText(controller.getModel().getDayName(i));
,        }
,    }
"
41539c05-83ff-49b8-a839-9292483dddc3,2c1c1f7a-89ca-4c6f-b9ce-25b4786064f2,PERCENT,"PRIVATE,boolean,onBossLevel,LPAREN,RPAREN,LBRACE,RETURN,LPAREN,stage,PLUS,1,RPAREN,<MASK>,6,EQEQ,0,AMPAMP,stage,GT,0,SEMI,RBRACE","	private boolean onBossLevel() {
,		return (stage + 1) <MASK> 6 == 0 && stage > 0;
,	}
"
41e528e8-032e-4c9c-aedf-8273f5e22315,e2f2d3c5-8054-4110-aa82-f8025b81aed3,PERCENT,"PUBLIC,STATIC,void,main,LPAREN,String,LBRACKET,RBRACKET,args,RPAREN,LBRACE,Scanner,sc,EQ,NEW,Scanner,LPAREN,System,DOT,in,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""Please enter several numbers."",RPAREN,SEMI,int,evenNumbersCounter,EQ,0,SEMI,double,num,SEMI,WHILE,LPAREN,true,RPAREN,LBRACE,num,EQ,sc,DOT,nextInt,LPAREN,RPAREN,SEMI,IF,LPAREN,num,LT,0,RPAREN,LBRACE,BREAK,SEMI,RBRACE,IF,LPAREN,num,<MASK>,2,EQEQ,0,RPAREN,LBRACE,evenNumbersCounter,PLUSPLUS,SEMI,RBRACE,RBRACE,System,DOT,out,DOT,println,LPAREN,""There are "",PLUS,evenNumbersCounter,PLUS,"" even numbers entered."",RPAREN,SEMI,RBRACE","	public static void main(String[] args) {
,		Scanner sc = new Scanner(System.in);
,		System.out.println(""Please enter several numbers."");
,		int evenNumbersCounter = 0;
,		double num;
,
,		while (true) {
,			num = sc.nextInt();
,			if (num < 0) {
,				break;
,			}
,			if (num <MASK> 2 == 0) {
,				evenNumbersCounter++;
,			}
,		}
,		System.out.println(""There are "" + evenNumbersCounter + "" even numbers entered."");
,	}
"
37134524-36c4-486f-85f7-06f1a52cb561,3b5c6e06-82e1-40e1-bedc-eb5be9dd9265,SLASH,"PUBLIC,STATIC,Vector2f,getCenter,LPAREN,RPAREN,LBRACE,RETURN,NEW,Vector2f,LPAREN,Display,DOT,getWidth,LPAREN,RPAREN,<MASK>,2,COMMA,Display,DOT,getHeight,LPAREN,RPAREN,RPAREN,SEMI,RBRACE","    public static Vector2f getCenter(){
,        return new Vector2f(Display.getWidth()<MASK>2, Display.getHeight());
,    }
"
a64abb7e-1e48-4f96-a7b5-816a0922e0f3,0ebeca74-4581-4dc0-a151-f820f4742e46,LTEQ,"PUBLIC,STATIC,int,partition,LPAREN,double,LBRACKET,RBRACKET,input,COMMA,int,LBRACKET,RBRACKET,index,COMMA,int,p,COMMA,int,q,RPAREN,LBRACE,double,x,EQ,input,LBRACKET,p,RBRACKET,SEMI,int,i,EQ,p,SEMI,FOR,LPAREN,int,j,EQ,LPAREN,p,PLUS,1,RPAREN,SEMI,j,<MASK>,q,SEMI,j,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,input,LBRACKET,j,RBRACKET,GTEQ,x,RPAREN,LBRACE,i,EQ,i,PLUS,1,SEMI,IF,LPAREN,i,LT,j,RPAREN,LBRACE,double,t1,EQ,input,LBRACKET,j,RBRACKET,SEMI,input,LBRACKET,j,RBRACKET,EQ,input,LBRACKET,i,RBRACKET,SEMI,input,LBRACKET,i,RBRACKET,EQ,t1,SEMI,int,t2,EQ,index,LBRACKET,j,RBRACKET,SEMI,index,LBRACKET,j,RBRACKET,EQ,index,LBRACKET,i,RBRACKET,SEMI,index,LBRACKET,i,RBRACKET,EQ,t2,SEMI,RBRACE,RBRACE,RBRACE,double,t11,EQ,input,LBRACKET,p,RBRACKET,SEMI,input,LBRACKET,p,RBRACKET,EQ,input,LBRACKET,i,RBRACKET,SEMI,input,LBRACKET,i,RBRACKET,EQ,t11,SEMI,int,t21,EQ,index,LBRACKET,p,RBRACKET,SEMI,index,LBRACKET,p,RBRACKET,EQ,index,LBRACKET,i,RBRACKET,SEMI,index,LBRACKET,i,RBRACKET,EQ,t21,SEMI,RETURN,i,SEMI,RBRACE","    public static int partition(double[] input, int[] index, int p, int q) {
,		
,		double x = input[p];
,		int i = p;
,		for (int j = (p + 1); j <MASK> q; j++) {
,			if (input[j] >= x) { 
,				i = i + 1;
,				if(i < j){
,					double t1 = input[j];
,					input[j] = input[i];
,					input[i] = t1;
,					
,					int t2 = index[j];
,					index[j] = index[i];
,					index[i] = t2;
,					
,				}
,			}
,		}
,		double t11 = input[p];
,		input[p] = input[i];
,		input[i] = t11;
,		
,		int t21 = index[p];
,		index[p] = index[i];
,		index[i] = t21;
,		
,		
,		return i;
,	}
"
68422d14-68e8-42b7-9437-f6891889f4fc,5431e577-dc8f-4031-ba22-1299adf71e9b,PERCENT,"PUBLIC,TimeDuration,subtract,LPAREN,TimeDuration,t,RPAREN,LBRACE,TimeDuration,newTime,EQ,NEW,TimeDuration,LPAREN,this,RPAREN,SEMI,newTime,DOT,minutes,SUBEQ,t,DOT,minutes,SEMI,newTime,DOT,hour,SUBEQ,t,DOT,hour,SEMI,IF,LPAREN,newTime,DOT,hour,LT,0,RPAREN,RETURN,null,SEMI,IF,LPAREN,newTime,DOT,minutes,LT,0,RPAREN,LBRACE,newTime,DOT,hour,PLUSEQ,newTime,DOT,minutes,SLASH,60,SUB,1,SEMI,IF,LPAREN,newTime,DOT,hour,LT,0,RPAREN,RETURN,null,SEMI,newTime,DOT,minutes,EQ,60,PLUS,newTime,DOT,minutes,<MASK>,60,SEMI,RBRACE,RETURN,newTime,SEMI,RBRACE","	public TimeDuration subtract(TimeDuration t) {
,		TimeDuration newTime = new TimeDuration(this);
,		newTime.minutes -= t.minutes;
,		newTime.hour -= t.hour;
,		if(newTime.hour < 0) return null;
,		if(newTime.minutes < 0) {
,			newTime.hour += newTime.minutes/60 - 1;
,			if(newTime.hour < 0)return null;
,			newTime.minutes = 60 + newTime.minutes<MASK>60; 
,		}
,		return newTime;
,	}
"
ce409cfa-d5ce-4a2d-98f1-b91cf6798c84,21733ac9-640a-4ab8-9f3d-ee32831e1796,GT,"MONKEYS_AT,Override,PUBLIC,void,update,LPAREN,float,dt,RPAREN,LBRACE,timeElapsed,PLUSEQ,dt,SEMI,IF,LPAREN,timeElapsed,<MASK>,0.3f,RPAREN,LBRACE,frameNumber,PLUSPLUS,SEMI,timeElapsed,EQ,0,SEMI,RBRACE,RBRACE","	@Override
,	public void update(float dt) {
,		timeElapsed += dt;
,		if (timeElapsed <MASK> 0.3f) {//0.1 for desktop, dekstop less, like 0.05
,			frameNumber++;
,			timeElapsed = 0;
,		}		
,	}
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,028f1f9a-ae4a-4e81-bb5b-e038ca132b0f,SUB,"PUBLIC,void,keyPressed,LPAREN,KeyEvent,key,RPAREN,LBRACE,IF,LPAREN,key,DOT,getKeyCode,LPAREN,RPAREN,EQEQ,KeyEvent,DOT,VK_ENTER,RPAREN,LBRACE,_parent,DOT,setVisible,LPAREN,false,RPAREN,SEMI,_parent,DOT,dispose,LPAREN,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,key,DOT,getKeyCode,LPAREN,RPAREN,EQEQ,KeyEvent,DOT,VK_D,RPAREN,LBRACE,String,imgFilename,EQ,saveFileDir,PLUS,String,DOT,format,LPAREN,""img%04d.png"",COMMA,_saveCount,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""saving image to "",PLUS,imgFilename,RPAREN,SEMI,BufferedImage,bi,EQ,NEW,BufferedImage,LPAREN,_img,DOT,getWidth,LPAREN,null,RPAREN,COMMA,_img,DOT,getHeight,LPAREN,null,RPAREN,COMMA,BufferedImage,DOT,TYPE_INT_ARGB,RPAREN,SEMI,Graphics2D,g2d,EQ,bi,DOT,createGraphics,LPAREN,RPAREN,SEMI,g2d,DOT,drawImage,LPAREN,_img,COMMA,0,COMMA,0,COMMA,null,RPAREN,SEMI,g2d,DOT,dispose,LPAREN,RPAREN,SEMI,TRY,LBRACE,ImageIO,DOT,write,LPAREN,bi,COMMA,""png"",COMMA,NEW,File,LPAREN,imgFilename,RPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,IOException,e,RPAREN,LBRACE,System,DOT,err,DOT,println,LPAREN,""failed to save image "",PLUS,imgFilename,RPAREN,SEMI,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,IF,LPAREN,_meta,BANGEQ,null,RPAREN,LBRACE,String,metaFilename,EQ,String,DOT,format,LPAREN,""meta%04d.txt"",COMMA,_saveCount,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""saving meta-data to "",PLUS,metaFilename,RPAREN,SEMI,TRY,LBRACE,PrintWriter,ofs,EQ,NEW,PrintWriter,LPAREN,NEW,FileWriter,LPAREN,metaFilename,RPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,_meta,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,FOR,LPAREN,int,j,EQ,0,SEMI,j,LT,_meta,LBRACKET,i,RBRACKET,DOT,length,SEMI,j,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,j,GT,0,RPAREN,ofs,DOT,print,LPAREN, ,RPAREN,SEMI,ofs,DOT,print,LPAREN,_meta,LBRACKET,i,RBRACKET,LBRACKET,j,RBRACKET,RPAREN,SEMI,RBRACE,ofs,DOT,println,LPAREN,RPAREN,SEMI,RBRACE,ofs,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,IOException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,_saveCount,PLUSEQ,1,SEMI,RBRACE,RBRACE,ELSE,IF,LPAREN,key,DOT,getKeyCode,LPAREN,RPAREN,EQEQ,KeyEvent,DOT,VK_H,RPAREN,LBRACE,IF,LPAREN,_highlightMode,RPAREN,LBRACE,_highlightMode,EQ,false,SEMI,this,DOT,repaint,LPAREN,RPAREN,SEMI,RBRACE,ELSE,LBRACE,_highlightMode,EQ,true,SEMI,_highlightIndex,EQ,<MASK>,1,SEMI,RBRACE,RBRACE,ELSE,IF,LPAREN,key,DOT,getKeyCode,LPAREN,RPAREN,EQEQ,KeyEvent,DOT,VK_S,RPAREN,LBRACE,String,imgFilename,EQ,String,DOT,format,LPAREN,""img%04d.png"",COMMA,_saveCount,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""saving image to "",PLUS,imgFilename,RPAREN,SEMI,BufferedImage,bi,EQ,NEW,BufferedImage,LPAREN,_img,DOT,getWidth,LPAREN,null,RPAREN,COMMA,_img,DOT,getHeight,LPAREN,null,RPAREN,COMMA,BufferedImage,DOT,TYPE_INT_ARGB,RPAREN,SEMI,Graphics2D,g2d,EQ,bi,DOT,createGraphics,LPAREN,RPAREN,SEMI,g2d,DOT,drawImage,LPAREN,_img,COMMA,0,COMMA,0,COMMA,null,RPAREN,SEMI,g2d,DOT,dispose,LPAREN,RPAREN,SEMI,TRY,LBRACE,ImageIO,DOT,write,LPAREN,bi,COMMA,""png"",COMMA,NEW,File,LPAREN,imgFilename,RPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,IOException,e,RPAREN,LBRACE,System,DOT,err,DOT,println,LPAREN,""failed to save image "",PLUS,imgFilename,RPAREN,SEMI,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,_saveCount,PLUSEQ,1,SEMI,RBRACE,IF,LPAREN,bWaitingForKey,RPAREN,LBRACE,bWaitingForKey,EQ,false,SEMI,RETURN,SEMI,RBRACE,RBRACE","        public void keyPressed(KeyEvent key) {
,            // process key
,        
,            if (key.getKeyCode() == KeyEvent.VK_ENTER) {
,                _parent.setVisible(false);
,                _parent.dispose();
,
,            } 
,            else if (key.getKeyCode() == KeyEvent.VK_D) {
,            	
,	                String imgFilename = saveFileDir + String.format(""img%04d.png"", _saveCount);
,	                System.out.println(""saving image to "" + imgFilename);
,	                BufferedImage bi = new BufferedImage(_img.getWidth(null), _img.getHeight(null), BufferedImage.TYPE_INT_ARGB);
,	                Graphics2D g2d = bi.createGraphics();
,	                g2d.drawImage(_img, 0, 0, null);
,	                g2d.dispose();
,	                try {
,	                    ImageIO.write(bi, ""png"", new File(imgFilename));
,	                } catch (IOException e) {
,	                    System.err.println(""failed to save image "" + imgFilename);
,	                    e.printStackTrace();
,	                }
,	
,	                if (_meta != null) {
,		                    String metaFilename = String.format(""meta%04d.txt"", _saveCount);
,		                    System.out.println(""saving meta<MASK>data to "" + metaFilename);
,		                    try {
,		                        PrintWriter ofs = new PrintWriter(new FileWriter(metaFilename));
,		                        for (int i = 0; i < _meta.length; i++) {
,		                            for (int j = 0; j < _meta[i].length; j++) {
,		                                if (j > 0) ofs.print(' ');
,		                                ofs.print(_meta[i][j]);
,		                            }
,		                            ofs.println();
,		                        }
,		                        ofs.close();
,		                        
,		                    } catch (IOException e) {
,		                        e.printStackTrace();
,		                    }
,		                
,		                _saveCount += 1;
,	                }
,	            } else if (key.getKeyCode() == KeyEvent.VK_H) {
,	                // toggle highlight mode
,	                if (_highlightMode) {
,	                    _highlightMode = false;
,	                    this.repaint();
,	                } else {
,	                    _highlightMode = true;
,	                    _highlightIndex = -1;
,	                }
,
,
,            } else if (key.getKeyCode() == KeyEvent.VK_S) 
,            {
,                String imgFilename = String.format(""img%04d.png"", _saveCount);
,                System.out.println(""saving image to "" + imgFilename);
,                BufferedImage bi = new BufferedImage(_img.getWidth(null), _img.getHeight(null), BufferedImage.TYPE_INT_ARGB);
,                Graphics2D g2d = bi.createGraphics();
,                g2d.drawImage(_img, 0, 0, null);
,                g2d.dispose();
,                try {
,                    ImageIO.write(bi, ""png"", new File(imgFilename));
,                } catch (IOException e) {
,                    System.err.println(""failed to save image "" + imgFilename);
,                    e.printStackTrace();
,                }
,                _saveCount += 1;
,            }
,
,            // check if usercode is waiting for a keypress
,            if (bWaitingForKey) {
,                bWaitingForKey = false;
,                return;
,            }
,        }
"
2dd830d4-e85f-41ec-b5a4-78a5402d9efb,9b1662ae-f7ab-4c22-8ac6-215dd6d08ac3,SUB,"PUBLIC,STATIC,String,toString,LPAREN,Object,obj,RPAREN,LBRACE,String,ret,EQ,"""",SEMI,IF,LPAREN,obj,INSTANCEOF,JsonObject,RPAREN,LBRACE,HashMap,LT,String,COMMA,Object,GT,map,EQ,LPAREN,LPAREN,JsonObject,RPAREN,obj,RPAREN,DOT,getMap,LPAREN,RPAREN,SEMI,FOR,LPAREN,Entry,LT,String,COMMA,Object,GT,entry,COLON,map,DOT,entrySet,LPAREN,RPAREN,RPAREN,LBRACE,ret,PLUSEQ,""{KEY("",PLUS,entry,DOT,getKey,LPAREN,RPAREN,PLUS,"") / VALUE("",PLUS,toString,LPAREN,entry,DOT,getValue,LPAREN,RPAREN,RPAREN,PLUS,"")}"",SEMI,RBRACE,RBRACE,ELSE,IF,LPAREN,obj,INSTANCEOF,Object,LBRACKET,RBRACKET,RPAREN,LBRACE,Object,LBRACKET,RBRACKET,arr,EQ,LPAREN,Object,LBRACKET,RBRACKET,RPAREN,obj,SEMI,ret,PLUSEQ,""["",SEMI,FOR,LPAREN,Object,o,COLON,arr,RPAREN,ret,PLUSEQ,toString,LPAREN,o,RPAREN,PLUS,"","",SEMI,ret,DOT,substring,LPAREN,0,COMMA,ret,DOT,length,LPAREN,RPAREN,<MASK>,1,RPAREN,SEMI,ret,PLUSEQ,""]"",SEMI,RBRACE,ELSE,ret,PLUSEQ,LPAREN,String,RPAREN,obj,PLUS,""*"",PLUS,LPAREN,obj,EQEQ,null,QUES,""*NULL*"",COLON,obj,DOT,getClass,LPAREN,RPAREN,DOT,getSimpleName,LPAREN,RPAREN,RPAREN,PLUS,""*"",SEMI,RETURN,ret,SEMI,RBRACE","	public static String toString(Object obj) {
,		String ret = """";
,		if(obj instanceof JsonObject) {
,			HashMap<String, Object> map = ((JsonObject) obj).getMap();
,			for (Entry<String, Object> entry : map.entrySet())
,			{	
,				ret += ""{KEY("" + entry.getKey() + "") / VALUE("" + toString(entry.getValue()) + "")}"";
,			}
,		} else if(obj instanceof Object[]) {
,			Object[] arr = (Object[]) obj;
,			ret += ""["";
,			for(Object o : arr) 
,				ret += toString(o) + "","";
,			ret.substring(0, ret.length()<MASK>1);
,			ret += ""]"";
,		}
,		else 
,			ret += (String) obj + ""*"" + (obj == null ? ""*NULL*"" : obj.getClass().getSimpleName() )+ ""*"";
,		return ret;
,	}
"
73f99f48-ab14-4590-9781-8e43c05bc3ab,72222c8c-617a-44cc-9908-da6ef4b94cbe,LTEQ,"PUBLIC,boolean,accept,LPAREN,HackResult,hr,RPAREN,LBRACE,int,l,EQ,hr,DOT,getLevel,LPAREN,RPAREN,SEMI,RETURN,LPAREN,l,GTEQ,2,RPAREN,AMPAMP,LPAREN,l,<MASK>,6,RPAREN,SEMI,RBRACE","            public boolean accept(HackResult hr) {
,            int l = hr.getLevel();
,            return (l >= 2) && ( l <MASK> 6 );
,            }
"
31865c5a-965e-4d07-af21-44a51a00ba58,5cf7fbe5-93c2-4512-b4cd-cb08e0f4c66f,GT,"PUBLIC,File,copyInputStream2File,LPAREN,File,fileToCopy,COMMA,InputStream,fis,RPAREN,THROWS,FileNotFoundException,COMMA,IOException,LBRACE,DataOutputStream,out,EQ,NEW,DataOutputStream,LPAREN,NEW,BufferedOutputStream,LPAREN,NEW,FileOutputStream,LPAREN,fileToCopy,RPAREN,RPAREN,RPAREN,SEMI,int,m,SEMI,WHILE,LPAREN,LPAREN,m,EQ,fis,DOT,read,LPAREN,RPAREN,RPAREN,<MASK>,SUB,1,RPAREN,LBRACE,out,DOT,writeByte,LPAREN,m,RPAREN,SEMI,RBRACE,fis,DOT,close,LPAREN,RPAREN,SEMI,out,DOT,close,LPAREN,RPAREN,SEMI,RETURN,fileToCopy,SEMI,RBRACE","	public File copyInputStream2File(File fileToCopy, InputStream fis)
,			throws FileNotFoundException, IOException {
,		DataOutputStream out = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(fileToCopy)));
,		int m;
,
,		while((m = fis.read()) <MASK> -1){
,		
,			out.writeByte(m);
,		
,		}
,		fis.close();
,		out.close();
,		
,		return fileToCopy;
,	}
"
09478113-8f39-4146-870b-8037a6932443,1d338acb-baea-4eb2-af9e-2808d0cb351c,EQEQ,"PRIVATE,void,OP_ROL,LPAREN,RPAREN,LBRACE,int,iMem,EQ,readOperand,LPAREN,RPAREN,SEMI,int,iVal,EQ,int8,LPAREN,LPAREN,iMem,LTLT,1,RPAREN,BAR,LPAREN,getCFlag,LPAREN,RPAREN,QUES,01,COLON,00,RPAREN,RPAREN,SEMI,setCFlag,LPAREN,getBit,LPAREN,iMem,COMMA,7,RPAREN,RPAREN,SEMI,setNFlag,LPAREN,getBit,LPAREN,iVal,COMMA,7,RPAREN,RPAREN,SEMI,setZFlag,LPAREN,iVal,<MASK>,0,RPAREN,SEMI,writeOperand,LPAREN,iVal,RPAREN,SEMI,RBRACE","    private void OP_ROL()
,    {
,        int iMem = readOperand();
,        int iVal = int8((iMem << 1) | (getCFlag() ? 0x01 : 0x00));
,
,        setCFlag(getBit(iMem, 7));
,        setNFlag(getBit(iVal, 7));
,        setZFlag(iVal <MASK> 0);
,
,        writeOperand(iVal);
,    }
"
7a6d4ee7-a11c-445d-8f58-7963e611bee0,52d52867-e7a3-4f8d-b0e5-d84b161ee0fa,BANGEQ,"PUBLIC,void,actionPerformed,LPAREN,ActionEvent,arg0,RPAREN,LBRACE,cancelled,EQ,true,SEMI,IF,LPAREN,download,<MASK>,null,AMPAMP,download,DOT,getStatus,LPAREN,RPAREN,EQEQ,Download,DOT,DOWNLOADING,RPAREN,LBRACE,download,DOT,cancel,LPAREN,RPAREN,SEMI,RETURN,SEMI,RBRACE,IF,LPAREN,getDefaultCloseOperation,LPAREN,RPAREN,EQEQ,DO_NOTHING_ON_CLOSE,RPAREN,LBRACE,RETURN,SEMI,RBRACE,NEW,Thread,LPAREN,NEW,Runnable,LPAREN,RPAREN,LBRACE,PUBLIC,void,run,LPAREN,RPAREN,LBRACE,TRY,LBRACE,Thread,DOT,sleep,LPAREN,500,RPAREN,SEMI,RBRACE,CATCH,LPAREN,InterruptedException,e,RPAREN,LBRACE,RBRACE,IF,LPAREN,getDefaultCloseOperation,LPAREN,RPAREN,EQEQ,DISPOSE_ON_CLOSE,RPAREN,LBRACE,dispose,LPAREN,RPAREN,SEMI,RETURN,SEMI,RBRACE,System,DOT,exit,LPAREN,1,RPAREN,SEMI,RBRACE,RBRACE,RPAREN,DOT,start,LPAREN,RPAREN,SEMI,RBRACE","			public void actionPerformed(ActionEvent arg0)
,			{
,				cancelled = true;
,				if(download <MASK> null && download.getStatus() == Download.DOWNLOADING)
,				{
,					download.cancel();
,					return;
,				}
,				
,				if(getDefaultCloseOperation() == DO_NOTHING_ON_CLOSE)
,				{
,					return;
,				}
,				
,				new Thread(new Runnable()
,				{
,					public void run() 
,					{
,						try 
,						{
,							Thread.sleep(500);
,						} 
,						catch (InterruptedException e) {}
,						
,						if(getDefaultCloseOperation() == DISPOSE_ON_CLOSE)
,						{
,							dispose();
,							return;
,						}
,						System.exit(1);
,					}
,				}).start();
,			}
"
31865c5a-965e-4d07-af21-44a51a00ba58,31d08a12-b6c2-46bb-a750-83b7f6bb84ed,STAR,"MONKEYS_AT,Override,PUBLIC,String,evaluatePolicy,LPAREN,float,max_risk,COMMA,TransferredFile,policyFileToTransfer,COMMA,TransferredFile,dbSQLDumpFileToTransfer,COMMA,String,table_name,RPAREN,LBRACE,Random,generator,EQ,NEW,Random,LPAREN,System,DOT,currentTimeMillis,LPAREN,RPAREN,RPAREN,SEMI,long,gid,EQ,generator,DOT,nextLong,LPAREN,RPAREN,SEMI,IF,LPAREN,gid,LT,0,RPAREN,gid,EQ,gid,<MASK>,LPAREN,SUB,1,RPAREN,SEMI,TempFiles,tf,EQ,NEW,TempFiles,LPAREN,RPAREN,SEMI,File,dbDumpTempFile,EQ,null,SEMI,File,policyTempFile,EQ,null,SEMI,TRY,LBRACE,dbDumpTempFile,EQ,tf,DOT,createTempFile,LPAREN,dbSQLDumpFileToTransfer,RPAREN,SEMI,policyTempFile,EQ,tf,DOT,createTempFile,LPAREN,policyFileToTransfer,RPAREN,SEMI,dbDumpTempFile,DOT,deleteOnExit,LPAREN,RPAREN,SEMI,policyTempFile,DOT,deleteOnExit,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,IOException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,dba_factory,DOT,evaluatePolicy,LPAREN,policyTempFile,COMMA,dbDumpTempFile,COMMA,null,COMMA,gid,COMMA,table_name,COMMA,false,RPAREN,SEMI,RETURN,""ID: --"",PLUS,gid,PLUS,""--"",SEMI,RBRACE","	@Override
,	public String evaluatePolicy(float max_risk,
,			TransferredFile policyFileToTransfer,
,			TransferredFile dbSQLDumpFileToTransfer, String table_name){
,
,		Random generator = new Random(System.currentTimeMillis());
,		
,		//Generates the ID which will be associated to the evaluation
,		long gid = generator.nextLong();
,		if(gid<0)
,			gid = gid<MASK>(-1);
,
,		TempFiles tf = new TempFiles();
,		File dbDumpTempFile = null;
,		File policyTempFile = null;
,		try{
,			dbDumpTempFile = tf.createTempFile(dbSQLDumpFileToTransfer);
,			policyTempFile = tf.createTempFile(policyFileToTransfer);
,			
,			dbDumpTempFile.deleteOnExit();
,			policyTempFile.deleteOnExit();
,		}
,		catch(IOException e){
,			e.printStackTrace();
,		}
,		
,		dba_factory.evaluatePolicy(policyTempFile, dbDumpTempFile, null, gid, table_name, false);
,
,				return ""ID: --""+gid+""--"";
,	}
"
65bbdf26-4bb0-4d1d-b8be-f9564513b40d,7f5799db-142b-4ae5-943c-69e831cf9970,GT,"PUBLIC,STATIC,int,getRandomElement,LPAREN,IntIndexedContainer,arr,COMMA,RandomDataGenerator,random,RPAREN,LBRACE,int,e,EQ,arr,DOT,get,LPAREN,0,RPAREN,SEMI,IF,LPAREN,arr,DOT,size,LPAREN,RPAREN,<MASK>,1,RPAREN,LBRACE,int,rand,EQ,random,DOT,nextInt,LPAREN,0,COMMA,arr,DOT,size,LPAREN,RPAREN,SUB,1,RPAREN,SEMI,e,EQ,arr,DOT,get,LPAREN,rand,RPAREN,SEMI,RBRACE,RETURN,e,SEMI,RBRACE","	public static int getRandomElement(IntIndexedContainer arr, RandomDataGenerator random) {
,		int e = arr.get(0);
,		if (arr.size() <MASK> 1) {
,			int rand = random.nextInt(0, arr.size() - 1);
,			e = arr.get(rand);
,		}
,		return e;
,	}
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,d6f521a8-3aab-45f4-a306-4708822b302c,BANGEQ,"PROTECTED,boolean,isBLOBAccepted,LPAREN,String,deviceName,COMMA,String,propertyName,RPAREN,LBRACE,DevicePropertyBLOBEnableTuple,aux,EQ,getBLOBEnableRule,LPAREN,deviceName,COMMA,propertyName,RPAREN,SEMI,IF,LPAREN,aux,<MASK>,null,RPAREN,LBRACE,IF,LPAREN,aux,DOT,getBLOBEnable,LPAREN,RPAREN,EQEQ,BLOBEnables,DOT,NEVER,RPAREN,LBRACE,RETURN,false,SEMI,RBRACE,ELSE,LBRACE,RETURN,true,SEMI,RBRACE,RBRACE,aux,EQ,getBLOBEnableRule,LPAREN,deviceName,RPAREN,SEMI,IF,LPAREN,aux,EQEQ,null,RPAREN,LBRACE,RETURN,false,SEMI,RBRACE,IF,LPAREN,aux,DOT,getBLOBEnable,LPAREN,RPAREN,EQEQ,BLOBEnables,DOT,NEVER,RPAREN,LBRACE,RETURN,false,SEMI,RBRACE,RETURN,true,SEMI,RBRACE","  protected boolean isBLOBAccepted(String deviceName, String propertyName) {
,    DevicePropertyBLOBEnableTuple aux = getBLOBEnableRule(deviceName, propertyName);
,    
,    if (aux <MASK> null) {
,      if (aux.getBLOBEnable() == BLOBEnables.NEVER) {
,        return false; 
,      } else {
,        return true; 
,      }
,    }
,    
,    aux = getBLOBEnableRule(deviceName);
,    
,    if (aux == null) {
,      return false;
,    }
,    
,    if (aux.getBLOBEnable() == BLOBEnables.NEVER) {
,      return false; 
,    }
,    
,    return true;
,  }
"
ad0a2aad-9ad8-443c-832f-88b9f64460ed,b99d4407-311a-4f67-b9a6-9f2faaa3d0d6,EQ,"PUBLIC,DriveSolenoid,LPAREN,RPAREN,LBRACE,solenoid,<MASK>,NEW,DoubleSolenoid,LPAREN,RobotMap,DOT,driveSolenoidPorts,LBRACKET,0,RBRACKET,COMMA,RobotMap,DOT,driveSolenoidPorts,LBRACKET,1,RBRACKET,RPAREN,SEMI,solenoid,DOT,set,LPAREN,DoubleSolenoid,DOT,Value,DOT,kReverse,RPAREN,SEMI,RBRACE","    public DriveSolenoid() {
,        solenoid <MASK> new DoubleSolenoid(RobotMap.driveSolenoidPorts[0], RobotMap.driveSolenoidPorts[1]);
,        solenoid.set(DoubleSolenoid.Value.kReverse);
,    }
"
5735492c-ae75-4373-9d1e-6986d063d859,cefd650c-ba90-4c29-b914-23e8b537562b,LT,"MONKEYS_AT,Override,PUBLIC,void,run,LPAREN,RPAREN,LBRACE,TRY,LBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,20,SEMI,i,PLUSPLUS,RPAREN,LBRACE,staticInt,PLUSPLUS,SEMI,IF,LPAREN,staticInt,EQEQ,10,RPAREN,LBRACE,Thread,DOT,sleep,LPAREN,5000,RPAREN,SEMI,RBRACE,System,DOT,err,DOT,println,LPAREN,""["",PLUS,Thread,DOT,currentThread,LPAREN,RPAREN,DOT,getId,LPAREN,RPAREN,PLUS,""]\u5F53i="",PLUS,i,PLUS,""\u83B7\u53D6staticInt \u7684\u503C:"",PLUS,staticInt,RPAREN,SEMI,RBRACE,RBRACE,CATCH,LPAREN,InterruptedException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,RBRACE","	@Override
,	public void run() {
,		try {
,			for (int i = 0; i <MASK> 20; i++) {
,				staticInt++;
,				// 时刻修改着静态变量staticInt的值，第二个线程进来，staticInt就为10了
,				if (staticInt == 10) {
,					Thread.sleep(5000);
,				}
,				System.err.println(""["" + Thread.currentThread().getId() + ""]当i="" + i + ""获取staticInt 的值:"" + staticInt);
,			}
,		} catch (InterruptedException e) {
,			e.printStackTrace();
,		}
,	}
"
dd0b8baf-c022-4efa-99dd-425e9c39b04c,6f5313cb-4cdb-4c94-96fa-052ff1010818,SLASH,"MONKEYS_AT,Override,PUBLIC,boolean,mouseClicked,LPAREN,int,mouseButton,COMMA,int,mouseX,COMMA,int,mouseY,RPAREN,LBRACE,IF,LPAREN,BANG,this,DOT,enabled,BARBAR,mouseButton,BANGEQ,0,RPAREN,LBRACE,RETURN,false,SEMI,RBRACE,IF,LPAREN,mouseX,GTEQ,this,DOT,posX,AMPAMP,mouseX,LTEQ,this,DOT,posX,PLUS,this,DOT,width,AMPAMP,mouseY,GTEQ,this,DOT,posY,AMPAMP,mouseY,LTEQ,this,DOT,posY,PLUS,this,DOT,height,RPAREN,LBRACE,IF,LPAREN,mouseX,LT,this,DOT,posX,PLUS,this,DOT,width,SUB,20,RPAREN,LBRACE,int,index,EQ,LPAREN,mouseY,SUB,this,DOT,posY,RPAREN,<MASK>,20,PLUS,this,DOT,scroll,SEMI,IF,LPAREN,index,GT,this,DOT,elements,DOT,size,LPAREN,RPAREN,SUB,1,RPAREN,LBRACE,RETURN,false,SEMI,RBRACE,this,DOT,selectedIndex,EQ,index,SEMI,RBRACE,ELSE,LBRACE,RBRACE,RETURN,true,SEMI,RBRACE,RETURN,false,SEMI,RBRACE","    @Override
,    public boolean mouseClicked(int mouseButton, int mouseX, int mouseY) {
,        if (!this.enabled || mouseButton != 0) {
,            return false;
,        }
,
,        if (mouseX >= this.posX && mouseX <= this.posX + this.width && mouseY >= this.posY && mouseY <= this.posY + this.height) {
,            if (mouseX < this.posX + this.width - 20) {
,                int index = (mouseY - this.posY) <MASK> 20 + this.scroll;
,                if (index > this.elements.size() - 1) {
,                    return false;
,                }
,                this.selectedIndex = index;
,            }
,            else {
,                // Scroll Bar
,                // int index = (mouseY - this.posY + this.scroll) / 20;
,            }
,            return true;
,        }
,
,        return false;
,    }
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,252fc9f3-5527-4601-bb6b-2a31f9df32ea,BANGEQ,"PUBLIC,STATIC,List,LT,Point,GT,PolyCorners,LPAREN,ABObject,ob,RPAREN,LBRACE,int,LBRACKET,RBRACKET,x,EQ,LBRACE,RBRACE,SEMI,int,LBRACKET,RBRACKET,y,EQ,LBRACE,RBRACE,SEMI,List,LT,Point,GT,poly,EQ,NEW,ArrayList,LT,Point,GT,LPAREN,RPAREN,SEMI,IF,LPAREN,ob,DOT,getType,LPAREN,RPAREN,<MASK>,ABType,DOT,Hill,AMPAMP,BANG,ob,DOT,IsAngular,LPAREN,RPAREN,AMPAMP,ob,DOT,shape,EQEQ,ABShape,DOT,Poly,RPAREN,LBRACE,x,EQ,NEW,int,LBRACKET,RBRACKET,LBRACE,LPAREN,int,RPAREN,ob,DOT,getMinX,LPAREN,RPAREN,COMMA,LPAREN,int,RPAREN,ob,DOT,getMaxX,LPAREN,RPAREN,COMMA,LPAREN,int,RPAREN,ob,DOT,getMaxX,LPAREN,RPAREN,COMMA,LPAREN,int,RPAREN,ob,DOT,getMinX,LPAREN,RPAREN,RBRACE,SEMI,y,EQ,NEW,int,LBRACKET,RBRACKET,LBRACE,LPAREN,int,RPAREN,ob,DOT,getMinY,LPAREN,RPAREN,COMMA,LPAREN,int,RPAREN,ob,DOT,getMinY,LPAREN,RPAREN,COMMA,LPAREN,int,RPAREN,ob,DOT,getMaxY,LPAREN,RPAREN,COMMA,LPAREN,int,RPAREN,ob,DOT,getMaxY,LPAREN,RPAREN,RBRACE,SEMI,RBRACE,ELSE,IF,LPAREN,ob,DOT,shape,EQEQ,ABShape,DOT,Rect,RPAREN,LBRACE,x,EQ,NEW,int,LBRACKET,RBRACKET,LBRACE,LPAREN,int,RPAREN,ob,DOT,getMinX,LPAREN,RPAREN,COMMA,LPAREN,int,RPAREN,ob,DOT,getMaxX,LPAREN,RPAREN,COMMA,LPAREN,int,RPAREN,ob,DOT,getMaxX,LPAREN,RPAREN,COMMA,LPAREN,int,RPAREN,ob,DOT,getMinX,LPAREN,RPAREN,RBRACE,SEMI,y,EQ,NEW,int,LBRACKET,RBRACKET,LBRACE,LPAREN,int,RPAREN,ob,DOT,getMinY,LPAREN,RPAREN,COMMA,LPAREN,int,RPAREN,ob,DOT,getMinY,LPAREN,RPAREN,COMMA,LPAREN,int,RPAREN,ob,DOT,getMaxY,LPAREN,RPAREN,COMMA,LPAREN,int,RPAREN,ob,DOT,getMaxY,LPAREN,RPAREN,RBRACE,SEMI,RBRACE,ELSE,IF,LPAREN,ob,DOT,shape,EQEQ,ABShape,DOT,Triangle,BARBAR,ob,DOT,shape,EQEQ,ABShape,DOT,Poly,RPAREN,LBRACE,Poly,triangle,EQ,LPAREN,Poly,RPAREN,ob,SEMI,x,EQ,triangle,DOT,polygon,DOT,xpoints,SEMI,y,EQ,triangle,DOT,polygon,DOT,ypoints,SEMI,RBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,x,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,Point,p,EQ,NEW,Point,LPAREN,x,LBRACKET,i,RBRACKET,COMMA,y,LBRACKET,i,RBRACKET,RPAREN,SEMI,poly,DOT,add,LPAREN,p,RPAREN,SEMI,RBRACE,RETURN,poly,SEMI,RBRACE","    public static List<Point> PolyCorners (ABObject ob)
,    {
,    	int[] x = {};
,    	int[] y = {};
,    	List<Point> poly = new ArrayList<Point>();
,    	
,    	// Fix the error in render regular rectangle
,    	if (ob.getType() <MASK> ABType.Hill && !ob.IsAngular() && ob.shape == ABShape.Poly)
,    	{
,    		x = new int[]{(int)ob.getMinX(), (int)ob.getMaxX(), (int)ob.getMaxX(), (int)ob.getMinX()};
,    		y = new int[]{(int)ob.getMinY(), (int)ob.getMinY(), (int)ob.getMaxY(), (int)ob.getMaxY()};
,    	}
,    	
,    	// Rectangle
,    	else if (ob.shape == ABShape.Rect)
,    	{
,    		x = new int[]{(int)ob.getMinX(), (int)ob.getMaxX(), (int)ob.getMaxX(), (int)ob.getMinX()};
,			y = new int[]{(int)ob.getMinY(), (int)ob.getMinY(), (int)ob.getMaxY(), (int)ob.getMaxY()};
,    	}
,    	
,    	// Triangle or Polygon
,    	else if (ob.shape == ABShape.Triangle || ob.shape == ABShape.Poly)
,    	{
,    		Poly triangle = (Poly)ob;
,    		x = triangle.polygon.xpoints;
,    		y = triangle.polygon.ypoints;
,    	}
,    	
,    	for (int i = 0; i < x.length; i++)
,    	{
,    		Point p = new Point(x[i], y[i]);
,    		poly.add(p);
,    	}
,    	
,    	return poly;
,    }
"
113c5414-6c55-466b-b879-a350ab6e0ca2,f5d3332f-4bb4-4bc2-a030-b5be21f201ec,EQ,"PROTECTED,void,setPlayerSpawn,LPAREN,Point,spawn,RPAREN,LBRACE,this,DOT,playerSpawn,<MASK>,spawn,SEMI,RBRACE","	protected void setPlayerSpawn(Point spawn){
,		this.playerSpawn <MASK> spawn;
,	}
"
113c5414-6c55-466b-b879-a350ab6e0ca2,7d69efa1-eb4f-4cc0-8c9a-a88f758523cb,EQ,"PUBLIC,Holdable,removeTopItem,LPAREN,RPAREN,LBRACE,Holdable,item,<MASK>,items,DOT,getTopItem,LPAREN,RPAREN,SEMI,TRY,LBRACE,items,DOT,removeItem,LPAREN,item,DOT,getID,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,InvalidKeyException,e,RPAREN,LBRACE,RBRACE,RETURN,item,SEMI,RBRACE","	public Holdable removeTopItem() {
,		Holdable item <MASK> items.getTopItem();
,		try {
,			items.removeItem(item.getID());
,		} catch (InvalidKeyException e) {
,			// Shouldn't be possible, since we just got that item
,		}
,		return item;
,	}
"
2dd830d4-e85f-41ec-b5a4-78a5402d9efb,b6b5d7ca-6fca-460f-9ad6-4335c9c6db09,SUB,"PRIVATE,void,initPanels,LPAREN,ArrayList,LT,JavaFestivalPlayer,GT,festivalPlayers,COMMA,int,currentPlayerIndex,COMMA,String,festivalHashKey,RPAREN,LBRACE,centerPanel,EQ,NEW,JPanel,LPAREN,RPAREN,SEMI,centerPanel,DOT,setPreferredSize,LPAREN,NEW,Dimension,LPAREN,560,COMMA,560,RPAREN,RPAREN,SEMI,centerPanel,DOT,setLayout,LPAREN,NEW,BorderLayout,LPAREN,RPAREN,RPAREN,SEMI,centerPanel,DOT,setBackground,LPAREN,NEW,Color,LPAREN,61,COMMA,114,COMMA,15,RPAREN,RPAREN,SEMI,add,LPAREN,centerPanel,COMMA,BorderLayout,DOT,CENTER,RPAREN,SEMI,JLabel,festivalCard,EQ,palaceLabel,LPAREN,imageSourceHashMap,DOT,get,LPAREN,""label_"",PLUS,festivalHashKey,RPAREN,RPAREN,SEMI,festivalCard,DOT,setBorder,LPAREN,BorderFactory,DOT,createEmptyBorder,LPAREN,0,COMMA,125,COMMA,0,COMMA,125,RPAREN,RPAREN,SEMI,centerPanel,DOT,add,LPAREN,festivalCard,COMMA,BorderLayout,DOT,CENTER,RPAREN,SEMI,int,size,EQ,festivalPlayers,DOT,size,LPAREN,RPAREN,SEMI,players,EQ,NEW,ArrayList,LT,HoldFestivalPlayerPanel,GT,LPAREN,size,RPAREN,SEMI,playedCardsPanels,EQ,NEW,JPanel,LBRACKET,4,RBRACKET,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,size,SEMI,PLUSPLUS,i,RPAREN,LBRACE,players,DOT,add,LPAREN,NEW,HoldFestivalPlayerPanel,LPAREN,this,COMMA,i,COMMA,festivalPlayers,DOT,get,LPAREN,i,RPAREN,DOT,getName,LPAREN,RPAREN,COMMA,festivalPlayers,DOT,get,LPAREN,i,RPAREN,DOT,getColor,LPAREN,RPAREN,COMMA,festivalPlayers,DOT,get,LPAREN,i,RPAREN,DOT,getNumPalaceCards,LPAREN,RPAREN,COMMA,imageSourceHashMap,RPAREN,RPAREN,SEMI,IF,LPAREN,i,EQEQ,0,RPAREN,LBRACE,playedCardsPanels,LBRACKET,i,RBRACKET,EQ,NEW,JPanel,LPAREN,RPAREN,SEMI,add,LPAREN,players,DOT,get,LPAREN,i,RPAREN,COMMA,BorderLayout,DOT,NORTH,RPAREN,SEMI,playedCardsPanels,LBRACKET,i,RBRACKET,DOT,setPreferredSize,LPAREN,NEW,Dimension,LPAREN,500,COMMA,120,RPAREN,RPAREN,SEMI,centerPanel,DOT,add,LPAREN,playedCardsPanels,LBRACKET,i,RBRACKET,COMMA,BorderLayout,DOT,NORTH,RPAREN,SEMI,playedCardsPanels,LBRACKET,i,RBRACKET,DOT,setBackground,LPAREN,NEW,Color,LPAREN,79,COMMA,148,COMMA,19,RPAREN,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,i,EQEQ,1,RPAREN,LBRACE,playedCardsPanels,LBRACKET,i,RBRACKET,EQ,NEW,JPanel,LPAREN,RPAREN,SEMI,add,LPAREN,players,DOT,get,LPAREN,i,RPAREN,COMMA,BorderLayout,DOT,EAST,RPAREN,SEMI,playedCardsPanels,LBRACKET,i,RBRACKET,DOT,setPreferredSize,LPAREN,NEW,Dimension,LPAREN,120,COMMA,500,RPAREN,RPAREN,SEMI,centerPanel,DOT,add,LPAREN,playedCardsPanels,LBRACKET,i,RBRACKET,COMMA,BorderLayout,DOT,EAST,RPAREN,SEMI,playedCardsPanels,LBRACKET,i,RBRACKET,DOT,setBackground,LPAREN,NEW,Color,LPAREN,79,COMMA,148,COMMA,19,RPAREN,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,i,EQEQ,2,RPAREN,LBRACE,playedCardsPanels,LBRACKET,i,RBRACKET,EQ,NEW,JPanel,LPAREN,RPAREN,SEMI,add,LPAREN,players,DOT,get,LPAREN,i,RPAREN,COMMA,BorderLayout,DOT,SOUTH,RPAREN,SEMI,playedCardsPanels,LBRACKET,i,RBRACKET,DOT,setPreferredSize,LPAREN,NEW,Dimension,LPAREN,500,COMMA,120,RPAREN,RPAREN,SEMI,centerPanel,DOT,add,LPAREN,playedCardsPanels,LBRACKET,i,RBRACKET,COMMA,BorderLayout,DOT,SOUTH,RPAREN,SEMI,playedCardsPanels,LBRACKET,i,RBRACKET,DOT,setBackground,LPAREN,NEW,Color,LPAREN,79,COMMA,148,COMMA,19,RPAREN,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,i,EQEQ,3,RPAREN,LBRACE,playedCardsPanels,LBRACKET,i,RBRACKET,EQ,NEW,JPanel,LPAREN,RPAREN,SEMI,add,LPAREN,players,DOT,get,LPAREN,i,RPAREN,COMMA,BorderLayout,DOT,WEST,RPAREN,SEMI,playedCardsPanels,LBRACKET,i,RBRACKET,DOT,setPreferredSize,LPAREN,NEW,Dimension,LPAREN,120,COMMA,500,RPAREN,RPAREN,SEMI,centerPanel,DOT,add,LPAREN,playedCardsPanels,LBRACKET,i,RBRACKET,COMMA,BorderLayout,DOT,WEST,RPAREN,SEMI,playedCardsPanels,LBRACKET,i,RBRACKET,DOT,setBackground,LPAREN,NEW,Color,LPAREN,79,COMMA,148,COMMA,19,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,IF,LPAREN,size,LT,4,RPAREN,LBRACE,FOR,LPAREN,int,i,EQ,1,SEMI,i,LT,4,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,playedCardsPanels,LBRACKET,i,RBRACKET,EQEQ,null,RPAREN,LBRACE,JPanel,emptyPlayer,EQ,NEW,HoldFestivalPlayerPanel,LPAREN,i,RPAREN,SEMI,playedCardsPanels,LBRACKET,i,RBRACKET,EQ,NEW,JPanel,LPAREN,RPAREN,SEMI,IF,LPAREN,i,EQEQ,1,RPAREN,LBRACE,add,LPAREN,emptyPlayer,COMMA,BorderLayout,DOT,EAST,RPAREN,SEMI,playedCardsPanels,LBRACKET,i,RBRACKET,DOT,setPreferredSize,LPAREN,NEW,Dimension,LPAREN,120,COMMA,500,RPAREN,RPAREN,SEMI,centerPanel,DOT,add,LPAREN,playedCardsPanels,LBRACKET,i,RBRACKET,COMMA,BorderLayout,DOT,EAST,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,i,EQEQ,2,RPAREN,LBRACE,add,LPAREN,emptyPlayer,COMMA,BorderLayout,DOT,SOUTH,RPAREN,SEMI,playedCardsPanels,LBRACKET,i,RBRACKET,DOT,setPreferredSize,LPAREN,NEW,Dimension,LPAREN,500,COMMA,120,RPAREN,RPAREN,SEMI,centerPanel,DOT,add,LPAREN,playedCardsPanels,LBRACKET,i,RBRACKET,COMMA,BorderLayout,DOT,SOUTH,RPAREN,SEMI,RBRACE,ELSE,LBRACE,add,LPAREN,emptyPlayer,COMMA,BorderLayout,DOT,WEST,RPAREN,SEMI,playedCardsPanels,LBRACKET,i,RBRACKET,DOT,setPreferredSize,LPAREN,NEW,Dimension,LPAREN,120,COMMA,500,RPAREN,RPAREN,SEMI,centerPanel,DOT,add,LPAREN,playedCardsPanels,LBRACKET,i,RBRACKET,COMMA,BorderLayout,DOT,WEST,RPAREN,SEMI,RBRACE,playedCardsPanels,LBRACKET,i,RBRACKET,DOT,setBackground,LPAREN,NEW,Color,LPAREN,79,COMMA,148,COMMA,19,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,IF,LPAREN,currentPlayerIndex,GT,<MASK>,1,RPAREN,players,DOT,get,LPAREN,currentPlayerIndex,RPAREN,DOT,setCurrentPlayer,LPAREN,RPAREN,SEMI,ELSE,LBRACE,System,DOT,out,DOT,println,LPAREN,""cannot start festival"",RPAREN,SEMI,RBRACE,RBRACE","	private void initPanels(ArrayList<JavaFestivalPlayer> festivalPlayers, int currentPlayerIndex, String festivalHashKey){
,		centerPanel = new JPanel();
,		centerPanel.setPreferredSize(new Dimension(560, 560));
,		centerPanel.setLayout(new BorderLayout());
,		centerPanel.setBackground(new Color(61, 114, 15));
,		add(centerPanel, BorderLayout.CENTER);
,		
,		JLabel festivalCard = palaceLabel(imageSourceHashMap.get(""label_""+festivalHashKey));
,		festivalCard.setBorder(BorderFactory.createEmptyBorder(0, 125, 0, 125));
,		
,		centerPanel.add(festivalCard, BorderLayout.CENTER);
,
,		//init player panels and add them to the panel
,		int size = festivalPlayers.size();
,		players = new ArrayList<HoldFestivalPlayerPanel>(size);
,		playedCardsPanels = new JPanel[4];
,		for(int i = 0; i < size; ++i){
,			players.add(new HoldFestivalPlayerPanel(this, i, festivalPlayers.get(i).getName(), festivalPlayers.get(i).getColor(), festivalPlayers.get(i).getNumPalaceCards(), imageSourceHashMap));
,			if(i == 0){
,				playedCardsPanels[i] = new JPanel();
,				add(players.get(i), BorderLayout.NORTH);
,				playedCardsPanels[i].setPreferredSize(new Dimension(500, 120));
,				centerPanel.add(playedCardsPanels[i], BorderLayout.NORTH);
,				playedCardsPanels[i].setBackground(new Color(79, 148, 19));
,			}
,			else if (i == 1){
,				playedCardsPanels[i] = new JPanel();
,				add(players.get(i), BorderLayout.EAST);
,				playedCardsPanels[i].setPreferredSize(new Dimension(120, 500));
,				centerPanel.add(playedCardsPanels[i], BorderLayout.EAST);
,				playedCardsPanels[i].setBackground(new Color(79, 148, 19));
,			}
,			else if (i == 2){
,				playedCardsPanels[i] = new JPanel();
,				add(players.get(i), BorderLayout.SOUTH);
,				playedCardsPanels[i].setPreferredSize(new Dimension(500, 120));
,				centerPanel.add(playedCardsPanels[i], BorderLayout.SOUTH);
,				playedCardsPanels[i].setBackground(new Color(79, 148, 19));
,			}
,			else if(i == 3){
,				playedCardsPanels[i] = new JPanel();
,				add(players.get(i), BorderLayout.WEST);
,				playedCardsPanels[i].setPreferredSize(new Dimension(120, 500));
,				centerPanel.add(playedCardsPanels[i], BorderLayout.WEST);
,				playedCardsPanels[i].setBackground(new Color(79, 148, 19));
,			}
,			
,		}
,		if(size < 4){
,			for(int i = 1; i < 4; i++){
,				if(playedCardsPanels[i] == null){
,					JPanel emptyPlayer = new HoldFestivalPlayerPanel(i);
,					playedCardsPanels[i] = new JPanel();
,					if(i == 1){
,						add(emptyPlayer, BorderLayout.EAST);
,						playedCardsPanels[i].setPreferredSize(new Dimension(120, 500));
,						centerPanel.add(playedCardsPanels[i], BorderLayout.EAST);
,					}
,					else if (i == 2){
,						add(emptyPlayer, BorderLayout.SOUTH);
,						playedCardsPanels[i].setPreferredSize(new Dimension(500, 120));
,						centerPanel.add(playedCardsPanels[i], BorderLayout.SOUTH);
,					}
,					else{
,						add(emptyPlayer, BorderLayout.WEST);
,						playedCardsPanels[i].setPreferredSize(new Dimension(120, 500));
,						centerPanel.add(playedCardsPanels[i], BorderLayout.WEST);
,					}
,					playedCardsPanels[i].setBackground(new Color(79, 148, 19));
,				}
,			}
,		}
,		
,		//set currentIndex as the one who is selected
,		if(currentPlayerIndex > <MASK>1)
,			players.get(currentPlayerIndex).setCurrentPlayer();
,		else{
,			System.out.println(""cannot start festival"");
,		}
,	}
"
09478113-8f39-4146-870b-8037a6932443,5fbb05dc-a24e-4357-9348-ecf63da357a3,EQEQ,"PRIVATE,void,OP_TAX,LPAREN,RPAREN,LBRACE,setNFlag,LPAREN,getBit,LPAREN,getA,LPAREN,RPAREN,COMMA,7,RPAREN,RPAREN,SEMI,setZFlag,LPAREN,getA,LPAREN,RPAREN,<MASK>,0,RPAREN,SEMI,setX,LPAREN,getA,LPAREN,RPAREN,RPAREN,SEMI,RBRACE","    private void OP_TAX()
,    {
,        setNFlag(getBit(getA(), 7));
,        setZFlag(getA() <MASK> 0);
,
,        setX(getA());
,    }
"
113c5414-6c55-466b-b879-a350ab6e0ca2,1d72e0b8-5afd-4626-9ce8-262862c226a4,EQ,"PUBLIC,void,removeSentient,LPAREN,Sentient,sentient,RPAREN,LBRACE,int,index,<MASK>,sentientQueue,DOT,indexOf,LPAREN,sentient,RPAREN,SEMI,sentientQueue,DOT,remove,LPAREN,index,RPAREN,SEMI,timeQueue,DOT,remove,LPAREN,index,RPAREN,SEMI,RBRACE","	public void removeSentient(Sentient sentient) {
,		int index <MASK> sentientQueue.indexOf(sentient);
,		sentientQueue.remove(index);
,		timeQueue.remove(index);
,	}
"
ad0a2aad-9ad8-443c-832f-88b9f64460ed,96ff4666-edd3-4a06-a64f-83a4a4433c82,EQ,"PROTECTED,void,end,LPAREN,RPAREN,LBRACE,IF,LPAREN,BANG,feederSolenoid,DOT,isSetIn,LPAREN,RPAREN,RPAREN,LBRACE,feeder,DOT,isIn,<MASK>,false,SEMI,RBRACE,SmartDashboard,DOT,putBoolean,LPAREN,""ShooterIsIn"",COMMA,feeder,DOT,isIn,RPAREN,SEMI,RBRACE","    protected void end() {
,        if(!feederSolenoid.isSetIn()) {
,            feeder.isIn <MASK> false;
,        }
,        SmartDashboard.putBoolean(""ShooterIsIn"", feeder.isIn);
,    }
"
31f7469d-93db-41f2-893b-7e4f5668accc,06969cd0-3d4e-463e-8585-158de10752bc,SUB,"PUBLIC,STATIC,void,alphabetize,LPAREN,RPAREN,LBRACE,alphabetized_index,EQ,LPAREN,ArrayList,LT,int,LBRACKET,RBRACKET,GT,RPAREN,index,DOT,clone,LPAREN,RPAREN,SEMI,boolean,done,EQ,false,SEMI,WHILE,LPAREN,BANG,done,RPAREN,LBRACE,done,EQ,true,SEMI,FOR,LPAREN,int,j,EQ,0,SEMI,j,LT,alphabetized_index,DOT,size,LPAREN,RPAREN,<MASK>,1,SEMI,j,PLUSPLUS,RPAREN,LBRACE,int,LBRACKET,RBRACKET,pos_A,EQ,alphabetized_index,DOT,get,LPAREN,j,RPAREN,SEMI,int,LBRACKET,RBRACKET,pos_B,EQ,alphabetized_index,DOT,get,LPAREN,j,PLUS,1,RPAREN,SEMI,String,A,EQ,NEW,String,LPAREN,characters,DOT,get,LPAREN,pos_A,LBRACKET,LINE,RBRACKET,RPAREN,RPAREN,DOT,substring,LPAREN,pos_A,LBRACKET,CHAR,RBRACKET,RPAREN,SEMI,String,B,EQ,NEW,String,LPAREN,characters,DOT,get,LPAREN,pos_B,LBRACKET,LINE,RBRACKET,RPAREN,RPAREN,DOT,substring,LPAREN,pos_B,LBRACKET,CHAR,RBRACKET,RPAREN,SEMI,IF,LPAREN,A,DOT,compareTo,LPAREN,B,RPAREN,GT,0,RPAREN,LBRACE,Collections,DOT,swap,LPAREN,alphabetized_index,COMMA,j,COMMA,j,PLUS,1,RPAREN,SEMI,done,EQ,false,SEMI,RBRACE,RBRACE,RBRACE,RBRACE","    public static void alphabetize() {
,        alphabetized_index = (ArrayList<int[]>) index.clone();
,        boolean done = false;
,
,        while (!done) { //such efficiency
,            done = true; 
,            for (int j = 0; j < alphabetized_index.size() <MASK> 1; j++) { //much speeed
,                int[] pos_A = alphabetized_index.get(j); 
,                int[] pos_B = alphabetized_index.get(j + 1);
,                
,                String A = new String(characters.get(pos_A[LINE])).substring(pos_A[CHAR]);
,                String B = new String(characters.get(pos_B[LINE])).substring(pos_B[CHAR]);
,
,                if (A.compareTo(B) > 0) { //so complexity
,                    Collections.swap(alphabetized_index, j, j+1); //wow
,                    done = false;
,                }
,            }
,        }
,    }
"
ea91ca9d-c4a2-44a2-9a1f-e35ca896736e,dbe7a9f4-be4d-4200-b80d-7d01ce28b145,LTEQ,"PUBLIC,char,next,LPAREN,RPAREN,THROWS,JSONException,LBRACE,int,c,SEMI,IF,LPAREN,this,DOT,usePrevious,RPAREN,LBRACE,this,DOT,usePrevious,EQ,false,SEMI,c,EQ,this,DOT,previous,SEMI,RBRACE,ELSE,LBRACE,TRY,LBRACE,c,EQ,this,DOT,reader,DOT,read,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,IOException,exception,RPAREN,LBRACE,THROW,NEW,JSONException,LPAREN,exception,RPAREN,SEMI,RBRACE,IF,LPAREN,c,<MASK>,0,RPAREN,LBRACE,this,DOT,eof,EQ,true,SEMI,c,EQ,0,SEMI,RBRACE,RBRACE,this,DOT,index,PLUSEQ,1,SEMI,IF,LPAREN,this,DOT,previous,EQEQ,
,RPAREN,LBRACE,this,DOT,line,PLUSEQ,1,SEMI,this,DOT,character,EQ,c,EQEQ,
,QUES,0,COLON,1,SEMI,RBRACE,ELSE,IF,LPAREN,c,EQEQ,
,RPAREN,LBRACE,this,DOT,line,PLUSEQ,1,SEMI,this,DOT,character,EQ,0,SEMI,RBRACE,ELSE,LBRACE,this,DOT,character,PLUSEQ,1,SEMI,RBRACE,this,DOT,previous,EQ,LPAREN,char,RPAREN,c,SEMI,RETURN,this,DOT,previous,SEMI,RBRACE","    public char next() throws JSONException {
,        int c;
,        if (this.usePrevious) {
,            this.usePrevious = false;
,            c = this.previous;
,        } else {
,            try {
,                c = this.reader.read();
,            } catch (IOException exception) {
,                throw new JSONException(exception);
,            }
,
,            if (c <MASK> 0) { // End of stream
,                this.eof = true;
,                c = 0;
,            }
,        }
,        this.index += 1;
,        if (this.previous == '\r') {
,            this.line += 1;
,            this.character = c == '\n' ? 0 : 1;
,        } else if (c == '\n') {
,            this.line += 1;
,            this.character = 0;
,        } else {
,            this.character += 1;
,        }
,        this.previous = (char) c;
,        return this.previous;
,    }
"
2171d474-c7ae-45f9-a2ad-aefcd5d5ec31,81c275dc-8a07-47c8-b160-f1156a8bb9b3,PERCENT,"MONKEYS_AT,Override,PUBLIC,void,handleAnnounceResponse,LPAREN,Map,LT,String,COMMA,BEValue,GT,answer,RPAREN,LBRACE,TRY,LBRACE,IF,LPAREN,BANG,answer,DOT,containsKey,LPAREN,""peers"",RPAREN,RPAREN,LBRACE,RETURN,SEMI,RBRACE,TRY,LBRACE,List,LT,BEValue,GT,peers,EQ,answer,DOT,get,LPAREN,""peers"",RPAREN,DOT,getList,LPAREN,RPAREN,SEMI,logger,DOT,debug,LPAREN,""Got tracker response with "",PLUS,peers,DOT,size,LPAREN,RPAREN,PLUS,"" peer(s)."",RPAREN,SEMI,FOR,LPAREN,BEValue,peerInfo,COLON,peers,RPAREN,LBRACE,Map,LT,String,COMMA,BEValue,GT,info,EQ,peerInfo,DOT,getMap,LPAREN,RPAREN,SEMI,TRY,LBRACE,byte,LBRACKET,RBRACKET,peerId,EQ,info,DOT,get,LPAREN,""peer id"",RPAREN,DOT,getBytes,LPAREN,RPAREN,SEMI,String,ip,EQ,NEW,String,LPAREN,info,DOT,get,LPAREN,""ip"",RPAREN,DOT,getBytes,LPAREN,RPAREN,COMMA,Torrent,DOT,BYTE_ENCODING,RPAREN,SEMI,int,port,EQ,info,DOT,get,LPAREN,""port"",RPAREN,DOT,getInt,LPAREN,RPAREN,SEMI,this,DOT,processAnnouncedPeer,LPAREN,peerId,COMMA,ip,COMMA,port,RPAREN,SEMI,RBRACE,CATCH,LPAREN,NullPointerException,npe,RPAREN,LBRACE,THROW,NEW,ParseException,LPAREN,""Missing field from peer "",PLUS,""information in tracker response!"",COMMA,0,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,CATCH,LPAREN,InvalidBEncodingException,ibee,RPAREN,LBRACE,byte,LBRACKET,RBRACKET,data,EQ,answer,DOT,get,LPAREN,""peers"",RPAREN,DOT,getBytes,LPAREN,RPAREN,SEMI,int,nPeers,EQ,data,DOT,length,SLASH,6,SEMI,IF,LPAREN,data,DOT,length,<MASK>,6,BANGEQ,0,RPAREN,LBRACE,THROW,NEW,InvalidBEncodingException,LPAREN,""Invalid peers "",PLUS,""binary information string!"",RPAREN,SEMI,RBRACE,ByteBuffer,peers,EQ,ByteBuffer,DOT,wrap,LPAREN,data,RPAREN,SEMI,logger,DOT,debug,LPAREN,""Got compact tracker response with "",PLUS,nPeers,PLUS,"" peer(s)."",RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,nPeers,SEMI,i,PLUSPLUS,RPAREN,LBRACE,byte,LBRACKET,RBRACKET,ipBytes,EQ,NEW,byte,LBRACKET,4,RBRACKET,SEMI,peers,DOT,get,LPAREN,ipBytes,RPAREN,SEMI,String,ip,EQ,InetAddress,DOT,getByAddress,LPAREN,ipBytes,RPAREN,DOT,getHostAddress,LPAREN,RPAREN,SEMI,int,port,EQ,LPAREN,FF,AMP,LPAREN,int,RPAREN,peers,DOT,get,LPAREN,RPAREN,RPAREN,LTLT,8,BAR,LPAREN,FF,AMP,LPAREN,int,RPAREN,peers,DOT,get,LPAREN,RPAREN,RPAREN,SEMI,this,DOT,processAnnouncedPeer,LPAREN,null,COMMA,ip,COMMA,port,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,CATCH,LPAREN,UnknownHostException,uhe,RPAREN,LBRACE,logger,DOT,warn,LPAREN,""Invalid compact tracker response!"",COMMA,uhe,RPAREN,SEMI,RBRACE,CATCH,LPAREN,ParseException,pe,RPAREN,LBRACE,logger,DOT,warn,LPAREN,""Invalid tracker response!"",COMMA,pe,RPAREN,SEMI,RBRACE,CATCH,LPAREN,InvalidBEncodingException,ibee,RPAREN,LBRACE,logger,DOT,warn,LPAREN,""Invalid tracker response!"",COMMA,ibee,RPAREN,SEMI,RBRACE,CATCH,LPAREN,UnsupportedEncodingException,uee,RPAREN,LBRACE,logger,DOT,error,LPAREN,uee,DOT,getMessage,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,RBRACE","	@Override
,	public void handleAnnounceResponse(Map<String, BEValue> answer) {
,		try {
,			if (!answer.containsKey(""peers"")) {
,				// No peers returned by the tracker. Apparently we're alone on
,				// this one for now.
,				return;
,			}
,
,			try {
,				List<BEValue> peers = answer.get(""peers"").getList();
,				logger.debug(""Got tracker response with "" + peers.size() +
,						"" peer(s)."");
,				for (BEValue peerInfo : peers) {
,					Map<String, BEValue> info = peerInfo.getMap();
,
,					try {
,						byte[] peerId = info.get(""peer id"").getBytes();
,						String ip = new String(info.get(""ip"").getBytes(),
,								Torrent.BYTE_ENCODING);
,						int port = info.get(""port"").getInt();
,						this.processAnnouncedPeer(peerId, ip, port);
,					} catch (NullPointerException npe) {
,						throw new ParseException(""Missing field from peer "" +
,								""information in tracker response!"", 0);
,					}
,				}
,			} catch (InvalidBEncodingException ibee) {
,				byte[] data = answer.get(""peers"").getBytes();
,				int nPeers = data.length / 6;
,				if (data.length <MASK> 6 != 0) {
,					throw new InvalidBEncodingException(""Invalid peers "" +
,							""binary information string!"");
,				}
,
,				ByteBuffer peers = ByteBuffer.wrap(data);
,				logger.debug(""Got compact tracker response with "" + nPeers +
,						"" peer(s)."");
,
,				for (int i=0; i < nPeers ; i++) {
,					byte[] ipBytes = new byte[4];
,					peers.get(ipBytes);
,					String ip = InetAddress.getByAddress(ipBytes)
,						.getHostAddress();
,					int port = (0xFF & (int)peers.get()) << 8
,						| (0xFF & (int)peers.get());
,					this.processAnnouncedPeer(null, ip, port);
,				}
,			}
,		} catch (UnknownHostException uhe) {
,			logger.warn(""Invalid compact tracker response!"", uhe);
,		} catch (ParseException pe) {
,			logger.warn(""Invalid tracker response!"", pe);
,		} catch (InvalidBEncodingException ibee) {
,			logger.warn(""Invalid tracker response!"", ibee);
,		} catch (UnsupportedEncodingException uee) {
,			logger.error(uee.getMessage());
,		}
,	}
"
92951106-a87f-4e0c-9019-4852bf22d1be,9801ba0c-89f0-4f16-9e57-6373a9eef4f4,PLUS,"PUBLIC,STATIC,int,select,LPAREN,int,LBRACKET,RBRACKET,a,COMMA,int,k,RPAREN,LBRACE,int,lo,EQ,0,COMMA,hi,EQ,a,DOT,length,SUB,1,SEMI,WHILE,LPAREN,hi,GT,lo,RPAREN,LBRACE,int,i,EQ,partition,LPAREN,a,COMMA,lo,COMMA,hi,RPAREN,SEMI,IF,LPAREN,i,GT,k,RPAREN,hi,EQ,i,SUB,1,SEMI,ELSE,IF,LPAREN,i,LT,k,RPAREN,lo,EQ,i,<MASK>,1,SEMI,ELSE,RETURN,a,LBRACKET,i,RBRACKET,SEMI,RBRACE,RETURN,a,LBRACKET,lo,RBRACKET,SEMI,RBRACE","    public static int select(int[] a, int k) {
,//        StdRandom.shuffle(a);
,        
,        int lo = 0, hi = a.length - 1;
,        while (hi > lo) {
,            int i = partition(a, lo, hi);
,            if      (i > k) hi = i - 1;
,            else if (i < k) lo = i <MASK> 1;
,            else return a[i];
,        }
,        return a[lo];
,    }
"
7adec7d8-cee7-4225-a9f6-43a8dd4e76a6,ca8ad003-f24b-45a6-bddd-90605d1b3a9a,STAR,"PRIVATE,int,getUnit,LPAREN,String,product,COMMA,double,entryPrice,COMMA,double,stopPrice,RPAREN,LBRACE,double,r,EQ,Math,DOT,abs,LPAREN,entryPrice,SUB,stopPrice,RPAREN,SEMI,double,point,EQ,CurrencyTable,DOT,getPoint,LPAREN,product,RPAREN,SEMI,double,valuePerPoint,EQ,CurrencyTable,DOT,getValuePerPoint,LPAREN,product,RPAREN,SEMI,double,balance,EQ,order,DOT,getAccount,LPAREN,RPAREN,DOT,getBalance,LPAREN,RPAREN,SEMI,int,unit,EQ,LPAREN,int,RPAREN,LPAREN,0.01,<MASK>,balance,SLASH,valuePerPoint,SLASH,LPAREN,r,SLASH,point,RPAREN,RPAREN,SEMI,RETURN,unit,SEMI,RBRACE","    private int getUnit(String product, double entryPrice, double stopPrice) {
,        double r = Math.abs(entryPrice - stopPrice);
,        double point = CurrencyTable.getPoint(product);
,        double valuePerPoint = CurrencyTable.getValuePerPoint(product);
,        double balance = order.getAccount().getBalance();
,        int unit = (int) (0.01 <MASK> balance / valuePerPoint / (r/point));
,        return unit;
,    }
"
7a6d4ee7-a11c-445d-8f58-7963e611bee0,44130c25-843f-4f73-a721-a514e005a0f4,BANGEQ,"PUBLIC,void,run,LPAREN,RPAREN,LBRACE,lblStatus,DOT,setText,LPAREN,""Downloading update... Please wait."",RPAREN,SEMI,WHILE,LPAREN,download,DOT,getStatus,LPAREN,RPAREN,EQEQ,Download,DOT,DOWNLOADING,RPAREN,LBRACE,progressBar,DOT,setValue,LPAREN,LPAREN,int,RPAREN,download,DOT,getProgress,LPAREN,RPAREN,RPAREN,SEMI,int,downloaded,EQ,LPAREN,download,DOT,getDownloaded,LPAREN,RPAREN,SLASH,1024,RPAREN,SEMI,int,size,EQ,LPAREN,download,DOT,getSize,LPAREN,RPAREN,SLASH,1024,RPAREN,SEMI,lblDetails,DOT,setText,LPAREN,""Downloading file: "",PLUS,downloaded,PLUS,""kB /"",PLUS,size,PLUS,""kB ("",PLUS,LPAREN,int,RPAREN,download,DOT,getProgress,LPAREN,RPAREN,PLUS,""%)"",RPAREN,SEMI,RBRACE,IF,LPAREN,download,DOT,getStatus,LPAREN,RPAREN,<MASK>,Download,DOT,COMPLETE,RPAREN,LBRACE,lblStatus,DOT,setIcon,LPAREN,null,RPAREN,SEMI,lblStatus,DOT,setText,LPAREN,""Update has been cancelled by user."",RPAREN,SEMI,lblDetails,DOT,setText,LPAREN,""Nothing has been changed. You can close this window."",RPAREN,SEMI,setDefaultCloseOperation,LPAREN,JFrame,DOT,DISPOSE_ON_CLOSE,RPAREN,SEMI,File,file,EQ,NEW,File,LPAREN,download,DOT,getFileName,LPAREN,RPAREN,RPAREN,SEMI,IF,LPAREN,file,DOT,exists,LPAREN,RPAREN,RPAREN,LBRACE,file,DOT,delete,LPAREN,RPAREN,SEMI,RBRACE,RETURN,SEMI,RBRACE,System,DOT,gc,LPAREN,RPAREN,SEMI,File,jar,EQ,getJarFile,LPAREN,RPAREN,SEMI,IF,LPAREN,jar,DOT,exists,LPAREN,RPAREN,RPAREN,LBRACE,jar,DOT,deleteOnExit,LPAREN,RPAREN,SEMI,RBRACE,lblStatus,DOT,setIcon,LPAREN,null,RPAREN,SEMI,lblStatus,DOT,setText,LPAREN,""Finished! Update sucessfully downloaded."",RPAREN,SEMI,lblDetails,DOT,setText,LPAREN,""File sucessfully downloaded!"",RPAREN,SEMI,setDefaultCloseOperation,LPAREN,JFrame,DOT,EXIT_ON_CLOSE,RPAREN,SEMI,progressBar,DOT,setValue,LPAREN,100,RPAREN,SEMI,int,result,EQ,JOptionPane,DOT,showConfirmDialog,LPAREN,null,COMMA,""Update sucessfully downloaded!\nTo apply the changes, this program needs to be restarted.\nDo you like to restart this application?"",COMMA,""DynQuiz Updater v1.6"",COMMA,JOptionPane,DOT,YES_NO_OPTION,COMMA,JOptionPane,DOT,QUESTION_MESSAGE,RPAREN,SEMI,IF,LPAREN,result,EQEQ,JOptionPane,DOT,YES_OPTION,RPAREN,LBRACE,TRY,LBRACE,restartApplication,LPAREN,NEW,File,LPAREN,download,DOT,getFileName,LPAREN,RPAREN,RPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,Exception,ex,RPAREN,LBRACE,System,DOT,exit,LPAREN,0,RPAREN,SEMI,RBRACE,RBRACE,RBRACE","								public void run() 
,								{
,									lblStatus.setText(""Downloading update... Please wait."");
,									while(download.getStatus() == Download.DOWNLOADING)
,									{
,										progressBar.setValue((int) download.getProgress());
,										int downloaded = (download.getDownloaded() / 1024);
,										int size = (download.getSize() / 1024);
,										
,										lblDetails.setText(""Downloading file: "" + downloaded + ""kB /"" + size + ""kB ("" + (int) download.getProgress() + ""%)"");
,									}
,									
,									if(download.getStatus() <MASK> Download.COMPLETE)
,									{
,										lblStatus.setIcon(null);
,										lblStatus.setText(""Update has been cancelled by user."");
,										lblDetails.setText(""Nothing has been changed. You can close this window."");
,										setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
,										
,										File file = new File(download.getFileName());
,										if(file.exists())
,										{
,											file.delete();
,										}
,										
,										return;
,									}
,									
,									//Release unused files
,									System.gc();
,									
,									File jar = getJarFile();
,									if(jar.exists())
,									{
,										jar.deleteOnExit();
,									}
,								
,									lblStatus.setIcon(null);
,									lblStatus.setText(""Finished! Update sucessfully downloaded."");
,									lblDetails.setText(""File sucessfully downloaded!"");
,									setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
,									progressBar.setValue(100);
,									
,									int result = JOptionPane.showConfirmDialog(null, ""Update sucessfully downloaded!\nTo apply the changes, this program needs to be restarted.\nDo you like to restart this application?"", ""DynQuiz Updater v1.6"", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
,									if(result == JOptionPane.YES_OPTION)
,									{
,										try
,										{
,											restartApplication(new File(download.getFileName()));
,										}
,										catch(Exception ex) 
,										{
,											System.exit(0);
,										}
,									}
,								}
"
192d7c63-30c8-4cf8-8cc9-29f5bc66ec73,46bfb53c-9abd-494f-8af5-f598a678cfbf,PERCENT,"PROTECTED,STATIC,void,nnbr,LPAREN,KDPlusNode,kd,COMMA,HPoint,target,COMMA,HRect,hr,COMMA,double,max_dist_sqd,COMMA,int,lev,COMMA,int,K,COMMA,NearestNeighborList,nnl,RPAREN,LBRACE,IF,LPAREN,kd,EQEQ,null,RPAREN,LBRACE,RETURN,SEMI,RBRACE,int,s,EQ,lev,<MASK>,K,SEMI,HPoint,pivot,EQ,kd,DOT,k,SEMI,double,pivot_to_target,EQ,HPoint,DOT,sqrdist,LPAREN,pivot,COMMA,target,RPAREN,SEMI,HRect,left_hr,EQ,hr,SEMI,HRect,right_hr,EQ,LPAREN,HRect,RPAREN,hr,DOT,clone,LPAREN,RPAREN,SEMI,left_hr,DOT,max,DOT,coord,LBRACKET,s,RBRACKET,EQ,pivot,DOT,coord,LBRACKET,s,RBRACKET,SEMI,right_hr,DOT,min,DOT,coord,LBRACKET,s,RBRACKET,EQ,pivot,DOT,coord,LBRACKET,s,RBRACKET,SEMI,boolean,target_in_left,EQ,target,DOT,coord,LBRACKET,s,RBRACKET,LT,pivot,DOT,coord,LBRACKET,s,RBRACKET,SEMI,KDPlusNode,nearer_kd,SEMI,HRect,nearer_hr,SEMI,KDPlusNode,further_kd,SEMI,HRect,further_hr,SEMI,IF,LPAREN,target_in_left,RPAREN,LBRACE,nearer_kd,EQ,kd,DOT,left,SEMI,nearer_hr,EQ,left_hr,SEMI,further_kd,EQ,kd,DOT,right,SEMI,further_hr,EQ,right_hr,SEMI,RBRACE,ELSE,LBRACE,nearer_kd,EQ,kd,DOT,right,SEMI,nearer_hr,EQ,right_hr,SEMI,further_kd,EQ,kd,DOT,left,SEMI,further_hr,EQ,left_hr,SEMI,RBRACE,nnbr,LPAREN,nearer_kd,COMMA,target,COMMA,nearer_hr,COMMA,max_dist_sqd,COMMA,lev,PLUS,1,COMMA,K,COMMA,nnl,RPAREN,SEMI,KDPlusNode,nearest,EQ,LPAREN,KDPlusNode,RPAREN,nnl,DOT,getHighest,LPAREN,RPAREN,SEMI,double,dist_sqd,SEMI,IF,LPAREN,BANG,nnl,DOT,isCapacityReached,LPAREN,RPAREN,RPAREN,LBRACE,dist_sqd,EQ,Double,DOT,MAX_VALUE,SEMI,RBRACE,ELSE,LBRACE,dist_sqd,EQ,nnl,DOT,getMaxPriority,LPAREN,RPAREN,SEMI,RBRACE,max_dist_sqd,EQ,Math,DOT,min,LPAREN,max_dist_sqd,COMMA,dist_sqd,RPAREN,SEMI,HPoint,closest,EQ,further_hr,DOT,closest,LPAREN,target,RPAREN,SEMI,IF,LPAREN,HPoint,DOT,eucdist,LPAREN,closest,COMMA,target,RPAREN,LT,Math,DOT,sqrt,LPAREN,max_dist_sqd,RPAREN,RPAREN,LBRACE,IF,LPAREN,pivot_to_target,LT,dist_sqd,RPAREN,LBRACE,nearest,EQ,kd,SEMI,dist_sqd,EQ,pivot_to_target,SEMI,IF,LPAREN,BANG,kd,DOT,deleted,RPAREN,LBRACE,nnl,DOT,insert,LPAREN,kd,COMMA,dist_sqd,RPAREN,SEMI,RBRACE,IF,LPAREN,nnl,DOT,isCapacityReached,LPAREN,RPAREN,RPAREN,LBRACE,max_dist_sqd,EQ,nnl,DOT,getMaxPriority,LPAREN,RPAREN,SEMI,RBRACE,ELSE,LBRACE,max_dist_sqd,EQ,Double,DOT,MAX_VALUE,SEMI,RBRACE,RBRACE,nnbr,LPAREN,further_kd,COMMA,target,COMMA,further_hr,COMMA,max_dist_sqd,COMMA,lev,PLUS,1,COMMA,K,COMMA,nnl,RPAREN,SEMI,KDPlusNode,temp_nearest,EQ,LPAREN,KDPlusNode,RPAREN,nnl,DOT,getHighest,LPAREN,RPAREN,SEMI,double,temp_dist_sqd,EQ,nnl,DOT,getMaxPriority,LPAREN,RPAREN,SEMI,IF,LPAREN,temp_dist_sqd,LT,dist_sqd,RPAREN,LBRACE,nearest,EQ,temp_nearest,SEMI,dist_sqd,EQ,temp_dist_sqd,SEMI,RBRACE,RBRACE,ELSE,IF,LPAREN,pivot_to_target,LT,max_dist_sqd,RPAREN,LBRACE,nearest,EQ,kd,SEMI,dist_sqd,EQ,pivot_to_target,SEMI,RBRACE,RBRACE","    protected static void nnbr(KDPlusNode kd, HPoint target, HRect hr, double max_dist_sqd, int lev, int K,
,            NearestNeighborList nnl) {
,
,        // 1. if kd is empty then set dist-sqd to infinity and exit.
,        if (kd == null) {
,            return;
,        }
,
,        // 2. s := split field of kd
,        int s = lev <MASK> K;
,
,        // 3. pivot := dom-elt field of kd
,        HPoint pivot = kd.k;
,        double pivot_to_target = HPoint.sqrdist(pivot, target);
,
,        // 4. Cut hr into to sub-hyperrectangles left-hr and right-hr.
,        // The cut plane is through pivot and perpendicular to the s
,        // dimension.
,        HRect left_hr = hr; // optimize by not cloning
,        HRect right_hr = (HRect) hr.clone();
,        left_hr.max.coord[s] = pivot.coord[s];
,        right_hr.min.coord[s] = pivot.coord[s];
,
,        // 5. target-in-left := target_s <= pivot_s
,        boolean target_in_left = target.coord[s] < pivot.coord[s];
,
,        KDPlusNode nearer_kd;
,        HRect nearer_hr;
,        KDPlusNode further_kd;
,        HRect further_hr;
,
,        // 6. if target-in-left then
,        // 6.1. nearer-kd := left field of kd and nearer-hr := left-hr
,        // 6.2. further-kd := right field of kd and further-hr := right-hr
,        if (target_in_left) {
,            nearer_kd = kd.left;
,            nearer_hr = left_hr;
,            further_kd = kd.right;
,            further_hr = right_hr;
,        }
,        //
,        // 7. if not target-in-left then
,        // 7.1. nearer-kd := right field of kd and nearer-hr := right-hr
,        // 7.2. further-kd := left field of kd and further-hr := left-hr
,        else {
,            nearer_kd = kd.right;
,            nearer_hr = right_hr;
,            further_kd = kd.left;
,            further_hr = left_hr;
,        }
,
,        // 8. Recursively call Nearest Neighbor with paramters
,        // (nearer-kd, target, nearer-hr, max-dist-sqd), storing the
,        // results in nearest and dist-sqd
,        nnbr(nearer_kd, target, nearer_hr, max_dist_sqd, lev + 1, K, nnl);
,
,        KDPlusNode nearest = (KDPlusNode) nnl.getHighest();
,        double dist_sqd;
,
,        if (!nnl.isCapacityReached()) {
,            dist_sqd = Double.MAX_VALUE;
,        } else {
,            dist_sqd = nnl.getMaxPriority();
,        }
,
,        // 9. max-dist-sqd := minimum of max-dist-sqd and dist-sqd
,        max_dist_sqd = Math.min(max_dist_sqd, dist_sqd);
,
,        // 10. A nearer point could only lie in further-kd if there were some
,        // part of further-hr within distance sqrt(max-dist-sqd) of
,        // target. If this is the case then
,        HPoint closest = further_hr.closest(target);
,        if (HPoint.eucdist(closest, target) < Math.sqrt(max_dist_sqd)) {
,
,            // 10.1 if (pivot-target)^2 < dist-sqd then
,            if (pivot_to_target < dist_sqd) {
,
,                // 10.1.1 nearest := (pivot, range-elt field of kd)
,                nearest = kd;
,
,                // 10.1.2 dist-sqd = (pivot-target)^2
,                dist_sqd = pivot_to_target;
,
,                // add to nnl
,                if (!kd.deleted) {
,                    nnl.insert(kd, dist_sqd);
,                }
,
,                // 10.1.3 max-dist-sqd = dist-sqd
,                // max_dist_sqd = dist_sqd;
,                if (nnl.isCapacityReached()) {
,                    max_dist_sqd = nnl.getMaxPriority();
,                } else {
,                    max_dist_sqd = Double.MAX_VALUE;
,                }
,            }
,
,            // 10.2 Recursively call Nearest Neighbor with parameters
,            // (further-kd, target, further-hr, max-dist_sqd),
,            // storing results in temp-nearest and temp-dist-sqd
,            nnbr(further_kd, target, further_hr, max_dist_sqd, lev + 1, K, nnl);
,            KDPlusNode temp_nearest = (KDPlusNode) nnl.getHighest();
,            double temp_dist_sqd = nnl.getMaxPriority();
,
,            // 10.3 If tmp-dist-sqd < dist-sqd then
,            if (temp_dist_sqd < dist_sqd) {
,
,                // 10.3.1 nearest := temp_nearest and dist_sqd := temp_dist_sqd
,                nearest = temp_nearest;
,                dist_sqd = temp_dist_sqd;
,            }
,        }
,
,        // SDL: otherwise, current point is nearest
,        else if (pivot_to_target < max_dist_sqd) {
,            nearest = kd;
,            dist_sqd = pivot_to_target;
,        }
,    }
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,079b179f-d692-4055-aad8-31a3cbc2f8a4,SUB,"PUBLIC,STATIC,List,LT,LineEquation,GT,objectLineEquations,LPAREN,List,LT,Point,GT,points,RPAREN,LBRACE,List,LT,LineEquation,GT,list,EQ,NEW,ArrayList,LT,LineEquation,GT,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,points,DOT,size,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,int,x1,EQ,points,DOT,get,LPAREN,i,RPAREN,DOT,x,SEMI,int,y1,EQ,points,DOT,get,LPAREN,i,RPAREN,DOT,y,SEMI,IF,LPAREN,i,BANGEQ,points,DOT,size,LPAREN,RPAREN,<MASK>,1,RPAREN,LBRACE,int,x2,EQ,points,DOT,get,LPAREN,i,PLUS,1,RPAREN,DOT,x,SEMI,int,y2,EQ,points,DOT,get,LPAREN,i,PLUS,1,RPAREN,DOT,y,SEMI,list,DOT,add,LPAREN,lineEqCompute,LPAREN,x1,COMMA,y1,COMMA,x2,COMMA,y2,RPAREN,RPAREN,SEMI,RBRACE,ELSE,LBRACE,int,x2,EQ,points,DOT,get,LPAREN,0,RPAREN,DOT,x,SEMI,int,y2,EQ,points,DOT,get,LPAREN,0,RPAREN,DOT,y,SEMI,list,DOT,add,LPAREN,lineEqCompute,LPAREN,x1,COMMA,y1,COMMA,x2,COMMA,y2,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,RETURN,list,SEMI,RBRACE","    public static List<LineEquation> objectLineEquations (List<Point> points)
,    {
,    	List<LineEquation> list = new ArrayList<LineEquation>(); 	
,    	for (int i = 0; i < points.size(); i++)
,    	{
,    		int x1 = points.get(i).x;
,    		int y1 = points.get(i).y;
,    		if (i != points.size() <MASK> 1)
,    		{
,    			int x2 = points.get(i+1).x;
,    			int y2 = points.get(i+1).y;
,    			list.add(lineEqCompute(x1, y1, x2, y2));
,    		}
,    		else
,    		{
,    			int x2 = points.get(0).x;
,    			int y2 = points.get(0).y;
,    			list.add(lineEqCompute(x1, y1, x2, y2));
,    		}
,    	}
,    	return list;
,    }
"
996c2181-63de-4cd4-a997-594ad56489d6,22c6c79a-a67d-464c-9b8f-86508c070cbe,SLASH,"PUBLIC,STATIC,int,recursiveBinarySearch,LPAREN,int,LBRACKET,RBRACKET,sortedArray,COMMA,int,start,COMMA,int,end,COMMA,int,key,RPAREN,LBRACE,IF,LPAREN,start,LT,end,RPAREN,LBRACE,int,mid,EQ,start,PLUS,LPAREN,end,SUB,start,RPAREN,<MASK>,2,SEMI,IF,LPAREN,key,LT,sortedArray,LBRACKET,mid,RBRACKET,RPAREN,LBRACE,RETURN,recursiveBinarySearch,LPAREN,sortedArray,COMMA,start,COMMA,mid,COMMA,key,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,key,GT,sortedArray,LBRACKET,mid,RBRACKET,RPAREN,LBRACE,RETURN,recursiveBinarySearch,LPAREN,sortedArray,COMMA,mid,PLUS,1,COMMA,end,COMMA,key,RPAREN,SEMI,RBRACE,ELSE,LBRACE,RETURN,mid,SEMI,RBRACE,RBRACE,RETURN,SUB,LPAREN,start,PLUS,1,RPAREN,SEMI,RBRACE","	public static int recursiveBinarySearch(int[] sortedArray, int start, int end, int key) {
,        
,        if (start < end) {
,            int mid = start + (end - start) <MASK> 2;  
,            if (key < sortedArray[mid]) {
,                return recursiveBinarySearch(sortedArray, start, mid, key);
,                 
,            } else if (key > sortedArray[mid]) {
,                return recursiveBinarySearch(sortedArray, mid+1, end , key);
,                 
,            } else {
,                return mid;   
,            }
,        }
,        return -(start + 1);  
,    }
"
08b41d00-9e8d-4e48-94b9-945bef00d612,0f7c3bd9-4369-4f8e-b92b-8d2ca08a6de8,GT,"PUBLIC,int,UnitCalculation,LPAREN,int,money,COMMA,int,moneyUnit,RPAREN,LBRACE,int,unitQuantity,EQ,0,SEMI,IF,LPAREN,money,BANGEQ,0,RPAREN,LBRACE,IF,LPAREN,money,PERCENT,moneyUnit,EQEQ,0,RPAREN,LBRACE,unitQuantity,EQ,money,SLASH,moneyUnit,SEMI,money,EQ,0,SEMI,RBRACE,ELSE,IF,LPAREN,money,PERCENT,moneyUnit,BANGEQ,0,AMPAMP,money,<MASK>,moneyUnit,RPAREN,LBRACE,unitQuantity,EQ,LPAREN,int,RPAREN,LPAREN,money,SLASH,moneyUnit,RPAREN,SEMI,money,EQ,money,SUB,LPAREN,unitQuantity,STAR,moneyUnit,RPAREN,SEMI,RBRACE,this,DOT,Display_Message,LPAREN,moneyUnit,COMMA,unitQuantity,RPAREN,SEMI,RBRACE,RETURN,money,SEMI,RBRACE","    public int UnitCalculation(int money, int moneyUnit) {
,        int unitQuantity = 0;
,        if (money != 0) {
,            if (money % moneyUnit == 0) {
,                unitQuantity = money / moneyUnit;
,                money = 0;
,            } else if (money % moneyUnit != 0 && money <MASK> moneyUnit) {
,                unitQuantity = (int) (money / moneyUnit);
,                money = money - (unitQuantity * moneyUnit);
,            }
,            this.Display_Message(moneyUnit, unitQuantity);
,        }
,        return money;
,    }
"
25febb02-bf0a-414d-9cae-3efcbdacd8a3,c0dd625c-5a0e-46e8-b6c3-eddb9a207b48,LTEQ,"PUBLIC,STATIC,String,solveStringWithFunctions,LPAREN,String,string,COMMA,ArrayList,LT,NamedFunction,GT,functions,RPAREN,THROWS,InvalidInputException,LBRACE,IF,LPAREN,string,EQEQ,null,BARBAR,string,DOT,length,LPAREN,RPAREN,EQEQ,0,RPAREN,THROW,NEW,InvalidInputException,LPAREN,""Can not solve a blank string"",RPAREN,SEMI,IF,LPAREN,string,DOT,substring,LPAREN,string,DOT,length,LPAREN,RPAREN,SUB,1,RPAREN,DOT,equals,LPAREN,"" "",RPAREN,RPAREN,string,EQ,string,DOT,substring,LPAREN,0,COMMA,string,DOT,length,LPAREN,RPAREN,SUB,1,RPAREN,SEMI,WHILE,LPAREN,string,DOT,contains,LPAREN,"" "",RPAREN,RPAREN,LBRACE,int,index,EQ,string,DOT,indexOf,LPAREN,"" "",RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,index,RPAREN,SEMI,IF,LPAREN,string,DOT,charAt,LPAREN,0,RPAREN,EQEQ, ,RPAREN,string,EQ,string,DOT,substring,LPAREN,1,RPAREN,SEMI,ELSE,string,EQ,string,DOT,substring,LPAREN,0,COMMA,index,RPAREN,PLUS,string,DOT,substring,LPAREN,index,PLUS,1,RPAREN,SEMI,RBRACE,IF,LPAREN,Variable,DOT,hasVars,LPAREN,RPAREN,RPAREN,LBRACE,FOR,LPAREN,String,key,COLON,Variable,DOT,getVariableNames,LPAREN,RPAREN,RPAREN,LBRACE,WHILE,LPAREN,string,DOT,contains,LPAREN,key,RPAREN,RPAREN,LBRACE,int,index,EQ,string,DOT,indexOf,LPAREN,key,RPAREN,SEMI,IF,LPAREN,index,GT,0,RPAREN,LBRACE,IF,LPAREN,BANG,Character,DOT,isLetter,LPAREN,string,DOT,charAt,LPAREN,index,SUB,1,RPAREN,RPAREN,RPAREN,string,EQ,string,DOT,substring,LPAREN,0,COMMA,index,RPAREN,PLUS,Variable,DOT,getValue,LPAREN,key,RPAREN,PLUS,string,DOT,substring,LPAREN,index,PLUS,key,DOT,length,LPAREN,RPAREN,RPAREN,SEMI,ELSE,BREAK,SEMI,RBRACE,ELSE,IF,LPAREN,index,PLUS,key,DOT,length,LPAREN,RPAREN,PLUS,1,LT,string,DOT,length,LPAREN,RPAREN,RPAREN,LBRACE,IF,LPAREN,BANG,Character,DOT,isLetter,LPAREN,string,DOT,charAt,LPAREN,index,PLUS,key,DOT,length,LPAREN,RPAREN,PLUS,1,RPAREN,RPAREN,RPAREN,string,EQ,string,DOT,substring,LPAREN,0,COMMA,index,RPAREN,PLUS,Variable,DOT,getValue,LPAREN,key,RPAREN,PLUS,string,DOT,substring,LPAREN,index,PLUS,key,DOT,length,LPAREN,RPAREN,RPAREN,SEMI,ELSE,BREAK,SEMI,RBRACE,ELSE,LBRACE,string,EQ,string,DOT,substring,LPAREN,0,COMMA,index,RPAREN,PLUS,Variable,DOT,getValue,LPAREN,key,RPAREN,PLUS,string,DOT,substring,LPAREN,index,PLUS,key,DOT,length,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,RBRACE,boolean,doneChecking,EQ,false,SEMI,WHILE,LPAREN,BANG,doneChecking,RPAREN,LBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,string,DOT,length,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,i,LT,string,DOT,length,LPAREN,RPAREN,SUB,2,AMPAMP,Character,DOT,isDigit,LPAREN,string,DOT,charAt,LPAREN,i,RPAREN,RPAREN,AMPAMP,string,DOT,charAt,LPAREN,i,PLUS,1,RPAREN,EQEQ,(,RPAREN,LBRACE,string,EQ,string,DOT,substring,LPAREN,0,COMMA,i,PLUS,1,RPAREN,PLUS,""*"",PLUS,string,DOT,substring,LPAREN,i,PLUS,1,RPAREN,SEMI,BREAK,SEMI,RBRACE,IF,LPAREN,i,LT,string,DOT,length,LPAREN,RPAREN,SUB,1,AMPAMP,string,DOT,charAt,LPAREN,i,RPAREN,EQEQ,),AMPAMP,Character,DOT,isDigit,LPAREN,string,DOT,charAt,LPAREN,i,PLUS,1,RPAREN,RPAREN,RPAREN,LBRACE,string,EQ,string,DOT,substring,LPAREN,0,COMMA,i,PLUS,1,RPAREN,PLUS,""*"",PLUS,string,DOT,substring,LPAREN,i,PLUS,1,RPAREN,SEMI,BREAK,SEMI,RBRACE,IF,LPAREN,i,EQEQ,string,DOT,length,LPAREN,RPAREN,SUB,1,RPAREN,doneChecking,EQ,true,SEMI,RBRACE,RBRACE,int,countE,EQ,0,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,string,DOT,length,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,string,DOT,charAt,LPAREN,i,RPAREN,EQEQ,e,RPAREN,countE,PLUSPLUS,SEMI,RBRACE,int,lastEIndex,EQ,SUB,1,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,countE,SEMI,i,PLUSPLUS,RPAREN,LBRACE,int,index,EQ,string,DOT,indexOf,LPAREN,e,COMMA,lastEIndex,RPAREN,SEMI,lastEIndex,EQ,index,SEMI,IF,LPAREN,index,EQEQ,SUB,1,RPAREN,CONTINUE,SEMI,IF,LPAREN,index,GT,0,AMPAMP,BANG,Character,DOT,isLetter,LPAREN,string,DOT,charAt,LPAREN,index,SUB,1,RPAREN,RPAREN,AMPAMP,index,LT,string,DOT,length,LPAREN,RPAREN,SUB,2,AMPAMP,BANG,Character,DOT,isLetter,LPAREN,string,DOT,charAt,LPAREN,index,PLUS,1,RPAREN,RPAREN,RPAREN,string,EQ,string,DOT,substring,LPAREN,0,COMMA,index,RPAREN,PLUS,Math,DOT,E,PLUS,string,DOT,substring,LPAREN,index,PLUS,1,RPAREN,SEMI,ELSE,IF,LPAREN,index,EQEQ,0,AMPAMP,LPAREN,string,DOT,length,LPAREN,RPAREN,EQEQ,1,BARBAR,BANG,Character,DOT,isLetter,LPAREN,string,DOT,charAt,LPAREN,index,PLUS,1,RPAREN,RPAREN,RPAREN,RPAREN,string,EQ,string,DOT,substring,LPAREN,0,COMMA,index,RPAREN,PLUS,Math,DOT,E,PLUS,string,DOT,substring,LPAREN,index,PLUS,1,RPAREN,SEMI,ELSE,IF,LPAREN,index,EQEQ,string,DOT,length,LPAREN,RPAREN,SUB,1,AMPAMP,BANG,Character,DOT,isLetter,LPAREN,string,DOT,charAt,LPAREN,index,SUB,1,RPAREN,RPAREN,RPAREN,string,EQ,string,DOT,substring,LPAREN,0,COMMA,index,RPAREN,PLUS,Math,DOT,E,PLUS,string,DOT,substring,LPAREN,index,PLUS,1,RPAREN,SEMI,RBRACE,WHILE,LPAREN,string,DOT,contains,LPAREN,""rand"",RPAREN,RPAREN,LBRACE,int,index,EQ,string,DOT,indexOf,LPAREN,""rand"",RPAREN,SEMI,string,EQ,string,DOT,substring,LPAREN,0,COMMA,index,RPAREN,PLUS,Math,DOT,random,LPAREN,RPAREN,PLUS,string,DOT,substring,LPAREN,index,PLUS,4,RPAREN,SEMI,RBRACE,WHILE,LPAREN,string,DOT,contains,LPAREN,""pi"",RPAREN,RPAREN,LBRACE,int,index,EQ,string,DOT,indexOf,LPAREN,""pi"",RPAREN,SEMI,string,EQ,string,DOT,substring,LPAREN,0,COMMA,index,RPAREN,PLUS,Math,DOT,PI,PLUS,string,DOT,substring,LPAREN,index,PLUS,2,RPAREN,SEMI,RBRACE,WHILE,LPAREN,string,DOT,contains,LPAREN,""sum("",RPAREN,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""summation"",RPAREN,SEMI,int,parenCount,EQ,0,SEMI,int,commaCheck,EQ,0,SEMI,int,lastIndex,EQ,SUB,1,SEMI,int,bracketCount,EQ,0,SEMI,FOR,LPAREN,int,i,EQ,string,DOT,indexOf,LPAREN,""sum("",RPAREN,SEMI,i,LT,string,DOT,length,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,SWITCH,LPAREN,string,DOT,charAt,LPAREN,i,RPAREN,RPAREN,LBRACE,CASE,(,COLON,parenCount,PLUSPLUS,SEMI,BREAK,SEMI,CASE,{,COLON,bracketCount,PLUSPLUS,SEMI,BREAK,SEMI,CASE,},COLON,bracketCount,SUBSUB,SEMI,BREAK,SEMI,CASE,,,COLON,IF,LPAREN,parenCount,LT,2,AMPAMP,bracketCount,EQEQ,0,RPAREN,commaCheck,PLUSPLUS,SEMI,BREAK,SEMI,RBRACE,IF,LPAREN,string,DOT,charAt,LPAREN,i,RPAREN,EQEQ,),RPAREN,LBRACE,parenCount,SUBSUB,SEMI,IF,LPAREN,parenCount,EQEQ,0,RPAREN,LBRACE,lastIndex,EQ,i,SEMI,BREAK,SEMI,RBRACE,RBRACE,RBRACE,IF,LPAREN,bracketCount,BANGEQ,0,RPAREN,THROW,NEW,InvalidInputException,LPAREN,""Check your brackets."",RPAREN,SEMI,IF,LPAREN,lastIndex,EQEQ,SUB,1,RPAREN,THROW,NEW,InvalidInputException,LPAREN,""Check Parenthesis in summation function."",RPAREN,SEMI,IF,LPAREN,commaCheck,BANGEQ,2,AMPAMP,commaCheck,BANGEQ,1,RPAREN,THROW,NEW,InvalidInputException,LPAREN,""Summation function requires 3 arguments seperated by commas"",RPAREN,SEMI,int,indexOfSum,EQ,string,DOT,indexOf,LPAREN,""sum("",RPAREN,SEMI,int,index1,EQ,indexOfSum,PLUS,4,SEMI,String,args,EQ,string,DOT,substring,LPAREN,index1,COMMA,lastIndex,PLUS,1,RPAREN,SEMI,int,argLastIndex,EQ,lastIndex,SUB,LPAREN,string,DOT,substring,LPAREN,0,COMMA,index1,RPAREN,DOT,length,LPAREN,RPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""char: "",PLUS,args,DOT,charAt,LPAREN,argLastIndex,RPAREN,RPAREN,SEMI,index1,EQ,0,SEMI,System,DOT,out,DOT,println,LPAREN,""args: "",PLUS,args,RPAREN,SEMI,int,fromIndex,EQ,index1,SEMI,IF,LPAREN,commaCheck,EQEQ,1,AMPAMP,args,DOT,contains,LPAREN,""}"",RPAREN,RPAREN,LBRACE,fromIndex,EQ,args,DOT,indexOf,LPAREN,},RPAREN,SEMI,RBRACE,int,index2,EQ,args,DOT,indexOf,LPAREN,,,COMMA,fromIndex,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""from index: "",PLUS,fromIndex,PLUS,""\n"",PLUS,args,RPAREN,SEMI,String,arg1,EQ,args,DOT,substring,LPAREN,0,COMMA,index2,RPAREN,SEMI,String,arg2,EQ,"""",SEMI,IF,LPAREN,commaCheck,EQEQ,2,RPAREN,LBRACE,index1,EQ,index2,PLUS,1,SEMI,index2,EQ,args,DOT,indexOf,LPAREN,,,COMMA,index1,RPAREN,SEMI,arg2,EQ,args,DOT,substring,LPAREN,index1,COMMA,index2,RPAREN,SEMI,RBRACE,index1,EQ,index2,PLUS,1,SEMI,index2,EQ,args,DOT,indexOf,LPAREN,),COMMA,index1,RPAREN,SEMI,String,arg3,EQ,args,DOT,substring,LPAREN,index1,COMMA,argLastIndex,RPAREN,SEMI,IF,LPAREN,commaCheck,EQEQ,1,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""arg1: "",PLUS,arg1,PLUS,""arg3: "",PLUS,arg3,RPAREN,SEMI,String,LBRACKET,RBRACKET,list,EQ,Variable,DOT,listToArray,LPAREN,arg1,RPAREN,SEMI,string,EQ,string,DOT,substring,LPAREN,0,COMMA,indexOfSum,RPAREN,PLUS,summation,LPAREN,list,COMMA,arg3,RPAREN,PLUS,string,DOT,substring,LPAREN,1,PLUS,lastIndex,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""String after list sum: "",PLUS,string,RPAREN,SEMI,RBRACE,ELSE,LBRACE,int,start,COMMA,count,SEMI,TRY,LBRACE,start,EQ,Integer,DOT,parseInt,LPAREN,arg1,RPAREN,SEMI,count,EQ,Integer,DOT,parseInt,LPAREN,arg2,RPAREN,SEMI,RBRACE,CATCH,LPAREN,Exception,e,RPAREN,LBRACE,THROW,NEW,InvalidInputException,LPAREN,""First two arguments in summation function must be numbers."",RPAREN,SEMI,RBRACE,string,EQ,string,DOT,substring,LPAREN,0,COMMA,string,DOT,indexOf,LPAREN,""sum("",RPAREN,RPAREN,PLUS,summation,LPAREN,start,COMMA,count,COMMA,1,COMMA,arg3,RPAREN,PLUS,string,DOT,substring,LPAREN,1,PLUS,lastIndex,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""summation final: "",PLUS,string,RPAREN,SEMI,RBRACE,RBRACE,boolean,checkForFunctions,EQ,true,SEMI,WHILE,LPAREN,checkForFunctions,RPAREN,LBRACE,checkForFunctions,EQ,false,SEMI,FOR,LPAREN,Functions,DOT,NamedFunction,f,COLON,UserFunction,DOT,getAllFunctions,LPAREN,RPAREN,RPAREN,LBRACE,WHILE,LPAREN,string,DOT,contains,LPAREN,f,DOT,getName,LPAREN,RPAREN,PLUS,""("",RPAREN,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""contains system function-----start------"",PLUS,f,DOT,getName,LPAREN,RPAREN,RPAREN,SEMI,int,index,EQ,string,DOT,indexOf,LPAREN,f,DOT,getName,LPAREN,RPAREN,RPAREN,SEMI,IF,LPAREN,index,GT,0,RPAREN,LBRACE,IF,LPAREN,Character,DOT,isLetter,LPAREN,string,DOT,charAt,LPAREN,index,SUB,1,RPAREN,RPAREN,RPAREN,BREAK,SEMI,RBRACE,int,beginIndex,EQ,string,DOT,indexOf,LPAREN,(,COMMA,string,DOT,indexOf,LPAREN,f,DOT,getName,LPAREN,RPAREN,RPAREN,RPAREN,SEMI,int,count,EQ,0,COMMA,endIndex,EQ,SUB,1,SEMI,FOR,LPAREN,int,i,EQ,beginIndex,SEMI,i,LT,string,DOT,length,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,string,DOT,charAt,LPAREN,i,RPAREN,EQEQ,(,RPAREN,count,PLUSPLUS,SEMI,ELSE,IF,LPAREN,string,DOT,charAt,LPAREN,i,RPAREN,EQEQ,),RPAREN,count,SUBSUB,SEMI,IF,LPAREN,count,EQEQ,0,RPAREN,LBRACE,endIndex,EQ,i,SEMI,BREAK,SEMI,RBRACE,RBRACE,IF,LPAREN,endIndex,EQEQ,SUB,1,RPAREN,THROW,NEW,InvalidInputException,LPAREN,""Check your parenthesis"",RPAREN,SEMI,String,args,EQ,string,DOT,substring,LPAREN,beginIndex,PLUS,1,COMMA,endIndex,RPAREN,SEMI,ArrayList,LT,String,GT,argsArray,EQ,NEW,ArrayList,LT,String,GT,LPAREN,RPAREN,SEMI,int,bracketCount,EQ,0,SEMI,int,argCount,EQ,1,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,args,DOT,length,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,SWITCH,LPAREN,args,DOT,charAt,LPAREN,i,RPAREN,RPAREN,LBRACE,CASE,{,COLON,CASE,(,COLON,bracketCount,PLUSPLUS,SEMI,BREAK,SEMI,CASE,},COLON,CASE,),COLON,bracketCount,SUBSUB,SEMI,BREAK,SEMI,RBRACE,IF,LPAREN,args,DOT,charAt,LPAREN,i,RPAREN,EQEQ,,,AMPAMP,bracketCount,EQEQ,0,RPAREN,LBRACE,argCount,PLUSPLUS,SEMI,System,DOT,out,DOT,println,LPAREN,""another"",RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,argsArray,DOT,size,LPAREN,RPAREN,LT,argCount,RPAREN,LBRACE,argsArray,DOT,add,LPAREN,"""",PLUS,args,DOT,charAt,LPAREN,i,RPAREN,RPAREN,SEMI,RBRACE,ELSE,LBRACE,argsArray,DOT,set,LPAREN,argCount,SUB,1,COMMA,argsArray,DOT,get,LPAREN,argCount,SUB,1,RPAREN,PLUS,args,DOT,charAt,LPAREN,i,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,System,DOT,out,DOT,println,LPAREN,""string to replace: "",PLUS,string,DOT,substring,LPAREN,string,DOT,indexOf,LPAREN,f,DOT,getName,LPAREN,RPAREN,RPAREN,COMMA,endIndex,PLUS,1,RPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,f,DOT,eval,LPAREN,argsArray,RPAREN,RPAREN,SEMI,string,EQ,string,DOT,substring,LPAREN,0,COMMA,string,DOT,indexOf,LPAREN,f,DOT,getName,LPAREN,RPAREN,RPAREN,RPAREN,PLUS,f,DOT,eval,LPAREN,argsArray,RPAREN,PLUS,string,DOT,substring,LPAREN,endIndex,PLUS,1,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""final: "",PLUS,string,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""contains system function\n-----end------"",RPAREN,SEMI,RBRACE,RBRACE,RBRACE,IF,LPAREN,string,DOT,contains,LPAREN,""{"",RPAREN,RPAREN,LBRACE,int,index,EQ,string,DOT,indexOf,LPAREN,{,RPAREN,SEMI,int,endIndex,EQ,string,DOT,indexOf,LPAREN,},RPAREN,SEMI,int,startcount,EQ,0,COMMA,endcount,EQ,0,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,string,DOT,length,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,SWITCH,LPAREN,string,DOT,charAt,LPAREN,i,RPAREN,RPAREN,LBRACE,CASE,{,COLON,startcount,PLUSPLUS,SEMI,BREAK,SEMI,CASE,},COLON,endcount,PLUSPLUS,SEMI,BREAK,SEMI,RBRACE,RBRACE,IF,LPAREN,index,GTEQ,endIndex,SUB,1,RPAREN,THROW,NEW,InvalidInputException,LPAREN,""Inavlid vector/list format"",RPAREN,SEMI,IF,LPAREN,startcount,BANGEQ,1,BARBAR,endcount,BANGEQ,1,RPAREN,THROW,NEW,InvalidInputException,LPAREN,""Can only have one vector/list per function"",RPAREN,SEMI,String,list,EQ,string,DOT,substring,LPAREN,index,PLUS,1,COMMA,endIndex,RPAREN,SEMI,String,LBRACKET,RBRACKET,listContents,EQ,list,DOT,split,LPAREN,"","",RPAREN,SEMI,String,result,EQ,""{"",SEMI,IF,LPAREN,listContents,DOT,length,EQEQ,0,RPAREN,THROW,NEW,InvalidInputException,LPAREN,""Can't use empty vector"",RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,listContents,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,String,solveString,EQ,string,DOT,substring,LPAREN,0,COMMA,index,RPAREN,PLUS,listContents,LBRACKET,i,RBRACKET,PLUS,string,DOT,substring,LPAREN,endIndex,PLUS,1,RPAREN,SEMI,IF,LPAREN,i,BANGEQ,0,RPAREN,result,PLUSEQ,"","",SEMI,result,PLUSEQ,solveString,LPAREN,solveString,RPAREN,SEMI,RBRACE,result,PLUSEQ,""}"",SEMI,RETURN,result,SEMI,RBRACE,IF,LPAREN,string,DOT,contains,LPAREN,""("",RPAREN,RPAREN,LBRACE,WHILE,LPAREN,string,DOT,contains,LPAREN,"")("",RPAREN,RPAREN,LBRACE,int,index,EQ,string,DOT,indexOf,LPAREN,"")("",RPAREN,SEMI,string,EQ,string,DOT,substring,LPAREN,0,COMMA,index,PLUS,1,RPAREN,PLUS,""*"",PLUS,string,DOT,substring,LPAREN,index,PLUS,1,RPAREN,SEMI,RBRACE,int,tempIndex,EQ,string,DOT,indexOf,LPAREN,""("",RPAREN,SEMI,int,startCount,EQ,0,SEMI,int,endCount,EQ,0,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,string,DOT,length,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,string,DOT,charAt,LPAREN,i,RPAREN,EQEQ,(,RPAREN,startCount,PLUSPLUS,SEMI,ELSE,IF,LPAREN,string,DOT,charAt,LPAREN,i,RPAREN,EQEQ,),RPAREN,endCount,PLUSPLUS,SEMI,RBRACE,WHILE,LPAREN,endCount,GT,startCount,RPAREN,LBRACE,int,index,EQ,string,DOT,lastIndexOf,LPAREN,),RPAREN,SEMI,IF,LPAREN,index,EQEQ,SUB,1,RPAREN,BREAK,SEMI,String,temp,EQ,NEW,String,LPAREN,string,RPAREN,SEMI,string,EQ,temp,DOT,substring,LPAREN,0,COMMA,index,RPAREN,SEMI,IF,LPAREN,index,LT,temp,DOT,length,LPAREN,RPAREN,SUB,1,RPAREN,string,PLUSEQ,temp,DOT,substring,LPAREN,index,PLUS,1,RPAREN,SEMI,endCount,SUBSUB,SEMI,RBRACE,IF,LPAREN,startCount,BANGEQ,endCount,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""problem: "",PLUS,string,RPAREN,SEMI,THROW,NEW,InvalidInputException,LPAREN,""Check your parentheses"",RPAREN,SEMI,RBRACE,int,depthOfParen,EQ,0,SEMI,int,startIndex,EQ,tempIndex,SEMI,WHILE,LPAREN,tempIndex,LT,string,DOT,length,LPAREN,RPAREN,AMPAMP,tempIndex,BANGEQ,SUB,1,RPAREN,LBRACE,IF,LPAREN,string,DOT,charAt,LPAREN,tempIndex,RPAREN,EQEQ,(,RPAREN,depthOfParen,PLUSPLUS,SEMI,ELSE,IF,LPAREN,string,DOT,charAt,LPAREN,tempIndex,RPAREN,EQEQ,),RPAREN,LBRACE,depthOfParen,SUBSUB,SEMI,RBRACE,IF,LPAREN,depthOfParen,EQEQ,0,RPAREN,LBRACE,string,EQ,string,DOT,substring,LPAREN,0,COMMA,startIndex,RPAREN,PLUS,solveString,LPAREN,string,DOT,substring,LPAREN,startIndex,PLUS,1,COMMA,tempIndex,RPAREN,RPAREN,PLUS,string,DOT,substring,LPAREN,tempIndex,PLUS,1,RPAREN,SEMI,tempIndex,EQ,string,DOT,indexOf,LPAREN,(,RPAREN,SEMI,startIndex,EQ,tempIndex,SEMI,RBRACE,ELSE,tempIndex,PLUSPLUS,SEMI,RBRACE,RBRACE,WHILE,LPAREN,string,DOT,contains,LPAREN,""("",RPAREN,RPAREN,LBRACE,String,temp,EQ,NEW,String,LPAREN,string,RPAREN,SEMI,string,EQ,temp,DOT,substring,LPAREN,0,COMMA,temp,DOT,indexOf,LPAREN,(,RPAREN,RPAREN,SEMI,IF,LPAREN,temp,DOT,indexOf,LPAREN,(,RPAREN,LT,temp,DOT,length,LPAREN,RPAREN,SUB,1,RPAREN,string,EQ,string,PLUS,temp,DOT,substring,LPAREN,temp,DOT,indexOf,LPAREN,(,RPAREN,PLUS,1,RPAREN,SEMI,RBRACE,WHILE,LPAREN,string,DOT,contains,LPAREN,"")"",RPAREN,RPAREN,LBRACE,String,temp,EQ,NEW,String,LPAREN,string,RPAREN,SEMI,string,EQ,temp,DOT,substring,LPAREN,0,COMMA,temp,DOT,indexOf,LPAREN,),RPAREN,RPAREN,SEMI,IF,LPAREN,temp,DOT,indexOf,LPAREN,),RPAREN,LT,temp,DOT,length,LPAREN,RPAREN,SUB,1,RPAREN,string,EQ,string,PLUS,temp,DOT,substring,LPAREN,temp,DOT,indexOf,LPAREN,),RPAREN,PLUS,1,RPAREN,SEMI,RBRACE,ArrayList,LT,Double,GT,numbers,EQ,NEW,ArrayList,LT,Double,GT,LPAREN,RPAREN,SEMI,ArrayList,LT,String,GT,signs,EQ,NEW,ArrayList,LT,String,GT,LPAREN,RPAREN,SEMI,StringBuffer,temp,EQ,NEW,StringBuffer,LPAREN,RPAREN,SEMI,boolean,tempIsNumber,EQ,false,SEMI,boolean,isNegitive,EQ,false,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,string,DOT,length,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,LPAREN,i,EQEQ,0,AMPAMP,string,DOT,charAt,LPAREN,i,RPAREN,EQEQ,-,RPAREN,BARBAR,Character,DOT,isDigit,LPAREN,string,DOT,charAt,LPAREN,i,RPAREN,RPAREN,BARBAR,string,DOT,charAt,LPAREN,i,RPAREN,EQEQ,.,BARBAR,LPAREN,i,GT,1,AMPAMP,string,DOT,charAt,LPAREN,i,RPAREN,EQEQ,-,AMPAMP,BANG,Character,DOT,isDigit,LPAREN,string,DOT,charAt,LPAREN,i,SUB,1,RPAREN,RPAREN,RPAREN,RPAREN,LBRACE,IF,LPAREN,BANG,tempIsNumber,AMPAMP,i,GT,0,RPAREN,LBRACE,signs,DOT,add,LPAREN,temp,DOT,toString,LPAREN,RPAREN,RPAREN,SEMI,temp,EQ,NEW,StringBuffer,LPAREN,RPAREN,SEMI,RBRACE,IF,LPAREN,string,DOT,charAt,LPAREN,i,RPAREN,EQEQ,-,RPAREN,isNegitive,EQ,true,SEMI,ELSE,temp,DOT,append,LPAREN,string,DOT,charAt,LPAREN,i,RPAREN,RPAREN,SEMI,tempIsNumber,EQ,true,SEMI,RBRACE,ELSE,LBRACE,IF,LPAREN,tempIsNumber,RPAREN,LBRACE,IF,LPAREN,isNegitive,RPAREN,LBRACE,numbers,DOT,add,LPAREN,Double,DOT,parseDouble,LPAREN,temp,DOT,toString,LPAREN,RPAREN,RPAREN,STAR,SUB,1,RPAREN,SEMI,isNegitive,EQ,false,SEMI,RBRACE,ELSE,LBRACE,numbers,DOT,add,LPAREN,Double,DOT,parseDouble,LPAREN,temp,DOT,toString,LPAREN,RPAREN,RPAREN,RPAREN,SEMI,RBRACE,temp,EQ,NEW,StringBuffer,LPAREN,RPAREN,SEMI,RBRACE,temp,DOT,append,LPAREN,string,DOT,charAt,LPAREN,i,RPAREN,RPAREN,SEMI,tempIsNumber,EQ,false,SEMI,RBRACE,RBRACE,IF,LPAREN,tempIsNumber,RPAREN,LBRACE,IF,LPAREN,isNegitive,RPAREN,LBRACE,numbers,DOT,add,LPAREN,Double,DOT,parseDouble,LPAREN,temp,DOT,toString,LPAREN,RPAREN,RPAREN,STAR,SUB,1,RPAREN,SEMI,isNegitive,EQ,false,SEMI,RBRACE,ELSE,LBRACE,numbers,DOT,add,LPAREN,Double,DOT,parseDouble,LPAREN,temp,DOT,toString,LPAREN,RPAREN,RPAREN,RPAREN,SEMI,RBRACE,temp,EQ,NEW,StringBuffer,LPAREN,RPAREN,SEMI,RBRACE,ELSE,LBRACE,signs,DOT,add,LPAREN,temp,DOT,toString,LPAREN,RPAREN,RPAREN,SEMI,temp,EQ,NEW,StringBuffer,LPAREN,RPAREN,SEMI,RBRACE,IF,LPAREN,numbers,DOT,size,LPAREN,RPAREN,BANGEQ,1,PLUS,signs,DOT,size,LPAREN,RPAREN,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""problem: "",PLUS,string,RPAREN,SEMI,IF,LPAREN,signs,DOT,size,LPAREN,RPAREN,EQEQ,1,RPAREN,LBRACE,THROW,NEW,InvalidInputException,LPAREN,""Invalid sign/variable/function: '"",PLUS,signs,DOT,get,LPAREN,0,RPAREN,PLUS,""'"",RPAREN,SEMI,RBRACE,THROW,NEW,InvalidInputException,LPAREN,RPAREN,SEMI,RBRACE,WHILE,LPAREN,signs,DOT,contains,LPAREN,""root"",RPAREN,RPAREN,LBRACE,int,index,EQ,signs,DOT,indexOf,LPAREN,""root"",RPAREN,SEMI,double,num,EQ,Math,DOT,pow,LPAREN,numbers,DOT,get,LPAREN,index,PLUS,1,RPAREN,COMMA,1,SLASH,numbers,DOT,get,LPAREN,index,RPAREN,RPAREN,SEMI,signs,DOT,remove,LPAREN,index,RPAREN,SEMI,numbers,DOT,remove,LPAREN,index,RPAREN,SEMI,numbers,DOT,remove,LPAREN,index,RPAREN,SEMI,numbers,DOT,add,LPAREN,index,COMMA,num,RPAREN,SEMI,RBRACE,WHILE,LPAREN,signs,DOT,contains,LPAREN,""^"",RPAREN,RPAREN,LBRACE,int,index,EQ,signs,DOT,indexOf,LPAREN,""^"",RPAREN,SEMI,double,num,EQ,Math,DOT,pow,LPAREN,numbers,DOT,get,LPAREN,index,RPAREN,COMMA,numbers,DOT,get,LPAREN,index,PLUS,1,RPAREN,RPAREN,SEMI,signs,DOT,remove,LPAREN,index,RPAREN,SEMI,numbers,DOT,remove,LPAREN,index,RPAREN,SEMI,numbers,DOT,remove,LPAREN,index,RPAREN,SEMI,numbers,DOT,add,LPAREN,index,COMMA,num,RPAREN,SEMI,RBRACE,WHILE,LPAREN,signs,DOT,contains,LPAREN,""E"",RPAREN,RPAREN,LBRACE,int,index,EQ,signs,DOT,indexOf,LPAREN,""E"",RPAREN,SEMI,double,num,EQ,numbers,DOT,get,LPAREN,index,RPAREN,STAR,Math,DOT,pow,LPAREN,10,COMMA,numbers,DOT,get,LPAREN,index,PLUS,1,RPAREN,RPAREN,SEMI,signs,DOT,remove,LPAREN,index,RPAREN,SEMI,numbers,DOT,remove,LPAREN,index,RPAREN,SEMI,numbers,DOT,remove,LPAREN,index,RPAREN,SEMI,numbers,DOT,add,LPAREN,index,COMMA,num,RPAREN,SEMI,RBRACE,WHILE,LPAREN,signs,DOT,contains,LPAREN,""*"",RPAREN,BARBAR,signs,DOT,contains,LPAREN,""/"",RPAREN,RPAREN,LBRACE,int,index,EQ,0,SEMI,int,multIndex,EQ,signs,DOT,indexOf,LPAREN,""*"",RPAREN,SEMI,int,divIndex,EQ,signs,DOT,indexOf,LPAREN,""/"",RPAREN,SEMI,double,num,EQ,0.0,SEMI,IF,LPAREN,multIndex,EQEQ,SUB,1,BARBAR,LPAREN,divIndex,BANGEQ,SUB,1,AMPAMP,divIndex,LT,multIndex,RPAREN,RPAREN,LBRACE,index,EQ,divIndex,SEMI,num,EQ,numbers,DOT,get,LPAREN,index,RPAREN,SLASH,numbers,DOT,get,LPAREN,index,PLUS,1,RPAREN,SEMI,RBRACE,ELSE,LBRACE,index,EQ,multIndex,SEMI,num,EQ,numbers,DOT,get,LPAREN,index,RPAREN,STAR,numbers,DOT,get,LPAREN,index,PLUS,1,RPAREN,SEMI,RBRACE,signs,DOT,remove,LPAREN,index,RPAREN,SEMI,numbers,DOT,remove,LPAREN,index,RPAREN,SEMI,numbers,DOT,remove,LPAREN,index,RPAREN,SEMI,numbers,DOT,add,LPAREN,index,COMMA,num,RPAREN,SEMI,RBRACE,WHILE,LPAREN,signs,DOT,contains,LPAREN,""+"",RPAREN,BARBAR,signs,DOT,contains,LPAREN,""-"",RPAREN,RPAREN,LBRACE,int,index,EQ,0,SEMI,int,addIndex,EQ,signs,DOT,indexOf,LPAREN,""+"",RPAREN,SEMI,int,subIndex,EQ,signs,DOT,indexOf,LPAREN,""-"",RPAREN,SEMI,double,num,EQ,0.0,SEMI,IF,LPAREN,addIndex,EQEQ,SUB,1,BARBAR,LPAREN,subIndex,BANGEQ,SUB,1,AMPAMP,subIndex,LT,addIndex,RPAREN,RPAREN,LBRACE,index,EQ,subIndex,SEMI,num,EQ,numbers,DOT,get,LPAREN,index,RPAREN,SUB,numbers,DOT,get,LPAREN,index,PLUS,1,RPAREN,SEMI,RBRACE,ELSE,LBRACE,index,EQ,addIndex,SEMI,num,EQ,numbers,DOT,get,LPAREN,index,RPAREN,PLUS,numbers,DOT,get,LPAREN,index,PLUS,1,RPAREN,SEMI,RBRACE,signs,DOT,remove,LPAREN,index,RPAREN,SEMI,numbers,DOT,remove,LPAREN,index,RPAREN,SEMI,numbers,DOT,remove,LPAREN,index,RPAREN,SEMI,numbers,DOT,add,LPAREN,index,COMMA,num,RPAREN,SEMI,RBRACE,WHILE,LPAREN,signs,DOT,contains,LPAREN,""%"",RPAREN,RPAREN,LBRACE,int,index,EQ,signs,DOT,indexOf,LPAREN,""%"",RPAREN,SEMI,double,num,EQ,numbers,DOT,get,LPAREN,index,RPAREN,PERCENT,numbers,DOT,get,LPAREN,index,PLUS,1,RPAREN,SEMI,signs,DOT,remove,LPAREN,index,RPAREN,SEMI,numbers,DOT,remove,LPAREN,index,RPAREN,SEMI,numbers,DOT,remove,LPAREN,index,RPAREN,SEMI,numbers,DOT,add,LPAREN,index,COMMA,num,RPAREN,SEMI,RBRACE,IF,LPAREN,signs,DOT,size,LPAREN,RPAREN,GT,0,RPAREN,THROW,NEW,InvalidInputException,LPAREN,""These operators are not supported: "",PLUS,signs,RPAREN,SEMI,String,retVal,EQ,"""",SEMI,IF,LPAREN,numbers,DOT,get,LPAREN,0,RPAREN,PERCENT,1,EQEQ,0,RPAREN,LBRACE,retVal,EQ,"""",PLUS,Math,DOT,round,LPAREN,numbers,DOT,get,LPAREN,0,RPAREN,RPAREN,SEMI,RBRACE,ELSE,LBRACE,retVal,EQ,"""",PLUS,numbers,DOT,get,LPAREN,0,RPAREN,SEMI,RBRACE,RETURN,retVal,SEMI,RBRACE","	public static String solveStringWithFunctions(String string, ArrayList<NamedFunction> functions) throws InvalidInputException{
,		if(string == null || string.length() == 0)
,			throw new InvalidInputException(""Can not solve a blank string"");
,		
,		//remove spaces
,		if(string.substring(string.length()-1).equals("" ""))
,			string = string.substring(0,string.length()-1);
,		while(string.contains("" "")){
,			
,			int index = string.indexOf("" "");
,			System.out.println(index);
,			
,			if(string.charAt(0) == ' ')
,				string = string.substring(1);
,			else
,				string = string.substring(0,index) + string.substring(index+1);
,		}
,		
,		//replace variables 
,		//replaces the longest ones first to avoid short variables breaking up long ones
,		if(Variable.hasVars()){
,			//check for variables
,			for(String key : Variable.getVariableNames()){
,				while (string.contains(key)) {
,					int index = string.indexOf(key);
,					if(index > 0){	
,						//make sure it isn't part of another word
,						if(!Character.isLetter(string.charAt(index-1)))
,							string = string.substring(0,index) + Variable.getValue(key) + string.substring(index+key.length());
,						else
,							break;
,					}
,					else if (index + key.length() +1 < string.length()){
,						//make sure it isn't part of another word
,						if(!Character.isLetter(string.charAt(index+key.length()+1)))
,							string = string.substring(0,index) + Variable.getValue(key) + string.substring(index+key.length());
,						else
,							break;
,					}
,					else{
,						string = string.substring(0,index) + Variable.getValue(key) + string.substring(index+key.length());
,					}
,				}
,			}
,		}
,		
,		//doesn't start with a number so add one
,		/*
,		if(string.charAt(0) != '-' &&
,				string.charAt(0) != '.' &&
,				!Character.isDigit(string.charAt(0)))
,			string = ""0+"" + string;
,			*/
,		
,		//make sure it can multiply numbers to parentheses ex. 2(2) = 4
,		boolean doneChecking = false;
,		while(!doneChecking){
,			for(int i = 0; i < string.length(); i++){
,				if(i < string.length()-2 && Character.isDigit(string.charAt(i)) && string.charAt(i+1) == '('){
,					string = string.substring(0, i+1) + ""*"" + string.substring(i+1);
,					break;
,				}
,				if(i < string.length()-1 && string.charAt(i) == ')' && Character.isDigit(string.charAt(i+1))){
,					string = string.substring(0, i+1) + ""*"" + string.substring(i+1);
,					break;
,				}
,				if(i == string.length()-1)
,					doneChecking = true;
,			}
,		}
,		
,		//check for e
,		int countE = 0;
,		for(int i = 0; i<string.length();i++){
,			if(string.charAt(i) == 'e')
,				countE++;
,		}
,		//make sure the e isn't used in a word
,		int lastEIndex = -1;
,		for(int i = 0; i<MASK>countE;i++){
,			int index = string.indexOf('e', lastEIndex);
,			lastEIndex = index;
,			if(index == -1)
,				continue;
,			if(index>0 && !Character.isLetter(string.charAt(index-1)) && index<string.length()-2 && !Character.isLetter(string.charAt(index+1)))
,				string = string.substring(0,index) + Math.E + string.substring(index+1);
,			else if(index==0 && (string.length() == 1 || !Character.isLetter(string.charAt(index+1))))
,				string = string.substring(0,index) + Math.E + string.substring(index+1);
,			else if(index==string.length()-1 && !Character.isLetter(string.charAt(index-1)))
,				string = string.substring(0,index) + Math.E + string.substring(index+1);
,
,		}
,		
,		
,		//check for rand
,		while(string.contains(""rand"")){
,			int index = string.indexOf(""rand"");
,			string = string.substring(0,index) + Math.random() + string.substring(index+4);
,		}
,		//check for pi
,		while(string.contains(""pi"")){
,			int index = string.indexOf(""pi"");
,			string = string.substring(0,index) + Math.PI + string.substring(index+2);
,		}
,		//check for summations
,		//
,		//
,		while(string.contains(""sum("")){
,			System.out.println(""summation"");
,			//get index of closing paren
,			int parenCount = 0;
,			int commaCheck = 0;
,			int lastIndex = -1;
,			int bracketCount = 0;
,			for(int i = string.indexOf(""sum(""); i < string.length(); i++){
,				switch (string.charAt(i)) {
,				case '(':
,					parenCount++;
,					break;
,				case '{':
,					bracketCount++;
,					break;
,				case '}':
,					bracketCount--;
,					break;
,				case ',':
,					//only checks commas in sum function
,					if(parenCount<2 && bracketCount==0)
,						commaCheck++;
,					break;
,				}
,				//break out if sum function is over
,				if(string.charAt(i) == ')'){
,					parenCount--;
,					if(parenCount == 0){
,						lastIndex = i;
,						break;
,					}
,				}
,			}
,			//make sure input is valid
,			if(bracketCount != 0)
,				throw new InvalidInputException(""Check your brackets."");
,			if(lastIndex == -1)
,				throw new InvalidInputException(""Check Parenthesis in summation function."");
,			if(commaCheck != 2 && commaCheck !=1)
,				throw new InvalidInputException(""Summation function requires 3 arguments seperated by commas"");	
,			//call summation method with arguments
,			//get arguments
,			int indexOfSum = string.indexOf(""sum("");
,			int index1 = indexOfSum + 4;
,			//string that contains just the arguments
,			String args = string.substring(index1, lastIndex+1);
,			int argLastIndex = lastIndex - (string.substring(0, index1).length());
,			System.out.println(""char: ""+ args.charAt(argLastIndex));
,			index1 = 0;
,			System.out.println(""args: ""+args);
,			int fromIndex = index1;
,			if(commaCheck==1 && args.contains(""}"")){
,				fromIndex = args.indexOf('}');
,			}
,			int index2 = args.indexOf(',', fromIndex);
,			System.out.println(""from index: ""+fromIndex+""\n""+args);
,			String arg1 = args.substring(0, index2);
,			String arg2 = """";
,			//only need this arg for counter summation
,			if(commaCheck == 2){
,				index1=index2+1;
,				index2=args.indexOf(',',index1);
,				arg2 = args.substring(index1, index2);
,			}
,			
,			index1=index2+1;
,			index2=args.indexOf(')',index1);
,			String arg3 = args.substring(index1, argLastIndex);
,			//summation uses a list of numbers
,			if(commaCheck == 1){
,				System.out.println(""arg1: ""+arg1+""arg3: ""+arg3);
,				String[] list = Variable.listToArray(arg1);
,				string = string.substring(0, indexOfSum) + summation(list, arg3)+string.substring(1+lastIndex);
,				System.out.println(""String after list sum: ""+ string);
,			}
,			//summation uses counter
,			else{
,				int start,count;
,				try{
,					start = Integer.parseInt(arg1);
,					count = Integer.parseInt(arg2);
,				}
,				catch(Exception e){
,					throw new InvalidInputException(""First two arguments in summation function must be numbers."");
,				}	
,				string = string.substring(0, string.indexOf(""sum("")) + summation(start, count, 1, arg3)+string.substring(1+lastIndex);
,				System.out.println(""summation final: ""+string);
,			}	
,		}
,		
,		//
,		//
,		//
,		//check for functions
,		//
,		//
,		boolean checkForFunctions = true;
,		while(checkForFunctions){
,			checkForFunctions = false;
,			for(Functions.NamedFunction f : UserFunction.getAllFunctions()){
,				while(string.contains(f.getName()+""("")){
,					System.out.println(""contains system function-----start------"" + f.getName());
,					//check to make sure the name isn't just part of a word
,					int index = string.indexOf(f.getName());
,					if(index > 0){
,						if(Character.isLetter(string.charAt(index-1)))
,							break;
,					}
,//					else if(index + f.getName().length() + 1 < string.length()){
,//						if(Character.isLetter(string.charAt(index+f.getName().length()+1)))
,//							break;
,//					}
,					int beginIndex = string.indexOf('(', string.indexOf(f.getName()));
,					//count parenthesis
,					//count will start at 1 because the first index is a start paren and finish when the count is back to 0 by subtraction by
,					//each end paren
,					int count = 0,endIndex = -1;
,					for(int i = beginIndex; i<string.length();i++){
,						if(string.charAt(i) == '(')
,							count++;
,						else if(string.charAt(i) == ')')
,							count--;
,						if(count == 0){
,							//found the right index
,							endIndex = i;
,							//since we already found the index loop is pointless
,							break;
,						}
,					}
,					//make sure we found the right index
,					if(endIndex == -1)
,						throw new InvalidInputException(""Check your parenthesis"");
,					String args = string.substring(beginIndex+1, endIndex);
,					ArrayList<String> argsArray = new ArrayList<String>();
,					
,					int bracketCount = 0;
,					int argCount = 1;
,					for(int i = 0; i<args.length(); i++){
,						switch (args.charAt(i)) {
,						case '{':
,						case '(':
,							bracketCount++;
,							break;
,						case '}':
,						case ')':
,							bracketCount--;
,							break;
,						}
,						
,						//make sure it isn't a comma inside of a bracket
,						if(args.charAt(i) == ',' && bracketCount == 0){
,							argCount++;
,							System.out.println(""another"");
,						}
,						else if(argsArray.size() < argCount){
,							argsArray.add(""""+args.charAt(i));
,						}
,						else{
,							argsArray.set(argCount-1, argsArray.get(argCount-1)+args.charAt(i));
,						}	
,					}
,					
,					
,					//correct num of args so replace function with the answer to it
,					System.out.println(""string to replace: ""+string.substring(string.indexOf(f.getName()), endIndex+1));
,					System.out.println(f.eval(argsArray));
,					string = string.substring(0, string.indexOf(f.getName())) +  f.eval(argsArray) + string.substring(endIndex+1);
,					System.out.println(""final: ""+ string);
,
,					System.out.println(""contains system function\n-----end------"");
,				}
,			}
,		}
,		
,		
,		
,		
,		//
,		//
,		//
,		//
,		//Check for lists and treat them as vectors at this point and return a vector
,		//take out all of the brackets and replace them with [] then switch them back after to avoid infinite loop  
,		if(string.contains(""{"")){
,			//shouldn't be any functions in the list at this point so we can split by comma
,			int index = string.indexOf('{');
,			int endIndex = string.indexOf('}');
,			//check to make sure vector is valid
,			int startcount=0, endcount=0;
,			for(int i = 0; i<string.length();i++){
,				switch (string.charAt(i)) {
,				case '{':
,					startcount++;
,					break;
,				case '}':
,					endcount++;
,					break;
,				}
,			}
,			//start is either after or right befor end cant have an empty list ex. {}
,			if(index >= endIndex-1)
,				throw new InvalidInputException(""Inavlid vector/list format"");
,			//too many starts and or ends
,			if(startcount != 1 || endcount != 1)
,				throw new InvalidInputException(""Can only have one vector/list per function"");
,			String list = string.substring(index+1, endIndex);
,			String[] listContents = list.split("","");
,			String result = ""{"";
,			if(listContents.length == 0)
,				throw new InvalidInputException(""Can't use empty vector"");
,			//solve the individual parts of the vector
,			for(int i = 0; i < listContents.length; i++){
,				String solveString = string.substring(0,index) + listContents[i] + string.substring(endIndex+1);
,				if(i != 0)
,					result += "","";
,				result += solveString(solveString);
,			}
,			
,			result += ""}"";
,			return result;
,		}
,		//switch back to normal brackets 
,		
,		//
,		//
,		//
,		//
,		//
,		
,		//check for parentheses 
,		if(string.contains(""("")){
,			//change to multiplication between parens
,			while(string.contains("")("")){
,				int index = string.indexOf("")("");
,				string = string.substring(0, index+1) + ""*"" + string.substring(index+1);
,			}
,			int tempIndex = string.indexOf(""("");
,
,			int startCount = 0;
,			int endCount = 0;
,			//check to make sure they have input the right amount of parens
,			for(int i = 0; i< string.length();i++){
,				if(string.charAt(i) == '(')
,					startCount++;
,				else if(string.charAt(i) == ')')
,					endCount++;
,			}
,			while(endCount>startCount){
,				int index = string.lastIndexOf(')');
,				if (index==-1)
,					break;
,				String temp = new String(string);
,				string = temp.substring(0, index);
,				if(index<temp.length()-1)
,					string+=temp.substring(index+1);
,				endCount--;
,			}
,			if(startCount != endCount){
,				System.out.println(""problem: ""+string);
,				throw new InvalidInputException(""Check your parentheses"");
,			}
,			int depthOfParen = 0;
,			int startIndex = tempIndex;
,
,			while(tempIndex < string.length() && tempIndex != -1){
,			
,				if(string.charAt(tempIndex) == '(')
,					depthOfParen++;
,				else if(string.charAt(tempIndex) == ')'){
,					depthOfParen--;
,				}
,				if(depthOfParen==0){
,					string = string.substring(0, startIndex)+solveString(string.substring(startIndex+1, tempIndex)) + string.substring(tempIndex+1);
,					tempIndex = string.indexOf('(');
,					startIndex = tempIndex;
,					//System.out.println(""String,index: ""+string+"" , ""+tempIndex);
,				}
,				else
,					tempIndex++;
,			}
,
,
,		}
,		//should not be any parenthesis at this point
,		//remove strays
,		while(string.contains(""("")){
,			String temp = new String(string);
,			string= temp.substring(0, temp.indexOf('('));
,			if(temp.indexOf('(') < temp.length()-1)
,				string = string + temp.substring(temp.indexOf('(')+1);
,		}
,		while(string.contains("")"")){
,			String temp = new String(string);
,			string= temp.substring(0, temp.indexOf(')'));
,			if(temp.indexOf(')') < temp.length()-1)
,				string = string + temp.substring(temp.indexOf(')')+1);
,		}
,		//System.out.println(""string before solve: ""+string);
,		
,		ArrayList<Double> numbers = new ArrayList<Double>();
,		ArrayList<String> signs = new ArrayList<String>();
,		StringBuffer temp = new StringBuffer();
,		boolean tempIsNumber = false;
,		boolean isNegitive = false;
,		//loop through all of the characters and fill the arrays with the numbers and the signs
,		for(int i = 0; i < string.length();i++){
,			//System.out.println(""Char: ""+string.charAt(i));
,					//number character if:
,					//string starts with a negitive
,			if((i==0 && string.charAt(i) == '-') || 
,					//it's a digit
,					Character.isDigit(string.charAt(i)) ||
,					//it's a decimal point
,					string.charAt(i) == '.' || 
,					//it is a negitive sign after anouther sign
,					(i>1 && string.charAt(i) == '-' && !Character.isDigit(string.charAt(i-1)))){
,				//temp was a sign to this point so put it into the signs array
,				if(!tempIsNumber && i > 0){
,					signs.add(temp.toString());
,					temp = new StringBuffer();
,				}
,				if(string.charAt(i) == '-')
,					isNegitive = true;
,				else
,					temp.append(string.charAt(i));
,				tempIsNumber = true;
,			}
,			else{
,				if(tempIsNumber){
,					if(isNegitive){
,						numbers.add(Double.parseDouble(temp.toString()) * -1);
,						isNegitive = false;
,					}
,					else{
,						numbers.add(Double.parseDouble(temp.toString()));
,					}
,					
,					temp = new StringBuffer();
,				}
,				temp.append(string.charAt(i));
,				tempIsNumber = false;
,			}
,		}
,		//add last item
,		if(tempIsNumber){
,			if(isNegitive){
,				numbers.add(Double.parseDouble(temp.toString()) * -1);
,				isNegitive = false;
,			}
,			else{
,				numbers.add(Double.parseDouble(temp.toString()));
,			}
,			
,			temp = new StringBuffer();
,		}
,		else{
,			signs.add(temp.toString());
,			temp = new StringBuffer();
,		}
,		//print arrays
,		//System.out.println(numbers);
,		//System.out.println(signs);
,		
,		//make sure they have to correct amount of signs
,		if(numbers.size() != 1 + signs.size()){
,			System.out.println(""problem: ""+string);
,			if(signs.size() == 1){
,				throw new InvalidInputException(""Invalid sign/variable/function: '""+signs.get(0)+""'"");
,			}
,			throw new InvalidInputException();
,		}
,		//10 5 20
,		//+ +
,		//solve using PEMDAS
,		while(signs.contains(""root"")){
,			int index = signs.indexOf(""root"");
,			double num =  Math.pow(numbers.get(index+1), 1/numbers.get(index)); 
,			signs.remove(index);
,			numbers.remove(index);
,			numbers.remove(index);
,			numbers.add(index, num);
,			
,		}
,		//exponents
,		while(signs.contains(""^"")){
,			int index = signs.indexOf(""^"");
,			double num = Math.pow(numbers.get(index),numbers.get(index+1));
,			signs.remove(index);
,			numbers.remove(index);
,			numbers.remove(index);
,			numbers.add(index, num);
,			
,		}
,	
,		while(signs.contains(""E"")){
,			int index = signs.indexOf(""E"");
,			double num = numbers.get(index) * Math.pow(10,numbers.get(index+1));
,			signs.remove(index);
,			numbers.remove(index);
,			numbers.remove(index);
,			numbers.add(index, num);
,			
,		}
,		
,		//multiplication | division
,		while(signs.contains(""*"") || signs.contains(""/"")){
,			int index = 0;
,			int multIndex = signs.indexOf(""*"");
,			int divIndex = signs.indexOf(""/"");
,			double num = 0.0;
,			if(multIndex == -1 || (divIndex != -1 && divIndex < multIndex)){
,				//divide
,				index = divIndex;
,				num = numbers.get(index) / numbers.get(index+1);
,			}
,			else{
,				index = multIndex;
,				num = numbers.get(index) * numbers.get(index+1);
,			}			
,			signs.remove(index);
,			numbers.remove(index);
,			numbers.remove(index);
,			numbers.add(index, num);
,		}
,		
,		//addition | subtraction
,		while(signs.contains(""+"") || signs.contains(""-"")){
,			int index = 0;
,			int addIndex = signs.indexOf(""+"");
,			int subIndex = signs.indexOf(""-"");
,			double num = 0.0;
,			if(addIndex == -1 || (subIndex != -1 && subIndex < addIndex)){
,				//divide
,				index = subIndex;
,				num = numbers.get(index) - numbers.get(index+1);
,			}
,			else{
,				index = addIndex;
,				num = numbers.get(index) + numbers.get(index+1);
,			}			
,			signs.remove(index);
,			numbers.remove(index);
,			numbers.remove(index);
,			numbers.add(index, num);
,		}
,		
,		//remainder division
,		while(signs.contains(""%"")){
,			int index = signs.indexOf(""%"");
,			double num = numbers.get(index) % numbers.get(index+1);
,			signs.remove(index);
,			numbers.remove(index);
,			numbers.remove(index);
,			numbers.add(index, num);
,			
,		}
,		
,		//check to see if there are still signs left if so then the sign in not supported
,		if(signs.size()>0)
,			throw new InvalidInputException(""These operators are not supported: ""+signs);
,		
,		
,		//System.out.println(""Solved to get: "" +string);
,	
,		String retVal = """";
,		if(numbers.get(0)%1 == 0){
,			retVal = """"+Math.round(numbers.get(0));
,		}
,		else{
,			retVal = """"+numbers.get(0);
,		}
,		return retVal;
,	}
"
9b07119d-5d87-44cb-94ac-77a9d4fc6019,6a705486-7417-4899-bc9b-41a49aca3049,GT,"PUBLIC,void,checkTasquesPendents,LPAREN,int,expd,RPAREN,LBRACE,abrevTutor,EQ,null,SEMI,IF,LPAREN,expd,<MASK>,0,RPAREN,LBRACE,jobs,DOT,remove,LPAREN,expd,RPAREN,SEMI,this,DOT,removeOberta,LPAREN,expd,RPAREN,SEMI,RBRACE,ELSE,LBRACE,jobs,DOT,clear,LPAREN,RPAREN,SEMI,oberts,DOT,clear,LPAREN,RPAREN,SEMI,RBRACE,IF,LPAREN,BANG,running,RPAREN,LBRACE,LongTask,task,EQ,NEW,LongTask,LPAREN,expd,RPAREN,SEMI,NEW,Thread,LPAREN,task,RPAREN,DOT,start,LPAREN,RPAREN,SEMI,running,EQ,true,SEMI,RBRACE,RBRACE","    public void checkTasquesPendents(int expd)
,    {
,        abrevTutor = null;
,        //Remove alumne de la llista
,        if(expd<MASK>0)
,        {
,            //Lleva nomes aquest alumne
,            jobs.remove(expd);
,            this.removeOberta(expd);
,        }
,        else
,        {
,            //hard reset
,            jobs.clear();
,            oberts.clear();
,        }
,        
,        if(!running)
,        {
,            LongTask task = new LongTask(expd);
,            new Thread(task).start();
,            running = true;
,        }
,    }
"
b7230215-6e3f-4905-a284-2581a2f7dd32,f460d1fa-1f56-454f-af82-d35f19a6118a,LTEQ,"MONKEYS_AT,Override,PUBLIC,void,paintComponent,LPAREN,Graphics,g,RPAREN,LBRACE,super,DOT,paintComponent,LPAREN,g,RPAREN,SEMI,FontMetrics,fontMetrics,EQ,component,DOT,getFontMetrics,LPAREN,component,DOT,getFont,LPAREN,RPAREN,RPAREN,SEMI,Insets,insets,EQ,getInsets,LPAREN,RPAREN,SEMI,int,availableWidth,EQ,getSize,LPAREN,RPAREN,DOT,width,SUB,insets,DOT,left,SUB,insets,DOT,right,SEMI,Rectangle,clip,EQ,g,DOT,getClipBounds,LPAREN,RPAREN,SEMI,int,rowStartOffset,EQ,component,DOT,viewToModel,LPAREN,NEW,Point,LPAREN,0,COMMA,clip,DOT,y,RPAREN,RPAREN,SEMI,int,endOffset,EQ,component,DOT,viewToModel,LPAREN,NEW,Point,LPAREN,0,COMMA,clip,DOT,y,PLUS,clip,DOT,height,RPAREN,RPAREN,SEMI,WHILE,LPAREN,rowStartOffset,<MASK>,endOffset,RPAREN,LBRACE,TRY,LBRACE,IF,LPAREN,isCurrentLine,LPAREN,rowStartOffset,RPAREN,RPAREN,g,DOT,setColor,LPAREN,getCurrentLineForeground,LPAREN,RPAREN,RPAREN,SEMI,ELSE,g,DOT,setColor,LPAREN,getForeground,LPAREN,RPAREN,RPAREN,SEMI,String,lineNumber,EQ,getTextLineNumber,LPAREN,rowStartOffset,RPAREN,SEMI,int,stringWidth,EQ,fontMetrics,DOT,stringWidth,LPAREN,lineNumber,RPAREN,SEMI,int,x,EQ,getOffsetX,LPAREN,availableWidth,COMMA,stringWidth,RPAREN,PLUS,insets,DOT,left,SEMI,int,y,EQ,getOffsetY,LPAREN,rowStartOffset,COMMA,fontMetrics,RPAREN,SEMI,g,DOT,drawString,LPAREN,lineNumber,COMMA,x,COMMA,y,RPAREN,SEMI,rowStartOffset,EQ,Utilities,DOT,getRowEnd,LPAREN,component,COMMA,rowStartOffset,RPAREN,PLUS,1,SEMI,RBRACE,CATCH,LPAREN,Exception,e,RPAREN,LBRACE,RBRACE,RBRACE,RBRACE","	@Override
,	public void paintComponent(Graphics g)
,	{
,		super.paintComponent(g);
,
,		//	Determine the width of the space available to draw the line number
,
,		FontMetrics fontMetrics = component.getFontMetrics( component.getFont() );
,		Insets insets = getInsets();
,		int availableWidth = getSize().width - insets.left - insets.right;
,
,		//  Determine the rows to draw within the clipped bounds.
,
,		Rectangle clip = g.getClipBounds();
,		int rowStartOffset = component.viewToModel( new Point(0, clip.y) );
,		int endOffset = component.viewToModel( new Point(0, clip.y + clip.height) );
,
,		while (rowStartOffset <MASK> endOffset)
,		{
,			try
,            {
,    			if (isCurrentLine(rowStartOffset))
,    				g.setColor( getCurrentLineForeground() );
,    			else
,    				g.setColor( getForeground() );
,
,    			//  Get the line number as a string and then determine the
,    			//  ""X"" and ""Y"" offsets for drawing the string.
,
,    			String lineNumber = getTextLineNumber(rowStartOffset);
,    			int stringWidth = fontMetrics.stringWidth( lineNumber );
,    			int x = getOffsetX(availableWidth, stringWidth) + insets.left;
,				int y = getOffsetY(rowStartOffset, fontMetrics);
,    			g.drawString(lineNumber, x, y);
,
,    			//  Move to the next row
,
,    			rowStartOffset = Utilities.getRowEnd(component, rowStartOffset) + 1;
,			}
,			catch(Exception e) {}
,		}
,	}
"
9b580ee6-153a-476e-abc4-93585610f66b,d44994ed-8d7b-44b0-8bd4-6747823ff588,STAR,"PUBLIC,void,transform,LPAREN,String,originalFile,COMMA,String,thumbnailFile,COMMA,int,thumbWidth,COMMA,int,thumbHeight,COMMA,int,quality,RPAREN,THROWS,Exception,LBRACE,Image,image,EQ,javax,DOT,imageio,DOT,ImageIO,DOT,read,LPAREN,NEW,File,LPAREN,originalFile,RPAREN,RPAREN,SEMI,double,thumbRatio,EQ,LPAREN,double,RPAREN,thumbWidth,SLASH,LPAREN,double,RPAREN,thumbHeight,SEMI,int,imageWidth,EQ,image,DOT,getWidth,LPAREN,null,RPAREN,SEMI,int,imageHeight,EQ,image,DOT,getHeight,LPAREN,null,RPAREN,SEMI,double,imageRatio,EQ,LPAREN,double,RPAREN,imageWidth,SLASH,LPAREN,double,RPAREN,imageHeight,SEMI,IF,LPAREN,thumbRatio,LT,imageRatio,RPAREN,LBRACE,thumbHeight,EQ,LPAREN,int,RPAREN,LPAREN,thumbWidth,SLASH,imageRatio,RPAREN,SEMI,RBRACE,ELSE,LBRACE,thumbWidth,EQ,LPAREN,int,RPAREN,LPAREN,thumbHeight,<MASK>,imageRatio,RPAREN,SEMI,RBRACE,IF,LPAREN,imageWidth,LT,thumbWidth,AMPAMP,imageHeight,LT,thumbHeight,RPAREN,LBRACE,thumbWidth,EQ,imageWidth,SEMI,thumbHeight,EQ,imageHeight,SEMI,RBRACE,ELSE,IF,LPAREN,imageWidth,LT,thumbWidth,RPAREN,thumbWidth,EQ,imageWidth,SEMI,ELSE,IF,LPAREN,imageHeight,LT,thumbHeight,RPAREN,thumbHeight,EQ,imageHeight,SEMI,BufferedImage,thumbImage,EQ,NEW,BufferedImage,LPAREN,thumbWidth,COMMA,thumbHeight,COMMA,BufferedImage,DOT,TYPE_INT_RGB,RPAREN,SEMI,Graphics2D,graphics2D,EQ,thumbImage,DOT,createGraphics,LPAREN,RPAREN,SEMI,graphics2D,DOT,setBackground,LPAREN,Color,DOT,WHITE,RPAREN,SEMI,graphics2D,DOT,setPaint,LPAREN,Color,DOT,WHITE,RPAREN,SEMI,graphics2D,DOT,fillRect,LPAREN,0,COMMA,0,COMMA,thumbWidth,COMMA,thumbHeight,RPAREN,SEMI,graphics2D,DOT,setRenderingHint,LPAREN,RenderingHints,DOT,KEY_INTERPOLATION,COMMA,RenderingHints,DOT,VALUE_INTERPOLATION_BILINEAR,RPAREN,SEMI,graphics2D,DOT,drawImage,LPAREN,image,COMMA,0,COMMA,0,COMMA,thumbWidth,COMMA,thumbHeight,COMMA,null,RPAREN,SEMI,javax,DOT,imageio,DOT,ImageIO,DOT,write,LPAREN,thumbImage,COMMA,""JPG"",COMMA,NEW,File,LPAREN,thumbnailFile,RPAREN,RPAREN,SEMI,RBRACE","	  public void transform(String originalFile, String thumbnailFile, int thumbWidth, int thumbHeight, int quality) throws Exception 
,	  {
,	    Image image = javax.imageio.ImageIO.read(new File(originalFile));
,	      
,	      double thumbRatio = (double)thumbWidth / (double)thumbHeight;
,	      int imageWidth    = image.getWidth(null);
,	      int imageHeight   = image.getHeight(null);
,	      double imageRatio = (double)imageWidth / (double)imageHeight;
,	      if (thumbRatio < imageRatio) 
,	      {
,	        thumbHeight = (int)(thumbWidth / imageRatio);
,	      } 
,	      else 
,	      {
,	          thumbWidth = (int)(thumbHeight <MASK> imageRatio);
,	      }
,	      
,	    if(imageWidth < thumbWidth && imageHeight < thumbHeight)
,	    {
,	      thumbWidth = imageWidth;
,	      thumbHeight = imageHeight;
,	    }
,	    else if(imageWidth < thumbWidth)
,	      thumbWidth = imageWidth;
,	    else if(imageHeight < thumbHeight)
,	      thumbHeight = imageHeight;
,
,	      BufferedImage thumbImage = new BufferedImage(thumbWidth, thumbHeight, BufferedImage.TYPE_INT_RGB);
,	      Graphics2D graphics2D = thumbImage.createGraphics();
,	      graphics2D.setBackground(Color.WHITE);
,	      graphics2D.setPaint(Color.WHITE); 
,	      graphics2D.fillRect(0, 0, thumbWidth, thumbHeight);
,	      graphics2D.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
,	      graphics2D.drawImage(image, 0, 0, thumbWidth, thumbHeight, null);
,	      
,	    javax.imageio.ImageIO.write(thumbImage, ""JPG"", new File(thumbnailFile));
,	  }
"
e804bdf1-7a07-4e36-aee6-aba6a427cf38,8f418df9-c2d2-41a8-b2b5-9f2123769ac9,STAR,"MONKEYS_AT,SuppressWarnings,LPAREN,""unchecked"",RPAREN,PUBLIC,AdjacencyListWeightedDirectedGraph,LT,WeightedEdge,GT,findSolution,LPAREN,WeightedGraph,LT,QUES,EXTENDS,WeightedEdge,GT,g,RPAREN,THROWS,IllegalArgumentException,LBRACE,int,n,EQ,g,DOT,getNumberOfVertices,LPAREN,RPAREN,SEMI,UnionFindNode,LT,Integer,GT,LBRACKET,RBRACKET,ufNodes,EQ,NEW,UnionFindNode,LBRACKET,n,RBRACKET,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,n,SEMI,i,PLUSPLUS,RPAREN,LBRACE,ufNodes,LBRACKET,i,RBRACKET,EQ,uf,DOT,makeSet,LPAREN,i,RPAREN,SEMI,RBRACE,LinkedList,LT,WeightedEdge,GT,q,EQ,bucketSortEdges,LPAREN,g,RPAREN,SEMI,AdjacencyListWeightedDirectedGraph,LT,WeightedEdge,GT,mst,EQ,NEW,AdjacencyListWeightedDirectedGraph,LT,WeightedEdge,GT,LPAREN,n,RPAREN,SEMI,WHILE,LPAREN,mst,DOT,getNumberOfEdges,LPAREN,RPAREN,LT,LPAREN,n,SUB,1,RPAREN,<MASK>,2,RPAREN,LBRACE,WeightedEdge,e,EQ,q,DOT,removeFirst,LPAREN,RPAREN,SEMI,int,cu,EQ,LPAREN,Integer,RPAREN,uf,DOT,find,LPAREN,ufNodes,LBRACKET,e,DOT,getSource,LPAREN,RPAREN,RBRACKET,RPAREN,DOT,getItem,LPAREN,RPAREN,SEMI,int,cv,EQ,LPAREN,Integer,RPAREN,uf,DOT,find,LPAREN,ufNodes,LBRACKET,e,DOT,getTarget,LPAREN,RPAREN,RBRACKET,RPAREN,DOT,getItem,LPAREN,RPAREN,SEMI,IF,LPAREN,cu,BANGEQ,cv,RPAREN,LBRACE,mst,DOT,addEdge,LPAREN,NEW,WeightedEdge,LPAREN,e,DOT,getSource,LPAREN,RPAREN,COMMA,e,DOT,getTarget,LPAREN,RPAREN,COMMA,e,DOT,getWeight,LPAREN,RPAREN,RPAREN,RPAREN,SEMI,mst,DOT,addEdge,LPAREN,NEW,WeightedEdge,LPAREN,e,DOT,getTarget,LPAREN,RPAREN,COMMA,e,DOT,getSource,LPAREN,RPAREN,COMMA,e,DOT,getWeight,LPAREN,RPAREN,RPAREN,RPAREN,SEMI,uf,DOT,union,LPAREN,ufNodes,LBRACKET,cu,RBRACKET,COMMA,ufNodes,LBRACKET,cv,RBRACKET,RPAREN,SEMI,RBRACE,RBRACE,RETURN,mst,SEMI,RBRACE","	@SuppressWarnings(""unchecked"")
,	public AdjacencyListWeightedDirectedGraph<WeightedEdge> findSolution
,		(WeightedGraph<? extends WeightedEdge> g)
,		throws IllegalArgumentException {
,		
,		int n = g.getNumberOfVertices();
,		
,		UnionFindNode<Integer>[] ufNodes = new UnionFindNode[n];
,		
,		for (int i = 0; i < n; i++) {
,			ufNodes[i] = uf.makeSet(i);
,		}
,		
,		// presort edges accoding to their msb-weights
,		LinkedList<WeightedEdge> q = bucketSortEdges(g);
,		
,		// prepare the resulting msb-minimum spanning tree
,		AdjacencyListWeightedDirectedGraph<WeightedEdge> mst =
,			new AdjacencyListWeightedDirectedGraph<WeightedEdge>(n);
,		//int i=0;
,		while (mst.getNumberOfEdges() < (n - 1) <MASK> 2) {
,		//	i++;
,		//	System.out.println(i++);
,			
,			WeightedEdge e = q.removeFirst();
,		
,			int cu = (Integer)uf.find(ufNodes[e.getSource()]).getItem();
,			int cv = (Integer)uf.find(ufNodes[e.getTarget()]).getItem();
,			
,			if (cu != cv) {
,				mst.addEdge(new WeightedEdge
,						(e.getSource(),
,						 e.getTarget(),
,						 e.getWeight()));
,				
,				mst.addEdge(new WeightedEdge
,						(e.getTarget(),
,						 e.getSource(),
,						 e.getWeight()));
,				
,				uf.union(ufNodes[cu], ufNodes[cv]);
,			}
,			
,		}
,		
,		return mst;
,	}
"
46b67b7f-680f-46e8-8d0d-ebfce935cfd6,c0ad4002-0b52-4488-9a87-4f9ce8e41487,SLASH,"PRIVATE,void,generatePoliceStationPosition,LPAREN,RPAREN,LBRACE,int,center,EQ,mapInfo,DOT,getMapSize,LPAREN,RPAREN,<MASK>,2,SEMI,mapInfo,DOT,setCellType,LPAREN,center,COMMA,center,COMMA,MapInfo,DOT,POLICE_STATION,RPAREN,SEMI,mapInfo,DOT,setPoliceStationPosition,LPAREN,""("",PLUS,center,PLUS,"","",PLUS,center,PLUS,"")"",RPAREN,SEMI,RBRACE","    private void generatePoliceStationPosition() {
,        int center = mapInfo.getMapSize()<MASK>2;
,        mapInfo.setCellType(center, center, MapInfo.POLICE_STATION);
,        mapInfo.setPoliceStationPosition(""(""+center+"",""+center+"")"");
,    }
"
aed9046f-504a-49f9-b9ef-f36cca22ba93,0631d8a8-a869-4f33-b46d-2051f9c5244b,SLASH,"MONKEYS_AT,Override,PUBLIC,double,getKosztyUzyskania,LPAREN,RPAREN,LBRACE,RETURN,LPAREN,getObliczonaPodstawa,LPAREN,RPAREN,STAR,20,RPAREN,<MASK>,100,SEMI,RBRACE","	@Override
,	public double getKosztyUzyskania() {
,		return (getObliczonaPodstawa()*20)<MASK>100;
,	}
"
ee6285e4-70fb-4aa1-99e0-6f8cd1871b27,49c51670-09e5-4c0d-888b-5778f76dff5b,LTEQ,"PUBLIC,STATIC,void,main,LPAREN,String,args,LBRACKET,RBRACKET,RPAREN,LBRACE,long,begin,EQ,System,DOT,currentTimeMillis,LPAREN,RPAREN,SEMI,int,total,EQ,219521,SEMI,int,limit,EQ,20000,SEMI,ExecutorService,executorService,EQ,Executors,DOT,newFixedThreadPool,LPAREN,total,SLASH,limit,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,total,SLASH,limit,SEMI,i,PLUSPLUS,RPAREN,LBRACE,String,name,EQ,""T"",PLUS,i,SEMI,executorService,DOT,execute,LPAREN,NEW,SetIDF,LPAREN,name,COMMA,i,STAR,limit,COMMA,limit,RPAREN,RPAREN,SEMI,RBRACE,executorService,DOT,shutdown,LPAREN,RPAREN,SEMI,WHILE,LPAREN,BANG,executorService,DOT,isTerminated,LPAREN,RPAREN,RPAREN,LBRACE,RBRACE,long,end,EQ,System,DOT,currentTimeMillis,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""total time: "",PLUS,LPAREN,end,SUB,begin,RPAREN,SLASH,1000,RPAREN,SEMI,RBRACE","	public static void main(String args[])
,	{
,		long begin=System.currentTimeMillis();
,		int total=219521;
,		int limit=20000;
,		ExecutorService executorService = Executors.newFixedThreadPool(total/limit);
,		for(int i=0;i<MASK>total/limit;i++)
,		{
,			String name=""T""+i;
,			executorService.execute(new SetIDF(name,i*limit,limit));
,		}
,		executorService.shutdown();
,		while(!executorService.isTerminated()){}
,		long end=System.currentTimeMillis();
,		System.out.println(""total time: ""+(end-begin)/1000);
,	}	
"
192d7c63-30c8-4cf8-8cc9-29f5bc66ec73,680c0b33-c3b5-4ace-8f24-0140efdb9647,PERCENT,"PUBLIC,void,getAggProbability,LPAREN,double,LBRACKET,RBRACKET,sum,COMMA,List,LT,Double,GT,active,COMMA,List,LT,Double,GT,rest,RPAREN,LBRACE,sum,LBRACKET,1,RBRACKET,PLUSPLUS,SEMI,IF,LPAREN,rest,DOT,size,LPAREN,RPAREN,EQEQ,0,RPAREN,LBRACE,double,sign,SEMI,IF,LPAREN,LPAREN,active,DOT,size,LPAREN,RPAREN,PLUS,1,RPAREN,<MASK>,2,EQEQ,1,RPAREN,sign,EQ,SUB,1,SEMI,ELSE,sign,EQ,1,SEMI,double,andValue,EQ,0.0,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,active,DOT,size,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,i,EQEQ,0,RPAREN,andValue,EQ,active,DOT,get,LPAREN,i,RPAREN,SEMI,ELSE,andValue,STAREQ,active,DOT,get,LPAREN,i,RPAREN,SEMI,RBRACE,sum,LBRACKET,0,RBRACKET,PLUSEQ,andValue,STAR,sign,SEMI,RBRACE,ELSE,LBRACE,List,LT,Double,GT,next1,EQ,NEW,ArrayList,LT,Double,GT,LPAREN,active,RPAREN,SEMI,List,LT,Double,GT,next2,EQ,NEW,ArrayList,LT,Double,GT,LPAREN,rest,RPAREN,SEMI,List,LT,Double,GT,next3,EQ,NEW,ArrayList,LT,Double,GT,LPAREN,active,RPAREN,SEMI,next1,DOT,add,LPAREN,rest,DOT,get,LPAREN,0,RPAREN,RPAREN,SEMI,next2,DOT,remove,LPAREN,0,RPAREN,SEMI,this,DOT,getAggProbability,LPAREN,sum,COMMA,next1,COMMA,next2,RPAREN,SEMI,this,DOT,getAggProbability,LPAREN,sum,COMMA,next3,COMMA,next2,RPAREN,SEMI,RBRACE,RBRACE","	public void getAggProbability(double[] sum, List<Double> active, List<Double> rest){
,		sum[1]++;
,		if(rest.size() == 0){
,			double sign;
,			if((active.size() + 1) <MASK> 2 == 1) //this acts as the (-1)^(k-1) term for alternating subtraction and addition
,				sign = -1;
,			else
,				sign = 1;
,			//perform the probability equivalent of AND of the ""set"", which is multiplication of the probabilities
,			double andValue = 0.0;
,			for(int i = 0; i < active.size(); i++){
,				if(i == 0)
,					andValue = active.get(i);
,				else
,					andValue *= active.get(i);
,			}
,			sum[0] += andValue * sign;
,		} else {
,			//shallow copy of lists
,			List<Double> next1 = new ArrayList<Double>(active);
,			List<Double> next2 = new ArrayList<Double>(rest);
,			List<Double> next3 = new ArrayList<Double>(active);
,			next1.add(rest.get(0));
,			next2.remove(0);
,
,			//recursively call subsets
,			this.getAggProbability(sum,next1,next2);
,			this.getAggProbability(sum,next3,next2);
,		}
,	}
"
b5ee7e5e-a7bf-41d4-8880-3ac95d2f8822,0a053bcd-f6da-4b11-9a2e-4310c760153e,BANGEQ,"PRIVATE,void,go,LPAREN,RPAREN,LBRACE,TRY,LBRACE,FileReader,fr,EQ,NEW,FileReader,LPAREN,inputFile,RPAREN,SEMI,BufferedReader,br,EQ,NEW,BufferedReader,LPAREN,fr,RPAREN,SEMI,String,ln,EQ,br,DOT,readLine,LPAREN,RPAREN,SEMI,String,LBRACKET,RBRACKET,species,EQ,LBRACE,RBRACE,SEMI,WHILE,LPAREN,ln,<MASK>,null,RPAREN,LBRACE,StringTokenizer,stk,EQ,NEW,StringTokenizer,LPAREN,ln,COMMA,"", \t"",RPAREN,SEMI,int,nsp,EQ,stk,DOT,countTokens,LPAREN,RPAREN,SUB,1,SEMI,String,tok,SEMI,IF,LPAREN,first,RPAREN,LBRACE,species,EQ,NEW,String,LBRACKET,nsp,RBRACKET,SEMI,stk,DOT,nextToken,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,nsp,SUB,1,SEMI,i,PLUSPLUS,RPAREN,LBRACE,tok,EQ,stk,DOT,nextToken,LPAREN,RPAREN,SEMI,species,LBRACKET,i,RBRACKET,EQ,tok,SEMI,fm,DOT,put,LPAREN,tok,COMMA,NEW,TreeMap,LT,String,COMMA,String,GT,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,first,EQ,false,SEMI,RBRACE,ELSE,LBRACE,String,pu,EQ,stk,DOT,nextToken,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,nsp,SUB,1,SEMI,i,PLUSPLUS,RPAREN,LBRACE,tok,EQ,stk,DOT,nextToken,LPAREN,RPAREN,SEMI,IF,LPAREN,Double,DOT,parseDouble,LPAREN,tok,RPAREN,GT,0,RPAREN,LBRACE,fm,DOT,get,LPAREN,species,LBRACKET,i,RBRACKET,RPAREN,DOT,put,LPAREN,pu,COMMA,""1"",RPAREN,SEMI,RBRACE,RBRACE,RBRACE,ln,EQ,br,DOT,readLine,LPAREN,RPAREN,SEMI,RBRACE,Iterator,LT,String,GT,it,EQ,fm,DOT,keySet,LPAREN,RPAREN,DOT,iterator,LPAREN,RPAREN,SEMI,FileWriter,fw,EQ,NEW,FileWriter,LPAREN,outputFile,RPAREN,SEMI,BufferedWriter,bw,EQ,NEW,BufferedWriter,LPAREN,fw,RPAREN,SEMI,bw,DOT,write,LPAREN,""species,pu,amount\n"",RPAREN,SEMI,WHILE,LPAREN,it,DOT,hasNext,LPAREN,RPAREN,RPAREN,LBRACE,String,spec,EQ,it,DOT,next,LPAREN,RPAREN,SEMI,Map,LT,String,COMMA,String,GT,fm2,EQ,fm,DOT,get,LPAREN,spec,RPAREN,SEMI,Iterator,LT,String,GT,it2,EQ,fm2,DOT,keySet,LPAREN,RPAREN,DOT,iterator,LPAREN,RPAREN,SEMI,WHILE,LPAREN,it2,DOT,hasNext,LPAREN,RPAREN,RPAREN,LBRACE,String,punit,EQ,it2,DOT,next,LPAREN,RPAREN,SEMI,bw,DOT,write,LPAREN,spec,PLUS,"", "",PLUS,punit,PLUS,"", "",PLUS,fm2,DOT,get,LPAREN,punit,RPAREN,PLUS,""\n"",RPAREN,SEMI,RBRACE,RBRACE,br,DOT,close,LPAREN,RPAREN,SEMI,bw,DOT,flush,LPAREN,RPAREN,SEMI,bw,DOT,close,LPAREN,RPAREN,SEMI,fw,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,FileNotFoundException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,IOException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,RBRACE","	private void go(){
,		
,		try {
,			FileReader fr = new FileReader(inputFile);
,			BufferedReader br = new BufferedReader(fr);
,			String ln = br.readLine();
,			String[] species = {};
,			
,			while(ln <MASK> null){
,				StringTokenizer stk = new StringTokenizer(ln,"", \t"");
,				int nsp = stk.countTokens()-1;
,				String tok;
,				if(first){
,					species = new String[nsp];
,					stk.nextToken();
,					for(int i = 0; i < nsp-1; i++){
,						tok = stk.nextToken();
,						species[i] = tok;
,						fm.put(tok, new TreeMap<String,String>());
,					}
,					first = false;
,				}
,
,				else{
,					String pu = stk.nextToken();
,					for(int i = 0; i < nsp-1; i++){
,						tok = stk.nextToken();
,						if(Double.parseDouble(tok)>0){
,							//fm.get(species[i]).put(pu, tok);
,							fm.get(species[i]).put(pu, ""1"");
,						}
,					}
,				}
,				
,				ln = br.readLine();
,			}
,			
,			Iterator<String> it = fm.keySet().iterator();
,			FileWriter fw = new FileWriter(outputFile);
,			BufferedWriter bw = new BufferedWriter(fw);
,			bw.write(""species,pu,amount\n"");
,			
,			while(it.hasNext()){
,				
,				String spec = it.next();
,				Map<String,String> fm2 = fm.get(spec);
,				Iterator<String> it2 = fm2.keySet().iterator();
,				
,				while(it2.hasNext()){
,					String punit = it2.next();
,					bw.write(spec + "", "" + punit + "", "" + fm2.get(punit)+""\n"");
,				}
,				
,			}
,			
,			br.close();
,			bw.flush();
,			bw.close();
,			fw.close();
,			
,		} catch (FileNotFoundException e) {
,			e.printStackTrace();
,		}
,		catch (IOException e) {
,			e.printStackTrace();
,		}
,		
,	}
"
e804bdf1-7a07-4e36-aee6-aba6a427cf38,c197592c-a151-4b4f-b2d6-dd8f6f331eb8,STAR,"PRIVATE,void,initializeHead,LPAREN,RPAREN,LBRACE,MyList,DOT,Container,LT,Element,LT,T,GTGT,current,EQ,elements,DOT,lastContainer,SEMI,cost,EQ,Double,DOT,POSITIVE_INFINITY,SEMI,int,size,EQ,0,SEMI,WHILE,LPAREN,current,BANGEQ,elements,DOT,leftSentinel,RPAREN,LBRACE,size,PLUSPLUS,SEMI,cost,EQ,Math,DOT,min,LPAREN,cost,COMMA,current,DOT,item,DOT,cost,RPAREN,SEMI,current,EQ,current,DOT,predecessor,SEMI,RBRACE,current,EQ,elements,DOT,lastContainer,SEMI,int,processedElements,EQ,0,SEMI,int,superelementsInCurrentSublist,EQ,0,SEMI,Superelement,LT,T,GT,mostRecentSuperelement,EQ,null,SEMI,Superelement,LT,T,GT,currentSuperelement,EQ,null,SEMI,SplitFindminStructureGabow,LT,Superelement,LT,T,GTGT,currentLevelSublist,EQ,NEW,SplitFindminStructureGabow,LT,Superelement,LT,T,GTGT,LPAREN,ackermann,COMMA,i,SUB,1,RPAREN,SEMI,WHILE,LPAREN,size,SUB,processedElements,GT,3,RPAREN,LBRACE,int,level,EQ,ackermann,DOT,getInverse,LPAREN,i,COMMA,size,SUB,processedElements,RPAREN,SEMI,currentSuperelement,EQ,NEW,Superelement,LT,T,GT,LPAREN,level,RPAREN,SEMI,currentSuperelement,DOT,cost,EQ,Double,DOT,POSITIVE_INFINITY,SEMI,int,numberOfElements,EQ,2,<MASK>,ackermann,DOT,getValue,LPAREN,i,COMMA,level,RPAREN,SEMI,currentSuperelement,DOT,last,EQ,current,DOT,item,SEMI,FOR,LPAREN,int,k,EQ,0,SEMI,k,LT,numberOfElements,SEMI,k,PLUSPLUS,RPAREN,LBRACE,current,DOT,item,DOT,superelement,EQ,currentSuperelement,SEMI,currentSuperelement,DOT,cost,EQ,Math,DOT,min,LPAREN,currentSuperelement,DOT,cost,COMMA,current,DOT,item,DOT,cost,RPAREN,SEMI,current,EQ,current,DOT,predecessor,SEMI,RBRACE,currentSuperelement,DOT,first,EQ,current,DOT,successor,DOT,item,SEMI,IF,LPAREN,mostRecentSuperelement,BANGEQ,null,AMPAMP,mostRecentSuperelement,DOT,level,BANGEQ,level,RPAREN,LBRACE,IF,LPAREN,superelementsInCurrentSublist,GT,1,RPAREN,LBRACE,MyList,DOT,Container,LT,SplitFindminStructureGabow,LT,Superelement,LT,T,GTGTGT,container,EQ,sublists,DOT,addFirst,LPAREN,currentLevelSublist,RPAREN,SEMI,currentLevelSublist,DOT,containingContainerSublists,EQ,container,SEMI,currentLevelSublist,DOT,containingList,EQ,this,SEMI,RBRACE,ELSE,LBRACE,MyList,DOT,Container,LT,Superelement,LT,T,GTGT,container,EQ,singletonSuperelements,DOT,addFirst,LPAREN,mostRecentSuperelement,RPAREN,SEMI,mostRecentSuperelement,DOT,containingContainerSingletonSuperelements,EQ,container,SEMI,mostRecentSuperelement,DOT,containingList,EQ,this,SEMI,mostRecentSuperelement,DOT,elementInSublist,EQ,null,SEMI,mostRecentSuperelement,DOT,containingSublist,EQ,null,SEMI,RBRACE,currentLevelSublist,EQ,NEW,SplitFindminStructureGabow,LT,Superelement,LT,T,GTGT,LPAREN,ackermann,COMMA,i,SUB,1,RPAREN,SEMI,superelementsInCurrentSublist,EQ,0,SEMI,RBRACE,Element,LT,Superelement,LT,T,GTGT,e,EQ,currentLevelSublist,DOT,addFirst,LPAREN,currentSuperelement,COMMA,currentSuperelement,DOT,cost,RPAREN,SEMI,currentSuperelement,DOT,elementInSublist,EQ,e,SEMI,currentSuperelement,DOT,containingSublist,EQ,currentLevelSublist,SEMI,superelementsInCurrentSublist,PLUSPLUS,SEMI,processedElements,PLUSEQ,numberOfElements,SEMI,mostRecentSuperelement,EQ,currentSuperelement,SEMI,RBRACE,IF,LPAREN,superelementsInCurrentSublist,GT,1,RPAREN,LBRACE,MyList,DOT,Container,LT,SplitFindminStructureGabow,LT,Superelement,LT,T,GTGTGT,container,EQ,sublists,DOT,addFirst,LPAREN,currentLevelSublist,RPAREN,SEMI,currentLevelSublist,DOT,containingContainerSublists,EQ,container,SEMI,currentLevelSublist,DOT,containingList,EQ,this,SEMI,RBRACE,ELSE,LBRACE,IF,LPAREN,mostRecentSuperelement,BANGEQ,null,RPAREN,LBRACE,MyList,DOT,Container,LT,Superelement,LT,T,GTGT,container,EQ,singletonSuperelements,DOT,addFirst,LPAREN,mostRecentSuperelement,RPAREN,SEMI,mostRecentSuperelement,DOT,containingContainerSingletonSuperelements,EQ,container,SEMI,mostRecentSuperelement,DOT,containingList,EQ,this,SEMI,mostRecentSuperelement,DOT,elementInSublist,EQ,null,SEMI,mostRecentSuperelement,DOT,containingSublist,EQ,null,SEMI,RBRACE,RBRACE,WHILE,LPAREN,current,BANGEQ,elements,DOT,leftSentinel,RPAREN,LBRACE,MyList,DOT,Container,LT,Element,LT,T,GTGT,container,EQ,singletonElements,DOT,addFirst,LPAREN,current,DOT,item,RPAREN,SEMI,current,DOT,item,DOT,containingContainerSingletonElements,EQ,container,SEMI,current,DOT,item,DOT,containingList,EQ,this,SEMI,current,EQ,current,DOT,predecessor,SEMI,RBRACE,FOR,LPAREN,SplitFindminStructureGabow,LT,Superelement,LT,T,GTGT,sublist,COLON,sublists,RPAREN,LBRACE,sublist,DOT,initializeHead,LPAREN,RPAREN,SEMI,RBRACE,RBRACE","	private void initializeHead() {
,		// scan list right-to-left
,		MyList.Container<Element<T>> current = elements.lastContainer;
,		
,		// compute c(L) and the size of this list
,		cost = Double.POSITIVE_INFINITY;
,		int size = 0;
,		
,		while (current != elements.leftSentinel) {
,			size++;
,			cost = Math.min(cost, current.item.cost);
,			current = current.predecessor;
,		}
,		
,		// partition this list into superelements, sublists and singletons
,		current = elements.lastContainer;
,		int processedElements = 0;
,		int superelementsInCurrentSublist = 0;
,		Superelement<T> mostRecentSuperelement = null;
,		Superelement<T> currentSuperelement = null;
,		SplitFindminStructureGabow<Superelement<T>> currentLevelSublist =
,			new SplitFindminStructureGabow<Superelement<T>>(ackermann, i - 1);
,		
,		// check whether there are enough elements remaining for a superelement
,		while (size - processedElements > 3) {
,			// compute the level of the next superelement
,			int level = ackermann.getInverse(i, size - processedElements);
,			
,			// construct a new superelement
,			currentSuperelement = new Superelement<T>(level);
,			currentSuperelement.cost = Double.POSITIVE_INFINITY;
,			
,			// compute the number of elements of the next superelement
,			int numberOfElements = 2 <MASK> ackermann.getValue(i, level);
,
,			// add the elements to the current superelement
,			currentSuperelement.last = current.item;
,			for (int k = 0; k < numberOfElements; k++) {
,				// set e(x)
,				current.item.superelement = currentSuperelement;
,				
,				// update c(e(x))
,				currentSuperelement.cost =
,					Math.min(currentSuperelement.cost, current.item.cost);
,				
,				current = current.predecessor;
,			}
,			currentSuperelement.first = current.successor.item;
,
,			
,			if (mostRecentSuperelement != null && mostRecentSuperelement.level
,					!= level) {
,				
,				// now we have to add or reject our constructed sublist
,				if (superelementsInCurrentSublist > 1) {
,					MyList.Container<SplitFindminStructureGabow
,						<Superelement<T>>> container =
,							sublists.addFirst(currentLevelSublist);
,					currentLevelSublist.containingContainerSublists = container;
,					
,					currentLevelSublist.containingList = this;
,				} else {
,					// most recent superelement is a singleton
,					MyList.Container<Superelement<T>> container =
,						singletonSuperelements.addFirst(mostRecentSuperelement);
,					mostRecentSuperelement.
,						containingContainerSingletonSuperelements = container;
,					
,					mostRecentSuperelement.containingList = this;
,					mostRecentSuperelement.elementInSublist = null;
,					mostRecentSuperelement.containingSublist = null;
,				}
,				
,				// construct a new sublist - we might need it later
,				currentLevelSublist =
,					new SplitFindminStructureGabow<Superelement<T>>
,						(ackermann, i - 1);
,				superelementsInCurrentSublist = 0;
,			}
,			
,			// add the current superelement to the current sublist
,			Element<Superelement<T>> e = currentLevelSublist.addFirst
,				(currentSuperelement, currentSuperelement.cost);
,			currentSuperelement.elementInSublist = e;
,			currentSuperelement.containingSublist = currentLevelSublist;
,			superelementsInCurrentSublist++;
,			
,			// prepare next iteration
,			processedElements += numberOfElements;
,			mostRecentSuperelement = currentSuperelement;
,		}
,		
,		// process the last sublist individually, if necessary
,		if (superelementsInCurrentSublist > 1) {
,			MyList.Container<SplitFindminStructureGabow<Superelement<T>>>
,				container = sublists.addFirst(currentLevelSublist);
,			currentLevelSublist.containingContainerSublists = container;
,			
,			currentLevelSublist.containingList = this;
,		} else {
,			if (mostRecentSuperelement != null) {
,				// most recent superelement is a singleton
,				MyList.Container<Superelement<T>> container =
,					singletonSuperelements.addFirst(mostRecentSuperelement);
,				mostRecentSuperelement.
,					containingContainerSingletonSuperelements = container;
,				
,				mostRecentSuperelement.containingList = this;
,				mostRecentSuperelement.elementInSublist = null;
,				mostRecentSuperelement.containingSublist = null;
,			}
,		}
,
,		// process leftovers
,		while (current != elements.leftSentinel) {
,			MyList.Container<Element<T>> container =
,				singletonElements.addFirst(current.item);
,			current.item.containingContainerSingletonElements = container; 
,			current.item.containingList = this;
,			current = current.predecessor;
,		}
,		
,		// call A_{i-1} to do initialize-head on each sublist
,		for (SplitFindminStructureGabow<Superelement<T>> sublist : sublists) {
,			sublist.initializeHead();
,		}
,		
,	}
"
8817b45c-c104-442a-8047-a39e95fe55f2,5cd8e30a-c9de-4ded-a2ab-b3c932f7caa6,SUB,"MONKEYS_AT,Override,PROTECTED,void,setPanel,LPAREN,RPAREN,LBRACE,setMaximumSize,LPAREN,NEW,Dimension,LPAREN,LPAREN,int,RPAREN,Toolkit,DOT,getDefaultToolkit,LPAREN,RPAREN,DOT,getScreenSize,LPAREN,RPAREN,DOT,getWidth,LPAREN,RPAREN,<MASK>,15,COMMA,LPAREN,LPAREN,int,RPAREN,Toolkit,DOT,getDefaultToolkit,LPAREN,RPAREN,DOT,getScreenSize,LPAREN,RPAREN,DOT,getHeight,LPAREN,RPAREN,SLASH,4,RPAREN,RPAREN,RPAREN,SEMI,RBRACE","    @Override
,    protected void setPanel() {
,    
,        setMaximumSize(new Dimension((int) Toolkit.getDefaultToolkit().getScreenSize().getWidth() <MASK> 15, ((int) Toolkit.getDefaultToolkit().getScreenSize().getHeight() / 4)));
,    }
"
3913c395-db09-4ac4-8282-49a81b6a21f4,782f2b4e-101a-4108-9e4f-7377dc7f6018,BANGEQ,"PUBLIC,void,setTileMap,LPAREN,TileMap,map,RPAREN,LBRACE,assert,map,<MASK>,null,SEMI,tileMap,EQ,map,SEMI,dirty,EQ,true,SEMI,RBRACE","	public void setTileMap(TileMap map) {
,		assert map <MASK> null;
,		tileMap = map;
,		dirty = true;
,	}
"
7bd76208-9b34-4151-9ec4-57c6c52e0fcf,52215614-707b-40c0-87af-2eee4b695db3,GTEQ,"InstructionPtr,getjumpcontrol,LPAREN,int,pc,RPAREN,LBRACE,InstructionPtr,pi,EQ,NEW,InstructionPtr,LPAREN,this,DOT,f,DOT,code,COMMA,pc,RPAREN,SEMI,IF,LPAREN,pc,<MASK>,1,AMPAMP,testTMode,LPAREN,GET_OPCODE,LPAREN,pi,DOT,code,LBRACKET,pi,DOT,idx,SUB,1,RBRACKET,RPAREN,RPAREN,RPAREN,RETURN,NEW,InstructionPtr,LPAREN,pi,DOT,code,COMMA,pi,DOT,idx,SUB,1,RPAREN,SEMI,ELSE,RETURN,pi,SEMI,RBRACE","	InstructionPtr getjumpcontrol(int pc) {
,		InstructionPtr pi = new InstructionPtr(this.f.code, pc);
,		if (pc <MASK> 1 && testTMode(GET_OPCODE(pi.code[pi.idx - 1])))
,			return new InstructionPtr(pi.code, pi.idx - 1);
,		else
,			return pi;
,	}
"
5dc601a4-7cf6-4107-99f0-8942a78affb2,95916503-1710-4114-9048-136eec567f6b,STAR,"PUBLIC,void,push,LPAREN,Item,item,RPAREN,LBRACE,IF,LPAREN,N,EQEQ,items,DOT,length,RPAREN,LBRACE,resize,LPAREN,2,<MASK>,items,DOT,length,RPAREN,SEMI,RBRACE,items,LBRACKET,N,PLUSPLUS,RBRACKET,EQ,item,SEMI,RBRACE","	public void push(Item item) {
,		// 首先检查栈的容量,如果栈满了(N=items.length)，则增加栈的容量
,		if (N == items.length) {
,			resize(2 <MASK> items.length);
,		}
,		items[N++] = item;
,
,	}
"
7b37a4d3-9846-4b12-9860-e336321ade31,672ac88c-fe4e-4d8d-ac81-37d25641a6c8,GT,"PUBLIC,void,abrir,LPAREN,RPAREN,THROWS,Exception,LBRACE,IF,LPAREN,id,DOT,length,LPAREN,RPAREN,<MASK>,0,AMPAMP,BANG,id,DOT,equals,LPAREN,""0"",RPAREN,RPAREN,LBRACE,long,cod,EQ,Long,DOT,parseLong,LPAREN,id,RPAREN,SEMI,IF,LPAREN,venda,EQEQ,null,BARBAR,LPAREN,venda,BANGEQ,null,AMPAMP,venda,DOT,getId,LPAREN,RPAREN,BANGEQ,cod,RPAREN,RPAREN,setVenda,LPAREN,ejb,DOT,Open,LPAREN,cod,RPAREN,RPAREN,SEMI,RBRACE,RBRACE","    public void abrir() throws Exception {
,        if(id.length() <MASK> 0 && !id.equals(""0"")){
,            long cod = Long.parseLong(id);
,            if(venda == null || (venda != null && venda.getId() != cod ) )
,                setVenda(ejb.Open(cod));            
,        }
,    }
"
8817b45c-c104-442a-8047-a39e95fe55f2,a4f58ab6-6f08-4ac1-88aa-b6e00ec88454,SUB,"MONKEYS_AT,Override,PROTECTED,void,initComponents,LPAREN,RPAREN,LBRACE,currentMonthName,EQ,NEW,JLabel,LPAREN,RPAREN,SEMI,currentMonthName,DOT,setMinimumSize,LPAREN,NEW,java,DOT,awt,DOT,Dimension,LPAREN,80,COMMA,40,RPAREN,RPAREN,SEMI,currentMonthName,DOT,setPreferredSize,LPAREN,NEW,java,DOT,awt,DOT,Dimension,LPAREN,80,COMMA,40,RPAREN,RPAREN,SEMI,currentMonthName,DOT,setHorizontalAlignment,LPAREN,CENTER,RPAREN,SEMI,currentMonthName,DOT,setText,LPAREN,controller,DOT,getModel,LPAREN,RPAREN,DOT,getCurrentMonthName,LPAREN,RPAREN,PLUS,"" "",PLUS,controller,DOT,getModel,LPAREN,RPAREN,DOT,getCurrentYear,LPAREN,RPAREN,RPAREN,SEMI,previousMonthButton,EQ,NEW,BasicArrowButton,LPAREN,BasicArrowButton,DOT,WEST,RPAREN,SEMI,previousMonthButton,DOT,setMinimumSize,LPAREN,NEW,java,DOT,awt,DOT,Dimension,LPAREN,40,COMMA,20,RPAREN,RPAREN,SEMI,previousMonthButton,DOT,setPreferredSize,LPAREN,NEW,java,DOT,awt,DOT,Dimension,LPAREN,40,COMMA,20,RPAREN,RPAREN,SEMI,previousMonthButton,DOT,addActionListener,LPAREN,NEW,ActionListener,LPAREN,RPAREN,LBRACE,MONKEYS_AT,Override,PUBLIC,void,actionPerformed,LPAREN,ActionEvent,arg0,RPAREN,LBRACE,controller,DOT,propertyChange,LPAREN,NEW,PropertyChangeEvent,LPAREN,previousMonthButton,COMMA,""Date"",COMMA,controller,DOT,getModel,LPAREN,RPAREN,DOT,getCalendar,LPAREN,RPAREN,DOT,getTime,LPAREN,RPAREN,COMMA,controller,DOT,getModel,LPAREN,RPAREN,DOT,getCalendar,LPAREN,RPAREN,DOT,addUnitsToDate,LPAREN,controller,DOT,getModel,LPAREN,RPAREN,DOT,getCalendar,LPAREN,RPAREN,DOT,getTime,LPAREN,RPAREN,COMMA,Calendar,DOT,MONTH,COMMA,<MASK>,1,RPAREN,DOT,getTime,LPAREN,RPAREN,RPAREN,RPAREN,SEMI,controller,DOT,setWeeksNumberModelProperty,LPAREN,""Calendar"",COMMA,controller,DOT,getModel,LPAREN,RPAREN,DOT,getCalendar,LPAREN,RPAREN,RPAREN,SEMI,controller,DOT,setDaysModelProperty,LPAREN,""Calendar"",COMMA,controller,DOT,getModel,LPAREN,RPAREN,DOT,getCalendar,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,RPAREN,SEMI,nextMonthButton,EQ,NEW,BasicArrowButton,LPAREN,BasicArrowButton,DOT,EAST,RPAREN,SEMI,nextMonthButton,DOT,setMinimumSize,LPAREN,NEW,java,DOT,awt,DOT,Dimension,LPAREN,40,COMMA,20,RPAREN,RPAREN,SEMI,nextMonthButton,DOT,setPreferredSize,LPAREN,NEW,java,DOT,awt,DOT,Dimension,LPAREN,40,COMMA,20,RPAREN,RPAREN,SEMI,nextMonthButton,DOT,addActionListener,LPAREN,NEW,ActionListener,LPAREN,RPAREN,LBRACE,MONKEYS_AT,Override,PUBLIC,void,actionPerformed,LPAREN,ActionEvent,arg0,RPAREN,LBRACE,controller,DOT,propertyChange,LPAREN,NEW,PropertyChangeEvent,LPAREN,nextMonthButton,COMMA,""Date"",COMMA,controller,DOT,getModel,LPAREN,RPAREN,DOT,getCalendar,LPAREN,RPAREN,DOT,getTime,LPAREN,RPAREN,COMMA,controller,DOT,getModel,LPAREN,RPAREN,DOT,getCalendar,LPAREN,RPAREN,DOT,addUnitsToDate,LPAREN,controller,DOT,getModel,LPAREN,RPAREN,DOT,getCalendar,LPAREN,RPAREN,DOT,getTime,LPAREN,RPAREN,COMMA,Calendar,DOT,MONTH,COMMA,1,RPAREN,DOT,getTime,LPAREN,RPAREN,RPAREN,RPAREN,SEMI,controller,DOT,setWeeksNumberModelProperty,LPAREN,""Calendar"",COMMA,controller,DOT,getModel,LPAREN,RPAREN,DOT,getCalendar,LPAREN,RPAREN,RPAREN,SEMI,controller,DOT,setDaysModelProperty,LPAREN,""Calendar"",COMMA,controller,DOT,getModel,LPAREN,RPAREN,DOT,getCalendar,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,RPAREN,SEMI,GroupLayout,layout,EQ,NEW,GroupLayout,LPAREN,this,RPAREN,SEMI,setLayout,LPAREN,layout,RPAREN,SEMI,layout,DOT,setHorizontalGroup,LPAREN,layout,DOT,createParallelGroup,LPAREN,javax,DOT,swing,DOT,GroupLayout,DOT,Alignment,DOT,LEADING,RPAREN,DOT,addGroup,LPAREN,layout,DOT,createSequentialGroup,LPAREN,RPAREN,DOT,addGap,LPAREN,10,COMMA,10,COMMA,10,RPAREN,DOT,addComponent,LPAREN,currentMonthName,COMMA,DEFAULT_SIZE,COMMA,DEFAULT_SIZE,COMMA,Short,DOT,MAX_VALUE,RPAREN,DOT,addGap,LPAREN,10,COMMA,10,COMMA,10,RPAREN,RPAREN,DOT,addGroup,LPAREN,layout,DOT,createSequentialGroup,LPAREN,RPAREN,DOT,addGap,LPAREN,5,COMMA,5,COMMA,5,RPAREN,DOT,addComponent,LPAREN,previousMonthButton,COMMA,DEFAULT_SIZE,COMMA,DEFAULT_SIZE,COMMA,Short,DOT,MAX_VALUE,RPAREN,DOT,addGap,LPAREN,4,COMMA,4,COMMA,4,RPAREN,DOT,addComponent,LPAREN,nextMonthButton,COMMA,DEFAULT_SIZE,COMMA,DEFAULT_SIZE,COMMA,Short,DOT,MAX_VALUE,RPAREN,DOT,addGap,LPAREN,5,COMMA,5,COMMA,5,RPAREN,RPAREN,RPAREN,SEMI,layout,DOT,setVerticalGroup,LPAREN,layout,DOT,createParallelGroup,LPAREN,javax,DOT,swing,DOT,GroupLayout,DOT,Alignment,DOT,LEADING,RPAREN,DOT,addGroup,LPAREN,layout,DOT,createSequentialGroup,LPAREN,RPAREN,DOT,addGap,LPAREN,10,COMMA,10,COMMA,10,RPAREN,DOT,addComponent,LPAREN,currentMonthName,COMMA,DEFAULT_SIZE,COMMA,DEFAULT_SIZE,COMMA,Short,DOT,MAX_VALUE,RPAREN,DOT,addGap,LPAREN,15,COMMA,15,COMMA,15,RPAREN,DOT,addGroup,LPAREN,layout,DOT,createParallelGroup,LPAREN,javax,DOT,swing,DOT,GroupLayout,DOT,Alignment,DOT,BASELINE,RPAREN,DOT,addComponent,LPAREN,previousMonthButton,COMMA,DEFAULT_SIZE,COMMA,DEFAULT_SIZE,COMMA,Short,DOT,MAX_VALUE,RPAREN,DOT,addComponent,LPAREN,nextMonthButton,COMMA,DEFAULT_SIZE,COMMA,DEFAULT_SIZE,COMMA,Short,DOT,MAX_VALUE,RPAREN,RPAREN,DOT,addGap,LPAREN,15,COMMA,15,COMMA,15,RPAREN,RPAREN,RPAREN,SEMI,RBRACE","    @Override
,    protected void initComponents() {
,    
,        currentMonthName = new JLabel();
,        currentMonthName.setMinimumSize(new java.awt.Dimension(80, 40));
,        currentMonthName.setPreferredSize(new java.awt.Dimension(80, 40));
,        currentMonthName.setHorizontalAlignment(CENTER);
,        currentMonthName.setText(controller.getModel().getCurrentMonthName() + "" "" + controller.getModel().getCurrentYear());
,        previousMonthButton = new BasicArrowButton(BasicArrowButton.WEST);
,        previousMonthButton.setMinimumSize(new java.awt.Dimension(40, 20));
,        previousMonthButton.setPreferredSize(new java.awt.Dimension(40, 20));
,        previousMonthButton.addActionListener(new ActionListener() {
,            
,            @Override
,            public void actionPerformed(ActionEvent arg0) {
,            
,                controller.propertyChange(new PropertyChangeEvent(previousMonthButton, ""Date"", controller.getModel().getCalendar().getTime(), controller.getModel().getCalendar().addUnitsToDate(controller.getModel().getCalendar().getTime(), Calendar.MONTH, <MASK>1).getTime()));
,                controller.setWeeksNumberModelProperty(""Calendar"", controller.getModel().getCalendar());
,                controller.setDaysModelProperty(""Calendar"", controller.getModel().getCalendar());
,            }
,        });
,        nextMonthButton = new BasicArrowButton(BasicArrowButton.EAST);
,        nextMonthButton.setMinimumSize(new java.awt.Dimension(40, 20));
,        nextMonthButton.setPreferredSize(new java.awt.Dimension(40, 20));
,        nextMonthButton.addActionListener(new ActionListener() {
,            
,            @Override
,            public void actionPerformed(ActionEvent arg0) {
,            
,                controller.propertyChange(new PropertyChangeEvent(nextMonthButton, ""Date"", controller.getModel().getCalendar().getTime(), controller.getModel().getCalendar().addUnitsToDate(controller.getModel().getCalendar().getTime(), Calendar.MONTH, 1).getTime()));
,                controller.setWeeksNumberModelProperty(""Calendar"", controller.getModel().getCalendar());
,                controller.setDaysModelProperty(""Calendar"", controller.getModel().getCalendar());
,            }
,        });
,        
,        GroupLayout layout = new GroupLayout(this);
,        setLayout(layout);
,        
,        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addGap(10, 10, 10).addComponent(currentMonthName, DEFAULT_SIZE, DEFAULT_SIZE, Short.MAX_VALUE).addGap(10, 10, 10)).addGroup(layout.createSequentialGroup().addGap(5, 5, 5).addComponent(previousMonthButton, DEFAULT_SIZE, DEFAULT_SIZE, Short.MAX_VALUE).addGap(4, 4, 4).addComponent(nextMonthButton, DEFAULT_SIZE, DEFAULT_SIZE, Short.MAX_VALUE).addGap(5, 5, 5)));
,        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addGap(10, 10, 10).addComponent(currentMonthName, DEFAULT_SIZE, DEFAULT_SIZE, Short.MAX_VALUE).addGap(15, 15, 15).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(previousMonthButton, DEFAULT_SIZE, DEFAULT_SIZE, Short.MAX_VALUE).addComponent(nextMonthButton, DEFAULT_SIZE, DEFAULT_SIZE, Short.MAX_VALUE)).addGap(15, 15, 15)));
,    }
"
2dd830d4-e85f-41ec-b5a4-78a5402d9efb,9cf102b3-c91f-4198-9b89-89973e0ff5a2,SUB,"PUBLIC,JavaFestivalPlayer,LPAREN,JavaPlayer,player,COMMA,ArrayList,LT,PalaceCard,GT,validPalaceCards,COMMA,boolean,startedFest,RPAREN,LBRACE,this,DOT,player,EQ,player,SEMI,this,DOT,palaceCards,EQ,validPalaceCards,SEMI,this,DOT,discardedCards,EQ,NEW,ArrayList,LT,PalaceCard,GT,LPAREN,RPAREN,SEMI,this,DOT,isInFestival,EQ,true,SEMI,this,DOT,tabCount,EQ,<MASK>,1,SEMI,this,DOT,festivalBid,EQ,0,SEMI,this,DOT,famePointsToAward,EQ,0,SEMI,this,DOT,startedFestival,EQ,startedFest,SEMI,RBRACE","	public JavaFestivalPlayer(JavaPlayer player, ArrayList<PalaceCard> validPalaceCards, boolean startedFest) {
,		//call this when the player has the ability to be in the festival
,		//if they are not able, don't create a FestivalPlayer
,		this.player = player;
,		this.palaceCards = validPalaceCards;
,		this.discardedCards = new ArrayList<PalaceCard>();
,		this.isInFestival = true;
,		this.tabCount = <MASK>1;
,		this.festivalBid = 0;
,		this.famePointsToAward = 0;
,		this.startedFestival = startedFest;
,	}
"
38ed5e2e-bfac-4cc9-94e0-5ee38dabb0ca,96c4e484-7144-4def-9c83-ac9ca73d6151,EQEQ,"PUBLIC,FHashSet,LT,Elt,GT,with,LPAREN,Elt,elt,RPAREN,LBRACE,Object,t,EQ,with,LPAREN,tree,COMMA,elt,COMMA,hashCode,LPAREN,elt,RPAREN,RPAREN,SEMI,IF,LPAREN,t,<MASK>,tree,RPAREN,RETURN,this,SEMI,ELSE,RETURN,make,LPAREN,t,RPAREN,SEMI,RBRACE","    public FHashSet<Elt> with(Elt elt) {
,	Object t = with(tree, elt, hashCode(elt));
,	if (t <MASK> tree) return this;
,	else return make(t);
,    }
"
7adec7d8-cee7-4225-a9f6-43a8dd4e76a6,54305b85-8c52-4154-8569-b3f8e139ab42,STAR,"PUBLIC,void,StopSell,LPAREN,String,product,COMMA,String,strTime,COMMA,double,stopPrice,COMMA,int,amount,RPAREN,LBRACE,TRY,LBRACE,SimpleDateFormat,ft,EQ,NEW,SimpleDateFormat,LPAREN,""yyyy-MM-dd HH:mm:ss"",RPAREN,SEMI,Date,time,EQ,ft,DOT,parse,LPAREN,strTime,RPAREN,SEMI,PendingOrder,po,EQ,NEW,PendingOrder,LPAREN,this,DOT,account,COMMA,time,COMMA,product,COMMA,stopPrice,COMMA,amount,<MASK>,SUB,1,COMMA,""stop"",RPAREN,SEMI,Transaction,tx,EQ,session,DOT,beginTransaction,LPAREN,RPAREN,SEMI,session,DOT,save,LPAREN,po,RPAREN,SEMI,tx,DOT,commit,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,ParseException,ex,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""Error occurred when parsing "",PLUS,strTime,RPAREN,SEMI,ex,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,RBRACE","	public void StopSell(String product, String strTime, double stopPrice, int amount) {
,		try {
,			SimpleDateFormat ft = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"");
,			Date time = ft.parse(strTime);
,			PendingOrder po = new PendingOrder(this.account, time, product, stopPrice, amount <MASK> -1, ""stop"");
,			Transaction tx = session.beginTransaction();
,			session.save(po);
,			tx.commit();
,		}
,		catch(ParseException ex) {
,			System.out.println(""Error occurred when parsing "" + strTime);
,			ex.printStackTrace();
,		}
,	}
"
811987a2-df8f-411b-b35a-1f251eaec687,626aacc9-470a-4002-b7bf-33144ec499b9,SLASH,"PUBLIC,double,getValue,LPAREN,int,k,RPAREN,LBRACE,RETURN,c1,<MASK>,LPAREN,c2,PLUS,k,RPAREN,SEMI,RBRACE","    public double getValue(int k){
,        return c1<MASK>(c2 + k);
,    }
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,e489adb5-6926-45df-96aa-f151a97d7e4d,BANGEQ,"PUBLIC,void,draw,LPAREN,BufferedImage,canvas,COMMA,boolean,drawEdge,COMMA,boolean,drawCorners,RPAREN,LBRACE,FOR,LPAREN,int,y,EQ,2,SEMI,y,LT,_height,SUB,2,SEMI,y,PLUSPLUS,RPAREN,FOR,LPAREN,int,x,EQ,2,SEMI,x,LT,_width,SUB,2,SEMI,x,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,_image,LBRACKET,y,RBRACKET,LBRACKET,x,RBRACKET,EQEQ,FILLED,RPAREN,LBRACE,canvas,DOT,setRGB,LPAREN,x,PLUS,_left,COMMA,y,PLUS,_top,COMMA,ImageSegmenter,DOT,_drawColor,LBRACKET,_type,RBRACKET,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,drawEdge,AMPAMP,_image,LBRACKET,y,RBRACKET,LBRACKET,x,RBRACKET,EQEQ,EDGE,RPAREN,LBRACE,canvas,DOT,setRGB,LPAREN,x,PLUS,_left,COMMA,y,PLUS,_top,COMMA,000000,RPAREN,SEMI,RBRACE,RBRACE,IF,LPAREN,drawCorners,RPAREN,LBRACE,findLines,LPAREN,RPAREN,SEMI,IF,LPAREN,_lines,<MASK>,null,RPAREN,FOR,LPAREN,LineSegment,line,COLON,_lines,RPAREN,line,DOT,draw,LPAREN,canvas,DOT,createGraphics,LPAREN,RPAREN,COMMA,_left,COMMA,_top,RPAREN,SEMI,RBRACE,RBRACE","    public void draw(BufferedImage canvas, boolean drawEdge, boolean drawCorners)
,    {
,        for (int y = 2; y < _height-2; y++)
,        for (int x = 2; x < _width-2; x++)
,        {
,            if (_image[y][x] == FILLED)
,            {
,                canvas.setRGB(x + _left, y + _top, ImageSegmenter._drawColor[_type]);
,            }
,            else if (drawEdge && _image[y][x] == EDGE)
,            {
,                canvas.setRGB(x+_left, y+_top, 0x000000);
,            }
,        }
,        
,        
,        if (drawCorners)
,        {
,            findLines();
,            if (_lines <MASK> null)
,            for (LineSegment line : _lines)
,                line.draw(canvas.createGraphics(), _left, _top);
,        }
,    }
"
811987a2-df8f-411b-b35a-1f251eaec687,f72e8981-cf1f-4e43-a4df-531265764200,SLASH,"PUBLIC,int,getBinNumber,LPAREN,double,org_val,RPAREN,LBRACE,IF,LPAREN,org_val,GT,100,RPAREN,LBRACE,RETURN,num_of_states,SUB,1,SEMI,RBRACE,ELSE,IF,LPAREN,org_val,LTEQ,0,RPAREN,LBRACE,RETURN,0,SEMI,RBRACE,ELSE,RETURN,LPAREN,int,RPAREN,Math,DOT,floor,LPAREN,org_val,STAR,num_of_states,<MASK>,100,RPAREN,SEMI,RBRACE","		public int getBinNumber (double org_val)
,		{
,			if (org_val >100)
,			{
,				return num_of_states-1;
,			}
,			else if (org_val <= 0)
,			{
,				return 0;
,			}
,			else
,				return (int) Math.floor(org_val*num_of_states<MASK>100);
,		}
"
cc05b03d-25f2-41c3-9757-9766a7e6f7c2,1a6712c1-1cd1-4926-a793-182f9fc70c4e,PERCENT,"PRIVATE,boolean,isPrime,LPAREN,long,number,RPAREN,LBRACE,IF,LPAREN,number,LTEQ,2,RPAREN,LBRACE,RETURN,true,SEMI,RBRACE,FOR,LPAREN,long,i,EQ,2,SEMI,i,LT,number,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,LPAREN,number,<MASK>,i,RPAREN,EQEQ,0,RPAREN,LBRACE,RETURN,false,SEMI,RBRACE,RBRACE,RETURN,true,SEMI,RBRACE","	private boolean isPrime(long number) {
,	    if (number <=2) {
,	      return true;
,	    }
,	    for (long i=2; i<number; i++){
,	      if ((number <MASK> i)==0) {
,	        return false;
,	      }
,	    }
,	    return true;
,	  }
"
c694737b-29b6-48d5-90c3-b6e0b6d64d88,8a9f44e2-f913-460f-93ab-61be7e3f8619,PERCENT,"boolean,isOffsetRow,LPAREN,int,row,RPAREN,LBRACE,IF,LPAREN,row,<MASK>,2,EQEQ,1,RPAREN,LBRACE,RETURN,true,SEMI,RBRACE,RETURN,false,SEMI,RBRACE","    boolean isOffsetRow(int row) {
,        if (row <MASK> 2 == 1) {
,            return true;
,        }
,        return false;
,    }
"
ad0a2aad-9ad8-443c-832f-88b9f64460ed,51da3cc2-dcf9-493f-afa2-1b91237d3d03,EQ,"PROTECTED,void,initialize,LPAREN,RPAREN,LBRACE,shooter,DOT,resetV,LPAREN,RPAREN,SEMI,shooter,DOT,forward,<MASK>,false,SEMI,RBRACE","    protected void initialize() {
,        shooter.resetV();
,        shooter.forward <MASK> false;
,    }
"
56952896-479b-43e9-a9cf-c3f3bb9afc0e,96288e40-14f5-4488-8634-bb8ede9497f3,SUB,"MONKEYS_AT,Test,PUBLIC,void,test_createProduct,LPAREN,RPAREN,THROWS,Exception,LBRACE,Product,newProd,EQ,NEW,Product,LPAREN,<MASK>,1,COMMA,""tacos"",COMMA,""tacos desc"",COMMA,""mexican food"",COMMA,15.99,COMMA,5,COMMA,10,COMMA,5,COMMA,false,COMMA,""imgpath"",RPAREN,SEMI,int,prodId,EQ,pDAO,DOT,createProduct,LPAREN,newProd,RPAREN,SEMI,Product,testProd,EQ,pDAO,DOT,getProductByProductID,LPAREN,prodId,RPAREN,SEMI,assertTrue,LPAREN,""name did not match"",COMMA,testProd,DOT,getProductName,LPAREN,RPAREN,DOT,equalsIgnoreCase,LPAREN,""tacos"",RPAREN,RPAREN,SEMI,assertTrue,LPAREN,""description did not match"",COMMA,testProd,DOT,getDescription,LPAREN,RPAREN,DOT,equalsIgnoreCase,LPAREN,""tacos desc"",RPAREN,RPAREN,SEMI,assertTrue,LPAREN,""categoryName did not match"",COMMA,testProd,DOT,getCategoryName,LPAREN,RPAREN,DOT,equalsIgnoreCase,LPAREN,""mexican food"",RPAREN,RPAREN,SEMI,assertTrue,LPAREN,""price did not match"",COMMA,testProd,DOT,getUnitPrice,LPAREN,RPAREN,EQEQ,15.99,RPAREN,SEMI,assertTrue,LPAREN,""amt_in_stock did not match"",COMMA,testProd,DOT,getUnitsInStock,LPAREN,RPAREN,EQEQ,5,RPAREN,SEMI,assertTrue,LPAREN,""amt_on_order did not match"",COMMA,testProd,DOT,getUnitsOnOrder,LPAREN,RPAREN,EQEQ,10,RPAREN,SEMI,assertTrue,LPAREN,""threshold did not match"",COMMA,testProd,DOT,getReorderLevel,LPAREN,RPAREN,EQEQ,5,RPAREN,SEMI,assertFalse,LPAREN,""discontinued flag did not match"",COMMA,testProd,DOT,isDiscontinued,LPAREN,RPAREN,RPAREN,SEMI,assertTrue,LPAREN,testProd,DOT,getImagePath,LPAREN,RPAREN,DOT,equalsIgnoreCase,LPAREN,""imgpath"",RPAREN,RPAREN,SEMI,pDAO,DOT,removeProduct,LPAREN,testProd,RPAREN,SEMI,RBRACE","    @Test
,    public void test_createProduct() throws Exception {
,        Product newProd = new Product(<MASK>1, ""tacos"", ""tacos desc"",
,                ""mexican food"", 15.99, 5, 10, 5, false, ""imgpath"");
,
,        int prodId = pDAO.createProduct(newProd);
,        Product testProd = pDAO.getProductByProductID(prodId);
,
,        assertTrue(""name did not match"", testProd.getProductName()
,                .equalsIgnoreCase(""tacos""));
,        assertTrue(""description did not match"", testProd.getDescription()
,                .equalsIgnoreCase(""tacos desc""));
,        assertTrue(""categoryName did not match"", testProd.getCategoryName()
,                .equalsIgnoreCase(""mexican food""));
,        assertTrue(""price did not match"", testProd.getUnitPrice() == 15.99);
,        assertTrue(""amt_in_stock did not match"",
,                testProd.getUnitsInStock() == 5);
,        assertTrue(""amt_on_order did not match"",
,                testProd.getUnitsOnOrder() == 10);
,        assertTrue(""threshold did not match"", testProd.getReorderLevel() == 5);
,        assertFalse(""discontinued flag did not match"",
,                testProd.isDiscontinued());
,        assertTrue(testProd.getImagePath().equalsIgnoreCase(""imgpath""));
,
,        pDAO.removeProduct(testProd);
,    }
"
0dfb093d-da1c-44ee-81fd-3fd7eb6d3145,2085b1d9-30b6-4178-a232-29f3bcc50c31,STAR,"PUBLIC,void,getCommentsByUrlForBuilding,LPAREN,URL,url,COMMA,int,threadId,COMMA,int,numOfComments,RPAREN,THROWS,FileNotFoundException,LBRACE,String,htmlArr,LBRACKET,RBRACKET,SEMI,DO,LBRACE,htmlArr,EQ,getHtmlCommentsFromYahoo,LPAREN,uh,DOT,getFixUrl,LPAREN,uh,DOT,buildUrl,LPAREN,url,RPAREN,COMMA,LPAREN,threadId,SUB,1,RPAREN,<MASK>,100,RPAREN,COMMA,null,COMMA,0,RPAREN,SEMI,RBRACE,WHILE,LPAREN,htmlArr,EQEQ,null,RPAREN,SEMI,CommentEntityDS,result,SEMI,int,htmlArraySize,EQ,htmlArr,DOT,length,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,htmlArraySize,AMPAMP,i,LT,numOfComments,SEMI,i,PLUSPLUS,RPAREN,LBRACE,TRY,LBRACE,result,EQ,getCommentEntityFromHtml,LPAREN,htmlArr,LBRACKET,i,RBRACKET,COMMA,threadId,COMMA,i,COMMA,0,RPAREN,SEMI,BuildingTreeDataManager,DOT,commentsArray,LBRACKET,Integer,DOT,parseInt,LPAREN,result,DOT,getId,LPAREN,RPAREN,RPAREN,SUB,1,RBRACKET,EQ,result,SEMI,RBRACE,CATCH,LPAREN,FileNotFoundException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,RBRACE","	public void getCommentsByUrlForBuilding(URL url, int threadId, int numOfComments) throws FileNotFoundException{	
,		String htmlArr[];
,		
,		do{
,			htmlArr = getHtmlCommentsFromYahoo(uh.getFixUrl(uh.buildUrl(url), (threadId-1) <MASK> 100), null, 0);			
,		}while(htmlArr == null);
,		
,		CommentEntityDS result;
,		int htmlArraySize = htmlArr.length;
,		for(int i = 0; i < htmlArraySize && i < numOfComments; i++){
,			try {
,				result = getCommentEntityFromHtml(htmlArr[i], threadId, i, 0);
,				BuildingTreeDataManager.commentsArray[Integer.parseInt(result.getId()) - 1] = result;
,				
,			} catch (FileNotFoundException e) {
,						e.printStackTrace();
,			}	
,		}
,	}
"
33a4da69-3c87-4617-ac37-92c20f86f62c,b9c6936a-8923-41aa-8b5c-89891db4b52f,PLUS,"PRIVATE,void,edit,LPAREN,RPAREN,LBRACE,FormulaDialog,fd,EQ,NEW,FormulaDialog,LPAREN,name,<MASK>,"" formula"",COMMA,prefix,COMMA,formula,COMMA,params,COMMA,sysParams,RPAREN,SEMI,IF,LPAREN,fd,DOT,isOk,LPAREN,RPAREN,RPAREN,LBRACE,formula,EQ,fd,DOT,getFormula,LPAREN,RPAREN,SEMI,RBRACE,RBRACE","	private void edit() {
,		FormulaDialog fd = new FormulaDialog(name <MASK> "" formula"", prefix,
,				formula, params, sysParams);
,		if (fd.isOk()) {
,			formula = fd.getFormula();
,		}
,	}
"
113c5414-6c55-466b-b879-a350ab6e0ca2,c4cc616b-9568-402c-96fe-b9991fb63254,EQ,"PUBLIC,void,setInSight,LPAREN,boolean,inSight,RPAREN,LBRACE,this,DOT,inSight,<MASK>,inSight,SEMI,RBRACE","	public void setInSight(boolean inSight) {
,		this.inSight <MASK> inSight;
,	}
"
113c5414-6c55-466b-b879-a350ab6e0ca2,1b5b7b4f-0948-4796-a571-d6bd0ab2465b,EQ,"PUBLIC,void,setMaxDamage,LPAREN,int,maxDamage,RPAREN,LBRACE,this,DOT,maxDamage,<MASK>,maxDamage,SEMI,RBRACE","	public void setMaxDamage(int maxDamage) {
,		this.maxDamage <MASK> maxDamage;
,	}
"
9b07119d-5d87-44cb-94ac-77a9d4fc6019,a1066547-f8a9-4cd1-b075-34d38f797960,LTEQ,"PUBLIC,Actuacio,LPAREN,String,user,COMMA,Point,p,COMMA,boolean,modal,COMMA,int,expedient,COMMA,int,idAct,COMMA,int,idRule,COMMA,boolean,locked,COMMA,boolean,admin,COMMA,String,ensenyament,COMMA,String,estudis,COMMA,HashMap,LT,String,COMMA,Object,GT,resourceMap,COMMA,FINAL,IClient,client,RPAREN,LBRACE,this,DOT,client,EQ,client,SEMI,Actuacio,DOT,resourceMap,EQ,resourceMap,SEMI,this,DOT,user,EQ,user,SEMI,this,DOT,position,EQ,p,SEMI,this,DOT,modal,EQ,modal,SEMI,this,DOT,exp2,EQ,expedient,SEMI,this,DOT,id_actuacio,EQ,idAct,SEMI,this,DOT,id_rule,EQ,idRule,SEMI,this,DOT,locked,EQ,locked,SEMI,this,DOT,admin,EQ,admin,SEMI,this,DOT,nova,EQ,idAct,<MASK>,0,SEMI,this,DOT,estudis,EQ,estudis,SEMI,this,DOT,beanRule,EQ,client,DOT,getFitxesClient,LPAREN,RPAREN,DOT,getFactoryRules,LPAREN,RPAREN,DOT,getRuleXml,LPAREN,idRule,COMMA,ensenyament,COMMA,estudis,RPAREN,SEMI,this,DOT,map,EQ,client,DOT,getFitxesClient,LPAREN,RPAREN,DOT,getFactoryRules,LPAREN,RPAREN,DOT,convertToMapDefaultFill,LPAREN,beanRule,DOT,getFields,LPAREN,RPAREN,RPAREN,SEMI,this,DOT,idFaltasAlumnos,EQ,loadIdsFaltasAlumnos,LPAREN,RPAREN,SEMI,this,DOT,creador,EQ,user,SEMI,IF,LPAREN,BANG,nova,RPAREN,LBRACE,String,SQL1,EQ,""SELECT data1, data2, resolucio, iniciatper, document FROM tuta_reg_actuacions WHERE id="",PLUS,this,DOT,id_actuacio,SEMI,TRY,LBRACE,Statement,st,EQ,client,DOT,getMysql,LPAREN,RPAREN,DOT,createStatement,LPAREN,RPAREN,SEMI,ResultSet,rs1,EQ,client,DOT,getMysql,LPAREN,RPAREN,DOT,getResultSet,LPAREN,SQL1,COMMA,st,RPAREN,SEMI,IF,LPAREN,rs1,BANGEQ,null,AMPAMP,rs1,DOT,next,LPAREN,RPAREN,RPAREN,LBRACE,creador,EQ,rs1,DOT,getString,LPAREN,""iniciatper"",RPAREN,SEMI,HashMap,LT,String,COMMA,Object,GT,tmpMap,EQ,StringUtils,DOT,StringToHash,LPAREN,rs1,DOT,getString,LPAREN,""document"",RPAREN,COMMA,"";"",RPAREN,SEMI,FOR,LPAREN,String,key,COLON,tmpMap,DOT,keySet,LPAREN,RPAREN,RPAREN,LBRACE,map,DOT,put,LPAREN,key,COMMA,tmpMap,DOT,get,LPAREN,key,RPAREN,RPAREN,SEMI,RBRACE,tmpMap,DOT,clear,LPAREN,RPAREN,SEMI,data1,EQ,rs1,DOT,getDate,LPAREN,""data1"",RPAREN,SEMI,data2,EQ,rs1,DOT,getDate,LPAREN,""data2"",RPAREN,SEMI,resolucio,EQ,rs1,DOT,getString,LPAREN,""resolucio"",RPAREN,SEMI,RBRACE,IF,LPAREN,rs1,BANGEQ,null,RPAREN,LBRACE,rs1,DOT,close,LPAREN,RPAREN,SEMI,st,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,CATCH,LPAREN,SQLException,ex,RPAREN,LBRACE,Logger,DOT,getLogger,LPAREN,Actuacio,DOT,CLASS,DOT,getName,LPAREN,RPAREN,RPAREN,DOT,log,LPAREN,Level,DOT,SEVERE,COMMA,null,COMMA,ex,RPAREN,SEMI,RBRACE,RBRACE,RBRACE","    public Actuacio(String user, Point p, boolean modal, int expedient, int idAct, int idRule,
,            boolean locked, boolean admin, String ensenyament, String estudis, HashMap<String, Object> resourceMap,
,            final IClient client) {
,        this.client = client;
,        Actuacio.resourceMap = resourceMap;
,        this.user = user;
,        this.position = p;
,        this.modal = modal;
,        this.exp2 = expedient;
,        this.id_actuacio = idAct;
,        this.id_rule = idRule;
,        this.locked = locked;
,        this.admin = admin;
,        this.nova = idAct <MASK> 0;
,        this.estudis = estudis;
,        this.beanRule = client.getFitxesClient().getFactoryRules().getRuleXml(idRule, ensenyament, estudis); //A partir d'ara s'obte de l'xml
,        this.map = client.getFitxesClient().getFactoryRules().convertToMapDefaultFill(beanRule.getFields());
,        this.idFaltasAlumnos = loadIdsFaltasAlumnos();
,
,        this.creador = user;
,        //Overwrite with database data if already exists
,        if (!nova) {
,            String SQL1 = ""SELECT data1, data2, resolucio, iniciatper, document FROM tuta_reg_actuacions WHERE id="" + this.id_actuacio;
,            try{
,            Statement st = client.getMysql().createStatement();
,            ResultSet rs1 = client.getMysql().getResultSet(SQL1,st);
,            
,                if (rs1 != null && rs1.next()) {
,                    creador = rs1.getString(""iniciatper"");
,                    HashMap<String, Object> tmpMap = StringUtils.StringToHash(rs1.getString(""document""), "";"");
,                    for (String key : tmpMap.keySet()) {
,                        map.put(key, tmpMap.get(key));
,                    }
,                    tmpMap.clear();
,                    data1 = rs1.getDate(""data1"");
,                    data2 = rs1.getDate(""data2"");
,                    resolucio = rs1.getString(""resolucio"");
,                    //System.out.println(""Ini map:"" + map);
,                }
,                if (rs1 != null) {
,                    rs1.close();
,                    st.close();
,                }
,            } catch (SQLException ex) {
,                Logger.getLogger(Actuacio.class.getName()).log(Level.SEVERE, null, ex);
,            }
,        }
,
,    }
"
7bb6e580-dcd8-4ee1-8cd0-36a5f66d0471,f9af55df-5df5-44dc-975e-82b9ae7e8bc2,PLUS,"MONKEYS_AT,Override,PUBLIC,int,hashCode,LPAREN,RPAREN,LBRACE,FINAL,int,prime,EQ,31,SEMI,int,result,EQ,1,SEMI,result,EQ,prime,STAR,result,<MASK>,LPAREN,LPAREN,uuid,EQEQ,null,RPAREN,QUES,0,COLON,uuid,DOT,hashCode,LPAREN,RPAREN,RPAREN,SEMI,RETURN,result,SEMI,RBRACE","    @Override
,    public int hashCode() {
,        final int prime = 31;
,        int result = 1;
,        result = prime * result <MASK> ((uuid == null) ? 0 : uuid.hashCode());
,        return result;
,    }
"
113c5414-6c55-466b-b879-a350ab6e0ca2,2c20267e-1dfd-4f45-8138-a54445d5aa72,EQ,"PUBLIC,void,endGame,LPAREN,RPAREN,LBRACE,gameRunning,<MASK>,false,SEMI,System,DOT,exit,LPAREN,0,RPAREN,SEMI,RBRACE","	public void endGame() {
,		gameRunning <MASK> false;
,		// Handle any serialization or other game ending logic
,		System.exit(0);	// Could this be done more smoothly? Not sure
,	}
"
7adec7d8-cee7-4225-a9f6-43a8dd4e76a6,2196b413-3d60-41c4-ae33-5f1984e94924,STAR,"PUBLIC,ArrayList,LT,Double,GT,getEma,LPAREN,ArrayList,LT,MarketData,GT,md,RPAREN,LBRACE,IF,LPAREN,this,DOT,n,GT,md,DOT,size,LPAREN,RPAREN,RPAREN,LBRACE,THROW,NEW,NotEnoughMarketData,LPAREN,RPAREN,SEMI,RBRACE,double,currEma,EQ,0,SEMI,ArrayList,LT,Double,GT,ema,EQ,NEW,ArrayList,LT,Double,GT,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,md,DOT,size,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,i,LT,this,DOT,n,SUB,1,RPAREN,LBRACE,ema,DOT,add,LPAREN,0.0,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,i,EQEQ,this,DOT,n,SUB,1,RPAREN,LBRACE,double,sum,EQ,0,SEMI,FOR,LPAREN,int,j,EQ,0,SEMI,j,LT,this,DOT,n,SEMI,j,PLUSPLUS,RPAREN,LBRACE,sum,PLUSEQ,md,DOT,get,LPAREN,i,RPAREN,DOT,getClose,LPAREN,RPAREN,SEMI,RBRACE,currEma,EQ,sum,SLASH,this,DOT,n,SEMI,ema,DOT,add,LPAREN,currEma,RPAREN,SEMI,RBRACE,ELSE,LBRACE,double,k,EQ,LPAREN,float,RPAREN,2,SLASH,LPAREN,n,PLUS,1,RPAREN,SEMI,currEma,EQ,LPAREN,md,DOT,get,LPAREN,i,RPAREN,DOT,getClose,LPAREN,RPAREN,SUB,currEma,RPAREN,<MASK>,k,PLUS,currEma,SEMI,ema,DOT,add,LPAREN,currEma,RPAREN,SEMI,RBRACE,RBRACE,RETURN,ema,SEMI,RBRACE","    public ArrayList<Double> getEma(ArrayList<MarketData> md) {
,        if(this.n > md.size()) {
,            throw new NotEnoughMarketData();
,        }
,
,        double currEma = 0;
,        ArrayList<Double> ema = new ArrayList<Double>();
,        for(int i = 0; i < md.size(); i++) {
,            if(i < this.n - 1) {
,                ema.add(0.0);
,            }
,            else if(i == this.n - 1) {
,                double sum = 0;
,                for(int j = 0; j < this.n; j++) {
,                    sum += md.get(i).getClose();
,                }
,                currEma = sum / this.n;
,                ema.add(currEma);
,            }
,            else {
,                double k = (float) 2 / (n+1);
,                currEma = (md.get(i).getClose() - currEma) <MASK> k + currEma;
,                ema.add(currEma);
,            }
,        }
,        return ema;
,    }
"
6c241594-f2fc-4996-bfc9-c7ef863c220a,cf345520-7d6b-47d3-b664-5777c3eec637,LTEQ,"PROTECTED,void,showClassInfo,LPAREN,StringBuffer,buf,RPAREN,LBRACE,boolean,compound,SEMI,buf,DOT,append,LPAREN,""<b>Hub Class Info</b><br>\n"",RPAREN,SEMI,buf,DOT,append,LPAREN,""Overcurrent protection: "",RPAREN,SEMI,buf,DOT,append,LPAREN,hub,DOT,getOverCurrentMode,LPAREN,RPAREN,RPAREN,SEMI,buf,DOT,append,LPAREN,""\n<br>Power switching: "",RPAREN,SEMI,buf,DOT,append,LPAREN,hub,DOT,getPowerSwitchingMode,LPAREN,RPAREN,RPAREN,SEMI,buf,DOT,append,LPAREN,""\n<br>Bus current usage: "",RPAREN,SEMI,buf,DOT,append,LPAREN,hub,DOT,getHubCurrent,LPAREN,RPAREN,RPAREN,SEMI,buf,DOT,append,LPAREN,"" mA.\n"",RPAREN,SEMI,IF,LPAREN,LPAREN,compound,EQ,hub,DOT,isCompound,LPAREN,RPAREN,RPAREN,EQEQ,true,RPAREN,buf,DOT,append,LPAREN,""<br>This hub is part of a compound device.\n"",RPAREN,SEMI,buf,DOT,append,LPAREN,""<font color='maroon'>"",RPAREN,SEMI,buf,DOT,append,LPAREN,""<table>\n"",RPAREN,SEMI,byte,status,LBRACKET,RBRACKET,EQ,NEW,byte,LBRACKET,4,RBRACKET,SEMI,FOR,LPAREN,int,port,EQ,1,SEMI,port,<MASK>,hub,DOT,getNumPorts,LPAREN,RPAREN,SEMI,port,PLUSPLUS,RPAREN,LBRACE,buf,DOT,append,LPAREN,""<tr><th>Port "",RPAREN,SEMI,buf,DOT,append,LPAREN,port,RPAREN,SEMI,buf,DOT,append,LPAREN,""</th>\n<td>"",RPAREN,SEMI,TRY,LBRACE,status,EQ,ControlMessage,DOT,getStatus,LPAREN,dev,COMMA,LPAREN,byte,RPAREN,LPAREN,ControlMessage,DOT,TYPE_CLASS,BAR,ControlMessage,DOT,RECIPIENT_OTHER,RPAREN,COMMA,0,COMMA,port,COMMA,4,RPAREN,SEMI,IF,LPAREN,ControlMessage,DOT,getBit,LPAREN,hub,DOT,PORT_CONNECTION,COMMA,status,COMMA,0,RPAREN,RPAREN,buf,DOT,append,LPAREN,""Connected "",RPAREN,SEMI,IF,LPAREN,ControlMessage,DOT,getBit,LPAREN,hub,DOT,PORT_ENABLE,COMMA,status,COMMA,0,RPAREN,RPAREN,buf,DOT,append,LPAREN,""Enabled "",RPAREN,SEMI,IF,LPAREN,ControlMessage,DOT,getBit,LPAREN,hub,DOT,PORT_SUSPEND,COMMA,status,COMMA,0,RPAREN,RPAREN,buf,DOT,append,LPAREN,""Suspended "",RPAREN,SEMI,IF,LPAREN,ControlMessage,DOT,getBit,LPAREN,hub,DOT,PORT_OVER_CURRENT,COMMA,status,COMMA,0,RPAREN,RPAREN,buf,DOT,append,LPAREN,""Overcurrent "",RPAREN,SEMI,IF,LPAREN,ControlMessage,DOT,getBit,LPAREN,hub,DOT,PORT_RESET,COMMA,status,COMMA,0,RPAREN,RPAREN,buf,DOT,append,LPAREN,""Resetting "",RPAREN,SEMI,IF,LPAREN,ControlMessage,DOT,getBit,LPAREN,hub,DOT,PORT_LOW_SPEED,COMMA,status,COMMA,0,RPAREN,RPAREN,buf,DOT,append,LPAREN,""Lowspeed "",RPAREN,SEMI,IF,LPAREN,ControlMessage,DOT,getBit,LPAREN,hub,DOT,PORT_HIGH_SPEED,COMMA,status,COMMA,0,RPAREN,RPAREN,buf,DOT,append,LPAREN,""Highspeed "",RPAREN,SEMI,IF,LPAREN,ControlMessage,DOT,getBit,LPAREN,hub,DOT,PORT_INDICATOR,COMMA,status,COMMA,0,RPAREN,RPAREN,buf,DOT,append,LPAREN,""Indicator "",RPAREN,SEMI,IF,LPAREN,ControlMessage,DOT,getBit,LPAREN,hub,DOT,PORT_POWER,COMMA,status,COMMA,0,RPAREN,RPAREN,buf,DOT,append,LPAREN,""Powered "",RPAREN,SEMI,IF,LPAREN,compound,AMPAMP,BANG,hub,DOT,isRemovable,LPAREN,port,RPAREN,RPAREN,buf,DOT,append,LPAREN,""(Built-in) "",RPAREN,SEMI,IF,LPAREN,status,LBRACKET,2,RBRACKET,BANGEQ,0,BARBAR,status,LBRACKET,3,RBRACKET,BANGEQ,0,RPAREN,LBRACE,buf,DOT,append,LPAREN,""<br>\n"",RPAREN,SEMI,IF,LPAREN,ControlMessage,DOT,getBit,LPAREN,hub,DOT,C_PORT_CONNECTION,COMMA,status,COMMA,2,RPAREN,RPAREN,buf,DOT,append,LPAREN,""C_Connected "",RPAREN,SEMI,IF,LPAREN,ControlMessage,DOT,getBit,LPAREN,hub,DOT,C_PORT_ENABLE,COMMA,status,COMMA,2,RPAREN,RPAREN,buf,DOT,append,LPAREN,""C_Enabled "",RPAREN,SEMI,IF,LPAREN,ControlMessage,DOT,getBit,LPAREN,hub,DOT,C_PORT_SUSPEND,COMMA,status,COMMA,2,RPAREN,RPAREN,buf,DOT,append,LPAREN,""C_Suspend "",RPAREN,SEMI,IF,LPAREN,ControlMessage,DOT,getBit,LPAREN,hub,DOT,C_PORT_OVER_CURRENT,COMMA,status,COMMA,2,RPAREN,RPAREN,buf,DOT,append,LPAREN,""C_Overcurrent "",RPAREN,SEMI,IF,LPAREN,ControlMessage,DOT,getBit,LPAREN,hub,DOT,C_PORT_RESET,COMMA,status,COMMA,2,RPAREN,RPAREN,buf,DOT,append,LPAREN,""C_Reset "",RPAREN,SEMI,RBRACE,RBRACE,CATCH,LPAREN,IOException,e,RPAREN,LBRACE,buf,DOT,append,LPAREN,""USB Exception on getHubStatus:<br><em>"",RPAREN,SEMI,buf,DOT,append,LPAREN,e,DOT,getMessage,LPAREN,RPAREN,RPAREN,SEMI,buf,DOT,append,LPAREN,""</em>"",RPAREN,SEMI,RBRACE,buf,DOT,append,LPAREN,""</td></tr>"",RPAREN,SEMI,RBRACE,buf,DOT,append,LPAREN,""</table>"",RPAREN,SEMI,buf,DOT,append,LPAREN,""</font>"",RPAREN,SEMI,RBRACE","    protected void showClassInfo (StringBuffer buf)
,    {
,	boolean		compound;
,
,	buf.append (""<b>Hub Class Info</b><br>\n"");
,
,	buf.append (""Overcurrent protection: "");
,	buf.append (hub.getOverCurrentMode ());
,	buf.append (""\n<br>Power switching: "");
,	buf.append (hub.getPowerSwitchingMode ());
,	buf.append (""\n<br>Bus current usage: "");
,	buf.append (hub.getHubCurrent ());
,	buf.append ("" mA.\n"");
,	if ((compound = hub.isCompound ()) == true)
,	    buf.append (""<br>This hub is part of a compound device.\n"");
,
,	// XXX color _should_ highlight that this is ""live"" status
,
,	buf.append (""<font color='maroon'>"");
,	buf.append (""<table>\n"");
,
,	byte status [] = new byte [4];
,	for (int port = 1; port <MASK> hub.getNumPorts (); port++) {
,	    buf.append (""<tr><th>Port "");
,	    buf.append (port);
,	    buf.append (""</th>\n<td>"");
,
,	    try {
,		status = ControlMessage.getStatus (dev,
,		    (byte)(ControlMessage.TYPE_CLASS 
,			| ControlMessage.RECIPIENT_OTHER),
,		    0, port, 4);
,
,		// port status flags
,		if (ControlMessage.getBit (hub.PORT_CONNECTION, status, 0))
,		    buf.append (""Connected "");
,		if (ControlMessage.getBit (hub.PORT_ENABLE, status, 0))
,		    buf.append (""Enabled "");
,		if (ControlMessage.getBit (hub.PORT_SUSPEND, status, 0))
,		    buf.append (""Suspended "");
,		if (ControlMessage.getBit (hub.PORT_OVER_CURRENT, status, 0))
,		    buf.append (""Overcurrent "");
,		if (ControlMessage.getBit (hub.PORT_RESET, status, 0))
,		    buf.append (""Resetting "");
,
,		// ... flags with no notification flags
,		if (ControlMessage.getBit (hub.PORT_LOW_SPEED, status, 0))
,		    buf.append (""Lowspeed "");
,		if (ControlMessage.getBit (hub.PORT_HIGH_SPEED, status, 0))
,		    buf.append (""Highspeed "");
,		if (ControlMessage.getBit (hub.PORT_INDICATOR, status, 0))
,		    buf.append (""Indicator "");
,		if (ControlMessage.getBit (hub.PORT_POWER, status, 0))
,		    buf.append (""Powered "");
,		if (compound && !hub.isRemovable (port))
,		    buf.append (""(Built-in) "");
,		
,		// port change notification flags
,		if (status [2] != 0 || status [3] != 0) {
,		    buf.append (""<br>\n"");
,		    if (ControlMessage.getBit (hub.C_PORT_CONNECTION,
,				status, 2))
,			buf.append (""C_Connected "");
,		    if (ControlMessage.getBit (hub.C_PORT_ENABLE, status, 2))
,			buf.append (""C_Enabled "");
,		    if (ControlMessage.getBit (hub.C_PORT_SUSPEND, status, 2))
,			buf.append (""C_Suspend "");
,		    if (ControlMessage.getBit (hub.C_PORT_OVER_CURRENT,
,				status, 2))
,			buf.append (""C_Overcurrent "");
,		    if (ControlMessage.getBit (hub.C_PORT_RESET, status, 2))
,			buf.append (""C_Reset "");
,		}
,		
,	    } catch (IOException e) {
,		buf.append (""USB Exception on getHubStatus:<br><em>"");
,		buf.append (e.getMessage ());
,		buf.append (""</em>"");
,	    }
,
,	    buf.append (""</td></tr>"");
,	}
,	buf.append (""</table>"");
,	buf.append (""</font>"");
,    }
"
13ade84f-7d2c-4f3f-a13f-aa7abf8a58a5,ecbb17ff-5089-4fa8-8e27-2eda958004e9,SUB,"MONKEYS_AT,Override,PUBLIC,String,toString,LPAREN,RPAREN,LBRACE,StringBuilder,sb,EQ,NEW,StringBuilder,LPAREN,RPAREN,SEMI,sb,DOT,append,LPAREN,""{"",RPAREN,SEMI,ListNode,iter,EQ,this,SEMI,WHILE,LPAREN,iter,BANGEQ,null,RPAREN,LBRACE,sb,DOT,append,LPAREN,iter,DOT,val,RPAREN,DOT,append,LPAREN,"","",RPAREN,SEMI,iter,EQ,iter,DOT,next,SEMI,RBRACE,sb,DOT,deleteCharAt,LPAREN,sb,DOT,length,LPAREN,RPAREN,<MASK>,1,RPAREN,DOT,append,LPAREN,""}"",RPAREN,SEMI,RETURN,sb,DOT,toString,LPAREN,RPAREN,SEMI,RBRACE","	@Override
,	public String toString() {
,		StringBuilder sb = new StringBuilder();
,		sb.append(""{"");
,		ListNode iter = this;
,		while (iter != null) {
,			sb.append(iter.val).append("","");
,			iter = iter.next;
,		}
,		sb.deleteCharAt(sb.length() <MASK> 1).append(""}"");
,		return sb.toString();
,	}
"
73f99f48-ab14-4590-9781-8e43c05bc3ab,065f2456-0007-4e89-895d-70ec9742857b,GT,"PUBLIC,boolean,accept,LPAREN,HackResult,hr,RPAREN,LBRACE,RETURN,hr,DOT,hack,DOT,nkeys,<MASK>,0,SEMI,RBRACE","            public boolean accept(HackResult hr) { return hr.hack.nkeys <MASK> 0; }
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,84dab4ed-77f6-4385-8897-2a504af3b025,LT,"PUBLIC,STATIC,void,fullyZoomOut,LPAREN,RPAREN,LBRACE,FOR,LPAREN,int,k,EQ,0,SEMI,k,<MASK>,15,SEMI,k,PLUSPLUS,RPAREN,LBRACE,proxy,DOT,send,LPAREN,NEW,ProxyMouseWheelMessage,LPAREN,SUB,1,RPAREN,RPAREN,SEMI,RBRACE,TRY,LBRACE,Thread,DOT,sleep,LPAREN,2000,RPAREN,SEMI,RBRACE,CATCH,LPAREN,InterruptedException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,RBRACE","	public static void fullyZoomOut() {
,		for (int k = 0; k <MASK> 15; k++) {
,
,			proxy.send(new ProxyMouseWheelMessage(-1));
,		}
,		try {
,			Thread.sleep(2000);
,		} catch (InterruptedException e) {
,			e.printStackTrace();
,		}
,	}
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,3242da1f-9414-433f-ae20-0ebfccd152fd,BANGEQ,"PUBLIC,void,highlightTarget,LPAREN,Point,point,RPAREN,LBRACE,Graphics2D,g,EQ,LPAREN,Graphics2D,RPAREN,getGraphics,LPAREN,RPAREN,SEMI,paint,LPAREN,g,RPAREN,SEMI,IF,LPAREN,_img,<MASK>,null,RPAREN,LBRACE,g,DOT,setColor,LPAREN,Color,DOT,red,RPAREN,SEMI,g,DOT,setStroke,LPAREN,NEW,BasicStroke,LPAREN,3,RPAREN,RPAREN,SEMI,g,DOT,drawLine,LPAREN,point,DOT,x,SUB,5,COMMA,point,DOT,y,SUB,5,COMMA,point,DOT,x,PLUS,5,COMMA,point,DOT,y,PLUS,5,RPAREN,SEMI,g,DOT,drawLine,LPAREN,point,DOT,x,PLUS,5,COMMA,point,DOT,y,SUB,5,COMMA,point,DOT,x,SUB,5,COMMA,point,DOT,y,PLUS,5,RPAREN,SEMI,RBRACE,RBRACE","        public void highlightTarget(Point point)
,        {
,        	Graphics2D g = (Graphics2D)getGraphics();
,        	paint(g);
,        	if(_img <MASK> null)
,        	{
,        	
,        		g.setColor(Color.red);
,        		g.setStroke(new BasicStroke(3));
,        		g.drawLine(point.x - 5, point.y - 5, point.x + 5, point.y + 5);
,        		g.drawLine(point.x + 5, point.y - 5, point.x - 5, point.y + 5);
,        	}
,        }
"
3913c395-db09-4ac4-8282-49a81b6a21f4,c7154a24-d47c-4bae-a163-d30498a2b2a9,LT,"MONKEYS_AT,Override,PUBLIC,void,update,LPAREN,RPAREN,LBRACE,IF,LPAREN,BANG,enabled,RPAREN,RETURN,SEMI,IF,LPAREN,u,DOT,isFighting,LPAREN,RPAREN,RPAREN,LBRACE,u,DOT,addForce,LPAREN,SUB,c,STAR,u,DOT,vx,COMMA,SUB,c,STAR,u,DOT,vy,RPAREN,SEMI,RETURN,SEMI,RBRACE,double,mind,EQ,9999999,SEMI,double,d,SEMI,Unit,t,COMMA,target,EQ,null,SEMI,FOR,LPAREN,GameEntity,n,COLON,u,DOT,neighbours,RPAREN,LBRACE,IF,LPAREN,BANG,LPAREN,n,INSTANCEOF,Unit,RPAREN,RPAREN,CONTINUE,SEMI,IF,LPAREN,BANG,LPAREN,n,DOT,isEnemy,LPAREN,u,RPAREN,RPAREN,RPAREN,CONTINUE,SEMI,t,EQ,LPAREN,Unit,RPAREN,n,SEMI,d,EQ,u,DOT,getDistanceSquare,LPAREN,n,RPAREN,SEMI,IF,LPAREN,d,<MASK>,mind,RPAREN,LBRACE,mind,EQ,d,SEMI,target,EQ,t,SEMI,RBRACE,RBRACE,IF,LPAREN,target,EQEQ,null,RPAREN,LBRACE,RETURN,SEMI,RBRACE,double,desiredvx,EQ,0,COMMA,desiredvy,EQ,0,SEMI,desiredvx,EQ,target,DOT,getX,LPAREN,RPAREN,SUB,u,DOT,getX,LPAREN,RPAREN,SEMI,desiredvy,EQ,target,DOT,getY,LPAREN,RPAREN,SUB,u,DOT,getY,LPAREN,RPAREN,SEMI,double,norm,EQ,Math,DOT,sqrt,LPAREN,desiredvx,STAR,desiredvx,PLUS,desiredvy,STAR,desiredvy,RPAREN,SEMI,desiredvx,SLASHEQ,norm,SEMI,desiredvy,SLASHEQ,norm,SEMI,desiredvx,STAREQ,u,DOT,max_speed,SEMI,desiredvy,STAREQ,u,DOT,max_speed,SEMI,double,fx,EQ,c,STAR,LPAREN,desiredvx,SUB,u,DOT,vx,RPAREN,SEMI,double,fy,EQ,c,STAR,LPAREN,desiredvy,SUB,u,DOT,vy,RPAREN,SEMI,u,DOT,addForce,LPAREN,fx,COMMA,fy,RPAREN,SEMI,RBRACE","	@Override
,	public void update() {
,		if (!enabled) return;
,
,		if (u.isFighting()) // Fighting units don't need to search the enemy so they want to stop.
,		{
,			u.addForce(-c*u.vx, -c*u.vy);
,			return;
,		}
,
,		// Find closest enemy unit.
,		double mind = 9999999;
,		double d;
,		Unit t, target = null;		
,		for (GameEntity n : u.neighbours)  {
,			if (!(n instanceof Unit)) continue;
,			if (!(n.isEnemy(u))) continue;
,			t = (Unit)n;
,			d = u.getDistanceSquare(n);
,			if (d <MASK> mind) {
,				mind = d;
,				target = t;
,			}
,		}
,
,		if (target == null) {
,			// No enemy unit found.
,			return;
,		}
,		
,		// Steer towards that unit.
,		double desiredvx = 0, desiredvy = 0;
,		// Calculate target velocity.
,		desiredvx = target.getX()-u.getX();
,		desiredvy = target.getY()-u.getY();
,		double norm = Math.sqrt(desiredvx*desiredvx+desiredvy*desiredvy);
,		desiredvx /= norm;
,		desiredvy /= norm;
,		desiredvx *= u.max_speed;
,		desiredvy *= u.max_speed;
,		// Steering force is given by difference to current velocity.
,		double fx = c*(desiredvx - u.vx);
,		double fy = c*(desiredvy - u.vy);
,		u.addForce(fx, fy);
,	}
"
b1d29837-1f95-40a2-98dc-d3762b71a15d,b62aa6ea-31e1-4e1d-8d5d-aa76665fdcd0,GT,"PUBLIC,STATIC,void,unzip,LPAREN,FINAL,String,file,COMMA,FINAL,UnzipListener,callback,RPAREN,THROWS,IOException,COMMA,InterruptedException,LBRACE,FINAL,byte,LBRACKET,RBRACKET,buffer,EQ,NEW,byte,LBRACKET,BUFFER_SIZE,RBRACKET,SEMI,FINAL,File,f,EQ,NEW,File,LPAREN,file,RPAREN,SEMI,FINAL,File,d,EQ,f,DOT,getParentFile,LPAREN,RPAREN,SEMI,IF,LPAREN,BANG,d,DOT,exists,LPAREN,RPAREN,RPAREN,LBRACE,d,DOT,mkdir,LPAREN,RPAREN,SEMI,RBRACE,FINAL,ZipFile,zf,EQ,NEW,ZipFile,LPAREN,f,RPAREN,SEMI,FINAL,double,progress,EQ,100,SLASH,LPAREN,double,RPAREN,zf,DOT,size,LPAREN,RPAREN,SEMI,zf,DOT,close,LPAREN,RPAREN,SEMI,TRY,LPAREN,ZipInputStream,zis,EQ,NEW,ZipInputStream,LPAREN,NEW,FileInputStream,LPAREN,f,RPAREN,RPAREN,RPAREN,LBRACE,ZipEntry,ze,EQ,null,SEMI,int,i,EQ,0,SEMI,WHILE,LPAREN,LPAREN,ze,EQ,zis,DOT,getNextEntry,LPAREN,RPAREN,RPAREN,BANGEQ,null,RPAREN,LBRACE,IF,LPAREN,Thread,DOT,currentThread,LPAREN,RPAREN,DOT,isInterrupted,LPAREN,RPAREN,RPAREN,LBRACE,THROW,NEW,InterruptedException,LPAREN,RPAREN,SEMI,RBRACE,FINAL,String,fileName,EQ,ze,DOT,getName,LPAREN,RPAREN,SEMI,FINAL,File,newFile,EQ,NEW,File,LPAREN,d,COMMA,fileName,RPAREN,SEMI,NEW,File,LPAREN,newFile,DOT,getParent,LPAREN,RPAREN,RPAREN,DOT,mkdirs,LPAREN,RPAREN,SEMI,TRY,LPAREN,FileOutputStream,fos,EQ,NEW,FileOutputStream,LPAREN,newFile,RPAREN,RPAREN,LBRACE,int,len,SEMI,WHILE,LPAREN,LPAREN,len,EQ,zis,DOT,read,LPAREN,buffer,RPAREN,RPAREN,<MASK>,0,RPAREN,LBRACE,IF,LPAREN,Thread,DOT,currentThread,LPAREN,RPAREN,DOT,isInterrupted,LPAREN,RPAREN,RPAREN,LBRACE,THROW,NEW,InterruptedException,LPAREN,RPAREN,SEMI,RBRACE,fos,DOT,write,LPAREN,buffer,COMMA,0,COMMA,len,RPAREN,SEMI,RBRACE,RBRACE,IF,LPAREN,callback,BANGEQ,null,RPAREN,LBRACE,PLUSPLUS,i,SEMI,callback,DOT,onProgress,LPAREN,i,STAR,progress,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,RBRACE","	public static void unzip(final String file, final UnzipListener callback)
,			throws IOException, InterruptedException {
,		final byte[] buffer = new byte[BUFFER_SIZE];
,		final File f = new File(file);
,		final File d = f.getParentFile();
,		if (!d.exists()) {
,			d.mkdir();
,		}
,		// Total number of entries.
,		final ZipFile zf = new ZipFile(f);
,		final double progress = 100 / (double) zf.size();
,		zf.close();
,		// Extract.
,		try (ZipInputStream zis = new ZipInputStream(new FileInputStream(f))) {
,			ZipEntry ze = null;
,			int i = 0;
,			while ((ze = zis.getNextEntry()) != null) {
,				// Check for interrupt.
,				if (Thread.currentThread().isInterrupted()) {
,					throw new InterruptedException();
,				}
,				// Create the file.
,				final String fileName = ze.getName();
,				final File newFile = new File(d, fileName);
,				new File(newFile.getParent()).mkdirs();
,				try (FileOutputStream fos = new FileOutputStream(newFile)) {
,					int len;
,					while ((len = zis.read(buffer)) <MASK> 0) {
,						// Check for interrupt.
,						if (Thread.currentThread().isInterrupted()) {
,							throw new InterruptedException();
,						}
,						// Read the bytes.
,						fos.write(buffer, 0, len);
,					}
,				}
,				if (callback != null) {
,					++i;
,					callback.onProgress(i * progress);
,				}
,			}
,		}
,	}
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,8a122d14-026f-4716-ac3a-1dbb3e6e8b9c,BANGEQ,"PUBLIC,STATIC,void,main,LPAREN,String,args,LBRACKET,RBRACKET,RPAREN,LBRACE,abTrajectory,ar,EQ,NEW,abTrajectory,LPAREN,RPAREN,SEMI,ImageSegFrame,frame,EQ,null,SEMI,GameStateExtractor,gameStateExtractor,EQ,NEW,GameStateExtractor,LPAREN,RPAREN,SEMI,TrajectoryPlanner,trajectory,EQ,NEW,TrajectoryPlanner,LPAREN,RPAREN,SEMI,WHILE,LPAREN,true,RPAREN,LBRACE,BufferedImage,screenshot,EQ,ar,DOT,doScreenShot,LPAREN,RPAREN,SEMI,FINAL,int,nHeight,EQ,screenshot,DOT,getHeight,LPAREN,RPAREN,SEMI,FINAL,int,nWidth,EQ,screenshot,DOT,getWidth,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""captured image of size "",PLUS,nWidth,PLUS,""-by-"",PLUS,nHeight,RPAREN,SEMI,GameStateExtractor,DOT,GameState,state,EQ,gameStateExtractor,DOT,getGameState,LPAREN,screenshot,RPAREN,SEMI,IF,LPAREN,state,<MASK>,GameStateExtractor,DOT,GameState,DOT,PLAYING,RPAREN,LBRACE,CONTINUE,SEMI,RBRACE,VisionMBR,vision,EQ,NEW,VisionMBR,LPAREN,screenshot,RPAREN,SEMI,List,LT,Rectangle,GT,pigs,EQ,vision,DOT,findPigsMBR,LPAREN,RPAREN,SEMI,List,LT,Rectangle,GT,redBirds,EQ,vision,DOT,findRedBirdsMBRs,LPAREN,RPAREN,SEMI,Rectangle,sling,EQ,vision,DOT,findSlingshotMBR,LPAREN,RPAREN,SEMI,IF,LPAREN,sling,EQEQ,null,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""...could not find the slingshot"",RPAREN,SEMI,CONTINUE,SEMI,RBRACE,System,DOT,out,DOT,println,LPAREN,""...found slingshot at "",PLUS,sling,DOT,toString,LPAREN,RPAREN,RPAREN,SEMI,screenshot,EQ,VisionUtils,DOT,convert2grey,LPAREN,screenshot,RPAREN,SEMI,VisionUtils,DOT,drawBoundingBoxes,LPAREN,screenshot,COMMA,pigs,COMMA,Color,DOT,GREEN,RPAREN,SEMI,VisionUtils,DOT,drawBoundingBoxes,LPAREN,screenshot,COMMA,redBirds,COMMA,Color,DOT,PINK,RPAREN,SEMI,VisionUtils,DOT,drawBoundingBox,LPAREN,screenshot,COMMA,sling,COMMA,Color,DOT,ORANGE,RPAREN,SEMI,Rectangle,activeBird,EQ,trajectory,DOT,findActiveBird,LPAREN,redBirds,RPAREN,SEMI,IF,LPAREN,activeBird,EQEQ,null,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""...could not find active bird"",RPAREN,SEMI,CONTINUE,SEMI,RBRACE,trajectory,DOT,plotTrajectory,LPAREN,screenshot,COMMA,sling,COMMA,activeBird,RPAREN,SEMI,IF,LPAREN,frame,EQEQ,null,RPAREN,LBRACE,frame,EQ,NEW,ImageSegFrame,LPAREN,""trajectory"",COMMA,screenshot,RPAREN,SEMI,RBRACE,ELSE,LBRACE,frame,DOT,refresh,LPAREN,screenshot,RPAREN,SEMI,RBRACE,TRY,LBRACE,Thread,DOT,sleep,LPAREN,100,RPAREN,SEMI,RBRACE,CATCH,LPAREN,InterruptedException,e,RPAREN,LBRACE,RBRACE,RBRACE,RBRACE","    public static void main(String args[]) {
,        abTrajectory ar = new abTrajectory();
,
,        ImageSegFrame frame = null;
,        GameStateExtractor gameStateExtractor = new GameStateExtractor();
,        TrajectoryPlanner trajectory = new TrajectoryPlanner();
,
,        while (true) {
,            // capture image
,            BufferedImage screenshot = ar.doScreenShot();
,            final int nHeight = screenshot.getHeight();
,            final int nWidth = screenshot.getWidth();
,
,            System.out.println(""captured image of size "" + nWidth + ""-by-"" + nHeight);
,
,            // extract game state
,            GameStateExtractor.GameState state = gameStateExtractor.getGameState(screenshot);
,            if (state <MASK> GameStateExtractor.GameState.PLAYING) {
,                continue;
,            }
,
,            // process image
,            VisionMBR vision = new VisionMBR(screenshot);
,            List<Rectangle> pigs = vision.findPigsMBR();
,            List<Rectangle> redBirds = vision.findRedBirdsMBRs();
,
,            Rectangle sling = vision.findSlingshotMBR();
,            if (sling == null) {
,                System.out.println(""...could not find the slingshot"");
,                continue;
,            }
,           // System.out.println(""...found "" + pigs.size() + "" pigs and "" + redBirds.size() + "" birds"");
,            System.out.println(""...found slingshot at "" + sling.toString());
,
,            // convert screenshot to grey scale and draw bounding boxes
,            screenshot = VisionUtils.convert2grey(screenshot);
,            VisionUtils.drawBoundingBoxes(screenshot, pigs, Color.GREEN);
,            VisionUtils.drawBoundingBoxes(screenshot, redBirds, Color.PINK);
,            VisionUtils.drawBoundingBox(screenshot, sling, Color.ORANGE);
,
,            // find active bird
,            Rectangle activeBird = trajectory.findActiveBird(redBirds);
,            if (activeBird == null) {
,                System.out.println(""...could not find active bird"");
,                continue;
,            }
,
,            trajectory.plotTrajectory(screenshot, sling, activeBird);
,
,            // show image
,            if (frame == null) {
,                frame = new ImageSegFrame(""trajectory"", screenshot);
,            } else {
,                frame.refresh(screenshot);
,            }
,
,            try {
,                Thread.sleep(100);
,            } catch (InterruptedException e) {
,            }
,        }
,    }
"
2dd830d4-e85f-41ec-b5a4-78a5402d9efb,d99ac63b-a252-47cb-803b-a0ca7818a491,SUB,"PRIVATE,Object,loadValue,LPAREN,String,serial,RPAREN,LBRACE,serial,EQ,serial,DOT,trim,LPAREN,RPAREN,SEMI,IF,LPAREN,serial,DOT,charAt,LPAREN,0,RPAREN,EQEQ,{,RPAREN,LBRACE,JsonObject,object,EQ,NEW,JsonObject,LPAREN,serial,RPAREN,SEMI,RETURN,object,SEMI,RBRACE,ELSE,IF,LPAREN,serial,DOT,charAt,LPAREN,0,RPAREN,EQEQ,[,RPAREN,LBRACE,Object,LBRACKET,RBRACKET,arr,EQ,loadArray,LPAREN,serial,RPAREN,SEMI,RETURN,arr,SEMI,RBRACE,IF,LPAREN,serial,DOT,equals,LPAREN,""\""null\"""",RPAREN,BARBAR,serial,DOT,equals,LPAREN,""null"",RPAREN,RPAREN,RETURN,null,SEMI,IF,LPAREN,serial,DOT,charAt,LPAREN,0,RPAREN,EQEQ,"",RPAREN,RETURN,serial,DOT,substring,LPAREN,1,COMMA,serial,DOT,length,LPAREN,RPAREN,<MASK>,1,RPAREN,SEMI,RETURN,serial,SEMI,RBRACE","	private Object loadValue(String serial) {
,		serial = serial.trim();
,		if(serial.charAt(0) == '{') {
,			JsonObject object = new JsonObject(serial);
,			return object;
,		}
,		else if(serial.charAt(0) == '[') {
,			Object[] arr = loadArray(serial);
,			return arr;
,		}
,		if(serial.equals(""\""null\"""") || serial.equals(""null""))
,			return null;
,		if(serial.charAt(0) == '\""')
,			return serial.substring(1,serial.length()<MASK>1);
,		return serial;
,	}
"
31865c5a-965e-4d07-af21-44a51a00ba58,6c3e4332-f66d-4e0d-bf24-3c1d4d72520e,STAR,"PROTECTED,String,evaluatePolicy_internalComputation,LPAREN,File,policyFileToTransfer,COMMA,File,dbSQLDumpFileToTransfer,RPAREN,LBRACE,commonMethod,LPAREN,RPAREN,SEMI,Random,generator,EQ,NEW,Random,LPAREN,System,DOT,currentTimeMillis,LPAREN,RPAREN,RPAREN,SEMI,long,gid,EQ,generator,DOT,nextLong,LPAREN,RPAREN,SEMI,IF,LPAREN,LPAREN,policyFileToTransfer,EQEQ,null,RPAREN,BARBAR,LPAREN,dbSQLDumpFileToTransfer,EQEQ,null,RPAREN,RPAREN,LBRACE,RETURN,""Error: one or more files incorrectly received"",SEMI,RBRACE,IF,LPAREN,gid,LT,0,RPAREN,gid,EQ,gid,<MASK>,LPAREN,SUB,1,RPAREN,SEMI,dba_factory,DOT,evaluatePolicy,LPAREN,policyFileToTransfer,COMMA,dbSQLDumpFileToTransfer,COMMA,null,COMMA,gid,COMMA,""working_table"",COMMA,false,RPAREN,SEMI,RETURN,""ID: --"",PLUS,gid,PLUS,""--"",SEMI,RBRACE","	protected String evaluatePolicy_internalComputation(
,			File policyFileToTransfer, File dbSQLDumpFileToTransfer) {
,
,		// common initialization method
,		commonMethod();
,		
,		Random generator = new Random(System.currentTimeMillis());
,
,		//Generates the ID which will be associated to the evaluation
,		long gid = generator.nextLong();
,
,		if ((policyFileToTransfer == null) || 
,				(dbSQLDumpFileToTransfer == null)) {
,			return ""Error: one or more files incorrectly received"";
,		}
,
,		if(gid<0)
,			gid = gid<MASK>(-1);
,		
,		dba_factory.evaluatePolicy(policyFileToTransfer,
,				dbSQLDumpFileToTransfer, null, gid, ""working_table"", false);
,		
,		return ""ID: --""+gid+""--"";
,	}
"
aed9046f-504a-49f9-b9ef-f36cca22ba93,b95138ae-ebb2-4a27-ac2a-90d07abf9785,SLASH,"MONKEYS_AT,Override,PUBLIC,float,getUnits,LPAREN,RPAREN,LBRACE,RETURN,LPAREN,float,RPAREN,Math,DOT,ceil,LPAREN,this,DOT,message,DOT,getBytes,LPAREN,RPAREN,DOT,length,<MASK>,dataLength,RPAREN,SEMI,RBRACE","	@Override
,	public float getUnits() {
,		return (float) Math.ceil(this.message.getBytes().length <MASK> dataLength);
,	}
"
56952896-479b-43e9-a9cf-c3f3bb9afc0e,1f685bfd-aa75-4b07-a5ce-d14a93dff948,SUB,"PUBLIC,OrderDAO,LPAREN,RPAREN,THROWS,NamingException,COMMA,SQLException,LBRACE,lastOrderAutoKey,EQ,<MASK>,1,SEMI,Context,cxt,EQ,NEW,InitialContext,LPAREN,RPAREN,SEMI,DataSource,ds,EQ,LPAREN,DataSource,RPAREN,cxt,DOT,lookup,LPAREN,""java:/comp/env/jdbc/CartDB"",RPAREN,SEMI,con,EQ,ds,DOT,getConnection,LPAREN,RPAREN,SEMI,RBRACE","    public OrderDAO() throws NamingException, SQLException {
,
,        // initialize lastAutoKeys here
,        lastOrderAutoKey = <MASK>1;
,
,        Context cxt = new InitialContext();
,        DataSource ds = (DataSource) cxt.lookup(""java:/comp/env/jdbc/CartDB"");
,
,        con = ds.getConnection();
,    }
"
b61d6017-337e-4ccd-b964-a6b5e3d0cb20,50a40d61-8405-4c4a-892a-0ce91f73eaea,EQEQ,"PUBLIC,void,set_active,LPAREN,boolean,active,RPAREN,LBRACE,IF,LPAREN,active,<MASK>,true,RPAREN,LBRACE,_active,EQ,true,SEMI,setBackground,LPAREN,NEW,Background,LPAREN,NEW,BackgroundFill,LPAREN,Color,DOT,CORNFLOWERBLUE,COMMA,CornerRadii,DOT,EMPTY,COMMA,Insets,DOT,EMPTY,RPAREN,RPAREN,RPAREN,SEMI,RBRACE,ELSE,LBRACE,_active,EQ,false,SEMI,setBackground,LPAREN,_defaultBackground,RPAREN,SEMI,RBRACE,RBRACE","    public void set_active(boolean active) {
,        if (active <MASK> true) {
,            _active = true;
,            setBackground(new Background(new BackgroundFill(Color.CORNFLOWERBLUE, CornerRadii.EMPTY, Insets.EMPTY)));
,        } else {
,            _active = false;
,            // TODO: PieceButton.set_active(active) Revert to original background
,            setBackground(_defaultBackground);
,        }
,    }
"
25febb02-bf0a-414d-9cae-3efcbdacd8a3,2a706932-36e1-47f4-a2a7-855c15d50c11,GT,"PUBLIC,void,restoreInput,LPAREN,RPAREN,LBRACE,IF,LPAREN,tempInput,DOT,length,LPAREN,RPAREN,<MASK>,0,RPAREN,setText,LPAREN,tempInput,RPAREN,SEMI,tempInput,EQ,"""",SEMI,RBRACE","	public void restoreInput(){
,		if(tempInput.length() <MASK> 0)
,			setText(tempInput);
,		tempInput = """";
,	}
"
5735492c-ae75-4373-9d1e-6986d063d859,ae9ca820-abae-4ecb-875d-9aa9767407c4,LT,"MONKEYS_AT,Override,PUBLIC,void,run,LPAREN,RPAREN,LBRACE,TRY,LBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,20,SEMI,i,PLUSPLUS,RPAREN,LBRACE,instanceInt,PLUSPLUS,SEMI,IF,LPAREN,instanceInt,EQEQ,10,RPAREN,LBRACE,Thread,DOT,sleep,LPAREN,5000,RPAREN,SEMI,RBRACE,System,DOT,err,DOT,println,LPAREN,""["",PLUS,Thread,DOT,currentThread,LPAREN,RPAREN,DOT,getId,LPAREN,RPAREN,PLUS,""]\u5F53i="",PLUS,i,PLUS,""\u83B7\u53D6staticInt \u7684\u503C:"",PLUS,instanceInt,RPAREN,SEMI,RBRACE,RBRACE,CATCH,LPAREN,InterruptedException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,RBRACE","	@Override
,	public void run() {
,		try {
,			for (int i = 0; i <MASK> 20; i++) {
,				instanceInt++;
,				// 时刻修改着静态变量instanceInt的值，第二个线程进来，instanceInt就为0了
,				if (instanceInt == 10) {
,					Thread.sleep(5000);
,				}
,				System.err.println(""["" + Thread.currentThread().getId() + ""]当i="" + i + ""获取staticInt 的值:"" + instanceInt);
,			}
,		} catch (InterruptedException e) {
,			e.printStackTrace();
,		}
,	}
"
57cc1a58-8f23-49b4-bcf8-6b2866c3102b,4a579959-6159-4d59-b307-593f183431f0,GT,"PUBLIC,boolean,addCodeString,LPAREN,CodeStringBean,codeStringBean,COMMA,ArtistInfoBean,artistInfoBean,COMMA,TrackInfoBean,trackInfoBean,COMMA,UserInfoBean,infoBean,RPAREN,LBRACE,IF,LPAREN,checkCodeString,LPAREN,codeStringBean,COMMA,infoBean,RPAREN,DOT,equalsIgnoreCase,LPAREN,""na"",RPAREN,RPAREN,LBRACE,TRY,LBRACE,connection,EQ,NEW,DatabaseConnection,LPAREN,RPAREN,DOT,getConnection,LPAREN,RPAREN,SEMI,String,add_String,EQ,""INSERT into codestringinfo (codestring, track_id , crc , username ) "",PLUS,""VALUES (? , ? , ? ,?)"",SEMI,PreparedStatement,preparedStatement,EQ,connection,DOT,prepareStatement,LPAREN,add_String,RPAREN,SEMI,preparedStatement,DOT,setString,LPAREN,1,COMMA,codeStringBean,DOT,getCode_String,LPAREN,RPAREN,RPAREN,SEMI,preparedStatement,DOT,setString,LPAREN,2,COMMA,codeStringBean,DOT,getTrack_ID,LPAREN,RPAREN,RPAREN,SEMI,preparedStatement,DOT,setLong,LPAREN,3,COMMA,codeStringBean,DOT,getCrc,LPAREN,RPAREN,RPAREN,SEMI,preparedStatement,DOT,setString,LPAREN,4,COMMA,infoBean,DOT,getUsername,LPAREN,RPAREN,RPAREN,SEMI,boolean,insertNewUserPlayListInfo,EQ,insertNewUserPlayListInfo,LPAREN,codeStringBean,COMMA,infoBean,RPAREN,SEMI,boolean,addNewArtist,EQ,artistInfo,DOT,addNewArtist,LPAREN,artistInfoBean,RPAREN,SEMI,boolean,addNewTrack,EQ,trackInfo,DOT,addNewTrack,LPAREN,trackInfoBean,RPAREN,SEMI,IF,LPAREN,insertNewUserPlayListInfo,AMPAMP,addNewTrack,AMPAMP,addNewArtist,RPAREN,LBRACE,int,executeUpdate,EQ,preparedStatement,DOT,executeUpdate,LPAREN,RPAREN,SEMI,IF,LPAREN,executeUpdate,<MASK>,0,RPAREN,LBRACE,RETURN,true,SEMI,RBRACE,ELSE,LBRACE,trackInfo,DOT,reverseInfo,LPAREN,codeStringBean,DOT,getTrack_ID,LPAREN,RPAREN,RPAREN,SEMI,RETURN,false,SEMI,RBRACE,RBRACE,ELSE,LBRACE,RETURN,false,SEMI,RBRACE,RBRACE,CATCH,LPAREN,SQLException,ex,RPAREN,LBRACE,trackInfo,DOT,reverseInfo,LPAREN,codeStringBean,DOT,getTrack_ID,LPAREN,RPAREN,RPAREN,SEMI,Logger,DOT,getLogger,LPAREN,CodeStringInfo,DOT,CLASS,DOT,getName,LPAREN,RPAREN,RPAREN,DOT,log,LPAREN,Level,DOT,SEVERE,COMMA,null,COMMA,ex,RPAREN,SEMI,RBRACE,RBRACE,RETURN,false,SEMI,RBRACE","    public boolean addCodeString(CodeStringBean codeStringBean, ArtistInfoBean artistInfoBean, TrackInfoBean trackInfoBean, UserInfoBean infoBean) {
,        if (checkCodeString(codeStringBean, infoBean).equalsIgnoreCase(""na"")) {
,
,            try {
,                connection = new DatabaseConnection().getConnection();
,                String add_String = ""INSERT into codestringinfo (codestring, track_id , crc , username ) ""
,                        + ""VALUES (? , ? , ? ,?)"";
,                PreparedStatement preparedStatement = connection.prepareStatement(add_String);
,                preparedStatement.setString(1, codeStringBean.getCode_String());
,                preparedStatement.setString(2, codeStringBean.getTrack_ID());
,                preparedStatement.setLong(3, codeStringBean.getCrc());
,                preparedStatement.setString(4, infoBean.getUsername());
,                boolean insertNewUserPlayListInfo = insertNewUserPlayListInfo(codeStringBean, infoBean);
,                boolean addNewArtist = artistInfo.addNewArtist(artistInfoBean);
,                boolean addNewTrack = trackInfo.addNewTrack(trackInfoBean);
,                if (insertNewUserPlayListInfo && addNewTrack && addNewArtist) {
,                    int executeUpdate = preparedStatement.executeUpdate();
,                    if (executeUpdate <MASK> 0) {
,
,                        return true;
,                    } else {
,                        trackInfo.reverseInfo(codeStringBean.getTrack_ID());
,                        return false;
,                    }
,                } else {
,                    return false;
,                }
,            } catch (SQLException ex) {
,                trackInfo.reverseInfo(codeStringBean.getTrack_ID());
,                Logger.getLogger(CodeStringInfo.class.getName()).log(Level.SEVERE, null, ex);
,            }
,        }
,        return false;
,    }
"
113c5414-6c55-466b-b879-a350ab6e0ca2,b789a0e0-459a-463e-8ea2-e95220b24032,EQ,"PUBLIC,void,setAttackBonus,LPAREN,int,attackBonus,RPAREN,LBRACE,this,DOT,attackBonus,<MASK>,attackBonus,SEMI,RBRACE","	public void setAttackBonus(int attackBonus) {
,		this.attackBonus <MASK> attackBonus;
,	}
"
7bb6e580-dcd8-4ee1-8cd0-36a5f66d0471,974f0ebf-865a-4947-bb34-637e3d4bfcbe,PLUS,"MONKEYS_AT,Test,PUBLIC,void,whenReadingTeachers,LPAREN,RPAREN,LBRACE,teacherDao,EQ,NEW,TeacherDao,LPAREN,""src/test/resources"",RPAREN,SEMI,Iterable,LT,Teacher,GT,teachers,EQ,teacherDao,DOT,readAll,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""teachers: "",<MASK>,teachers,RPAREN,SEMI,RBRACE","    @Test
,    public void whenReadingTeachers() {
,        teacherDao = new TeacherDao(""src/test/resources"");
,        Iterable<Teacher> teachers = teacherDao.readAll();
,        System.out.println(""teachers: "" <MASK> teachers);
,    }
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,5886e4d6-b75f-4680-b367-5607fc79370b,SUB,"PUBLIC,STATIC,void,main,LPAREN,String,args,LBRACKET,RBRACKET,RPAREN,THROWS,InterruptedException,COMMA,IOException,LBRACE,long,timegap,EQ,0,SEMI,IF,LPAREN,args,DOT,length,EQEQ,1,RPAREN,ImageSegFrame,DOT,saveFileDir,EQ,LPAREN,args,LBRACKET,0,RBRACKET,RPAREN,PLUS,"""",SEMI,ELSE,IF,LPAREN,args,DOT,length,EQEQ,2,RPAREN,LBRACE,ImageSegFrame,DOT,saveFileDir,EQ,args,LBRACKET,0,RBRACKET,PLUS,"""",SEMI,timegap,EQ,Long,DOT,parseLong,LPAREN,args,LBRACKET,1,RBRACKET,RPAREN,SEMI,RBRACE,NEW,ActionRobot,LPAREN,RPAREN,SEMI,BufferedImage,screenshot,EQ,null,SEMI,ImageSegFrame,frame,EQ,null,SEMI,screenshot,EQ,ActionRobot,DOT,doScreenShot,LPAREN,RPAREN,SEMI,frame,EQ,NEW,ImageSegFrame,LPAREN,"" Screenshots "",COMMA,screenshot,COMMA,null,RPAREN,SEMI,List,LT,BufferedImage,GT,images,EQ,NEW,LinkedList,LT,BufferedImage,GT,LPAREN,RPAREN,SEMI,long,time,SEMI,long,avg,EQ,0,SEMI,WHILE,LPAREN,true,RPAREN,LBRACE,IF,LPAREN,recordScreenshot,RPAREN,LBRACE,time,EQ,System,DOT,nanoTime,LPAREN,RPAREN,SEMI,screenshot,EQ,ActionRobot,DOT,doScreenShot,LPAREN,RPAREN,SEMI,images,DOT,add,LPAREN,screenshot,RPAREN,SEMI,Thread,DOT,sleep,LPAREN,timegap,RPAREN,SEMI,avg,PLUSEQ,LPAREN,System,DOT,nanoTime,LPAREN,RPAREN,<MASK>,time,RPAREN,SEMI,RBRACE,ELSE,LBRACE,screenshot,EQ,ActionRobot,DOT,doScreenShot,LPAREN,RPAREN,SEMI,RBRACE,frame,DOT,refresh,LPAREN,screenshot,RPAREN,SEMI,IF,LPAREN,saveAndExit,RPAREN,LBRACE,saveFileDir,PLUSEQ,""_"",PLUS,LPAREN,avg,SLASH,images,DOT,size,LPAREN,RPAREN,SLASH,1000000,RPAREN,PLUS,""\\"",SEMI,File,file,EQ,NEW,File,LPAREN,ImageSegFrame,DOT,saveFileDir,RPAREN,SEMI,IF,LPAREN,BANG,file,DOT,exists,LPAREN,RPAREN,RPAREN,file,DOT,mkdir,LPAREN,RPAREN,SEMI,FOR,LPAREN,BufferedImage,image,COLON,images,RPAREN,LBRACE,String,imgFilename,EQ,saveFileDir,PLUS,String,DOT,format,LPAREN,""img%04d.png"",COMMA,_saveCount,PLUSPLUS,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""saving image to "",PLUS,imgFilename,RPAREN,SEMI,ImageIO,DOT,write,LPAREN,image,COMMA,""png"",COMMA,NEW,File,LPAREN,imgFilename,RPAREN,RPAREN,SEMI,RBRACE,System,DOT,exit,LPAREN,0,RPAREN,SEMI,RBRACE,RBRACE,RBRACE","    public static void main(String args[]) throws InterruptedException, IOException
,    {
,    	long timegap = 0;
,    	if(args.length == 1)
,    		ImageSegFrame.saveFileDir = (args[0]) + """";
,    	else
,    		if(args.length == 2)
,    		{
,    			ImageSegFrame.saveFileDir = args[0] + """";
,    			timegap = Long.parseLong(args[1]); 
,    		}
,    
,    	new ActionRobot();
,    	BufferedImage screenshot = null;
,    	ImageSegFrame frame = null;
,    	screenshot = ActionRobot.doScreenShot();
,    	frame = new ImageSegFrame("" Screenshots "", screenshot, null);
,    	List<BufferedImage> images = new LinkedList<BufferedImage>();
,    	long time;   
,    	long avg = 0;
,    	while(true)
,    	{
,    		if(recordScreenshot){
,    			time = System.nanoTime();
,    			screenshot = ActionRobot.doScreenShot();
,    			images.add(screenshot);
,	    		Thread.sleep(timegap);
,	    		avg += (System.nanoTime() <MASK> time);
,    		} 
,    		else
,    		{
,    			screenshot = ActionRobot.doScreenShot();
,    		}
,    		frame.refresh(screenshot);
,    		if(saveAndExit)
,    		{
,    			saveFileDir += ""_"" + (avg/images.size()/1000000) + ""\\"";
,    			File file = new File(ImageSegFrame.saveFileDir);
,    	    	if(!file.exists())
,    	    		file.mkdir();
,    		  for (BufferedImage image : images)
,    		  {
,    			  String imgFilename = saveFileDir + String.format(""img%04d.png"", _saveCount ++);
,    			  System.out.println(""saving image to "" + imgFilename);
,      			  ImageIO.write(image, ""png"", new File(imgFilename));
,    		  }
,    		  System.exit(0);
,    		}
,    	}
,    	
,/*    	if(recordScreenshot)
,    		for (BufferedImage image : images)
,    		{
,    			String imgFilename = saveFileDir + String.format(""img%04d.png"", _saveCount ++);
,    			ImageIO.write(image, ""png"", new File(imgFilename));
,    		}
,    	*/
,    
,    
,    }
"
bbbc2c49-08b6-473f-979f-87460edf9df9,ce9ad983-01c1-446b-a34c-0caae88a5a1e,LTEQ,"MONKEYS_AT,Override,PUBLIC,boolean,write,LPAREN,ReadableByteChannel,channel,COMMA,ByteBuffer,buffer,RPAREN,THROWS,IOException,LBRACE,IF,LPAREN,buffer,EQEQ,null,RPAREN,buffer,EQ,ByteBuffer,DOT,allocateDirect,LPAREN,4096,RPAREN,SEMI,int,count,SEMI,WHILE,LPAREN,true,RPAREN,LBRACE,buffer,DOT,clear,LPAREN,RPAREN,SEMI,IF,LPAREN,BANG,isExtendable,LPAREN,RPAREN,AMPAMP,buffer,DOT,remaining,LPAREN,RPAREN,GT,getWritableBytes,LPAREN,RPAREN,RPAREN,IF,LPAREN,buffer,DOT,remaining,LPAREN,RPAREN,EQEQ,0,RPAREN,THROW,NEW,BufferOverflowException,LPAREN,RPAREN,SEMI,ELSE,buffer,DOT,limit,LPAREN,getWritableBytes,LPAREN,RPAREN,RPAREN,SEMI,TRY,LBRACE,count,EQ,channel,DOT,read,LPAREN,buffer,RPAREN,SEMI,RBRACE,CATCH,LPAREN,ClosedChannelException,e,RPAREN,LBRACE,count,EQ,0,SEMI,RBRACE,IF,LPAREN,count,<MASK>,0,RPAREN,BREAK,SEMI,buffer,DOT,flip,LPAREN,RPAREN,SEMI,write,LPAREN,buffer,RPAREN,SEMI,RBRACE,buffer,DOT,clear,LPAREN,RPAREN,SEMI,RETURN,count,LT,0,SEMI,RBRACE","	@Override
,	public boolean write(ReadableByteChannel channel, ByteBuffer buffer)
,			throws IOException
,	{
,		if( buffer == null )
,			buffer = ByteBuffer.allocateDirect(4096);
,
,		int count;
,
,		while( true )
,		{
,			buffer.clear();
,
,			if( !isExtendable() && buffer.remaining() > getWritableBytes() )
,				if( buffer.remaining() == 0 )
,					throw new BufferOverflowException();
,				else
,					buffer.limit(getWritableBytes());
,
,			try
,			{
,				count = channel.read(buffer);
,			}
,			catch(ClosedChannelException e)
,			{
,				count = 0;
,			}
,
,			if( count <MASK> 0 )
,				break;
,
,			buffer.flip();
,
,			write(buffer);
,		}
,
,		buffer.clear();
,
,		return count < 0;
,	}
"
0cadc92e-3d00-4c9b-b4a2-174a03a56a77,c492fd82-f15f-4689-b584-b8b3c3a1493e,PLUS,"MONKEYS_AT,Override,PROTECTED,AbstractMutableFormula,stay,LPAREN,AbstractMutableFormula,formula,RPAREN,LBRACE,int,depth,EQ,LPAREN,int,RPAREN,LPAREN,Math,DOT,log,LPAREN,formula,DOT,getSubtreeSize,LPAREN,RPAREN,RPAREN,SLASH,Math,DOT,log,LPAREN,2.0,RPAREN,RPAREN,SEMI,RETURN,FormulaCandidateFactory,DOT,getInstance,LPAREN,RPAREN,DOT,generateRandomCandidate,LPAREN,rnd,COMMA,depth,<MASK>,1,RPAREN,SEMI,RBRACE","	@Override
,	protected AbstractMutableFormula stay(AbstractMutableFormula formula) {
,		int depth = (int) (Math.log(formula.getSubtreeSize()) / Math.log(2.0));
,		return FormulaCandidateFactory.getInstance().generateRandomCandidate(
,				rnd, depth <MASK> 1); // TODO investigate depth
,	}
"
a7d6e1ab-1124-4912-b023-4d34ef70d86a,613d72c0-737a-47a0-b79b-805775398a59,GTEQ,"PRIVATE,void,saveCsv,LPAREN,List,LT,TriangleCSV,GT,list,RPAREN,THROWS,IOException,LBRACE,BufferedWriter,LBRACKET,RBRACKET,writers,EQ,NEW,BufferedWriter,LBRACKET,CSV_FILES,RBRACKET,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,CSV_FILES,SEMI,i,PLUSPLUS,RPAREN,LBRACE,writers,LBRACKET,i,RBRACKET,EQ,NEW,BufferedWriter,LPAREN,NEW,OutputStreamWriter,LPAREN,NEW,FileOutputStream,LPAREN,NEW,File,LPAREN,directory,COMMA,FILE_PREFIX,PLUS,i,PLUS,"".csv"",RPAREN,RPAREN,COMMA,""UTF-8"",RPAREN,RPAREN,SEMI,RBRACE,int,fileIndex,EQ,0,SEMI,FOR,LPAREN,TriangleCSV,csv,COLON,list,RPAREN,LBRACE,writers,LBRACKET,fileIndex,RBRACKET,DOT,write,LPAREN,csv,DOT,toCsvLine,LPAREN,RPAREN,RPAREN,SEMI,writers,LBRACKET,fileIndex,RBRACKET,DOT,newLine,LPAREN,RPAREN,SEMI,fileIndex,PLUSPLUS,SEMI,IF,LPAREN,fileIndex,<MASK>,CSV_FILES,RPAREN,fileIndex,EQ,0,SEMI,RBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,CSV_FILES,SEMI,i,PLUSPLUS,RPAREN,LBRACE,writers,LBRACKET,i,RBRACKET,DOT,flush,LPAREN,RPAREN,SEMI,writers,LBRACKET,i,RBRACKET,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,RBRACE","    private void saveCsv(List<TriangleCSV> list) throws IOException {
,        BufferedWriter[] writers = new BufferedWriter[CSV_FILES];
,        for (int i = 0; i < CSV_FILES; i++) {
,            writers[i] = new BufferedWriter(
,                    new OutputStreamWriter(new FileOutputStream(
,                            new File(directory, FILE_PREFIX + i + "".csv"")), ""UTF-8"")
,            );
,            
,        }
,        
,        int fileIndex = 0;
,        for (TriangleCSV csv : list) {
,            writers[fileIndex].write(csv.toCsvLine());
,            writers[fileIndex].newLine();
,            
,            fileIndex++;
,            if (fileIndex <MASK> CSV_FILES) fileIndex = 0;
,        }
,        
,        for (int i = 0; i < CSV_FILES; i++) {
,            writers[i].flush();
,            writers[i].close();
,        }
,    }
"
33a4da69-3c87-4617-ac37-92c20f86f62c,2f01315b-986e-46fe-a682-ed948cc51fc9,PLUS,"PUBLIC,void,update,LPAREN,Node,crt,COMMA,int,nc,RPAREN,LBRACE,this,DOT,setCost,LPAREN,nc,RPAREN,SEMI,this,DOT,setFrom,LPAREN,crt,RPAREN,SEMI,IF,LPAREN,this,DOT,isTurn,LPAREN,crt,RPAREN,RPAREN,this,DOT,setTurn,LPAREN,crt,DOT,getTurn,LPAREN,RPAREN,<MASK>,1,RPAREN,SEMI,ELSE,this,DOT,setTurn,LPAREN,crt,DOT,getTurn,LPAREN,RPAREN,RPAREN,SEMI,this,DOT,setVisited,LPAREN,false,RPAREN,SEMI,RBRACE","	public void update(Node crt, int nc) {
,		this.setCost(nc);
,		this.setFrom(crt);
,		if (this.isTurn(crt))
,			this.setTurn(crt.getTurn() <MASK> 1);
,		else
,			this.setTurn(crt.getTurn());
,		this.setVisited(false);
,	}
"
dd0b8baf-c022-4efa-99dd-425e9c39b04c,db199a3b-d1aa-453c-a43e-a0ef85189466,SLASH,"PUBLIC,int,getCharWidth,LPAREN,char,character,RPAREN,LBRACE,int,charIndex,EQ,character,AMP,FF,SEMI,RETURN,LPAREN,int,RPAREN,LPAREN,LPAREN,float,RPAREN,widths,LBRACKET,charIndex,RBRACKET,STAR,this,DOT,fontSize,<MASK>,16.0F,RPAREN,SEMI,RBRACE","    public int getCharWidth(char character) {
,        int charIndex = character & 0xFF;
,
,        return (int) ((float) widths[charIndex] * this.fontSize <MASK> 16.0F);
,    }
"
113c5414-6c55-466b-b879-a350ab6e0ca2,e0c534d8-b14f-48c5-9190-af2067df371c,EQ,"PUBLIC,Holdable,removeItem,LPAREN,Character,itemID,COMMA,int,count,RPAREN,THROWS,InvalidKeyException,LBRACE,Holdable,item,<MASK>,items,DOT,removeStackedItem,LPAREN,itemID,COMMA,count,RPAREN,SEMI,RETURN,item,SEMI,RBRACE","	public Holdable removeItem(Character itemID, int count) throws InvalidKeyException {
,		Holdable item <MASK> items.removeStackedItem(itemID, count);
,		return item;
,	}
"
0391cbd8-3c57-4f86-869e-125a401f4bdd,a7b6c0fb-204a-493a-898c-c702a6ad215c,PERCENT,"PUBLIC,Double,operate,LPAREN,Double,d1,COMMA,Double,d2,RPAREN,LBRACE,RETURN,d1,<MASK>,d2,SEMI,RBRACE","    public Double operate( Double d1, Double d2)
,    {
,        return d1<MASK>d2;
,    }
"
113c5414-6c55-466b-b879-a350ab6e0ca2,e2673cbc-b7d6-45b2-afcd-480c3b73c689,EQ,"PUBLIC,void,setTileDisplay,LPAREN,TileDisplay,d,RPAREN,LBRACE,display,<MASK>,d,SEMI,RBRACE","	public void setTileDisplay(TileDisplay d) {
,		display <MASK> d;
,	}
"
a64abb7e-1e48-4f96-a7b5-816a0922e0f3,e2702c25-b512-4d71-897e-595e23277bac,LTEQ,"PROTECTED,double,computeFMeasureMaximizer,LPAREN,double,LBRACKET,RBRACKET,LBRACKET,RBRACKET,partialFMeasures,RPAREN,LBRACE,IF,LPAREN,this,DOT,nulls,GT,0,RPAREN,p_0,EQ,LPAREN,double,RPAREN,this,DOT,nulls,SLASH,LPAREN,double,RPAREN,this,DOT,numOfInstances,SEMI,this,DOT,fMeasure,EQ,p_0,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,numLabels,SEMI,i,PLUSPLUS,RPAREN,LBRACE,double,LBRACKET,RBRACKET,copy,EQ,Arrays,DOT,copyOf,LPAREN,partialFMeasures,LBRACKET,i,RBRACKET,COMMA,numLabels,RPAREN,SEMI,int,LBRACKET,RBRACKET,index,EQ,NEW,int,LBRACKET,numLabels,RBRACKET,SEMI,FOR,LPAREN,int,j,EQ,0,SEMI,j,LT,index,DOT,length,SEMI,j,PLUSPLUS,RPAREN,index,LBRACKET,j,RBRACKET,EQ,j,SEMI,IF,LPAREN,sortIndexes,RPAREN,SelectionSort,DOT,selectIndexes,LPAREN,copy,COMMA,index,COMMA,i,RPAREN,SEMI,ELSE,SelectionSort,DOT,select,LPAREN,copy,COMMA,index,COMMA,i,RPAREN,SEMI,double,sum,EQ,0,SEMI,FOR,LPAREN,int,j,EQ,0,SEMI,j,<MASK>,i,SEMI,j,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,sortIndexes,RPAREN,sum,PLUSEQ,copy,LBRACKET,index,LBRACKET,j,RBRACKET,RBRACKET,SEMI,ELSE,sum,PLUSEQ,copy,LBRACKET,j,RBRACKET,SEMI,RBRACE,sum,EQ,2.0,STAR,sum,SLASH,this,DOT,numOfInstances,SEMI,IF,LPAREN,sum,GT,this,DOT,fMeasure,RPAREN,LBRACE,this,DOT,fMeasure,EQ,sum,SEMI,this,DOT,fMaximizer,EQ,Arrays,DOT,copyOf,LPAREN,index,COMMA,i,PLUS,1,RPAREN,SEMI,RBRACE,RBRACE,RETURN,this,DOT,fMeasure,SEMI,RBRACE","	protected double computeFMeasureMaximizer(double[][] partialFMeasures) {
,
,		if(this.nulls > 0) 
,			p_0 = (double) this.nulls / (double) this.numOfInstances; 
,		this.fMeasure = p_0;
,		
,		for (int i = 0; i < numLabels; i++) {
,			double [] copy = Arrays.copyOf(partialFMeasures[i], numLabels);
,			int [] index = new int[numLabels];
,			
,			for(int j = 0; j < index.length; j++) index[j] = j;
,				
,			if(sortIndexes)
,				SelectionSort.selectIndexes(copy, index, i);
,			else
,				SelectionSort.select(copy, index, i);
,			
,			double sum = 0;
,			for (int j = 0; j <MASK> i; j++) {
,				if(sortIndexes)
,					sum += copy[index[j]];
,				else
,					sum += copy[j]; 
,			}
,			sum = 2.0 *sum/this.numOfInstances;
,			
,			if (sum > this.fMeasure) {
,				this.fMeasure = sum;
,				this.fMaximizer = Arrays.copyOf(index, i + 1); 
,			}
,		}
,
,		return this.fMeasure;
,	}
"
7a6d4ee7-a11c-445d-8f58-7963e611bee0,6067e9a8-d7b1-4d07-8fbb-285d35c3b9d9,BANGEQ,"PUBLIC,void,actionPerformed,LPAREN,ActionEvent,arg0,RPAREN,LBRACE,IF,LPAREN,recent,<MASK>,null,RPAREN,LBRACE,saveQuiz,LPAREN,recent,RPAREN,SEMI,RBRACE,ELSE,LBRACE,saveQuizAs,LPAREN,RPAREN,SEMI,RBRACE,RBRACE","			public void actionPerformed(ActionEvent arg0) 
,			{
,				if(recent <MASK> null)
,				{
,					saveQuiz(recent);
,				}
,				else
,				{
,					saveQuizAs();
,				}
,			}
"
ad0a2aad-9ad8-443c-832f-88b9f64460ed,ae59da28-2ec7-49ac-8138-2247de502dac,EQ,"PUBLIC,DriveFor,LPAREN,double,direction,COMMA,double,time,RPAREN,LBRACE,requires,LPAREN,driveTrain,RPAREN,SEMI,this,DOT,direction,<MASK>,direction,SEMI,setTimeout,LPAREN,time,RPAREN,SEMI,RBRACE","    public DriveFor(double direction, double time) {
,        // Use requires() here to declare subsystem dependencies
,        // eg. requires(chassis);
,        requires(driveTrain);
,        this.direction <MASK> direction;
,        setTimeout(time);
,    }
"
9c253d2b-e626-4f21-a850-dfb022369350,7341ea92-1bf6-4d25-909e-98cd7e428ac6,LTEQ,"PUBLIC,double,LBRACKET,RBRACKET,LBRACKET,RBRACKET,nullspace,LPAREN,FINAL,double,thresh,RPAREN,LBRACE,int,j,COMMA,jj,COMMA,nn,EQ,0,SEMI,double,LBRACKET,RBRACKET,LBRACKET,RBRACKET,nullsp,EQ,NEW,double,LBRACKET,n,RBRACKET,LBRACKET,nullity,LPAREN,thresh,RPAREN,RBRACKET,SEMI,FOR,LPAREN,j,EQ,0,SEMI,j,LT,n,SEMI,j,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,w,LBRACKET,j,RBRACKET,<MASK>,tsh,RPAREN,LBRACE,FOR,LPAREN,jj,EQ,0,SEMI,jj,LT,n,SEMI,jj,PLUSPLUS,RPAREN,nullsp,LBRACKET,jj,RBRACKET,LBRACKET,nn,RBRACKET,EQ,v,LBRACKET,jj,RBRACKET,LBRACKET,j,RBRACKET,SEMI,nn,PLUSPLUS,SEMI,RBRACE,RBRACE,RETURN,nullsp,SEMI,RBRACE","  public double[][] nullspace(final double thresh){
,    int j,jj,nn=0;
,    double[][] nullsp = new double[n][nullity(thresh)];
,    for (j=0;j<n;j++) {
,      if (w[j] <MASK> tsh) {
,        for (jj=0;jj<n;jj++) nullsp[jj][nn] = v[jj][j];
,        nn++;
,      }
,    }
,    return nullsp;
,  }
"
4efd15d4-7259-49ef-bb2b-8984a1154bd6,58703072-4f15-467f-bd3c-805b1d73f039,SUB,"MONKEYS_AT,Override,PUBLIC,int,compare,LPAREN,NGram,o1,COMMA,NGram,o2,RPAREN,LBRACE,TRY,LBRACE,IF,LPAREN,o1,DOT,getFrequency,LPAREN,RPAREN,GT,o2,DOT,getFrequency,LPAREN,RPAREN,RPAREN,LBRACE,RETURN,<MASK>,1,SEMI,RBRACE,ELSE,IF,LPAREN,o1,DOT,getFrequency,LPAREN,RPAREN,LT,o2,DOT,getFrequency,LPAREN,RPAREN,RPAREN,LBRACE,RETURN,1,SEMI,RBRACE,RBRACE,CATCH,LPAREN,Exception,e,RPAREN,LBRACE,System,DOT,err,DOT,println,LPAREN,e,DOT,toString,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,RETURN,0,SEMI,RBRACE","        @Override
,        public int compare(NGram o1, NGram o2) {
,          
,        try{
,            if (o1.getFrequency() > o2.getFrequency()) {
,        return <MASK>1;
,    } else if (o1.getFrequency() < o2.getFrequency()) {
,        return 1;
,    }
,        }catch(Exception e){
,            System.err.println(e.toString());
,        }
,        return 0;
,        }
"
13ade84f-7d2c-4f3f-a13f-aa7abf8a58a5,617df567-0a87-430d-a7c0-5d83015307b0,LT,"PUBLIC,ListNode,insertionSortList,LPAREN,ListNode,head,RPAREN,LBRACE,IF,LPAREN,head,EQEQ,null,RPAREN,RETURN,null,SEMI,ListNode,dummy,EQ,NEW,ListNode,LPAREN,0,RPAREN,SEMI,ListNode,comp,EQ,head,SEMI,WHILE,LPAREN,comp,BANGEQ,null,RPAREN,LBRACE,ListNode,prev,EQ,dummy,SEMI,ListNode,nextComp,EQ,comp,DOT,next,SEMI,WHILE,LPAREN,prev,DOT,next,BANGEQ,null,AMPAMP,prev,DOT,next,DOT,val,<MASK>,comp,DOT,val,RPAREN,LBRACE,prev,EQ,prev,DOT,next,SEMI,RBRACE,comp,DOT,next,EQ,prev,DOT,next,SEMI,prev,DOT,next,EQ,comp,SEMI,comp,EQ,nextComp,SEMI,RBRACE,RETURN,dummy,DOT,next,SEMI,RBRACE","	public ListNode insertionSortList(ListNode head) {
,		if (head == null)
,			return null;
,
,		ListNode dummy = new ListNode(0);
,		ListNode comp = head;
,
,		while (comp != null) {
,			ListNode prev = dummy;
,			ListNode nextComp = comp.next;
,
,			while (prev.next != null && prev.next.val <MASK> comp.val) {
,				prev = prev.next;
,			}
,			comp.next = prev.next;
,			prev.next = comp;
,
,			comp = nextComp;
,		}
,
,		return dummy.next;
,	}
"
96ad2b1f-2213-467d-9114-99ed9ca40d4d,494432a3-30a5-41b0-935f-ea3839013129,PERCENT,"MONKEYS_AT,Override,PUBLIC,void,run,LPAREN,RPAREN,LBRACE,TRY,LBRACE,Message,inMessage,EQ,Communicator,DOT,receiveMessage,LPAREN,socket,RPAREN,SEMI,IF,LPAREN,inMessage,DOT,type,DOT,equals,LPAREN,""add"",RPAREN,RPAREN,LBRACE,Communicator,DOT,receiveFile,LPAREN,socket,COMMA,DataNode,DOT,rootPath,PLUS,LPAREN,filesystem,DOT,FileSystem,DOT,DIRECTORYSEPARATOR,PLUS,inMessage,DOT,fileName,RPAREN,COMMA,inMessage,DOT,fileSize,RPAREN,SEMI,socket,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,inMessage,DOT,type,DOT,equals,LPAREN,""remove"",RPAREN,RPAREN,LBRACE,String,blockName,EQ,inMessage,DOT,fileName,SEMI,String,blockPath,EQ,DataNode,DOT,rootPath,PLUS,""/"",PLUS,blockName,SEMI,File,fileTemp,EQ,NEW,File,LPAREN,blockPath,RPAREN,SEMI,IF,LPAREN,fileTemp,DOT,exists,LPAREN,RPAREN,RPAREN,LBRACE,Logger,DOT,log,LPAREN,""From delete File: "",PLUS,inMessage,DOT,fileName,RPAREN,SEMI,fileTemp,DOT,delete,LPAREN,RPAREN,SEMI,DataNode,DOT,nameNode,DOT,ConfirmDeletion,LPAREN,DataNode,DOT,key,COMMA,blockName,COMMA,DataNode,DOT,key,RPAREN,SEMI,RBRACE,ELSE,DataNode,DOT,nameNode,DOT,ConfirmDeletion,LPAREN,DataNode,DOT,key,COMMA,blockName,COMMA,DataNode,DOT,key,RPAREN,SEMI,socket,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,inMessage,DOT,type,DOT,equals,LPAREN,""reset"",RPAREN,RPAREN,LBRACE,DataNode,DOT,resetAllThreads,LPAREN,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,inMessage,DOT,type,DOT,equals,LPAREN,""sendMeFile"",RPAREN,RPAREN,LBRACE,String,blockName,EQ,inMessage,DOT,fileName,SEMI,File,sendFile,EQ,NEW,File,LPAREN,DataNode,DOT,rootPath,PLUS,LPAREN,FileSystem,DOT,DIRECTORYSEPARATOR,PLUS,blockName,RPAREN,RPAREN,SEMI,inMessage,DOT,fileSize,EQ,sendFile,DOT,length,LPAREN,RPAREN,SEMI,Communicator,DOT,sendMessage,LPAREN,socket,COMMA,inMessage,RPAREN,SEMI,BufferedInputStream,bis,EQ,NEW,BufferedInputStream,LPAREN,NEW,FileInputStream,LPAREN,DataNode,DOT,rootPath,PLUS,LPAREN,FileSystem,DOT,DIRECTORYSEPARATOR,PLUS,blockName,RPAREN,RPAREN,RPAREN,SEMI,Communicator,DOT,sendStream,LPAREN,socket,COMMA,bis,COMMA,sendFile,DOT,length,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,inMessage,DOT,type,DOT,equals,LPAREN,""sendFile"",RPAREN,RPAREN,LBRACE,TRY,LBRACE,String,blockName,EQ,inMessage,DOT,fileName,SEMI,Socket,outSocket,EQ,Communicator,DOT,CreateDataSocket,LPAREN,inMessage,DOT,sendLocation,RPAREN,SEMI,File,sendFile,EQ,NEW,File,LPAREN,DataNode,DOT,rootPath,PLUS,LPAREN,FileSystem,DOT,DIRECTORYSEPARATOR,PLUS,blockName,RPAREN,RPAREN,SEMI,BufferedInputStream,bis,EQ,NEW,BufferedInputStream,LPAREN,NEW,FileInputStream,LPAREN,DataNode,DOT,rootPath,PLUS,LPAREN,FileSystem,DOT,DIRECTORYSEPARATOR,PLUS,blockName,RPAREN,RPAREN,RPAREN,SEMI,Message,m,EQ,NEW,Message,LPAREN,""add"",RPAREN,SEMI,m,DOT,fileName,EQ,blockName,SEMI,m,DOT,fileSize,EQ,sendFile,DOT,length,LPAREN,RPAREN,SEMI,Communicator,DOT,sendMessage,LPAREN,outSocket,COMMA,m,RPAREN,SEMI,Boolean,success,EQ,Communicator,DOT,sendStream,LPAREN,outSocket,COMMA,bis,COMMA,sendFile,DOT,length,LPAREN,RPAREN,RPAREN,EQEQ,sendFile,DOT,length,LPAREN,RPAREN,SEMI,Message,confirmation,EQ,NEW,Message,LPAREN,success,QUES,""success"",COLON,""fail"",RPAREN,SEMI,Communicator,DOT,sendMessage,LPAREN,socket,COMMA,confirmation,RPAREN,SEMI,outSocket,DOT,close,LPAREN,RPAREN,SEMI,socket,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,IOException,e,RPAREN,LBRACE,TRY,LBRACE,Logger,DOT,log,LPAREN,e,DOT,getMessage,LPAREN,RPAREN,RPAREN,SEMI,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,Message,confirmation,EQ,NEW,Message,LPAREN,""fail"",RPAREN,SEMI,Communicator,DOT,sendMessage,LPAREN,socket,COMMA,confirmation,RPAREN,SEMI,socket,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,IOException,e1,RPAREN,LBRACE,Logger,DOT,log,LPAREN,""Oh well!"",RPAREN,SEMI,e1,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,ELSE,IF,LPAREN,inMessage,DOT,type,DOT,equals,LPAREN,""InitTask"",RPAREN,RPAREN,LBRACE,TaskMessage,tm,EQ,LPAREN,TaskMessage,RPAREN,inMessage,SEMI,InitTask,t,EQ,LPAREN,InitTask,RPAREN,tm,DOT,task,SEMI,String,blockLocalPath,EQ,DataNode,DOT,rootPath,PLUS,LPAREN,FileSystem,DOT,DIRECTORYSEPARATOR,PLUS,tm,DOT,fileName,RPAREN,SEMI,String,jarFileLocalPath,EQ,DataNode,DOT,rootPath,DOT,toString,LPAREN,RPAREN,PLUS,FileSystem,DOT,DIRECTORYSEPARATOR,PLUS,t,DOT,getJob,LPAREN,RPAREN,DOT,getID,LPAREN,RPAREN,PLUS,"".jar"",SEMI,HDFSToLocal,DOT,MoveToLocal,LPAREN,jarFileLocalPath,COMMA,t,DOT,getJarFilePath,LPAREN,RPAREN,RPAREN,SEMI,TaskRunnerManager,trm,EQ,DataNode,DOT,taskTrackerThread,DOT,getTaskRunnerManager,LPAREN,true,RPAREN,SEMI,IF,LPAREN,trm,EQEQ,null,RPAREN,LBRACE,Logger,DOT,log,LPAREN,""Nothing available"",RPAREN,SEMI,RETURN,SEMI,RBRACE,KeyListMessage,klm,EQ,trm,DOT,LaunchInitTask,LPAREN,jarFileLocalPath,COMMA,t,DOT,getMapperName,LPAREN,RPAREN,COMMA,blockLocalPath,RPAREN,SEMI,Logger,DOT,log,LPAREN,""out"",RPAREN,SEMI,Communicator,DOT,sendMessage,LPAREN,socket,COMMA,klm,RPAREN,SEMI,socket,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,inMessage,DOT,type,DOT,equals,LPAREN,""MapperTask"",RPAREN,RPAREN,LBRACE,TaskMessage,tm,EQ,LPAREN,TaskMessage,RPAREN,inMessage,SEMI,MapperTask,t,EQ,LPAREN,MapperTask,RPAREN,tm,DOT,task,SEMI,String,blockLocalPath,EQ,DataNode,DOT,rootPath,PLUS,LPAREN,FileSystem,DOT,DIRECTORYSEPARATOR,PLUS,tm,DOT,fileName,RPAREN,SEMI,String,jarFileLocalPath,EQ,DataNode,DOT,rootPath,DOT,toString,LPAREN,RPAREN,PLUS,FileSystem,DOT,DIRECTORYSEPARATOR,PLUS,t,DOT,getJob,LPAREN,RPAREN,DOT,getID,LPAREN,RPAREN,PLUS,"".jar"",SEMI,HDFSToLocal,DOT,MoveToLocal,LPAREN,jarFileLocalPath,COMMA,t,DOT,getJarFilePath,LPAREN,RPAREN,RPAREN,SEMI,TaskRunnerManager,trm,EQ,DataNode,DOT,taskTrackerThread,DOT,getTaskRunnerManager,LPAREN,false,RPAREN,SEMI,IF,LPAREN,trm,EQEQ,null,RPAREN,LBRACE,RETURN,SEMI,RBRACE,trm,DOT,LaunchMapperTask,LPAREN,jarFileLocalPath,COMMA,t,DOT,getMapperName,LPAREN,RPAREN,COMMA,blockLocalPath,COMMA,t,DOT,getSplits,LPAREN,RPAREN,COMMA,t,DOT,getJob,LPAREN,RPAREN,DOT,getID,LPAREN,RPAREN,COMMA,t,DOT,getTaskID,LPAREN,RPAREN,RPAREN,SEMI,socket,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,inMessage,DOT,type,DOT,equals,LPAREN,""ReducerTask"",RPAREN,RPAREN,LBRACE,TaskMessage,tm,EQ,LPAREN,TaskMessage,RPAREN,inMessage,SEMI,ReducerTask,t,EQ,LPAREN,ReducerTask,RPAREN,tm,DOT,task,SEMI,String,blockLocalPath,EQ,DataNode,DOT,rootPath,PLUS,LPAREN,FileSystem,DOT,DIRECTORYSEPARATOR,PLUS,tm,DOT,fileName,RPAREN,SEMI,String,jarFileLocalPath,EQ,DataNode,DOT,rootPath,DOT,toString,LPAREN,RPAREN,PLUS,FileSystem,DOT,DIRECTORYSEPARATOR,PLUS,t,DOT,getJob,LPAREN,RPAREN,DOT,getID,LPAREN,RPAREN,PLUS,"".jar"",SEMI,HDFSToLocal,DOT,MoveToLocal,LPAREN,jarFileLocalPath,COMMA,t,DOT,getJarFilePath,LPAREN,RPAREN,RPAREN,SEMI,TaskRunnerManager,trm,EQ,DataNode,DOT,taskTrackerThread,DOT,getTaskRunnerManager,LPAREN,false,RPAREN,SEMI,IF,LPAREN,trm,EQEQ,null,RPAREN,LBRACE,RETURN,SEMI,RBRACE,String,LBRACKET,RBRACKET,localPaths,EQ,NEW,String,LBRACKET,t,DOT,getClients,LPAREN,RPAREN,DOT,length,RBRACKET,SEMI,int,iter,EQ,0,SEMI,FOR,LPAREN,String,clientKey,COLON,t,DOT,getClients,LPAREN,RPAREN,RPAREN,LBRACE,Message,m,EQ,NEW,Message,LPAREN,""sendMeFile"",RPAREN,SEMI,m,DOT,fileName,EQ,""MAPPER_OUT_"",PLUS,t,DOT,getJob,LPAREN,RPAREN,DOT,getID,LPAREN,RPAREN,PLUS,""_"",PLUS,iter,PLUS,""_"",PLUS,t,DOT,getTaskID,LPAREN,RPAREN,SEMI,localPaths,LBRACKET,iter,RBRACKET,EQ,DataNode,DOT,rootPath,PLUS,LPAREN,FileSystem,DOT,DIRECTORYSEPARATOR,PLUS,m,DOT,fileName,PLUS,""_"",RPAREN,SEMI,Socket,socket,EQ,Communicator,DOT,CreateTaskSocket,LPAREN,clientKey,RPAREN,SEMI,Message,fileSizeMessage,EQ,Communicator,DOT,sendAndReceiveMessage,LPAREN,socket,COMMA,m,RPAREN,SEMI,Communicator,DOT,receiveFile,LPAREN,socket,COMMA,localPaths,LBRACKET,iter,RBRACKET,COMMA,fileSizeMessage,DOT,fileSize,RPAREN,SEMI,iter,PLUSPLUS,SEMI,RBRACE,trm,DOT,LaunchReducerTask,LPAREN,jarFileLocalPath,COMMA,t,DOT,getReducerName,LPAREN,RPAREN,COMMA,localPaths,COMMA,t,DOT,getJob,LPAREN,RPAREN,DOT,getID,LPAREN,RPAREN,COMMA,t,DOT,getTaskID,LPAREN,RPAREN,RPAREN,SEMI,socket,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,inMessage,DOT,type,DOT,equals,LPAREN,""MergeAndUpload"",RPAREN,RPAREN,LBRACE,Logger,DOT,log,LPAREN,""\n\n\n\nMerge message\n\n\n"",RPAREN,SEMI,MergeAndUploadMessage,message,EQ,LPAREN,MergeAndUploadMessage,RPAREN,inMessage,SEMI,int,iter,EQ,0,SEMI,String,LBRACKET,RBRACKET,splitPaths,EQ,NEW,String,LBRACKET,message,DOT,clients,DOT,length,RBRACKET,SEMI,FOR,LPAREN,String,clientKey,COLON,message,DOT,clients,RPAREN,LBRACE,Message,m,EQ,NEW,Message,LPAREN,""sendMeFile"",RPAREN,SEMI,m,DOT,fileName,EQ,""REDUCER_OUT_"",PLUS,message,DOT,jobId,PLUS,""_"",PLUS,LPAREN,iter,PLUS,splitPaths,DOT,length,SUB,1,RPAREN,<MASK>,splitPaths,DOT,length,SEMI,splitPaths,LBRACKET,iter,RBRACKET,EQ,DataNode,DOT,rootPath,PLUS,LPAREN,FileSystem,DOT,DIRECTORYSEPARATOR,PLUS,""SPLIT_"",PLUS,message,DOT,jobId,PLUS,""_"",PLUS,iter,RPAREN,SEMI,Socket,socket,EQ,Communicator,DOT,CreateDataSocket,LPAREN,clientKey,RPAREN,SEMI,Message,fileSizeMessage,EQ,Communicator,DOT,sendAndReceiveMessage,LPAREN,socket,COMMA,m,RPAREN,SEMI,Communicator,DOT,receiveFile,LPAREN,socket,COMMA,splitPaths,LBRACKET,iter,RBRACKET,COMMA,fileSizeMessage,DOT,fileSize,RPAREN,SEMI,iter,PLUSPLUS,SEMI,RBRACE,String,finalOutputLocalPath,EQ,DataNode,DOT,rootPath,PLUS,LPAREN,FileSystem,DOT,DIRECTORYSEPARATOR,PLUS,""FINAL_"",PLUS,message,DOT,jobId,RPAREN,SEMI,FileMerge,DOT,mergeFiles,LPAREN,splitPaths,COMMA,finalOutputLocalPath,RPAREN,SEMI,NEW,Thread,LPAREN,NEW,LocalToHDFS,LPAREN,finalOutputLocalPath,COMMA,message,DOT,HDFSFilePath,RPAREN,RPAREN,DOT,start,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,CATCH,LPAREN,IOException,BAR,InterruptedException,BAR,ClassNotFoundException,e,RPAREN,LBRACE,Logger,DOT,log,LPAREN,e,DOT,getMessage,LPAREN,RPAREN,RPAREN,SEMI,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,InvalidDataNodeException,e,RPAREN,LBRACE,DataNode,DOT,reset,LPAREN,RPAREN,SEMI,RBRACE,RBRACE","	@Override
,	public void run(){
,		try{
,			Message inMessage = Communicator.receiveMessage(socket);
,			
,			if(inMessage.type.equals(""add"")){
,				
,				Communicator.receiveFile(socket, 
,						DataNode.rootPath + (filesystem.FileSystem.DIRECTORYSEPARATOR + inMessage.fileName),
,						inMessage.fileSize);
,			    socket.close();
,			}
,			else if(inMessage.type.equals(""remove"")){
,				String blockName = inMessage.fileName;
,				String blockPath = DataNode.rootPath+""/""+blockName;
,				File fileTemp = new File(blockPath);
,				if (fileTemp.exists()){
,				    Logger.log(""From delete File: "" + inMessage.fileName);
,					fileTemp.delete();
,					DataNode.nameNode.ConfirmDeletion(DataNode.key, blockName, DataNode.key);
,				}
,				else
,					DataNode.nameNode.ConfirmDeletion(DataNode.key, blockName, DataNode.key);
,				socket.close();
,			}
,			else if(inMessage.type.equals(""reset"")){
,				DataNode.resetAllThreads();
,			}
,			else if(inMessage.type.equals(""sendMeFile"")){
,				String blockName = inMessage.fileName;
,				File sendFile = new File(DataNode.rootPath + (FileSystem.DIRECTORYSEPARATOR + blockName));
,
,				inMessage.fileSize = sendFile.length();
,				Communicator.sendMessage(socket, inMessage);
,				BufferedInputStream bis = new BufferedInputStream(
,						new FileInputStream(DataNode.rootPath + (FileSystem.DIRECTORYSEPARATOR + blockName)));
,				Communicator.sendStream(socket, bis, sendFile.length());
,			}
,			else if(inMessage.type.equals(""sendFile"")){
,				
,				try{
,					String blockName = inMessage.fileName;
,					Socket outSocket = Communicator.CreateDataSocket(inMessage.sendLocation);
,					
,					File sendFile = new File(DataNode.rootPath + (FileSystem.DIRECTORYSEPARATOR + blockName));
,					BufferedInputStream bis = new BufferedInputStream(
,							new FileInputStream(DataNode.rootPath + (FileSystem.DIRECTORYSEPARATOR + blockName)));
,					
,					
,					// add a new file to datanode
,					Message m = new Message(""add"");
,					m.fileName = blockName;
,					m.fileSize = sendFile.length();
,					Communicator.sendMessage(outSocket, m);
,					
,					Boolean success = Communicator.sendStream(outSocket, bis, sendFile.length())==sendFile.length();
,					
,					Message confirmation = new Message(success?""success"":""fail"");
,					
,					Communicator.sendMessage(socket, confirmation);
,					
,					outSocket.close();
,					socket.close();
,					
,				}catch(IOException e){
,					try {
,						
,						Logger.log(e.getMessage());
,						e.printStackTrace();
,						
,						Message confirmation = new Message(""fail"");
,						Communicator.sendMessage(socket, confirmation);
,						socket.close();
,						
,					} catch (IOException e1) {
,						Logger.log(""Oh well!"");
,						e1.printStackTrace();
,					}
,				}
,			} else if(inMessage.type.equals(""InitTask"")){
,				
,				// run sample mapper task
,				// calculate total size estimate
,				// return keys
,				
,				TaskMessage tm = (TaskMessage) inMessage;
,				InitTask t = (InitTask) tm.task;
,				String blockLocalPath = DataNode.rootPath + (FileSystem.DIRECTORYSEPARATOR + tm.fileName);
,				
,				
,				String jarFileLocalPath = DataNode.rootPath.toString()+FileSystem.DIRECTORYSEPARATOR + t.getJob().getID() + "".jar"";
,				HDFSToLocal.MoveToLocal(jarFileLocalPath, t.getJarFilePath());
,				
,				TaskRunnerManager trm = DataNode.taskTrackerThread.getTaskRunnerManager(true);
,				if(trm==null){
,					//tell NameNode to gotohell
,					Logger.log(""Nothing available"");
,					return;
,				}
,				KeyListMessage klm = trm.LaunchInitTask( jarFileLocalPath, t.getMapperName(), blockLocalPath);
,
,				Logger.log(""out"");
,				Communicator.sendMessage(socket, klm);
,				
,				socket.close();
,			}else if(inMessage.type.equals(""MapperTask"")){
,				TaskMessage tm = (TaskMessage) inMessage;
,				MapperTask t = (MapperTask) tm.task;
,				String blockLocalPath = DataNode.rootPath + (FileSystem.DIRECTORYSEPARATOR + tm.fileName);
,				
,				
,				String jarFileLocalPath = DataNode.rootPath.toString()+FileSystem.DIRECTORYSEPARATOR + t.getJob().getID() + "".jar"";
,				HDFSToLocal.MoveToLocal(jarFileLocalPath, t.getJarFilePath());
,				
,				TaskRunnerManager trm = DataNode.taskTrackerThread.getTaskRunnerManager(false);
,				if(trm==null){
,					//tell NameNode to gotohell
,					return;
,				}
,				trm.LaunchMapperTask( jarFileLocalPath, t.getMapperName(), blockLocalPath, t.getSplits(), t.getJob().getID(), t.getTaskID());				
,				socket.close();
,				
,			}else if(inMessage.type.equals(""ReducerTask"")){
,				TaskMessage tm = (TaskMessage) inMessage;
,				ReducerTask t = (ReducerTask) tm.task;
,				
,				String blockLocalPath = DataNode.rootPath + (FileSystem.DIRECTORYSEPARATOR + tm.fileName);				
,				String jarFileLocalPath = DataNode.rootPath.toString()+FileSystem.DIRECTORYSEPARATOR + t.getJob().getID() + "".jar"";
,				HDFSToLocal.MoveToLocal(jarFileLocalPath, t.getJarFilePath());
,				
,				TaskRunnerManager trm = DataNode.taskTrackerThread.getTaskRunnerManager(false);
,				if(trm==null){
,					//tell NameNode to gotohell
,					return;
,				}
,				String[] localPaths = new String[t.getClients().length];
,				int iter = 0;
,				for(String clientKey: t.getClients()){
,					Message m = new Message(""sendMeFile"");
,					m.fileName = ""MAPPER_OUT_"" + t.getJob().getID() + ""_"" + iter + ""_"" + t.getTaskID();
,					
,					
,					localPaths[iter] = DataNode.rootPath + (FileSystem.DIRECTORYSEPARATOR + m.fileName + ""_"");
,					Socket socket = Communicator.CreateTaskSocket(clientKey);
,					Message fileSizeMessage = Communicator.sendAndReceiveMessage(socket, m);
,					Communicator.receiveFile(socket, localPaths[iter], fileSizeMessage.fileSize);
,									
,					iter++;
,				}
,				//fill in the files
,				trm.LaunchReducerTask( jarFileLocalPath, t.getReducerName(), localPaths, t.getJob().getID(), t.getTaskID());				
,				socket.close();
,			} else if(inMessage.type.equals(""MergeAndUpload"")){
,				Logger.log(""\n\n\n\nMerge message\n\n\n"");
,				MergeAndUploadMessage message = (MergeAndUploadMessage)inMessage;
,				
,				int iter = 0;
,				String[] splitPaths = new String[message.clients.length];
,				for(String clientKey: message.clients){
,					Message m = new Message(""sendMeFile"");
,					m.fileName = ""REDUCER_OUT_"" + message.jobId + ""_"" + (iter+splitPaths.length-1)<MASK>splitPaths.length;
,					
,					splitPaths[iter] = DataNode.rootPath + (FileSystem.DIRECTORYSEPARATOR + ""SPLIT_"" + message.jobId + ""_"" + iter);
,					
,					Socket socket = Communicator.CreateDataSocket(clientKey);
,					Message fileSizeMessage = Communicator.sendAndReceiveMessage(socket, m);
,					Communicator.receiveFile(socket, splitPaths[iter], fileSizeMessage.fileSize);
,					iter++;
,				}
,				String finalOutputLocalPath = DataNode.rootPath + (FileSystem.DIRECTORYSEPARATOR + ""FINAL_"" + message.jobId);
,				FileMerge.mergeFiles(splitPaths, finalOutputLocalPath);
,				
,
,     			new Thread(new LocalToHDFS(finalOutputLocalPath, message.HDFSFilePath)).start();
,			}
,				
,				
,		} catch (IOException|InterruptedException|ClassNotFoundException e) {
,			Logger.log(e.getMessage());
,			e.printStackTrace();
,		} catch (InvalidDataNodeException e) {
,			DataNode.reset();
,		}
,
,	}
"
e804bdf1-7a07-4e36-aee6-aba6a427cf38,318fe52e-c2df-4f39-a5ec-243e475a53c2,STAR,"PRIVATE,void,initializeTail,LPAREN,RPAREN,LBRACE,MyList,DOT,Container,LT,Element,LT,T,GTGT,current,EQ,elements,DOT,leftSentinel,DOT,successor,SEMI,cost,EQ,Double,DOT,POSITIVE_INFINITY,SEMI,int,size,EQ,0,SEMI,WHILE,LPAREN,current,BANGEQ,null,RPAREN,LBRACE,size,PLUSPLUS,SEMI,cost,EQ,Math,DOT,min,LPAREN,cost,COMMA,current,DOT,item,DOT,cost,RPAREN,SEMI,current,EQ,current,DOT,successor,SEMI,RBRACE,current,EQ,elements,DOT,leftSentinel,DOT,successor,SEMI,int,processedElements,EQ,0,SEMI,int,superelementsInCurrentSublist,EQ,0,SEMI,Superelement,LT,T,GT,mostRecentSuperelement,EQ,null,SEMI,Superelement,LT,T,GT,currentSuperelement,EQ,null,SEMI,SplitFindminStructureGabow,LT,Superelement,LT,T,GTGT,currentLevelSublist,EQ,NEW,SplitFindminStructureGabow,LT,Superelement,LT,T,GTGT,LPAREN,ackermann,COMMA,i,SUB,1,RPAREN,SEMI,WHILE,LPAREN,size,SUB,processedElements,GT,3,RPAREN,LBRACE,int,level,EQ,ackermann,DOT,getInverse,LPAREN,i,COMMA,size,SUB,processedElements,RPAREN,SEMI,currentSuperelement,EQ,NEW,Superelement,LT,T,GT,LPAREN,level,RPAREN,SEMI,currentSuperelement,DOT,cost,EQ,Double,DOT,POSITIVE_INFINITY,SEMI,int,numberOfElements,EQ,2,<MASK>,ackermann,DOT,getValue,LPAREN,i,COMMA,level,RPAREN,SEMI,currentSuperelement,DOT,first,EQ,current,DOT,item,SEMI,FOR,LPAREN,int,k,EQ,0,SEMI,k,LT,numberOfElements,SEMI,k,PLUSPLUS,RPAREN,LBRACE,current,DOT,item,DOT,superelement,EQ,currentSuperelement,SEMI,currentSuperelement,DOT,cost,EQ,Math,DOT,min,LPAREN,currentSuperelement,DOT,cost,COMMA,current,DOT,item,DOT,cost,RPAREN,SEMI,current,EQ,current,DOT,successor,SEMI,RBRACE,currentSuperelement,DOT,last,EQ,current,DOT,predecessor,DOT,item,SEMI,IF,LPAREN,mostRecentSuperelement,BANGEQ,null,AMPAMP,mostRecentSuperelement,DOT,level,BANGEQ,level,RPAREN,LBRACE,IF,LPAREN,superelementsInCurrentSublist,GT,1,RPAREN,LBRACE,MyList,DOT,Container,LT,SplitFindminStructureGabow,LT,Superelement,LT,T,GTGTGT,container,EQ,sublists,DOT,add,LPAREN,currentLevelSublist,RPAREN,SEMI,currentLevelSublist,DOT,containingContainerSublists,EQ,container,SEMI,currentLevelSublist,DOT,containingList,EQ,this,SEMI,RBRACE,ELSE,LBRACE,MyList,DOT,Container,LT,Superelement,LT,T,GTGT,container,EQ,singletonSuperelements,DOT,add,LPAREN,mostRecentSuperelement,RPAREN,SEMI,mostRecentSuperelement,DOT,containingContainerSingletonSuperelements,EQ,container,SEMI,mostRecentSuperelement,DOT,containingList,EQ,this,SEMI,mostRecentSuperelement,DOT,elementInSublist,EQ,null,SEMI,mostRecentSuperelement,DOT,containingSublist,EQ,null,SEMI,RBRACE,currentLevelSublist,EQ,NEW,SplitFindminStructureGabow,LT,Superelement,LT,T,GTGT,LPAREN,ackermann,COMMA,i,SUB,1,RPAREN,SEMI,superelementsInCurrentSublist,EQ,0,SEMI,RBRACE,Element,LT,Superelement,LT,T,GTGT,e,EQ,currentLevelSublist,DOT,add,LPAREN,currentSuperelement,COMMA,currentSuperelement,DOT,cost,RPAREN,SEMI,currentSuperelement,DOT,elementInSublist,EQ,e,SEMI,currentSuperelement,DOT,containingSublist,EQ,currentLevelSublist,SEMI,superelementsInCurrentSublist,PLUSPLUS,SEMI,processedElements,PLUSEQ,numberOfElements,SEMI,mostRecentSuperelement,EQ,currentSuperelement,SEMI,RBRACE,IF,LPAREN,superelementsInCurrentSublist,GT,1,RPAREN,LBRACE,MyList,DOT,Container,LT,SplitFindminStructureGabow,LT,Superelement,LT,T,GTGTGT,container,EQ,sublists,DOT,add,LPAREN,currentLevelSublist,RPAREN,SEMI,currentLevelSublist,DOT,containingContainerSublists,EQ,container,SEMI,currentLevelSublist,DOT,containingList,EQ,this,SEMI,RBRACE,ELSE,LBRACE,IF,LPAREN,mostRecentSuperelement,BANGEQ,null,RPAREN,LBRACE,MyList,DOT,Container,LT,Superelement,LT,T,GTGT,container,EQ,singletonSuperelements,DOT,add,LPAREN,mostRecentSuperelement,RPAREN,SEMI,mostRecentSuperelement,DOT,containingContainerSingletonSuperelements,EQ,container,SEMI,mostRecentSuperelement,DOT,containingList,EQ,this,SEMI,mostRecentSuperelement,DOT,elementInSublist,EQ,null,SEMI,mostRecentSuperelement,DOT,containingSublist,EQ,null,SEMI,RBRACE,RBRACE,WHILE,LPAREN,current,BANGEQ,null,RPAREN,LBRACE,MyList,DOT,Container,LT,Element,LT,T,GTGT,container,EQ,singletonElements,DOT,add,LPAREN,current,DOT,item,RPAREN,SEMI,current,DOT,item,DOT,containingContainerSingletonElements,EQ,container,SEMI,current,DOT,item,DOT,containingList,EQ,this,SEMI,current,EQ,current,DOT,successor,SEMI,RBRACE,FOR,LPAREN,SplitFindminStructureGabow,LT,Superelement,LT,T,GTGT,sublist,COLON,sublists,RPAREN,LBRACE,sublist,DOT,initializeTail,LPAREN,RPAREN,SEMI,RBRACE,RBRACE","	private void initializeTail() {
,		// scan list left-to-right
,		MyList.Container<Element<T>> current = elements.leftSentinel.successor;
,		
,		// compute c(L) and the size of this list
,		cost = Double.POSITIVE_INFINITY;
,		int size = 0;
,		
,		while (current != null) {
,			size++;
,			cost = Math.min(cost, current.item.cost);
,			current = current.successor;
,		}
,		
,		// partition this list into superelements, sublists and singletons
,		current = elements.leftSentinel.successor;
,		int processedElements = 0;
,		int superelementsInCurrentSublist = 0;
,		Superelement<T> mostRecentSuperelement = null;
,		Superelement<T> currentSuperelement = null;
,		SplitFindminStructureGabow<Superelement<T>> currentLevelSublist =
,			new SplitFindminStructureGabow<Superelement<T>>(ackermann, i - 1);
,		
,		// check whether there are enough elements remaining for a superelement
,		while (size - processedElements > 3) {
,			// compute the level of the next superelement
,			int level = ackermann.getInverse(i, size - processedElements);
,			
,			// construct a new superelement
,			currentSuperelement = new Superelement<T>(level);
,			currentSuperelement.cost = Double.POSITIVE_INFINITY;
,			
,			// compute the number of elements of the next superelement
,			int numberOfElements = 2 <MASK> ackermann.getValue(i, level);
,
,			// add the elements to the current superelement
,			currentSuperelement.first = current.item;
,			for (int k = 0; k < numberOfElements; k++) {
,				// set e(x)
,				current.item.superelement = currentSuperelement;
,				
,				// update c(e(x))
,				currentSuperelement.cost =
,					Math.min(currentSuperelement.cost, current.item.cost);
,				
,				current = current.successor;
,			}
,			currentSuperelement.last = current.predecessor.item;
,
,			
,			if (mostRecentSuperelement != null && mostRecentSuperelement.level
,					!= level) {
,				
,				// now we have to add or reject our constructed sublist
,				if (superelementsInCurrentSublist > 1) {
,					MyList.Container<SplitFindminStructureGabow
,						<Superelement<T>>> container =
,							sublists.add(currentLevelSublist);
,					currentLevelSublist.containingContainerSublists = container;
,					
,					currentLevelSublist.containingList = this;
,				} else {
,					// most recent superelement is a singleton
,					MyList.Container<Superelement<T>> container =
,						singletonSuperelements.add(mostRecentSuperelement);
,					mostRecentSuperelement.
,						containingContainerSingletonSuperelements = container;
,					
,					mostRecentSuperelement.containingList = this;
,					mostRecentSuperelement.elementInSublist = null;
,					mostRecentSuperelement.containingSublist = null;
,				}
,				
,				// construct a new sublist - we might need it later
,				currentLevelSublist = new SplitFindminStructureGabow
,					<Superelement<T>>(ackermann, i - 1);
,				superelementsInCurrentSublist = 0;
,			}
,			
,			// add the current superelement to the current sublist
,			Element<Superelement<T>> e = currentLevelSublist.add
,				(currentSuperelement, currentSuperelement.cost);
,			currentSuperelement.elementInSublist = e;
,			currentSuperelement.containingSublist = currentLevelSublist;
,			superelementsInCurrentSublist++;
,			
,			// prepare next iteration
,			processedElements += numberOfElements;
,			mostRecentSuperelement = currentSuperelement;
,		}
,		
,		// process the last sublist individually, if necessary
,		if (superelementsInCurrentSublist > 1) {
,			MyList.Container<SplitFindminStructureGabow<Superelement<T>>>
,				container = sublists.add(currentLevelSublist);
,			currentLevelSublist.containingContainerSublists = container;
,			
,			currentLevelSublist.containingList = this;
,		} else {
,			if (mostRecentSuperelement != null) {
,				// most recent superelement is a singleton
,				MyList.Container<Superelement<T>> container =
,					singletonSuperelements.add(mostRecentSuperelement);
,				mostRecentSuperelement.
,					containingContainerSingletonSuperelements = container;
,				
,				mostRecentSuperelement.containingList = this;
,				mostRecentSuperelement.elementInSublist = null;
,				mostRecentSuperelement.containingSublist = null;
,			}
,		}
,
,		// process leftovers
,		while (current != null) {
,			MyList.Container<Element<T>> container =
,				singletonElements.add(current.item);
,			current.item.containingContainerSingletonElements = container; 
,			current.item.containingList = this;
,			current = current.successor;
,		}
,		
,		// call A_{i-1} to do initialize-tail on each sublist
,		for (SplitFindminStructureGabow<Superelement<T>> sublist : sublists) {
,			sublist.initializeTail();
,		}
,	}
"
0a4ca423-774e-4648-9a00-98a0346992be,92a24daf-454b-40fb-be14-d926cf3ec7e9,EQEQ,"PRIVATE,STATIC,FINAL,String,createMessage,LPAREN,FINAL,Class,LT,QUES,EXTENDS,Object,GT,objectClass,COMMA,FINAL,Serializable,ELLIPSIS,ids,RPAREN,LBRACE,FINAL,StringBuilder,builder,EQ,NEW,StringBuilder,LPAREN,RPAREN,SEMI,IF,LPAREN,objectClass,<MASK>,null,RPAREN,builder,DOT,append,LPAREN,""[Type => "",PLUS,objectClass,DOT,getSimpleName,LPAREN,RPAREN,PLUS,""]"",RPAREN,SEMI,IF,LPAREN,ids,BANGEQ,null,AMPAMP,ids,DOT,length,GT,0,RPAREN,FOR,LPAREN,FINAL,Serializable,id,COLON,ids,RPAREN,IF,LPAREN,id,BANGEQ,null,RPAREN,builder,DOT,append,LPAREN,""[ID => ["",PLUS,id,DOT,getClass,LPAREN,RPAREN,DOT,getSimpleName,LPAREN,RPAREN,PLUS,""]["",PLUS,id,DOT,toString,LPAREN,RPAREN,PLUS,""]]"",RPAREN,SEMI,RETURN,builder,DOT,toString,LPAREN,RPAREN,SEMI,RBRACE","	private static final String createMessage(final Class<? extends Object> objectClass, final Serializable... ids) {
,		final StringBuilder builder = new StringBuilder();
,		if (objectClass <MASK> null)
,			builder.append(""[Type => "" + objectClass.getSimpleName() + ""]"");
,		if (ids != null && ids.length > 0)
,			for (final Serializable id : ids)
,				if (id != null) builder.append(""[ID => ["" + id.getClass().getSimpleName() + ""]["" + id.toString() + ""]]"");
,		return builder.toString();
,	}
"
ceb2d628-7548-4a8f-9594-53a373297866,f55b8162-4945-4961-b101-5fc96e6b8b14,LT,"PUBLIC,double,setGoal,LPAREN,double,goal,COMMA,double,curSource,COMMA,double,t,RPAREN,LBRACE,double,setpoint,EQ,goal,SUB,curSource,SEMI,sign,EQ,LPAREN,setpoint,<MASK>,0,RPAREN,QUES,SUB,1.0,COLON,1.0,SEMI,timeToMaxVelocity,EQ,velocity,SLASH,acceleration,SEMI,double,deltaPosMaxV,EQ,LPAREN,sign,STAR,setpoint,RPAREN,SUB,LPAREN,timeToMaxVelocity,STAR,velocity,RPAREN,SEMI,double,timeAtMaxV,EQ,deltaPosMaxV,SLASH,velocity,SEMI,timeFromMaxVelocity,EQ,timeToMaxVelocity,PLUS,timeAtMaxV,SEMI,timeTotal,EQ,timeFromMaxVelocity,PLUS,timeToMaxVelocity,SEMI,lastTime,EQ,t,SEMI,RETURN,curSource,SEMI,RBRACE","  public double setGoal(double goal, double curSource, double t) {
,    double setpoint = goal - curSource;
,    sign = (setpoint <MASK> 0) ? -1.0 : 1.0;
,    timeToMaxVelocity = velocity / acceleration;
,    double deltaPosMaxV = (sign * setpoint) - (timeToMaxVelocity * velocity);
,    double timeAtMaxV = deltaPosMaxV / velocity;
,    timeFromMaxVelocity = timeToMaxVelocity + timeAtMaxV;
,    timeTotal = timeFromMaxVelocity + timeToMaxVelocity;
,
,    lastTime = t;
,    // Set setpoint to current value of PIDSource.
,    return curSource;
,  }
"
cc1c4187-1182-4cd3-a559-9895584ed311,eead1deb-9b70-4327-867b-e87561aeb6f3,GTEQ,"PUBLIC,String,translate,LPAREN,String,text,RPAREN,LBRACE,StringBuilder,translated,EQ,NEW,StringBuilder,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,text,DOT,length,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,int,pos,EQ,text,DOT,indexOf,LPAREN,"" "",COMMA,i,RPAREN,SEMI,String,word,SEMI,IF,LPAREN,pos,<MASK>,0,RPAREN,LBRACE,word,EQ,text,DOT,substring,LPAREN,i,COMMA,pos,RPAREN,SEMI,IF,LPAREN,word,DOT,equals,LPAREN,""ZEE"",RPAREN,RPAREN,word,EQ,""ZED"",SEMI,translated,DOT,append,LPAREN,word,RPAREN,SEMI,translated,DOT,append,LPAREN,"" "",RPAREN,SEMI,i,EQ,pos,SEMI,RBRACE,ELSE,LBRACE,word,EQ,text,DOT,substring,LPAREN,i,RPAREN,SEMI,IF,LPAREN,word,DOT,equals,LPAREN,""ZEE"",RPAREN,RPAREN,word,EQ,""ZED"",SEMI,translated,DOT,append,LPAREN,word,RPAREN,SEMI,BREAK,SEMI,RBRACE,RBRACE,RETURN,translated,DOT,toString,LPAREN,RPAREN,SEMI,RBRACE","	public String translate(String text) {
,		
,		StringBuilder translated=new StringBuilder();
,		for(int i=0;i<text.length();i++){
,			int pos=text.indexOf("" "",i);
,			String word;
,			if(pos<MASK>0){
,				word=text.substring(i,pos);
,				if(word.equals(""ZEE""))word=""ZED"";
,				translated.append(word);
,				translated.append("" "");
,				i=pos;
,			}else{
,				word=text.substring(i);
,				if(word.equals(""ZEE""))word=""ZED"";
,				translated.append(word);
,				break;
,			}
,		}
,		
,		return translated.toString();
,	}
"
e804bdf1-7a07-4e36-aee6-aba6a427cf38,2e39418f-0999-40fe-9a7b-1df19a537f5b,GTEQ,"MONKEYS_AT,SuppressWarnings,LPAREN,""unchecked"",RPAREN,PUBLIC,void,findShortestPaths,LPAREN,Graph,LT,QUES,EXTENDS,Edge,GT,g,COMMA,int,u,COMMA,PriorityQueue,q,RPAREN,THROWS,IllegalArgumentException,LBRACE,IF,LPAREN,g,EQEQ,null,RPAREN,LBRACE,String,errorMessage,EQ,""The passed graph musn't be null."",SEMI,THROW,NEW,IllegalArgumentException,LPAREN,errorMessage,RPAREN,SEMI,RBRACE,IF,LPAREN,u,LT,0,BARBAR,u,<MASK>,g,DOT,getNumberOfVertices,LPAREN,RPAREN,RPAREN,LBRACE,String,errorMessage,EQ,""The vertex with index "",PLUS,u,PLUS,"" is not within the passed graph."",SEMI,THROW,NEW,IllegalArgumentException,LPAREN,errorMessage,RPAREN,SEMI,RBRACE,int,n,EQ,g,DOT,getNumberOfVertices,LPAREN,RPAREN,SEMI,int,LBRACKET,RBRACKET,colors,EQ,NEW,int,LBRACKET,n,RBRACKET,SEMI,predecessors,EQ,NEW,int,LBRACKET,n,RBRACKET,SEMI,distances,EQ,NEW,int,LBRACKET,n,RBRACKET,SEMI,int,white,EQ,0,SEMI,int,gray,EQ,1,SEMI,int,black,EQ,2,SEMI,FOR,LPAREN,int,v,EQ,0,SEMI,v,LT,n,SEMI,v,PLUSPLUS,RPAREN,LBRACE,colors,LBRACKET,v,RBRACKET,EQ,white,SEMI,predecessors,LBRACKET,v,RBRACKET,EQ,SUB,1,SEMI,distances,LBRACKET,v,RBRACKET,EQ,SUB,1,SEMI,RBRACE,colors,LBRACKET,u,RBRACKET,EQ,gray,SEMI,PriorityQueueItem,LT,Integer,GT,LBRACKET,RBRACKET,items,EQ,NEW,PriorityQueueItem,LBRACKET,n,RBRACKET,SEMI,PriorityQueueItem,LT,Integer,GT,item,EQ,q,DOT,insert,LPAREN,u,COMMA,0,RPAREN,SEMI,items,LBRACKET,u,RBRACKET,EQ,item,SEMI,WHILE,LPAREN,BANG,q,DOT,isEmpty,LPAREN,RPAREN,RPAREN,LBRACE,item,EQ,q,DOT,deleteMin,LPAREN,RPAREN,SEMI,int,d,EQ,LPAREN,int,RPAREN,item,DOT,getKey,LPAREN,RPAREN,SEMI,int,v,EQ,LPAREN,int,RPAREN,item,DOT,getItem,LPAREN,RPAREN,SEMI,distances,LBRACKET,v,RBRACKET,EQ,d,SEMI,colors,LBRACKET,v,RBRACKET,EQ,black,SEMI,int,LBRACKET,RBRACKET,a,EQ,g,DOT,getArrayOfAdjacentVertices,LPAREN,v,RPAREN,SEMI,int,LBRACKET,RBRACKET,da,EQ,g,DOT,getArrayOfIncidentEdgeWeights,LPAREN,v,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,a,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,int,w,EQ,a,LBRACKET,i,RBRACKET,SEMI,int,dw,EQ,d,PLUS,da,LBRACKET,i,RBRACKET,SEMI,IF,LPAREN,colors,LBRACKET,w,RBRACKET,EQEQ,white,BARBAR,LPAREN,colors,LBRACKET,w,RBRACKET,EQEQ,gray,AMPAMP,items,LBRACKET,w,RBRACKET,DOT,getKey,LPAREN,RPAREN,GT,dw,RPAREN,RPAREN,LBRACE,colors,LBRACKET,w,RBRACKET,EQ,gray,SEMI,predecessors,LBRACKET,w,RBRACKET,EQ,v,SEMI,IF,LPAREN,items,LBRACKET,w,RBRACKET,EQEQ,null,RPAREN,LBRACE,items,LBRACKET,w,RBRACKET,EQ,q,DOT,insert,LPAREN,w,COMMA,dw,RPAREN,SEMI,RBRACE,ELSE,LBRACE,q,DOT,decreaseKeyTo,LPAREN,items,LBRACKET,w,RBRACKET,COMMA,dw,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,RBRACE,RBRACE","	@SuppressWarnings(""unchecked"")
,	public void findShortestPaths(Graph<? extends Edge> g, int u,
,		PriorityQueue q) throws IllegalArgumentException {
,		
,		// check arguments
,		if (g == null) {
,			String errorMessage = ""The passed graph musn't be null."";
,			
,			throw new IllegalArgumentException(errorMessage);
,		}
,		
,		if (u < 0 || u <MASK> g.getNumberOfVertices()){
,			String errorMessage = ""The vertex with index "" + u +
,				"" is not within the passed graph."";
,			throw new IllegalArgumentException(errorMessage);
,		}
,		
,		// get the number of vertices of the passed graph
,		int n = g.getNumberOfVertices();
,		
,		// initialize help arrays
,		int[] colors = new int[n];
,		predecessors = new int[n];
,		distances = new int[n];
,		
,		int white = 0;
,		int gray = 1;
,		int black = 2;
,		
,		for (int v = 0; v < n; v++) {
,			colors[v] = white;
,			predecessors[v] = -1;
,			distances[v] = -1;
,		}
,		
,		// mark the start vertex as visited
,		colors[u] = gray;
,		
,		// initialize the priority queue
,		PriorityQueueItem<Integer>[] items = new PriorityQueueItem[n];
,		
,		PriorityQueueItem<Integer> item = q.insert(u, 0);
,		items[u] = item;
,		
,		// extend distance tree until border is empty
,		while (!q.isEmpty()) {
,			// get next vertex for the distance tree and set its distance
,			item = q.deleteMin();
,			int d = (int)item.getKey();
,			int v = (int)item.getItem();
,			distances[v] = d;
,			
,			// mark that vertex as visited
,			colors[v] = black;
,			
,			// update border and border approximation
,			int[] a = g.getArrayOfAdjacentVertices(v);
,			int[] da = g.getArrayOfIncidentEdgeWeights(v);
,			
,			for (int i = 0; i < a.length; i++) {
,				// get next neighbor
,				int w = a[i];
,				
,				// update approximation
,				int dw = d + da[i];
,				
,				// update entry if necessary
,				if (colors[w] == white ||
,					(colors[w] == gray && items[w].getKey() > dw)) {
,					colors[w] = gray;
,					predecessors[w] = v;
,					
,					if (items[w] == null) {
,						items[w] = q.insert(w, dw);
,					} else {
,						q.decreaseKeyTo(items[w], dw);
,					}
,				}
,			}
,		}
,	}
"
b4c6806c-de1d-4e17-959c-99489d5dd3e8,a5a15305-8aa5-4b32-955f-f238a8f34405,SUB,"MONKEYS_AT,Override,PUBLIC,void,onCommand,LPAREN,POP3Session,session,COMMA,String,argument1,COMMA,String,argument2,RPAREN,THROWS,POP3Exception,LBRACE,IF,LPAREN,session,DOT,getState,LPAREN,RPAREN,BANGEQ,POP3State,DOT,TRANSACTION,RPAREN,LBRACE,THROW,NEW,POP3Exception,LPAREN,""-ERR auth first"",RPAREN,SEMI,RBRACE,IF,LPAREN,argument1,EQEQ,null,AMPAMP,argument2,EQEQ,null,RPAREN,LBRACE,dealOneArgument,LPAREN,session,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,argument1,BANGEQ,null,AMPAMP,argument2,EQEQ,null,RPAREN,LBRACE,int,emailNum,EQ,<MASK>,1,SEMI,TRY,LBRACE,emailNum,EQ,Integer,DOT,parseInt,LPAREN,argument1,RPAREN,SEMI,RBRACE,CATCH,LPAREN,NumberFormatException,e,RPAREN,LBRACE,THROW,NEW,POP3Exception,LPAREN,""-ERR syntax error"",RPAREN,SEMI,RBRACE,dealTwoArgument,LPAREN,session,COMMA,emailNum,RPAREN,SEMI,RBRACE,ELSE,LBRACE,THROW,NEW,POP3Exception,LPAREN,""-ERR syntax error"",RPAREN,SEMI,RBRACE,RBRACE","	@Override
,	public void onCommand(POP3Session session, String argument1,
,			String argument2) throws POP3Exception {
,		// 检查会话状态
,		if (session.getState() != POP3State.TRANSACTION) {
,			throw new POP3Exception(""<MASK>ERR auth first"");
,		}
,
,		// 参数数量不同对应不同操作
,		if (argument1 == null && argument2 == null) { // 没有参数，列出所有邮件的uidl
,			dealOneArgument(session);
,		} else if (argument1 != null && argument2 == null) {
,			// 检查参数是否是数字
,			int emailNum = -1;
,			try {
,				emailNum = Integer.parseInt(argument1);
,			} catch (NumberFormatException e) {
,				// 参数不是数字，出错
,				throw new POP3Exception(""-ERR syntax error"");
,			}
,			dealTwoArgument(session, emailNum);
,		} else {
,			// 错误参数
,			throw new POP3Exception(""-ERR syntax error"");
,		}
,	}
"
92951106-a87f-4e0c-9019-4852bf22d1be,a371bf78-ab9d-45ba-a902-5dad88dffdee,PLUS,"PUBLIC,STATIC,int,getHeight,LPAREN,AVL,root,RPAREN,LBRACE,IF,LPAREN,root,EQEQ,null,RPAREN,RETURN,SUB,1,SEMI,RETURN,1,<MASK>,max,LPAREN,getHeight,LPAREN,root,DOT,leftChild,RPAREN,COMMA,getHeight,LPAREN,root,DOT,rightChild,RPAREN,RPAREN,SEMI,RBRACE","	public static int getHeight(AVL root) {
,		if (root == null) return -1;
,		return 1 <MASK> max(getHeight(root.leftChild), getHeight(root.rightChild));
,	}
"
3913c395-db09-4ac4-8282-49a81b6a21f4,35f362e5-194f-4ca8-bb5a-2e42ad3596dd,BANGEQ,"PUBLIC,Resource,get,LPAREN,String,id,COMMA,ResourceType,type,RPAREN,LBRACE,IF,LPAREN,resources,DOT,containsKey,LPAREN,id,RPAREN,RPAREN,LBRACE,RETURN,resources,DOT,get,LPAREN,id,RPAREN,SEMI,RBRACE,ELSE,LBRACE,FOR,LPAREN,ResourceLoader,l,COLON,loaders,RPAREN,LBRACE,TRY,LBRACE,Resource,rv,EQ,l,DOT,load,LPAREN,id,COMMA,type,RPAREN,SEMI,IF,LPAREN,rv,<MASK>,null,RPAREN,LBRACE,resources,DOT,put,LPAREN,id,COMMA,rv,RPAREN,SEMI,RETURN,rv,SEMI,RBRACE,RBRACE,CATCH,LPAREN,Exception,ex,RPAREN,LBRACE,RBRACE,RBRACE,Err,DOT,w,LPAREN,""Resource '"",PLUS,id,PLUS,""' could not be loaded."",RPAREN,SEMI,RETURN,null,SEMI,RBRACE,RBRACE","	public Resource get(String id, ResourceType type) {
,		if (resources.containsKey(id)) {
,			return resources.get(id);
,		} else {
,			for (ResourceLoader l : loaders) {
,				try {
,					Resource rv = l.load(id, type);
,					if (rv <MASK> null) {
,						resources.put(id, rv);
,						return rv;
,					}
,				} catch (Exception ex) { }
,			}
,			Err.w(""Resource '"" + id + ""' could not be loaded."");
,			return null;
,		}
,	}
"
3913c395-db09-4ac4-8282-49a81b6a21f4,2b0dcd3b-422a-45b1-89ea-5ca03fc8489f,LT,"MONKEYS_AT,Override,PUBLIC,void,update,LPAREN,RPAREN,LBRACE,double,dx,SEMI,double,dy,SEMI,double,d,SEMI,double,fx,SEMI,double,fy,SEMI,FOR,LPAREN,GameEntity,n,COLON,u,DOT,neighbours,RPAREN,LBRACE,IF,LPAREN,n,DOT,isEnemy,LPAREN,u,RPAREN,RPAREN,CONTINUE,SEMI,dx,EQ,u,DOT,getX,LPAREN,RPAREN,SUB,n,DOT,getX,LPAREN,RPAREN,SEMI,dy,EQ,u,DOT,getY,LPAREN,RPAREN,SUB,n,DOT,getY,LPAREN,RPAREN,SEMI,d,EQ,dx,STAR,dx,PLUS,dy,STAR,dy,SEMI,IF,LPAREN,d,<MASK>,u,DOT,softr,STAR,u,DOT,softr,RPAREN,LBRACE,IF,LPAREN,d,EQEQ,0,RPAREN,LBRACE,double,r,EQ,Math,DOT,random,LPAREN,RPAREN,SEMI,fx,EQ,r,SEMI,fy,EQ,Math,DOT,sqrt,LPAREN,1,SUB,r,STAR,r,RPAREN,SEMI,RBRACE,ELSE,LBRACE,fx,EQ,c,STAR,dx,SLASH,d,SEMI,fy,EQ,c,STAR,dy,SLASH,d,SEMI,RBRACE,u,DOT,addForce,LPAREN,fx,COMMA,fy,RPAREN,SEMI,RBRACE,RBRACE,RBRACE","	@Override
,	public void update() {
,		double dx;
,		double dy;
,		double d;
,		double fx;
,		double fy;
,		for (GameEntity n : u.neighbours)  {
,			if (n.isEnemy(u)) continue;
,			dx = u.getX()-n.getX();
,			dy = u.getY()-n.getY();
,			d = dx*dx+dy*dy;
,			if (d <MASK> u.softr*u.softr) {
,				if (d == 0) {
,				//	TODO: replace by somethign like d < u.getCollisionRadius()*u.getCollisionRadius()
,					double r = Math.random();
,					fx = r;
,					fy = Math.sqrt(1-r*r);
,				} else {
,					fx = c*dx/d;
,					fy = c*dy/d;
,				}
,				u.addForce(fx, fy);
,			}
,		}
,		
,	}
"
c694737b-29b6-48d5-90c3-b6e0b6d64d88,cdbd4dec-b75f-4bde-b89a-925f05e9fb16,PERCENT,"PROTECTED,String,formatLatitude,LPAREN,double,latitudeInDegrees,RPAREN,LBRACE,double,latitude,EQ,LPAREN,LPAREN,latitudeInDegrees,PLUS,180.0,RPAREN,<MASK>,360.0,RPAREN,SUB,180.0,SEMI,IF,LPAREN,Math,DOT,abs,LPAREN,latitude,RPAREN,LT,1.0,SLASH,120.0,RPAREN,LBRACE,RETURN,""0\u00B0"",SEMI,RBRACE,IF,LPAREN,latitude,GT,90.0,RPAREN,LBRACE,latitude,EQ,180.0,SUB,latitude,SEMI,RBRACE,IF,LPAREN,latitude,LT,SUB,90.0,RPAREN,LBRACE,latitude,EQ,SUB,180.0,SUB,latitude,SEMI,RBRACE,String,direction,SEMI,IF,LPAREN,latitude,GT,0,RPAREN,LBRACE,direction,EQ,""N"",SEMI,RBRACE,ELSE,LBRACE,direction,EQ,""S"",SEMI,RBRACE,double,absLatitude,EQ,Math,DOT,abs,LPAREN,latitude,RPAREN,SEMI,RETURN,formatDegreesAndMinutes,LPAREN,absLatitude,RPAREN,PLUS,direction,SEMI,RBRACE","    protected String formatLatitude(double latitudeInDegrees) {
,        double latitude = ((latitudeInDegrees + 180.0) <MASK> 360.0) - 180.0;
,        if (Math.abs(latitude) < 1.0 / 120.0) {
,            return ""0°"";
,        }
,        if (latitude > 90.0) {
,            latitude = 180.0 - latitude;
,        }
,        if (latitude < -90.0) {
,            latitude = -180.0 - latitude;
,        }
,        String direction;
,        if (latitude > 0) {
,            direction = ""N"";
,        } else {
,            direction = ""S"";
,        }
,        double absLatitude = Math.abs(latitude);
,        return formatDegreesAndMinutes(absLatitude)+direction;
,    }
"
ea91ca9d-c4a2-44a2-9a1f-e35ca896736e,fd2c64ed-5391-4d87-93da-e7219de261e0,LTEQ,"PUBLIC,STATIC,Object,stringToValue,LPAREN,String,string,RPAREN,LBRACE,Double,d,SEMI,IF,LPAREN,string,DOT,equals,LPAREN,"""",RPAREN,RPAREN,LBRACE,RETURN,string,SEMI,RBRACE,IF,LPAREN,string,DOT,equalsIgnoreCase,LPAREN,""true"",RPAREN,RPAREN,LBRACE,RETURN,Boolean,DOT,TRUE,SEMI,RBRACE,IF,LPAREN,string,DOT,equalsIgnoreCase,LPAREN,""false"",RPAREN,RPAREN,LBRACE,RETURN,Boolean,DOT,FALSE,SEMI,RBRACE,IF,LPAREN,string,DOT,equalsIgnoreCase,LPAREN,""null"",RPAREN,RPAREN,LBRACE,RETURN,JSONObject,DOT,NULL,SEMI,RBRACE,char,b,EQ,string,DOT,charAt,LPAREN,0,RPAREN,SEMI,IF,LPAREN,LPAREN,b,GTEQ,0,AMPAMP,b,<MASK>,9,RPAREN,BARBAR,b,EQEQ,-,RPAREN,LBRACE,TRY,LBRACE,IF,LPAREN,string,DOT,indexOf,LPAREN,.,RPAREN,GT,SUB,1,BARBAR,string,DOT,indexOf,LPAREN,e,RPAREN,GT,SUB,1,BARBAR,string,DOT,indexOf,LPAREN,E,RPAREN,GT,SUB,1,RPAREN,LBRACE,d,EQ,Double,DOT,valueOf,LPAREN,string,RPAREN,SEMI,IF,LPAREN,BANG,d,DOT,isInfinite,LPAREN,RPAREN,AMPAMP,BANG,d,DOT,isNaN,LPAREN,RPAREN,RPAREN,LBRACE,RETURN,d,SEMI,RBRACE,RBRACE,ELSE,LBRACE,Long,myLong,EQ,NEW,Long,LPAREN,string,RPAREN,SEMI,IF,LPAREN,string,DOT,equals,LPAREN,myLong,DOT,toString,LPAREN,RPAREN,RPAREN,RPAREN,LBRACE,IF,LPAREN,myLong,DOT,longValue,LPAREN,RPAREN,EQEQ,myLong,DOT,intValue,LPAREN,RPAREN,RPAREN,LBRACE,RETURN,NEW,Integer,LPAREN,myLong,DOT,intValue,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,ELSE,LBRACE,RETURN,myLong,SEMI,RBRACE,RBRACE,RBRACE,RBRACE,CATCH,LPAREN,Exception,ignore,RPAREN,LBRACE,RBRACE,RBRACE,RETURN,string,SEMI,RBRACE","    public static Object stringToValue(String string) {
,        Double d;
,        if (string.equals("""")) {
,            return string;
,        }
,        if (string.equalsIgnoreCase(""true"")) {
,            return Boolean.TRUE;
,        }
,        if (string.equalsIgnoreCase(""false"")) {
,            return Boolean.FALSE;
,        }
,        if (string.equalsIgnoreCase(""null"")) {
,            return JSONObject.NULL;
,        }
,
,        /*
,         * If it might be a number, try converting it. If a number cannot be
,         * produced, then the value will just be a string.
,         */
,
,        char b = string.charAt(0);
,        if ((b >= '0' && b <MASK> '9') || b == '-') {
,            try {
,                if (string.indexOf('.') > -1 || string.indexOf('e') > -1
,                        || string.indexOf('E') > -1) {
,                    d = Double.valueOf(string);
,                    if (!d.isInfinite() && !d.isNaN()) {
,                        return d;
,                    }
,                } else {
,                    Long myLong = new Long(string);
,                    if (string.equals(myLong.toString())) {
,                        if (myLong.longValue() == myLong.intValue()) {
,                            return new Integer(myLong.intValue());
,                        } else {
,                            return myLong;
,                        }
,                    }
,                }
,            } catch (Exception ignore) {
,            }
,        }
,        return string;
,    }
"
7a6d4ee7-a11c-445d-8f58-7963e611bee0,6f720bb7-6cfb-46be-80a0-6a2ec70c2077,LT,"PUBLIC,void,actionPerformed,LPAREN,ActionEvent,e,RPAREN,LBRACE,IF,LPAREN,success,EQEQ,true,RPAREN,LBRACE,nextQuestion,LPAREN,RPAREN,SEMI,RETURN,SEMI,RBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,answers,DOT,size,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,JButton,btn,EQ,answers,DOT,get,LPAREN,i,RPAREN,SEMI,IF,LPAREN,btn,DOT,equals,LPAREN,e,DOT,getSource,LPAREN,RPAREN,RPAREN,RPAREN,LBRACE,checkAnswer,LPAREN,i,RPAREN,SEMI,RETURN,SEMI,RBRACE,RBRACE,RBRACE","	public void actionPerformed(ActionEvent e)
,	{
,		if(success == true)
,		{
,			nextQuestion();
,			return;
,		}
,		
,		for(int i = 0; i <MASK> answers.size(); i++)
,		{
,			JButton btn = answers.get(i);
,			if(btn.equals(e.getSource()))
,			{
,				checkAnswer(i);
,				return;
,			}
,		}
,	}
"
68422d14-68e8-42b7-9437-f6891889f4fc,3d3eea45-89e7-46a7-8f24-eccbf6d9b884,PERCENT,"PUBLIC,void,setMinutes,LPAREN,int,minutes,RPAREN,LBRACE,IF,LPAREN,minutes,LT,0,RPAREN,RETURN,SEMI,IF,LPAREN,minutes,GT,60,RPAREN,LBRACE,this,DOT,minutes,EQ,minutes,<MASK>,60,SEMI,this,DOT,hour,PLUSEQ,minutes,SLASH,60,SEMI,RBRACE,ELSE,this,DOT,minutes,EQ,minutes,SEMI,RBRACE","	public void setMinutes(int minutes) {
,		if(minutes < 0) return;
,		//should actually return an exception
,		
,		if(minutes > 60) {
,			this.minutes = minutes <MASK> 60;
,			this.hour += minutes / 60;
,		} else this.minutes = minutes;
,	}
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,44c6c598-cd9c-468f-b381-4f07852ac6af,BANGEQ,"PUBLIC,STATIC,List,LT,ABObject,GT,GetClosestObjects,LPAREN,List,LT,ABObject,GT,objectList,COMMA,boolean,left,RPAREN,LBRACE,List,LT,ABObject,GT,removedList,EQ,NEW,ArrayList,LT,ABObject,GT,LPAREN,RPAREN,SEMI,Iterator,LT,ABObject,GT,index,EQ,objectList,DOT,iterator,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,objectList,DOT,size,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,ABObject,y,EQ,objectList,DOT,get,LPAREN,i,RPAREN,SEMI,FOR,LPAREN,int,j,EQ,0,SEMI,j,LT,objectList,DOT,size,LPAREN,RPAREN,SEMI,j,PLUSPLUS,RPAREN,LBRACE,ABObject,z,EQ,objectList,DOT,get,LPAREN,j,RPAREN,SEMI,IF,LPAREN,y,DOT,id,<MASK>,z,DOT,id,RPAREN,LBRACE,ERA,LBRACKET,RBRACKET,rels,EQ,RectangleAlgebra,DOT,GetERA,LPAREN,y,COMMA,z,RPAREN,SEMI,IF,LPAREN,StabilityRules,DOT,CheckRule,LPAREN,rels,LBRACKET,0,RBRACKET,COMMA,331,RPAREN,RPAREN,LBRACE,IF,LPAREN,left,RPAREN,LBRACE,removedList,DOT,add,LPAREN,y,RPAREN,SEMI,RBRACE,ELSE,LBRACE,removedList,DOT,add,LPAREN,z,RPAREN,SEMI,RBRACE,RBRACE,ELSE,IF,LPAREN,StabilityRules,DOT,CheckRule,LPAREN,rels,LBRACKET,0,RBRACKET,COMMA,332,RPAREN,RPAREN,LBRACE,IF,LPAREN,left,RPAREN,LBRACE,removedList,DOT,add,LPAREN,z,RPAREN,SEMI,RBRACE,ELSE,LBRACE,removedList,DOT,add,LPAREN,y,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,RBRACE,RBRACE,WHILE,LPAREN,index,DOT,hasNext,LPAREN,RPAREN,RPAREN,LBRACE,ABObject,x,EQ,index,DOT,next,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,removedList,DOT,size,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,ABObject,y,EQ,removedList,DOT,get,LPAREN,i,RPAREN,SEMI,IF,LPAREN,x,DOT,id,EQEQ,y,DOT,id,RPAREN,LBRACE,index,DOT,remove,LPAREN,RPAREN,SEMI,BREAK,SEMI,RBRACE,RBRACE,RBRACE,RETURN,objectList,SEMI,RBRACE","	public static List<ABObject> GetClosestObjects (List<ABObject> objectList, boolean left)
,	{
,		List<ABObject> removedList = new ArrayList<ABObject>();
,		Iterator<ABObject> index = objectList.iterator();
,		for (int i = 0; i < objectList.size(); i++)
,		{
,			ABObject y = objectList.get(i);
,			for (int j = 0; j < objectList.size(); j++)
,			{
,				ABObject z = objectList.get(j);
,				if (y.id <MASK> z.id)
,				{
,					ERA[] rels = RectangleAlgebra.GetERA(y, z);
,					if (StabilityRules.CheckRule(rels[0], 331))
,					{	
,						if (left)
,						{
,							//System.out.println(""delete "" + y.id + "" remain "" + z.id);
,							removedList.add(y);
,						}
,						else
,						{
,							//System.out.println(""delete "" + z.id + "" remain "" + y.id);
,							removedList.add(z);
,						}
,					}
,					else if (StabilityRules.CheckRule(rels[0], 332))
,					{
,						if (left)
,						{
,							//System.out.println(""delete "" + z.id + "" remain "" + y.id);
,							removedList.add(z);
,						}
,						else
,						{
,							//System.out.println(""delete "" + y.id + "" remain "" + z.id);
,							removedList.add(y);
,						}
,					}	
,				}
,			}
,		}
,
,		while (index.hasNext())
,		{
,			ABObject x = index.next();
,			for (int i = 0; i < removedList.size(); i++)
,			{
,				ABObject y = removedList.get(i);
,				if (x.id == y.id)
,				{
,					index.remove();
,					break;
,				}
,			}
,		}
,		
,		return objectList;
,	}
"
7b10f06b-338c-44c3-8e01-b40eb98395b8,fb2bb0fa-0968-4f4b-81eb-7398b9f1191c,EQEQ,"PRIVATE,void,buildBoard,LPAREN,RPAREN,LBRACE,int,rows,EQ,polymino,DOT,boardRows,LPAREN,RPAREN,SEMI,int,cols,EQ,polymino,DOT,boardCols,LPAREN,RPAREN,SEMI,IF,LPAREN,board,<MASK>,null,RPAREN,LBRACE,board,EQ,NEW,int,LBRACKET,rows,RBRACKET,LBRACKET,cols,RBRACKET,SEMI,RBRACE,FOR,LPAREN,int,row,EQ,0,SEMI,row,LT,rows,SEMI,PLUSPLUS,row,RPAREN,LBRACE,FOR,LPAREN,int,col,EQ,0,SEMI,col,LT,cols,SEMI,PLUSPLUS,col,RPAREN,LBRACE,IF,LPAREN,polymino,DOT,getBoard,LPAREN,RPAREN,LBRACKET,row,RBRACKET,LBRACKET,col,RBRACKET,RPAREN,LBRACE,board,LBRACKET,row,RBRACKET,LBRACKET,col,RBRACKET,EQ,SUB,2,SEMI,RBRACE,ELSE,LBRACE,board,LBRACKET,row,RBRACKET,LBRACKET,col,RBRACKET,EQ,SUB,1,SEMI,RBRACE,RBRACE,RBRACE,FOR,LPAREN,PiecePart,constraint,COLON,stack,RPAREN,LBRACE,int,pieceRows,EQ,constraint,DOT,pieceRows,LPAREN,RPAREN,SEMI,int,pieceCols,EQ,constraint,DOT,pieceCols,LPAREN,RPAREN,SEMI,int,boardRow,EQ,constraint,DOT,boardRow,LPAREN,RPAREN,SEMI,int,boardCol,EQ,constraint,DOT,boardCol,LPAREN,RPAREN,SEMI,int,id,EQ,constraint,DOT,getPiece,LPAREN,RPAREN,DOT,getId,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,row,EQ,0,SEMI,row,LT,pieceRows,SEMI,PLUSPLUS,row,RPAREN,LBRACE,FOR,LPAREN,int,col,EQ,0,SEMI,col,LT,pieceCols,SEMI,PLUSPLUS,col,RPAREN,LBRACE,IF,LPAREN,constraint,DOT,occupied,LPAREN,row,COMMA,col,RPAREN,RPAREN,LBRACE,board,LBRACKET,boardRow,PLUS,row,RBRACKET,LBRACKET,boardCol,PLUS,col,RBRACKET,EQ,id,SEMI,RBRACE,RBRACE,RBRACE,RBRACE,RBRACE","	private void buildBoard() {
,		int rows = polymino.boardRows();
,		int cols = polymino.boardCols();
,		if (board <MASK> null) {
,			board = new int[rows][cols];
,		}
,		for (int row = 0; row < rows; ++row) {
,			for (int col = 0; col < cols; ++col) {
,				if (polymino.getBoard()[row][col]) {
,					// wall
,					board[row][col] = -2;
,				} else {
,					// unoccupied
,					board[row][col] = -1;
,				}
,			}
,		}
,
,		for (PiecePart constraint : stack) {
,			int pieceRows = constraint.pieceRows();
,			int pieceCols = constraint.pieceCols();
,			int boardRow = constraint.boardRow();
,			int boardCol = constraint.boardCol();
,			int id = constraint.getPiece().getId();
,			for (int row = 0; row < pieceRows; ++row) {
,				for (int col = 0; col < pieceCols; ++col) {
,					if (constraint.occupied(row, col)) {
,						board[boardRow + row][boardCol + col] = id;
,					}
,				}
,			}
,		}
,	}
"
9971c369-1cd4-431b-bab2-7edb0b3b68d5,026bc838-3b54-40bc-a8a7-2a0303ae4e67,PLUS,"MONKEYS_AT,Override,DEFAULT,Query,unit,LPAREN,Object,s,RPAREN,LBRACE,IF,LPAREN,s,INSTANCEOF,Query,RPAREN,RETURN,LPAREN,Query,RPAREN,s,SEMI,List,LT,String,GT,res,EQ,NEW,ArrayList,LT,String,GT,LPAREN,RPAREN,SEMI,res,DOT,add,LPAREN,"""",<MASK>,s,RPAREN,SEMI,RETURN,LPAREN,RPAREN,ARROW,res,SEMI,RBRACE","	@Override
,	default Query unit(Object s){
,		if (s instanceof Query) return (Query)s;
,		List<String> res = new ArrayList<String>();
,		res.add(""""<MASK>s);
,		return () -> res;
,	}
"
113c5414-6c55-466b-b879-a350ab6e0ca2,f2125990-7bca-4a96-b35d-8f9ea69a7bff,EQ,"PUBLIC,void,setOpenedImage,LPAREN,ImageIcon,opened,RPAREN,LBRACE,this,DOT,opened,<MASK>,opened,SEMI,RBRACE","	public void setOpenedImage(ImageIcon opened) {
,		this.opened <MASK> opened;
,	}
"
41539c05-83ff-49b8-a839-9292483dddc3,6260936a-55b6-4fa2-a648-d243c2af50f4,PERCENT,"PUBLIC,JGPoint,getImageCoord,LPAREN,int,imgnr,RPAREN,LBRACE,IF,LPAREN,img,EQEQ,null,RPAREN,RETURN,null,SEMI,JGPoint,size,EQ,img,DOT,getSize,LPAREN,RPAREN,SEMI,int,imgs_per_line,EQ,LPAREN,size,DOT,x,SUB,xofs,PLUS,skipx,RPAREN,SLASH,LPAREN,tilex,PLUS,skipx,RPAREN,SEMI,int,ynr,EQ,imgnr,SLASH,imgs_per_line,SEMI,int,xnr,EQ,imgnr,<MASK>,imgs_per_line,SEMI,RETURN,NEW,JGPoint,LPAREN,xofs,PLUS,xnr,STAR,LPAREN,tilex,PLUS,skipx,RPAREN,COMMA,yofs,PLUS,ynr,STAR,LPAREN,tiley,PLUS,skipy,RPAREN,RPAREN,SEMI,RBRACE","	public JGPoint getImageCoord(int imgnr) {
,		if (img==null) return null;
,		JGPoint size = img.getSize();
,		int imgs_per_line = (size.x - xofs + skipx) / (tilex+skipx);
,		int ynr = imgnr / imgs_per_line;
,		int xnr = imgnr <MASK> imgs_per_line;
,		return new JGPoint(
,			xofs + xnr*(tilex+skipx),
,			yofs + ynr*(tiley+skipy) );
,	}
"
8b02bf36-3970-4fd2-ac11-287131435c5d,8eadd7c0-d5e5-4191-8f0a-65b90302cecf,LTEQ,"PRIVATE,JMenu,makePlayersMenu,LPAREN,RPAREN,LBRACE,JMenu,playersMenu,EQ,NEW,JMenu,LPAREN,""Players"",RPAREN,SEMI,FOR,LPAREN,int,i,EQ,1,SEMI,i,<MASK>,Controller,DOT,MAX_PLAYERS,SEMI,i,PLUSPLUS,RPAREN,LBRACE,JMenuItem,item,EQ,NEW,JMenuItem,LPAREN,Integer,DOT,toString,LPAREN,i,RPAREN,RPAREN,SEMI,item,DOT,addActionListener,LPAREN,NEW,SetPlayersAction,LPAREN,i,RPAREN,RPAREN,SEMI,item,DOT,setEnabled,LPAREN,true,RPAREN,SEMI,playersMenu,DOT,add,LPAREN,item,RPAREN,SEMI,RBRACE,RETURN,playersMenu,SEMI,RBRACE","	private JMenu makePlayersMenu() {
,		JMenu playersMenu = new JMenu(""Players"");
,		
,		for (int i = 1; i <MASK> Controller.MAX_PLAYERS; i++) {
,			JMenuItem item = new JMenuItem(Integer.toString(i));
,			item.addActionListener(new SetPlayersAction(i));
,			item.setEnabled(true);
,			playersMenu.add(item);			
,		}
,		return playersMenu;
,	}
"
b792a0be-4219-4d3e-95ef-36bcf8d3d523,347e50c2-aa7f-4bc0-b2eb-532f66d04d56,GTEQ,"MONKEYS_AT,Override,PUBLIC,void,buy,LPAREN,Command,cmd,RPAREN,LBRACE,cmd,DOT,execute,LPAREN,RPAREN,SEMI,IF,LPAREN,Storage,DOT,getInstance,LPAREN,RPAREN,DOT,getRevenue,LPAREN,RPAREN,LT,10000.0,RPAREN,LBRACE,restaurant,DOT,setState,LPAREN,restaurant,DOT,getBadstate,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,Storage,DOT,getInstance,LPAREN,RPAREN,DOT,getRevenue,LPAREN,RPAREN,<MASK>,10000.0,AMPAMP,Storage,DOT,getInstance,LPAREN,RPAREN,DOT,getRevenue,LPAREN,RPAREN,LT,20000.0,RPAREN,LBRACE,restaurant,DOT,setState,LPAREN,restaurant,DOT,getNormalstate,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,ELSE,LBRACE,restaurant,DOT,setState,LPAREN,restaurant,DOT,getGoodstate,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,RBRACE","	@Override
,	public void buy(Command cmd)
,	{
,		cmd.execute();
,		if(Storage.getInstance().getRevenue() < 10000.0)
,		{
,			restaurant.setState(restaurant.getBadstate());
,		}else if(Storage.getInstance().getRevenue() <MASK> 10000.0 && Storage.getInstance().getRevenue() < 20000.0)
,		{
,			restaurant.setState(restaurant.getNormalstate());
,		}
,		else
,		{
,			restaurant.setState(restaurant.getGoodstate());
,		}
,	}
"
46553d6c-dc87-4edc-9d46-5b7555c514e8,198ca975-24cf-4c97-8cfd-f2ce2dfb3c29,PERCENT,"PUBLIC,FINAL,STATIC,byte,LBRACKET,RBRACKET,intToLittleEndian,LPAREN,int,val,RPAREN,LBRACE,FINAL,byte,LBRACKET,RBRACKET,b,EQ,NEW,byte,LBRACKET,4,RBRACKET,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,4,SEMI,i,PLUSPLUS,RPAREN,LBRACE,b,LBRACKET,i,RBRACKET,EQ,LPAREN,byte,RPAREN,LPAREN,val,<MASK>,256,RPAREN,SEMI,val,EQ,val,SLASH,256,SEMI,RBRACE,RETURN,b,SEMI,RBRACE","  public final static byte[] intToLittleEndian( int val ) {
,    final byte[] b = new byte[4];
,
,    for ( int i = 0; i < 4; i++ ) {
,      b[i] = (byte)( val <MASK> 256 );
,      val = val / 256;
,    }
,
,    return b;
,  }
"
8ec044ff-9e5c-46c4-ad39-ccc8ad42dd87,b8e29101-1e65-41c8-9b59-1094545d790a,GT,"PUBLIC,int,getQuantity,LPAREN,String,id,RPAREN,LBRACE,IF,LPAREN,items,DOT,indexOf,LPAREN,id,RPAREN,<MASK>,SUB,1,RPAREN,LBRACE,RETURN,quantity,DOT,get,LPAREN,items,DOT,indexOf,LPAREN,id,RPAREN,RPAREN,SEMI,RBRACE,RETURN,0,SEMI,RBRACE","		public int getQuantity(String id) {
,			if (items.indexOf(id) <MASK> -1) {
,				return quantity.get(items.indexOf(id));
,			}
,			return 0;
,		}
"
ad0a2aad-9ad8-443c-832f-88b9f64460ed,6409de2f-175d-45bf-ab5f-fed150acd822,EQ,"PUBLIC,HoldShooter,LPAREN,int,position,RPAREN,LBRACE,requires,LPAREN,shooter,RPAREN,SEMI,pos,<MASK>,position,SEMI,RBRACE","    public HoldShooter(int position) {
,        // Use requires() here to declare subsystem dependencies
,        // eg. requires(chassis);
,        requires(shooter);
,        pos <MASK> position;
,    }
"
13ade84f-7d2c-4f3f-a13f-aa7abf8a58a5,230f50b9-c5dd-4a64-b0c7-1a7941f35c1b,SUB,"MONKEYS_AT,Test,PUBLIC,void,test0,LPAREN,RPAREN,LBRACE,LRUCache,test,EQ,NEW,LRUCache,LPAREN,0,RPAREN,SEMI,test,DOT,set,LPAREN,1,COMMA,1,RPAREN,SEMI,Assert,DOT,assertEquals,LPAREN,test,DOT,get,LPAREN,1,RPAREN,COMMA,<MASK>,1,RPAREN,SEMI,RBRACE","	@Test
,	public void test0() {
,		LRUCache test = new LRUCache(0);
,		test.set(1, 1);
,		Assert.assertEquals(test.get(1), <MASK>1);
,	}
"
9b580ee6-153a-476e-abc4-93585610f66b,b51cc6f1-9e3c-48e0-bf73-374fd93de564,STAR,"PUBLIC,void,transform,LPAREN,String,originalFile,COMMA,String,thumbnailFile,COMMA,int,thumbWidth,COMMA,int,thumbHeight,COMMA,int,quality,RPAREN,THROWS,Exception,LBRACE,TRY,LBRACE,Image,image,EQ,javax,DOT,imageio,DOT,ImageIO,DOT,read,LPAREN,NEW,File,LPAREN,originalFile,RPAREN,RPAREN,SEMI,double,thumbRatio,EQ,LPAREN,double,RPAREN,thumbWidth,SLASH,LPAREN,double,RPAREN,thumbHeight,SEMI,int,imageWidth,EQ,image,DOT,getWidth,LPAREN,null,RPAREN,SEMI,int,imageHeight,EQ,image,DOT,getHeight,LPAREN,null,RPAREN,SEMI,double,imageRatio,EQ,LPAREN,double,RPAREN,imageWidth,SLASH,LPAREN,double,RPAREN,imageHeight,SEMI,IF,LPAREN,thumbRatio,LT,imageRatio,RPAREN,LBRACE,thumbHeight,EQ,LPAREN,int,RPAREN,LPAREN,thumbWidth,SLASH,imageRatio,RPAREN,SEMI,RBRACE,ELSE,LBRACE,thumbWidth,EQ,LPAREN,int,RPAREN,LPAREN,thumbHeight,<MASK>,imageRatio,RPAREN,SEMI,RBRACE,IF,LPAREN,imageWidth,LT,thumbWidth,AMPAMP,imageHeight,LT,thumbHeight,RPAREN,LBRACE,thumbWidth,EQ,imageWidth,SEMI,thumbHeight,EQ,imageHeight,SEMI,RBRACE,ELSE,IF,LPAREN,imageWidth,LT,thumbWidth,RPAREN,thumbWidth,EQ,imageWidth,SEMI,ELSE,IF,LPAREN,imageHeight,LT,thumbHeight,RPAREN,thumbHeight,EQ,imageHeight,SEMI,BufferedImage,thumbImage,EQ,NEW,BufferedImage,LPAREN,thumbWidth,COMMA,thumbHeight,COMMA,BufferedImage,DOT,TYPE_INT_RGB,RPAREN,SEMI,Graphics2D,graphics2D,EQ,thumbImage,DOT,createGraphics,LPAREN,RPAREN,SEMI,graphics2D,DOT,setBackground,LPAREN,Color,DOT,WHITE,RPAREN,SEMI,graphics2D,DOT,setPaint,LPAREN,Color,DOT,WHITE,RPAREN,SEMI,graphics2D,DOT,fillRect,LPAREN,0,COMMA,0,COMMA,thumbWidth,COMMA,thumbHeight,RPAREN,SEMI,graphics2D,DOT,setRenderingHint,LPAREN,RenderingHints,DOT,KEY_INTERPOLATION,COMMA,RenderingHints,DOT,VALUE_INTERPOLATION_BILINEAR,RPAREN,SEMI,graphics2D,DOT,drawImage,LPAREN,image,COMMA,0,COMMA,0,COMMA,thumbWidth,COMMA,thumbHeight,COMMA,null,RPAREN,SEMI,javax,DOT,imageio,DOT,ImageIO,DOT,write,LPAREN,thumbImage,COMMA,""JPG"",COMMA,NEW,File,LPAREN,thumbnailFile,RPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,Exception,e,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""Image not found"",RPAREN,SEMI,RBRACE,RBRACE","	  public void transform(String originalFile, String thumbnailFile, int thumbWidth, int thumbHeight, int quality) throws Exception 
,	  {
,		  try{
,		  Image image = javax.imageio.ImageIO.read(new File(originalFile));
,		  
,	      double thumbRatio = (double)thumbWidth / (double)thumbHeight;
,	      int imageWidth    = image.getWidth(null);
,	      int imageHeight   = image.getHeight(null);
,	      double imageRatio = (double)imageWidth / (double)imageHeight;
,	      if (thumbRatio < imageRatio) 
,	      {
,	        thumbHeight = (int)(thumbWidth / imageRatio);
,	      } 
,	      else 
,	      {
,	          thumbWidth = (int)(thumbHeight <MASK> imageRatio);
,	      }
,	      
,	    if(imageWidth < thumbWidth && imageHeight < thumbHeight)
,	    {
,	      thumbWidth = imageWidth;
,	      thumbHeight = imageHeight;
,	    }
,	    else if(imageWidth < thumbWidth)
,	      thumbWidth = imageWidth;
,	    else if(imageHeight < thumbHeight)
,	      thumbHeight = imageHeight;
,
,	      BufferedImage thumbImage = new BufferedImage(thumbWidth, thumbHeight, BufferedImage.TYPE_INT_RGB);
,	      Graphics2D graphics2D = thumbImage.createGraphics();
,	      graphics2D.setBackground(Color.WHITE);
,	      graphics2D.setPaint(Color.WHITE); 
,	      graphics2D.fillRect(0, 0, thumbWidth, thumbHeight);
,	      graphics2D.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
,	      graphics2D.drawImage(image, 0, 0, thumbWidth, thumbHeight, null);
,	      
,	    javax.imageio.ImageIO.write(thumbImage, ""JPG"", new File(thumbnailFile));
,		  }
,		  catch(Exception e){
,			System.out.println(""Image not found"");  
,		  }
,	  }
"
113c5414-6c55-466b-b879-a350ab6e0ca2,d54ab24f-e596-4c6b-920d-99dd43612bc0,EQ,"PUBLIC,void,setDexterity,LPAREN,int,dexterity,RPAREN,LBRACE,this,DOT,dexterity,<MASK>,dexterity,SEMI,RBRACE","	public void setDexterity(int dexterity) {
,		this.dexterity <MASK> dexterity;
,	}
"
b5ee7e5e-a7bf-41d4-8880-3ac95d2f8822,bda7d809-caf9-451f-b00e-68f25f615b9b,BANGEQ,"PUBLIC,void,go,LPAREN,RPAREN,LBRACE,File,fdir,EQ,NEW,File,LPAREN,dir,RPAREN,SEMI,File,LBRACKET,RBRACKET,fa,EQ,fdir,DOT,listFiles,LPAREN,NEW,EndsWithFilter,LPAREN,"".txt"",RPAREN,RPAREN,SEMI,boolean,first,EQ,true,SEMI,TRY,LBRACE,FileWriter,fw,EQ,NEW,FileWriter,LPAREN,outputFile,RPAREN,SEMI,BufferedWriter,bw,EQ,NEW,BufferedWriter,LPAREN,fw,RPAREN,SEMI,FOR,LPAREN,File,f,COLON,fa,RPAREN,LBRACE,TRY,LBRACE,FileReader,fr,EQ,NEW,FileReader,LPAREN,f,RPAREN,SEMI,BufferedReader,br,EQ,NEW,BufferedReader,LPAREN,fr,RPAREN,SEMI,String,ln,EQ,br,DOT,readLine,LPAREN,RPAREN,SEMI,IF,LPAREN,first,RPAREN,LBRACE,bw,DOT,write,LPAREN,""File"",PLUS,""\t"",PLUS,ln,PLUS,""\n"",RPAREN,SEMI,RBRACE,ln,EQ,br,DOT,readLine,LPAREN,RPAREN,SEMI,WHILE,LPAREN,ln,<MASK>,null,RPAREN,LBRACE,bw,DOT,write,LPAREN,f,DOT,getName,LPAREN,RPAREN,PLUS,""\t"",PLUS,ln,PLUS,""\n"",RPAREN,SEMI,ln,EQ,br,DOT,readLine,LPAREN,RPAREN,SEMI,RBRACE,br,DOT,close,LPAREN,RPAREN,SEMI,fr,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,FileNotFoundException,e,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""File: "",PLUS,f,PLUS,"" was not found.  Exiting."",RPAREN,SEMI,System,DOT,exit,LPAREN,0,RPAREN,SEMI,RBRACE,RBRACE,bw,DOT,flush,LPAREN,RPAREN,SEMI,bw,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,IOException,e,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""Could not write to output file "",PLUS,outputFile,PLUS,"".   Exiting."",RPAREN,SEMI,System,DOT,exit,LPAREN,0,RPAREN,SEMI,RBRACE,RBRACE","	public void go() {
,
,		File fdir = new File(dir);
,		File[] fa = fdir.listFiles(new EndsWithFilter("".txt""));
,		boolean first = true;
,		
,		try {
,			FileWriter fw = new FileWriter(outputFile);
,			BufferedWriter bw = new BufferedWriter(fw);
,
,			for (File f : fa) {
,				try {
,					FileReader fr = new FileReader(f);
,					BufferedReader br = new BufferedReader(fr);
,					
,					String ln = br.readLine();
,					
,					if(first){
,						bw.write(""File"" + ""\t"" + ln + ""\n"");
,					}
,					
,					ln = br.readLine();
,					
,					while (ln <MASK> null) {
,						bw.write(f.getName() + ""\t"" + ln + ""\n"");
,						ln = br.readLine();
,					}
,
,					br.close();
,					fr.close();
,
,				} catch (FileNotFoundException e) {
,					System.out.println(""File: "" + f
,							+ "" was not found.  Exiting."");
,					System.exit(0);
,				}
,			}
,			bw.flush();
,			bw.close();
,			
,		} catch (IOException e) {
,			System.out.println(""Could not write to output file "" + outputFile
,					+ "".   Exiting."");
,			System.exit(0);
,
,		}
,	}
"
2170437a-9f53-47a2-b3cb-257eca2eb4ab,5f910fa8-3735-47ba-81d9-f0211d8ed67b,EQEQ,"PUBLIC,boolean,insertTask,LPAREN,Task,newTask,RPAREN,LBRACE,String,values,SEMI,boolean,result,EQ,false,SEMI,TRY,LBRACE,values,EQ,newTask,DOT,getTaskID,LPAREN,RPAREN,PLUS,"", '"",PLUS,formatString,LPAREN,newTask,DOT,getTitle,LPAREN,RPAREN,RPAREN,PLUS,""', "",PLUS,newTask,DOT,getCreator,LPAREN,RPAREN,DOT,getUserID,LPAREN,RPAREN,PLUS,"", "",PLUS,newTask,DOT,getAssignedTo,LPAREN,RPAREN,DOT,getUserID,LPAREN,RPAREN,PLUS,"", '"",PLUS,formatString,LPAREN,newTask,DOT,getDescription,LPAREN,RPAREN,RPAREN,PLUS,""', '"",PLUS,formatString,LPAREN,newTask,DOT,getComments,LPAREN,RPAREN,RPAREN,PLUS,""', "",PLUS,newTask,DOT,getTimeEstimate,LPAREN,RPAREN,PLUS,"", "",PLUS,newTask,DOT,getTimeSpent,LPAREN,RPAREN,PLUS,"", '"",PLUS,newTask,DOT,getPriorityString,LPAREN,RPAREN,PLUS,""', '"",PLUS,newTask,DOT,getStatusString,LPAREN,RPAREN,PLUS,""', '"",PLUS,formatDate,LPAREN,newTask,DOT,getCreatedDate,LPAREN,RPAREN,RPAREN,PLUS,""', '"",PLUS,formatDate,LPAREN,newTask,DOT,getDueDate,LPAREN,RPAREN,RPAREN,PLUS,""', '"",PLUS,formatDate,LPAREN,newTask,DOT,getUpdatedDate,LPAREN,RPAREN,RPAREN,PLUS,""'"",SEMI,cmdString,EQ,""Insert into Tasks "",PLUS,"" Values("",PLUS,values,PLUS,"")"",SEMI,countUpdate,EQ,statement2,DOT,executeUpdate,LPAREN,cmdString,RPAREN,SEMI,result,EQ,LPAREN,checkWarning,LPAREN,statement2,COMMA,countUpdate,RPAREN,<MASK>,null,RPAREN,SEMI,RBRACE,CATCH,LPAREN,Exception,e,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,processSQLError,LPAREN,e,RPAREN,RPAREN,SEMI,RBRACE,RETURN,result,SEMI,RBRACE","	public boolean insertTask(Task newTask)
,	{
,		String values;
,		boolean result = false;
,		
,		try
,		{
,			values = newTask.getTaskID() + "", '""
,					+ formatString(newTask.getTitle()) + ""', ""
,					+ newTask.getCreator().getUserID() + "", ""
,					+ newTask.getAssignedTo().getUserID() + "", '""
,					+ formatString(newTask.getDescription()) + ""', '""
,					+ formatString(newTask.getComments()) + ""', ""
,					+ newTask.getTimeEstimate() + "", "" + newTask.getTimeSpent()
,					+ "", '"" + newTask.getPriorityString() + ""', '""
,					+ newTask.getStatusString() + ""', '""
,					+ formatDate(newTask.getCreatedDate()) + ""', '""
,					+ formatDate(newTask.getDueDate()) + ""', '""
,					+ formatDate(newTask.getUpdatedDate()) + ""'"";
,			cmdString = ""Insert into Tasks "" + "" Values("" + values + "")"";
,			countUpdate = statement2.executeUpdate(cmdString);
,			result = (checkWarning(statement2, countUpdate) <MASK> null);
,		}
,		catch (Exception e)
,		{
,			System.out.println(processSQLError(e));
,		}
,		
,		return result;
,	}
"
38ed5e2e-bfac-4cc9-94e0-5ee38dabb0ca,45878f26-7055-44ff-9517-06079047f6f5,EQEQ,"PUBLIC,int,hashCode,LPAREN,RPAREN,LBRACE,Object,c,EQ,contents,DOT,get,LPAREN,0,RPAREN,DOT,key,SEMI,RETURN,c,<MASK>,null,QUES,0,COLON,c,DOT,hashCode,LPAREN,RPAREN,SEMI,RBRACE","	public int hashCode() {
,	    Object c = contents.get(0).key;
,	    return c <MASK> null ? 0 : c.hashCode();
,	}
"
16b5ef65-203e-4695-8e23-658cc558b525,f92127d6-e07b-4a66-9a27-99718b9a77e3,PERCENT,"PUBLIC,STATIC,svm_model,getTraingingModel,LPAREN,File,trainingFile,RPAREN,LBRACE,List,LT,LabeledFeatureVector,GT,trainSamples,EQ,DataReaderWriter,DOT,getTrainingLabledFeatureVectors,LPAREN,Config,DOT,CCTestParameter,DOT,getWindowSize,LPAREN,RPAREN,COMMA,Config,DOT,CCTestParameter,DOT,getExtractors,LPAREN,RPAREN,COMMA,trainingFile,RPAREN,SEMI,CrossCorrelation,cc,EQ,NEW,CrossCorrelation,LPAREN,trainSamples,RPAREN,SEMI,double,LBRACKET,RBRACKET,crossValidation,EQ,cc,DOT,crossValidation,LPAREN,Config,DOT,CCTestParameter,DOT,getGammaStart,LPAREN,RPAREN,COMMA,Config,DOT,CCTestParameter,DOT,getGammaEnd,LPAREN,RPAREN,COMMA,Config,DOT,CCTestParameter,DOT,getGammaGranularity,LPAREN,RPAREN,COMMA,Config,DOT,CCTestParameter,DOT,getCStart,LPAREN,RPAREN,COMMA,Config,DOT,CCTestParameter,DOT,getCEnd,LPAREN,RPAREN,COMMA,Config,DOT,CCTestParameter,DOT,getCGranularity,LPAREN,RPAREN,COMMA,Config,DOT,CCTestParameter,DOT,getFoldingFactor,LPAREN,RPAREN,RPAREN,SEMI,Trainer,trainer,EQ,NEW,Trainer,LPAREN,RPAREN,SEMI,ArrayList,LT,LabeledFeatureVector,GT,trainList,EQ,NEW,ArrayList,LT,LabeledFeatureVector,GT,LPAREN,RPAREN,SEMI,ArrayList,LT,LabeledFeatureVector,GT,classifyList,EQ,NEW,ArrayList,LT,LabeledFeatureVector,GT,LPAREN,RPAREN,SEMI,IF,LPAREN,divideTrainingClassify,RPAREN,LBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,trainSamples,DOT,size,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,i,<MASK>,2,EQEQ,0,RPAREN,trainList,DOT,add,LPAREN,trainSamples,DOT,get,LPAREN,i,RPAREN,RPAREN,SEMI,ELSE,classifyList,DOT,add,LPAREN,trainSamples,DOT,get,LPAREN,i,RPAREN,RPAREN,SEMI,RBRACE,trainer,DOT,lfvList,DOT,addAll,LPAREN,trainList,RPAREN,SEMI,RBRACE,ELSE,LBRACE,trainer,DOT,lfvList,DOT,addAll,LPAREN,trainSamples,RPAREN,SEMI,RBRACE,svm_model,createModel,EQ,trainer,DOT,createModel,LPAREN,crossValidation,LBRACKET,0,RBRACKET,COMMA,crossValidation,LBRACKET,1,RBRACKET,RPAREN,SEMI,Classifier,classifier,EQ,NEW,Classifier,LPAREN,createModel,RPAREN,SEMI,float,a,EQ,0,SEMI,IF,LPAREN,divideTrainingClassify,RPAREN,LBRACE,FOR,LPAREN,LabeledFeatureVector,v,COLON,classifyList,RPAREN,LBRACE,Gesture,g,EQ,classifier,DOT,evaluate,LPAREN,Gesture,DOT,labelToGesture,LPAREN,v,DOT,getLabel,LPAREN,RPAREN,RPAREN,COMMA,NEW,FeatureVector,LPAREN,v,DOT,getFeatures,LPAREN,RPAREN,RPAREN,RPAREN,SEMI,IF,LPAREN,g,EQEQ,Gesture,DOT,labelToGesture,LPAREN,v,DOT,getLabel,LPAREN,RPAREN,RPAREN,RPAREN,LBRACE,a,PLUSPLUS,SEMI,RBRACE,RBRACE,System,DOT,out,DOT,println,LPAREN,""Accuracy: "",PLUS,a,PLUS,"" "",PLUS,trainList,DOT,size,LPAREN,RPAREN,PLUS,"":"",PLUS,a,SLASH,trainList,DOT,size,LPAREN,RPAREN,STAR,100,RPAREN,SEMI,RBRACE,RETURN,createModel,SEMI,RBRACE","	public static svm_model getTraingingModel(File trainingFile) {
,
,		// parse Signal to LableledFeatureVector
,		List<LabeledFeatureVector> trainSamples = DataReaderWriter
,				.getTrainingLabledFeatureVectors(
,						Config.CCTestParameter.getWindowSize(),
,						Config.CCTestParameter.getExtractors(), trainingFile);
,
,		// List<LabeledFeatureVector> trainSamples = new
,		// ArrayList<LabeledFeatureVector>();
,		// List<TrainData> trainingData = DataReaderWriter.readData();
,		// for (TrainData trainData : trainingData) {
,		// trainSamples.addAll(trainData.getData());
,		// }
,
,		// validate
,		CrossCorrelation cc = new CrossCorrelation(trainSamples);
,
,		double[] crossValidation = cc.crossValidation(
,				Config.CCTestParameter.getGammaStart(), Config.CCTestParameter.getGammaEnd(),
,				Config.CCTestParameter.getGammaGranularity(),
,				Config.CCTestParameter.getCStart(), Config.CCTestParameter.getCEnd(),
,				Config.CCTestParameter.getCGranularity(),
,				Config.CCTestParameter.getFoldingFactor());
,
,		Trainer trainer = new Trainer();
,
,		ArrayList<LabeledFeatureVector> trainList = new ArrayList<LabeledFeatureVector>();
,		ArrayList<LabeledFeatureVector> classifyList = new ArrayList<LabeledFeatureVector>();
,
,		if (divideTrainingClassify) {
,			for (int i = 0; i < trainSamples.size(); i++) {
,				if (i <MASK> 2 == 0)
,					trainList.add(trainSamples.get(i));
,				else
,					classifyList.add(trainSamples.get(i));
,			}
,
,			trainer.lfvList.addAll(trainList);
,		} else {
,			trainer.lfvList.addAll(trainSamples);
,		}
,		svm_model createModel = trainer.createModel(crossValidation[0],
,				crossValidation[1]);
,
,		Classifier classifier = new Classifier(createModel);
,
,		float a = 0;
,		if (divideTrainingClassify) {
,
,			for (LabeledFeatureVector v : classifyList) {
,				Gesture g = classifier.evaluate(
,						Gesture.labelToGesture(v.getLabel()),
,						new FeatureVector(v.getFeatures()));
,
,				if (g == Gesture.labelToGesture(v.getLabel())) {
,					a++;
,				}
,			}
,			System.out.println(""Accuracy: "" + a + "" "" + trainList.size() + "":""
,					+ a / trainList.size() * 100);
,		}
,		return createModel;
,
,	}
"
a98e10ef-3b3e-45e8-a98b-65ce2200211b,3fe055fb-de36-49f4-b76d-112a5d27b4e7,GTEQ,"PRIVATE,STATIC,boolean,newScope,LPAREN,Environment,e,COMMA,LList,code,RPAREN,LBRACE,Scope,outer,EQ,null,SEMI,FOR,LPAREN,int,z,EQ,e,DOT,scopes,DOT,size,LPAREN,RPAREN,SUB,1,SEMI,z,<MASK>,1,SEMI,z,SUBSUB,RPAREN,LBRACE,IF,LPAREN,e,DOT,scopes,DOT,get,LPAREN,z,RPAREN,DOT,procedure,AMPAMP,BANG,LPAREN,Primitives,DOT,prim,LPAREN,e,DOT,scopes,DOT,get,LPAREN,z,RPAREN,DOT,code,RPAREN,RPAREN,RPAREN,LBRACE,outer,EQ,e,DOT,scopes,DOT,get,LPAREN,z,RPAREN,SEMI,BREAK,SEMI,RBRACE,RBRACE,IF,LPAREN,canTail,LPAREN,outer,COMMA,e,COMMA,code,RPAREN,RPAREN,LBRACE,WHILE,LPAREN,e,DOT,scopes,DOT,peek,LPAREN,RPAREN,BANGEQ,outer,RPAREN,LBRACE,e,DOT,scopes,DOT,pop,LPAREN,RPAREN,SEMI,RBRACE,outer,DOT,index,EQ,0,SEMI,outer,DOT,trace,DOT,clear,LPAREN,RPAREN,SEMI,outer,DOT,bindings,DOT,clear,LPAREN,RPAREN,SEMI,RETURN,true,SEMI,RBRACE,ELSE,LBRACE,e,DOT,push,LPAREN,code,COMMA,true,RPAREN,SEMI,RETURN,false,SEMI,RBRACE,RBRACE","	private static boolean newScope(Environment e, LList code) {
,		Scope outer = null;
,		for(int z = e.scopes.size()-1; z <MASK> 1; z--) {
,			if (e.scopes.get(z).procedure && !(Primitives.prim(e.scopes.get(z).code))) {
,				outer = e.scopes.get(z); break;
,			}
,		}
,		if (canTail(outer, e, code)) {
,			// smash the call stack down to the tail procedure
,			while(e.scopes.peek() != outer) { e.scopes.pop(); }
,			outer.index = 0;
,			outer.trace.clear();
,			outer.bindings.clear();
,			return true;
,		}
,		else {
,			// apply the collected arguments in a new scope
,			e.push(code, true);
,			return false;
,		}
,	}
"
a4c68a60-241d-4ccc-bb34-58eb273247fe,832dd7a0-14ae-498b-a1cf-f397142f4467,PLUS,"MONKEYS_AT,Override,PUBLIC,int,hashCode,LPAREN,RPAREN,LBRACE,int,result,EQ,repositoryUrl,DOT,hashCode,LPAREN,RPAREN,SEMI,result,EQ,31,STAR,result,<MASK>,settings,DOT,hashCode,LPAREN,RPAREN,SEMI,RETURN,result,SEMI,RBRACE","	@Override public int hashCode() {
,		int result = repositoryUrl.hashCode();
,		result = 31 * result <MASK> settings.hashCode();
,		return result;
,	}
"
e51e2b7d-9086-4673-95b0-e99ccc97151f,4cbdbedd-7f42-4eb3-9128-2ad70f31be71,SUB,"PRIVATE,void,verifyBytes,LPAREN,InputStream,is1,COMMA,InputStream,is2,RPAREN,THROWS,IOException,LBRACE,byte,LBRACKET,RBRACKET,b1,EQ,NEW,byte,LBRACKET,4096,RBRACKET,SEMI,byte,LBRACKET,RBRACKET,b2,EQ,NEW,byte,LBRACKET,4096,RBRACKET,SEMI,WHILE,LPAREN,true,RPAREN,LBRACE,Arrays,DOT,fill,LPAREN,b1,COMMA,LPAREN,byte,RPAREN,0,RPAREN,SEMI,Arrays,DOT,fill,LPAREN,b2,COMMA,LPAREN,byte,RPAREN,0,RPAREN,SEMI,int,read1,EQ,is1,DOT,read,LPAREN,b1,RPAREN,SEMI,int,read2,EQ,is2,DOT,read,LPAREN,b2,RPAREN,SEMI,assertEquals,LPAREN,read1,COMMA,read2,RPAREN,SEMI,IF,LPAREN,read1,EQEQ,<MASK>,1,RPAREN,LBRACE,BREAK,SEMI,RBRACE,assertTrue,LPAREN,Arrays,DOT,equals,LPAREN,b1,COMMA,b2,RPAREN,RPAREN,SEMI,RBRACE,RBRACE","    private void verifyBytes(InputStream is1, InputStream is2) throws IOException {
,        byte[] b1 = new byte[4096];
,        byte[] b2 = new byte[4096];
,        while (true) {
,            Arrays.fill(b1, (byte)0);
,            Arrays.fill(b2, (byte)0);
,            int read1 = is1.read(b1);
,            int read2 = is2.read(b2);
,            assertEquals(read1, read2);
,            if (read1 == <MASK>1) {
,                break;
,            }
,            assertTrue(Arrays.equals(b1, b2));
,        }
,    }
"
4efd15d4-7259-49ef-bb2b-8984a1154bd6,391a627f-a683-4a40-a38b-9625e45e1457,LT,"PUBLIC,STATIC,void,printLinks,LPAREN,RPAREN,LBRACE,FOR,LPAREN,int,num,EQ,0,SEMI,num,<MASK>,tweetlinks,DOT,size,LPAREN,RPAREN,SEMI,num,PLUSPLUS,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""------------------------------"",RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""Links "",PLUS,num,PLUS,""are here mamasita  "",PLUS,tweetlinks,DOT,get,LPAREN,num,RPAREN,RPAREN,SEMI,RBRACE,RBRACE","   public static void printLinks()
,   {
,       for(int num = 0; num <MASK> tweetlinks.size(); num++)
,       {
,           System.out.println(""------------------------------"");
,           System.out.println(""Links ""+num+ ""are here mamasita  "" +tweetlinks.get(num));
,           
,       }
,       
,   }
"
113c5414-6c55-466b-b879-a350ab6e0ca2,003896a4-18ea-44d3-9049-9c8a92c8c8ff,EQ,"PUBLIC,Monster,LBRACKET,RBRACKET,getMonsters,LPAREN,RPAREN,LBRACE,Monster,LBRACKET,RBRACKET,all,<MASK>,NEW,Monster,LBRACKET,monsters,DOT,size,LPAREN,RPAREN,RBRACKET,SEMI,monsters,DOT,toArray,LPAREN,all,RPAREN,SEMI,RETURN,all,SEMI,RBRACE","	public Monster[] getMonsters(){
,		Monster[] all <MASK> new Monster[monsters.size()];
,		monsters.toArray(all);
,		return all;
,	}
"
31865c5a-965e-4d07-af21-44a51a00ba58,bbead658-a5bd-4200-ae22-cf1844490048,GT,"STATIC,PUBLIC,float,computeECM,LPAREN,String,LBRACKET,RBRACKET,tmpDisclosedIdentifierColumns,COMMA,String,LBRACKET,RBRACKET,tmpDisclosedSensitiveColumns,RPAREN,LBRACE,MyLogger,logger,EQ,MyLogger,DOT,getInstance,LPAREN,RPAREN,SEMI,logger,DOT,writeLog,LPAREN,Level,DOT,ALL,COMMA,""Method computeECM"",RPAREN,SEMI,RiskEvaluator,re,EQ,NEW,RiskEvaluator,LPAREN,RPAREN,SEMI,float,currentIdentifierRisk,EQ,re,DOT,getIdentifierRisk,LPAREN,tmpDisclosedIdentifierColumns,RPAREN,SEMI,float,currentSensitiveRisk,EQ,re,DOT,getSensitiveRisk,LPAREN,tmpDisclosedSensitiveColumns,RPAREN,SEMI,float,currentTotalRisk,EQ,currentIdentifierRisk,PLUS,currentSensitiveRisk,SEMI,currentTotalRisk,EQ,currentTotalRisk,<MASK>,1,QUES,1,COLON,LPAREN,float,RPAREN,LPAREN,Math,DOT,round,LPAREN,currentTotalRisk,STAR,1000.0f,RPAREN,SLASH,1000.0f,RPAREN,SEMI,IF,LPAREN,true,RPAREN,LBRACE,logger,DOT,writeLog,LPAREN,Level,DOT,INFO,COMMA,""identifier risk: "",PLUS,currentIdentifierRisk,PLUS,"" sensitive risk: "",PLUS,currentSensitiveRisk,RPAREN,SEMI,RBRACE,RETURN,currentTotalRisk,SEMI,RBRACE","	static public float computeECM(String[] tmpDisclosedIdentifierColumns, String[] tmpDisclosedSensitiveColumns) {
,
,		MyLogger logger = MyLogger.getInstance();
,		
,		logger.writeLog(Level.ALL, ""Method computeECM"");
,
,		
,
,		// create new RiskEstimator and get both risks
,		RiskEvaluator re = new RiskEvaluator();
,
,		float currentIdentifierRisk = re
,				.getIdentifierRisk(tmpDisclosedIdentifierColumns);
,
,		float currentSensitiveRisk = re
,				.getSensitiveRisk(tmpDisclosedSensitiveColumns);
,
,		// compute total risk (& check that it is not <MASK> 1)
,		float currentTotalRisk = currentIdentifierRisk + currentSensitiveRisk;
,		currentTotalRisk = currentTotalRisk > 1 ? 1 : (float) (Math
,				.round(currentTotalRisk * 1000.0f) / 1000.0f);
,
,
,		if (true) {
,			logger.writeLog(Level.INFO, ""identifier risk: "" + currentIdentifierRisk
,					+ "" sensitive risk: "" + currentSensitiveRisk);
,		}
,
,		return currentTotalRisk;
,		
,	}
"
a4c68a60-241d-4ccc-bb34-58eb273247fe,47f4e51e-27ad-4cb4-ae90-da3c74a4c62a,PLUS,"MONKEYS_AT,Override,PUBLIC,int,hashCode,LPAREN,RPAREN,LBRACE,int,result,EQ,from,BANGEQ,null,QUES,from,DOT,hashCode,LPAREN,RPAREN,COLON,0,SEMI,result,EQ,31,STAR,result,<MASK>,LPAREN,to,BANGEQ,null,QUES,to,DOT,hashCode,LPAREN,RPAREN,COLON,0,RPAREN,SEMI,RETURN,result,SEMI,RBRACE","	@Override public int hashCode() {
,		int result = from != null ? from.hashCode() : 0;
,		result = 31 * result <MASK> (to != null ? to.hashCode() : 0);
,		return result;
,	}
"
a4c68a60-241d-4ccc-bb34-58eb273247fe,407ad46b-ea2f-4154-aadc-1d7e6852d99e,PLUS,"PUBLIC,STATIC,Instant,dateTime,LPAREN,String,s,RPAREN,LBRACE,List,LT,DateTimeFormatter,GT,formatters,EQ,asList,LPAREN,dateTimeFormatter,LPAREN,""kk:mm dd/MM/yyyy"",COMMA,UTC,RPAREN,COMMA,dateTimeFormatter,LPAREN,""kk:mm:ss dd/MM/yyyy"",COMMA,UTC,RPAREN,COMMA,dateTimeFormatter,LPAREN,""kk:mm:ss dd/MM/yyyy Z"",COMMA,UTC,RPAREN,COMMA,dateTimeFormatter,LPAREN,""kk:mm:ss.SSS dd/MM/yyyy"",COMMA,UTC,RPAREN,COMMA,dateTimeFormatter,LPAREN,""kk:mm:ss.SSSSSS dd/MM/yyyy"",COMMA,UTC,RPAREN,COMMA,dateTimeFormatter,LPAREN,""MMM dd kk:mm:ss yyyy Z"",COMMA,UTC,RPAREN,COMMA,dateTimeFormatter,LPAREN,""E MMM dd kk:mm:ss Z yyyy"",COMMA,UTC,RPAREN,RPAREN,SEMI,FOR,LPAREN,DateTimeFormatter,formatter,COLON,formatters,RPAREN,LBRACE,TRY,LBRACE,RETURN,formatter,DOT,parse,LPAREN,s,COMMA,DateTimeUtil,COLCOL,asInstant,RPAREN,SEMI,RBRACE,CATCH,LPAREN,Exception,ignored,RPAREN,LBRACE,RBRACE,RBRACE,THROW,NEW,RuntimeException,LPAREN,""Failed to parse string as dateTime: "",<MASK>,s,RPAREN,SEMI,RBRACE","	public static Instant dateTime(String s) {
,		List<DateTimeFormatter> formatters = asList(
,				dateTimeFormatter(""kk:mm dd/MM/yyyy"", UTC),
,				dateTimeFormatter(""kk:mm:ss dd/MM/yyyy"", UTC),
,				dateTimeFormatter(""kk:mm:ss dd/MM/yyyy Z"", UTC),
,				dateTimeFormatter(""kk:mm:ss.SSS dd/MM/yyyy"", UTC),
,				dateTimeFormatter(""kk:mm:ss.SSSSSS dd/MM/yyyy"", UTC),
,				dateTimeFormatter(""MMM dd kk:mm:ss yyyy Z"", UTC),
,				dateTimeFormatter(""E MMM dd kk:mm:ss Z yyyy"", UTC)
,		);
,		for (DateTimeFormatter formatter : formatters) {
,			try {
,				return formatter.parse(s, DateTimeUtil::asInstant);
,			} catch (Exception ignored) {
,			}
,		}
,		throw new RuntimeException(""Failed to parse string as dateTime: "" <MASK> s);
,	}
"
3913c395-db09-4ac4-8282-49a81b6a21f4,d52267c7-66df-4e5f-aa62-944a859c4221,BANGEQ,"PUBLIC,void,add,LPAREN,TileData,t,COMMA,int,id,RPAREN,LBRACE,assert,t,<MASK>,null,SEMI,tiles,DOT,put,LPAREN,id,COMMA,t,RPAREN,SEMI,RBRACE","	public void add(TileData t, int id) {
,		assert t <MASK> null;
,		tiles.put(id, t);
,	}
"
1b82c97a-fe19-4584-bdbc-4f13bb123c10,34e359a9-db4e-4394-8c77-6f789fdf4de8,STAR,"PUBLIC,STATIC,FINAL,double,LBRACKET,RBRACKET,times,LPAREN,FINAL,double,LBRACKET,RBRACKET,LBRACKET,RBRACKET,a,COMMA,FINAL,double,LBRACKET,RBRACKET,b,RPAREN,LBRACE,int,m,EQ,a,DOT,length,SEMI,FINAL,double,LBRACKET,RBRACKET,r,EQ,NEW,double,LBRACKET,m,RBRACKET,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,m,SEMI,i,PLUSPLUS,RPAREN,LBRACE,double,sum,EQ,0,SEMI,FOR,LPAREN,int,k,EQ,0,SEMI,k,LT,m,SEMI,k,PLUSPLUS,RPAREN,sum,PLUSEQ,a,LBRACKET,i,RBRACKET,LBRACKET,k,RBRACKET,<MASK>,b,LBRACKET,k,RBRACKET,SEMI,r,LBRACKET,i,RBRACKET,EQ,sum,SEMI,RBRACE,RETURN,r,SEMI,RBRACE","    public static final double[] times(final double[][] a, final double[] b) {
,        int m = a.length;
,        final double[] r = new double[m];
,        for (int i = 0; i < m; i++) {
,            double sum = 0;
,            for (int k = 0; k < m; k++)
,                sum += a[i][k] <MASK> b[k];
,            r[i] = sum;
,        }
,        return r;
,    }
"
38ed5e2e-bfac-4cc9-94e0-5ee38dabb0ca,d56b01d3-2ad0-44e5-9cf8-a52de25f9a8c,EQEQ,"STATIC,int,treeSize,LPAREN,Object,subtree,RPAREN,LBRACE,IF,LPAREN,subtree,<MASK>,null,RPAREN,RETURN,0,SEMI,ELSE,IF,LPAREN,BANG,LPAREN,subtree,INSTANCEOF,Node,RPAREN,RPAREN,RETURN,LPAREN,LPAREN,Object,LBRACKET,RBRACKET,RPAREN,subtree,RPAREN,DOT,length,GTGT,1,SEMI,ELSE,RETURN,LPAREN,LPAREN,Node,RPAREN,subtree,RPAREN,DOT,size,SEMI,RBRACE","    /*pkg*/ static int treeSize(Object subtree) {
,	if (subtree <MASK> null) return 0;
,	else if (!(subtree instanceof Node)) return ((Object[])subtree).length >> 1;
,	else return ((Node)subtree).size;
,    }
"
25febb02-bf0a-414d-9cae-3efcbdacd8a3,c5802545-1d8a-41d1-977b-827bafd5a176,LTEQ,"PUBLIC,void,updateWidth,LPAREN,RPAREN,LBRACE,FontMetrics,metrics,EQ,getGraphics,LPAREN,RPAREN,DOT,getFontMetrics,LPAREN,RPAREN,SEMI,int,textFieldDif,EQ,LPAREN,textField,DOT,getWidth,LPAREN,RPAREN,SUB,metrics,DOT,stringWidth,LPAREN,textField,DOT,getText,LPAREN,RPAREN,RPAREN,RPAREN,SUB,50,SEMI,IF,LPAREN,textFieldDif,<MASK>,0,RPAREN,LBRACE,extendside,LPAREN,frame,DOT,getWidth,LPAREN,RPAREN,SUB,textFieldDif,RPAREN,SEMI,RBRACE,IF,LPAREN,frame,DOT,getWidth,LPAREN,RPAREN,GT,350,AMPAMP,textFieldDif,GT,0,RPAREN,LBRACE,extendside,LPAREN,500,RPAREN,SEMI,RBRACE,RBRACE","	public void updateWidth(){
,		//get the actual width of text and set the width of everything else to match
,		FontMetrics metrics = getGraphics().getFontMetrics();
,
,		int textFieldDif = (textField.getWidth() - metrics.stringWidth(textField.getText())) - 50;
,		
,		if(textFieldDif <MASK> 0){
,			extendside(frame.getWidth() - textFieldDif);
,		}
,		if(frame.getWidth() > 350 && textFieldDif > 0){
,			extendside(500);
,		}
,		
,	}
"
4a247308-1941-42bf-b8c1-203a89952252,7556b09c-bf54-4ccc-9c4b-6211d8159e2e,LT,"MONKEYS_AT,Override,PUBLIC,void,saca,LPAREN,Conta,conta,COMMA,double,valor,RPAREN,LBRACE,conta,DOT,setValorAtual,LPAREN,conta,DOT,getValorAtual,LPAREN,RPAREN,SUB,valor,RPAREN,SEMI,IF,LPAREN,conta,DOT,getValorAtual,LPAREN,RPAREN,<MASK>,0,RPAREN,conta,DOT,setEstado,LPAREN,NEW,Negativo,LPAREN,RPAREN,RPAREN,SEMI,RBRACE","	@Override
,	public void saca(Conta conta, double valor) {
,		conta.setValorAtual(conta.getValorAtual() - valor);
,		
,		if(conta.getValorAtual() <MASK> 0 ) conta.setEstado(new Negativo());
,	}
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,407959f5-98ea-49e6-8c06-f901a70e6e02,SUB,"PUBLIC,int,getScoreInGame,LPAREN,BufferedImage,screenshot,RPAREN,LBRACE,BufferedImage,scoreImage,EQ,screenshot,DOT,getSubimage,LPAREN,632,COMMA,21,COMMA,200,COMMA,32,RPAREN,SEMI,int,mask,LBRACKET,RBRACKET,LBRACKET,RBRACKET,EQ,NEW,int,LBRACKET,scoreImage,DOT,getHeight,LPAREN,RPAREN,RBRACKET,LBRACKET,scoreImage,DOT,getWidth,LPAREN,RPAREN,RBRACKET,SEMI,FOR,LPAREN,int,y,EQ,0,SEMI,y,LT,scoreImage,DOT,getHeight,LPAREN,RPAREN,SEMI,y,PLUSPLUS,RPAREN,LBRACE,FOR,LPAREN,int,x,EQ,0,SEMI,x,LT,scoreImage,DOT,getWidth,LPAREN,RPAREN,SEMI,x,PLUSPLUS,RPAREN,LBRACE,FINAL,int,colour,EQ,scoreImage,DOT,getRGB,LPAREN,x,COMMA,y,RPAREN,SEMI,mask,LBRACKET,y,RBRACKET,LBRACKET,x,RBRACKET,EQ,LPAREN,LPAREN,colour,AMP,00ffffff,RPAREN,EQEQ,00ffffff,RPAREN,QUES,1,COLON,<MASK>,1,SEMI,RBRACE,RBRACE,scoreImage,EQ,VisionUtils,DOT,int2image,LPAREN,mask,RPAREN,SEMI,mask,EQ,VisionUtils,DOT,findConnectedComponents,LPAREN,mask,RPAREN,SEMI,Rectangle,LBRACKET,RBRACKET,letters,EQ,VisionUtils,DOT,findBoundingBoxes,LPAREN,mask,RPAREN,SEMI,Arrays,DOT,sort,LPAREN,letters,COMMA,NEW,RectLeftOf,LPAREN,RPAREN,RPAREN,SEMI,int,score,EQ,0,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,letters,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,letters,LBRACKET,i,RBRACKET,DOT,width,LT,2,RPAREN,CONTINUE,SEMI,BufferedImage,letterImage,EQ,scoreImage,DOT,getSubimage,LPAREN,letters,LBRACKET,i,RBRACKET,DOT,x,COMMA,letters,LBRACKET,i,RBRACKET,DOT,y,COMMA,letters,LBRACKET,i,RBRACKET,DOT,width,COMMA,letters,LBRACKET,i,RBRACKET,DOT,height,RPAREN,SEMI,FINAL,String,letterHash,EQ,VisionUtils,DOT,imageDigest,LPAREN,letterImage,RPAREN,SEMI,int,value,EQ,0,SEMI,IF,LPAREN,letterHash,DOT,equals,LPAREN,""62d05c5ce368be507a096aa6b5c68aeb"",RPAREN,RPAREN,LBRACE,value,EQ,1,SEMI,RBRACE,ELSE,IF,LPAREN,letterHash,DOT,equals,LPAREN,""518b4a3878a75aad32e23da4781e4c14"",RPAREN,RPAREN,LBRACE,value,EQ,2,SEMI,RBRACE,ELSE,IF,LPAREN,letterHash,DOT,equals,LPAREN,""be2b93e09c0f94a7c93b1b9cc675b26d"",RPAREN,RPAREN,LBRACE,value,EQ,3,SEMI,RBRACE,ELSE,IF,LPAREN,letterHash,DOT,equals,LPAREN,""3171f145ff67389b22d50ade7a13b5f7"",RPAREN,RPAREN,LBRACE,value,EQ,4,SEMI,RBRACE,ELSE,IF,LPAREN,letterHash,DOT,equals,LPAREN,""96c7dc988a5ad5aa50c3958a0f7869f4"",RPAREN,RPAREN,LBRACE,value,EQ,5,SEMI,RBRACE,ELSE,IF,LPAREN,letterHash,DOT,equals,LPAREN,""049b9aa34adf05ff2cca8cd4057a4d6b"",RPAREN,RPAREN,LBRACE,value,EQ,6,SEMI,RBRACE,ELSE,IF,LPAREN,letterHash,DOT,equals,LPAREN,""897aca1b39d4e2f6bc58b658e8819191"",RPAREN,RPAREN,LBRACE,value,EQ,7,SEMI,RBRACE,ELSE,IF,LPAREN,letterHash,DOT,equals,LPAREN,""e66e8aca895a06c1c9200b1b6b781567"",RPAREN,RPAREN,LBRACE,value,EQ,8,SEMI,RBRACE,ELSE,IF,LPAREN,letterHash,DOT,equals,LPAREN,""41c3010757c2e707146aa5d136e72c7a"",RPAREN,RPAREN,LBRACE,value,EQ,9,SEMI,RBRACE,score,EQ,10,STAR,score,PLUS,value,SEMI,RBRACE,RETURN,score,SEMI,RBRACE","	public int getScoreInGame(BufferedImage screenshot) {
,		// crop score image
,		BufferedImage scoreImage = screenshot.getSubimage(632, 21, 200, 32);
,
,		// extract characters
,		int mask[][] = new int[scoreImage.getHeight()][scoreImage.getWidth()];
,		for (int y = 0; y < scoreImage.getHeight(); y++) {
,			for (int x = 0; x < scoreImage.getWidth(); x++) {
,				final int colour = scoreImage.getRGB(x, y);
,				mask[y][x] = ((colour & 0x00ffffff) == 0x00ffffff) ? 1 : <MASK>1;
,			}
,		}
,		scoreImage = VisionUtils.int2image(mask);
,		mask = VisionUtils.findConnectedComponents(mask);
,		Rectangle[] letters = VisionUtils.findBoundingBoxes(mask);
,		Arrays.sort(letters, new RectLeftOf());
,
,		// decode letters
,		int score = 0;
,		for (int i = 0; i < letters.length; i++) {
,			if (letters[i].width < 2)
,				continue;
,
,			BufferedImage letterImage = scoreImage.getSubimage(letters[i].x,
,					letters[i].y, letters[i].width, letters[i].height);
,			final String letterHash = VisionUtils.imageDigest(letterImage);
,
,			int value = 0;
,			if (letterHash.equals(""62d05c5ce368be507a096aa6b5c68aeb"")) {
,				value = 1;
,			} else if (letterHash.equals(""518b4a3878a75aad32e23da4781e4c14"")) {
,				value = 2;
,			} else if (letterHash.equals(""be2b93e09c0f94a7c93b1b9cc675b26d"")) {
,				value = 3;
,			} else if (letterHash.equals(""3171f145ff67389b22d50ade7a13b5f7"")) {
,				value = 4;
,			} else if (letterHash.equals(""96c7dc988a5ad5aa50c3958a0f7869f4"")) {
,				value = 5;
,			} else if (letterHash.equals(""049b9aa34adf05ff2cca8cd4057a4d6b"")) {
,				value = 6;
,			} else if (letterHash.equals(""897aca1b39d4e2f6bc58b658e8819191"")) {
,				value = 7;
,			} else if (letterHash.equals(""e66e8aca895a06c1c9200b1b6b781567"")) {
,				value = 8;
,			} else if (letterHash.equals(""41c3010757c2e707146aa5d136e72c7a"")) {
,				value = 9;
,			}
,
,			score = 10 * score + value;
,			// System.out.println(i + "" : "" + letters[i] + "" : "" + letterHash +
,			// "" : "" + value);
,		}            
,        
,		/*
,		 * VisionUtils.drawBoundingBoxes(scoreImage, letters, Color.BLUE); if
,		 * (_debug == null) { _debug = new ShowDebuggingImage(""score"",
,		 * scoreImage); } else { _debug.refresh(scoreImage); }
,		 */
,
,		return score;
,	}
"
9b07119d-5d87-44cb-94ac-77a9d4fc6019,0d93cf1d-bf74-4a34-8b72-b16866253284,GT,"PUBLIC,STATIC,String,toXml,LPAREN,BeanRules,bean,RPAREN,LBRACE,StringBuilder,builder,EQ,NEW,StringBuilder,LPAREN,""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>\n<root>\n"",RPAREN,SEMI,FOR,LPAREN,BeanFieldSet,bfs,COLON,bean,DOT,fields,RPAREN,LBRACE,IF,LPAREN,bfs,DOT,fieldRenderClass,EQEQ,null,BARBAR,bfs,DOT,fieldRenderClass,DOT,isEmpty,LPAREN,RPAREN,RPAREN,LBRACE,String,param,EQ,""<param id=\"""",PLUS,bfs,DOT,getFieldName,LPAREN,RPAREN,PLUS,""\"" iniValue=\"""",PLUS,bfs,DOT,getFieldIni,LPAREN,RPAREN,DOT,trim,LPAREN,RPAREN,PLUS,""\"" addToMap=\"""",PLUS,LPAREN,bfs,DOT,isAddToMap,LPAREN,RPAREN,QUES,""yes"",COLON,""no"",RPAREN,PLUS,""\""/>\n"",SEMI,builder,DOT,append,LPAREN,param,RPAREN,SEMI,RBRACE,ELSE,LBRACE,StringBuilder,optionals,EQ,NEW,StringBuilder,LPAREN,RPAREN,SEMI,IF,LPAREN,BANG,bfs,DOT,isVisible,LPAREN,RPAREN,RPAREN,LBRACE,optionals,DOT,append,LPAREN,""visible=\""no\"" "",RPAREN,SEMI,RBRACE,IF,LPAREN,BANG,bfs,DOT,isAddToMap,LPAREN,RPAREN,RPAREN,LBRACE,optionals,DOT,append,LPAREN,""addToMap=\""no\"" "",RPAREN,SEMI,RBRACE,IF,LPAREN,bfs,DOT,getFieldTooltip,LPAREN,RPAREN,BANGEQ,null,RPAREN,LBRACE,optionals,DOT,append,LPAREN,""tooltip=\"""",RPAREN,DOT,append,LPAREN,bfs,DOT,getFieldTooltip,LPAREN,RPAREN,RPAREN,DOT,append,LPAREN,""\"" "",RPAREN,SEMI,RBRACE,IF,LPAREN,bfs,DOT,editable,BANGEQ,null,AMPAMP,BANG,bfs,DOT,editable,DOT,isEmpty,LPAREN,RPAREN,RPAREN,LBRACE,optionals,DOT,append,LPAREN,""editable=\"""",RPAREN,DOT,append,LPAREN,bfs,DOT,editable,RPAREN,DOT,append,LPAREN,""\"" "",RPAREN,SEMI,RBRACE,optionals,DOT,append,LPAREN,""required=\"""",RPAREN,DOT,append,LPAREN,LPAREN,bfs,DOT,isRequired,LPAREN,RPAREN,QUES,""yes"",COLON,""no"",RPAREN,RPAREN,DOT,append,LPAREN,""\"" "",RPAREN,SEMI,String,className,EQ,bfs,DOT,getFieldRenderClass,LPAREN,RPAREN,SEMI,IF,LPAREN,bfs,DOT,getFieldRenderClassParamsOriginal,LPAREN,RPAREN,BANGEQ,null,AMPAMP,BANG,bfs,DOT,fieldRenderClassParamsOriginal,DOT,isEmpty,LPAREN,RPAREN,RPAREN,LBRACE,className,PLUSEQ,""{"",SEMI,FOR,LPAREN,String,key,COLON,bfs,DOT,getFieldRenderClassParamsOriginal,LPAREN,RPAREN,DOT,keySet,LPAREN,RPAREN,RPAREN,LBRACE,className,PLUSEQ,key,PLUS,""="",PLUS,bfs,DOT,getFieldRenderClassParamsOriginal,LPAREN,RPAREN,DOT,get,LPAREN,key,RPAREN,PLUS,""&amp;"",SEMI,RBRACE,className,EQ,StringUtils,DOT,BeforeLast,LPAREN,className,COMMA,""&amp;"",RPAREN,PLUS,""}"",SEMI,RBRACE,String,tagname,EQ,BeanFieldSet,DOT,TAG_FIELD,SEMI,String,selection,EQ,"""",SEMI,IF,LPAREN,bfs,DOT,selectableField,BANGEQ,null,AMPAMP,BANG,bfs,DOT,selectableField,DOT,isEmpty,LPAREN,RPAREN,RPAREN,LBRACE,tagname,EQ,""selectableField"",SEMI,selection,EQ,"" selection=\"""",PLUS,bfs,DOT,selectableField,PLUS,""\"""",SEMI,RBRACE,builder,DOT,append,LPAREN,""<"",RPAREN,DOT,append,LPAREN,tagname,RPAREN,DOT,append,LPAREN,selection,RPAREN,DOT,append,LPAREN,"" id=\"""",RPAREN,DOT,append,LPAREN,bfs,DOT,getFieldName,LPAREN,RPAREN,RPAREN,DOT,append,LPAREN,""\"" class=\"""",RPAREN,DOT,append,LPAREN,className,RPAREN,DOT,append,LPAREN,""\"" description=\"""",RPAREN,DOT,append,LPAREN,bfs,DOT,getFieldDescription,LPAREN,RPAREN,RPAREN,DOT,append,LPAREN,""\"" iniValue=\"""",RPAREN,DOT,append,LPAREN,bfs,DOT,getFieldIni,LPAREN,RPAREN,DOT,trim,LPAREN,RPAREN,RPAREN,DOT,append,LPAREN,""\"" "",RPAREN,DOT,append,LPAREN,optionals,RPAREN,SEMI,IF,LPAREN,bfs,DOT,action,EQEQ,null,RPAREN,LBRACE,builder,DOT,append,LPAREN,""/>\n"",RPAREN,SEMI,RBRACE,ELSE,LBRACE,builder,DOT,append,LPAREN,"">\n"",RPAREN,SEMI,StringBuilder,actions,EQ,NEW,StringBuilder,LPAREN,RPAREN,SEMI,IF,LPAREN,bfs,DOT,action,DOT,isRegisterIesDigital,LPAREN,RPAREN,RPAREN,LBRACE,actions,DOT,append,LPAREN,""\t<register target=\""iesdigital\"" type=\"""",RPAREN,DOT,append,LPAREN,bfs,DOT,action,DOT,tipus,RPAREN,DOT,append,LPAREN,""\"" dates=\"""",RPAREN,DOT,append,LPAREN,bfs,DOT,action,DOT,dates,RPAREN,DOT,append,LPAREN,""\""/>\n"",RPAREN,SEMI,RBRACE,IF,LPAREN,bfs,DOT,action,DOT,isRegisterSGD,LPAREN,RPAREN,RPAREN,LBRACE,actions,DOT,append,LPAREN,""\t<register target=\""sgd\"" simbol=\"""",RPAREN,DOT,append,LPAREN,bfs,DOT,action,DOT,simboloIncidencia,RPAREN,DOT,append,LPAREN,""\"" dates=\"""",RPAREN,DOT,append,LPAREN,bfs,DOT,action,DOT,dates,RPAREN,DOT,append,LPAREN,""\"" "",RPAREN,DOT,append,LPAREN,""description=\"""",RPAREN,DOT,append,LPAREN,bfs,DOT,action,DOT,observaciones,DOT,replaceAll,LPAREN,""<"",COMMA,""&lt;"",RPAREN,DOT,replaceAll,LPAREN,"">"",COMMA,""&gt;"",RPAREN,RPAREN,DOT,append,LPAREN,""\"" incpersession=\"""",RPAREN,DOT,append,LPAREN,bfs,DOT,action,DOT,incidenciasSesion,RPAREN,DOT,append,LPAREN,""\"" allDay=\"""",RPAREN,DOT,append,LPAREN,bfs,DOT,action,DOT,todoElDia,QUES,""yes"",COLON,""no"",RPAREN,DOT,append,LPAREN,""\"" />\n"",RPAREN,SEMI,RBRACE,builder,DOT,append,LPAREN,actions,RPAREN,DOT,append,LPAREN,""</"",RPAREN,DOT,append,LPAREN,tagname,RPAREN,DOT,append,LPAREN,"">\n"",RPAREN,SEMI,RBRACE,RBRACE,RBRACE,int,idx,EQ,1,SEMI,IF,LPAREN,bean,DOT,getSelectableGroups,LPAREN,RPAREN,BANGEQ,null,RPAREN,LBRACE,FOR,LPAREN,String,s,COLON,bean,DOT,getSelectableGroups,LPAREN,RPAREN,RPAREN,LBRACE,builder,DOT,append,LPAREN,""<fieldGroup id=\"""",RPAREN,DOT,append,LPAREN,idx,RPAREN,DOT,append,LPAREN,""\"" elements=\"""",RPAREN,DOT,append,LPAREN,s,RPAREN,DOT,append,LPAREN,""\""/>\n"",RPAREN,SEMI,idx,PLUSEQ,1,SEMI,RBRACE,RBRACE,IF,LPAREN,bean,DOT,listReports,BANGEQ,null,RPAREN,LBRACE,FOR,LPAREN,BeanFieldReport,bfr,COLON,bean,DOT,listReports,RPAREN,LBRACE,String,options,EQ,"""",SEMI,IF,LPAREN,BANG,bfr,DOT,important,RPAREN,SEMI,LBRACE,options,PLUSEQ,""important=\""no\"" "",SEMI,RBRACE,IF,LPAREN,bfr,DOT,includeSubReport,BANGEQ,null,AMPAMP,BANG,bfr,DOT,includeSubReport,DOT,equals,LPAREN,""N"",RPAREN,RPAREN,LBRACE,options,PLUSEQ,""includeSubreport=\"""",PLUS,bfr,DOT,includeSubReport,PLUS,""\"" "",SEMI,RBRACE,IF,LPAREN,BANG,bfr,DOT,lang,DOT,equals,LPAREN,""CA"",RPAREN,RPAREN,LBRACE,options,PLUSEQ,""lang=\"""",PLUS,bfr,DOT,lang,PLUS,""\"" "",SEMI,RBRACE,IF,LPAREN,bfr,DOT,limitInc,<MASK>,0,RPAREN,LBRACE,options,PLUSEQ,""limitInc=\"""",PLUS,bfr,DOT,limitInc,PLUS,""\"" "",SEMI,RBRACE,IF,LPAREN,bfr,DOT,popupInstructions,BANGEQ,null,AMPAMP,BANG,bfr,DOT,popupInstructions,DOT,isEmpty,LPAREN,RPAREN,RPAREN,LBRACE,options,PLUSEQ,""popupInstructions=\"""",PLUS,bfr,DOT,popupInstructions,PLUS,""\"" "",SEMI,RBRACE,IF,LPAREN,bfr,DOT,reportDescription,BANGEQ,null,AMPAMP,BANG,bfr,DOT,reportDescription,DOT,isEmpty,LPAREN,RPAREN,RPAREN,LBRACE,options,PLUSEQ,""reportDescription=\"""",PLUS,bfr,DOT,reportDescription,PLUS,""\"" "",SEMI,RBRACE,IF,LPAREN,BANG,bfr,DOT,visibilitat,DOT,equals,LPAREN,""*"",RPAREN,RPAREN,LBRACE,options,PLUSEQ,""visibility=\"""",PLUS,bfr,DOT,visibilitat,PLUS,""\"" "",SEMI,RBRACE,builder,DOT,append,LPAREN,""<report idReport=\"""",RPAREN,DOT,append,LPAREN,bfr,DOT,idReport,RPAREN,DOT,append,LPAREN,""\"" reportPath=\"""",RPAREN,DOT,append,LPAREN,bfr,DOT,reportPath,RPAREN,DOT,append,LPAREN,""\"" "",RPAREN,DOT,append,LPAREN,options,RPAREN,DOT,append,LPAREN,"" />\n"",RPAREN,SEMI,RBRACE,RBRACE,builder,DOT,append,LPAREN,""</root>"",RPAREN,SEMI,RETURN,builder,DOT,toString,LPAREN,RPAREN,SEMI,RBRACE","    public static String toXml(BeanRules bean)
,    {
,        StringBuilder builder = new StringBuilder(""<?xml version=\""1.0\"" encoding=\""UTF-8\""?<MASK>\n<root>\n"");
,        for(BeanFieldSet bfs: bean.fields)
,        {
,            
,             if(bfs.fieldRenderClass==null || bfs.fieldRenderClass.isEmpty())
,                {
,                    String param = ""<param id=\""""+bfs.getFieldName()+""\"" iniValue=\""""+
,                            bfs.getFieldIni().trim()+""\"" addToMap=\""""+(bfs.isAddToMap()?""yes"":""no"")+""\""/>\n"";
,                    builder.append(param);
,                }
,                else
,                {
,                    StringBuilder optionals = new StringBuilder();
,                    if(!bfs.isVisible()) {
,                        optionals.append(""visible=\""no\"" "");
,                    }
,                    if(!bfs.isAddToMap()) {
,                        optionals.append(""addToMap=\""no\"" "");
,                    }
,                    if(bfs.getFieldTooltip()!=null) {
,                        optionals.append(""tooltip=\"""").append(bfs.getFieldTooltip()).append(""\"" "");
,                    }
,                    if(bfs.editable!=null && !bfs.editable.isEmpty()) {
,                        optionals.append(""editable=\"""").append(bfs.editable).append(""\"" "");
,                    }
,                    optionals.append(""required=\"""").append((bfs.isRequired()?""yes"":""no"")).append(""\"" "");
,                    
,                    String className = bfs.getFieldRenderClass();
,                    
,                    if(bfs.getFieldRenderClassParamsOriginal()!=null && !bfs.fieldRenderClassParamsOriginal.isEmpty())
,                    {
,                        className += ""{"";
,                        for(String key: bfs.getFieldRenderClassParamsOriginal().keySet())
,                        {
,                            className += key +""=""+bfs.getFieldRenderClassParamsOriginal().get(key)+""&amp;"";
,                        }
,                        className = StringUtils.BeforeLast(className, ""&amp;"")+""}"";
,                    }
,                    
,                    String tagname = BeanFieldSet.TAG_FIELD;
,                    String selection = """";
,                    if(bfs.selectableField!=null && !bfs.selectableField.isEmpty())
,                    {
,                        tagname = ""selectableField"";
,                        selection = "" selection=\""""+bfs.selectableField+""\"""";
,                    }
,                       
,                        
,                    builder.append(""<"").append(tagname).append(selection).append("" id=\"""").append(bfs.getFieldName()).append(""\"" class=\"""")
,                           .append(className).append(""\"" description=\"""").append(bfs.getFieldDescription())
,                           .append(""\"" iniValue=\"""").append(bfs.getFieldIni().trim()).append(""\"" "").append(optionals);
,                    //comprova si aquest camp conté accions
,                    if(bfs.action==null)
,                    {
,                        builder.append(""/>\n"");
,                       
,                    }
,                    else
,                    {
,                        builder.append("">\n"");
,                        StringBuilder actions = new StringBuilder();
,                        if(bfs.action.isRegisterIesDigital())
,                        {
,                            actions.append(""\t<register target=\""iesdigital\"" type=\"""").
,                                    append(bfs.action.tipus).append(""\"" dates=\"""").append(bfs.action.dates).append(""\""/>\n"");
,                        }
,                        if(bfs.action.isRegisterSGD())
,                        {
,                           actions.append(""\t<register target=\""sgd\"" simbol=\"""").
,                                    append(bfs.action.simboloIncidencia).append(""\"" dates=\"""").append(bfs.action.dates).append(""\"" "").
,                                    append(""description=\"""").append(bfs.action.observaciones.replaceAll(""<"", ""&lt;"").replaceAll("">"", ""&gt;"")).append(""\"" incpersession=\"""").
,                                    append(bfs.action.incidenciasSesion).append(""\"" allDay=\"""").append(bfs.action.todoElDia?""yes"":""no"").append(""\"" />\n"");
,                      
,                        }
,                        builder.append(actions).append(""</"").append(tagname).append("">\n"");
,                    }
,                }
,            
,                    
,        }
,        
,        //Afegeix (si n'hi ha) groups de camps
,        int idx = 1;
,        if(bean.getSelectableGroups()!=null)
,        {
,        for(String s: bean.getSelectableGroups())
,        {
,            builder.append(""<fieldGroup id=\"""").append(idx).append(""\"" elements=\"""").append(s).append(""\""/>\n"");
,            idx += 1;
,        }
,        }
,        //Afegeix els reports (si n'hi ha)
,        if(bean.listReports!=null)
,        {
,        for(BeanFieldReport bfr: bean.listReports)
,        {
,                    
,            String options = """";
,            if(!bfr.important);
,            {
,                options += ""important=\""no\"" "";
,            }
,            if(bfr.includeSubReport!=null && !bfr.includeSubReport.equals(""N""))
,            {
,                options += ""includeSubreport=\""""+bfr.includeSubReport+""\"" "";
,            }
,            if(!bfr.lang.equals(""CA""))
,            {
,                options += ""lang=\""""+bfr.lang+""\"" "" ;
,            }
,            if(bfr.limitInc>0)
,            {
,                options += ""limitInc=\""""+bfr.limitInc+""\"" "" ;
,            }
,            if(bfr.popupInstructions!=null && !bfr.popupInstructions.isEmpty())
,            {
,                options += ""popupInstructions=\""""+bfr.popupInstructions+""\"" "";
,            }
,            if(bfr.reportDescription!=null && !bfr.reportDescription.isEmpty())
,            {
,                options += ""reportDescription=\""""+bfr.reportDescription+""\"" "";
,            }
,            if(!bfr.visibilitat.equals(""*""))
,            {
,                options += ""visibility=\""""+bfr.visibilitat+""\"" "";
,            }
,            builder.append(""<report idReport=\"""").append(bfr.idReport).append(""\"" reportPath=\"""")
,                   .append(bfr.reportPath).append(""\"" "").append(options).append("" />\n"");
,        }
,        }
,        builder.append(""</root>"");
,        return builder.toString();
,    }
"
789d219f-7383-4fa6-b72d-81f8985229f6,18eb96a5-01ae-4807-b9c1-ec08ccd36c9c,EQEQ,"PUBLIC,void,setValue,LPAREN,Player,player,RPAREN,LBRACE,setText,LPAREN,LPAREN,player,<MASK>,null,RPAREN,QUES,"""",COLON,player,DOT,getMarker,LPAREN,RPAREN,RPAREN,SEMI,RBRACE","        public void setValue(Player player) {
,            setText((player <MASK> null) ? """" : player.getMarker());
,        }
"
13ade84f-7d2c-4f3f-a13f-aa7abf8a58a5,f7ec1700-575b-4b03-b3a3-48439c7863e3,BANGEQ,"PUBLIC,boolean,isPalindrome,LPAREN,String,s,RPAREN,LBRACE,IF,LPAREN,s,EQEQ,null,RPAREN,RETURN,false,SEMI,IF,LPAREN,s,DOT,isEmpty,LPAREN,RPAREN,RPAREN,RETURN,true,SEMI,int,start,EQ,0,SEMI,int,end,EQ,s,DOT,length,LPAREN,RPAREN,SUB,1,SEMI,WHILE,LPAREN,true,RPAREN,LBRACE,WHILE,LPAREN,start,LT,s,DOT,length,LPAREN,RPAREN,AMPAMP,BANG,Character,DOT,isLetterOrDigit,LPAREN,s,DOT,charAt,LPAREN,start,RPAREN,RPAREN,RPAREN,start,PLUSPLUS,SEMI,WHILE,LPAREN,end,GTEQ,0,AMPAMP,BANG,Character,DOT,isLetterOrDigit,LPAREN,s,DOT,charAt,LPAREN,end,RPAREN,RPAREN,RPAREN,end,SUBSUB,SEMI,IF,LPAREN,start,GTEQ,end,RPAREN,RETURN,true,SEMI,IF,LPAREN,Character,DOT,toLowerCase,LPAREN,s,DOT,charAt,LPAREN,start,RPAREN,RPAREN,<MASK>,Character,DOT,toLowerCase,LPAREN,s,DOT,charAt,LPAREN,end,RPAREN,RPAREN,RPAREN,RETURN,false,SEMI,start,PLUSPLUS,SEMI,end,SUBSUB,SEMI,RBRACE,RBRACE","	public boolean isPalindrome(String s) {
,		if (s == null)
,			return false;
,
,		if (s.isEmpty())
,			return true;
,
,		int start = 0;
,		int end = s.length() - 1;
,
,		while (true) {
,
,			while (start < s.length() && !Character.isLetterOrDigit(s.charAt(start)))
,				// Out of bound!
,				start++;
,
,			while (end >= 0 && !Character.isLetterOrDigit(s.charAt(end)))
,				// Out of bound!
,				end--;
,
,			if (start >= end) // greater than!
,				return true;
,
,			if (Character.toLowerCase(s.charAt(start)) <MASK> Character.toLowerCase(s.charAt(end)))
,				return false;
,
,			start++; // make the loop going!
,			end--;
,
,		}
,	}
"
e67bf04b-409e-4859-9f63-b5fd4dc2596d,aa475423-a1d3-4fde-b92f-93bbada11864,PERCENT,"PUBLIC,void,calculeS,LPAREN,RPAREN,LBRACE,S,EQ,NEW,int,LBRACKET,nombreDeClasses,RBRACKET,LBRACKET,k,RBRACKET,SEMI,FOR,LPAREN,int,j,EQ,0,SEMI,j,LT,k,SEMI,j,PLUSPLUS,RPAREN,LBRACE,int,j2,EQ,j,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,nombreDeClasses,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,j2,<MASK>,2,BANGEQ,0,RPAREN,S,LBRACKET,i,RBRACKET,LBRACKET,j,RBRACKET,EQ,1,SEMI,j2,EQ,j2,SLASH,2,SEMI,RBRACE,RBRACE,RBRACE","	public void calculeS(){
,		S = new int[nombreDeClasses][k];
,
,		for (int j=0 ;j<k ;j++){
,			int j2 = j;
,			for (int i=0; i<nombreDeClasses;i++){
,				if (j2<MASK>2  != 0) S[i][j] = 1; //S[i][j] est par d�faut � 0
,				j2 = j2/2;
,			}
,		}
,	}
"
2dd830d4-e85f-41ec-b5a4-78a5402d9efb,0fc7c3fb-eefe-4ee8-a31e-d2da220b177c,SUB,"PRIVATE,void,loadSerial,LPAREN,String,serial,RPAREN,LBRACE,serial,EQ,serial,DOT,trim,LPAREN,RPAREN,SEMI,serial,EQ,serial,DOT,charAt,LPAREN,0,RPAREN,EQEQ,{,QUES,serial,DOT,substring,LPAREN,1,COMMA,serial,DOT,length,LPAREN,RPAREN,<MASK>,1,RPAREN,COLON,serial,SEMI,String,LBRACKET,RBRACKET,pairs,EQ,split,LPAREN,serial,RPAREN,SEMI,FOR,LPAREN,String,pair,COLON,pairs,RPAREN,LBRACE,String,LBRACKET,RBRACKET,keyValue,EQ,splitPair,LPAREN,pair,RPAREN,SEMI,map,DOT,put,LPAREN,LPAREN,String,RPAREN,loadValue,LPAREN,keyValue,LBRACKET,0,RBRACKET,RPAREN,COMMA,loadValue,LPAREN,keyValue,LBRACKET,1,RBRACKET,RPAREN,RPAREN,SEMI,RBRACE,RBRACE","	private void loadSerial(String serial) {
,		serial = serial.trim();
,		serial = serial.charAt(0) == '{' ? serial.substring(1, serial.length() <MASK> 1) : serial;
,
,		String[] pairs = split(serial);
,		for(String pair : pairs) {
,			String[] keyValue = splitPair(pair);
,			map.put((String)loadValue(keyValue[0]), loadValue(keyValue[1]));
,		}		
,	}
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,a078e3f2-dd01-473e-9365-e85dc407ac6b,BANGEQ,"PUBLIC,STATIC,HashMap,LT,ABObject,LBRACKET,RBRACKET,COMMA,ERA,LBRACKET,RBRACKET,GT,TranslateToRA,LPAREN,List,LT,ABObject,GT,listObject,RPAREN,LBRACE,HashMap,LT,ABObject,LBRACKET,RBRACKET,COMMA,ERA,LBRACKET,RBRACKET,GT,RADictionary,EQ,NEW,HashMap,LT,ABObject,LBRACKET,RBRACKET,COMMA,ERA,LBRACKET,RBRACKET,GT,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,listObject,DOT,size,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,ABObject,object1,EQ,listObject,DOT,get,LPAREN,i,RPAREN,SEMI,FOR,LPAREN,int,j,EQ,0,SEMI,j,LT,listObject,DOT,size,LPAREN,RPAREN,SEMI,j,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,j,<MASK>,i,RPAREN,LBRACE,ABObject,object2,EQ,listObject,DOT,get,LPAREN,j,RPAREN,SEMI,ERA,LBRACKET,RBRACKET,rels,EQ,GetERA,LPAREN,object1,COMMA,object2,RPAREN,SEMI,RADictionary,DOT,put,LPAREN,NEW,ABObject,LBRACKET,RBRACKET,LBRACE,object1,COMMA,object2,RBRACE,COMMA,rels,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,RETURN,RADictionary,SEMI,RBRACE","    public static HashMap<ABObject[], ERA[]> TranslateToRA(List<ABObject> listObject)
,    {
,    	HashMap<ABObject[], ERA[]> RADictionary = new HashMap<ABObject[], ERA[]>();
,        //InitalizeHashMap(dictionary, listObject);
,        for(int i = 0; i < listObject.size(); i++)
,        {
,            ABObject object1 = listObject.get(i);
,            for(int j = 0; j < listObject.size(); j++)
,            {
,                if(j <MASK> i)
,                {
,                    ABObject object2 = listObject.get(j);
,                    
,                    ERA[] rels = GetERA(object1, object2);
,                    
,                    // Set relation for RA(object1, object 2)
,                    RADictionary.put(new ABObject[]{object1,object2}, rels);               
,                }
,            }
,        }
,        return RADictionary;
,    }
"
41e528e8-032e-4c9c-aedf-8273f5e22315,fc7dfcf0-bcf1-406e-b39c-274395fab52e,PERCENT,"PUBLIC,STATIC,void,main,LPAREN,String,LBRACKET,RBRACKET,args,RPAREN,LBRACE,Scanner,sc,EQ,NEW,Scanner,LPAREN,System,DOT,in,RPAREN,SEMI,WHILE,LPAREN,true,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""Please enter 3 numbers"",RPAREN,SEMI,int,first,EQ,sc,DOT,nextInt,LPAREN,RPAREN,SEMI,int,second,EQ,sc,DOT,nextInt,LPAREN,RPAREN,SEMI,int,third,EQ,sc,DOT,nextInt,LPAREN,RPAREN,SEMI,IF,LPAREN,first,EQEQ,0,AMPAMP,second,EQEQ,0,AMPAMP,third,EQEQ,0,RPAREN,LBRACE,BREAK,SEMI,RBRACE,IF,LPAREN,LPAREN,first,PLUS,second,PLUS,third,RPAREN,<MASK>,3,EQEQ,0,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""Yes"",RPAREN,SEMI,RBRACE,ELSE,LBRACE,System,DOT,out,DOT,println,LPAREN,""No"",RPAREN,SEMI,RBRACE,RBRACE,RBRACE","	public static void main(String[] args) {
,		Scanner sc = new Scanner(System.in);
,
,		while (true) {
,			System.out.println(""Please enter 3 numbers"");
,			int first = sc.nextInt();
,			int second = sc.nextInt();
,			int third = sc.nextInt();
,
,			if (first == 0 && second == 0 && third == 0) {
,				break;
,			}
,
,			if ((first + second + third) <MASK> 3 == 0) {
,				System.out.println(""Yes"");
,			} else {
,				System.out.println(""No"");
,			}
,		}
,	}
"
b6d08fd3-a673-4a77-8d9f-bf9a01922a85,ed2cabd8-d5b7-4514-9bb4-636fe587e768,SLASH,"MONKEYS_AT,Override,PUBLIC,void,tick,LPAREN,float,delta,RPAREN,LBRACE,IF,LPAREN,t,EQEQ,0,RPAREN,makeCloud,LPAREN,RPAREN,SEMI,t,PLUSEQ,delta,STAR,app,DOT,timeMultiplier,<MASK>,2.0f,SEMI,IF,LPAREN,t,GT,cycleLength,RPAREN,t,EQ,0,SEMI,RBRACE","    @Override
,    public void tick(float delta) {
,
,        if (t == 0) makeCloud();
,        <MASK>/if (bubbles > 1) if (t == 7) makeCloud();
,        //if (bubbles > 2) if (t == 14) makeCloud();
,
,        t += delta * app.timeMultiplier / 2.0f;
,        if (t > cycleLength) t = 0;
,
,        //System.out.println(""avg secs: "" + c.getAvgSleep());
,    }
"
a976df20-c97b-4d57-87ae-cd8f116ed755,d3a89bed-81a9-43dd-8324-8a909bed8b23,PLUS,"PUBLIC,void,handleElementClicked,LPAREN,FINAL,Point,point,RPAREN,LBRACE,Logger,DOT,info,LPAREN,""Mouse clicked at (%.1f,%.1f)\n"",COMMA,point,DOT,getX,LPAREN,RPAREN,COMMA,point,DOT,getY,LPAREN,RPAREN,RPAREN,SEMI,IF,LPAREN,clickArea,DOT,contains,LPAREN,point,RPAREN,RPAREN,LBRACE,FINAL,int,col,EQ,LPAREN,int,RPAREN,LPAREN,point,DOT,getX,LPAREN,RPAREN,SLASH,25,RPAREN,SEMI,FINAL,int,row,EQ,LPAREN,int,RPAREN,LPAREN,LPAREN,point,DOT,getY,LPAREN,RPAREN,SUB,clickArea,DOT,y,RPAREN,SLASH,38,RPAREN,SEMI,Logger,DOT,info,LPAREN,""col = %d, row = %d\n"",COMMA,col,COMMA,row,RPAREN,SEMI,FINAL,int,index,EQ,row,STAR,13,<MASK>,col,SEMI,FINAL,Character,letter,EQ,availableLetters,LBRACKET,index,RBRACKET,SEMI,IF,LPAREN,letter,BANGEQ,null,RPAREN,LBRACE,pickLetter,LPAREN,letter,RPAREN,SEMI,RBRACE,RBRACE,RBRACE","	public void handleElementClicked( final Point point ) {
,		Logger.info( ""Mouse clicked at (%.1f,%.1f)\n"", point.getX(), point.getY() );
,		if( clickArea.contains( point ) ) {
,			final int col = (int)( point.getX() / 25 );
,			final int row = (int)( ( point.getY() - clickArea.y ) / 38 );
,			Logger.info( ""col = %d, row = %d\n"", col, row );
,			
,			// identify the letter
,			final int index = row * 13 <MASK> col;
,			final Character letter = availableLetters[ index ];
,			if( letter != null ) {
,				pickLetter( letter );
,			}
,		}
,	}
"
c9d0d487-9bde-4e8f-baf8-9fbabc0bcffb,c6165935-d7a2-4f23-bf8e-4ec7fe942594,GTEQ,"PUBLIC,STATIC,FaceBundle,submit,LPAREN,double,LBRACKET,RBRACKET,LBRACKET,RBRACKET,face_v,COMMA,int,width,COMMA,int,height,COMMA,String,LBRACKET,RBRACKET,id,COMMA,boolean,debug,RPAREN,LBRACE,int,length,EQ,width,STAR,height,SEMI,int,nrfaces,EQ,face_v,DOT,length,SEMI,int,i,COMMA,j,COMMA,col,COMMA,rows,COMMA,pix,COMMA,image,SEMI,double,temp,EQ,0.0,SEMI,double,LBRACKET,RBRACKET,LBRACKET,RBRACKET,faces,EQ,NEW,double,LBRACKET,nrfaces,RBRACKET,LBRACKET,length,RBRACKET,SEMI,ImageFileViewer,simple,EQ,NEW,ImageFileViewer,LPAREN,RPAREN,SEMI,simple,DOT,setImage,LPAREN,face_v,LBRACKET,0,RBRACKET,COMMA,width,COMMA,height,RPAREN,SEMI,double,LBRACKET,RBRACKET,avgF,EQ,NEW,double,LBRACKET,length,RBRACKET,SEMI,FOR,LPAREN,pix,EQ,0,SEMI,pix,LT,length,SEMI,pix,PLUSPLUS,RPAREN,LBRACE,temp,EQ,0,SEMI,FOR,LPAREN,image,EQ,0,SEMI,image,LT,nrfaces,SEMI,image,PLUSPLUS,RPAREN,LBRACE,temp,PLUSEQ,face_v,LBRACKET,image,RBRACKET,LBRACKET,pix,RBRACKET,SEMI,RBRACE,avgF,LBRACKET,pix,RBRACKET,EQ,temp,SLASH,nrfaces,SEMI,RBRACE,simple,DOT,setImage,LPAREN,avgF,COMMA,width,COMMA,height,RPAREN,SEMI,FOR,LPAREN,image,EQ,0,SEMI,image,LT,nrfaces,SEMI,image,PLUSPLUS,RPAREN,LBRACE,FOR,LPAREN,pix,EQ,0,SEMI,pix,LT,length,SEMI,pix,PLUSPLUS,RPAREN,LBRACE,face_v,LBRACKET,image,RBRACKET,LBRACKET,pix,RBRACKET,EQ,face_v,LBRACKET,image,RBRACKET,LBRACKET,pix,RBRACKET,SUB,avgF,LBRACKET,pix,RBRACKET,SEMI,RBRACE,RBRACE,System,DOT,arraycopy,LPAREN,face_v,COMMA,0,COMMA,faces,COMMA,0,COMMA,face_v,DOT,length,RPAREN,SEMI,simple,DOT,setImage,LPAREN,face_v,LBRACKET,0,RBRACKET,COMMA,width,COMMA,height,RPAREN,SEMI,Matrix,faceM,EQ,NEW,Matrix,LPAREN,face_v,COMMA,nrfaces,COMMA,length,RPAREN,SEMI,Matrix,faceM_transpose,EQ,faceM,DOT,transpose,LPAREN,RPAREN,SEMI,Matrix,covarM,EQ,faceM,DOT,times,LPAREN,faceM_transpose,RPAREN,SEMI,EigenvalueDecomposition,E,EQ,covarM,DOT,eig,LPAREN,RPAREN,SEMI,double,LBRACKET,RBRACKET,eigValue,EQ,diag,LPAREN,E,DOT,getD,LPAREN,RPAREN,DOT,getArray,LPAREN,RPAREN,RPAREN,SEMI,double,LBRACKET,RBRACKET,LBRACKET,RBRACKET,eigVector,EQ,E,DOT,getV,LPAREN,RPAREN,DOT,getArray,LPAREN,RPAREN,SEMI,int,LBRACKET,RBRACKET,index,EQ,NEW,int,LBRACKET,nrfaces,RBRACKET,SEMI,double,LBRACKET,RBRACKET,LBRACKET,RBRACKET,tempVector,EQ,NEW,double,LBRACKET,nrfaces,RBRACKET,LBRACKET,nrfaces,RBRACKET,SEMI,FOR,LPAREN,i,EQ,0,SEMI,i,LT,nrfaces,SEMI,i,PLUSPLUS,RPAREN,index,LBRACKET,i,RBRACKET,EQ,i,SEMI,doubleQuickSort,LPAREN,eigValue,COMMA,index,COMMA,0,COMMA,nrfaces,SUB,1,RPAREN,SEMI,int,LBRACKET,RBRACKET,tempV,EQ,NEW,int,LBRACKET,nrfaces,RBRACKET,SEMI,FOR,LPAREN,j,EQ,0,SEMI,j,LT,nrfaces,SEMI,j,PLUSPLUS,RPAREN,tempV,LBRACKET,nrfaces,SUB,1,SUB,j,RBRACKET,EQ,index,LBRACKET,j,RBRACKET,SEMI,index,EQ,tempV,SEMI,FOR,LPAREN,col,EQ,nrfaces,SUB,1,SEMI,col,<MASK>,0,SEMI,col,SUBSUB,RPAREN,LBRACE,FOR,LPAREN,rows,EQ,0,SEMI,rows,LT,nrfaces,SEMI,rows,PLUSPLUS,RPAREN,LBRACE,tempVector,LBRACKET,rows,RBRACKET,LBRACKET,col,RBRACKET,EQ,eigVector,LBRACKET,rows,RBRACKET,LBRACKET,index,LBRACKET,col,RBRACKET,RBRACKET,SEMI,RBRACE,RBRACE,eigVector,EQ,tempVector,SEMI,tempVector,EQ,null,SEMI,eigValue,EQ,null,SEMI,Matrix,eigVectorM,EQ,NEW,Matrix,LPAREN,eigVector,COMMA,nrfaces,COMMA,nrfaces,RPAREN,SEMI,eigVector,EQ,eigVectorM,DOT,times,LPAREN,faceM,RPAREN,DOT,getArray,LPAREN,RPAREN,SEMI,FOR,LPAREN,image,EQ,0,SEMI,image,LT,nrfaces,SEMI,image,PLUSPLUS,RPAREN,LBRACE,temp,EQ,max,LPAREN,eigVector,LBRACKET,image,RBRACKET,RPAREN,SEMI,FOR,LPAREN,pix,EQ,0,SEMI,pix,LT,eigVector,LBRACKET,0,RBRACKET,DOT,length,SEMI,pix,PLUSPLUS,RPAREN,eigVector,LBRACKET,image,RBRACKET,LBRACKET,pix,RBRACKET,EQ,Math,DOT,abs,LPAREN,eigVector,LBRACKET,image,RBRACKET,LBRACKET,pix,RBRACKET,SLASH,temp,RPAREN,SEMI,RBRACE,double,LBRACKET,RBRACKET,LBRACKET,RBRACKET,wk,EQ,NEW,double,LBRACKET,nrfaces,RBRACKET,LBRACKET,MAGIC_NR,RBRACKET,SEMI,FOR,LPAREN,image,EQ,0,SEMI,image,LT,nrfaces,SEMI,image,PLUSPLUS,RPAREN,LBRACE,FOR,LPAREN,j,EQ,0,SEMI,j,LT,MAGIC_NR,SEMI,j,PLUSPLUS,RPAREN,LBRACE,temp,EQ,0.0,SEMI,FOR,LPAREN,pix,EQ,0,SEMI,pix,LT,length,SEMI,pix,PLUSPLUS,RPAREN,temp,PLUSEQ,eigVector,LBRACKET,j,RBRACKET,LBRACKET,pix,RBRACKET,STAR,faces,LBRACKET,image,RBRACKET,LBRACKET,pix,RBRACKET,SEMI,wk,LBRACKET,image,RBRACKET,LBRACKET,j,RBRACKET,EQ,Math,DOT,abs,LPAREN,temp,RPAREN,SEMI,RBRACE,RBRACE,FaceBundle,b,EQ,NEW,FaceBundle,LPAREN,avgF,COMMA,wk,COMMA,eigVector,COMMA,id,RPAREN,SEMI,RETURN,b,SEMI,RBRACE","  public static FaceBundle submit(double[][] face_v, int width, int height, String[] id, boolean debug) {
,
,    int length = width*height;
,    int nrfaces = face_v.length;
,    int i, j, col,rows, pix, image;
,    double temp = 0.0;
,    double[][] faces = new double[nrfaces][length];
,
,    
,    ImageFileViewer simple = new ImageFileViewer();
,    simple.setImage(face_v[0],width,height);
,
,    double[] avgF = new double[length];
,
,    /*
,     Compute average face of all of the faces. 1xN^2
,     */
,    for ( pix = 0; pix < length; pix++) {
,      temp = 0;
,      for ( image = 0; image < nrfaces; image++) {
,        temp +=  face_v[image][pix];
,      }
,      avgF[pix] = temp / nrfaces;
,    }
,
,    simple.setImage(avgF, width,height);
,
,    /*
,     Compute difference.
,    */
,
,    for ( image = 0; image < nrfaces; image++) {
,
,      for ( pix = 0; pix < length; pix++) {
,        face_v[image][pix] = face_v[image][pix] - avgF[pix];
,      }
,    }
,    /* Copy our face vector (MxN^2). We will use it later */
,
,    //for (image = 0; image < nrfaces; image++)
,    //  System.arraycopy(face_v[image],0,faces[image],0,length);
,    System.arraycopy(face_v,0,faces,0,face_v.length);
,
,    simple.setImage(face_v[0],width,height);
,
,    /*
,     Build covariance matrix. MxM
,    */
,
,    Matrix faceM = new Matrix(face_v, nrfaces,length);
,    Matrix faceM_transpose = faceM.transpose();
,
,    /*
,     Covariance matrix - its MxM (nrfaces x nrfaces)
,     */
,    Matrix covarM = faceM.times(faceM_transpose);
,
,    //double[][] z = covarM.getArray();
,    //System.out.println(""Covariance matrix is ""+z.length+"" x ""+z[0].length);
,
,    /*
,     Compute eigenvalues and eigenvector. Both are MxM
,    */
,    EigenvalueDecomposition E = covarM.eig();
,
,    double[] eigValue = diag(E.getD().getArray());
,    double[][] eigVector = E.getV().getArray();
,
,    /*
,     * We only need the largest associated values of the eigenvalues.
,     * Thus we sort them (and keep an index of them)
,     */
,    int[] index = new int[nrfaces];
,    double[][] tempVector = new double[nrfaces][nrfaces];  /* Temporary new eigVector */
,
,    for ( i = 0; i <nrfaces; i++) /* Enumerate all the entries */
,      index[i] = i;
,
,    doubleQuickSort(eigValue, index,0,nrfaces-1);
,
,    // Put the index in inverse
,    int[] tempV = new int[nrfaces];
,    for ( j = 0; j < nrfaces; j++)
,      tempV[nrfaces-1-j] = index[j];
,    /*
,    for (int j = 0; j< nrfaces; j++) {
,      System.out.println(temp[j]+"" (was: ""+index[j]+"") ""+eigValue[temp[j]]);
,    }
,    */
,    index = tempV;
,
,     /*
,      * Put the sorted eigenvalues in the appropiate columns.
,     */
,    for ( col = nrfaces-1; col <MASK> 0; col --) {
,      for ( rows = 0; rows < nrfaces; rows++ ){
,        tempVector[rows][col] = eigVector[rows][index[col]];
,      }
,    }
,    eigVector = tempVector;
,    tempVector = null;
,    eigValue = null;
,    /*
,     * From this point on we don't care about our eigenvalues anymore.
,     *
,     *
,     * We multiply our faceM (MxN^2) with our new eigenvector (MxM),
,     * getting eigenfaces (MxN^2)
,     */
,     Matrix eigVectorM = new Matrix(eigVector, nrfaces,nrfaces);
,     eigVector = eigVectorM.times(faceM).getArray();
,
,
,     /* Normalize our eigen vector matrix.  */
,
,     for ( image = 0; image < nrfaces; image++) {
,      temp = max(eigVector[image]); // Our max
,      for ( pix = 0; pix < eigVector[0].length; pix++)
,       // Normalize
,        eigVector[image][pix] = Math.abs( eigVector[image][pix] / temp);
,    }
,
,    /*
,     * And now the computation of wk (face space), which is a vector and
,     * is of some heuristically determind length. How does 11 sound?
,     *
,     * This is where we are using our copied faces vector (look at the
,     * the beginning of the method) - the reason is b/c the faceM made the
,     * array internally an covariance matrix.
,     */
,
,    double[][] wk = new double[nrfaces][MAGIC_NR]; // M rows, 11 columns
,
,    /*
,     Compute our wk.
,    */
,
,    for (image = 0; image < nrfaces; image++) {
,      for (j  = 0; j <  MAGIC_NR; j++) {
,        temp = 0.0;
,        for ( pix=0; pix< length; pix++)
,          temp += eigVector[j][pix] * faces[image][pix];
,        wk[image][j] = Math.abs( temp );
,      }
,    }
,
,    /*
,     That's it!
,    */
,
,    FaceBundle b = new FaceBundle(avgF, wk, eigVector ,id);
,
,    /*
,    //This is what you would use to recognize a face ...
,
,    double[] inputFace = new double[length];
,    // So we are trying to recognize the 14th image..
,    System.arraycopy(faces[14],0,inputFace,0,length);
,
,    // This is done for virgin images, not ones that we already subtracted.
,    // for (  pix = 0; pix < inputFace.length; pix++) {
,    //   inputFace[pix] = inputFace[pix] - avgF[pix];
,    //}
,    */
,    /*
,    double[] input_wk = new double[MAGIC_NR];
,    for (j = 0; j < MAGIC_NR; j++) {
,      temp = 0.0;
,      for ( pix=0; pix <length; pix++)
,        temp += eigVector[j][pix] * inputFace[pix];
,
,      input_wk[j] = Math.abs( temp );
,    }
,    */
,    /*
,     * Find the minimun distance from the input_wk as compared to wk
,     */
,    /*
,    int idx = 0;
,    double[] distance = new double[MAGIC_NR];
,    double[] minDistance = new double[MAGIC_NR];
,
,    for (image = 0; image < nrfaces; image++) {
,        for (j = 0; j < MAGIC_NR; j++)
,          distance[j] = Math.abs(input_wk[j] - wk[image][j]);
,        if (image == 0)
,          System.arraycopy(distance,0,minDistance,0,MAGIC_NR);
,         if (sum(minDistance) > sum(distance)) {
,          idx = image;
,          System.arraycopy(distance,0,minDistance,0,MAGIC_NR);
,
,        }
,    }
,    */
,
,    /*
,     * Normalize our minimum distance.
,     */
,     /*
,    divide(minDistance, max(minDistance)+1);
,    double  minD = sum(minDistance);
,    System.out.println(""image is idx ""+idx+"" distance from face: ""+minD);
,
,
,    //ImageFileViewer simple = new ImageFileViewer();
,    int[] bb = new int[length];
,
,    temp = max(eigVector[0]);
,
,    for ( i = 0; i < width*height; i++) {
,      bb[i] = (int) (255*(1 - eigVector[0][i] / temp ));
,    }
,
,    simple.setImage(bb,width,height);
,    */
,    return b;
,  }
"
1b8c895d-7ca3-40d2-8eed-2c6100c60c79,1d477d8a-7d1e-410a-95dd-e0505749a1d7,LT,"MONKEYS_AT,Override,PUBLIC,void,run,LPAREN,RPAREN,LBRACE,SYNCHRONIZED,LPAREN,this,RPAREN,LBRACE,FOR,LPAREN,int,i,EQ,1,SEMI,i,<MASK>,1000000001,SEMI,PLUSPLUS,i,RPAREN,LBRACE,total,PLUSEQ,i,SEMI,RBRACE,notify,LPAREN,RPAREN,SEMI,RBRACE,RBRACE","		@Override
,		public void run() {
,			synchronized (this) {
,				for (int i = 1; i <MASK> 1000000001; ++i) {
,					total += i;
,				}
,				notify();
,			}
,		}
"
35ade180-d88e-4313-85ee-c83da04287fd,8a30b07f-e351-41d7-821b-4ed6a195ba60,BANGEQ,"PRIVATE,STATIC,boolean,isPanDigital,LPAREN,int,i,COMMA,int,j,COMMA,int,k,COMMA,int,min,COMMA,int,max,RPAREN,LBRACE,StringBuilder,sb,EQ,NEW,StringBuilder,LPAREN,RPAREN,SEMI,sb,DOT,append,LPAREN,i,RPAREN,SEMI,sb,DOT,append,LPAREN,j,RPAREN,SEMI,sb,DOT,append,LPAREN,k,RPAREN,SEMI,IF,LPAREN,sb,DOT,length,LPAREN,RPAREN,<MASK>,9,RPAREN,LBRACE,RETURN,false,SEMI,RBRACE,int,num,EQ,Integer,DOT,parseInt,LPAREN,sb,DOT,toString,LPAREN,RPAREN,RPAREN,SEMI,IF,LPAREN,num,LT,min,BARBAR,num,GT,max,RPAREN,LBRACE,RETURN,false,SEMI,RBRACE,FINAL,int,LBRACKET,RBRACKET,dst,EQ,NEW,int,LBRACKET,10,RBRACKET,SEMI,FOR,LPAREN,int,n,EQ,0,SEMI,n,LT,sb,DOT,length,LPAREN,RPAREN,SEMI,n,PLUSPLUS,RPAREN,LBRACE,FINAL,String,s,EQ,sb,DOT,substring,LPAREN,n,COMMA,n,PLUS,1,RPAREN,SEMI,int,m,EQ,Integer,DOT,parseInt,LPAREN,s,RPAREN,SEMI,dst,LBRACKET,m,RBRACKET,PLUSPLUS,SEMI,IF,LPAREN,dst,LBRACKET,m,RBRACKET,GT,1,RPAREN,LBRACE,RETURN,false,SEMI,RBRACE,RBRACE,RETURN,true,SEMI,RBRACE","    private static boolean isPanDigital(int i, int j, int k, int min, int max) {
,        StringBuilder sb = new StringBuilder();
,        sb.append(i);
,        sb.append(j);
,        sb.append(k);
,        if (sb.length() <MASK> 9) {
,            return false;
,        }
,        int num = Integer.parseInt(sb.toString());
,        if (num < min || num > max) {
,            return false;
,        }
,        final int[] dst = new int[10];
,        for (int n = 0; n < sb.length(); n++) {
,            final String s = sb.substring(n, n + 1);
,            int m = Integer.parseInt(s);
,            dst[m]++;
,            if (dst[m] > 1) {
,                return false;
,            }
,        }
,        return true;
,    }
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,d3e903e5-a5e5-4ef2-a8ff-8a8a6011b783,SUB,"MONKEYS_AT,Override,PUBLIC,void,run,LPAREN,RPAREN,LBRACE,WHILE,LPAREN,true,RPAREN,LBRACE,double,aux,EQ,Math,DOT,random,LPAREN,RPAREN,SEMI,randomE,DOT,setValue,LPAREN,aux,RPAREN,SEMI,randomP,DOT,setState,LPAREN,PropertyStates,DOT,OK,RPAREN,SEMI,TRY,LBRACE,updateProperty,LPAREN,randomP,RPAREN,SEMI,RBRACE,CATCH,LPAREN,INDIException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,System,DOT,exit,LPAREN,<MASK>,1,RPAREN,SEMI,RBRACE,TRY,LBRACE,Thread,DOT,sleep,LPAREN,1000,RPAREN,SEMI,RBRACE,CATCH,LPAREN,InterruptedException,e,RPAREN,LBRACE,RBRACE,RBRACE,RBRACE","  @Override
,  public void run() {
,    while (true) {
,      double aux = Math.random();
,
,      // Update Element
,      randomE.setValue(aux);
,
,      // Set Property state to OK
,      randomP.setState(PropertyStates.OK);
,
,      // Send the changes to the Clients
,      try {
,        updateProperty(randomP);
,      } catch (INDIException e) {
,        e.printStackTrace();
,        System.exit(<MASK>1);
,      }
,
,      try {
,        Thread.sleep(1000);
,      } catch (InterruptedException e) {
,      }
,    }
,  }
"
811987a2-df8f-411b-b35a-1f251eaec687,52ef0e32-0650-4a80-a25d-60a1f6998a71,SLASH,"PUBLIC,int,getOrgValFromBinNumber,LPAREN,int,bin_number,RPAREN,LBRACE,RETURN,LPAREN,int,RPAREN,Math,DOT,ceil,LPAREN,LPAREN,bin_number,PLUS,1,RPAREN,STAR,100,<MASK>,num_of_states,RPAREN,SEMI,RBRACE","		public int getOrgValFromBinNumber(int bin_number)
,		{
,			return  (int) Math.ceil((bin_number+1)*100<MASK>num_of_states);
,		}
"
045c9602-1af3-497c-b8cd-2e449d2f2915,8f40380f-9842-4317-a51d-c3800a122e38,PLUS,"MONKEYS_AT,Override,void,prepare,LPAREN,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""Prepareing "",<MASK>,name,RPAREN,SEMI,dough,EQ,inFactory,DOT,createDough,LPAREN,RPAREN,SEMI,sauce,EQ,inFactory,DOT,createSauce,LPAREN,RPAREN,SEMI,cheese,EQ,inFactory,DOT,createCheese,LPAREN,RPAREN,SEMI,RBRACE","	@Override
,	void prepare() {
,		System.out.println(""Prepareing "" <MASK> name);
,		
,		dough = inFactory.createDough();
,		sauce = inFactory.createSauce();
,		cheese = inFactory.createCheese();
,		
,	}
"
113c5414-6c55-466b-b879-a350ab6e0ca2,fbe06f15-9ad8-4f8c-a33d-7942491609ff,EQ,"PUBLIC,Holdable,removeItem,LPAREN,Character,itemID,RPAREN,THROWS,InvalidKeyException,LBRACE,Holdable,item,<MASK>,items,DOT,removeItem,LPAREN,itemID,RPAREN,SEMI,RETURN,item,SEMI,RBRACE","	public Holdable removeItem(Character itemID) throws InvalidKeyException {
,		Holdable item <MASK> items.removeItem(itemID);
,		return item;
,	}
"
41e528e8-032e-4c9c-aedf-8273f5e22315,994b9753-34d6-4203-b3f7-a93104ed90cf,PERCENT,"PUBLIC,STATIC,void,main,LPAREN,String,LBRACKET,RBRACKET,args,RPAREN,LBRACE,Scanner,sc,EQ,NEW,Scanner,LPAREN,System,DOT,in,RPAREN,SEMI,int,biggestNum,EQ,Integer,DOT,MIN_VALUE,SEMI,int,smallestNum,EQ,Integer,DOT,MAX_VALUE,SEMI,int,biggestOddNumber,EQ,Integer,DOT,MIN_VALUE,SEMI,boolean,oddNumberFound,EQ,false,SEMI,WHILE,LPAREN,true,RPAREN,LBRACE,int,input,EQ,sc,DOT,nextInt,LPAREN,RPAREN,SEMI,IF,LPAREN,input,EQEQ,0,RPAREN,LBRACE,BREAK,SEMI,RBRACE,IF,LPAREN,input,GT,biggestNum,RPAREN,LBRACE,biggestNum,EQ,input,SEMI,RBRACE,IF,LPAREN,input,<MASK>,2,BANGEQ,0,RPAREN,LBRACE,IF,LPAREN,BANG,oddNumberFound,RPAREN,LBRACE,biggestOddNumber,EQ,input,SEMI,oddNumberFound,EQ,true,SEMI,RBRACE,ELSE,IF,LPAREN,input,GTEQ,biggestOddNumber,RPAREN,LBRACE,biggestOddNumber,EQ,input,SEMI,RBRACE,RBRACE,IF,LPAREN,input,LT,smallestNum,RPAREN,LBRACE,smallestNum,EQ,input,SEMI,RBRACE,RBRACE,System,DOT,out,DOT,println,LPAREN,""The biggest number is: "",PLUS,biggestNum,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""The smallest number is: "",PLUS,smallestNum,RPAREN,SEMI,IF,LPAREN,oddNumberFound,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""The biggest odd number is : "",PLUS,biggestOddNumber,RPAREN,SEMI,RBRACE,ELSE,LBRACE,System,DOT,out,DOT,println,LPAREN,""There is no odd number in the sequence!"",RPAREN,SEMI,RBRACE,RBRACE","	public static void main(String[] args) {
,
,		Scanner sc = new Scanner(System.in);
,		int biggestNum = Integer.MIN_VALUE;
,		int smallestNum = Integer.MAX_VALUE;
,		int biggestOddNumber = Integer.MIN_VALUE;
,		boolean oddNumberFound = false;
,
,		while (true) {
,			int input = sc.nextInt();
,			if (input == 0) {
,				break;
,			}
,
,			if (input > biggestNum) {
,				biggestNum = input;
,			}
,
,			if (input <MASK> 2 != 0) {
,				if (!oddNumberFound) {
,					biggestOddNumber = input;
,					oddNumberFound = true;
,				} else if (input >= biggestOddNumber) {
,					biggestOddNumber = input;
,				}
,			}
,
,			if (input < smallestNum) {
,				smallestNum = input;
,			}
,
,		}
,
,		System.out.println(""The biggest number is: "" + biggestNum);
,		System.out.println(""The smallest number is: "" + smallestNum);
,
,		if (oddNumberFound) {
,			System.out.println(""The biggest odd number is : "" + biggestOddNumber);
,		} else {
,			System.out.println(""There is no odd number in the sequence!"");
,		}
,
,	}
"
25febb02-bf0a-414d-9cae-3efcbdacd8a3,408a3dd4-4efd-48a9-a337-a29a395c396b,LTEQ,"PUBLIC,void,shift,LPAREN,boolean,down,RPAREN,LBRACE,IF,LPAREN,down,RPAREN,LBRACE,IF,LPAREN,offSet,<MASK>,0,RPAREN,RETURN,SEMI,front,SUBSUB,SEMI,offSet,SUBSUB,SEMI,IF,LPAREN,front,EQEQ,SUB,1,RPAREN,LBRACE,front,PLUSEQ,AMOUNT_OF_LINES,SEMI,RBRACE,RBRACE,ELSE,LBRACE,front,PLUSPLUS,SEMI,offSet,PLUSPLUS,SEMI,front,PERCENTEQ,AMOUNT_OF_LINES,SEMI,RBRACE,refresh,LPAREN,RPAREN,SEMI,RBRACE","	public void shift(boolean down){
,		if(down){
,			if(offSet <MASK> 0)return;
,			front--;
,			offSet--;
,			if(front == -1){
,				front += AMOUNT_OF_LINES;
,			}
,		}
,		else{
,			front++;
,			offSet++;
,			front %= AMOUNT_OF_LINES;
,		}
,		refresh();
,	}
"
a4c68a60-241d-4ccc-bb34-58eb273247fe,fa59261c-7f29-43bc-bb7d-11537edc0edd,PLUS,"PRIVATE,STATIC,String,LBRACKET,RBRACKET,checkForNulls,LPAREN,String,LBRACKET,RBRACKET,command,RPAREN,LBRACE,FOR,LPAREN,String,arg,COLON,command,RPAREN,LBRACE,IF,LPAREN,arg,EQEQ,null,RPAREN,LBRACE,THROW,NEW,IllegalStateException,LPAREN,""Command cannot have null as inputs, but was: "",<MASK>,Arrays,DOT,toString,LPAREN,command,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,RETURN,command,SEMI,RBRACE","	private static String[] checkForNulls(String[] command) {
,		for (String arg : command) {
,			if (arg == null) {
,				throw new IllegalStateException(""Command cannot have null as inputs, but was: "" <MASK> Arrays.toString(command));
,			}
,		}
,		return command;
,	}
"
dd0b8baf-c022-4efa-99dd-425e9c39b04c,1952872a-59ac-4e93-b706-6fbf074de502,SLASH,"MONKEYS_AT,Override,PUBLIC,float,getEndV,LPAREN,RPAREN,LBRACE,RETURN,LPAREN,float,RPAREN,this,DOT,endV,<MASK>,LPAREN,float,RPAREN,this,DOT,parent,DOT,getHeight,LPAREN,RPAREN,SEMI,RBRACE","    @Override
,    public float getEndV() {
,        return (float) this.endV <MASK> (float) this.parent.getHeight();
,    }
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,472f89d2-df51-4ae9-abd5-badcd8f08392,LT,"PRIVATE,byte,LBRACKET,RBRACKET,readBinaryFile,LPAREN,File,file,RPAREN,THROWS,IOException,LBRACE,int,fileSize,EQ,LPAREN,int,RPAREN,file,DOT,length,LPAREN,RPAREN,SEMI,FileInputStream,reader,EQ,NEW,FileInputStream,LPAREN,file,RPAREN,SEMI,byte,LBRACKET,RBRACKET,buffer,EQ,NEW,byte,LBRACKET,fileSize,RBRACKET,SEMI,int,totalRead,EQ,0,SEMI,WHILE,LPAREN,totalRead,<MASK>,fileSize,RPAREN,LBRACE,int,readed,EQ,reader,DOT,read,LPAREN,buffer,COMMA,totalRead,COMMA,fileSize,SUB,totalRead,RPAREN,SEMI,IF,LPAREN,readed,EQEQ,SUB,1,RPAREN,LBRACE,RETURN,null,SEMI,RBRACE,totalRead,PLUSEQ,readed,SEMI,RBRACE,RETURN,buffer,SEMI,RBRACE","  private byte[] readBinaryFile(File file) throws IOException {
,    int fileSize = (int) file.length();
,    FileInputStream reader = new FileInputStream(file);
,
,    byte[] buffer = new byte[fileSize];
,
,    int totalRead = 0;
,
,    while (totalRead <MASK> fileSize) {
,      int readed = reader.read(buffer, totalRead, fileSize - totalRead);
,
,      if (readed == -1) {
,        return null; // Unexpected end of file 
,      }
,
,      totalRead += readed;
,    }
,
,    return buffer;
,  }
"
9c253d2b-e626-4f21-a850-dfb022369350,5e85dae9-5eae-4689-b334-6d419c8389c4,LTEQ,"PUBLIC,void,elmult,LPAREN,FINAL,double,LBRACKET,RBRACKET,y,COMMA,FINAL,double,LBRACKET,RBRACKET,b,RPAREN,LBRACE,int,i,COMMA,j,SEMI,IF,LPAREN,b,DOT,length,BANGEQ,n,BARBAR,y,DOT,length,BANGEQ,n,RPAREN,THROW,NEW,IllegalArgumentException,LPAREN,""bad lengths"",RPAREN,SEMI,FOR,LPAREN,i,EQ,0,SEMI,i,LT,n,SEMI,i,PLUSPLUS,RPAREN,LBRACE,b,LBRACKET,i,RBRACKET,EQ,0.,SEMI,FOR,LPAREN,j,EQ,0,SEMI,j,<MASK>,i,SEMI,j,PLUSPLUS,RPAREN,b,LBRACKET,i,RBRACKET,PLUSEQ,el,LBRACKET,i,RBRACKET,LBRACKET,j,RBRACKET,STAR,y,LBRACKET,j,RBRACKET,SEMI,RBRACE,RBRACE","  public void elmult(final double[] y, final double[] b) {
,    int i,j;
,    if (b.length != n || y.length != n) throw new IllegalArgumentException(""bad lengths"");
,    for (i=0;i<n;i++) {
,      b[i] = 0.;
,      for (j=0;j<MASK>i;j++) b[i] += el[i][j]*y[j];
,    }
,  }
"
113c5414-6c55-466b-b879-a350ab6e0ca2,5d45c836-29e9-4879-b49b-46dd059abc93,EQ,"PUBLIC,void,setWeight,LPAREN,int,weight,RPAREN,LBRACE,this,DOT,weight,<MASK>,weight,SEMI,RBRACE","	public void setWeight(int weight) {
,		this.weight <MASK> weight;
,	}
"
92951106-a87f-4e0c-9019-4852bf22d1be,78d90bbc-8447-40e0-978f-0260cf1c6896,PLUS,"PUBLIC,STATIC,void,preOrder,LPAREN,BST,root,RPAREN,LBRACE,IF,LPAREN,root,BANGEQ,null,RPAREN,LBRACE,System,DOT,out,DOT,print,LPAREN,root,DOT,value,<MASK>,"" "",RPAREN,SEMI,preOrder,LPAREN,root,DOT,left,RPAREN,SEMI,preOrder,LPAREN,root,DOT,right,RPAREN,SEMI,RBRACE,RBRACE","	public static void preOrder(BST root) {
,		if (root != null) {
,			System.out.print(root.value <MASK> "" "");
,			preOrder(root.left);
,			preOrder(root.right);
,		}
,	}
"
e804bdf1-7a07-4e36-aee6-aba6a427cf38,5c8502e5-1eb2-421c-a7a2-b887da55a1e3,GTEQ,"PUBLIC,int,LBRACKET,RBRACKET,findShortestPaths,LPAREN,int,source,RPAREN,LBRACE,IF,LPAREN,source,LT,0,BARBAR,source,<MASK>,n,RPAREN,LBRACE,THROW,NEW,IllegalArgumentException,LPAREN,source,PLUS,"" is no valid source vertex."",RPAREN,SEMI,RBRACE,this,DOT,source,EQ,source,SEMI,s,LBRACKET,source,RBRACKET,EQ,true,SEMI,FOR,LPAREN,WeightedEdge,edge,COLON,g,DOT,getIncidentEdges,LPAREN,source,RPAREN,RPAREN,LBRACE,t,DOT,decreaseD,LPAREN,edge,DOT,getTarget,LPAREN,RPAREN,COMMA,edge,DOT,getWeight,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,visit,LPAREN,t,DOT,root,RPAREN,SEMI,int,LBRACKET,RBRACKET,d,EQ,NEW,int,LBRACKET,n,RBRACKET,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,n,SEMI,i,PLUSPLUS,RPAREN,LBRACE,d,LBRACKET,i,RBRACKET,EQ,t,DOT,getD,LPAREN,i,RPAREN,SEMI,RBRACE,d,LBRACKET,source,RBRACKET,EQ,0,SEMI,RETURN,d,SEMI,RBRACE","	public int[] findShortestPaths(int source) {
,		// check the passed source vertex
,		if (source < 0 || source <MASK> n) {
,			throw new IllegalArgumentException(source +
,					"" is no valid source vertex."");
,		}
,		
,		// B.1.
,		this.source = source;
,		s[source] = true;
,		
,		for (WeightedEdge edge : g.getIncidentEdges(source)) {
,			t.decreaseD(edge.getTarget(), edge.getWeight());
,			
,			
,		}
,		
,		// B.3.
,		visit(t.root);
,		
,		// B.4.
,		int[] d = new int[n];
,		
,		for (int i = 0; i < n; i++) {
,			d[i] = t.getD(i);
,			//System.out.println(d[i]);
,		}
,		
,		// B.2.
,		d[source] = 0;
,		
,		return d;
,	}
"
ad0a2aad-9ad8-443c-832f-88b9f64460ed,55ad52a4-0758-46eb-b470-f7f39e683f9f,EQ,"PROTECTED,void,initialize,LPAREN,RPAREN,LBRACE,compressor,DOT,enabled,<MASK>,true,SEMI,RBRACE","    protected void initialize() {
,        compressor.enabled <MASK> true;
,    }
"
811987a2-df8f-411b-b35a-1f251eaec687,3465c080-f82c-4ce5-bf96-af92eee7615f,SLASH,"PUBLIC,Coords,getNeuronCoordinate,LPAREN,int,neuronNumber,RPAREN,LBRACE,int,x,EQ,LPAREN,LPAREN,neuronNumber,SUB,1,RPAREN,<MASK>,colNumber,RPAREN,PLUS,1,SEMI,int,y,EQ,neuronNumber,SUB,LPAREN,LPAREN,x,SUB,1,RPAREN,STAR,colNumber,RPAREN,SEMI,RETURN,NEW,Coords,LPAREN,x,COMMA,y,RPAREN,SEMI,RBRACE","    public Coords getNeuronCoordinate(int neuronNumber){
,        int x = ((neuronNumber - 1) <MASK> colNumber ) + 1;
,        int y = neuronNumber - ((x - 1 ) * colNumber); 
,        return new Coords(x,y);
,    }
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,d56970a8-ce95-48cf-9159-707482faf355,SUB,"PUBLIC,void,paint,LPAREN,Graphics,g,RPAREN,LBRACE,IF,LPAREN,_img,BANGEQ,null,RPAREN,LBRACE,IF,LPAREN,LPAREN,_meta,BANGEQ,null,RPAREN,AMPAMP,LPAREN,_highlightIndex,BANGEQ,<MASK>,1,RPAREN,RPAREN,LBRACE,BufferedImage,canvas,EQ,VisionUtils,DOT,highlightRegions,LPAREN,_img,COMMA,_meta,COMMA,_highlightIndex,COMMA,Color,DOT,RED,RPAREN,SEMI,g,DOT,drawImage,LPAREN,canvas,COMMA,0,COMMA,0,COMMA,null,RPAREN,SEMI,RBRACE,ELSE,LBRACE,g,DOT,drawImage,LPAREN,_img,COMMA,0,COMMA,0,COMMA,null,RPAREN,SEMI,RBRACE,RBRACE,RBRACE","        public void paint(Graphics g) {
,        
,            if (_img != null) {
,                if ((_meta != null) && (_highlightIndex != <MASK>1)) {
,                    BufferedImage canvas = VisionUtils.highlightRegions(_img, _meta, _highlightIndex, Color.RED);
,                    g.drawImage(canvas, 0, 0, null);
,                } else {
,                	
,                    g.drawImage(_img, 0, 0, null);
,                }
,            }
,        }
"
dd0b8baf-c022-4efa-99dd-425e9c39b04c,29afd91b-f71a-4cb5-bfa6-6a1598616d5e,SLASH,"MONKEYS_AT,Override,PUBLIC,float,getEndU,LPAREN,RPAREN,LBRACE,RETURN,LPAREN,float,RPAREN,this,DOT,endU,<MASK>,LPAREN,float,RPAREN,this,DOT,parent,DOT,getWidth,LPAREN,RPAREN,SEMI,RBRACE","    @Override
,    public float getEndU() {
,        return (float) this.endU <MASK> (float) this.parent.getWidth();
,    }
"
7fe8faa8-6d71-4d77-acc6-fe9b7d23dda6,08ec3f3f-0bc3-47b3-ba06-6e7f429e6263,GT,"double,round,LPAREN,double,value,COMMA,int,decimalPlace,RPAREN,LBRACE,double,power_of_ten,EQ,1,SEMI,WHILE,LPAREN,decimalPlace,SUBSUB,<MASK>,0,RPAREN,LBRACE,power_of_ten,STAREQ,10.0,SEMI,RBRACE,RETURN,Math,DOT,round,LPAREN,value,STAR,power_of_ten,RPAREN,SLASH,power_of_ten,SEMI,RBRACE","    double round(double value, int decimalPlace) {
,        double power_of_ten = 1;
,        while (decimalPlace-- <MASK> 0) {
,            power_of_ten *= 10.0;
,        }
,        return Math.round(value * power_of_ten) / power_of_ten;
,    }
"
63ee1274-7add-4bc5-a057-e2079298f295,5324fbe9-0b2d-4652-9a3c-19daaf207d69,SUB,"MONKEYS_AT,Test,PUBLIC,void,testViewInventory,LPAREN,RPAREN,THROWS,FileNotFoundException,LBRACE,player,DOT,viewInventory,LPAREN,RPAREN,SEMI,player,DOT,inventory,DOT,add,LPAREN,item,RPAREN,SEMI,player,DOT,viewInventory,LPAREN,RPAREN,SEMI,Scanner,sc,EQ,NEW,Scanner,LPAREN,NEW,File,LPAREN,""testing.txt"",RPAREN,RPAREN,SEMI,ArrayList,LT,String,GT,testOutput,EQ,NEW,ArrayList,LT,String,GT,LPAREN,RPAREN,SEMI,WHILE,LPAREN,sc,DOT,hasNextLine,LPAREN,RPAREN,RPAREN,LBRACE,testOutput,DOT,add,LPAREN,sc,DOT,nextLine,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,sc,DOT,close,LPAREN,RPAREN,SEMI,assertArrayEquals,LPAREN,""Your inventory contains nothing."",DOT,toCharArray,LPAREN,RPAREN,COMMA,testOutput,DOT,get,LPAREN,0,RPAREN,DOT,toCharArray,LPAREN,RPAREN,RPAREN,SEMI,assertArrayEquals,LPAREN,""   testName"",DOT,toCharArray,LPAREN,RPAREN,COMMA,testOutput,DOT,get,LPAREN,testOutput,DOT,size,LPAREN,RPAREN,<MASK>,1,RPAREN,DOT,toCharArray,LPAREN,RPAREN,RPAREN,SEMI,RBRACE","	@Test
,	public void testViewInventory() throws FileNotFoundException {
,		player.viewInventory();
,		
,		player.inventory.add(item);
,
,		player.viewInventory();
,		
,		Scanner sc = new Scanner(new File(""testing.txt""));
,		ArrayList<String> testOutput = new ArrayList<String>();
,		while (sc.hasNextLine()) {
,			testOutput.add(sc.nextLine());
,		}
,		sc.close();
,
,		assertArrayEquals(""Your inventory contains nothing."".toCharArray(), testOutput
,				.get(0).toCharArray());
,		
,		assertArrayEquals(""   testName"".toCharArray(), testOutput
,				.get(testOutput.size() <MASK> 1).toCharArray());
,	}
"
46553d6c-dc87-4edc-9d46-5b7555c514e8,48f282de-081c-4b2d-95ba-89e356f57dd4,PERCENT,"PUBLIC,FINAL,STATIC,byte,LBRACKET,RBRACKET,shortToLittleEndian,LPAREN,short,val,RPAREN,LBRACE,FINAL,byte,LBRACKET,RBRACKET,b,EQ,NEW,byte,LBRACKET,2,RBRACKET,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,2,SEMI,i,PLUSPLUS,RPAREN,LBRACE,b,LBRACKET,i,RBRACKET,EQ,LPAREN,byte,RPAREN,LPAREN,val,<MASK>,256,RPAREN,SEMI,val,EQ,LPAREN,short,RPAREN,LPAREN,val,SLASH,256,RPAREN,SEMI,RBRACE,RETURN,b,SEMI,RBRACE","  public final static byte[] shortToLittleEndian( short val ) {
,    final byte[] b = new byte[2];
,
,    for ( int i = 0; i < 2; i++ ) {
,      b[i] = (byte)( val <MASK> 256 );
,      val = (short)( val / 256 );
,    }
,
,    return b;
,  }
"
68422d14-68e8-42b7-9437-f6891889f4fc,e6d8e290-b4d6-4cca-8a3c-763a514dc979,PERCENT,"PUBLIC,void,setMinutes,LPAREN,int,minutes,RPAREN,LBRACE,IF,LPAREN,minutes,LT,0,RPAREN,RETURN,SEMI,IF,LPAREN,minutes,GT,60,RPAREN,LBRACE,this,DOT,minutes,EQ,minutes,<MASK>,60,SEMI,this,DOT,hour,PLUSEQ,minutes,SLASH,60,SEMI,RBRACE,ELSE,this,DOT,minutes,EQ,minutes,SEMI,RBRACE","	public void setMinutes(int minutes) {
,		if(minutes < 0) return;
,		//should actually return an exception
,		
,		if(minutes > 60) {
,			this.minutes = minutes <MASK> 60;
,			this.hour += minutes / 60;
,		} else this.minutes = minutes;
,	}
"
b5ee7e5e-a7bf-41d4-8880-3ac95d2f8822,2f76dd47-260d-4e7e-a4bf-1067ec0ce67b,BANGEQ,"PUBLIC,void,connect,LPAREN,RPAREN,LBRACE,Console,console,EQ,System,DOT,console,LPAREN,RPAREN,SEMI,IF,LPAREN,username,DOT,isEmpty,LPAREN,RPAREN,BARBAR,password,EQEQ,null,BARBAR,password,DOT,length,EQEQ,0,RPAREN,LBRACE,IF,LPAREN,console,<MASK>,null,RPAREN,LBRACE,username,EQ,console,DOT,readLine,LPAREN,""Enter USERNAME: "",RPAREN,SEMI,password,EQ,console,DOT,readPassword,LPAREN,""Enter PASSWORD: "",RPAREN,SEMI,RBRACE,ELSE,LBRACE,JPanel,userPanel,EQ,NEW,JPanel,LPAREN,RPAREN,SEMI,userPanel,DOT,setLayout,LPAREN,NEW,GridLayout,LPAREN,2,COMMA,2,RPAREN,RPAREN,SEMI,JLabel,usernameLbl,EQ,NEW,JLabel,LPAREN,""Username:"",RPAREN,SEMI,JLabel,passwordLbl,EQ,NEW,JLabel,LPAREN,""Password:"",RPAREN,SEMI,JTextField,usernameJ,EQ,NEW,JTextField,LPAREN,RPAREN,SEMI,JPasswordField,passwordFld,EQ,NEW,JPasswordField,LPAREN,RPAREN,SEMI,userPanel,DOT,add,LPAREN,usernameLbl,RPAREN,SEMI,userPanel,DOT,add,LPAREN,usernameJ,RPAREN,SEMI,userPanel,DOT,add,LPAREN,passwordLbl,RPAREN,SEMI,userPanel,DOT,add,LPAREN,passwordFld,RPAREN,SEMI,JOptionPane,DOT,showConfirmDialog,LPAREN,null,COMMA,userPanel,COMMA,""Login to Database:"",COMMA,JOptionPane,DOT,OK_CANCEL_OPTION,COMMA,JOptionPane,DOT,PLAIN_MESSAGE,RPAREN,SEMI,username,EQ,usernameJ,DOT,getText,LPAREN,RPAREN,SEMI,password,EQ,passwordFld,DOT,getPassword,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,TRY,LBRACE,Class,DOT,forName,LPAREN,driver,RPAREN,SEMI,conn,EQ,DriverManager,DOT,getConnection,LPAREN,conString,COMMA,username,COMMA,String,DOT,valueOf,LPAREN,password,RPAREN,RPAREN,SEMI,Arrays,DOT,fill,LPAREN,password,COMMA, ,RPAREN,SEMI,Statement,st,EQ,conn,DOT,createStatement,LPAREN,RPAREN,SEMI,st,DOT,execute,LPAREN,""SET work_mem='4GB'"",RPAREN,SEMI,st,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,ClassNotFoundException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,SQLException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,RBRACE","	public void connect() {
,
,		Console console = System.console();
,		if (username.isEmpty() || password == null || password.length == 0) {
,			if (console <MASK> null) {
,				username = console.readLine(""Enter USERNAME: "");
,				password = console.readPassword(""Enter PASSWORD: "");
,
,			} else {
,				// Using a JPanel as the message for the JOptionPane
,				JPanel userPanel = new JPanel();
,				userPanel.setLayout(new GridLayout(2, 2));
,
,				// Labels for the textfield components
,				JLabel usernameLbl = new JLabel(""Username:"");
,				JLabel passwordLbl = new JLabel(""Password:"");
,
,				JTextField usernameJ = new JTextField();
,				JPasswordField passwordFld = new JPasswordField();
,
,				// Add the components to the JPanel
,				userPanel.add(usernameLbl);
,				userPanel.add(usernameJ);
,				userPanel.add(passwordLbl);
,				userPanel.add(passwordFld);
,
,				// As the JOptionPane accepts an object as the message
,				// it allows us to use any component we like - in this case
,				// a JPanel containing the dialog components we want
,
,				JOptionPane.showConfirmDialog(null, userPanel,
,						""Login to Database:"", JOptionPane.OK_CANCEL_OPTION,
,						JOptionPane.PLAIN_MESSAGE);
,
,				username = usernameJ.getText();
,				password = passwordFld.getPassword();
,			}
,		}
,
,		try {
,			Class.forName(driver);
,
,			conn = DriverManager.getConnection(conString, username,
,					String.valueOf(password));
,
,			Arrays.fill(password, ' ');
,
,			Statement st = conn.createStatement();
,			st.execute(""SET work_mem='4GB'"");
,			st.close();
,
,		} catch (ClassNotFoundException e) {
,			e.printStackTrace();
,		} catch (SQLException e) {
,			e.printStackTrace();
,		}
,	}
"
d71e9d90-d7d7-40b1-b4fa-c5316adcd69a,f82fd16c-2c8a-4c6e-9e18-cec4a9908a3c,LTEQ,"PRIVATE,void,accumulateWeightsDiffs,LPAREN,FINAL,int,frameidx,RPAREN,LBRACE,FOR,LPAREN,int,t,EQ,0,SEMI,t,<MASK>,frameidx,SEMI,t,PLUSPLUS,RPAREN,LBRACE,FINAL,double,LBRACKET,RBRACKET,outputs,EQ,this,DOT,net,DOT,getOutputBuffer,LPAREN,t,RPAREN,SEMI,FINAL,double,LBRACKET,RBRACKET,deltas,EQ,this,DOT,net,DOT,getGradOutputBuffer,LPAREN,t,RPAREN,SEMI,int,off,EQ,0,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,this,DOT,linksnum,SEMI,i,PLUSPLUS,RPAREN,LBRACE,FINAL,int,src,EQ,this,DOT,links,LBRACKET,off,PLUS,Link,DOT,IDX_SRC,RBRACKET,SEMI,FINAL,int,dst,EQ,this,DOT,links,LBRACKET,off,PLUS,Link,DOT,IDX_DST,RBRACKET,SEMI,FINAL,int,widx,EQ,this,DOT,links,LBRACKET,off,PLUS,Link,DOT,IDX_WEIGHT,RBRACKET,SEMI,IF,LPAREN,widx,GT,0,RPAREN,LBRACE,FINAL,double,dk,EQ,deltas,LBRACKET,dst,RBRACKET,SEMI,FINAL,double,xj,EQ,outputs,LBRACKET,src,RBRACKET,SEMI,FINAL,double,dw,EQ,LPAREN,dk,STAR,xj,RPAREN,SEMI,this,DOT,dweights,LBRACKET,widx,RBRACKET,PLUSEQ,LPAREN,dw,RPAREN,SEMI,RBRACE,off,PLUSEQ,Link,DOT,LINK_SIZE,SEMI,RBRACE,RBRACE,RBRACE","    private void accumulateWeightsDiffs(final int frameidx) {
,        //
,        // collect deltas * activations .
,        //
,        for (int t = 0; t <MASK> frameidx; t++) {
,            //
,            final double[] outputs = this.net.getOutputBuffer(t);
,            final double[] deltas  = this.net.getGradOutputBuffer(t);
,            //
,            /*
,            // # DEBUG #
,            final double[] deltasin = net.getGradInputBuffer(t);
,            for (int i = 0; i < deltas.length; i++) {
,                this.deltasdbg[i] += Math.abs(deltas[i]);
,                this.deltasindbg[i] += Math.abs(deltasin[i]);
,            }
,            // #
,            */
,            int off = 0;
,            //
,            for (int i = 0; i < this.linksnum; i++) {
,                //
,                final int src  = this.links[off + Link.IDX_SRC];
,                final int dst  = this.links[off + Link.IDX_DST];
,                final int widx = this.links[off + Link.IDX_WEIGHT];
,                //
,                if (widx > 0) {
,                    final double dk = deltas[dst];
,                    final double xj = outputs[src];
,                    //                     
,                    final double dw = (dk * xj);
,                    this.dweights[widx] += (dw);
,                }
,                //
,                off += Link.LINK_SIZE;
,            }
,        }
,    }
"
996c2181-63de-4cd4-a997-594ad56489d6,f3ac2ee6-5536-4557-856f-0dfffafa7714,SLASH,"PUBLIC,STATIC,int,LBRACKET,RBRACKET,shellSort,LPAREN,int,LBRACKET,RBRACKET,arr,RPAREN,LBRACE,arrTemp,EQ,arr,DOT,clone,LPAREN,RPAREN,SEMI,int,dis,EQ,arrTemp,DOT,length,SEMI,WHILE,LPAREN,true,RPAREN,LBRACE,dis,EQ,dis,<MASK>,2,SEMI,FOR,LPAREN,int,x,EQ,0,SEMI,x,LT,dis,SEMI,x,PLUSPLUS,RPAREN,LBRACE,FOR,LPAREN,int,i,EQ,x,PLUS,dis,SEMI,i,LT,arrTemp,DOT,length,SEMI,i,EQ,i,PLUS,dis,RPAREN,LBRACE,int,temp,EQ,arrTemp,LBRACKET,i,RBRACKET,SEMI,int,j,SEMI,FOR,LPAREN,j,EQ,i,SUB,dis,SEMI,j,GTEQ,0,AMPAMP,arrTemp,LBRACKET,j,RBRACKET,GT,temp,SEMI,j,EQ,j,SUB,dis,RPAREN,LBRACE,arrTemp,LBRACKET,j,PLUS,dis,RBRACKET,EQ,arrTemp,LBRACKET,j,RBRACKET,SEMI,RBRACE,arrTemp,LBRACKET,j,PLUS,dis,RBRACKET,EQ,temp,SEMI,RBRACE,RBRACE,IF,LPAREN,dis,EQEQ,1,RPAREN,LBRACE,BREAK,SEMI,RBRACE,RBRACE,RETURN,arrTemp,SEMI,RBRACE","	public static int[] shellSort(int[] arr){
,		arrTemp = arr.clone();
,		int dis = arrTemp.length;
,		while(true){
,			dis = dis<MASK>2;
,			for(int x=0; x<dis; x++){
,				for(int i=x+dis; i<arrTemp.length; i=i+dis){
,					int temp = arrTemp[i];
,					int j;
,					for(j=i-dis; j>=0 && arrTemp[j]>temp; j=j-dis){
,						arrTemp[j+dis] = arrTemp[j];
,					}
,					arrTemp[j+dis] = temp;
,				}
,			}
,			if(dis == 1){
,				break;
,			}
,		}
,		return arrTemp;
,	}
"
bb99f4c1-f6e4-4451-9385-5b7ab901572f,93079391-28c9-4fd7-9012-c6f7ea379ed3,GTEQ,"MONKEYS_AT,Test,PUBLIC,void,testListTubesWatched,LPAREN,RPAREN,THROWS,Exception,LBRACE,List,LT,String,GT,res,EQ,client,DOT,listTubesWatched,LPAREN,RPAREN,SEMI,Assert,DOT,assertTrue,LPAREN,res,DOT,size,LPAREN,RPAREN,<MASK>,1,RPAREN,SEMI,RBRACE","    @Test
,    public void testListTubesWatched() throws Exception
,    {
,        List<String> res = client.listTubesWatched();
,        Assert.assertTrue(res.size() <MASK> 1);
,    }
"
5a46c095-9521-436c-a318-549924400888,515ffa84-9cd9-4efe-a0bf-2bd1a5b4a11d,PERCENT,"PRIVATE,STATIC,String,popLiteral,LPAREN,String,input,RPAREN,LBRACE,String,result,EQ,null,SEMI,IF,LPAREN,input,DOT,charAt,LPAREN,0,RPAREN,EQEQ,"",RPAREN,LBRACE,int,pos,EQ,0,SEMI,boolean,escaped,EQ,false,SEMI,DO,LBRACE,pos,EQ,input,DOT,indexOf,LPAREN,""\"""",COMMA,pos,PLUS,1,RPAREN,SEMI,IF,LPAREN,pos,GT,1,RPAREN,LBRACE,escaped,EQ,input,DOT,charAt,LPAREN,pos,SUB,1,RPAREN,EQEQ,\,SEMI,IF,LPAREN,escaped,RPAREN,LBRACE,int,rew,EQ,pos,SUB,1,SEMI,WHILE,LPAREN,rew,GT,0,AMPAMP,input,DOT,charAt,LPAREN,rew,RPAREN,EQEQ,\,RPAREN,LBRACE,rew,SUBSUB,SEMI,RBRACE,escaped,EQ,LPAREN,pos,SUB,1,SUB,rew,RPAREN,<MASK>,2,EQEQ,1,SEMI,RBRACE,RBRACE,RBRACE,WHILE,LPAREN,escaped,AMPAMP,pos,GT,0,RPAREN,SEMI,IF,LPAREN,pos,GT,0,RPAREN,LBRACE,result,EQ,input,DOT,substring,LPAREN,0,COMMA,pos,PLUS,1,RPAREN,SEMI,IF,LPAREN,input,DOT,length,LPAREN,RPAREN,GT,pos,RPAREN,LBRACE,IF,LPAREN,input,DOT,charAt,LPAREN,pos,PLUS,1,RPAREN,EQEQ,@,RPAREN,LBRACE,input,EQ,input,DOT,substring,LPAREN,pos,PLUS,1,RPAREN,SEMI,String,LBRACKET,RBRACKET,parts,EQ,input,DOT,split,LPAREN,""\\s"",COMMA,2,RPAREN,SEMI,result,PLUSEQ,parts,LBRACKET,0,RBRACKET,SEMI,RBRACE,ELSE,IF,LPAREN,input,DOT,charAt,LPAREN,pos,PLUS,1,RPAREN,EQEQ,^,RPAREN,LBRACE,IF,LPAREN,input,DOT,charAt,LPAREN,pos,PLUS,2,RPAREN,EQEQ,^,RPAREN,LBRACE,input,EQ,input,DOT,substring,LPAREN,pos,PLUS,3,RPAREN,SEMI,String,uri,EQ,NQuad,DOT,popUri,LPAREN,input,RPAREN,SEMI,result,PLUSEQ,""^^"",PLUS,uri,SEMI,RBRACE,RBRACE,RBRACE,RBRACE,ELSE,LBRACE,result,EQ,null,SEMI,RBRACE,RBRACE,RETURN,result,SEMI,RBRACE","	private static String popLiteral(String input) {
,		String result = null;
,		if (input.charAt(0) == '""') {
,			int pos = 0;
,			boolean escaped = false;
,			do {
,				pos = input.indexOf(""\"""", pos + 1);
,				if (pos > 1) {
,					escaped = input.charAt(pos - 1) == '\\';
,					if (escaped) {
,						int rew = pos - 1;
,						while (rew > 0 && input.charAt(rew) == '\\') {
,							rew--;
,						}
,						// check for odd number of escape symbols
,						escaped = (pos - 1 - rew) <MASK> 2 == 1;
,					}
,				}
,			} while (escaped && pos > 0);
,			if (pos > 0) {
,				result = input.substring(0, pos + 1);
,				if (input.length() > pos) {
,					if (input.charAt(pos + 1) == '@') {
,						input = input.substring(pos + 1);
,						String[] parts = input.split(""\\s"", 2);
,						result += parts[0];
,					} else if (input.charAt(pos + 1) == '^') {
,						if (input.charAt(pos + 2) == '^') {
,							// get uriRef
,							input = input.substring(pos + 3);
,							String uri = NQuad.popUri(input);
,							result += ""^^"" + uri;
,						}
,					}
,				}
,			} else {
,				result = null;
,			}
,		}
,		return result;
,	}
"
bb115c2b-93d3-4fea-80dd-cc21e3473e7b,ec422ed0-96d1-492a-802f-b00b8c34e52a,GT,"PUBLIC,void,addRecord,LPAREN,HighscoreRecord,record,RPAREN,LBRACE,_records,DOT,add,LPAREN,record,RPAREN,SEMI,Collections,DOT,sort,LPAREN,_records,RPAREN,SEMI,IF,LPAREN,_records,DOT,size,LPAREN,RPAREN,<MASK>,RECORDS,RPAREN,LBRACE,_records,DOT,removeAll,LPAREN,_records,DOT,subList,LPAREN,RECORDS,COMMA,_records,DOT,size,LPAREN,RPAREN,RPAREN,RPAREN,SEMI,RBRACE,RBRACE","	public void addRecord(HighscoreRecord record) {
,		_records.add(record);
,		Collections.sort(_records);
,		
,		// if the table contains more then RECORDS elements
,		if (_records.size() <MASK> RECORDS) {
,			_records.removeAll(_records.subList(RECORDS, _records.size()));
,		}
,	}
"
6c241594-f2fc-4996-bfc9-c7ef863c220a,34795482-19f0-472e-889e-a480066b405d,LTEQ,"PUBLIC,STATIC,int,LBRACKET,RBRACKET,getLanguages,LPAREN,Device,dev,RPAREN,THROWS,IOException,LBRACE,byte,buf,LBRACKET,RBRACKET,EQ,null,SEMI,TRY,LBRACE,buf,EQ,getStandardDescriptor,LPAREN,dev,COMMA,Descriptor,DOT,TYPE_STRING,COMMA,LPAREN,byte,RPAREN,0,COMMA,0,COMMA,256,RPAREN,SEMI,RBRACE,CATCH,LPAREN,USBException,e,RPAREN,LBRACE,IF,LPAREN,BANG,e,DOT,isStalled,LPAREN,RPAREN,RPAREN,THROW,e,SEMI,RBRACE,IF,LPAREN,buf,EQEQ,null,BARBAR,buf,DOT,length,LT,4,RPAREN,RETURN,null,SEMI,int,len,EQ,ff,AMP,buf,LBRACKET,0,RBRACKET,SEMI,len,GTGTEQ,1,SEMI,len,SUBEQ,1,SEMI,IF,LPAREN,len,<MASK>,0,RPAREN,RETURN,null,SEMI,int,retval,LBRACKET,RBRACKET,EQ,NEW,int,LBRACKET,len,RBRACKET,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,len,SEMI,i,PLUSPLUS,RPAREN,LBRACE,int,offset,EQ,2,PLUS,LPAREN,2,STAR,i,RPAREN,SEMI,retval,LBRACKET,i,RBRACKET,EQ,ff,AMP,buf,LBRACKET,offset,RBRACKET,SEMI,retval,LBRACKET,i,RBRACKET,PLUSEQ,LPAREN,ff,AMP,buf,LBRACKET,offset,PLUS,1,RBRACKET,RPAREN,LTLT,8,SEMI,RBRACE,RETURN,retval,SEMI,RBRACE","    public static int [] getLanguages (Device dev)
,    throws IOException
,    {
,	byte buf [] = null;
,
,	try {
,	    buf = getStandardDescriptor (dev,
,		Descriptor.TYPE_STRING,
,		(byte) 0, 0, 256);
,	} catch (USBException e) {
,	    // devices without strings stall here
,	    if (!e.isStalled ())
,		throw e;
,	}
,	if (buf == null || buf.length <4)
,	    return null;
,
,	int len = 0xff & buf [0];
,	len >>= 1;
,	len -= 1;
,	if (len <MASK> 0)
,	    return null;
,
,	int retval [] = new int [len];
,	for (int i = 0; i < len; i++) {
,	    int offset = 2 + (2 * i);
,	    retval [i] = 0xff & buf [offset];
,	    retval [i] += (0xff & buf [offset + 1]) << 8;
,	}
,	return retval;
,    }
"
7bd76208-9b34-4151-9ec4-57c6c52e0fcf,93d2643c-9e52-494d-af74-f1049e508610,GTEQ,"PUBLIC,String,findLocalName,LPAREN,int,slot,COMMA,int,pc,RPAREN,LBRACE,FOR,LPAREN,int,index,EQ,0,SEMI,index,LT,locals,DOT,length,SEMI,index,PLUSPLUS,RPAREN,LBRACE,LocalVar,local,EQ,locals,LBRACKET,index,RBRACKET,SEMI,IF,LPAREN,local,DOT,start,GT,pc,RPAREN,BREAK,SEMI,IF,LPAREN,local,DOT,end,<MASK>,pc,AMPAMP,slot,SUBSUB,EQEQ,0,RPAREN,RETURN,local,DOT,name,SEMI,RBRACE,RETURN,null,SEMI,RBRACE","	public String findLocalName( int slot, int pc ){
,		for ( int index = 0; index < locals.length; index++ ){
,			LocalVar local = locals[index];
,			
,			if ( local.start > pc )
,				break;
,			
,			if ( local.end <MASK> pc && slot-- == 0 )
,				return local.name;
,		}
,			
,		return null;
,	}
"
09478113-8f39-4146-870b-8037a6932443,2366b48e-c035-4e66-b342-e928286fd405,EQEQ,"PRIVATE,void,OP_LAX,LPAREN,RPAREN,LBRACE,int,iMem,EQ,readOperand,LPAREN,RPAREN,SEMI,setZFlag,LPAREN,iMem,<MASK>,0,RPAREN,SEMI,setNFlag,LPAREN,getBit,LPAREN,iMem,COMMA,7,RPAREN,RPAREN,SEMI,setA,LPAREN,iMem,RPAREN,SEMI,setX,LPAREN,iMem,RPAREN,SEMI,RBRACE","    private void OP_LAX()
,    {
,        // TODO CHECK
,        int iMem = readOperand();
,
,        setZFlag(iMem <MASK> 0);
,        setNFlag(getBit(iMem, 7));
,
,        setA(iMem);
,        setX(iMem);
,    }
"
7adec7d8-cee7-4225-a9f6-43a8dd4e76a6,7086ff68-b24e-403c-b583-254a6310d9c0,STAR,"PRIVATE,int,getUnit,LPAREN,String,product,COMMA,double,entryPrice,COMMA,double,stopPrice,RPAREN,LBRACE,double,r,EQ,Math,DOT,abs,LPAREN,entryPrice,SUB,stopPrice,RPAREN,SEMI,double,point,EQ,CurrencyTable,DOT,getPoint,LPAREN,product,RPAREN,SEMI,double,valuePerPoint,EQ,CurrencyTable,DOT,getValuePerPoint,LPAREN,product,RPAREN,SEMI,double,balance,EQ,order,DOT,getAccount,LPAREN,RPAREN,DOT,getBalance,LPAREN,RPAREN,SEMI,int,unit,EQ,LPAREN,int,RPAREN,LPAREN,0.01,<MASK>,balance,SLASH,valuePerPoint,SLASH,LPAREN,r,SLASH,point,RPAREN,RPAREN,SEMI,RETURN,unit,SEMI,RBRACE","    private int getUnit(String product, double entryPrice, double stopPrice) {
,        double r = Math.abs(entryPrice - stopPrice);
,        double point = CurrencyTable.getPoint(product);
,        double valuePerPoint = CurrencyTable.getValuePerPoint(product);
,        double balance = order.getAccount().getBalance();
,        int unit = (int) (0.01 <MASK> balance / valuePerPoint / (r/point));
,        return unit;
,    }
"
5883a93b-9479-4dd3-81f5-15604dababbe,a6a47b4c-3725-49d7-ab1e-88e9bd81c251,SLASH,"STATIC,boolean,checkTest,LPAREN,Test,test,RPAREN,LBRACE,ByteArrayOutputStream,out,EQ,NEW,ByteArrayOutputStream,LPAREN,RPAREN,SEMI,System,DOT,setOut,LPAREN,NEW,PrintStream,LPAREN,out,RPAREN,RPAREN,SEMI,String,sType,EQ,NEW,String,LBRACKET,RBRACKET,LBRACE,""-i"",COMMA,""-d"",COMMA,""-bi"",RBRACE,LBRACKET,test,DOT,type,RBRACKET,SEMI,TRY,LBRACE,GenericParser,DOT,main,LPAREN,NEW,String,LBRACKET,RBRACKET,LBRACE,sType,COMMA,test,DOT,expr,RBRACE,RPAREN,SEMI,RBRACE,CATCH,LPAREN,Throwable,e,RPAREN,LBRACE,System,DOT,err,DOT,println,LPAREN,""throwable object has been thrown on test:"",RPAREN,SEMI,System,DOT,err,DOT,println,LPAREN,test,DOT,expr,RPAREN,SEMI,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RETURN,false,SEMI,RBRACE,Object,LBRACKET,RBRACKET,LBRACKET,RBRACKET,ans,EQ,test,DOT,answer,SEMI,Scanner,scanner,EQ,NEW,Scanner,LPAREN,NEW,ByteArrayInputStream,LPAREN,out,DOT,toByteArray,LPAREN,RPAREN,RPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,ans,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,FOR,LPAREN,int,j,EQ,0,SEMI,j,LT,ans,LBRACKET,i,RBRACKET,DOT,length,SEMI,j,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,BANG,scanner,DOT,hasNext,LPAREN,RPAREN,RPAREN,LBRACE,System,DOT,err,DOT,println,LPAREN,""not enough tokens in output for test:"",RPAREN,SEMI,System,DOT,err,DOT,println,LPAREN,sType,PLUS,"" "",PLUS,test,DOT,expr,RPAREN,SEMI,RETURN,false,SEMI,RBRACE,String,token,EQ,scanner,DOT,next,LPAREN,RPAREN,SEMI,int,xValue,EQ,i,SUB,100,SEMI,int,yValue,EQ,j,SUB,100,SEMI,IF,LPAREN,ans,LBRACKET,i,RBRACKET,LBRACKET,j,RBRACKET,EQEQ,null,RPAREN,LBRACE,IF,LPAREN,BANG,token,DOT,equals,LPAREN,""error"",RPAREN,RPAREN,LBRACE,System,DOT,err,DOT,println,LPAREN,String,DOT,format,LPAREN,""error message expected, x = %d, y = %d, on test:\n"",COMMA,xValue,COMMA,yValue,RPAREN,RPAREN,SEMI,System,DOT,err,DOT,println,LPAREN,sType,PLUS,"" "",PLUS,test,DOT,expr,RPAREN,SEMI,RETURN,false,SEMI,RBRACE,RBRACE,ELSE,IF,LPAREN,ans,LBRACKET,i,RBRACKET,LBRACKET,j,RBRACKET,INSTANCEOF,Integer,RPAREN,LBRACE,int,x,SEMI,TRY,LBRACE,x,EQ,Integer,DOT,parseInt,LPAREN,token,RPAREN,SEMI,RBRACE,CATCH,LPAREN,NumberFormatException,e,RPAREN,LBRACE,System,DOT,err,DOT,println,LPAREN,""couldn't parse int: "",PLUS,token,RPAREN,SEMI,System,DOT,err,DOT,println,LPAREN,String,DOT,format,LPAREN,""x = %d, y = %d\n"",COMMA,xValue,COMMA,yValue,RPAREN,RPAREN,SEMI,System,DOT,err,DOT,println,LPAREN,sType,PLUS,"" "",PLUS,test,DOT,expr,RPAREN,SEMI,RETURN,false,SEMI,RBRACE,IF,LPAREN,LPAREN,Integer,RPAREN,ans,LBRACKET,i,RBRACKET,LBRACKET,j,RBRACKET,BANGEQ,x,RPAREN,LBRACE,System,DOT,err,DOT,println,LPAREN,String,DOT,format,LPAREN,""expected %d, found %d, x = %d, y = %d, on test:"",COMMA,LPAREN,Integer,RPAREN,ans,LBRACKET,i,RBRACKET,LBRACKET,j,RBRACKET,COMMA,x,COMMA,xValue,COMMA,yValue,RPAREN,RPAREN,SEMI,System,DOT,err,DOT,println,LPAREN,sType,PLUS,"" "",PLUS,test,DOT,expr,RPAREN,SEMI,RETURN,false,SEMI,RBRACE,RBRACE,ELSE,IF,LPAREN,ans,LBRACKET,i,RBRACKET,LBRACKET,j,RBRACKET,INSTANCEOF,Double,RPAREN,LBRACE,double,x,SEMI,TRY,LBRACE,x,EQ,Double,DOT,parseDouble,LPAREN,token,RPAREN,SEMI,RBRACE,CATCH,LPAREN,NumberFormatException,e,RPAREN,LBRACE,System,DOT,err,DOT,println,LPAREN,""couldn't parse double: "",PLUS,token,RPAREN,SEMI,System,DOT,err,DOT,println,LPAREN,String,DOT,format,LPAREN,""x = %d, y = %d\n"",COMMA,xValue,COMMA,yValue,RPAREN,RPAREN,SEMI,System,DOT,err,DOT,println,LPAREN,sType,PLUS,"" "",PLUS,test,DOT,expr,RPAREN,SEMI,RETURN,false,SEMI,RBRACE,double,value,EQ,LPAREN,Double,RPAREN,ans,LBRACKET,i,RBRACKET,LBRACKET,j,RBRACKET,SEMI,boolean,bad,EQ,true,SEMI,IF,LPAREN,value,EQEQ,x,RPAREN,LBRACE,bad,EQ,false,SEMI,RBRACE,ELSE,IF,LPAREN,Double,DOT,isNaN,LPAREN,value,RPAREN,RPAREN,LBRACE,IF,LPAREN,Double,DOT,isNaN,LPAREN,x,RPAREN,RPAREN,LBRACE,bad,EQ,false,SEMI,RBRACE,RBRACE,ELSE,IF,LPAREN,Double,DOT,isInfinite,LPAREN,value,RPAREN,RPAREN,LBRACE,IF,LPAREN,x,BANGEQ,value,RPAREN,LBRACE,bad,EQ,false,SEMI,RBRACE,RBRACE,ELSE,IF,LPAREN,Double,DOT,isNaN,LPAREN,x,RPAREN,BARBAR,Double,DOT,isNaN,LPAREN,value,RPAREN,RPAREN,LBRACE,RBRACE,ELSE,IF,LPAREN,Math,DOT,abs,LPAREN,x,SUB,value,RPAREN,<MASK>,Math,DOT,max,LPAREN,1.,COMMA,Math,DOT,abs,LPAREN,x,RPAREN,RPAREN,LT,1e-4,RPAREN,LBRACE,bad,EQ,false,SEMI,RBRACE,IF,LPAREN,bad,RPAREN,LBRACE,System,DOT,err,DOT,println,LPAREN,String,DOT,format,LPAREN,""expected %f, found %f, x = %d, y = %d, on test:"",COMMA,LPAREN,Double,RPAREN,ans,LBRACKET,i,RBRACKET,LBRACKET,j,RBRACKET,COMMA,x,COMMA,xValue,COMMA,yValue,RPAREN,RPAREN,SEMI,System,DOT,err,DOT,println,LPAREN,sType,PLUS,"" "",PLUS,test,DOT,expr,RPAREN,SEMI,RETURN,false,SEMI,RBRACE,RBRACE,ELSE,LBRACE,BigInteger,x,SEMI,TRY,LBRACE,x,EQ,NEW,BigInteger,LPAREN,token,RPAREN,SEMI,RBRACE,CATCH,LPAREN,NumberFormatException,e,RPAREN,LBRACE,System,DOT,err,DOT,println,LPAREN,""couldn't parse BigInteger: "",PLUS,token,RPAREN,SEMI,System,DOT,err,DOT,println,LPAREN,String,DOT,format,LPAREN,""x = %d, y = %d\n"",COMMA,xValue,COMMA,yValue,RPAREN,RPAREN,SEMI,System,DOT,err,DOT,println,LPAREN,sType,PLUS,"" "",PLUS,test,DOT,expr,RPAREN,SEMI,RETURN,false,SEMI,RBRACE,IF,LPAREN,BANG,ans,LBRACKET,i,RBRACKET,LBRACKET,j,RBRACKET,DOT,equals,LPAREN,x,RPAREN,RPAREN,LBRACE,System,DOT,err,DOT,println,LPAREN,String,DOT,format,LPAREN,""expected %d, found %d, x = %d, y = %d, on test:"",COMMA,LPAREN,BigInteger,RPAREN,ans,LBRACKET,i,RBRACKET,LBRACKET,j,RBRACKET,COMMA,x,COMMA,xValue,COMMA,yValue,RPAREN,RPAREN,SEMI,System,DOT,err,DOT,println,LPAREN,sType,PLUS,"" "",PLUS,test,DOT,expr,RPAREN,SEMI,RETURN,false,SEMI,RBRACE,RBRACE,RBRACE,RBRACE,RETURN,true,SEMI,RBRACE","    static boolean checkTest(Test test) {
,        ByteArrayOutputStream out = new ByteArrayOutputStream();
,        System.setOut(new PrintStream(out));
,        String sType = new String[]{""-i"", ""-d"", ""-bi""}[test.type];
,        try {
,            GenericParser.main(new String[]{sType, test.expr});
,        } catch (Throwable e) {
,            System.err.println(""throwable object has been thrown on test:"");
,            System.err.println(test.expr);
,            e.printStackTrace();
,            return false;
,        }
,        Object[][] ans = test.answer;
,        Scanner scanner = new Scanner(new ByteArrayInputStream(out.toByteArray()));
,        for (int i = 0; i < ans.length; i++) {
,            for (int j = 0; j < ans[i].length; j++) {
,                if (!scanner.hasNext()) {
,                    System.err.println(""not enough tokens in output for test:"");
,                    System.err.println(sType + "" "" + test.expr);
,                    return false;
,                }
,                String token = scanner.next();
,                int xValue = i - 100;
,                int yValue = j - 100;
,                if (ans[i][j] == null) {
,                    if (!token.equals(""error"")) {
,                        System.err.println(String.format(""error message expected, x = %d, y = %d, on test:\n"", xValue, yValue));
,                        System.err.println(sType + "" "" + test.expr);
,                        return false;
,                    }
,                } else if (ans[i][j] instanceof Integer) {
,                    int x;
,                    try {
,                        x = Integer.parseInt(token);
,                    } catch (NumberFormatException e) {
,                        System.err.println(""couldn't parse int: "" + token);
,                        System.err.println(String.format(""x = %d, y = %d\n"", xValue, yValue));
,                        System.err.println(sType + "" "" + test.expr);
,                        return false;
,                    }
,                    if ((Integer) ans[i][j] != x) {
,                        System.err.println(String.format(""expected %d, found %d, x = %d, y = %d, on test:"", (Integer) ans[i][j], x, xValue, yValue));
,                        System.err.println(sType + "" "" + test.expr);
,                        return false;
,                    }
,                } else if (ans[i][j] instanceof Double) {
,                    double x;
,                    try {
,                        x = Double.parseDouble(token);
,                    } catch (NumberFormatException e) {
,                        System.err.println(""couldn't parse double: "" + token);
,                        System.err.println(String.format(""x = %d, y = %d\n"", xValue, yValue));
,                        System.err.println(sType + "" "" + test.expr);
,                        return false;
,                    }
,                    double value = (Double) ans[i][j];
,                    boolean bad = true;
,                    if (value == x) {
,                        bad = false;
,                    } else if (Double.isNaN(value)) {
,                        if (Double.isNaN(x)) {
,                            bad = false;
,                        }
,                    } else if (Double.isInfinite(value)) {
,                        if (x != value) {
,                            bad = false;
,                        }
,                    } else if (Double.isNaN(x) || Double.isNaN(value)) {
,
,                    } else if (Math.abs(x - value) <MASK> Math.max(1., Math.abs(x)) < 1e-4) {
,                        bad = false;
,                    }
,                    if (bad) {
,                        System.err.println(String.format(""expected %f, found %f, x = %d, y = %d, on test:"", (Double) ans[i][j], x, xValue, yValue));
,                        System.err.println(sType + "" "" + test.expr);
,                        return false;
,                    }
,                } else {
,                    BigInteger x;
,                    try {
,                        x = new BigInteger(token);
,                    } catch (NumberFormatException e) {
,                        System.err.println(""couldn't parse BigInteger: "" + token);
,                        System.err.println(String.format(""x = %d, y = %d\n"", xValue, yValue));
,                        System.err.println(sType + "" "" + test.expr);
,                        return false;
,                    }
,                    if (!ans[i][j].equals(x)) {
,                        System.err.println(String.format(""expected %d, found %d, x = %d, y = %d, on test:"", (BigInteger) ans[i][j], x, xValue, yValue));
,                        System.err.println(sType + "" "" + test.expr);
,                        return false;
,                    }
,                }
,            }
,        }
,        return true;
,    }
"
ab6b11e7-9e21-4611-901d-21ca99a5907d,686e725a-0a12-407c-8dec-26f30684fe4d,SLASH,"PROTECTED,FINAL,boolean,isMaxRaCollision,LPAREN,RPAREN,LBRACE,RETURN,LPAREN,raUser,PLUS,sizeArray,LBRACKET,0,RBRACKET,<MASK>,2.0,GTEQ,SimpleSpectralAccessProtocolLibrary,DOT,MAX_VALUE_FOR_RIGHT_ASCENSION,RPAREN,QUES,true,COLON,false,SEMI,RBRACE","  protected final boolean isMaxRaCollision() {
,    return (raUser + sizeArray[0] <MASK> 2.0 >= SimpleSpectralAccessProtocolLibrary.MAX_VALUE_FOR_RIGHT_ASCENSION) ? true : false;
,  }
"
f29c7bcc-9c8d-4d8e-b365-55dc60e2d53e,4301171b-7349-4940-a399-d14e1d517677,GTEQ,"PUBLIC,production,LPAREN,non_terminal,lhs_sym,COMMA,production_part,rhs_parts,LBRACKET,RBRACKET,COMMA,int,rhs_l,COMMA,String,action_str,RPAREN,THROWS,internal_error,LBRACE,int,i,SEMI,action_part,tail_action,SEMI,String,declare_str,SEMI,int,rightlen,EQ,rhs_l,SEMI,IF,LPAREN,rhs_l,<MASK>,0,RPAREN,_rhs_length,EQ,rhs_l,SEMI,ELSE,IF,LPAREN,rhs_parts,BANGEQ,null,RPAREN,_rhs_length,EQ,rhs_parts,DOT,length,SEMI,ELSE,_rhs_length,EQ,0,SEMI,IF,LPAREN,lhs_sym,EQEQ,null,RPAREN,THROW,NEW,internal_error,LPAREN,""Attempt to construct a production with a null LHS"",RPAREN,SEMI,IF,LPAREN,rhs_l,GT,0,RPAREN,LBRACE,IF,LPAREN,rhs_parts,LBRACKET,rhs_l,SUB,1,RBRACKET,DOT,is_action,LPAREN,RPAREN,RPAREN,LBRACE,rightlen,EQ,rhs_l,SUB,1,SEMI,RBRACE,ELSE,LBRACE,rightlen,EQ,rhs_l,SEMI,RBRACE,RBRACE,declare_str,EQ,declare_labels,LPAREN,rhs_parts,COMMA,rightlen,COMMA,action_str,RPAREN,SEMI,IF,LPAREN,action_str,EQEQ,null,RPAREN,action_str,EQ,declare_str,SEMI,ELSE,action_str,EQ,declare_str,PLUS,action_str,SEMI,lhs_sym,DOT,note_use,LPAREN,RPAREN,SEMI,_lhs,EQ,NEW,symbol_part,LPAREN,lhs_sym,RPAREN,SEMI,_rhs_length,EQ,merge_adjacent_actions,LPAREN,rhs_parts,COMMA,_rhs_length,RPAREN,SEMI,tail_action,EQ,strip_trailing_action,LPAREN,rhs_parts,COMMA,_rhs_length,RPAREN,SEMI,IF,LPAREN,tail_action,BANGEQ,null,RPAREN,_rhs_length,SUBSUB,SEMI,_rhs,EQ,NEW,production_part,LBRACKET,_rhs_length,RBRACKET,SEMI,FOR,LPAREN,i,EQ,0,SEMI,i,LT,_rhs_length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,_rhs,LBRACKET,i,RBRACKET,EQ,rhs_parts,LBRACKET,i,RBRACKET,SEMI,IF,LPAREN,BANG,_rhs,LBRACKET,i,RBRACKET,DOT,is_action,LPAREN,RPAREN,RPAREN,LBRACE,LPAREN,LPAREN,symbol_part,RPAREN,_rhs,LBRACKET,i,RBRACKET,RPAREN,DOT,the_symbol,LPAREN,RPAREN,DOT,note_use,LPAREN,RPAREN,SEMI,IF,LPAREN,LPAREN,LPAREN,symbol_part,RPAREN,_rhs,LBRACKET,i,RBRACKET,RPAREN,DOT,the_symbol,LPAREN,RPAREN,INSTANCEOF,terminal,RPAREN,LBRACE,_rhs_prec,EQ,LPAREN,LPAREN,terminal,RPAREN,LPAREN,LPAREN,symbol_part,RPAREN,_rhs,LBRACKET,i,RBRACKET,RPAREN,DOT,the_symbol,LPAREN,RPAREN,RPAREN,DOT,precedence_num,LPAREN,RPAREN,SEMI,_rhs_assoc,EQ,LPAREN,LPAREN,terminal,RPAREN,LPAREN,LPAREN,symbol_part,RPAREN,_rhs,LBRACKET,i,RBRACKET,RPAREN,DOT,the_symbol,LPAREN,RPAREN,RPAREN,DOT,precedence_side,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,IF,LPAREN,action_str,EQEQ,null,RPAREN,action_str,EQ,"""",SEMI,IF,LPAREN,tail_action,BANGEQ,null,AMPAMP,tail_action,DOT,code_string,LPAREN,RPAREN,BANGEQ,null,RPAREN,action_str,EQ,action_str,PLUS,""\t\t"",PLUS,tail_action,DOT,code_string,LPAREN,RPAREN,SEMI,_action,EQ,NEW,action_part,LPAREN,action_str,RPAREN,SEMI,remove_embedded_actions,LPAREN,RPAREN,SEMI,_index,EQ,next_index,PLUSPLUS,SEMI,_all,DOT,put,LPAREN,NEW,Integer,LPAREN,_index,RPAREN,COMMA,this,RPAREN,SEMI,lhs_sym,DOT,add_production,LPAREN,this,RPAREN,SEMI,RBRACE","  public production(
,    non_terminal    lhs_sym, 
,    production_part rhs_parts[], 
,    int             rhs_l,
,    String          action_str)
,    throws internal_error
,    {
,      int         i;
,      action_part tail_action;
,      String declare_str;
,      int rightlen = rhs_l;
,
,      /* remember the length */
,      if (rhs_l <MASK> 0)
,	_rhs_length = rhs_l;
,      else if (rhs_parts != null)
,	_rhs_length = rhs_parts.length;
,      else
,	_rhs_length = 0;
,	
,      /* make sure we have a valid left-hand-side */
,      if (lhs_sym == null) 
,	throw new internal_error(
,	  ""Attempt to construct a production with a null LHS"");
,
,      /* I'm not translating labels anymore, I'm adding code to declare
,	 labels as valid variables.  This way, the users code string is
,	 untouched 
,	 6/96 frankf */
,
,      /* check if the last part of the right hand side is an action.  If
,         it is, it won't be on the stack, so we don't want to count it 
,	 in the rightlen.  Then when we search down the stack for a
,         Symbol, we don't try to search past action */
,
,      if (rhs_l > 0) {
,	if (rhs_parts[rhs_l - 1].is_action()) {
,	  rightlen = rhs_l - 1;
,	} else {
,	  rightlen = rhs_l;
,	}
,      }
,
,      /* get the generated declaration code for the necessary labels. */
,      declare_str = declare_labels(
,		    rhs_parts, rightlen, action_str);
,
,      if (action_str == null) 
,	action_str = declare_str;
,      else 
,	action_str = declare_str + action_str;	 	  
,
,      /* count use of lhs */
,      lhs_sym.note_use();
,
,      /* create the part for left-hand-side */
,      _lhs = new symbol_part(lhs_sym);
,
,      /* merge adjacent actions (if any) */
,      _rhs_length = merge_adjacent_actions(rhs_parts, _rhs_length);
,
,      /* strip off any trailing action */
,      tail_action = strip_trailing_action(rhs_parts, _rhs_length);
,      if (tail_action != null) _rhs_length--;
,
,      /* Why does this run through the right hand side happen
,	 over and over?  here a quick combination of two 
,	 prior runs plus one I wanted of my own
,	 frankf 6/25/96 */
,      /* allocate and copy over the right-hand-side */
,      /* count use of each rhs symbol */
,      _rhs = new production_part[_rhs_length];
,      for (i=0; i<_rhs_length; i++) {
,	_rhs[i] = rhs_parts[i];
,	if (!_rhs[i].is_action()) {
,	  ((symbol_part)_rhs[i]).the_symbol().note_use();
,	  if (((symbol_part)_rhs[i]).the_symbol() instanceof terminal) {
,	    _rhs_prec = 
,	      ((terminal)((symbol_part)_rhs[i]).the_symbol()).precedence_num();
,	    _rhs_assoc = 
,	      ((terminal)((symbol_part)_rhs[i]).the_symbol()).precedence_side();
,	  }
,	}
,      }
,
,      /*now action string is really declaration string, so put it in front!
,	6/14/96 frankf */
,      if (action_str == null) action_str = """";
,      if (tail_action != null && tail_action.code_string() != null)
,	action_str = action_str + ""\t\t"" +  tail_action.code_string();
,
,      /* stash the action */
,      _action = new action_part(action_str);
,
,      /* rewrite production to remove any embedded actions */
,      remove_embedded_actions();
,
,      /* assign an index */
,      _index = next_index++;
,
,      /* put us in the global collection of productions */
,      _all.put(new Integer(_index),this);
,
,      /* put us in the production list of the lhs non terminal */
,      lhs_sym.add_production(this);
,    }
"
3913c395-db09-4ac4-8282-49a81b6a21f4,a8018d0b-771e-466e-a0df-1246e98167ae,LT,"PUBLIC,void,add,LPAREN,GameEntity,e,RPAREN,LBRACE,IF,LPAREN,getRenderFPS,LPAREN,RPAREN,<MASK>,15,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""Won't add any more units due to limited FPS!"",RPAREN,SEMI,RETURN,SEMI,RBRACE,e,DOT,setID,LPAREN,nextId,RPAREN,SEMI,entities,DOT,put,LPAREN,nextId,PLUSPLUS,COMMA,e,RPAREN,SEMI,evBus,DOT,post,LPAREN,NEW,UnitCreationEvent,LPAREN,e,RPAREN,RPAREN,SEMI,RBRACE","	public void add(GameEntity e) {
,		if (getRenderFPS() <MASK> 15) {
,			System.out.println(""Won't add any more units due to limited FPS!"");
,			return;
,		}
,		
,		e.setID(nextId);
,		entities.put(nextId++, e);
,		evBus.post(new UnitCreationEvent(e));
,	}
"
1b82c97a-fe19-4584-bdbc-4f13bb123c10,b9887ba1-6089-4238-9da5-b2252a4103d9,STAR,"PUBLIC,STATIC,double,SQR,LPAREN,FINAL,double,a,RPAREN,LBRACE,RETURN,a,<MASK>,a,SEMI,RBRACE","    public static double SQR(final double a) {
,        return a <MASK> a;
,    }
"
a4c68a60-241d-4ccc-bb34-58eb273247fe,bd4f51bc-9b1d-4a7a-a0aa-4375749f7e8c,PLUS,"MONKEYS_AT,Override,PUBLIC,int,hashCode,LPAREN,RPAREN,LBRACE,int,result,EQ,hgPath,BANGEQ,null,QUES,hgPath,DOT,hashCode,LPAREN,RPAREN,COLON,0,SEMI,result,EQ,31,STAR,result,<MASK>,LPAREN,folder,BANGEQ,null,QUES,folder,DOT,hashCode,LPAREN,RPAREN,COLON,0,RPAREN,SEMI,RETURN,result,SEMI,RBRACE","	@Override public int hashCode() {
,		int result = hgPath != null ? hgPath.hashCode() : 0;
,		result = 31 * result <MASK> (folder != null ? folder.hashCode() : 0);
,		return result;
,	}
"
2170437a-9f53-47a2-b3cb-257eca2eb4ab,a3337b44-125d-4a3f-ace3-2c04af95343d,EQEQ,"PUBLIC,STATIC,DataAccess,createDataAccess,LPAREN,RPAREN,LBRACE,IF,LPAREN,dataAccessService,<MASK>,null,RPAREN,LBRACE,dataAccessService,EQ,NEW,DataAccessObject,LPAREN,Main,DOT,dbNameReal,RPAREN,SEMI,dataAccessService,DOT,open,LPAREN,RPAREN,SEMI,RBRACE,RETURN,dataAccessService,SEMI,RBRACE","	public static DataAccess createDataAccess()
,	{
,		if (dataAccessService <MASK> null)
,		{
,			dataAccessService = new DataAccessObject(Main.dbNameReal);
,			dataAccessService.open();
,		}
,		return dataAccessService;
,	}
"
7b37a4d3-9846-4b12-9860-e336321ade31,188bcdf5-9165-4f73-a905-ca6b914e9beb,GT,"PUBLIC,void,abrir,LPAREN,RPAREN,THROWS,Exception,LBRACE,IF,LPAREN,id,DOT,length,LPAREN,RPAREN,<MASK>,0,AMPAMP,id,BANGEQ,""0"",RPAREN,LBRACE,long,cod,EQ,Long,DOT,parseLong,LPAREN,id,RPAREN,SEMI,IF,LPAREN,produto,EQEQ,null,BARBAR,LPAREN,produto,BANGEQ,null,AMPAMP,produto,DOT,getId,LPAREN,RPAREN,BANGEQ,cod,RPAREN,RPAREN,setProduto,LPAREN,ejb,DOT,Open,LPAREN,cod,RPAREN,RPAREN,SEMI,RBRACE,RBRACE","    public void abrir() throws Exception {
,        if(id.length() <MASK> 0 && id != ""0""){
,            long cod = Long.parseLong(id);
,            if(produto == null || (produto != null && produto.getId() != cod ) )
,                setProduto(ejb.Open(cod));
,        }
,    }
"
2170437a-9f53-47a2-b3cb-257eca2eb4ab,a5b990e7-e723-45cf-92bb-90b4d63322d8,EQEQ,"PROTECTED,void,createContents,LPAREN,RPAREN,LBRACE,shell,EQ,NEW,Shell,LPAREN,RPAREN,SEMI,shell,DOT,setSize,LPAREN,450,COMMA,80,RPAREN,SEMI,shell,DOT,setText,LPAREN,""Create New User"",RPAREN,SEMI,txtUserName,EQ,NEW,Text,LPAREN,shell,COMMA,SWT,DOT,BORDER,RPAREN,SEMI,txtUserName,DOT,setTextLimit,LPAREN,User,DOT,MAX_NAME_LENGTH,RPAREN,SEMI,txtUserName,DOT,setBounds,LPAREN,116,COMMA,7,COMMA,146,COMMA,21,RPAREN,SEMI,Label,lblEnterUserName,EQ,NEW,Label,LPAREN,shell,COMMA,SWT,DOT,NONE,RPAREN,SEMI,lblEnterUserName,DOT,setBounds,LPAREN,10,COMMA,10,COMMA,100,COMMA,15,RPAREN,SEMI,lblEnterUserName,DOT,setText,LPAREN,""Enter User Name"",RPAREN,SEMI,btnCreate,EQ,NEW,Button,LPAREN,shell,COMMA,SWT,DOT,NONE,RPAREN,SEMI,btnCreate,DOT,addSelectionListener,LPAREN,NEW,SelectionAdapter,LPAREN,RPAREN,LBRACE,MONKEYS_AT,Override,PUBLIC,void,widgetSelected,LPAREN,SelectionEvent,arg0,RPAREN,LBRACE,User,user,SEMI,TRY,LBRACE,user,EQ,NEW,User,LPAREN,txtUserName,DOT,getText,LPAREN,RPAREN,RPAREN,SEMI,userAccess,DOT,getUsers,LPAREN,RPAREN,SEMI,IF,LPAREN,userAccess,DOT,addUser,LPAREN,user,RPAREN,<MASK>,false,RPAREN,LBRACE,MyMessageBox,error,EQ,NEW,MyMessageBox,LPAREN,shell,COMMA,""Username already exists"",COMMA,""Please create a unique username."",COMMA,""OK"",RPAREN,SEMI,error,DOT,open,LPAREN,RPAREN,SEMI,RBRACE,ELSE,LBRACE,MyMessageBox,success,EQ,NEW,MyMessageBox,LPAREN,shell,COMMA,""User created"",COMMA,""User has been created."",COMMA,""OK"",RPAREN,SEMI,success,DOT,open,LPAREN,RPAREN,SEMI,shell,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,CATCH,LPAREN,IllegalArgumentException,iae,RPAREN,LBRACE,MyMessageBox,error,EQ,NEW,MyMessageBox,LPAREN,shell,COMMA,""Illegal username"",COMMA,""Make sure your username only contains alphanumeric characters."",COMMA,""OK"",RPAREN,SEMI,error,DOT,open,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,RPAREN,SEMI,btnCreate,DOT,setBounds,LPAREN,268,COMMA,5,COMMA,75,COMMA,25,RPAREN,SEMI,btnCreate,DOT,setText,LPAREN,""Create"",RPAREN,SEMI,btnCancel,EQ,NEW,Button,LPAREN,shell,COMMA,SWT,DOT,NONE,RPAREN,SEMI,btnCancel,DOT,addSelectionListener,LPAREN,NEW,SelectionAdapter,LPAREN,RPAREN,LBRACE,MONKEYS_AT,Override,PUBLIC,void,widgetSelected,LPAREN,SelectionEvent,arg0,RPAREN,LBRACE,shell,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,RPAREN,SEMI,btnCancel,DOT,setBounds,LPAREN,349,COMMA,5,COMMA,75,COMMA,25,RPAREN,SEMI,btnCancel,DOT,setText,LPAREN,""Cancel"",RPAREN,SEMI,RBRACE","	protected void createContents()
,	{
,		shell = new Shell();
,		shell.setSize(450, 80);
,		shell.setText(""Create New User"");
,		
,		txtUserName = new Text(shell, SWT.BORDER);
,		txtUserName.setTextLimit(User.MAX_NAME_LENGTH);
,		txtUserName.setBounds(116, 7, 146, 21);
,		
,		Label lblEnterUserName = new Label(shell, SWT.NONE);
,		lblEnterUserName.setBounds(10, 10, 100, 15);
,		lblEnterUserName.setText(""Enter User Name"");
,		
,		btnCreate = new Button(shell, SWT.NONE);
,		btnCreate.addSelectionListener(new SelectionAdapter() {
,			@Override
,			public void widgetSelected(SelectionEvent arg0) {
,				User user;
,				try
,				{
,					user = new User(txtUserName.getText());
,					userAccess.getUsers();
,					if (userAccess.addUser(user) <MASK> false)
,					{
,						MyMessageBox error = new MyMessageBox(shell, ""Username already exists"", ""Please create a unique username."", ""OK"");
,						error.open();
,					}
,					else
,					{
,						MyMessageBox success = new MyMessageBox(shell, ""User created"", ""User has been created."", ""OK"");
,						success.open();
,						shell.close();
,					}
,				}
,				catch (IllegalArgumentException iae)
,				{
,					MyMessageBox error = new MyMessageBox(shell, ""Illegal username"", ""Make sure your username only contains alphanumeric characters."", ""OK"");
,					error.open();
,				}
,			}
,		});
,		btnCreate.setBounds(268, 5, 75, 25);
,		btnCreate.setText(""Create"");
,		
,		btnCancel = new Button(shell, SWT.NONE);
,		btnCancel.addSelectionListener(new SelectionAdapter() {
,			@Override
,			public void widgetSelected(SelectionEvent arg0) {
,				shell.close();
,			}
,		});
,		btnCancel.setBounds(349, 5, 75, 25);
,		btnCancel.setText(""Cancel"");
,		
,	}
"
6c241594-f2fc-4996-bfc9-c7ef863c220a,bc656bb2-6dc7-4148-ac07-dec2bed02443,LTEQ,"PUBLIC,void,reset,LPAREN,int,port,RPAREN,THROWS,IOException,LBRACE,IF,LPAREN,port,<MASK>,0,BARBAR,port,GT,ports,RPAREN,THROW,NEW,IllegalArgumentException,LPAREN,RPAREN,SEMI,ControlMessage,DOT,setFeature,LPAREN,dev,COMMA,ControlMessage,DOT,TYPE_CLASS,BAR,ControlMessage,DOT,RECIPIENT_OTHER,COMMA,PORT_RESET,COMMA,port,RPAREN,SEMI,RBRACE","    public void reset (int port)
,    throws IOException
,    {
,	if (port <MASK> 0 || port > ports)
,	    throw new IllegalArgumentException ();
,	ControlMessage.setFeature (dev,
,	    ControlMessage.TYPE_CLASS | ControlMessage.RECIPIENT_OTHER,
,	    PORT_RESET,
,	    port
,	    );
,    }
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,6f4009b6-50e2-4fc9-ae68-66d770151762,BANGEQ,"PUBLIC,STATIC,LineEquation,lineEqCompute,LPAREN,int,x1,COMMA,int,y1,COMMA,int,x2,COMMA,int,y2,RPAREN,LBRACE,double,LBRACKET,RBRACKET,arr,EQ,NEW,double,LBRACKET,7,RBRACKET,SEMI,IF,LPAREN,x1,SUB,x2,<MASK>,0,RPAREN,LBRACE,arr,LBRACKET,0,RBRACKET,EQ,LPAREN,double,RPAREN,LPAREN,y1,SUB,y2,RPAREN,SLASH,LPAREN,double,RPAREN,LPAREN,x1,SUB,x2,RPAREN,SEMI,arr,LBRACKET,1,RBRACKET,EQ,LPAREN,double,RPAREN,LPAREN,x1,STAR,y2,SUB,y1,STAR,x2,RPAREN,SLASH,LPAREN,double,RPAREN,LPAREN,x1,SUB,x2,RPAREN,SEMI,arr,LBRACKET,2,RBRACKET,EQ,0,SEMI,RBRACE,ELSE,LBRACE,arr,LBRACKET,0,RBRACKET,EQ,0,SEMI,arr,LBRACKET,1,RBRACKET,EQ,x1,SEMI,arr,LBRACKET,2,RBRACKET,EQ,1,SEMI,RBRACE,IF,LPAREN,x1,LT,x2,RPAREN,LBRACE,arr,LBRACKET,3,RBRACKET,EQ,x1,SEMI,arr,LBRACKET,5,RBRACKET,EQ,x2,SEMI,arr,LBRACKET,4,RBRACKET,EQ,y1,SEMI,arr,LBRACKET,6,RBRACKET,EQ,y2,SEMI,RBRACE,ELSE,IF,LPAREN,x1,GT,x2,RPAREN,LBRACE,arr,LBRACKET,3,RBRACKET,EQ,x2,SEMI,arr,LBRACKET,5,RBRACKET,EQ,x1,SEMI,arr,LBRACKET,4,RBRACKET,EQ,y2,SEMI,arr,LBRACKET,6,RBRACKET,EQ,y1,SEMI,RBRACE,ELSE,IF,LPAREN,x1,EQEQ,x2,RPAREN,LBRACE,IF,LPAREN,y1,LT,y2,RPAREN,LBRACE,arr,LBRACKET,3,RBRACKET,EQ,x1,SEMI,arr,LBRACKET,5,RBRACKET,EQ,x2,SEMI,arr,LBRACKET,4,RBRACKET,EQ,y1,SEMI,arr,LBRACKET,6,RBRACKET,EQ,y2,SEMI,RBRACE,ELSE,LBRACE,arr,LBRACKET,3,RBRACKET,EQ,x2,SEMI,arr,LBRACKET,5,RBRACKET,EQ,x1,SEMI,arr,LBRACKET,4,RBRACKET,EQ,y2,SEMI,arr,LBRACKET,6,RBRACKET,EQ,y1,SEMI,RBRACE,RBRACE,LineEquation,leq,EQ,NEW,LineEquation,LPAREN,arr,LBRACKET,0,RBRACKET,COMMA,arr,LBRACKET,1,RBRACKET,COMMA,NEW,Point,LPAREN,LPAREN,int,RPAREN,arr,LBRACKET,3,RBRACKET,COMMA,LPAREN,int,RPAREN,arr,LBRACKET,4,RBRACKET,RPAREN,COMMA,NEW,Point,LPAREN,LPAREN,int,RPAREN,arr,LBRACKET,5,RBRACKET,COMMA,LPAREN,int,RPAREN,arr,LBRACKET,6,RBRACKET,RPAREN,COMMA,LPAREN,arr,LBRACKET,2,RBRACKET,EQEQ,1,RPAREN,QUES,true,COLON,false,RPAREN,SEMI,RETURN,leq,SEMI,RBRACE","    public static LineEquation lineEqCompute (int x1, int y1, int x2, int y2)
,    {
,    	double[] arr = new double[7];
,    	
,    	// Cramer's Rule to solve system of equation ( 2 x 2 )
,    	if (x1 - x2 <MASK> 0)
,    	{
,    		// y = ax + b
,	    	arr[0] = (double)(y1 - y2) / (double)(x1 - x2);
,	    	arr[1] = (double)(x1*y2 - y1*x2) / (double)(x1 - x2);
,	    	arr[2] = 0;
,    	}
,    	else
,    	{
,    		// line equation based on x = ay + b
,    		arr[0] = 0;
,    		arr[1] = x1;
,    		arr[2] = 1;
,    	}
,    	if (x1 < x2)
,    	{
,    		arr[3] = x1;
,    		arr[5] = x2;
,    		arr[4] = y1;
,    		arr[6] = y2;
,    	}
,    	else if (x1 > x2)
,    	{
,    		arr[3] = x2;
,    		arr[5] = x1;
,    		arr[4] = y2;
,    		arr[6] = y1;
,    	}
,    	else if (x1 == x2)
,    	{
,    		if (y1 < y2)
,    		{
,    			arr[3] = x1;
,        		arr[5] = x2;
,        		arr[4] = y1;
,        		arr[6] = y2;
,    		}
,    		else
,    		{
,    			arr[3] = x2;
,        		arr[5] = x1;
,        		arr[4] = y2;
,        		arr[6] = y1;
,    		}
,    	}
,    	
,    	LineEquation leq = new LineEquation(arr[0], arr[1], new Point((int)arr[3], (int)arr[4]), 
,    			new Point((int)arr[5], (int)arr[6]), (arr[2] == 1) ? true : false);
,    	
,     	return leq;
,    }
"
7b37a4d3-9846-4b12-9860-e336321ade31,2b9f551b-7ce7-4852-99f8-1d66f9a7ca99,GT,"PRIVATE,void,checarProdutoAberto,LPAREN,RPAREN,THROWS,Exception,LBRACE,IF,LPAREN,id,DOT,length,LPAREN,RPAREN,<MASK>,0,AMPAMP,id,BANGEQ,""0"",RPAREN,abrir,LPAREN,RPAREN,SEMI,ELSE,produto,EQ,NEW,Produto,LPAREN,RPAREN,SEMI,RBRACE","    private void checarProdutoAberto()  throws Exception  {
,        if(id.length() <MASK> 0 && id != ""0"")
,            abrir();
,        else
,            produto = new Produto();
,    }
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,3bbfe912-cf12-4200-9108-2fc18f0897df,SUB,"PUBLIC,void,_Solve,LPAREN,int,id,RPAREN,LBRACE,BufferedImage,screenshot,EQ,ActionRobot,DOT,doScreenShot,LPAREN,RPAREN,SEMI,Vision,vision,EQ,NEW,Vision,LPAREN,screenshot,RPAREN,SEMI,List,LT,ABObject,GT,objects,EQ,vision,DOT,findBlocksRealShape,LPAREN,RPAREN,SEMI,List,LT,ABObject,GT,pigs,EQ,vision,DOT,findPigsRealShape,LPAREN,RPAREN,SEMI,List,LT,ABObject,GT,birds,EQ,vision,DOT,findBirdsRealShape,LPAREN,RPAREN,SEMI,List,LT,ABObject,GT,hills,EQ,vision,DOT,findHills,LPAREN,RPAREN,SEMI,Rectangle,sling,EQ,vision,DOT,findSlingshotMBR,LPAREN,RPAREN,SEMI,WHILE,LPAREN,sling,EQEQ,null,AMPAMP,aRobot,DOT,getState,LPAREN,RPAREN,EQEQ,GameState,DOT,PLAYING,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""No slingshot detected. Please remove pop up or zoom out"",RPAREN,SEMI,ActionRobot,DOT,fullyZoomOut,LPAREN,RPAREN,SEMI,screenshot,EQ,ActionRobot,DOT,doScreenShot,LPAREN,RPAREN,SEMI,vision,EQ,NEW,Vision,LPAREN,screenshot,RPAREN,SEMI,sling,EQ,vision,DOT,findSlingshotMBR,LPAREN,RPAREN,SEMI,RBRACE,System,DOT,out,DOT,println,LPAREN,""Number of pig: "",PLUS,pigs,DOT,size,LPAREN,RPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""Number of bird: "",PLUS,birds,DOT,size,LPAREN,RPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""Number of block: "",PLUS,objects,DOT,size,LPAREN,RPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""Number of hill: "",PLUS,hills,DOT,size,LPAREN,RPAREN,RPAREN,SEMI,GameState,state,EQ,aRobot,DOT,getState,LPAREN,RPAREN,SEMI,IF,LPAREN,sling,BANGEQ,null,RPAREN,LBRACE,IF,LPAREN,BANG,pigs,DOT,isEmpty,LPAREN,RPAREN,RPAREN,LBRACE,Point,releasePoint,EQ,null,SEMI,Shot,shot,EQ,NEW,Shot,LPAREN,RPAREN,SEMI,int,dx,COMMA,dy,SEMI,double,max,EQ,Double,DOT,MIN_VALUE,SEMI,ABObject,best,EQ,null,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,pigs,DOT,size,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,best,EQ,pigs,DOT,get,LPAREN,i,RPAREN,SEMI,IF,LPAREN,pigs,DOT,get,LPAREN,i,RPAREN,DOT,id,EQEQ,id,RPAREN,LBRACE,best,EQ,pigs,DOT,get,LPAREN,i,RPAREN,SEMI,BREAK,SEMI,RBRACE,RBRACE,ArrayList,LT,Point,GT,pts,EQ,tp,DOT,estimateLaunchPoint,LPAREN,sling,COMMA,best,DOT,getCenter,LPAREN,RPAREN,RPAREN,SEMI,releasePoint,EQ,pts,DOT,get,LPAREN,0,RPAREN,SEMI,Point,refPoint,EQ,tp,DOT,getReferencePoint,LPAREN,sling,RPAREN,SEMI,List,LT,Point,GT,points,EQ,tp,DOT,predictTrajectory,LPAREN,sling,COMMA,releasePoint,RPAREN,SEMI,List,LT,ABObject,GT,result,EQ,NEW,ArrayList,LT,ABObject,GT,LPAREN,RPAREN,SEMI,Point,target,EQ,best,DOT,getCenter,LPAREN,RPAREN,SEMI,FOR,LPAREN,Point,point,COLON,points,RPAREN,LBRACE,IF,LPAREN,point,DOT,x,LT,840,AMPAMP,point,DOT,y,LT,480,AMPAMP,point,DOT,y,GT,100,AMPAMP,point,DOT,x,GT,400,RPAREN,FOR,LPAREN,ABObject,ab,COLON,objects,RPAREN,LBRACE,IF,LPAREN,LPAREN,LPAREN,ab,DOT,contains,LPAREN,point,RPAREN,AMPAMP,BANG,ab,DOT,contains,LPAREN,target,RPAREN,RPAREN,BARBAR,Math,DOT,abs,LPAREN,vision,DOT,getMBRVision,LPAREN,RPAREN,DOT,_scene,LBRACKET,point,DOT,y,RBRACKET,LBRACKET,point,DOT,x,RBRACKET,<MASK>,72,RPAREN,LT,10,RPAREN,AMPAMP,point,DOT,x,LT,target,DOT,x,RPAREN,LBRACE,IF,LPAREN,BANG,result,DOT,contains,LPAREN,ab,RPAREN,RPAREN,result,DOT,add,LPAREN,ab,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,result,DOT,size,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,ABObject,ab,EQ,result,DOT,get,LPAREN,i,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""Sheltering structure is: "",PLUS,ab,DOT,id,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""Type: "",PLUS,ab,DOT,type,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""Position: "",PLUS,ab,DOT,getLocation,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,RBRACE","	public void _Solve (int id)
,	{
,		// capture Image
,		BufferedImage screenshot = ActionRobot.doScreenShot();
,		
,		// process image
,		Vision vision = new Vision(screenshot);
,		
,		// get all object
,		List<ABObject> objects = vision.findBlocksRealShape();
,		List<ABObject> pigs = vision.findPigsRealShape();
,		List<ABObject> birds = vision.findBirdsRealShape();
,		List<ABObject> hills = vision.findHills();
,		
,		
,		// find the slingshot
,		Rectangle sling = vision.findSlingshotMBR();
,		
,		// confirm the slingshot
,		while (sling == null && aRobot.getState() == GameState.PLAYING) {
,			System.out
,			.println(""No slingshot detected. Please remove pop up or zoom out"");
,			ActionRobot.fullyZoomOut();
,			screenshot = ActionRobot.doScreenShot();
,			vision = new Vision(screenshot);
,			sling = vision.findSlingshotMBR();
,		}
,		
,		System.out.println(""Number of pig: "" + pigs.size());
,		System.out.println(""Number of bird: "" + birds.size());
,		System.out.println(""Number of block: "" + objects.size());
,		System.out.println(""Number of hill: "" + hills.size());
,		
,		// Game State
,		GameState state = aRobot.getState();
,		
,		if (sling != null)
,		{
,			if (!pigs.isEmpty())
,			{
,				Point releasePoint = null;
,				Shot shot = new Shot();
,				int dx, dy;
,				double max = Double.MIN_VALUE;
,				ABObject best = null;
,				
,				for (int i = 0; i < pigs.size(); i++)
,				{
,					best = pigs.get(i);
,					if (pigs.get(i).id == id)
,					{
,						best = pigs.get(i);
,						break;
,					}
,				}
,				
,				// estimate the trajectory
,				ArrayList<Point> pts = tp.estimateLaunchPoint(sling, best.getCenter());
,				releasePoint = pts.get(0);
,				
,				// Get the reference point
,				Point refPoint = tp.getReferencePoint(sling);
,				
,				
,				List<Point> points = tp.predictTrajectory(sling, releasePoint);
,				List<ABObject> result = new ArrayList<ABObject>();
,				Point target = best.getCenter();
,				for (Point point : points) {
,					if (point.x < 840 && point.y < 480 && point.y > 100
,							&& point.x > 400)
,						for (ABObject ab : objects) {
,							if (((ab.contains(point) && !ab.contains(target)) || Math
,									.abs(vision.getMBRVision()._scene[point.y][point.x] <MASK> 72) < 10)
,									&& point.x < target.x)
,								{
,								if(!result.contains(ab))
,									result.add(ab);
,								}
,						}
,
,				}
,				for (int i = 0; i < result.size(); i++)
,				{
,					ABObject ab = result.get(i);
,					System.out.println(""Sheltering structure is: "" + ab.id);
,					System.out.println(""Type: "" + ab.type);
,					System.out.println(""Position: "" + ab.getLocation());
,				}
,				
,			}
,		}
,	}
"
63ee1274-7add-4bc5-a057-e2079298f295,01e02348-8759-44ca-aa20-982d2a83d44d,SUB,"MONKEYS_AT,Test,PUBLIC,void,testPickUp,LPAREN,RPAREN,THROWS,FileNotFoundException,LBRACE,assertTrue,LPAREN,player,DOT,pickUp,LPAREN,null,RPAREN,RPAREN,SEMI,assertTrue,LPAREN,player,DOT,pickUp,LPAREN,"""",RPAREN,RPAREN,SEMI,player,DOT,pickUp,LPAREN,""testName"",RPAREN,SEMI,Scanner,sc,EQ,NEW,Scanner,LPAREN,NEW,File,LPAREN,""testing.txt"",RPAREN,RPAREN,SEMI,ArrayList,LT,String,GT,testOutput,EQ,NEW,ArrayList,LT,String,GT,LPAREN,RPAREN,SEMI,WHILE,LPAREN,sc,DOT,hasNextLine,LPAREN,RPAREN,RPAREN,LBRACE,testOutput,DOT,add,LPAREN,sc,DOT,nextLine,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,sc,DOT,close,LPAREN,RPAREN,SEMI,assertArrayEquals,LPAREN,""You pick up a testName."",DOT,toCharArray,LPAREN,RPAREN,COMMA,testOutput,DOT,get,LPAREN,testOutput,DOT,size,LPAREN,RPAREN,<MASK>,1,RPAREN,DOT,toCharArray,LPAREN,RPAREN,RPAREN,SEMI,RBRACE","	@Test
,	public void testPickUp() throws FileNotFoundException {
,		assertTrue(player.pickUp(null));
,		assertTrue(player.pickUp(""""));
,		player.pickUp(""testName"");
,
,		Scanner sc = new Scanner(new File(""testing.txt""));
,		ArrayList<String> testOutput = new ArrayList<String>();
,		while (sc.hasNextLine()) {
,			testOutput.add(sc.nextLine());
,		}
,		sc.close();
,
,		assertArrayEquals(""You pick up a testName."".toCharArray(), testOutput
,				.get(testOutput.size() <MASK> 1).toCharArray());
,	}
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,e3a8bf16-a914-4b1c-ad13-5db5455fa321,BANGEQ,"PUBLIC,String,toString,LPAREN,RPAREN,LBRACE,String,result,EQ,"""",SEMI,IF,LPAREN,x,EQEQ,0,AMPAMP,y,EQEQ,0,RPAREN,LBRACE,IF,LPAREN,t_tap,<MASK>,0,RPAREN,result,PLUSEQ,""tap at:  "",PLUS,t_tap,SEMI,RBRACE,ELSE,result,PLUSEQ,""Shoot from: ("",PLUS,LPAREN,x,PLUS,dx,RPAREN,PLUS,""  "",PLUS,LPAREN,y,PLUS,dy,RPAREN,PLUS,"" )"",PLUS,"" at time  "",PLUS,t_shot,SEMI,RETURN,result,SEMI,RBRACE","public String toString()
,{
,	String result = """";
,	if(x == 0 && y == 0)
,	{	
,	 if(t_tap<MASK>0)	
,		result+= ""tap at:  ""  + t_tap;
,	}
,	else
,		result += ""Shoot from: (""+ (x + dx)+ ""  "" + (y + dy) +"" )"" + "" at time  "" + t_shot ;	
,	
,   return  result;
,
,}
"
0dfb093d-da1c-44ee-81fd-3fd7eb6d3145,a21f36fb-08bf-4385-bae6-0bb5735986fd,STAR,"PUBLIC,CommentEntityDS,getCommentEntityFromHtml,LPAREN,String,html,COMMA,int,i,COMMA,int,j,COMMA,int,initialOffset,RPAREN,THROWS,FileNotFoundException,LBRACE,CommentEntityDS,result,EQ,NEW,CommentEntityDS,LPAREN,RPAREN,SEMI,result,DOT,setId,LPAREN,"""",PLUS,LPAREN,LPAREN,i,SUB,1,RPAREN,<MASK>,100,PLUS,initialOffset,PLUS,j,PLUS,1,RPAREN,RPAREN,SEMI,result,DOT,setCommentHTML,LPAREN,html,RPAREN,SEMI,String,clearComment,EQ,cleanTheCommentFromTheHtml,LPAREN,html,RPAREN,SEMI,addCommentToString,LPAREN,clearComment,RPAREN,SEMI,RETURN,result,SEMI,RBRACE","    public CommentEntityDS getCommentEntityFromHtml(String html, int i, int j, int initialOffset) throws FileNotFoundException{
,  	  	CommentEntityDS result = new CommentEntityDS();
,  	  	result.setId("""" + ((i-1) <MASK> 100 + initialOffset + j + 1));//set the id of the comment(Serial number)
,		result.setCommentHTML(html); //set the htmlComment from the array  
,		String clearComment = cleanTheCommentFromTheHtml(html);
,		addCommentToString(clearComment);
,	
,		return result;
,    }
"
bbbc2c49-08b6-473f-979f-87460edf9df9,47d59367-d6b1-497b-963a-21f0cd373d0f,LTEQ,"STATIC,PUBLIC,String,decode,LPAREN,IOBuffer,in,COMMA,String,charset,COMMA,int,byteLength,RPAREN,LBRACE,IF,LPAREN,in,DOT,getReadableBytes,LPAREN,RPAREN,LT,byteLength,RPAREN,THROW,NEW,BufferUnderflowException,LPAREN,RPAREN,SEMI,ByteBuffer,bb,SEMI,CharBuffer,cb,SEMI,char,LBRACKET,RBRACKET,ca,SEMI,Thread,thread,EQ,Thread,DOT,currentThread,LPAREN,RPAREN,SEMI,IF,LPAREN,thread,INSTANCEOF,CharsetDecoderEncoderThread,RPAREN,LBRACE,CharsetDecoderEncoderThread,thread1,EQ,LPAREN,LPAREN,CharsetDecoderEncoderThread,RPAREN,thread,RPAREN,SEMI,bb,EQ,thread1,DOT,getTempArrayByteBuffer,LPAREN,RPAREN,SEMI,cb,EQ,thread1,DOT,getTempArrayCharBuffer,LPAREN,RPAREN,SEMI,ca,EQ,cb,DOT,array,LPAREN,RPAREN,SEMI,RBRACE,ELSE,LBRACE,bb,EQ,byteBuffer,SEMI,cb,EQ,charBuffer,SEMI,ca,EQ,charArray,SEMI,RBRACE,java,DOT,nio,DOT,charset,DOT,CharsetDecoder,decoder,EQ,Charset,DOT,forName,LPAREN,charset,RPAREN,DOT,newDecoder,LPAREN,RPAREN,SEMI,StringBuilder,sb,EQ,NEW,StringBuilder,LPAREN,RPAREN,SEMI,decoder,DOT,reset,LPAREN,RPAREN,SEMI,decoder,DOT,replaceWith,LPAREN,""?"",RPAREN,SEMI,decoder,DOT,onMalformedInput,LPAREN,CodingErrorAction,DOT,REPLACE,RPAREN,SEMI,decoder,DOT,onUnmappableCharacter,LPAREN,CodingErrorAction,DOT,REPLACE,RPAREN,SEMI,boolean,lastLoop,EQ,false,SEMI,IF,LPAREN,BANG,LPAREN,thread,INSTANCEOF,CharsetDecoderEncoderThread,RPAREN,RPAREN,lock,DOT,lock,LPAREN,RPAREN,SEMI,TRY,LBRACE,bb,DOT,clear,LPAREN,RPAREN,SEMI,cb,DOT,clear,LPAREN,RPAREN,SEMI,WHILE,LPAREN,true,RPAREN,LBRACE,IF,LPAREN,byteLength,GT,0,RPAREN,LBRACE,int,readed,EQ,Math,DOT,min,LPAREN,bb,DOT,remaining,LPAREN,RPAREN,COMMA,byteLength,RPAREN,SEMI,in,DOT,read,LPAREN,bb,COMMA,readed,RPAREN,SEMI,byteLength,SUBEQ,readed,SEMI,RBRACE,bb,DOT,flip,LPAREN,RPAREN,SEMI,CoderResult,result,EQ,decoder,DOT,decode,LPAREN,bb,COMMA,cb,COMMA,lastLoop,RPAREN,SEMI,IF,LPAREN,lastLoop,RPAREN,result,EQ,decoder,DOT,flush,LPAREN,cb,RPAREN,SEMI,cb,DOT,flip,LPAREN,RPAREN,SEMI,int,cbLen,EQ,cb,DOT,remaining,LPAREN,RPAREN,SEMI,IF,LPAREN,cbLen,GT,0,RPAREN,sb,DOT,append,LPAREN,ca,COMMA,cb,DOT,position,LPAREN,RPAREN,COMMA,cbLen,RPAREN,SEMI,bb,DOT,compact,LPAREN,RPAREN,SEMI,cb,DOT,clear,LPAREN,RPAREN,SEMI,IF,LPAREN,result,EQEQ,CoderResult,DOT,OVERFLOW,BARBAR,LPAREN,result,EQEQ,CoderResult,DOT,UNDERFLOW,AMPAMP,byteLength,GT,0,RPAREN,RPAREN,CONTINUE,SEMI,IF,LPAREN,BANG,lastLoop,AMPAMP,byteLength,<MASK>,0,RPAREN,LBRACE,lastLoop,EQ,true,SEMI,CONTINUE,SEMI,RBRACE,ELSE,BREAK,SEMI,RBRACE,RBRACE,FINALLY,LBRACE,IF,LPAREN,BANG,LPAREN,thread,INSTANCEOF,CharsetDecoderEncoderThread,RPAREN,RPAREN,lock,DOT,unlock,LPAREN,RPAREN,SEMI,RBRACE,RETURN,sb,DOT,toString,LPAREN,RPAREN,SEMI,RBRACE","	static public String decode(IOBuffer in, String charset, int byteLength)
,	{
,		if( in.getReadableBytes() < byteLength )
,			throw new BufferUnderflowException();
,
,		ByteBuffer bb;
,		CharBuffer cb;
,		char[] ca;
,
,		Thread thread = Thread.currentThread();
,		if( thread instanceof CharsetDecoderEncoderThread )
,		{
,			CharsetDecoderEncoderThread thread1 = ((CharsetDecoderEncoderThread) thread);
,			bb = thread1.getTempArrayByteBuffer();
,			cb = thread1.getTempArrayCharBuffer();
,			ca = cb.array();
,		}
,		else
,		{
,			bb = byteBuffer;
,			cb = charBuffer;
,			ca = charArray;
,		}
,
,		java.nio.charset.CharsetDecoder decoder = Charset.forName(charset)
,				.newDecoder();
,		StringBuilder sb = new StringBuilder();
,
,		decoder.reset();
,		decoder.replaceWith(""?"");
,		decoder.onMalformedInput(CodingErrorAction.REPLACE);
,		decoder.onUnmappableCharacter(CodingErrorAction.REPLACE);
,
,		boolean lastLoop = false;
,
,		if( !(thread instanceof CharsetDecoderEncoderThread) )
,			lock.lock();
,
,		try
,		{
,			bb.clear();
,			cb.clear();
,
,			while( true )
,			{
,				if( byteLength > 0 )
,				{
,					int readed = Math.min(bb.remaining(), byteLength);
,					in.read(bb, readed);
,					byteLength -= readed;
,				}
,
,				bb.flip();
,
,				CoderResult result = decoder.decode(bb, cb, lastLoop);
,
,				if( lastLoop )
,					result = decoder.flush(cb);
,
,				cb.flip();
,				int cbLen = cb.remaining();
,				if( cbLen > 0 )
,					sb.append(ca, cb.position(), cbLen);
,
,				bb.compact();
,				cb.clear();
,
,				if( result == CoderResult.OVERFLOW
,						|| (result == CoderResult.UNDERFLOW && byteLength > 0) )
,					continue;
,
,				if( !lastLoop && byteLength <MASK> 0 )
,				{
,					lastLoop = true;
,					continue;
,				}
,				else
,					break;
,			}
,		}
,		finally
,		{
,			if( !(thread instanceof CharsetDecoderEncoderThread) )
,				lock.unlock();
,		}
,
,		return sb.toString();
,	}
"
1b82c97a-fe19-4584-bdbc-4f13bb123c10,4c98b944-f2ee-4989-86dc-0d3338f83081,STAR,"PUBLIC,int,IRandom,LPAREN,int,lower,COMMA,int,upper,RPAREN,LBRACE,int,temp,SEMI,Random,r,EQ,NEW,Random,LPAREN,RPAREN,SEMI,temp,EQ,lower,PLUS,LPAREN,int,RPAREN,LPAREN,r,DOT,nextDouble,LPAREN,RPAREN,<MASK>,LPAREN,upper,SUB,lower,PLUS,1,RPAREN,RPAREN,SEMI,RETURN,temp,SEMI,RBRACE","public int IRandom(int lower,int upper)
,{
, int temp;
, Random r= new Random();
, temp=lower+ (int)(r.nextDouble()<MASK>(upper-lower+1));
,  return temp;
,}
"
7a6d4ee7-a11c-445d-8f58-7963e611bee0,d9cad135-828a-44b7-8be3-e0d35db18a42,SUB,"PUBLIC,Download,LPAREN,URL,url,RPAREN,LBRACE,this,DOT,url,EQ,url,SEMI,size,EQ,<MASK>,1,SEMI,downloaded,EQ,0,SEMI,status,EQ,DOWNLOADING,SEMI,download,LPAREN,RPAREN,SEMI,RBRACE","		public Download(URL url)
,		{
,		    this.url = url;
,		    size = <MASK>1;
,		    downloaded = 0;
,		    status = DOWNLOADING;
,
,		    // Begin the download.
,		    download();
,		}
"
811987a2-df8f-411b-b35a-1f251eaec687,1c32fcae-92d6-436d-9af0-a6add4763481,SLASH,"PRIVATE,double,calculateAccuracy,LPAREN,double,LBRACKET,RBRACKET,actual,COMMA,double,LBRACKET,RBRACKET,output,RPAREN,LBRACE,double,accuracy,EQ,0,SEMI,double,tp,EQ,0,COMMA,fp,EQ,0,COMMA,tn,EQ,0,COMMA,fn,EQ,0,SEMI,int,itr,EQ,0,SEMI,FOR,LPAREN,itr,EQ,0,SEMI,itr,LT,actual,DOT,length,SEMI,itr,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,actual,LBRACKET,itr,RBRACKET,EQEQ,0,AMPAMP,output,LBRACKET,itr,RBRACKET,EQEQ,1,RPAREN,fp,PLUSPLUS,SEMI,ELSE,IF,LPAREN,actual,LBRACKET,itr,RBRACKET,EQEQ,0,AMPAMP,output,LBRACKET,itr,RBRACKET,EQEQ,0,RPAREN,tn,PLUSPLUS,SEMI,RBRACE,accuracy,EQ,LPAREN,tp,PLUS,tn,RPAREN,<MASK>,LPAREN,tp,PLUS,tn,PLUS,fp,PLUS,fn,RPAREN,SEMI,RETURN,accuracy,SEMI,RBRACE","	private double calculateAccuracy(double[] actual, double[] output) {
,		double accuracy = 0;
,		double tp = 0, fp = 0, tn = 0, fn = 0;
,		int itr = 0;
,		for (itr = 0; itr < actual.length; itr++) {
,			if (actual[itr] == 0 && output[itr] == 1)
,				fp++;
,			else if (actual[itr] == 0 && output[itr] == 0)
,				tn++;
,		}
,		accuracy = (tp + tn) <MASK> (tp + tn + fp + fn);
,		return accuracy;
,	}
"
68422d14-68e8-42b7-9437-f6891889f4fc,15d695fb-322c-4bf1-b4be-50dafdfd5741,PERCENT,"PUBLIC,TimeDuration,add,LPAREN,TimeDuration,t,RPAREN,LBRACE,TimeDuration,newTime,EQ,NEW,TimeDuration,LPAREN,this,RPAREN,SEMI,newTime,DOT,setMinutes,LPAREN,newTime,DOT,getMinutes,LPAREN,RPAREN,PLUS,t,DOT,getMinutes,LPAREN,RPAREN,RPAREN,SEMI,newTime,DOT,hour,PLUSEQ,t,DOT,hour,PLUS,newTime,DOT,minutes,SLASH,60,SEMI,newTime,DOT,minutes,EQ,newTime,DOT,minutes,<MASK>,60,SEMI,RETURN,newTime,SEMI,RBRACE","	public TimeDuration add(TimeDuration t) {
,		TimeDuration newTime = new TimeDuration(this);
,		newTime.setMinutes (newTime.getMinutes()+t.getMinutes());
,		newTime.hour += t.hour + newTime.minutes / 60;
,		newTime.minutes = newTime.minutes <MASK> 60;
,		return newTime;
,	}
"
b5ee7e5e-a7bf-41d4-8880-3ac95d2f8822,6749d763-b3e9-4775-86e8-82c169628b5f,BANGEQ,"PUBLIC,Map,LT,Long,COMMA,Map,LT,Long,COMMA,Long,GTGT,read,LPAREN,File,f,RPAREN,THROWS,IOException,LBRACE,TreeMap,LT,Long,COMMA,Map,LT,Long,COMMA,Long,GTGT,fm,EQ,NEW,TreeMap,LT,Long,COMMA,Map,LT,Long,COMMA,Long,GTGT,LPAREN,RPAREN,SEMI,BufferedReader,br,EQ,NEW,BufferedReader,LPAREN,NEW,FileReader,LPAREN,f,RPAREN,RPAREN,SEMI,String,ln,EQ,br,DOT,readLine,LPAREN,RPAREN,SEMI,StringTokenizer,stk,SEMI,Long,key1,SEMI,WHILE,LPAREN,ln,<MASK>,null,RPAREN,LBRACE,stk,EQ,NEW,StringTokenizer,LPAREN,ln,RPAREN,SEMI,key1,EQ,Long,DOT,parseLong,LPAREN,stk,DOT,nextToken,LPAREN,RPAREN,RPAREN,SEMI,IF,LPAREN,BANG,fm,DOT,containsKey,LPAREN,key1,RPAREN,RPAREN,LBRACE,fm,DOT,put,LPAREN,key1,COMMA,NEW,TreeMap,LT,Long,COMMA,Long,GT,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,fm,DOT,get,LPAREN,key1,RPAREN,DOT,put,LPAREN,Long,DOT,parseLong,LPAREN,stk,DOT,nextToken,LPAREN,RPAREN,RPAREN,COMMA,Long,DOT,parseLong,LPAREN,stk,DOT,nextToken,LPAREN,RPAREN,RPAREN,RPAREN,SEMI,RBRACE,br,DOT,close,LPAREN,RPAREN,SEMI,RETURN,fm,SEMI,RBRACE","	public Map<Long, Map<Long, Long>> read(File f) throws IOException {
,
,		TreeMap<Long, Map<Long, Long>> fm = new TreeMap<Long, Map<Long, Long>>();
,		BufferedReader br = new BufferedReader(new FileReader(f));
,		String ln = br.readLine();
,		StringTokenizer stk;
,		Long key1;
,		while (ln <MASK> null) {
,			stk = new StringTokenizer(ln);
,			key1 = Long.parseLong(stk.nextToken());
,			if(!fm.containsKey(key1)){
,				fm.put(key1, new TreeMap<Long, Long>());
,			}
,			fm.get(key1).put(Long.parseLong(stk.nextToken()),
,					Long.parseLong(stk.nextToken()));
,		}
,		br.close();
,		return fm;
,	}
"
4a247308-1941-42bf-b8c1-203a89952252,a3176f45-6434-48b3-b15b-da7ec03e55d7,BANGEQ,"PUBLIC,NotaFiscal,constroi,LPAREN,RPAREN,LBRACE,IF,LPAREN,dataAtual,<MASK>,null,RPAREN,LBRACE,NotaFiscal,nf,EQ,NEW,NotaFiscal,LPAREN,razaoSocial,COMMA,cnpj,COMMA,dataAtual,COMMA,valorBruto,COMMA,impostos,COMMA,todosItens,COMMA,observacao,RPAREN,SEMI,FOR,LPAREN,AcaoAposGerarNota,acao,COLON,listaTodasAcoes,RPAREN,LBRACE,acao,DOT,executa,LPAREN,nf,RPAREN,SEMI,RBRACE,RETURN,nf,SEMI,RBRACE,ELSE,LBRACE,NotaFiscal,nf,EQ,NEW,NotaFiscal,LPAREN,razaoSocial,COMMA,cnpj,COMMA,Calendar,DOT,getInstance,LPAREN,RPAREN,COMMA,valorBruto,COMMA,impostos,COMMA,todosItens,COMMA,observacao,RPAREN,SEMI,FOR,LPAREN,AcaoAposGerarNota,acao,COLON,listaTodasAcoes,RPAREN,LBRACE,acao,DOT,executa,LPAREN,nf,RPAREN,SEMI,RBRACE,RETURN,nf,SEMI,RBRACE,RBRACE","	public NotaFiscal constroi(){
,		
,		if(dataAtual <MASK> null){
,			NotaFiscal nf = new NotaFiscal(razaoSocial, cnpj, dataAtual, valorBruto, impostos, todosItens, observacao);
,			for (AcaoAposGerarNota acao : listaTodasAcoes) {
,				acao.executa(nf);
,			}
,			return nf;
,		} else {
,			NotaFiscal nf = new NotaFiscal(razaoSocial, cnpj, Calendar.getInstance(), valorBruto, impostos, todosItens, observacao);
,			for (AcaoAposGerarNota acao : listaTodasAcoes) {
,				acao.executa(nf);
,			}
,			return nf;
,		}
,	}
"
eac7db55-f1c9-4e74-95f6-9c62d4d48b4c,98246d1f-7cbf-4d00-b86e-4608240fed8d,PLUS,"MONKEYS_AT,Override,PUBLIC,Dimension,getPreferredSize,LPAREN,RPAREN,LBRACE,RETURN,NEW,Dimension,LPAREN,XLEN,COMMA,YLEN,<MASK>,50,RPAREN,SEMI,RBRACE","	@Override
,	public Dimension getPreferredSize() { return new Dimension(XLEN,YLEN<MASK>50); }
"
1f47bbd6-87b5-4b44-b120-6b0f23f01251,d7f8c36f-8804-485a-9185-27e6d2942486,PERCENT,"PUBLIC,int,isShootCollision,LPAREN,int,x,COMMA,int,y,COMMA,int,size,COMMA,int,xOffset,COMMA,int,yOffset,COMMA,Projectile,projectile,RPAREN,LBRACE,IF,LPAREN,isMobCollision,LPAREN,x,COMMA,y,COMMA,projectile,RPAREN,RPAREN,LBRACE,RETURN,2,SEMI,RBRACE,FOR,LPAREN,int,corner,EQ,0,SEMI,corner,LT,4,SEMI,corner,PLUSPLUS,RPAREN,LBRACE,int,xc,EQ,LPAREN,x,PLUS,corner,<MASK>,2,STAR,size,PLUS,xOffset,RPAREN,GTGT,4,SEMI,int,yc,EQ,LPAREN,y,PLUS,corner,SLASH,2,STAR,size,PLUS,yOffset,RPAREN,GTGT,4,SEMI,IF,LPAREN,getTile,LPAREN,xc,COMMA,yc,RPAREN,DOT,isSolid,LPAREN,RPAREN,RPAREN,LBRACE,damageTile,LPAREN,xc,COMMA,yc,COMMA,projectile,DOT,getPower,LPAREN,RPAREN,RPAREN,SEMI,RETURN,1,SEMI,RBRACE,RBRACE,RETURN,0,SEMI,RBRACE","    public int isShootCollision(int x, int y, int size, int xOffset, int yOffset, Projectile projectile) {
,	if (isMobCollision(x, y, projectile)) {
,	    return 2;
,	}
,
,	for (int corner = 0; corner < 4; corner++) {
,	    int xc = (x + corner <MASK> 2 * size + xOffset) >> 4;
,	    int yc = (y + corner / 2 * size + yOffset) >> 4;
,	    if (getTile(xc, yc).isSolid()) {
,		damageTile(xc, yc, projectile.getPower());
,		return 1;
,	    }
,	}
,
,	return 0;
,    }
"
217a1929-2059-479f-af6e-fb7f6b29e94a,5bc016d1-3f08-4f9a-b2db-d9ae2e3b4c2d,PERCENT,"PRIVATE,STATIC,TextureRegion,get,LPAREN,int,i,COMMA,int,width,RPAREN,LBRACE,RETURN,NEW,TextureRegion,LPAREN,texture,COMMA,glyphTextureX,PLUS,LPAREN,i,<MASK>,16,RPAREN,STAR,glyphWidth,COMMA,glyphTextureY,PLUS,LPAREN,int,RPAREN,Math,DOT,floor,LPAREN,i,SLASH,16,RPAREN,STAR,glyphHeight,COMMA,width,COMMA,glyphHeight,RPAREN,SEMI,RBRACE","	private static TextureRegion get(int i, int width)
,	{
,		// Transferring from libgdx
,		return new TextureRegion(texture, glyphTextureX + (i<MASK>16) * glyphWidth, glyphTextureY + (int)Math.floor(i / 16) * glyphHeight, width, glyphHeight);
,	}
"
f29c7bcc-9c8d-4d8e-b365-55dc60e2d53e,3bb77296-44e7-4a76-9b7f-f625f2c86dbb,GTEQ,"PROTECTED,void,get_from_real,LPAREN,RPAREN,LBRACE,Symbol,stack_sym,SEMI,IF,LPAREN,real_next,<MASK>,real_stack,DOT,size,LPAREN,RPAREN,RPAREN,RETURN,SEMI,stack_sym,EQ,LPAREN,Symbol,RPAREN,real_stack,DOT,elementAt,LPAREN,real_stack,DOT,size,LPAREN,RPAREN,SUB,1,SUB,real_next,RPAREN,SEMI,real_next,PLUSPLUS,SEMI,vstack,DOT,push,LPAREN,NEW,Integer,LPAREN,stack_sym,DOT,parse_state,RPAREN,RPAREN,SEMI,RBRACE","  protected void get_from_real()
,    {
,      Symbol stack_sym;
,
,      /* don't transfer if the real stack is empty */
,      if (real_next <MASK> real_stack.size()) return;
,
,      /* get a copy of the first Symbol we have not transfered */
,      stack_sym = (Symbol)real_stack.elementAt(real_stack.size()-1-real_next);
,
,      /* record the transfer */
,      real_next++;
,
,      /* put the state number from the Symbol onto the virtual stack */
,      vstack.push(new Integer(stack_sym.parse_state));
,    }
"
b5ee7e5e-a7bf-41d4-8880-3ac95d2f8822,74424ce7-f608-4122-83f8-214ed6dc0b9e,PLUS,"PUBLIC,STATIC,Date,HYCOMToJavaDate,LPAREN,long,days,RPAREN,LBRACE,RETURN,NEW,Date,LPAREN,daysToMillis,LPAREN,days,RPAREN,<MASK>,HYCOM_OFFSET,RPAREN,SEMI,RBRACE","	public static Date HYCOMToJavaDate(long days) {
,		return new Date(daysToMillis(days) <MASK> HYCOM_OFFSET);
,	}
"
ceb2d628-7548-4a8f-9594-53a373297866,f047b258-ba13-4d32-bbf8-28c6445af569,LT,"PUBLIC,STATIC,Trajectory,generate,LPAREN,Config,config,COMMA,Strategy,strategy,COMMA,double,start_vel,COMMA,double,start_heading,COMMA,double,goal_pos,COMMA,double,goal_vel,COMMA,double,goal_heading,RPAREN,LBRACE,IF,LPAREN,strategy,EQEQ,AutomaticStrategy,RPAREN,LBRACE,strategy,EQ,chooseStrategy,LPAREN,start_vel,COMMA,goal_vel,COMMA,config,DOT,max_vel,RPAREN,SEMI,RBRACE,Trajectory,traj,SEMI,IF,LPAREN,strategy,EQEQ,StepStrategy,RPAREN,LBRACE,double,impulse,EQ,LPAREN,goal_pos,SLASH,config,DOT,max_vel,RPAREN,SLASH,config,DOT,dt,SEMI,int,time,EQ,LPAREN,int,RPAREN,LPAREN,Math,DOT,floor,LPAREN,impulse,RPAREN,RPAREN,SEMI,traj,EQ,secondOrderFilter,LPAREN,1,COMMA,1,COMMA,config,DOT,dt,COMMA,config,DOT,max_vel,COMMA,config,DOT,max_vel,COMMA,impulse,COMMA,time,COMMA,TrapezoidalIntegration,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,strategy,EQEQ,TrapezoidalStrategy,RPAREN,LBRACE,double,start_discount,EQ,.5,STAR,start_vel,STAR,start_vel,SLASH,config,DOT,max_acc,SEMI,double,end_discount,EQ,.5,STAR,goal_vel,STAR,goal_vel,SLASH,config,DOT,max_acc,SEMI,double,adjusted_max_vel,EQ,Math,DOT,min,LPAREN,config,DOT,max_vel,COMMA,Math,DOT,sqrt,LPAREN,config,DOT,max_acc,STAR,goal_pos,SUB,start_discount,SUB,end_discount,RPAREN,RPAREN,SEMI,double,t_rampup,EQ,LPAREN,adjusted_max_vel,SUB,start_vel,RPAREN,SLASH,config,DOT,max_acc,SEMI,double,x_rampup,EQ,start_vel,STAR,t_rampup,PLUS,.5,STAR,config,DOT,max_acc,STAR,t_rampup,STAR,t_rampup,SEMI,double,t_rampdown,EQ,LPAREN,adjusted_max_vel,SUB,goal_vel,RPAREN,SLASH,config,DOT,max_acc,SEMI,double,x_rampdown,EQ,adjusted_max_vel,STAR,t_rampdown,SUB,.5,STAR,config,DOT,max_acc,STAR,t_rampdown,STAR,t_rampdown,SEMI,double,x_cruise,EQ,goal_pos,SUB,x_rampdown,SUB,x_rampup,SEMI,int,time,EQ,LPAREN,int,RPAREN,LPAREN,LPAREN,t_rampup,PLUS,t_rampdown,PLUS,x_cruise,SLASH,adjusted_max_vel,RPAREN,SLASH,config,DOT,dt,PLUS,.5,RPAREN,SEMI,int,f1_length,EQ,LPAREN,int,RPAREN,Math,DOT,ceil,LPAREN,LPAREN,adjusted_max_vel,SLASH,config,DOT,max_acc,RPAREN,SLASH,config,DOT,dt,RPAREN,SEMI,double,impulse,EQ,LPAREN,goal_pos,SLASH,adjusted_max_vel,RPAREN,SLASH,config,DOT,dt,SUB,start_vel,SLASH,config,DOT,max_acc,SLASH,config,DOT,dt,PLUS,start_discount,PLUS,end_discount,SEMI,traj,EQ,secondOrderFilter,LPAREN,f1_length,COMMA,1,COMMA,config,DOT,dt,COMMA,start_vel,COMMA,adjusted_max_vel,COMMA,impulse,COMMA,time,COMMA,TrapezoidalIntegration,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,strategy,EQEQ,SCurvesStrategy,RPAREN,LBRACE,double,adjusted_max_vel,EQ,Math,DOT,min,LPAREN,config,DOT,max_vel,COMMA,LPAREN,SUB,config,DOT,max_acc,STAR,config,DOT,max_acc,PLUS,Math,DOT,sqrt,LPAREN,config,DOT,max_acc,STAR,config,DOT,max_acc,STAR,config,DOT,max_acc,STAR,config,DOT,max_acc,PLUS,4,STAR,config,DOT,max_jerk,STAR,config,DOT,max_jerk,STAR,config,DOT,max_acc,STAR,goal_pos,RPAREN,RPAREN,SLASH,LPAREN,2,STAR,config,DOT,max_jerk,RPAREN,RPAREN,SEMI,int,f1_length,EQ,LPAREN,int,RPAREN,Math,DOT,ceil,LPAREN,LPAREN,adjusted_max_vel,SLASH,config,DOT,max_acc,RPAREN,SLASH,config,DOT,dt,RPAREN,SEMI,int,f2_length,EQ,LPAREN,int,RPAREN,Math,DOT,ceil,LPAREN,LPAREN,config,DOT,max_acc,SLASH,config,DOT,max_jerk,RPAREN,SLASH,config,DOT,dt,RPAREN,SEMI,double,impulse,EQ,LPAREN,goal_pos,SLASH,adjusted_max_vel,RPAREN,SLASH,config,DOT,dt,SEMI,int,time,EQ,LPAREN,int,RPAREN,LPAREN,Math,DOT,ceil,LPAREN,f1_length,PLUS,f2_length,PLUS,impulse,RPAREN,RPAREN,SEMI,traj,EQ,secondOrderFilter,LPAREN,f1_length,COMMA,f2_length,COMMA,config,DOT,dt,COMMA,0,COMMA,adjusted_max_vel,COMMA,impulse,COMMA,time,COMMA,TrapezoidalIntegration,RPAREN,SEMI,RBRACE,ELSE,LBRACE,RETURN,null,SEMI,RBRACE,double,total_heading_change,EQ,goal_heading,SUB,start_heading,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,traj,DOT,getNumSegments,LPAREN,RPAREN,SEMI,PLUSPLUS,i,RPAREN,LBRACE,traj,DOT,segments_,LBRACKET,i,RBRACKET,DOT,heading,EQ,start_heading,PLUS,total_heading_change,STAR,LPAREN,traj,DOT,segments_,LBRACKET,i,RBRACKET,DOT,pos,RPAREN,SLASH,traj,DOT,segments_,LBRACKET,traj,DOT,getNumSegments,LPAREN,RPAREN,SUB,1,RBRACKET,DOT,pos,SEMI,RBRACE,RETURN,traj,SEMI,RBRACE","  public static Trajectory generate(
,          Config config,
,          Strategy strategy,
,          double start_vel,
,          double start_heading,
,          double goal_pos,
,          double goal_vel,
,          double goal_heading) {
,    // Choose an automatic strategy.
,    if (strategy == AutomaticStrategy) {
,      strategy = chooseStrategy(start_vel, goal_vel, config.max_vel);
,    }
,
,    Trajectory traj;
,    if (strategy == StepStrategy) {
,      double impulse = (goal_pos / config.max_vel) / config.dt;
,
,      // Round down, meaning we may undershoot by less than max_vel*dt.
,      // This is due to discretization and avoids a strange final
,      // velocity.
,      int time = (int) (Math.floor(impulse));
,      traj = secondOrderFilter(1, 1, config.dt, config.max_vel,
,              config.max_vel, impulse, time, TrapezoidalIntegration);
,
,    } else if (strategy == TrapezoidalStrategy) {
,      // How fast can we go given maximum acceleration and deceleration?
,      double start_discount = .5 * start_vel * start_vel / config.max_acc;
,      double end_discount = .5 * goal_vel * goal_vel / config.max_acc;
,
,      double adjusted_max_vel = Math.min(config.max_vel,
,              Math.sqrt(config.max_acc * goal_pos - start_discount
,                      - end_discount));
,      double t_rampup = (adjusted_max_vel - start_vel) / config.max_acc;
,      double x_rampup = start_vel * t_rampup + .5 * config.max_acc
,              * t_rampup * t_rampup;
,      double t_rampdown = (adjusted_max_vel - goal_vel) / config.max_acc;
,      double x_rampdown = adjusted_max_vel * t_rampdown - .5
,              * config.max_acc * t_rampdown * t_rampdown;
,      double x_cruise = goal_pos - x_rampdown - x_rampup;
,
,      // The +.5 is to round to nearest
,      int time = (int) ((t_rampup + t_rampdown + x_cruise
,              / adjusted_max_vel) / config.dt + .5);
,
,      // Compute the length of the linear filters and impulse.
,      int f1_length = (int) Math.ceil((adjusted_max_vel
,              / config.max_acc) / config.dt);
,      double impulse = (goal_pos / adjusted_max_vel) / config.dt
,              - start_vel / config.max_acc / config.dt
,              + start_discount + end_discount;
,      traj = secondOrderFilter(f1_length, 1, config.dt, start_vel,
,              adjusted_max_vel, impulse, time, TrapezoidalIntegration);
,
,    } else if (strategy == SCurvesStrategy) {
,      // How fast can we go given maximum acceleration and deceleration?
,      double adjusted_max_vel = Math.min(config.max_vel,
,              (-config.max_acc * config.max_acc + Math.sqrt(config.max_acc
,                      * config.max_acc * config.max_acc * config.max_acc
,                      + 4 * config.max_jerk * config.max_jerk * config.max_acc
,                      * goal_pos)) / (2 * config.max_jerk));
,
,      // Compute the length of the linear filters and impulse.
,      int f1_length = (int) Math.ceil((adjusted_max_vel
,              / config.max_acc) / config.dt);
,      int f2_length = (int) Math.ceil((config.max_acc
,              / config.max_jerk) / config.dt);
,      double impulse = (goal_pos / adjusted_max_vel) / config.dt;
,      int time = (int) (Math.ceil(f1_length + f2_length + impulse));
,      traj = secondOrderFilter(f1_length, f2_length, config.dt, 0,
,              adjusted_max_vel, impulse, time, TrapezoidalIntegration);
,
,    } else {
,      return null;
,    }
,
,    // Now assign headings by interpolating along the path.
,    // Don't do any wrapping because we don't know units.
,    double total_heading_change = goal_heading - start_heading;
,    for (int i = 0; i <MASK> traj.getNumSegments(); ++i) {
,      traj.segments_[i].heading = start_heading + total_heading_change
,              * (traj.segments_[i].pos)
,              / traj.segments_[traj.getNumSegments() - 1].pos;
,    }
,
,    return traj;
,  }
"
41e528e8-032e-4c9c-aedf-8273f5e22315,8bbf5589-187b-4b6c-bb88-d1a61a5cf76e,PERCENT,"PUBLIC,STATIC,void,main,LPAREN,String,LBRACKET,RBRACKET,args,RPAREN,LBRACE,Scanner,sc,EQ,NEW,Scanner,LPAREN,System,DOT,in,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""Pleas eenter a number."",RPAREN,SEMI,int,number,EQ,sc,DOT,nextInt,LPAREN,RPAREN,SEMI,long,divider,EQ,1,SEMI,WHILE,LPAREN,divider,LT,number,RPAREN,LBRACE,System,DOT,out,DOT,print,LPAREN,LPAREN,number,SLASH,divider,RPAREN,<MASK>,10,RPAREN,SEMI,divider,STAREQ,10,SEMI,RBRACE,RBRACE","	public static void main(String[] args) {
,		Scanner sc = new Scanner(System.in);
,		System.out.println(""Pleas eenter a number."");
,		int number = sc.nextInt();
,
,		// First Method - modifying the input
,		// String numAsString = """";
,		// while (number > 0) {
,		// numAsString += number <MASK> 10;
,		// number = number / 10;
,		// }
,		// System.out.println(numAsString);
,
,		// Second method - without modifying the input
,		long divider = 1;
,		while (divider < number) {
,			System.out.print((number / divider) % 10);
,			divider *= 10;
,		}
,
,	}
"
c359e8a5-c978-40ba-891d-70ece85f1271,bf642d1a-179a-4d49-92ef-f499e804a3d5,PERCENT,"PUBLIC,STATIC,void,main,LPAREN,String,LBRACKET,RBRACKET,args,RPAREN,LBRACE,r1,EQ,NEW,Thread,LPAREN,RPAREN,LBRACE,PUBLIC,void,run,LPAREN,RPAREN,LBRACE,WHILE,LPAREN,i,LT,100,RPAREN,LBRACE,IF,LPAREN,i,<MASK>,10,EQEQ,0,RPAREN,LBRACE,IF,LPAREN,r2,DOT,isAlive,LPAREN,RPAREN,RPAREN,r2,DOT,notify,LPAREN,RPAREN,SEMI,ELSE,r2,DOT,run,LPAREN,RPAREN,SEMI,RBRACE,i,PLUSPLUS,SEMI,RBRACE,r1,DOT,interrupt,LPAREN,RPAREN,SEMI,r2,DOT,interrupt,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,SEMI,r2,EQ,NEW,Thread,LPAREN,RPAREN,LBRACE,PUBLIC,void,run,LPAREN,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,i,RPAREN,SEMI,TRY,LBRACE,IF,LPAREN,r2,DOT,isAlive,LPAREN,RPAREN,RPAREN,LBRACE,r2,DOT,wait,LPAREN,RPAREN,SEMI,r1,DOT,notify,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,CATCH,LPAREN,InterruptedException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,SEMI,r1,DOT,run,LPAREN,RPAREN,SEMI,RBRACE","    public static void main(String[] args){
,        r1 = new Thread() {
,            public void run() {
,                while (i < 100){
,                    if (i <MASK> 10 == 0) {
,                        if (r2.isAlive())
,                            r2.notify();
,                        else
,                            r2.run();
,                    }
,                    i++;
,                }
,                r1.interrupt();
,                r2.interrupt();
,            }
,        };
,        r2 = new Thread() {
,            public void run() {
,                System.out.println(i);
,                try {
,                    if (r2.isAlive()){
,                        r2.wait();
,                        r1.notify();
,                    }
,                } catch (InterruptedException e) {
,                    e.printStackTrace();
,                }
,            }
,        };
,        r1.run();
,    }
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,e13dac64-cc56-4641-bc07-da9d3d080280,LT,"PUBLIC,STATIC,int,getHue,LPAREN,int,r,COMMA,int,g,COMMA,int,b,RPAREN,LBRACE,double,alpha,EQ,2,STAR,r,SUB,g,SUB,b,SEMI,double,beta,EQ,ROOT3,STAR,LPAREN,g,SUB,b,RPAREN,SEMI,int,hue,EQ,LPAREN,int,RPAREN,Math,DOT,toDegrees,LPAREN,Math,DOT,atan2,LPAREN,beta,COMMA,alpha,RPAREN,RPAREN,SEMI,IF,LPAREN,hue,<MASK>,0,RPAREN,hue,PLUSEQ,360,SEMI,RETURN,hue,SEMI,RBRACE","    public static int getHue(int r, int g, int b)
,    {
,        double alpha = 2 * r - g - b;
,        double beta = ROOT3 * (g - b);
,                
,        int hue = (int) Math.toDegrees(Math.atan2(beta, alpha));
,        if (hue <MASK> 0)
,            hue += 360;
,        return hue;
,    }
"
ab518c05-62c4-49ea-9eaa-d418788693b1,cfad270a-ab57-425e-9580-66853b6a3070,PLUS,"MONKEYS_AT,Override,PROTECTED,long,doOperation,LPAREN,long,leftValue,COMMA,long,rightValue,RPAREN,LBRACE,RETURN,leftValue,<MASK>,rightValue,SEMI,RBRACE","    @Override
,    protected long doOperation(long leftValue, long rightValue) {
,        return leftValue <MASK> rightValue;
,    }
"
6de67f18-4fd9-4000-8d6e-c3576cb5962a,164ef79f-0efa-4f43-8dca-895d5b307f91,PERCENT,"STATIC,int,LBRACKET,RBRACKET,fit_with_zero,LPAREN,int,LBRACKET,RBRACKET,array,RPAREN,LBRACE,int,new_len,EQ,array,DOT,length,SEMI,WHILE,LPAREN,new_len,<MASK>,16,BANGEQ,0,RPAREN,new_len,PLUSEQ,1,SEMI,int,LBRACKET,RBRACKET,new_array,EQ,NEW,int,LBRACKET,new_len,RBRACKET,SEMI,System,DOT,arraycopy,LPAREN,array,COMMA,0,COMMA,new_array,COMMA,0,COMMA,array,DOT,length,RPAREN,SEMI,RETURN,new_array,SEMI,RBRACE","    static int[] fit_with_zero(int[] array) {
,        int new_len = array.length;
,        while (new_len <MASK> 16 != 0)
,            new_len += 1;
,        int[] new_array = new int[new_len];
,        System.arraycopy(array, 0, new_array, 0, array.length);
,        return new_array;
,    }
"
e03d1a2f-9ec0-4127-b57f-aac96a5f146a,568557df-f4c2-4411-b5c1-4db0ca84803b,GTEQ,"PUBLIC,STATIC,void,main,LPAREN,String,LBRACKET,RBRACKET,args,RPAREN,THROWS,SocketException,COMMA,IOException,LBRACE,IF,LPAREN,args,DOT,length,BANGEQ,2,AMPAMP,args,DOT,length,BANGEQ,3,AMPAMP,args,DOT,length,BANGEQ,5,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""Usage: MessageThreading <hostname> <groupname> [<article specifier> [<user> <password>]]"",RPAREN,SEMI,RETURN,SEMI,RBRACE,String,hostname,EQ,args,LBRACKET,0,RBRACKET,SEMI,String,newsgroup,EQ,args,LBRACKET,1,RBRACKET,SEMI,String,articleSpec,EQ,args,DOT,length,<MASK>,3,QUES,args,LBRACKET,2,RBRACKET,COLON,null,SEMI,NNTPClient,client,EQ,NEW,NNTPClient,LPAREN,RPAREN,SEMI,client,DOT,addProtocolCommandListener,LPAREN,NEW,PrintCommandListener,LPAREN,NEW,PrintWriter,LPAREN,System,DOT,out,RPAREN,COMMA,true,RPAREN,RPAREN,SEMI,client,DOT,connect,LPAREN,hostname,RPAREN,SEMI,IF,LPAREN,args,DOT,length,EQEQ,5,RPAREN,LBRACE,String,user,EQ,args,LBRACKET,3,RBRACKET,SEMI,String,password,EQ,args,LBRACKET,4,RBRACKET,SEMI,IF,LPAREN,BANG,client,DOT,authenticate,LPAREN,user,COMMA,password,RPAREN,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""Authentication failed for user "",PLUS,user,PLUS,""!"",RPAREN,SEMI,System,DOT,exit,LPAREN,1,RPAREN,SEMI,RBRACE,RBRACE,NewsgroupInfo,group,EQ,NEW,NewsgroupInfo,LPAREN,RPAREN,SEMI,client,DOT,selectNewsgroup,LPAREN,newsgroup,COMMA,group,RPAREN,SEMI,BufferedReader,br,SEMI,String,line,SEMI,IF,LPAREN,articleSpec,BANGEQ,null,RPAREN,LBRACE,br,EQ,LPAREN,BufferedReader,RPAREN,client,DOT,retrieveArticleHeader,LPAREN,articleSpec,RPAREN,SEMI,RBRACE,ELSE,LBRACE,long,articleNum,EQ,group,DOT,getLastArticleLong,LPAREN,RPAREN,SEMI,br,EQ,client,DOT,retrieveArticleHeader,LPAREN,articleNum,RPAREN,SEMI,RBRACE,IF,LPAREN,br,BANGEQ,null,RPAREN,LBRACE,WHILE,LPAREN,LPAREN,line,EQ,br,DOT,readLine,LPAREN,RPAREN,RPAREN,BANGEQ,null,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,line,RPAREN,SEMI,RBRACE,br,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,IF,LPAREN,articleSpec,BANGEQ,null,RPAREN,LBRACE,br,EQ,LPAREN,BufferedReader,RPAREN,client,DOT,retrieveArticleBody,LPAREN,articleSpec,RPAREN,SEMI,RBRACE,ELSE,LBRACE,long,articleNum,EQ,group,DOT,getLastArticleLong,LPAREN,RPAREN,SEMI,br,EQ,client,DOT,retrieveArticleBody,LPAREN,articleNum,RPAREN,SEMI,RBRACE,IF,LPAREN,br,BANGEQ,null,RPAREN,LBRACE,WHILE,LPAREN,LPAREN,line,EQ,br,DOT,readLine,LPAREN,RPAREN,RPAREN,BANGEQ,null,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,line,RPAREN,SEMI,RBRACE,br,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,RBRACE","    public static void main(String[] args) throws SocketException, IOException {
,
,        if (args.length != 2 && args.length != 3 && args.length != 5) {
,            System.out.println(""Usage: MessageThreading <hostname> <groupname> [<article specifier> [<user> <password>]]"");
,            return;
,        }
,
,        String hostname = args[0];
,        String newsgroup = args[1];
,        // Article specifier can be numeric or Id in form <m.n.o.x@host>
,        String articleSpec = args.length <MASK> 3 ? args[2] : null;
,
,        NNTPClient client = new NNTPClient();
,        client.addProtocolCommandListener(new PrintCommandListener(new PrintWriter(System.out), true));
,        client.connect(hostname);
,
,        if (args.length == 5) { // Optional auth
,            String user = args[3];
,            String password = args[4];
,            if(!client.authenticate(user, password)) {
,                System.out.println(""Authentication failed for user "" + user + ""!"");
,                System.exit(1);
,            }
,        }
,
,        NewsgroupInfo group = new NewsgroupInfo();
,        client.selectNewsgroup(newsgroup, group);
,
,        BufferedReader br;
,        String line;
,        if (articleSpec != null) {
,            br = (BufferedReader) client.retrieveArticleHeader(articleSpec);
,        } else {
,            long articleNum = group.getLastArticleLong();
,            br = client.retrieveArticleHeader(articleNum);
,        }
,        if (br != null) {
,            while((line=br.readLine()) != null) {
,                System.out.println(line);
,            }
,            br.close();
,        }
,        if (articleSpec != null) {
,            br = (BufferedReader) client.retrieveArticleBody(articleSpec);
,        } else {
,            long articleNum = group.getLastArticleLong();
,            br = client.retrieveArticleBody(articleNum);
,        }
,        if (br != null) {
,            while((line=br.readLine()) != null) {
,                System.out.println(line);
,            }
,            br.close();
,        }
,    }
"
8ec044ff-9e5c-46c4-ad39-ccc8ad42dd87,7a7bbf0c-4418-4be5-9b0f-c86984ebaaf2,GT,"PUBLIC,receiveStock,LPAREN,FINAL,inventory,inv,RPAREN,LBRACE,setAlwaysOnTop,LPAREN,true,RPAREN,SEMI,setResizable,LPAREN,false,RPAREN,SEMI,setTitle,LPAREN,""Receive Stock"",RPAREN,SEMI,setDefaultCloseOperation,LPAREN,JFrame,DOT,DISPOSE_ON_CLOSE,RPAREN,SEMI,setBounds,LPAREN,100,COMMA,100,COMMA,277,COMMA,226,RPAREN,SEMI,contentPane,EQ,NEW,JPanel,LPAREN,RPAREN,SEMI,contentPane,DOT,setBorder,LPAREN,NEW,EmptyBorder,LPAREN,5,COMMA,5,COMMA,5,COMMA,5,RPAREN,RPAREN,SEMI,setContentPane,LPAREN,contentPane,RPAREN,SEMI,contentPane,DOT,setLayout,LPAREN,null,RPAREN,SEMI,JLabel,lblBarcode,EQ,NEW,JLabel,LPAREN,""Barcode:"",RPAREN,SEMI,lblBarcode,DOT,setBounds,LPAREN,6,COMMA,12,COMMA,61,COMMA,16,RPAREN,SEMI,contentPane,DOT,add,LPAREN,lblBarcode,RPAREN,SEMI,idField,EQ,NEW,JTextField,LPAREN,RPAREN,SEMI,idField,DOT,addFocusListener,LPAREN,NEW,FocusAdapter,LPAREN,RPAREN,LBRACE,MONKEYS_AT,Override,PUBLIC,void,focusLost,LPAREN,FocusEvent,arg0,RPAREN,LBRACE,IF,LPAREN,inv,DOT,exists,LPAREN,idField,DOT,getText,LPAREN,RPAREN,RPAREN,RPAREN,LBRACE,String,id,EQ,idField,DOT,getText,LPAREN,RPAREN,SEMI,oldstockField,DOT,setText,LPAREN,Integer,DOT,toString,LPAREN,inv,DOT,getQuantity,LPAREN,id,RPAREN,RPAREN,RPAREN,SEMI,receivField,DOT,setText,LPAREN,""0"",RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,idField,DOT,getText,LPAREN,RPAREN,DOT,matches,LPAREN,"""",RPAREN,RPAREN,LBRACE,RBRACE,ELSE,LBRACE,NEW,alert,LPAREN,""No such item"",RPAREN,DOT,setVisible,LPAREN,true,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,RPAREN,SEMI,idField,DOT,addActionListener,LPAREN,NEW,ActionListener,LPAREN,RPAREN,LBRACE,PUBLIC,void,actionPerformed,LPAREN,ActionEvent,e,RPAREN,LBRACE,IF,LPAREN,inv,DOT,exists,LPAREN,idField,DOT,getText,LPAREN,RPAREN,RPAREN,RPAREN,LBRACE,String,id,EQ,idField,DOT,getText,LPAREN,RPAREN,SEMI,oldstockField,DOT,setText,LPAREN,Integer,DOT,toString,LPAREN,inv,DOT,getQuantity,LPAREN,id,RPAREN,RPAREN,RPAREN,SEMI,receivField,DOT,setText,LPAREN,""0"",RPAREN,SEMI,RBRACE,ELSE,LBRACE,NEW,alert,LPAREN,""No such item"",RPAREN,DOT,setVisible,LPAREN,true,RPAREN,SEMI,idField,DOT,requestFocus,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,RPAREN,SEMI,idField,DOT,setBounds,LPAREN,132,COMMA,6,COMMA,134,COMMA,28,RPAREN,SEMI,contentPane,DOT,add,LPAREN,idField,RPAREN,SEMI,idField,DOT,setColumns,LPAREN,10,RPAREN,SEMI,JLabel,lblReceiveAmount,EQ,NEW,JLabel,LPAREN,""Receive Amount:"",RPAREN,SEMI,lblReceiveAmount,DOT,setBounds,LPAREN,6,COMMA,52,COMMA,110,COMMA,16,RPAREN,SEMI,contentPane,DOT,add,LPAREN,lblReceiveAmount,RPAREN,SEMI,receivField,EQ,NEW,JTextField,LPAREN,RPAREN,SEMI,receivField,DOT,setBounds,LPAREN,132,COMMA,46,COMMA,134,COMMA,28,RPAREN,SEMI,contentPane,DOT,add,LPAREN,receivField,RPAREN,SEMI,receivField,DOT,setColumns,LPAREN,10,RPAREN,SEMI,JLabel,lblCurrentStock,EQ,NEW,JLabel,LPAREN,""Current Stock: "",RPAREN,SEMI,lblCurrentStock,DOT,setBounds,LPAREN,6,COMMA,85,COMMA,110,COMMA,16,RPAREN,SEMI,contentPane,DOT,add,LPAREN,lblCurrentStock,RPAREN,SEMI,oldstockField,EQ,NEW,JTextField,LPAREN,RPAREN,SEMI,oldstockField,DOT,setEnabled,LPAREN,false,RPAREN,SEMI,oldstockField,DOT,setEditable,LPAREN,false,RPAREN,SEMI,oldstockField,DOT,setBounds,LPAREN,132,COMMA,79,COMMA,134,COMMA,28,RPAREN,SEMI,contentPane,DOT,add,LPAREN,oldstockField,RPAREN,SEMI,oldstockField,DOT,setColumns,LPAREN,10,RPAREN,SEMI,JButton,btnApplyChange,EQ,NEW,JButton,LPAREN,""Apply Change"",RPAREN,SEMI,btnApplyChange,DOT,addActionListener,LPAREN,NEW,ActionListener,LPAREN,RPAREN,LBRACE,PUBLIC,void,actionPerformed,LPAREN,ActionEvent,e,RPAREN,LBRACE,int,rec,EQ,Integer,DOT,parseInt,LPAREN,receivField,DOT,getText,LPAREN,RPAREN,RPAREN,SEMI,String,id,EQ,idField,DOT,getText,LPAREN,RPAREN,SEMI,IF,LPAREN,rec,<MASK>,0,AMPAMP,inv,DOT,exists,LPAREN,id,RPAREN,RPAREN,LBRACE,inv,DOT,addQuantity,LPAREN,rec,COMMA,id,RPAREN,SEMI,loaders,DOT,saveInventory,LPAREN,inv,RPAREN,SEMI,oldstockField,DOT,setText,LPAREN,Integer,DOT,toString,LPAREN,inv,DOT,getQuantity,LPAREN,id,RPAREN,RPAREN,RPAREN,SEMI,receivField,DOT,setText,LPAREN,""0"",RPAREN,SEMI,inventoryReport,invRep,EQ,loaders,DOT,loadInventoryReport,LPAREN,RPAREN,SEMI,invRep,DOT,addInvToLog,LPAREN,inv,RPAREN,SEMI,loaders,DOT,saveInventoryReport,LPAREN,invRep,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,RPAREN,SEMI,btnApplyChange,DOT,setBounds,LPAREN,6,COMMA,158,COMMA,117,COMMA,29,RPAREN,SEMI,contentPane,DOT,add,LPAREN,btnApplyChange,RPAREN,SEMI,JButton,btnClose,EQ,NEW,JButton,LPAREN,""Close"",RPAREN,SEMI,btnClose,DOT,addActionListener,LPAREN,NEW,ActionListener,LPAREN,RPAREN,LBRACE,PUBLIC,void,actionPerformed,LPAREN,ActionEvent,e,RPAREN,LBRACE,setVisible,LPAREN,false,RPAREN,SEMI,dispose,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,RPAREN,SEMI,btnClose,DOT,setBounds,LPAREN,132,COMMA,158,COMMA,134,COMMA,29,RPAREN,SEMI,contentPane,DOT,add,LPAREN,btnClose,RPAREN,SEMI,textField,EQ,NEW,JTextField,LPAREN,RPAREN,SEMI,textField,DOT,setEnabled,LPAREN,false,RPAREN,SEMI,textField,DOT,setEditable,LPAREN,false,RPAREN,SEMI,textField,DOT,setBounds,LPAREN,132,COMMA,118,COMMA,134,COMMA,29,RPAREN,SEMI,contentPane,DOT,add,LPAREN,textField,RPAREN,SEMI,textField,DOT,setColumns,LPAREN,10,RPAREN,SEMI,JLabel,lblSupplier,EQ,NEW,JLabel,LPAREN,""Supplier:"",RPAREN,SEMI,lblSupplier,DOT,setBounds,LPAREN,6,COMMA,125,COMMA,46,COMMA,14,RPAREN,SEMI,contentPane,DOT,add,LPAREN,lblSupplier,RPAREN,SEMI,RBRACE","	public receiveStock(final inventory inv) {
,		setAlwaysOnTop(true);
,		setResizable(false);
,		setTitle(""Receive Stock"");
,		setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
,		setBounds(100, 100, 277, 226);
,		contentPane = new JPanel();
,		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
,		setContentPane(contentPane);
,		contentPane.setLayout(null);
,		
,		JLabel lblBarcode = new JLabel(""Barcode:"");
,		lblBarcode.setBounds(6, 12, 61, 16);
,		contentPane.add(lblBarcode);
,		
,		idField = new JTextField();
,		idField.addFocusListener(new FocusAdapter() {
,			@Override
,			public void focusLost(FocusEvent arg0) {
,				if(inv.exists(idField.getText()))
,				{
,					String id = idField.getText();
,					oldstockField.setText(Integer.toString(inv.getQuantity(id)));
,					receivField.setText(""0"");
,				}else if(idField.getText().matches(""""))
,					{
,						//nth
,					}else{
,					
,					new alert(""No such item"").setVisible(true);
,				}
,			}
,		});
,		idField.addActionListener(new ActionListener() {
,			public void actionPerformed(ActionEvent e) {
,				if(inv.exists(idField.getText()))
,				{
,					String id = idField.getText();
,					oldstockField.setText(Integer.toString(inv.getQuantity(id)));
,					receivField.setText(""0"");
,				}else{
,					new alert(""No such item"").setVisible(true);
,					idField.requestFocus();
,				}
,			}
,		});
,		idField.setBounds(132, 6, 134, 28);
,		contentPane.add(idField);
,		idField.setColumns(10);
,		
,		JLabel lblReceiveAmount = new JLabel(""Receive Amount:"");
,		lblReceiveAmount.setBounds(6, 52, 110, 16);
,		contentPane.add(lblReceiveAmount);
,		
,		receivField = new JTextField();
,		receivField.setBounds(132, 46, 134, 28);
,		contentPane.add(receivField);
,		receivField.setColumns(10);
,		
,		JLabel lblCurrentStock = new JLabel(""Current Stock: "");
,		lblCurrentStock.setBounds(6, 85, 110, 16);
,		contentPane.add(lblCurrentStock);
,		
,		oldstockField = new JTextField();
,		oldstockField.setEnabled(false);
,		oldstockField.setEditable(false);
,		oldstockField.setBounds(132, 79, 134, 28);
,		contentPane.add(oldstockField);
,		oldstockField.setColumns(10);
,		
,		JButton btnApplyChange = new JButton(""Apply Change"");
,		btnApplyChange.addActionListener(new ActionListener() {
,			public void actionPerformed(ActionEvent e) {
,				int rec = Integer.parseInt(receivField.getText());
,				String id = idField.getText();
,				if(rec<MASK>0 && inv.exists(id))
,				{
,					inv.addQuantity(rec, id);
,					loaders.saveInventory(inv);
,					oldstockField.setText(Integer.toString(inv.getQuantity(id)));
,					receivField.setText(""0"");
,					
,					//Save to Report
,					inventoryReport invRep = loaders.loadInventoryReport();
,					invRep.addInvToLog(inv);
,					loaders.saveInventoryReport(invRep);
,				}
,			}
,		});
,		btnApplyChange.setBounds(6, 158, 117, 29);
,		contentPane.add(btnApplyChange);
,		
,		JButton btnClose = new JButton(""Close"");
,		btnClose.addActionListener(new ActionListener() {
,			public void actionPerformed(ActionEvent e) {
,				setVisible(false);
,				dispose();
,			}
,		});
,		btnClose.setBounds(132, 158, 134, 29);
,		contentPane.add(btnClose);
,		
,		textField = new JTextField();
,		textField.setEnabled(false);
,		textField.setEditable(false);
,		textField.setBounds(132, 118, 134, 29);
,		contentPane.add(textField);
,		textField.setColumns(10);
,		
,		JLabel lblSupplier = new JLabel(""Supplier:"");
,		lblSupplier.setBounds(6, 125, 46, 14);
,		contentPane.add(lblSupplier);
,	}
"
33a4da69-3c87-4617-ac37-92c20f86f62c,5ca481cf-40bd-4be9-9874-f23e366253fe,PLUS,"PUBLIC,NameEditor,LPAREN,String,title,COMMA,String,message,COMMA,String,name,RPAREN,LBRACE,this,DOT,setTitle,LPAREN,title,RPAREN,SEMI,this,DOT,setModal,LPAREN,true,RPAREN,SEMI,JPanel,window,EQ,NEW,JPanel,LPAREN,RPAREN,SEMI,window,DOT,setLayout,LPAREN,NEW,BorderLayout,LPAREN,RPAREN,RPAREN,SEMI,window,DOT,add,LPAREN,NEW,BlankPanel,LPAREN,5,COMMA,true,RPAREN,COMMA,BorderLayout,DOT,NORTH,RPAREN,SEMI,window,DOT,add,LPAREN,NEW,BlankPanel,LPAREN,2,COMMA,true,RPAREN,COMMA,BorderLayout,DOT,EAST,RPAREN,SEMI,window,DOT,add,LPAREN,NEW,BlankPanel,LPAREN,5,COMMA,true,RPAREN,COMMA,BorderLayout,DOT,SOUTH,RPAREN,SEMI,window,DOT,add,LPAREN,NEW,BlankPanel,LPAREN,2,COMMA,true,RPAREN,COMMA,BorderLayout,DOT,WEST,RPAREN,SEMI,JPanel,p,EQ,NEW,JPanel,LPAREN,RPAREN,SEMI,p,DOT,add,LPAREN,NEW,JLabel,LPAREN,message,<MASK>,"":"",RPAREN,RPAREN,SEMI,p,DOT,add,LPAREN,nameField,RPAREN,SEMI,this,DOT,name,EQ,name,SEMI,window,DOT,add,LPAREN,p,RPAREN,SEMI,JPanel,ip,EQ,NEW,JPanel,LPAREN,RPAREN,SEMI,ip,DOT,add,LPAREN,NEW,JLabel,LPAREN,""information:"",RPAREN,RPAREN,SEMI,ip,DOT,add,LPAREN,infoField,RPAREN,SEMI,infoField,DOT,setEditable,LPAREN,false,RPAREN,SEMI,add,LPAREN,ip,COMMA,BorderLayout,DOT,NORTH,RPAREN,SEMI,add,LPAREN,window,RPAREN,SEMI,add,LPAREN,getCtlPanel,LPAREN,RPAREN,COMMA,BorderLayout,DOT,SOUTH,RPAREN,SEMI,this,DOT,setDefaultCloseOperation,LPAREN,JDialog,DOT,HIDE_ON_CLOSE,RPAREN,SEMI,pack,LPAREN,RPAREN,SEMI,this,DOT,setLocationRelativeTo,LPAREN,null,RPAREN,SEMI,RBRACE","	public NameEditor(String title, String message, String name) {
,		this.setTitle(title);
,		this.setModal(true);
,
,		JPanel window = new JPanel();
,		window.setLayout(new BorderLayout());
,
,		window.add(new BlankPanel(5, true), BorderLayout.NORTH);
,		window.add(new BlankPanel(2, true), BorderLayout.EAST);
,		window.add(new BlankPanel(5, true), BorderLayout.SOUTH);
,		window.add(new BlankPanel(2, true), BorderLayout.WEST);
,
,		JPanel p = new JPanel();
,		p.add(new JLabel(message <MASK> "":""));
,		p.add(nameField);
,		
,		this.name = name;
,
,		window.add(p);
,
,		JPanel ip = new JPanel();
,		ip.add(new JLabel(""information:""));
,		ip.add(infoField);
,		infoField.setEditable(false);
,
,		add(ip, BorderLayout.NORTH);
,
,		add(window);
,
,		add(getCtlPanel(), BorderLayout.SOUTH);
,
,		this.setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);
,		pack();
,		this.setLocationRelativeTo(null);
,	}
"
7a6d4ee7-a11c-445d-8f58-7963e611bee0,34f10e09-1b37-4f31-a991-34f0fc6d848d,SUB,"PUBLIC,void,actionPerformed,LPAREN,ActionEvent,e,RPAREN,LBRACE,IF,LPAREN,txtQuestion,DOT,getText,LPAREN,RPAREN,DOT,length,LPAREN,RPAREN,EQEQ,0,BARBAR,txtAnswerA,DOT,getText,LPAREN,RPAREN,DOT,length,LPAREN,RPAREN,EQEQ,0,BARBAR,txtAnswerB,DOT,getText,LPAREN,RPAREN,DOT,length,LPAREN,RPAREN,EQEQ,0,BARBAR,txtAnswerC,DOT,getText,LPAREN,RPAREN,DOT,length,LPAREN,RPAREN,EQEQ,0,BARBAR,btnGroup,DOT,getSelection,LPAREN,RPAREN,EQEQ,null,RPAREN,LBRACE,Toolkit,DOT,getDefaultToolkit,LPAREN,RPAREN,DOT,beep,LPAREN,RPAREN,SEMI,RETURN,SEMI,RBRACE,String,question,EQ,txtQuestion,DOT,getText,LPAREN,RPAREN,SEMI,int,rightAnswer,EQ,<MASK>,1,SEMI,Answer,LBRACKET,RBRACKET,answers,EQ,NEW,Answer,LBRACKET,3,RBRACKET,SEMI,answers,LBRACKET,0,RBRACKET,EQ,NEW,Answer,LPAREN,0,COMMA,txtAnswerA,DOT,getText,LPAREN,RPAREN,COMMA,rightA,DOT,isSelected,LPAREN,RPAREN,RPAREN,SEMI,answers,LBRACKET,1,RBRACKET,EQ,NEW,Answer,LPAREN,1,COMMA,txtAnswerB,DOT,getText,LPAREN,RPAREN,COMMA,rightB,DOT,isSelected,LPAREN,RPAREN,RPAREN,SEMI,answers,LBRACKET,2,RBRACKET,EQ,NEW,Answer,LPAREN,2,COMMA,txtAnswerC,DOT,getText,LPAREN,RPAREN,COMMA,rightC,DOT,isSelected,LPAREN,RPAREN,RPAREN,SEMI,rightAnswer,EQ,getRightAnswer,LPAREN,answers,RPAREN,SEMI,Question,quest,EQ,NEW,Question,LPAREN,question,COMMA,answers,COMMA,rightAnswer,RPAREN,SEMI,questions,DOT,add,LPAREN,quest,RPAREN,SEMI,resetQuestionPane,LPAREN,RPAREN,SEMI,RBRACE","			public void actionPerformed(ActionEvent e) 
,			{
,				if(txtQuestion.getText().length() == 0 || txtAnswerA.getText().length() == 0 || txtAnswerB.getText().length() == 0 || txtAnswerC.getText().length() == 0 || btnGroup.getSelection() == null)
,				{
,					Toolkit.getDefaultToolkit().beep();
,					return;
,				}
,				
,				String question = txtQuestion.getText();
,				
,				int rightAnswer = <MASK>1;
,				Answer[] answers = new Answer[3];
,				answers[0] = new Answer(0, txtAnswerA.getText(), rightA.isSelected());
,				answers[1] = new Answer(1, txtAnswerB.getText(), rightB.isSelected());
,				answers[2] = new Answer(2, txtAnswerC.getText(), rightC.isSelected());
,				rightAnswer = getRightAnswer(answers);					
,				
,				Question quest = new Question(question, answers, rightAnswer);
,				questions.add(quest);
,				resetQuestionPane();
,			}
"
7adec7d8-cee7-4225-a9f6-43a8dd4e76a6,880f95fb-6adc-4729-a7c2-ca0e18656989,STAR,"PUBLIC,void,UpdateStopSell,LPAREN,String,product,COMMA,MarketData,bid,COMMA,MarketData,ask,RPAREN,LBRACE,List,LT,PendingOrder,GT,list,EQ,this,DOT,getStopSellOrders,LPAREN,product,RPAREN,SEMI,FOR,LPAREN,PendingOrder,po,COLON,list,RPAREN,LBRACE,IF,LPAREN,bid,DOT,getLow,LPAREN,RPAREN,LTEQ,po,DOT,getPrice,LPAREN,RPAREN,RPAREN,LBRACE,double,price,EQ,0,SEMI,IF,LPAREN,bid,DOT,getOpen,LPAREN,RPAREN,LTEQ,po,DOT,getPrice,LPAREN,RPAREN,RPAREN,LBRACE,price,EQ,bid,DOT,getOpen,LPAREN,RPAREN,SEMI,RBRACE,ELSE,LBRACE,price,EQ,po,DOT,getPrice,LPAREN,RPAREN,SEMI,RBRACE,this,DOT,MarketSell,LPAREN,po,DOT,getProduct,LPAREN,RPAREN,COMMA,bid,DOT,getStart,LPAREN,RPAREN,COMMA,price,COMMA,po,DOT,getAmount,LPAREN,RPAREN,<MASK>,SUB,1,RPAREN,SEMI,this,DOT,DeletePendingOrder,LPAREN,po,RPAREN,SEMI,RBRACE,RBRACE,RBRACE","	public void UpdateStopSell(String product, MarketData bid, MarketData ask) {
,        List<PendingOrder> list = this.getStopSellOrders(product);
,        for(PendingOrder po: list) {
,            if(bid.getLow() <= po.getPrice()) {
,                double price = 0;
,                if(bid.getOpen() <= po.getPrice()) {
,                    price = bid.getOpen();
,                }
,                else {
,                    price = po.getPrice();
,                }
,                this.MarketSell(po.getProduct(), bid.getStart(), price, po.getAmount() <MASK> -1);
,                this.DeletePendingOrder(po);
,                //System.out.println(""stop sell ===> market sell"");
,            }
,        }
,    }
"
6de67f18-4fd9-4000-8d6e-c3576cb5962a,75ca7bd2-d7e7-4195-b847-8a1ad13bf586,PERCENT,"STATIC,int,LBRACKET,RBRACKET,str2binl,LPAREN,String,str,RPAREN,LBRACE,int,LBRACKET,RBRACKET,bin,EQ,NEW,int,LBRACKET,LPAREN,str,DOT,length,LPAREN,RPAREN,STAR,CHARSIZE,GTGT,5,RPAREN,PLUS,1,RBRACKET,SEMI,int,mask,EQ,LPAREN,1,LTLT,CHARSIZE,RPAREN,SUB,1,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,str,DOT,length,LPAREN,RPAREN,STAR,CHARSIZE,SEMI,i,PLUSEQ,CHARSIZE,RPAREN,LBRACE,bin,LBRACKET,i,GTGT,5,RBRACKET,BAREQ,LPAREN,str,DOT,charAt,LPAREN,i,SLASH,CHARSIZE,RPAREN,AMP,mask,RPAREN,LTLT,LPAREN,i,<MASK>,32,RPAREN,SEMI,RBRACE,RETURN,bin,SEMI,RBRACE","    static int[] str2binl(String str) {
,        int[] bin = new int[(str.length() * CHARSIZE >> 5) + 1];
,        int mask = (1 << CHARSIZE) - 1;
,        for (int i = 0; i < str.length() * CHARSIZE; i += CHARSIZE) {
,            bin[i >> 5] |= (str.charAt(i / CHARSIZE) & mask) << (i <MASK> 32);
,        }
,        return bin;
,    }
"
9b07119d-5d87-44cb-94ac-77a9d4fc6019,fd44b05d-143e-4c3a-9594-98437004e33d,GT,"PRIVATE,int,insert,LPAREN,FINAL,BeanMissatge,bean,RPAREN,LBRACE,String,SQL1,EQ,""INSERT INTO sig_missatgeria (idEntrevista,destinatari,idMateria,materia,actitud,notes,feina,comentaris,dataContestat,idMensajeProfesor) "",PLUS,"" VALUES(?,?,?,?,?,?,?,?,?,?)"",SEMI,Object,LBRACKET,RBRACKET,objs,EQ,NEW,Object,LBRACKET,RBRACKET,LBRACE,bean,DOT,idEntrevista,COMMA,bean,DOT,destinatari_abrev,COMMA,bean,DOT,idMateria,COMMA,bean,DOT,materia,COMMA,bean,DOT,actitud,COMMA,bean,DOT,notes,COMMA,bean,DOT,feina,COMMA,bean,DOT,comentari,COMMA,bean,DOT,dataContestat,COMMA,bean,DOT,idMensajeProfesor,RBRACE,SEMI,int,nup,EQ,client,DOT,getMysql,LPAREN,RPAREN,DOT,preparedUpdateID,LPAREN,SQL1,COMMA,objs,RPAREN,SEMI,IF,LPAREN,nup,<MASK>,0,RPAREN,LBRACE,bean,DOT,setId,LPAREN,nup,RPAREN,SEMI,RBRACE,RETURN,nup,SEMI,RBRACE","    private int insert(final BeanMissatge bean) {
,        
,        String SQL1 = ""INSERT INTO sig_missatgeria (idEntrevista,destinatari,idMateria,materia,actitud,notes,feina,comentaris,dataContestat,idMensajeProfesor) ""
,                + "" VALUES(?,?,?,?,?,?,?,?,?,?)"";
,     
,        Object[] objs = new Object[]{bean.idEntrevista, bean.destinatari_abrev, bean.idMateria,
,            bean.materia, bean.actitud, bean.notes, bean.feina, bean.comentari, bean.dataContestat, bean.idMensajeProfesor};
,        int nup = client.getMysql().preparedUpdateID(SQL1, objs);
,        if(nup<MASK>0)
,        {
,            bean.setId(nup);
,        }
,        return nup;
,    }
"
27817d3e-5449-46fd-a403-1ed403e709bb,80d44151-b6eb-4290-af00-dea49b0ff910,GTEQ,"PUBLIC,List,LT,Entry,GT,getFilesForPiece,LPAREN,int,pieceIndex,RPAREN,LBRACE,IF,LPAREN,pieceIndex,LT,0,BAR,pieceIndex,<MASK>,pieceCount,RPAREN,LBRACE,RETURN,null,SEMI,RBRACE,RETURN,piecesToFiles,DOT,get,LPAREN,pieceIndex,RPAREN,SEMI,RBRACE","    public List<Entry> getFilesForPiece (int pieceIndex) {
,        if (pieceIndex < 0 | pieceIndex <MASK> pieceCount) {
,            return null;
,        }
,
,        return piecesToFiles.get(pieceIndex);
,    }
"
1b82c97a-fe19-4584-bdbc-4f13bb123c10,d1591375-ed4c-4aaf-9ff5-ba087d790329,GTEQ,"PUBLIC,STATIC,double,abs,LPAREN,Complex,z,RPAREN,LBRACE,double,x,EQ,z,DOT,real,SEMI,double,y,EQ,z,DOT,imag,SEMI,double,absX,EQ,Math,DOT,abs,LPAREN,x,RPAREN,SEMI,double,absY,EQ,Math,DOT,abs,LPAREN,y,RPAREN,SEMI,IF,LPAREN,absX,EQEQ,0.0,AMPAMP,absY,EQEQ,0.0,RPAREN,LBRACE,RETURN,0.0,SEMI,RBRACE,ELSE,IF,LPAREN,absX,<MASK>,absY,RPAREN,LBRACE,double,d,EQ,y,SLASH,x,SEMI,RETURN,absX,STAR,Math,DOT,sqrt,LPAREN,1.0,PLUS,d,STAR,d,RPAREN,SEMI,RBRACE,ELSE,LBRACE,double,d,EQ,x,SLASH,y,SEMI,RETURN,absY,STAR,Math,DOT,sqrt,LPAREN,1.0,PLUS,d,STAR,d,RPAREN,SEMI,RBRACE,RBRACE","    public static double abs(Complex z) {
,        double x = z.real;
,        double y = z.imag;
,        
,        double absX =  Math.abs(x);
,        double absY =  Math.abs(y);
,
,        if (absX == 0.0 && absY == 0.0) {                                      // !!! Numerical Recipes, mmm?
,            return  0.0;
,        } else if (absX <MASK> absY) {
,            double d =  y / x;
,            return  absX*Math.sqrt(1.0 + d*d);
,        } else {
,            double d =  x / y;
,            return  absY*Math.sqrt(1.0 + d*d);
,        }
,    }
"
113c5414-6c55-466b-b879-a350ab6e0ca2,204f28c2-9c41-4c73-a42c-1f172f716064,EQ,"PUBLIC,void,setTextCollected,LPAREN,int,textCollected,RPAREN,LBRACE,this,DOT,textCollected,<MASK>,textCollected,SEMI,RBRACE","	public void setTextCollected(int textCollected) {
,		this.textCollected <MASK> textCollected;
,	}
"
9c253d2b-e626-4f21-a850-dfb022369350,1aba53c5-57dd-4d97-8bdc-28dac1558bb5,LTEQ,"PUBLIC,int,nullity,LPAREN,FINAL,double,thresh,RPAREN,LBRACE,int,j,COMMA,nn,EQ,0,SEMI,tsh,EQ,LPAREN,thresh,GTEQ,0.,QUES,thresh,COLON,0.5,STAR,sqrt,LPAREN,m,PLUS,n,PLUS,1.,RPAREN,STAR,w,LBRACKET,0,RBRACKET,STAR,eps,RPAREN,SEMI,FOR,LPAREN,j,EQ,0,SEMI,j,LT,n,SEMI,j,PLUSPLUS,RPAREN,IF,LPAREN,w,LBRACKET,j,RBRACKET,<MASK>,tsh,RPAREN,nn,PLUSPLUS,SEMI,RETURN,nn,SEMI,RBRACE","  public int nullity(final double thresh) {
,    int j,nn=0;
,    tsh = (thresh >= 0. ? thresh : 0.5*sqrt(m+n+1.)*w[0]*eps);
,    for (j=0;j<n;j++) if (w[j] <MASK> tsh) nn++;
,    return nn;
,  }
"
3913c395-db09-4ac4-8282-49a81b6a21f4,c5f8f199-5eeb-4f1f-88fc-8831e9575046,LT,"MONKEYS_AT,Override,PROTECTED,void,setUp,LPAREN,RPAREN,LBRACE,test_x,EQ,NEW,double,LBRACKET,passes,RBRACKET,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,passes,SEMI,i,PLUSPLUS,RPAREN,LBRACE,test_x,LBRACKET,i,RBRACKET,EQ,1000,STAR,LPAREN,2,STAR,Math,DOT,random,LPAREN,RPAREN,SUB,1,RPAREN,SEMI,RBRACE,RBRACE","	@Override
,	protected void setUp() {
,		test_x = new double[passes];
,		for (int i = 0; i <MASK> passes; i++) {
,			test_x[i] = 1000*(2*Math.random()-1);
,		}
,	}
"
13ade84f-7d2c-4f3f-a13f-aa7abf8a58a5,63dfc392-b57a-41b6-9f55-22a5d11c52da,BANGEQ,"PUBLIC,int,canCompleteCircuit,LPAREN,int,LBRACKET,RBRACKET,gas,COMMA,int,LBRACKET,RBRACKET,cost,RPAREN,LBRACE,IF,LPAREN,gas,EQEQ,null,BARBAR,cost,EQEQ,null,BARBAR,gas,DOT,length,EQEQ,0,BARBAR,cost,DOT,length,EQEQ,0,BARBAR,gas,DOT,length,<MASK>,cost,DOT,length,RPAREN,RETURN,SUB,1,SEMI,int,debt,EQ,0,SEMI,int,start_idx,EQ,SUB,1,SEMI,int,remaining_gas,EQ,0,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,gas,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,start_idx,EQEQ,SUB,1,RPAREN,LBRACE,IF,LPAREN,gas,LBRACKET,i,RBRACKET,GTEQ,cost,LBRACKET,i,RBRACKET,RPAREN,LBRACE,start_idx,EQ,i,SEMI,remaining_gas,EQ,gas,LBRACKET,i,RBRACKET,SUB,cost,LBRACKET,i,RBRACKET,SEMI,RBRACE,ELSE,LBRACE,debt,PLUSEQ,gas,LBRACKET,i,RBRACKET,SUB,cost,LBRACKET,i,RBRACKET,SEMI,RBRACE,RBRACE,ELSE,LBRACE,IF,LPAREN,remaining_gas,PLUS,gas,LBRACKET,i,RBRACKET,SUB,cost,LBRACKET,i,RBRACKET,GTEQ,0,RPAREN,LBRACE,remaining_gas,PLUSEQ,gas,LBRACKET,i,RBRACKET,SUB,cost,LBRACKET,i,RBRACKET,SEMI,RBRACE,ELSE,LBRACE,start_idx,EQ,SUB,1,SEMI,debt,PLUSEQ,remaining_gas,PLUS,gas,LBRACKET,i,RBRACKET,SUB,cost,LBRACKET,i,RBRACKET,SEMI,remaining_gas,EQ,0,SEMI,RBRACE,RBRACE,RBRACE,IF,LPAREN,remaining_gas,PLUS,debt,GTEQ,0,RPAREN,RETURN,start_idx,SEMI,RETURN,SUB,1,SEMI,RBRACE","	public int canCompleteCircuit(int[] gas, int[] cost) {
,
,		if (gas == null || cost == null || gas.length == 0 || cost.length == 0 || gas.length <MASK> cost.length)
,			return -1;
,
,		int debt = 0;
,		int start_idx = -1;
,		int remaining_gas = 0;
,
,		for (int i = 0; i < gas.length; i++) {
,
,			if (start_idx == -1) {
,				if (gas[i] >= cost[i]) {
,					start_idx = i;
,					remaining_gas = gas[i] - cost[i];
,				} else {
,					debt += gas[i] - cost[i];
,				}
,			}
,
,			else {
,				if (remaining_gas + gas[i] - cost[i] >= 0) {
,					remaining_gas += gas[i] - cost[i];
,				} else {
,					start_idx = -1;
,					debt += remaining_gas + gas[i] - cost[i];
,					remaining_gas = 0;
,				}
,			}
,
,		}
,
,		if (remaining_gas + debt >= 0)
,			return start_idx;
,
,		return -1;
,	}
"
b6d08fd3-a673-4a77-8d9f-bf9a01922a85,6fea3d71-878d-4486-a650-ed2bdd9e81df,SLASH,"void,loadBlueHole,LPAREN,int,tile,RPAREN,LBRACE,ThermalTrigger,trigger,SEMI,int,y0,EQ,tile,STAR,TILE_WIDTH,SEMI,trigger,EQ,NEW,ThermalTrigger,LPAREN,app,COMMA,0,COMMA,y0,PLUS,TILE_WIDTH,<MASK>,2,COMMA,1,COMMA,2,COMMA,1,RPAREN,SEMI,tiles,LBRACKET,tile,RBRACKET,DOT,triggers,DOT,addElement,LPAREN,trigger,RPAREN,SEMI,RBRACE","    void loadBlueHole(int tile) {
,        ThermalTrigger trigger;
,        int y0 = tile * TILE_WIDTH;
,
,        trigger = new ThermalTrigger(app, 0, y0 + TILE_WIDTH <MASK> 2, 1, 2, 1);
,        tiles[tile].triggers.addElement(trigger);
,    }
"
46b67b7f-680f-46e8-8d0d-ebfce935cfd6,650398cd-c35f-4452-95d9-00b0313ed0ca,SLASH,"PRIVATE,STATIC,double,scaleX,LPAREN,double,x,RPAREN,LBRACE,RETURN,width,STAR,LPAREN,x,SUB,xmin,RPAREN,<MASK>,LPAREN,xmax,SUB,xmin,RPAREN,SEMI,RBRACE","    private static double  scaleX(double x) { return width  * (x - xmin) <MASK> (xmax - xmin); }
"
045c9602-1af3-497c-b8cd-2e449d2f2915,b67454b4-739f-4e49-9d02-2aca08cd9fe8,PLUS,"MONKEYS_AT,Override,void,prepare,LPAREN,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""Prepareing "",<MASK>,name,RPAREN,SEMI,dough,EQ,inFactory,DOT,createDough,LPAREN,RPAREN,SEMI,sauce,EQ,inFactory,DOT,createSauce,LPAREN,RPAREN,SEMI,cheese,EQ,inFactory,DOT,createCheese,LPAREN,RPAREN,SEMI,clam,EQ,inFactory,DOT,createClam,LPAREN,RPAREN,SEMI,RBRACE","	@Override
,	void prepare() {
,		System.out.println(""Prepareing "" <MASK> name);
,		
,		dough = inFactory.createDough();
,		sauce = inFactory.createSauce();
,		cheese = inFactory.createCheese();
,		clam = inFactory.createClam();
,		
,	}
"
e0c391e8-798e-429c-b3b3-2cb5a41db345,ed4f3629-0bda-44ab-b392-9efc60d5acf8,PERCENT,"PUBLIC,String,createOutput,LPAREN,RPAREN,LBRACE,String,tmpOutput,EQ,"""",SEMI,String,limitString,EQ,"""",SEMI,PrintWriter,out,EQ,null,SEMI,int,lastValue,EQ,0,SEMI,long,firstSwitched,COMMA,lastSwitched,SEMI,String,tmpname,EQ,"""",SEMI,String,tmpname2,EQ,"""",SEMI,ResultSet,result,EQ,null,SEMI,boolean,furtherResults,EQ,true,SEMI,TRY,LBRACE,out,EQ,response,DOT,getWriter,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,IOException,e,RPAREN,LBRACE,RETURN,""Error creating Perl output."",SEMI,RBRACE,out,DOT,println,LPAREN,""# Start: "",PLUS,NEW,GregorianCalendar,LPAREN,RPAREN,DOT,getTime,LPAREN,RPAREN,RPAREN,SEMI,out,DOT,println,LPAREN,""# Output created by nasty"",RPAREN,SEMI,IF,LPAREN,BANG,grpSrcIP,RPAREN,grpSrcIPDiv,EQ,1,SEMI,IF,LPAREN,BANG,grpDstIP,RPAREN,grpDstIPDiv,EQ,1,SEMI,IF,LPAREN,BANG,grpBytes,RPAREN,grpBytesDiv,EQ,1,SEMI,tmpname,EQ,dq,DOT,getUniqueName,LPAREN,""htmlTmp"",RPAREN,SEMI,String,createStr,EQ,""CREATE TEMPORARY TABLE "",PLUS,tmpname,PLUS,"" (srcIP INTEGER(10) UNSIGNED, dstIP INTEGER(10) UNSIGNED,"",PLUS,""srcPort SMALLINT(5) UNSIGNED, dstPort SMALLINT(5) UNSIGNED, "",PLUS,""proto TINYINT UNSIGNED, dstTos TINYINT UNSIGNED, "",PLUS,""pkts BIGINT(20), bytes BIGINT(20) UNSIGNED, "",PLUS,""firstSwitched INTEGER(10) UNSIGNED, lastSwitched INTEGER(10),"",PLUS,""exporterID INTEGER(10) UNSIGNED, exporterIP INTEGER(10) UNSIGNED,"",PLUS,""databaseID SMALLINT(5) UNSIGNED"",PLUS,LPAREN,BANG,grpEverything,QUES,"", grpcount INTEGER(10) UNSIGNED)"",COLON,"")"",RPAREN,SEMI,String,fillStr,EQ,""SELECT SQL_BIG_RESULT srcIP, dstIP, srcPort, dstPort, proto, dstTos, pkts, bytes, "",PLUS,""firstSwitched, lastSwitched, exporterID, exporterIP, databaseID"",PLUS,LPAREN,BANG,grpEverything,QUES,"", count(*) AS grpcount"",COLON,"""",RPAREN,PLUS,"" FROM #srctable# "",PLUS,""WHERE #params#"",SEMI,IF,LPAREN,BANG,grpEverything,RPAREN,LBRACE,fillStr,PLUSEQ,"" GROUP BY "",SEMI,IF,LPAREN,grpSrcIP,RPAREN,fillStr,PLUSEQ,""srcIP DIV "",PLUS,grpSrcIPDiv,PLUS,"","",SEMI,ELSE,fillStr,EQ,fillStr,DOT,replaceFirst,LPAREN,""srcIP"",COMMA,""MIN(srcIP) AS srcIP"",RPAREN,SEMI,IF,LPAREN,grpDstIP,RPAREN,fillStr,PLUSEQ,""dstIP DIV "",PLUS,grpDstIPDiv,PLUS,"","",SEMI,ELSE,fillStr,EQ,fillStr,DOT,replaceFirst,LPAREN,""dstIP"",COMMA,""MIN(dstIP) AS dstIP"",RPAREN,SEMI,IF,LPAREN,grpSrcPort,RPAREN,fillStr,PLUSEQ,""srcPort,"",SEMI,ELSE,fillStr,EQ,fillStr,DOT,replaceFirst,LPAREN,""srcPort"",COMMA,""MIN(srcPort) AS srcPort"",RPAREN,SEMI,IF,LPAREN,grpDstPort,RPAREN,fillStr,PLUSEQ,""dstPort,"",SEMI,ELSE,fillStr,EQ,fillStr,DOT,replaceFirst,LPAREN,""dstPort"",COMMA,""MIN(dstPort) AS dstPort"",RPAREN,SEMI,IF,LPAREN,grpProto,RPAREN,fillStr,PLUSEQ,""proto,"",SEMI,ELSE,fillStr,EQ,fillStr,DOT,replaceFirst,LPAREN,""proto"",COMMA,""MIN(proto) AS proto"",RPAREN,SEMI,IF,LPAREN,grpTos,RPAREN,fillStr,PLUSEQ,""dstTos,"",SEMI,ELSE,fillStr,EQ,fillStr,DOT,replaceFirst,LPAREN,""dstTos"",COMMA,""MIN(dstTos) AS dstTos"",RPAREN,SEMI,IF,LPAREN,grpPackets,RPAREN,fillStr,PLUSEQ,""pkts,"",SEMI,ELSE,fillStr,EQ,fillStr,DOT,replaceFirst,LPAREN,""pkts"",COMMA,""SUM(pkts) AS pkts"",RPAREN,SEMI,IF,LPAREN,grpBytes,RPAREN,fillStr,PLUSEQ,""bytes DIV "",PLUS,grpBytesDiv,PLUS,"","",SEMI,ELSE,fillStr,EQ,fillStr,DOT,replaceFirst,LPAREN,""bytes"",COMMA,""SUM(bytes) AS bytes"",RPAREN,SEMI,IF,LPAREN,grpTime,RPAREN,LBRACE,fillStr,PLUSEQ,""firstSwitched DIV "",PLUS,grpTimeDiv,PLUS,"","",SEMI,RBRACE,ELSE,LBRACE,fillStr,EQ,fillStr,DOT,replaceFirst,LPAREN,""firstSwitched"",COMMA,""MIN(firstSwitched) AS firstSwitched"",RPAREN,SEMI,RBRACE,fillStr,EQ,fillStr,DOT,replaceFirst,LPAREN,""lastSwitched"",COMMA,""MAX(lastSwitched) AS lastSwitched"",RPAREN,SEMI,IF,LPAREN,grpDuration,RPAREN,fillStr,PLUSEQ,""lastSwitched-firstSwitched,"",SEMI,IF,LPAREN,grpExporter,RPAREN,fillStr,PLUSEQ,""exporterID,"",SEMI,ELSE,fillStr,EQ,fillStr,DOT,replaceFirst,LPAREN,""exporterID"",COMMA,""MIN(exporterID) AS exporterID"",RPAREN,SEMI,IF,LPAREN,fillStr,DOT,endsWith,LPAREN,"","",RPAREN,RPAREN,fillStr,EQ,fillStr,DOT,substring,LPAREN,0,COMMA,fillStr,DOT,length,LPAREN,RPAREN,SUB,1,RPAREN,SEMI,ELSE,IF,LPAREN,fillStr,DOT,endsWith,LPAREN,""GROUP BY "",RPAREN,RPAREN,fillStr,PLUSEQ,""NULL"",SEMI,RBRACE,IF,LPAREN,remDoubles,RPAREN,LBRACE,IF,LPAREN,dq,DOT,fillTable,LPAREN,tmpname,COMMA,null,COMMA,null,COMMA,false,COMMA,false,COMMA,1,RPAREN,EQEQ,false,RPAREN,LBRACE,output,PLUSEQ,dq,DOT,getOutput,LPAREN,RPAREN,SEMI,RETURN,""Error creating and filling temporary table! <p>"",PLUS,output,SEMI,RBRACE,RBRACE,ELSE,LBRACE,IF,LPAREN,dq,DOT,fillTable,LPAREN,tmpname,COMMA,createStr,COMMA,fillStr,COMMA,remDoubles,COMMA,remExporterID,COMMA,remTimeDiv,RPAREN,EQEQ,false,RPAREN,LBRACE,output,PLUSEQ,dq,DOT,getOutput,LPAREN,RPAREN,SEMI,RETURN,""Error creating and filling temporary table! <p>"",PLUS,output,SEMI,RBRACE,RBRACE,IF,LPAREN,remDoubles,RPAREN,LBRACE,tmpname2,EQ,dq,DOT,getUniqueName,LPAREN,""perlTmpNoDoubles"",RPAREN,SEMI,dq,DOT,removeIdenticalData,LPAREN,tmpname,COMMA,tmpname2,COMMA,remTimeDiv,COMMA,remExporterID,COMMA,true,RPAREN,SEMI,int,x,EQ,0,SEMI,int,y,EQ,0,SEMI,result,EQ,dq,DOT,queryTempDB,LPAREN,""SELECT count(*) AS x FROM "",PLUS,tmpname,RPAREN,SEMI,TRY,LBRACE,result,DOT,next,LPAREN,RPAREN,SEMI,x,EQ,result,DOT,getInt,LPAREN,""x"",RPAREN,SEMI,RBRACE,CATCH,LPAREN,Exception,e,RPAREN,LBRACE,dq,DOT,dropTable,LPAREN,tmpname2,RPAREN,SEMI,dq,DOT,dropTable,LPAREN,tmpname,RPAREN,SEMI,output,PLUSEQ,dq,DOT,getOutput,LPAREN,RPAREN,SEMI,RETURN,""Error removing double entries from temporary table! <p>"",PLUS,output,SEMI,RBRACE,result,EQ,dq,DOT,queryTempDB,LPAREN,""SELECT count(*) AS y FROM "",PLUS,tmpname2,RPAREN,SEMI,TRY,LBRACE,result,DOT,next,LPAREN,RPAREN,SEMI,y,EQ,result,DOT,getInt,LPAREN,""y"",RPAREN,SEMI,RBRACE,CATCH,LPAREN,Exception,e,RPAREN,LBRACE,dq,DOT,dropTable,LPAREN,tmpname2,RPAREN,SEMI,dq,DOT,dropTable,LPAREN,tmpname,RPAREN,SEMI,output,PLUSEQ,dq,DOT,getOutput,LPAREN,RPAREN,SEMI,RETURN,""Error removing double entries from temporary table! <p>"",PLUS,output,SEMI,RBRACE,IF,LPAREN,x,GT,0,RPAREN,output,PLUSEQ,""<b>Removed "",PLUS,LPAREN,x,SUB,y,RPAREN,PLUS,"" of "",PLUS,x,PLUS,"" entries as identical ("",PLUS,LPAREN,LPAREN,LPAREN,x,SUB,y,RPAREN,STAR,100,RPAREN,SLASH,x,RPAREN,PLUS,""%)!</b><p>"",SEMI,RBRACE,ELSE,LBRACE,tmpname2,EQ,tmpname,SEMI,RBRACE,String,queryTmp,EQ,""SELECT SQL_BIG_RESULT srcIP, dstIP, srcPort, dstPort, proto, dstTos, pkts, bytes, "",PLUS,""firstSwitched, lastSwitched, exporterID, exporterIP, databaseID FROM "",PLUS,tmpname2,SEMI,IF,LPAREN,BANG,grpEverything,RPAREN,LBRACE,IF,LPAREN,remDoubles,RPAREN,queryTmp,EQ,queryTmp,DOT,replaceFirst,LPAREN,"" FROM"",COMMA,"",count(*) AS grpcount FROM"",RPAREN,SEMI,ELSE,queryTmp,EQ,queryTmp,DOT,replaceFirst,LPAREN,"" FROM"",COMMA,"",SUM(grpcount) AS grpcount FROM"",RPAREN,SEMI,queryTmp,PLUSEQ,"" GROUP BY "",SEMI,IF,LPAREN,grpSrcIP,RPAREN,queryTmp,PLUSEQ,""srcIP DIV "",PLUS,grpSrcIPDiv,PLUS,"","",SEMI,ELSE,queryTmp,EQ,queryTmp,DOT,replaceFirst,LPAREN,""srcIP"",COMMA,""MIN(srcIP) AS srcIP"",RPAREN,SEMI,IF,LPAREN,grpDstIP,RPAREN,queryTmp,PLUSEQ,""dstIP DIV "",PLUS,grpDstIPDiv,PLUS,"","",SEMI,ELSE,queryTmp,EQ,queryTmp,DOT,replaceFirst,LPAREN,""dstIP"",COMMA,""MIN(dstIP) AS dstIP"",RPAREN,SEMI,IF,LPAREN,grpSrcPort,RPAREN,queryTmp,PLUSEQ,""srcPort,"",SEMI,ELSE,queryTmp,EQ,queryTmp,DOT,replaceFirst,LPAREN,""srcPort"",COMMA,""MIN(srcPort) AS srcPort"",RPAREN,SEMI,IF,LPAREN,grpDstPort,RPAREN,queryTmp,PLUSEQ,""dstPort,"",SEMI,ELSE,queryTmp,EQ,queryTmp,DOT,replaceFirst,LPAREN,""dstPort"",COMMA,""MIN(dstPort) AS dstPort"",RPAREN,SEMI,IF,LPAREN,grpProto,RPAREN,queryTmp,PLUSEQ,""proto,"",SEMI,ELSE,queryTmp,EQ,queryTmp,DOT,replaceFirst,LPAREN,""proto"",COMMA,""MIN(proto) AS proto"",RPAREN,SEMI,IF,LPAREN,grpTos,RPAREN,queryTmp,PLUSEQ,""dstTos,"",SEMI,ELSE,queryTmp,EQ,queryTmp,DOT,replaceFirst,LPAREN,""dstTos"",COMMA,""MIN(dstTos) AS dstTos"",RPAREN,SEMI,IF,LPAREN,grpPackets,RPAREN,queryTmp,PLUSEQ,""pkts,"",SEMI,ELSE,queryTmp,EQ,queryTmp,DOT,replaceFirst,LPAREN,""pkts"",COMMA,""SUM(pkts) AS pkts"",RPAREN,SEMI,IF,LPAREN,grpBytes,RPAREN,queryTmp,PLUSEQ,""bytes DIV "",PLUS,grpBytesDiv,PLUS,"","",SEMI,ELSE,queryTmp,EQ,queryTmp,DOT,replaceFirst,LPAREN,""bytes"",COMMA,""SUM(bytes) AS bytes"",RPAREN,SEMI,IF,LPAREN,grpTime,RPAREN,LBRACE,queryTmp,EQ,queryTmp,DOT,replaceFirst,LPAREN,""firstSwitched"",COMMA,""(firstSwitched DIV "",PLUS,grpTimeDiv,PLUS,"")*"",PLUS,grpTimeDiv,PLUS,"" AS firstSwitched"",RPAREN,SEMI,queryTmp,PLUSEQ,""firstSwitched DIV "",PLUS,grpTimeDiv,PLUS,"","",SEMI,queryTmp,EQ,queryTmp,DOT,replaceFirst,LPAREN,""lastSwitched"",COMMA,""(MAX(lastSwitched) DIV "",PLUS,grpTimeDiv,PLUS,"")*"",PLUS,grpTimeDiv,PLUS,"" AS lastSwitched"",RPAREN,SEMI,RBRACE,ELSE,LBRACE,queryTmp,EQ,queryTmp,DOT,replaceFirst,LPAREN,""firstSwitched"",COMMA,""MIN(firstSwitched) AS firstSwitched"",RPAREN,SEMI,queryTmp,EQ,queryTmp,DOT,replaceFirst,LPAREN,""lastSwitched"",COMMA,""MAX(lastSwitched) AS lastSwitched"",RPAREN,SEMI,RBRACE,IF,LPAREN,grpDuration,RPAREN,queryTmp,PLUSEQ,""((lastSwitched DIV "",PLUS,grpTimeDiv,PLUS,"")-(firstSwitched DIV "",PLUS,grpTimeDiv,PLUS,"")),"",SEMI,IF,LPAREN,grpExporter,RPAREN,queryTmp,PLUSEQ,""exporterID,"",SEMI,ELSE,queryTmp,EQ,queryTmp,DOT,replaceFirst,LPAREN,""exporterID"",COMMA,""MIN(exporterID) AS exporterID"",RPAREN,SEMI,IF,LPAREN,grpDatabase,RPAREN,queryTmp,PLUSEQ,""databaseID,"",SEMI,ELSE,queryTmp,EQ,queryTmp,DOT,replaceFirst,LPAREN,""databaseID"",COMMA,""MIN(databaseID) AS databaseID"",RPAREN,SEMI,IF,LPAREN,grpAnything,RPAREN,queryTmp,EQ,queryTmp,DOT,substring,LPAREN,0,COMMA,queryTmp,DOT,length,LPAREN,RPAREN,SUB,1,RPAREN,SEMI,ELSE,queryTmp,PLUSEQ,""NULL"",SEMI,RBRACE,queryTmp,EQ,""SELECT SQL_BIG_RESULT * FROM ("",PLUS,queryTmp,PLUS,"") AS x "",SEMI,IF,LPAREN,BANG,order,DOT,equalsIgnoreCase,LPAREN,""none"",RPAREN,RPAREN,LBRACE,IF,LPAREN,order,DOT,equalsIgnoreCase,LPAREN,""duration"",RPAREN,RPAREN,LBRACE,queryTmp,PLUSEQ,"" ORDER BY (lastSwitched-firstSwitched) "",SEMI,RBRACE,ELSE,queryTmp,PLUSEQ,"" ORDER BY "",PLUS,order,SEMI,IF,LPAREN,sort,DOT,equalsIgnoreCase,LPAREN,""decrease"",RPAREN,RPAREN,queryTmp,PLUSEQ,"" DESC "",SEMI,RBRACE,ELSE,IF,LPAREN,BANG,grpEverything,RPAREN,LBRACE,queryTmp,PLUSEQ,"" ORDER BY grpcount "",SEMI,IF,LPAREN,sort,DOT,equalsIgnoreCase,LPAREN,""decrease"",RPAREN,RPAREN,queryTmp,PLUSEQ,"" DESC "",SEMI,RBRACE,out,DOT,println,LPAREN,""$nastyArray = ("",RPAREN,SEMI,TRY,LBRACE,int,i,EQ,0,SEMI,limitString,EQ,"" LIMIT 0, 1000"",SEMI,result,EQ,dq,DOT,queryTempDB,LPAREN,queryTmp,PLUS,limitString,RPAREN,SEMI,IF,LPAREN,result,EQEQ,null,RPAREN,LBRACE,dq,DOT,dropTable,LPAREN,tmpname2,RPAREN,SEMI,dq,DOT,dropTable,LPAREN,tmpname,RPAREN,SEMI,RETURN,""Database error."",PLUS,dq,DOT,getOutput,LPAREN,RPAREN,SEMI,RBRACE,WHILE,LPAREN,furtherResults,RPAREN,LBRACE,WHILE,LPAREN,result,DOT,next,LPAREN,RPAREN,RPAREN,LBRACE,firstSwitched,EQ,result,DOT,getLong,LPAREN,""firstSwitched"",RPAREN,SEMI,IF,LPAREN,grpTime,RPAREN,firstSwitched,EQ,LPAREN,firstSwitched,SLASH,grpTimeDiv,RPAREN,STAR,grpTimeDiv,SEMI,lastSwitched,EQ,result,DOT,getLong,LPAREN,""lastSwitched"",RPAREN,SEMI,IF,LPAREN,grpTime,RPAREN,lastSwitched,EQ,LPAREN,LPAREN,lastSwitched,PLUS,grpTimeDiv,RPAREN,SLASH,grpTimeDiv,RPAREN,STAR,grpTimeDiv,SEMI,out,DOT,print,LPAREN,""["",RPAREN,SEMI,tmpOutput,EQ,LPAREN,showSrcIP,QUES,LPAREN,""\"""",PLUS,dq,DOT,createIPOutput,LPAREN,LPAREN,result,DOT,getLong,LPAREN,""srcIP"",RPAREN,SLASH,grpSrcIPDiv,RPAREN,STAR,grpSrcIPDiv,COMMA,false,RPAREN,PLUS,""\"", "",RPAREN,COLON,"""",RPAREN,PLUS,LPAREN,showDstIP,QUES,LPAREN,""\"""",PLUS,dq,DOT,createIPOutput,LPAREN,LPAREN,result,DOT,getLong,LPAREN,""dstIP"",RPAREN,SLASH,grpDstIPDiv,RPAREN,STAR,grpDstIPDiv,COMMA,false,RPAREN,PLUS,""\"", "",RPAREN,COLON,"""",RPAREN,PLUS,LPAREN,showSrcPort,QUES,LPAREN,""\"""",PLUS,dq,DOT,createPortOutput,LPAREN,result,DOT,getInt,LPAREN,""srcPort"",RPAREN,COMMA,false,RPAREN,PLUS,""\"", "",RPAREN,COLON,"""",RPAREN,PLUS,LPAREN,showDstPort,QUES,LPAREN,""\"""",PLUS,dq,DOT,createPortOutput,LPAREN,result,DOT,getInt,LPAREN,""dstPort"",RPAREN,COMMA,false,RPAREN,PLUS,""\"", "",RPAREN,COLON,"""",RPAREN,PLUS,LPAREN,showProto,QUES,LPAREN,""\"""",PLUS,dq,DOT,createProtoOutput,LPAREN,result,DOT,getShort,LPAREN,""proto"",RPAREN,COMMA,false,RPAREN,PLUS,""\"", "",RPAREN,COLON,"""",RPAREN,PLUS,LPAREN,showTos,AMPAMP,BANG,dq,DOT,isTosMissing,LPAREN,RPAREN,QUES,LPAREN,""\"""",PLUS,result,DOT,getShort,LPAREN,""dstTos"",RPAREN,PLUS,""\"", "",RPAREN,COLON,"""",RPAREN,PLUS,LPAREN,showPackets,QUES,LPAREN,""\"""",PLUS,result,DOT,getLong,LPAREN,""pkts"",RPAREN,PLUS,""\"", "",RPAREN,COLON,"""",RPAREN,PLUS,LPAREN,showBytes,QUES,LPAREN,""\"""",PLUS,LPAREN,LPAREN,result,DOT,getLong,LPAREN,""bytes"",RPAREN,SLASH,grpBytesDiv,RPAREN,STAR,grpBytesDiv,RPAREN,PLUS,""\"", "",RPAREN,COLON,"""",RPAREN,PLUS,LPAREN,showFirstSwitched,QUES,LPAREN,""\"""",PLUS,LPAREN,firstSwitched,RPAREN,PLUS,""\"", "",RPAREN,COLON,"""",RPAREN,PLUS,LPAREN,showLastSwitched,QUES,LPAREN,""\"""",PLUS,LPAREN,lastSwitched,RPAREN,PLUS,""\"", "",RPAREN,COLON,"""",RPAREN,PLUS,LPAREN,showDuration,QUES,LPAREN,""\"""",PLUS,LPAREN,long,RPAREN,LPAREN,lastSwitched,SUB,firstSwitched,RPAREN,PLUS,""\"", "",RPAREN,COLON,"""",RPAREN,PLUS,LPAREN,showExporter,QUES,LPAREN,""\"""",PLUS,LPAREN,result,DOT,getLong,LPAREN,""exporterID"",RPAREN,RPAREN,PLUS,""\"", "",RPAREN,COLON,"""",RPAREN,PLUS,LPAREN,showDatabase,QUES,LPAREN,""\"""",PLUS,getDBName,LPAREN,result,DOT,getInt,LPAREN,""databaseID"",RPAREN,RPAREN,PLUS,""\"", "",RPAREN,COLON,"""",RPAREN,PLUS,LPAREN,BANG,grpEverything,QUES,LPAREN,""\"""",PLUS,result,DOT,getLong,LPAREN,""grpcount"",RPAREN,PLUS,""\"""",RPAREN,COLON,"""",RPAREN,SEMI,IF,LPAREN,tmpOutput,DOT,endsWith,LPAREN,"", "",RPAREN,RPAREN,tmpOutput,EQ,tmpOutput,DOT,substring,LPAREN,0,COMMA,tmpOutput,DOT,length,LPAREN,RPAREN,SUB,2,RPAREN,SEMI,out,DOT,print,LPAREN,tmpOutput,RPAREN,SEMI,out,DOT,println,LPAREN,""],"",RPAREN,SEMI,i,PLUSPLUS,SEMI,RBRACE,IF,LPAREN,LPAREN,i,<MASK>,1000,RPAREN,EQEQ,0,RPAREN,LBRACE,IF,LPAREN,lastValue,EQEQ,i,RPAREN,LBRACE,furtherResults,EQ,false,SEMI,RBRACE,ELSE,LBRACE,lastValue,EQ,i,SEMI,limitString,EQ,"" LIMIT "",PLUS,i,PLUS,"", 1000"",SEMI,result,EQ,dq,DOT,queryTempDB,LPAREN,queryTmp,PLUS,limitString,RPAREN,SEMI,IF,LPAREN,result,EQEQ,null,RPAREN,furtherResults,EQ,false,SEMI,ELSE,furtherResults,EQ,true,SEMI,RBRACE,RBRACE,ELSE,furtherResults,EQ,false,SEMI,RBRACE,out,DOT,print,LPAREN,"")"",RPAREN,SEMI,RBRACE,CATCH,LPAREN,SQLException,e,RPAREN,LBRACE,out,DOT,println,LPAREN,""Error using DB connection."",RPAREN,SEMI,out,DOT,println,LPAREN,e,DOT,getMessage,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,out,DOT,println,LPAREN,""# End: "",PLUS,NEW,GregorianCalendar,LPAREN,RPAREN,DOT,getTime,LPAREN,RPAREN,RPAREN,SEMI,out,DOT,close,LPAREN,RPAREN,SEMI,dq,DOT,dropTable,LPAREN,tmpname2,RPAREN,SEMI,dq,DOT,dropTable,LPAREN,tmpname,RPAREN,SEMI,RETURN,dq,DOT,getOutput,LPAREN,RPAREN,SEMI,RBRACE","        public String createOutput() {
,		
,		String tmpOutput = """";
,		String limitString = """";
,		PrintWriter out = null;
,		int lastValue = 0;
,		
,                // time bounds of current flow
,		long firstSwitched, lastSwitched;
,                // name of the temporary tables (one with, one without double entries)
,                String tmpname = """";
,                String tmpname2 = """";
,                // the results of the query
,		ResultSet result = null;
,
,                boolean furtherResults = true;
,		
,		try {
,			 out = response.getWriter();
,		} catch (IOException e) {
,			return ""Error creating Perl output."";
,		}
,
,                out.println(""# Start: "" + new GregorianCalendar().getTime());
,		out.println(""# Output created by nasty"");
,		
,                if (!grpSrcIP) grpSrcIPDiv = 1;
,                if (!grpDstIP) grpDstIPDiv = 1;
,                if (!grpBytes) grpBytesDiv = 1;
,
,                // ************* build the SQL-query ***************
,                
,                // prepare filling the temporary table
,                tmpname = dq.getUniqueName(""htmlTmp"");
,                String createStr = ""CREATE TEMPORARY TABLE ""+tmpname+"" (srcIP INTEGER(10) UNSIGNED, dstIP INTEGER(10) UNSIGNED,"" +
,				""srcPort SMALLINT(5) UNSIGNED, dstPort SMALLINT(5) UNSIGNED, "" +
,				""proto TINYINT UNSIGNED, dstTos TINYINT UNSIGNED, "" +
,				""pkts BIGINT(20), bytes BIGINT(20) UNSIGNED, "" +
,				""firstSwitched INTEGER(10) UNSIGNED, lastSwitched INTEGER(10),"" +
,				""exporterID INTEGER(10) UNSIGNED, exporterIP INTEGER(10) UNSIGNED,"" +
,                                ""databaseID SMALLINT(5) UNSIGNED""+(!grpEverything?"", grpcount INTEGER(10) UNSIGNED)"":"")"");
,                String fillStr = ""SELECT SQL_BIG_RESULT srcIP, dstIP, srcPort, dstPort, proto, dstTos, pkts, bytes, "" +
,                                ""firstSwitched, lastSwitched, exporterID, exporterIP, databaseID"" + 
,                                (!grpEverything?"", count(*) AS grpcount"":"""") + "" FROM #srctable# "" +
,                                ""WHERE #params#"";
,                // add grouping parameters
,                if (!grpEverything) {
,                    fillStr += "" GROUP BY "";
,                    if (grpSrcIP) fillStr += ""srcIP DIV ""+grpSrcIPDiv+"","";
,                    else fillStr = fillStr.replaceFirst(""srcIP"", ""MIN(srcIP) AS srcIP"");
,                    if (grpDstIP) fillStr += ""dstIP DIV ""+grpDstIPDiv+"","";
,                    else fillStr = fillStr.replaceFirst(""dstIP"", ""MIN(dstIP) AS dstIP"");
,                    if (grpSrcPort) fillStr += ""srcPort,"";
,                    else fillStr = fillStr.replaceFirst(""srcPort"", ""MIN(srcPort) AS srcPort"");
,                    if (grpDstPort) fillStr += ""dstPort,"";
,                    else fillStr = fillStr.replaceFirst(""dstPort"", ""MIN(dstPort) AS dstPort"");
,                    if (grpProto) fillStr += ""proto,"";
,                    else fillStr = fillStr.replaceFirst(""proto"", ""MIN(proto) AS proto"");
,                    if (grpTos) fillStr += ""dstTos,"";
,                    else fillStr = fillStr.replaceFirst(""dstTos"", ""MIN(dstTos) AS dstTos"");
,                    if (grpPackets) fillStr += ""pkts,"";
,                    else fillStr = fillStr.replaceFirst(""pkts"", ""SUM(pkts) AS pkts"");
,                    if (grpBytes) fillStr += ""bytes DIV ""+grpBytesDiv+"","";
,                    else fillStr = fillStr.replaceFirst(""bytes"", ""SUM(bytes) AS bytes"");
,                    if (grpTime) {
,                        fillStr += ""firstSwitched DIV ""+grpTimeDiv+"","";
,                    }
,                    else {
,                        fillStr = fillStr.replaceFirst(""firstSwitched"", ""MIN(firstSwitched) AS firstSwitched"");
,                    }
,                    fillStr = fillStr.replaceFirst(""lastSwitched"", ""MAX(lastSwitched) AS lastSwitched"");
,                    if (grpDuration) fillStr += ""lastSwitched-firstSwitched,"";
,                    if (grpExporter) fillStr += ""exporterID,"";
,                    else fillStr = fillStr.replaceFirst(""exporterID"", ""MIN(exporterID) AS exporterID"");
,                    if (fillStr.endsWith("","")) fillStr = fillStr.substring(0, fillStr.length()-1);
,                    else if (fillStr.endsWith(""GROUP BY ""))  fillStr += ""NULL"";
,                }
,
,                // create and fill the temporary table
,                if (remDoubles) {
,                    if (dq.fillTable(tmpname, null, null, false, false, 1)==false) {
,                        output += dq.getOutput();
,                        return ""Error creating and filling temporary table! <p>""+output;
,                    }
,                } else {
,                    if (dq.fillTable(tmpname, createStr, fillStr, remDoubles, remExporterID, remTimeDiv)==false) {
,                        output += dq.getOutput();
,                        return ""Error creating and filling temporary table! <p>""+output;
,                    }
,                }
,       
,                if (remDoubles) {  
,                    // remove identical entries by grouping the temporary table into a new view
,                    tmpname2 = dq.getUniqueName(""perlTmpNoDoubles"");
,                    dq.removeIdenticalData(tmpname, tmpname2, remTimeDiv, remExporterID, true);
,                    
,                    // count amount of removed entries
,                    int x=0; int y=0;
,                    result = dq.queryTempDB(""SELECT count(*) AS x FROM ""+tmpname);
,                    try {
,                        result.next();
,                        x = result.getInt(""x"");
,                    } catch (Exception e) {
,                        // an error has occured
,                        dq.dropTable(tmpname2);
,                        dq.dropTable(tmpname);
,                        output += dq.getOutput();
,                        return ""Error removing double entries from temporary table! <p>""+output;
,                    }
,                    result = dq.queryTempDB(""SELECT count(*) AS y FROM ""+tmpname2);
,                    try {
,                        result.next();
,                        y = result.getInt(""y"");
,                    } catch (Exception e) {
,                        // an error has occured
,                        dq.dropTable(tmpname2);
,                        dq.dropTable(tmpname);
,                        output += dq.getOutput();
,                        return ""Error removing double entries from temporary table! <p>""+output;
,                    }
,                    if (x>0) output += ""<b>Removed ""+(x-y)+"" of ""+x+"" entries as identical (""+(((x-y)*100)/x)+""<MASK>)!</b><p>"";
,               } else {
,                    // no removal of identical entries, just copy the name of the temp. table
,                    tmpname2 = tmpname;
,                }
,                  
,                // prepare querying the temporary table
,                String queryTmp = ""SELECT SQL_BIG_RESULT srcIP, dstIP, srcPort, dstPort, proto, dstTos, pkts, bytes, "" +
,                                        ""firstSwitched, lastSwitched, exporterID, exporterIP, databaseID FROM ""+tmpname2;
,                // add grouping parameters
,                if (!grpEverything) {
,                    if (remDoubles) queryTmp = queryTmp.replaceFirst("" FROM"", "",count(*) AS grpcount FROM"");
,                    else queryTmp = queryTmp.replaceFirst("" FROM"", "",SUM(grpcount) AS grpcount FROM"");
,                    queryTmp += "" GROUP BY "";
,                    if (grpSrcIP) queryTmp += ""srcIP DIV ""+grpSrcIPDiv+"","";
,                    else queryTmp = queryTmp.replaceFirst(""srcIP"", ""MIN(srcIP) AS srcIP"");
,                    if (grpDstIP) queryTmp += ""dstIP DIV ""+grpDstIPDiv+"","";
,                    else queryTmp = queryTmp.replaceFirst(""dstIP"", ""MIN(dstIP) AS dstIP"");
,                    if (grpSrcPort) queryTmp += ""srcPort,"";
,                    else queryTmp = queryTmp.replaceFirst(""srcPort"", ""MIN(srcPort) AS srcPort"");
,                    if (grpDstPort) queryTmp += ""dstPort,"";
,                    else queryTmp = queryTmp.replaceFirst(""dstPort"", ""MIN(dstPort) AS dstPort"");
,                    if (grpProto) queryTmp += ""proto,"";
,                    else queryTmp = queryTmp.replaceFirst(""proto"", ""MIN(proto) AS proto"");
,                    if (grpTos) queryTmp += ""dstTos,"";
,                    else queryTmp = queryTmp.replaceFirst(""dstTos"", ""MIN(dstTos) AS dstTos"");
,                    if (grpPackets) queryTmp += ""pkts,"";
,                    else queryTmp = queryTmp.replaceFirst(""pkts"", ""SUM(pkts) AS pkts"");
,                    if (grpBytes) queryTmp += ""bytes DIV ""+grpBytesDiv+"","";
,                    else queryTmp = queryTmp.replaceFirst(""bytes"", ""SUM(bytes) AS bytes"");
,                    if (grpTime) {
,                        queryTmp = queryTmp.replaceFirst(""firstSwitched"", ""(firstSwitched DIV ""+grpTimeDiv+"")*""+grpTimeDiv+"" AS firstSwitched"");
,                        queryTmp += ""firstSwitched DIV ""+grpTimeDiv+"","";
,                        queryTmp = queryTmp.replaceFirst(""lastSwitched"", ""(MAX(lastSwitched) DIV ""+grpTimeDiv+"")*""+grpTimeDiv+"" AS lastSwitched"");
,                    }
,                    else {
,                        queryTmp = queryTmp.replaceFirst(""firstSwitched"", ""MIN(firstSwitched) AS firstSwitched"");
,                        queryTmp = queryTmp.replaceFirst(""lastSwitched"", ""MAX(lastSwitched) AS lastSwitched"");
,                    }
,                    if (grpDuration) queryTmp += ""((lastSwitched DIV ""+grpTimeDiv+"")-(firstSwitched DIV ""+grpTimeDiv+"")),"";
,                    if (grpExporter) queryTmp += ""exporterID,"";
,                    else queryTmp = queryTmp.replaceFirst(""exporterID"", ""MIN(exporterID) AS exporterID"");
,                    if (grpDatabase) queryTmp += ""databaseID,"";
,                    else queryTmp = queryTmp.replaceFirst(""databaseID"", ""MIN(databaseID) AS databaseID"");
,                    if (grpAnything) queryTmp = queryTmp.substring(0, queryTmp.length()-1);
,                    else queryTmp += ""NULL"";
,                }
,         
,                // add ordering parameters
,                queryTmp = ""SELECT SQL_BIG_RESULT * FROM ("" + queryTmp + "") AS x "";
,		if (!order.equalsIgnoreCase(""none"")) {
,			if (order.equalsIgnoreCase(""duration"")) {
,                                queryTmp += "" ORDER BY (lastSwitched-firstSwitched) "";
,			} else 
,				queryTmp += "" ORDER BY "" + order;
,			if (sort.equalsIgnoreCase(""decrease""))
,				queryTmp += "" DESC "";
,		} else if (!grpEverything) {
,                    queryTmp += "" ORDER BY grpcount "";
,                    if (sort.equalsIgnoreCase(""decrease""))
,                        queryTmp += "" DESC "";
,                }
,		
,		// ************ construct Perl-table from the results of the query *********
,		
,		out.println(""$nastyArray = ("");
,		
,		try {
,			int i=0;
,			
,			limitString = "" LIMIT 0, 1000"";
,			
,			result = dq.queryTempDB(queryTmp + limitString);
,                        if (result==null) {
,                            dq.dropTable(tmpname2);
,                            dq.dropTable(tmpname);
,                            return ""Database error."" + dq.getOutput();
,                        }
,			
,			while (furtherResults) {
,				
,				while (result.next()) {
,        				// check time bounds of current flow
,                			firstSwitched=result.getLong(""firstSwitched"");
,                                        if (grpTime) firstSwitched=(firstSwitched/grpTimeDiv)*grpTimeDiv;
,                                	lastSwitched=result.getLong(""lastSwitched"");
,                                        if (grpTime) lastSwitched=((lastSwitched+grpTimeDiv)/grpTimeDiv)*grpTimeDiv;
,					
,					out.print(""["");
,					tmpOutput = (showSrcIP?(""\"""" + dq.createIPOutput((result.getLong(""srcIP"")/grpSrcIPDiv)*grpSrcIPDiv, false) + ""\"", ""):"""") +
,					(showDstIP?(""\"""" + dq.createIPOutput((result.getLong(""dstIP"")/grpDstIPDiv)*grpDstIPDiv, false) + ""\"", ""):"""") +
,					(showSrcPort?(""\"""" + dq.createPortOutput(result.getInt(""srcPort""), false) + ""\"", ""):"""") +
,					(showDstPort?(""\"""" + dq.createPortOutput(result.getInt(""dstPort""), false) + ""\"", ""):"""") +
,					(showProto?(""\"""" + dq.createProtoOutput(result.getShort(""proto""), false) + ""\"", ""):"""") +
,					(showTos&&!dq.isTosMissing()?(""\"""" + result.getShort(""dstTos"") + ""\"", ""):"""") +
,					(showPackets?(""\"""" + result.getLong(""pkts"") + ""\"", ""):"""") +
,					(showBytes?(""\"""" + ((result.getLong(""bytes"")/grpBytesDiv)*grpBytesDiv) + ""\"", ""):"""") +
,					(showFirstSwitched?(""\"""" + (firstSwitched) + ""\"", ""):"""") +
,					(showLastSwitched?(""\"""" + (lastSwitched) + ""\"", ""):"""") +
,					(showDuration?(""\"""" + (long)(lastSwitched-firstSwitched) + ""\"", ""):"""") +
,					(showExporter?(""\"""" + (result.getLong(""exporterID"")) + ""\"", ""):"""") +
,					(showDatabase?(""\"""" + getDBName(result.getInt(""databaseID"")) + ""\"", ""):"""") +
,					(!grpEverything?(""\"""" + result.getLong(""grpcount"") + ""\""""):"""");
,					
,					if (tmpOutput.endsWith("", ""))
,						tmpOutput = tmpOutput.substring(0, tmpOutput.length()-2);
,					
,					out.print(tmpOutput);
,					out.println(""],"");
,					
,					i++;
,				}
,				
,				if ((i%1000)==0) {
,					if (lastValue==i) {	//this is true if the number of results is exactly 1000, 2000, 3000...
,                                            furtherResults = false;
,					} else {
,                                            lastValue = i;
,                                            limitString = "" LIMIT "" + i + "", 1000"";
,                                            result = dq.queryTempDB(queryTmp + limitString);
,                                            if (result==null) furtherResults = false;
,                                            else furtherResults = true;
,                                        }
,				} else
,					furtherResults = false;
,			}
,			
,			out.print("")"");
,			
,		} catch (SQLException e) {
,			
,			out.println(""Error using DB connection."");
,			out.println(e.getMessage());
,		}
,		
,		out.println(""# End: "" + new GregorianCalendar().getTime());
,		
,		out.close();
,		
,		// drop the temporary tables
,                dq.dropTable(tmpname2);
,                dq.dropTable(tmpname);
,                
,                // return with eventual messages such as error messages
,                return dq.getOutput();
,	}
"
113c5414-6c55-466b-b879-a350ab6e0ca2,26db558e-5c1d-4bee-bc2d-ed28b697319c,EQ,"PUBLIC,void,setSpeed,LPAREN,int,speed,RPAREN,LBRACE,this,DOT,speed,<MASK>,speed,SEMI,RBRACE","	public void setSpeed(int speed) {
,		this.speed <MASK> speed;
,	}
"
9c253d2b-e626-4f21-a850-dfb022369350,c83f910d-1858-40bb-8325-45a97465ff8a,GT,"PUBLIC,void,atimes,LPAREN,FINAL,double,LBRACKET,RBRACKET,x,COMMA,FINAL,double,LBRACKET,RBRACKET,r,COMMA,FINAL,int,itrnsp,RPAREN,LBRACE,double,LBRACKET,RBRACKET,rr,SEMI,IF,LPAREN,itrnsp,<MASK>,0,RPAREN,rr,EQ,mat,DOT,atx,LPAREN,x,RPAREN,SEMI,ELSE,rr,EQ,mat,DOT,ax,LPAREN,x,RPAREN,SEMI,System,DOT,arraycopy,LPAREN,rr,COMMA,0,COMMA,r,COMMA,0,COMMA,rr,DOT,length,RPAREN,SEMI,RBRACE","  public void atimes(final double[] x, final double[] r, final int itrnsp) {
,    double[] rr;
,    if (itrnsp <MASK> 0)
,      rr = mat.atx(x);
,    else
,      rr = mat.ax(x);
,    System.arraycopy(rr, 0, r, 0, rr.length);
,  }
"
789d219f-7383-4fa6-b72d-81f8985229f6,f0e40863-09d6-4e6b-87f8-86f5e24f4ed8,EQEQ,"PUBLIC,void,alternatePlayers,LPAREN,RPAREN,LBRACE,IF,LPAREN,this,DOT,game,DOT,getCurrentPlayer,LPAREN,RPAREN,<MASK>,this,DOT,game,DOT,getPlayer1,LPAREN,RPAREN,RPAREN,LBRACE,this,DOT,game,DOT,setCurrentPlayer,LPAREN,this,DOT,game,DOT,getPlayer2,LPAREN,RPAREN,RPAREN,SEMI,this,DOT,game,DOT,setOtherPlayer,LPAREN,this,DOT,game,DOT,getPlayer1,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,ELSE,LBRACE,this,DOT,game,DOT,setCurrentPlayer,LPAREN,this,DOT,game,DOT,getPlayer1,LPAREN,RPAREN,RPAREN,SEMI,this,DOT,game,DOT,setOtherPlayer,LPAREN,this,DOT,game,DOT,getPlayer2,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,RBRACE","    public void alternatePlayers() {
,        if (this.game.getCurrentPlayer() <MASK> this.game.getPlayer1()) {
,            this.game.setCurrentPlayer(this.game.getPlayer2());
,            this.game.setOtherPlayer(this.game.getPlayer1());
,        } else {
,            this.game.setCurrentPlayer(this.game.getPlayer1());
,            this.game.setOtherPlayer(this.game.getPlayer2());
,        }
,    }
"
dd0b8baf-c022-4efa-99dd-425e9c39b04c,ef8bfc93-b80d-42c1-bb6c-a2612a8d0c3f,SLASH,"MONKEYS_AT,Override,PUBLIC,float,getStartU,LPAREN,RPAREN,LBRACE,RETURN,LPAREN,float,RPAREN,this,DOT,startU,<MASK>,LPAREN,float,RPAREN,this,DOT,parent,DOT,getWidth,LPAREN,RPAREN,SEMI,RBRACE","    @Override
,    public float getStartU() {
,        return (float) this.startU <MASK> (float) this.parent.getWidth();
,    }
"
a7d6e1ab-1124-4912-b023-4d34ef70d86a,8f40510c-e5a7-4950-9c7c-880cea1fde4e,GTEQ,"PRIVATE,void,selectNextNotePad,LPAREN,RPAREN,LBRACE,IF,LPAREN,padIndex,<MASK>,getNotepads,LPAREN,RPAREN,DOT,size,LPAREN,RPAREN,SUB,1,RPAREN,RETURN,SEMI,padIndex,PLUSPLUS,SEMI,selectNotePad,LPAREN,getNotePad,LPAREN,RPAREN,RPAREN,SEMI,RBRACE","    private void selectNextNotePad() {
,        if (padIndex <MASK> getNotepads().size() - 1) return;
,        padIndex++;
,        selectNotePad(getNotePad());
,    }
"
811987a2-df8f-411b-b35a-1f251eaec687,0e6e7074-13cc-4577-a467-b608fceacad1,SLASH,"PUBLIC,double,getValue,LPAREN,int,k,RPAREN,LBRACE,RETURN,LPAREN,n0,<MASK>,maxIteration,RPAREN,STAR,LPAREN,maxIteration,SUB,k,RPAREN,SEMI,RBRACE","    public double getValue(int k){
,        return (n0<MASK>maxIteration)*(maxIteration-k); 
,    }
"
8817b45c-c104-442a-8047-a39e95fe55f2,a76e29d9-9338-4ec6-b0ce-58890e6944be,LT,"MONKEYS_AT,Override,PROTECTED,void,initComponents,LPAREN,RPAREN,LBRACE,GroupLayout,layout,EQ,NEW,GroupLayout,LPAREN,this,RPAREN,SEMI,setLayout,LPAREN,layout,RPAREN,SEMI,ParallelGroup,horizontalParallelGroup,EQ,layout,DOT,createParallelGroup,LPAREN,LEADING,RPAREN,SEMI,ParallelGroup,verticalParallelGroup,EQ,layout,DOT,createParallelGroup,LPAREN,LEADING,RPAREN,SEMI,SequentialGroup,verticalSequentialGroup,EQ,layout,DOT,createSequentialGroup,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,timeIntervalUnits,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,timeIntervalUnits,LBRACKET,i,RBRACKET,EQ,NEW,JLabel,LPAREN,i,PLUS,"""",RPAREN,SEMI,eventsButtons,LBRACKET,i,RBRACKET,EQ,NEW,JButton,LPAREN,i,PLUS,"""",RPAREN,SEMI,eventsButtons,LBRACKET,i,RBRACKET,DOT,addActionListener,LPAREN,NEW,NotebookEventsPanelButtonActionListener,LPAREN,getLogger,LPAREN,RPAREN,RPAREN,RPAREN,SEMI,SequentialGroup,horizontalSequentialGroup,EQ,layout,DOT,createSequentialGroup,LPAREN,RPAREN,SEMI,horizontalSequentialGroup,DOT,addComponent,LPAREN,timeIntervalUnits,LBRACKET,i,RBRACKET,COMMA,50,COMMA,50,COMMA,50,RPAREN,SEMI,horizontalSequentialGroup,DOT,addGap,LPAREN,0,COMMA,0,COMMA,0,RPAREN,SEMI,horizontalSequentialGroup,DOT,addComponent,LPAREN,eventsButtons,LBRACKET,i,RBRACKET,RPAREN,SEMI,horizontalParallelGroup,DOT,addGroup,LPAREN,horizontalSequentialGroup,RPAREN,SEMI,ParallelGroup,verticalParallelGroup2,EQ,layout,DOT,createParallelGroup,LPAREN,LEADING,COMMA,false,RPAREN,SEMI,verticalParallelGroup2,DOT,addComponent,LPAREN,eventsButtons,LBRACKET,i,RBRACKET,RPAREN,SEMI,verticalParallelGroup2,DOT,addComponent,LPAREN,timeIntervalUnits,LBRACKET,i,RBRACKET,RPAREN,SEMI,verticalSequentialGroup,DOT,addGroup,LPAREN,verticalParallelGroup2,RPAREN,SEMI,verticalSequentialGroup,DOT,addGap,LPAREN,0,COMMA,0,COMMA,0,RPAREN,SEMI,RBRACE,layout,DOT,setHorizontalGroup,LPAREN,horizontalParallelGroup,RPAREN,SEMI,verticalParallelGroup,DOT,addGroup,LPAREN,verticalSequentialGroup,RPAREN,SEMI,layout,DOT,setVerticalGroup,LPAREN,verticalParallelGroup,RPAREN,SEMI,RBRACE","    @Override
,    protected void initComponents() {
,    
,        GroupLayout layout = new GroupLayout(this);
,        setLayout(layout);
,        
,        ParallelGroup horizontalParallelGroup = layout.createParallelGroup(LEADING);
,        ParallelGroup verticalParallelGroup = layout.createParallelGroup(LEADING);
,        SequentialGroup verticalSequentialGroup = layout.createSequentialGroup();
,        
,        for (int i = 0; i <MASK> timeIntervalUnits.length; i++) {
,            timeIntervalUnits[i] = new JLabel(i + """");
,            eventsButtons[i] = new JButton(i + """");
,            eventsButtons[i].addActionListener(new NotebookEventsPanelButtonActionListener(getLogger()));
,            
,            SequentialGroup horizontalSequentialGroup = layout.createSequentialGroup();
,            horizontalSequentialGroup.addComponent(timeIntervalUnits[i], 50, 50, 50);
,            horizontalSequentialGroup.addGap(0, 0, 0);
,            horizontalSequentialGroup.addComponent(eventsButtons[i]);
,            
,            horizontalParallelGroup.addGroup(horizontalSequentialGroup);
,            
,            ParallelGroup verticalParallelGroup2 = layout.createParallelGroup(LEADING, false);
,            verticalParallelGroup2.addComponent(eventsButtons[i]);
,            verticalParallelGroup2.addComponent(timeIntervalUnits[i]);
,            verticalSequentialGroup.addGroup(verticalParallelGroup2);
,            verticalSequentialGroup.addGap(0, 0, 0);
,            
,        }
,        
,        layout.setHorizontalGroup(horizontalParallelGroup);
,        
,        verticalParallelGroup.addGroup(verticalSequentialGroup);
,        layout.setVerticalGroup(verticalParallelGroup);
,    }
"
27817d3e-5449-46fd-a403-1ed403e709bb,0b1679f9-a87a-4b27-b1d6-ea7b58a7deef,GTEQ,"PRIVATE,TorrentMapping,LPAREN,List,LT,TorrentFileInfo,GT,files,COMMA,long,pieceSize,RPAREN,LBRACE,List,LT,Entry,GT,allMappings,EQ,NEW,ArrayList,LT,Entry,GT,LPAREN,files,DOT,size,LPAREN,RPAREN,RPAREN,SEMI,List,LT,Path,GT,allFiles,EQ,NEW,ArrayList,LT,Path,GT,LPAREN,files,DOT,size,LPAREN,RPAREN,RPAREN,SEMI,FINAL,List,LT,List,LT,Entry,GTGT,pToF,EQ,NEW,ArrayList,LT,List,LT,Entry,GTGT,LPAREN,RPAREN,SEMI,FINAL,Map,LT,Path,COMMA,List,LT,Entry,GTGT,fToP,EQ,NEW,HashMap,LT,Path,COMMA,List,LT,Entry,GTGT,LPAREN,RPAREN,SEMI,int,numPieces,EQ,0,SEMI,long,remPieceLen,EQ,pieceSize,SEMI,long,initPiecePos,EQ,0,SEMI,List,LT,Entry,GT,thisPieceMappings,EQ,NEW,ArrayList,LT,Entry,GT,LPAREN,RPAREN,SEMI,FOR,LPAREN,TorrentFileInfo,file,COLON,files,RPAREN,LBRACE,List,LT,Entry,GT,thisFileMappings,EQ,NEW,ArrayList,LT,Entry,GT,LPAREN,LPAREN,int,RPAREN,LPAREN,file,DOT,getLength,LPAREN,RPAREN,SLASH,pieceSize,PLUS,1,RPAREN,RPAREN,SEMI,long,remFileLen,EQ,file,DOT,getLength,LPAREN,RPAREN,SEMI,long,initFilePos,EQ,0,SEMI,WHILE,LPAREN,remFileLen,GT,0,RPAREN,LBRACE,IF,LPAREN,remFileLen,<MASK>,remPieceLen,RPAREN,LBRACE,Entry,entry,EQ,NEW,Entry,LPAREN,numPieces,COMMA,NEW,PositionRange,LPAREN,initPiecePos,COMMA,LPAREN,initPiecePos,PLUS,remPieceLen,RPAREN,RPAREN,COMMA,file,DOT,getPath,LPAREN,RPAREN,COMMA,NEW,PositionRange,LPAREN,initFilePos,COMMA,LPAREN,initFilePos,PLUS,remPieceLen,RPAREN,RPAREN,RPAREN,SEMI,allMappings,DOT,add,LPAREN,entry,RPAREN,SEMI,thisFileMappings,DOT,add,LPAREN,entry,RPAREN,SEMI,thisPieceMappings,DOT,add,LPAREN,entry,RPAREN,SEMI,remFileLen,SUBEQ,remPieceLen,SEMI,initFilePos,PLUSEQ,remPieceLen,SEMI,remPieceLen,EQ,pieceSize,SEMI,initPiecePos,EQ,0,SEMI,numPieces,PLUSPLUS,SEMI,pToF,DOT,add,LPAREN,thisPieceMappings,RPAREN,SEMI,thisPieceMappings,EQ,NEW,ArrayList,LT,Entry,GT,LPAREN,RPAREN,SEMI,RBRACE,ELSE,LBRACE,Entry,entry,EQ,NEW,Entry,LPAREN,numPieces,COMMA,NEW,PositionRange,LPAREN,initPiecePos,COMMA,LPAREN,initPiecePos,PLUS,remFileLen,RPAREN,RPAREN,COMMA,file,DOT,getPath,LPAREN,RPAREN,COMMA,NEW,PositionRange,LPAREN,initFilePos,COMMA,LPAREN,initFilePos,PLUS,remFileLen,RPAREN,RPAREN,RPAREN,SEMI,allMappings,DOT,add,LPAREN,entry,RPAREN,SEMI,thisFileMappings,DOT,add,LPAREN,entry,RPAREN,SEMI,thisPieceMappings,DOT,add,LPAREN,entry,RPAREN,SEMI,remPieceLen,SUBEQ,remFileLen,SEMI,initPiecePos,PLUSEQ,remFileLen,SEMI,remFileLen,EQ,0,SEMI,RBRACE,RBRACE,allFiles,DOT,add,LPAREN,file,DOT,getPath,LPAREN,RPAREN,RPAREN,SEMI,fToP,DOT,put,LPAREN,file,DOT,getPath,LPAREN,RPAREN,COMMA,thisFileMappings,RPAREN,SEMI,RBRACE,IF,LPAREN,remPieceLen,LT,pieceSize,RPAREN,LBRACE,numPieces,PLUSPLUS,SEMI,pToF,DOT,add,LPAREN,thisPieceMappings,RPAREN,SEMI,RBRACE,pieceCount,EQ,numPieces,SEMI,piecesToFiles,EQ,Collections,DOT,unmodifiableList,LPAREN,pToF,RPAREN,SEMI,filesToPieces,EQ,Collections,DOT,unmodifiableMap,LPAREN,fToP,RPAREN,SEMI,fileList,EQ,Collections,DOT,unmodifiableList,LPAREN,allFiles,RPAREN,SEMI,mappings,EQ,Collections,DOT,unmodifiableList,LPAREN,allMappings,RPAREN,SEMI,RBRACE","    private TorrentMapping (List<TorrentFileInfo> files, long pieceSize) {
,        List<Entry> allMappings = new ArrayList<Entry>(files.size());
,        List<Path> allFiles = new ArrayList<Path>(files.size());
,        final List<List<Entry>> pToF = new ArrayList<List<Entry>>();
,        final Map<Path,List<Entry>> fToP = new HashMap<Path,List<Entry>>();
,
,        int numPieces = 0;
,
,        long remPieceLen = pieceSize;
,        long initPiecePos = 0;
,
,        List<Entry> thisPieceMappings = new ArrayList<Entry>();
,
,        for (TorrentFileInfo file : files) {
,            List<Entry> thisFileMappings = new ArrayList<Entry>((int) (file.getLength() / pieceSize + 1));
,
,            long remFileLen = file.getLength();
,            long initFilePos = 0;
,
,            // While this file is not fully mapped...
,            while (remFileLen > 0) {
,
,                // If the remaining piece fits entirely in this file...
,                if (remFileLen <MASK> remPieceLen) {
,                    Entry entry =
,                        new Entry(numPieces, new PositionRange(initPiecePos, (initPiecePos + remPieceLen)), file
,                            .getPath(), new PositionRange(initFilePos, (initFilePos + remPieceLen)));
,                    allMappings.add(entry);
,                    thisFileMappings.add(entry);
,                    thisPieceMappings.add(entry);
,
,                    remFileLen -= remPieceLen;
,                    initFilePos += remPieceLen;
,
,                    remPieceLen = pieceSize;
,                    initPiecePos = 0;
,
,                    numPieces++;
,                    pToF.add(thisPieceMappings);
,                    thisPieceMappings = new ArrayList<Entry>();
,                } else {
,                    Entry entry =
,                        new Entry(numPieces, new PositionRange(initPiecePos, (initPiecePos + remFileLen)), file
,                            .getPath(), new PositionRange(initFilePos, (initFilePos + remFileLen)));
,                    allMappings.add(entry);
,                    thisFileMappings.add(entry);
,                    thisPieceMappings.add(entry);
,
,                    remPieceLen -= remFileLen;
,                    initPiecePos += remFileLen;
,
,                    remFileLen = 0;
,                }
,
,            }
,
,            allFiles.add(file.getPath());
,            fToP.put(file.getPath(), thisFileMappings);
,        }
,
,        // If the last piece was not of regular size...
,        if (remPieceLen < pieceSize) {
,            numPieces++;
,            pToF.add(thisPieceMappings);
,        }
,
,        pieceCount = numPieces;
,        piecesToFiles = Collections.unmodifiableList(pToF);
,        filesToPieces = Collections.unmodifiableMap(fToP);
,        fileList = Collections.unmodifiableList(allFiles);
,        mappings = Collections.unmodifiableList(allMappings);
,    }
"
2170437a-9f53-47a2-b3cb-257eca2eb4ab,18e12b89-9d58-4e24-b1c5-595d8058410a,EQEQ,"PUBLIC,void,save,LPAREN,RPAREN,LBRACE,User,assignedTo,EQ,null,SEMI,FOR,LPAREN,User,u,COLON,users,DOT,getUsers,LPAREN,RPAREN,RPAREN,LBRACE,IF,LPAREN,u,DOT,getUserName,LPAREN,RPAREN,DOT,equals,LPAREN,cboxAssignedTo,DOT,getText,LPAREN,RPAREN,RPAREN,RPAREN,LBRACE,assignedTo,EQ,u,SEMI,RBRACE,RBRACE,TRY,LBRACE,theTask,DOT,setTitle,LPAREN,txtTitle,DOT,getText,LPAREN,RPAREN,RPAREN,SEMI,theTask,DOT,setComments,LPAREN,txtComments,DOT,getText,LPAREN,RPAREN,RPAREN,SEMI,theTask,DOT,setDescription,LPAREN,txtDescription,DOT,getText,LPAREN,RPAREN,RPAREN,SEMI,theTask,DOT,setDueDate,LPAREN,FormatDate,DOT,convertDateTimeToCalendar,LPAREN,dueDate,RPAREN,RPAREN,SEMI,theTask,DOT,setUpdatedDate,LPAREN,Calendar,DOT,getInstance,LPAREN,RPAREN,RPAREN,SEMI,theTask,DOT,setPriority,LPAREN,PriorityCode,DOT,valueOf,LPAREN,cboxPriority,DOT,getText,LPAREN,RPAREN,RPAREN,RPAREN,SEMI,theTask,DOT,setStatus,LPAREN,StatusCode,DOT,valueOf,LPAREN,cboxStatus,DOT,getText,LPAREN,RPAREN,RPAREN,RPAREN,SEMI,theTask,DOT,setAssignedTo,LPAREN,assignedTo,RPAREN,SEMI,TRY,LBRACE,double,number,SEMI,number,EQ,Double,DOT,parseDouble,LPAREN,txtTimeEstimate,DOT,getText,LPAREN,RPAREN,RPAREN,SEMI,theTask,DOT,setTimeEstimate,LPAREN,number,RPAREN,SEMI,number,EQ,Double,DOT,parseDouble,LPAREN,txtTimeSpent,DOT,getText,LPAREN,RPAREN,RPAREN,SEMI,theTask,DOT,setTimeSpent,LPAREN,number,RPAREN,SEMI,RBRACE,CATCH,LPAREN,NumberFormatException,nfe,RPAREN,LBRACE,MyMessageBox,error,EQ,NEW,MyMessageBox,LPAREN,shell,COMMA,""Error"",COMMA,""Please enter a non-negative numeric value for Time Estimate and Time Spent."",COMMA,""OK"",RPAREN,SEMI,error,DOT,open,LPAREN,RPAREN,SEMI,RBRACE,tasks,DOT,getTasks,LPAREN,RPAREN,SEMI,tasks,DOT,editTask,LPAREN,theTask,RPAREN,SEMI,MyMessageBox,success,EQ,NEW,MyMessageBox,LPAREN,shell,COMMA,""Save succeeded"",COMMA,""Task has been updated."",COMMA,""OK"",RPAREN,SEMI,success,DOT,open,LPAREN,RPAREN,SEMI,shell,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,IllegalArgumentException,iae,RPAREN,LBRACE,MyMessageBox,error,SEMI,IF,LPAREN,iae,DOT,getMessage,LPAREN,RPAREN,<MASK>,null,RPAREN,LBRACE,error,EQ,NEW,MyMessageBox,LPAREN,shell,COMMA,""Illegal Field"",COMMA,""Check your inputs"",COMMA,""OK"",RPAREN,SEMI,RBRACE,ELSE,LBRACE,error,EQ,NEW,MyMessageBox,LPAREN,shell,COMMA,""Illegal Field"",COMMA,iae,DOT,getMessage,LPAREN,RPAREN,COMMA,""OK"",RPAREN,SEMI,RBRACE,error,DOT,open,LPAREN,RPAREN,SEMI,RBRACE,RBRACE","	public void save()
,	{
,		
,		User assignedTo = null;
,		
,		for (User u : users.getUsers())
,		{
,			if (u.getUserName().equals(cboxAssignedTo.getText()))
,			{
,				assignedTo = u;
,			}
,		}
,		try
,		{
,			theTask.setTitle(txtTitle.getText());
,			theTask.setComments(txtComments.getText());
,			theTask.setDescription(txtDescription.getText());
,			theTask.setDueDate(FormatDate.convertDateTimeToCalendar(dueDate));
,			theTask.setUpdatedDate(Calendar.getInstance());
,			theTask.setPriority(PriorityCode.valueOf(cboxPriority.getText()));
,			theTask.setStatus(StatusCode.valueOf(cboxStatus.getText()));
,			theTask.setAssignedTo(assignedTo);
,			try
,			{
,				double number;
,				number = Double.parseDouble(txtTimeEstimate.getText());
,				theTask.setTimeEstimate(number);
,				number = Double.parseDouble(txtTimeSpent.getText());
,				theTask.setTimeSpent(number);
,			}
,			catch (NumberFormatException nfe)
,			{
,				MyMessageBox error = new MyMessageBox(shell, ""Error"", ""Please enter a non-negative numeric value for Time Estimate and Time Spent."", ""OK"");
,				error.open();
,			}
,			
,			tasks.getTasks();
,			tasks.editTask(theTask);
,			MyMessageBox success = new MyMessageBox(shell, ""Save succeeded"", ""Task has been updated."", ""OK"");
,			success.open();
,			shell.close();
,		}
,		catch(IllegalArgumentException iae)
,		{
,			MyMessageBox error;
,			if (iae.getMessage() <MASK> null)
,			{
,				error = new MyMessageBox(shell, ""Illegal Field"", ""Check your inputs"", ""OK"");
,			}
,			else
,			{
,				error = new MyMessageBox(shell, ""Illegal Field"", iae.getMessage(), ""OK"");
,			}
,			error.open();
,		}
,	}
"
811987a2-df8f-411b-b35a-1f251eaec687,d7064fd8-6fe4-4470-8568-d618efd30225,SLASH,"PUBLIC,ArrayList,getConnectedNeurons,LPAREN,int,neuronNumber,RPAREN,LBRACE,ArrayList,connectedNeurons,EQ,NEW,ArrayList,LPAREN,RPAREN,SEMI,int,neuronRow,EQ,LPAREN,LPAREN,neuronNumber,SUB,1,RPAREN,<MASK>,colNumber,RPAREN,PLUS,1,SEMI,IF,LPAREN,neuronRow,PERCENT,2,EQEQ,1,RPAREN,LBRACE,IF,LPAREN,LPAREN,neuronNumber,SUB,LPAREN,colNumber,PLUS,1,RPAREN,GT,0,RPAREN,AMPAMP,LPAREN,LPAREN,neuronNumber,PERCENT,colNumber,RPAREN,BANGEQ,1,RPAREN,RPAREN,connectedNeurons,DOT,add,LPAREN,neuronNumber,SUB,LPAREN,colNumber,PLUS,1,RPAREN,RPAREN,SEMI,IF,LPAREN,neuronNumber,SUB,colNumber,GT,0,RPAREN,connectedNeurons,DOT,add,LPAREN,neuronNumber,SUB,colNumber,RPAREN,SEMI,IF,LPAREN,LPAREN,neuronNumber,SUB,1,GT,0,RPAREN,AMPAMP,LPAREN,LPAREN,neuronNumber,PERCENT,colNumber,RPAREN,BANGEQ,1,RPAREN,RPAREN,connectedNeurons,DOT,add,LPAREN,neuronNumber,SUB,1,RPAREN,SEMI,IF,LPAREN,neuronNumber,PLUS,1,LTEQ,colNumber,STAR,rowNumber,AMPAMP,LPAREN,LPAREN,neuronNumber,PERCENT,colNumber,RPAREN,BANGEQ,0,RPAREN,RPAREN,connectedNeurons,DOT,add,LPAREN,neuronNumber,PLUS,1,RPAREN,SEMI,IF,LPAREN,neuronNumber,PLUS,LPAREN,colNumber,SUB,1,RPAREN,LT,colNumber,STAR,rowNumber,AMPAMP,LPAREN,LPAREN,neuronNumber,PERCENT,colNumber,RPAREN,BANGEQ,1,RPAREN,RPAREN,connectedNeurons,DOT,add,LPAREN,neuronNumber,PLUS,LPAREN,colNumber,SUB,1,RPAREN,RPAREN,SEMI,IF,LPAREN,LPAREN,neuronNumber,PLUS,colNumber,LTEQ,colNumber,STAR,rowNumber,RPAREN,RPAREN,connectedNeurons,DOT,add,LPAREN,neuronNumber,PLUS,colNumber,RPAREN,SEMI,RBRACE,ELSE,LBRACE,IF,LPAREN,neuronNumber,SUB,colNumber,GT,0,RPAREN,connectedNeurons,DOT,add,LPAREN,neuronNumber,SUB,colNumber,RPAREN,SEMI,IF,LPAREN,LPAREN,neuronNumber,SUB,LPAREN,colNumber,SUB,1,RPAREN,GT,0,RPAREN,AMPAMP,LPAREN,LPAREN,neuronNumber,PERCENT,colNumber,RPAREN,BANGEQ,0,RPAREN,RPAREN,connectedNeurons,DOT,add,LPAREN,neuronNumber,SUB,LPAREN,colNumber,SUB,1,RPAREN,RPAREN,SEMI,IF,LPAREN,LPAREN,neuronNumber,SUB,1,GT,0,RPAREN,AMPAMP,LPAREN,LPAREN,neuronNumber,PERCENT,colNumber,RPAREN,BANGEQ,1,RPAREN,RPAREN,connectedNeurons,DOT,add,LPAREN,neuronNumber,SUB,1,RPAREN,SEMI,IF,LPAREN,neuronNumber,PLUS,1,LTEQ,colNumber,STAR,rowNumber,AMPAMP,LPAREN,LPAREN,neuronNumber,PERCENT,colNumber,RPAREN,BANGEQ,0,RPAREN,RPAREN,connectedNeurons,DOT,add,LPAREN,neuronNumber,PLUS,1,RPAREN,SEMI,IF,LPAREN,LPAREN,neuronNumber,PLUS,colNumber,LTEQ,colNumber,STAR,rowNumber,RPAREN,RPAREN,connectedNeurons,DOT,add,LPAREN,neuronNumber,PLUS,colNumber,RPAREN,SEMI,IF,LPAREN,neuronNumber,PLUS,LPAREN,colNumber,PLUS,1,RPAREN,LTEQ,colNumber,STAR,rowNumber,AMPAMP,LPAREN,LPAREN,neuronNumber,PERCENT,colNumber,RPAREN,BANGEQ,0,RPAREN,RPAREN,connectedNeurons,DOT,add,LPAREN,neuronNumber,PLUS,LPAREN,colNumber,PLUS,1,RPAREN,RPAREN,SEMI,RBRACE,RETURN,connectedNeurons,SEMI,RBRACE","    public ArrayList getConnectedNeurons(int neuronNumber){
,        ArrayList connectedNeurons = new ArrayList();
,        
,        int neuronRow = ((neuronNumber - 1) <MASK> colNumber ) + 1;
,        
,        if(neuronRow%2 == 1){
,            if((neuronNumber-(colNumber+1)>0) && ((neuronNumber%colNumber) != 1))
,                connectedNeurons.add(neuronNumber-(colNumber+1));
,            if(neuronNumber-colNumber>0)
,                connectedNeurons.add(neuronNumber-colNumber);
,            if((neuronNumber-1 >0) && ((neuronNumber%colNumber) != 1))
,                connectedNeurons.add(neuronNumber-1); 
,            if(neuronNumber+1 <= colNumber*rowNumber && ((neuronNumber%colNumber) != 0))
,                connectedNeurons.add(neuronNumber+1);
,            if(neuronNumber+(colNumber-1)<colNumber*rowNumber && ((neuronNumber%colNumber) != 1))
,                connectedNeurons.add(neuronNumber+(colNumber-1)); 
,            if((neuronNumber+colNumber<=colNumber*rowNumber) )
,                connectedNeurons.add(neuronNumber+colNumber); 
,        }else{
,            if(neuronNumber-colNumber>0)
,                connectedNeurons.add(neuronNumber-colNumber);
,            if((neuronNumber-(colNumber-1)>0) && ((neuronNumber%colNumber) != 0))
,                connectedNeurons.add(neuronNumber-(colNumber-1));
,            if((neuronNumber-1 >0) && ((neuronNumber%colNumber) != 1))
,                connectedNeurons.add(neuronNumber-1); 
,            if(neuronNumber+1 <= colNumber*rowNumber && ((neuronNumber%colNumber) != 0))
,                connectedNeurons.add(neuronNumber+1);
,            if((neuronNumber+colNumber<=colNumber*rowNumber) )
,                connectedNeurons.add(neuronNumber+colNumber); 
,            if(neuronNumber+(colNumber+1)<=colNumber*rowNumber && ((neuronNumber%colNumber) != 0))
,                connectedNeurons.add(neuronNumber+(colNumber+1)); 
,        }
,        return connectedNeurons;
,    }
"
b4c6806c-de1d-4e17-959c-99489d5dd3e8,7e909630-90cf-40dd-8b86-bb983809bb8d,SUB,"PUBLIC,STATIC,boolean,isCorrectPath,LPAREN,String,str,RPAREN,LBRACE,str,EQ,str,DOT,trim,LPAREN,RPAREN,SEMI,IF,LPAREN,str,DOT,startsWith,LPAREN,""<"",RPAREN,AMPAMP,str,DOT,endsWith,LPAREN,"">"",RPAREN,RPAREN,LBRACE,str,EQ,str,DOT,substring,LPAREN,1,COMMA,str,DOT,length,LPAREN,RPAREN,<MASK>,1,RPAREN,SEMI,IF,LPAREN,isEmailAddress,LPAREN,str,RPAREN,RPAREN,LBRACE,RETURN,true,SEMI,RBRACE,RBRACE,RETURN,false,SEMI,RBRACE","	public static boolean isCorrectPath(String str){
,		str=str.trim();
,		if(str.startsWith(""<"") && str.endsWith("">"")){
,			str=str.substring(1, str.length()<MASK>1);
,			if(isEmailAddress(str)){
,				return true;
,			}
,		}
,		return false;
,	}
"
a98e10ef-3b3e-45e8-a98b-65ce2200211b,87cbd007-95e7-4804-82f2-97d04726629c,GTEQ,"PUBLIC,LAtom,item,LPAREN,int,index,RPAREN,LBRACE,IF,LPAREN,index,LT,0,BARBAR,index,<MASK>,values,DOT,size,LPAREN,RPAREN,RPAREN,LBRACE,RETURN,NEW,LList,LPAREN,RPAREN,SEMI,RBRACE,RETURN,values,DOT,get,LPAREN,index,RPAREN,SEMI,RBRACE","	public LAtom item(int index) {
,		if (index < 0 || index <MASK> values.size()) { return new LList(); }
,		return values.get(index);
,	}
"
4efd15d4-7259-49ef-bb2b-8984a1154bd6,1f18a8fe-24cf-4082-b323-b9f3f4747049,SUB,"PUBLIC,STATIC,LMDrillModel,getAllTweetsByKeyword,LPAREN,String,keywords,RPAREN,LBRACE,ArrayList,LT,tweetModel,GT,results,EQ,NEW,ArrayList,LT,tweetModel,GT,LPAREN,RPAREN,SEMI,tweetModel,t,SEMI,LMDrillModel,lmDrillModel,EQ,NEW,LMDrillModel,LPAREN,RPAREN,SEMI,String,tablename,EQ,""temp-"",PLUS,keywords,SEMI,tablename,EQ,tablename,DOT,replaceAll,LPAREN,"","",COMMA,""|"",RPAREN,SEMI,tablename,EQ,tablename,DOT,replaceAll,LPAREN,"";"",COMMA,""|"",RPAREN,SEMI,tablename,EQ,tablename,DOT,replaceAll,LPAREN,"" "",COMMA,"""",RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,tablename,RPAREN,SEMI,keywords,EQ,keywords,DOT,replaceAll,LPAREN,"","",COMMA,""%' and message like '%"",RPAREN,SEMI,keywords,EQ,keywords,DOT,replaceAll,LPAREN,"";"",COMMA,""%' or message like '%"",RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,keywords,RPAREN,SEMI,TRY,LBRACE,Connection,c,EQ,DBFactory,DOT,getConnection,LPAREN,RPAREN,SEMI,PreparedStatement,ps,EQ,c,DOT,prepareStatement,LPAREN,""DROP TABLE IF EXISTS `"",PLUS,tablename,PLUS,""`; "",RPAREN,SEMI,ps,DOT,execute,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,ps,RPAREN,SEMI,ps,EQ,c,DOT,prepareStatement,LPAREN,""CREATE TABLE `"",PLUS,tablename,PLUS,""` ("",PLUS,""`username` varchar(20) NOT NULL,"",PLUS,""`date` varchar(30) NOT NULL,"",PLUS,""`message` varchar(180) NOT NULL"",PLUS,"")ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;"",RPAREN,SEMI,ps,DOT,execute,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,ps,RPAREN,SEMI,ps,EQ,c,DOT,prepareStatement,LPAREN,""INSERT INTO `"",PLUS,tablename,PLUS,""` (username, date, message) "",PLUS,""SELECT username, date, message FROM `tweets` "",PLUS,""WHERE message like '%"",PLUS,keywords,PLUS,""%';"",RPAREN,SEMI,ps,DOT,execute,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,ps,RPAREN,SEMI,ps,EQ,c,DOT,prepareStatement,LPAREN,""SELECT * from `"",PLUS,tablename,PLUS,""`;"",RPAREN,SEMI,ResultSet,rs,EQ,ps,DOT,executeQuery,LPAREN,RPAREN,SEMI,WHILE,LPAREN,rs,DOT,next,LPAREN,RPAREN,RPAREN,LBRACE,t,EQ,NEW,tweetModel,LPAREN,RPAREN,SEMI,t,DOT,setUsername,LPAREN,rs,DOT,getString,LPAREN,""username"",RPAREN,RPAREN,SEMI,t,DOT,setDate,LPAREN,rs,DOT,getString,LPAREN,""date"",RPAREN,RPAREN,SEMI,t,DOT,setMessage,LPAREN,cleanTweet,LPAREN,rs,DOT,getString,LPAREN,""message"",RPAREN,RPAREN,RPAREN,SEMI,NGramDriver,DOT,NGramTweet,LPAREN,cleanTweet,LPAREN,t,DOT,getMessage,LPAREN,RPAREN,RPAREN,RPAREN,SEMI,results,DOT,add,LPAREN,t,RPAREN,SEMI,RBRACE,rs,DOT,close,LPAREN,RPAREN,SEMI,ps,DOT,close,LPAREN,RPAREN,SEMI,c,DOT,close,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""******************************* "",RPAREN,SEMI,IF,LPAREN,results,DOT,isEmpty,LPAREN,RPAREN,RPAREN,LBRACE,lmDrillModel,EQ,NEW,LMDrillModel,LPAREN,<MASK>,1,RPAREN,SEMI,RBRACE,ELSE,LBRACE,sortNgramAndRemoveOutliers,LPAREN,RPAREN,SEMI,TfidfDriver,DOT,idfchecker,LPAREN,results,RPAREN,SEMI,lmDrillModel,EQ,NEW,LMDrillModel,LPAREN,0,COMMA,tablename,COMMA,TfidfDriver,DOT,getToplist,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,CATCH,LPAREN,ClassNotFoundException,ex,RPAREN,LBRACE,Logger,DOT,getLogger,LPAREN,tweetHandler,DOT,CLASS,DOT,getName,LPAREN,RPAREN,RPAREN,DOT,log,LPAREN,Level,DOT,SEVERE,COMMA,null,COMMA,ex,RPAREN,SEMI,RBRACE,CATCH,LPAREN,SQLException,ex,RPAREN,LBRACE,Logger,DOT,getLogger,LPAREN,tweetHandler,DOT,CLASS,DOT,getName,LPAREN,RPAREN,RPAREN,DOT,log,LPAREN,Level,DOT,SEVERE,COMMA,null,COMMA,ex,RPAREN,SEMI,RBRACE,RETURN,lmDrillModel,SEMI,RBRACE","    public static LMDrillModel getAllTweetsByKeyword(String keywords){
,        ArrayList<tweetModel> results = new ArrayList<tweetModel>();
,        tweetModel t;
,        LMDrillModel lmDrillModel = new LMDrillModel();
,        
,        String tablename = ""temp<MASK>""+keywords;
,        tablename = tablename.replaceAll("","", ""|"");
,        tablename = tablename.replaceAll("";"", ""|"");
,        tablename = tablename.replaceAll("" "", """");
,           System.out.println(tablename);
,        
,        keywords = keywords.replaceAll("","", ""%\' and message like \'%"");  
,        keywords = keywords.replaceAll("";"", ""%\' or message like \'%""); 
,           System.out.println(keywords);
,        
,        try{
,            Connection c = DBFactory.getConnection();
,            PreparedStatement ps = c.prepareStatement(
,                ""DROP TABLE IF EXISTS `"" + tablename + ""`; ""
,                );
,                ps.execute();
,                System.out.println(ps);
,            ps = c.prepareStatement(
,                ""CREATE TABLE `"" + tablename + ""` ("" +
,                ""`username` varchar(20) NOT NULL,"" +
,                ""`date` varchar(30) NOT NULL,"" +
,                ""`message` varchar(180) NOT NULL"" +
,                "")ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;""
,                );
,                ps.execute();
,                System.out.println(ps);
,            ps = c.prepareStatement(
,                ""INSERT INTO `"" + tablename + ""` (username, date, message) "" + 
,                ""SELECT username, date, message FROM `tweets` "" +
,                ""WHERE message like '%"" + keywords + ""%';"");
,                ps.execute();   
,                System.out.println(ps);
,            
,            ps = c.prepareStatement(""SELECT * from `"" + tablename + ""`;"");
,            ResultSet rs = ps.executeQuery();
,
,            while(rs.next()){
,                t = new tweetModel();
,                t.setUsername(rs.getString(""username""));
,                t.setDate(rs.getString(""date""));
,                t.setMessage(cleanTweet(rs.getString(""message"")));
,                NGramDriver.NGramTweet(cleanTweet(t.getMessage()));
,                results.add(t);
,            }
,            
,            rs.close();
,            ps.close();
,            c.close();
,
,            System.out.println(""******************************* "");
,            if(results.isEmpty()){
,                lmDrillModel = new LMDrillModel(-1);
,            }else{
,                sortNgramAndRemoveOutliers();
,                TfidfDriver.idfchecker(results);
,                lmDrillModel = new LMDrillModel(0, tablename, TfidfDriver.getToplist());
,            }
,            
,        }catch(ClassNotFoundException ex){
,            Logger.getLogger(tweetHandler.class.getName()).log(Level.SEVERE, null, ex);
,        }catch(SQLException ex){
,            Logger.getLogger(tweetHandler.class.getName()).log(Level.SEVERE, null, ex);
,        }
,        
,        return lmDrillModel;
,    }
"
79c4654b-aafa-4bb5-8623-742a2af23063,9cc40a48-7568-4e76-bdbf-f945e53cc11c,PERCENT,"PUBLIC,Individual,run,LPAREN,RPAREN,LBRACE,int,i,COMMA,generation,SEMI,Individual,offspring1,COMMA,offspring2,SEMI,Individual,DOT,calculateAssignmentProbalityForDiefferentDepot,LPAREN,problemInstance,RPAREN,SEMI,Individual,DOT,calculateProbalityForDiefferentVehicle,LPAREN,problemInstance,RPAREN,SEMI,PopulationInitiator,DOT,initialisePopulation,LPAREN,population,COMMA,POPULATION_SIZE,COMMA,problemInstance,RPAREN,SEMI,TotalCostCalculator,DOT,calculateCostofPopulation,LPAREN,population,COMMA,0,COMMA,POPULATION_SIZE,COMMA,Solver,DOT,loadPenaltyFactor,COMMA,Solver,DOT,routeTimePenaltyFactor,RPAREN,SEMI,int,continuosInjection,EQ,0,SEMI,double,previousBest,EQ,SUB,1,SEMI,double,bestBeforeInjection,EQ,SUB,1,SEMI,FOR,LPAREN,generation,EQ,0,SEMI,generation,LT,NUMBER_OF_GENERATION,SEMI,generation,PLUSPLUS,RPAREN,LBRACE,Solver,DOT,gatherExcelData,LPAREN,population,COMMA,POPULATION_SIZE,COMMA,generation,RPAREN,SEMI,TotalCostCalculator,DOT,calculateCostofPopulation,LPAREN,population,COMMA,0,COMMA,POPULATION_SIZE,COMMA,Solver,DOT,loadPenaltyFactor,COMMA,Solver,DOT,routeTimePenaltyFactor,RPAREN,SEMI,IF,LPAREN,generation,BANGEQ,0,AMPAMP,generation,<MASK>,Solver,DOT,episodeSize,EQEQ,0,RPAREN,LBRACE,mutationWithWeightingScheme,DOT,updateWeights,LPAREN,RPAREN,SEMI,RBRACE,fussSelection,DOT,initialise,LPAREN,population,COMMA,false,RPAREN,SEMI,rouletteWheelSelection,DOT,initialise,LPAREN,population,COMMA,false,RPAREN,SEMI,i,EQ,0,SEMI,parent1,EQ,population,LBRACKET,0,RBRACKET,SEMI,parent2,EQ,rouletteWheelSelection,DOT,getIndividual,LPAREN,population,RPAREN,SEMI,offspring1,EQ,NEW,Individual,LPAREN,problemInstance,RPAREN,SEMI,Uniform_VariedEdgeRecombnation_Crossover,DOT,crossOver_Uniform_VariedEdgeRecombination,LPAREN,problemInstance,COMMA,parent1,COMMA,parent2,COMMA,offspring1,RPAREN,SEMI,mutationWithWeightingScheme,DOT,applyMutation,LPAREN,offspring1,RPAREN,SEMI,offspringPopulation,LBRACKET,i,RBRACKET,EQ,offspring1,SEMI,i,PLUSPLUS,SEMI,WHILE,LPAREN,i,LT,NUMBER_OF_OFFSPRING,RPAREN,LBRACE,parent1,EQ,rouletteWheelSelection,DOT,getIndividual,LPAREN,population,RPAREN,SEMI,parent2,EQ,fussSelection,DOT,getIndividual,LPAREN,population,RPAREN,SEMI,offspring1,EQ,NEW,Individual,LPAREN,problemInstance,RPAREN,SEMI,Uniform_VariedEdgeRecombnation_Crossover,DOT,crossOver_Uniform_VariedEdgeRecombination,LPAREN,problemInstance,COMMA,parent1,COMMA,parent2,COMMA,offspring1,RPAREN,SEMI,mutationWithWeightingScheme,DOT,applyMutation,LPAREN,offspring1,RPAREN,SEMI,offspringPopulation,LBRACKET,i,RBRACKET,EQ,offspring1,SEMI,i,PLUSPLUS,SEMI,RBRACE,TotalCostCalculator,DOT,calculateCostofPopulation,LPAREN,offspringPopulation,COMMA,0,COMMA,NUMBER_OF_OFFSPRING,COMMA,Solver,DOT,loadPenaltyFactor,COMMA,Solver,DOT,routeTimePenaltyFactor,RPAREN,SEMI,Utility,DOT,concatPopulation,LPAREN,parentOffspringTotalPopulation,COMMA,population,COMMA,offspringPopulation,RPAREN,SEMI,FOR,LPAREN,int,p,EQ,0,SEMI,p,LT,parentOffspringTotalPopulation,DOT,length,SEMI,p,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,parentOffspringTotalPopulation,LBRACKET,p,RBRACKET,DOT,validationTest,LPAREN,RPAREN,EQEQ,false,RPAREN,LBRACE,System,DOT,err,DOT,println,LPAREN,""ERROR\nERROR\nERROR\nIndividual is invalid!!!"",PLUS,"" gen : "",PLUS,generation,PLUS,"" index : "",PLUS,p,RPAREN,SEMI,out,DOT,println,LPAREN,""\n\nINVALID INDIVIDUAL : \n"",RPAREN,SEMI,parentOffspringTotalPopulation,LBRACKET,p,RBRACKET,DOT,print,LPAREN,RPAREN,SEMI,RETURN,population,LBRACKET,0,RBRACKET,SEMI,RBRACE,RBRACE,localImprovement,DOT,initialise,LPAREN,parentOffspringTotalPopulation,RPAREN,SEMI,localImprovement,DOT,run,LPAREN,parentOffspringTotalPopulation,RPAREN,SEMI,TotalCostCalculator,DOT,calculateCostofPopulation,LPAREN,parentOffspringTotalPopulation,COMMA,0,COMMA,POPULATION_SIZE,COMMA,Solver,DOT,loadPenaltyFactor,COMMA,Solver,DOT,routeTimePenaltyFactor,RPAREN,SEMI,Utility,DOT,sort,LPAREN,parentOffspringTotalPopulation,RPAREN,SEMI,FOR,LPAREN,int,p,EQ,0,SEMI,p,LT,parentOffspringTotalPopulation,DOT,length,SUB,1,SEMI,p,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,parentOffspringTotalPopulation,LBRACKET,p,RBRACKET,DOT,cost,EQEQ,parentOffspringTotalPopulation,LBRACKET,p,PLUS,1,RBRACKET,DOT,cost,RPAREN,LBRACE,IF,LPAREN,Individual,DOT,isDuplicate,LPAREN,problemInstance,COMMA,parentOffspringTotalPopulation,LBRACKET,p,RBRACKET,COMMA,parentOffspringTotalPopulation,LBRACKET,p,PLUS,1,RBRACKET,RPAREN,RPAREN,LBRACE,parentOffspringTotalPopulation,LBRACKET,p,RBRACKET,EQ,NEW,Individual,LPAREN,problemInstance,RPAREN,SEMI,Initialise_ClosestDepot_GreedyCut,DOT,initialise,LPAREN,parentOffspringTotalPopulation,LBRACKET,p,RBRACKET,RPAREN,SEMI,TotalCostCalculator,DOT,calculateCost,LPAREN,parentOffspringTotalPopulation,LBRACKET,p,RBRACKET,COMMA,Solver,DOT,loadPenaltyFactor,COMMA,Solver,DOT,routeTimePenaltyFactor,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,Utility,DOT,sort,LPAREN,parentOffspringTotalPopulation,RPAREN,SEMI,int,elitistRatio,EQ,POPULATION_SIZE,STAR,10,SLASH,100,SEMI,population,LBRACKET,0,RBRACKET,EQ,parentOffspringTotalPopulation,LBRACKET,0,RBRACKET,SEMI,int,index2,EQ,1,SEMI,int,index1,EQ,1,SEMI,WHILE,LPAREN,index1,LT,elitistRatio,RPAREN,LBRACE,population,LBRACKET,index1,RBRACKET,EQ,parentOffspringTotalPopulation,LBRACKET,index2,RBRACKET,SEMI,index1,PLUSPLUS,SEMI,index2,PLUSPLUS,SEMI,RBRACE,Individual,total,LBRACKET,RBRACKET,EQ,NEW,Individual,LBRACKET,POPULATION_SIZE,PLUS,NUMBER_OF_OFFSPRING,SUB,elitistRatio,RBRACKET,SEMI,System,DOT,arraycopy,LPAREN,parentOffspringTotalPopulation,COMMA,elitistRatio,COMMA,total,COMMA,0,COMMA,total,DOT,length,RPAREN,SEMI,survivalSelectionOperator,DOT,initialise,LPAREN,total,COMMA,true,RPAREN,SEMI,FOR,LPAREN,i,EQ,elitistRatio,SEMI,i,LT,POPULATION_SIZE,SEMI,i,PLUSPLUS,RPAREN,LBRACE,population,LBRACKET,i,RBRACKET,EQ,survivalSelectionOperator,DOT,getIndividual,LPAREN,total,RPAREN,SEMI,RBRACE,Utility,DOT,sort,LPAREN,population,RPAREN,SEMI,IF,LPAREN,Solver,DOT,singleRun,RPAREN,LBRACE,double,tmpSum,EQ,0,SEMI,FOR,LPAREN,int,tmpi,EQ,0,SEMI,tmpi,LT,POPULATION_SIZE,SEMI,tmpi,PLUSPLUS,RPAREN,tmpSum,PLUSEQ,population,LBRACKET,tmpi,RBRACKET,DOT,costWithPenalty,SEMI,System,DOT,out,DOT,println,LPAREN,""Gen : "",PLUS,generation,PLUS,"" Best : "",PLUS,population,LBRACKET,0,RBRACKET,DOT,costWithPenalty,PLUS,"" Feasibility : "",PLUS,population,LBRACKET,0,RBRACKET,DOT,isFeasible,PLUS,"" Avg : "",PLUS,LPAREN,tmpSum,SLASH,POPULATION_SIZE,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,TotalCostCalculator,DOT,calculateCostofPopulation,LPAREN,population,COMMA,0,COMMA,POPULATION_SIZE,COMMA,Solver,DOT,loadPenaltyFactor,COMMA,Solver,DOT,routeTimePenaltyFactor,RPAREN,SEMI,Utility,DOT,sort,LPAREN,population,RPAREN,SEMI,Solver,DOT,gatherExcelData,LPAREN,population,COMMA,POPULATION_SIZE,COMMA,generation,RPAREN,SEMI,IF,LPAREN,Solver,DOT,outputToFile,RPAREN,LBRACE,out,DOT,print,LPAREN,""\n\n\n\n\n--------------------------------------------------\n"",RPAREN,SEMI,out,DOT,print,LPAREN,""\n\n\nFINAL POPULATION\n\n"",RPAREN,SEMI,FOR,LPAREN,i,EQ,0,SEMI,i,LT,POPULATION_SIZE,SEMI,i,PLUSPLUS,RPAREN,LBRACE,out,DOT,println,LPAREN,""\n\nIndividual : "",PLUS,i,RPAREN,SEMI,population,LBRACKET,i,RBRACKET,DOT,print,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,System,DOT,out,DOT,println,LPAREN,""Gen : "",PLUS,generation,PLUS,"" Best : "",PLUS,population,LBRACKET,0,RBRACKET,DOT,costWithPenalty,PLUS,"" Feasibility : "",PLUS,population,LBRACKET,0,RBRACKET,DOT,isFeasible,RPAREN,SEMI,mutationWithWeightingScheme,DOT,printProbabilities,LPAREN,RPAREN,SEMI,RETURN,population,LBRACKET,0,RBRACKET,SEMI,RBRACE","	public Individual run() 
,	{
,		int i,generation;
,		
,		Individual offspring1,offspring2;
,
,		Individual.calculateAssignmentProbalityForDiefferentDepot(problemInstance);
,		Individual.calculateProbalityForDiefferentVehicle(problemInstance);
,		PopulationInitiator.initialisePopulation(population, POPULATION_SIZE, problemInstance);
,		TotalCostCalculator.calculateCostofPopulation(population,0, POPULATION_SIZE, Solver.loadPenaltyFactor, Solver.routeTimePenaltyFactor) ;
,		
,		
,		int continuosInjection=0; 
,		//int unImprovedGeneration=0;
,		
,		double previousBest=-1;
,		double bestBeforeInjection=-1;
,		
,		for( generation=0;generation<NUMBER_OF_GENERATION;generation++)
,		{
,			//For collecting min,max,avg
,			Solver.gatherExcelData(population, POPULATION_SIZE, generation);
,			TotalCostCalculator.calculateCostofPopulation(population,0, POPULATION_SIZE, Solver.loadPenaltyFactor, Solver.routeTimePenaltyFactor) ;
,			
,			//  Best individual always reproduces K=1 times + roulette wheel
,			
,			if(generation !=0 && generation<MASK>Solver.episodeSize==0)
,			{
,				//System.out.println(""Generation : ""+generation);				
,				mutationWithWeightingScheme.updateWeights();
,				//System.out.println();
,				//System.out.println();
,			}
,			
,			fussSelection.initialise(population, false);
,			rouletteWheelSelection.initialise(population, false);
,			
,			i=0;
,			
,			
,			parent1 = population[0];
,			parent2 = rouletteWheelSelection.getIndividual(population);
,			
,			offspring1 = new Individual(problemInstance);
,			/*offspring2 = new Individual(problemInstance);
,			
,			
,			Crossover_Uniform_Uniform.crossOver_Uniform_Uniform(problemInstance, parent1, parent2, offspring1, offspring2);*/
,			Uniform_VariedEdgeRecombnation_Crossover.crossOver_Uniform_VariedEdgeRecombination(problemInstance, parent1, parent2, offspring1);
,			
,			
,			mutationWithWeightingScheme.applyMutation(offspring1);
,			
,			offspringPopulation[i] = offspring1;
,			i++;
,/*			offspringPopulation[i] = offspring2;
,			i++;*/
,			
,			while(i<NUMBER_OF_OFFSPRING)
,			{
,				parent1 = rouletteWheelSelection.getIndividual(population);
,				parent2 = fussSelection.getIndividual(population);
,				
,				offspring1 = new Individual(problemInstance);
,				//offspring2 = new Individual(problemInstance);
,				
,				//Crossover_Uniform_Uniform.crossOver_Uniform_Uniform(problemInstance, parent1, parent2, offspring1, offspring2);	
,				Uniform_VariedEdgeRecombnation_Crossover.crossOver_Uniform_VariedEdgeRecombination(problemInstance, parent1, parent2, offspring1);
,				
,				mutationWithWeightingScheme.applyMutation(offspring1);
,				//mutation.applyMutation(offspring2);
,				
,				offspringPopulation[i] = offspring1;
,				i++;
,/*				offspringPopulation[i] = offspring2;
,				i++;*/
,			}
,
,			TotalCostCalculator.calculateCostofPopulation(offspringPopulation, 0,NUMBER_OF_OFFSPRING, Solver.loadPenaltyFactor, Solver.routeTimePenaltyFactor) ;
,			Utility.concatPopulation(parentOffspringTotalPopulation, population, offspringPopulation);
,			
,			
,			for(int p=0;p<parentOffspringTotalPopulation.length;p++)
,			{
,				if(parentOffspringTotalPopulation[p].validationTest()==false)
,				{
,					System.err.println(""ERROR\nERROR\nERROR\nIndividual is invalid!!!""+"" gen : ""+generation+"" index : ""+ p);
,					out.println(""\n\nINVALID INDIVIDUAL : \n"");
,					parentOffspringTotalPopulation[p].print();
,					
,					return population[0];
,				}
,				
,			}
,						
,			localImprovement.initialise(parentOffspringTotalPopulation);
,			localImprovement.run(parentOffspringTotalPopulation);
,			
,			TotalCostCalculator.calculateCostofPopulation(parentOffspringTotalPopulation, 0, POPULATION_SIZE, Solver.loadPenaltyFactor, Solver.routeTimePenaltyFactor);
,			
,			//Preserving the k% best individual + FUSS approach, the n portion of best individuals always make to next generation
,			Utility.sort(parentOffspringTotalPopulation);
,			
,			for(int p=0;p<parentOffspringTotalPopulation.length-1;p++)
,			{
,				if(parentOffspringTotalPopulation[p].cost == parentOffspringTotalPopulation[p+1].cost)
,				{
,					if(Individual.isDuplicate(problemInstance, parentOffspringTotalPopulation[p], parentOffspringTotalPopulation[p+1]))
,					{
,						parentOffspringTotalPopulation[p] = new Individual(problemInstance);
,						Initialise_ClosestDepot_GreedyCut.initialise(parentOffspringTotalPopulation[p]);
,						//.initialise_Closest_Depot_Greedy_Cut();
,						TotalCostCalculator.calculateCost(parentOffspringTotalPopulation[p], Solver.loadPenaltyFactor, Solver.routeTimePenaltyFactor);
,						//parentOffspringTotalPopulation[p].calculateCostAndPenalty();
,						//System.out.println(""DUPLICATE"");
,					}
,				}
,				
,			}
,
,			//TotalCostCalculator.calculateCostofPopulation(parentOffspringTotalPopulation, 0, POPULATION_SIZE, loadPenaltyFactor, routeTimePenaltyFactor);
,			Utility.sort(parentOffspringTotalPopulation);
,
,			int elitistRatio = POPULATION_SIZE * 10 /100 ;
,			
,			population[0] = parentOffspringTotalPopulation[0];
,			
,			int index2=1;
,			int index1=1;
,			
,			while(index1 < elitistRatio)
,			{
,				population[index1] = parentOffspringTotalPopulation[index2];
,				index1++;
,				index2++;
,			}
,			
,			
,			Individual total[] = new Individual[POPULATION_SIZE+NUMBER_OF_OFFSPRING-elitistRatio];
,			System.arraycopy(parentOffspringTotalPopulation, elitistRatio, total, 0, total.length);
,			
,			survivalSelectionOperator.initialise(total, true);
,			for( i=elitistRatio;i<POPULATION_SIZE;i++)
,			{
,				population[i]= survivalSelectionOperator.getIndividual(total);
,			}
,			
,			
,			
,			/**
,			if(unImprovedGeneration>=5)
,			{
,				unImprovedGeneration=0;
,				
,				int sizeParentOffspring=parentOffspringTotalPopulation.length;
,				int margin=sizeParentOffspring/4;
,					
,				
,				Utility.sort(parentOffspringTotalPopulation);
,				
,				if(bestBeforeInjection == -1)
,				{
,					bestBeforeInjection = population[0].costWithPenalty;
,				}
,				else if(population[0].costWithPenalty == bestBeforeInjection)
,				{
,					//margin = 1;
,				}
,				
,				
,				ProblemInstance pInstance=population[0].problemInstance;
,				for(int noInject=margin;noInject<sizeParentOffspring;noInject++)
,				{
,					Individual newIndividual=new Individual(pInstance);
,					newIndividual.initialise();
,					
,					//double p = Utility.randomDouble(0, 1);
,					//if(p<=0.5)localSearch.improve(newIndividual, loadPenaltyFactor, routeTimePenaltyFactor);
,					
,					parentOffspringTotalPopulation[noInject]=newIndividual;
,				}
,				TotalCostCalculator.calculateCostofPopulation(parentOffspringTotalPopulation, 0,parentOffspringTotalPopulation.length, loadPenaltyFactor, routeTimePenaltyFactor) ;
,			}
,			*/
,			/************************ End of population Injection Block **************************/
,
,			
,			Utility.sort(population);	
,			
,			if(Solver.singleRun)
,			{
,				double tmpSum=0;
,				for(int tmpi=0;tmpi<POPULATION_SIZE;tmpi++)
,					tmpSum += population[tmpi].costWithPenalty;
,				
,				System.out.println(""Gen : ""+ generation + "" Best : ""+population[0].costWithPenalty+  "" Feasibility : ""+ population[0].isFeasible +"" Avg : ""+(tmpSum/POPULATION_SIZE));
,			}
,			
,			
,		}
,
,
,		TotalCostCalculator.calculateCostofPopulation(population,0,POPULATION_SIZE, Solver.loadPenaltyFactor, Solver.routeTimePenaltyFactor);
,		Utility.sort(population);
,		Solver.gatherExcelData(population, POPULATION_SIZE, generation);
,		
,		if(Solver.outputToFile)
,		{
,			out.print(""\n\n\n\n\n--------------------------------------------------\n"");
,		//	calculateCostWithPenalty(0, POPULATION_SIZE, generation, true);
,			out.print(""\n\n\nFINAL POPULATION\n\n"");
,			for( i=0;i<POPULATION_SIZE;i++)
,			{
,				out.println(""\n\nIndividual : ""+i);
,				population[i].print();
,			}
,		}
,		System.out.println(""Gen : ""+ generation + "" Best : ""+population[0].costWithPenalty+  "" Feasibility : ""+ population[0].isFeasible);
,		mutationWithWeightingScheme.printProbabilities();
,		return population[0];
,
,	}
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,0267eb8b-091b-4e68-94ed-34e7ab06b6a0,BANGEQ,"PUBLIC,STATIC,List,LT,ABObject,GT,getShelteringStructure,LPAREN,ABObject,pig,COMMA,ABObject,LBRACKET,RBRACKET,list,RPAREN,LBRACE,List,LT,ABObject,GT,leftList,EQ,NEW,ArrayList,LT,ABObject,GT,LPAREN,RPAREN,SEMI,List,LT,ABObject,GT,rightList,EQ,NEW,ArrayList,LT,ABObject,GT,LPAREN,RPAREN,SEMI,HashMap,LT,ABObject,COMMA,List,LT,ABObject,GTGT,leftSupportee,EQ,NEW,HashMap,LT,ABObject,COMMA,List,LT,ABObject,GTGT,LPAREN,RPAREN,SEMI,HashMap,LT,ABObject,COMMA,List,LT,ABObject,GTGT,rightSupportee,EQ,NEW,HashMap,LT,ABObject,COMMA,List,LT,ABObject,GTGT,LPAREN,RPAREN,SEMI,List,LT,ABObject,GT,shelteringList,EQ,NEW,ArrayList,LT,ABObject,GT,LPAREN,RPAREN,SEMI,List,LT,ABObject,GT,supporterUnder,EQ,NEW,ArrayList,LT,ABObject,GT,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,list,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,ERA,LBRACKET,RBRACKET,rels,EQ,RectangleAlgebra,DOT,GetERA,LPAREN,list,LBRACKET,i,RBRACKET,COMMA,pig,RPAREN,SEMI,IF,LPAREN,StabilityRules,DOT,CheckRule,LPAREN,rels,LBRACKET,0,RBRACKET,COMMA,321,RPAREN,AMPAMP,StabilityRules,DOT,CheckRule,LPAREN,rels,LBRACKET,1,RBRACKET,COMMA,322,RPAREN,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,pig,DOT,id,PLUS,"" "",PLUS,list,LBRACKET,i,RBRACKET,DOT,id,PLUS,"" : "",PLUS,rels,LBRACKET,0,RBRACKET,PLUS,"" , "",PLUS,rels,LBRACKET,1,RBRACKET,RPAREN,SEMI,leftList,DOT,add,LPAREN,list,LBRACKET,i,RBRACKET,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,StabilityRules,DOT,CheckRule,LPAREN,rels,LBRACKET,0,RBRACKET,COMMA,323,RPAREN,AMPAMP,StabilityRules,DOT,CheckRule,LPAREN,rels,LBRACKET,1,RBRACKET,COMMA,322,RPAREN,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,pig,DOT,id,PLUS,"" "",PLUS,list,LBRACKET,i,RBRACKET,DOT,id,PLUS,"" : "",PLUS,rels,LBRACKET,0,RBRACKET,PLUS,"" , "",PLUS,rels,LBRACKET,1,RBRACKET,RPAREN,SEMI,rightList,DOT,add,LPAREN,list,LBRACKET,i,RBRACKET,RPAREN,SEMI,RBRACE,RBRACE,GetClosestObjects,LPAREN,leftList,COMMA,true,RPAREN,SEMI,GetClosestObjects,LPAREN,rightList,COMMA,false,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,leftList,DOT,size,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""Left: "",PLUS,leftList,DOT,get,LPAREN,i,RPAREN,DOT,id,RPAREN,SEMI,ABObject,x,EQ,leftList,DOT,get,LPAREN,i,RPAREN,SEMI,List,LT,ABObject,GT,temp,EQ,ABUtil,DOT,getSupporters,LPAREN,x,COMMA,Arrays,DOT,asList,LPAREN,list,RPAREN,COMMA,1,RPAREN,SEMI,FOR,LPAREN,int,j,EQ,0,SEMI,j,LT,temp,DOT,size,LPAREN,RPAREN,SEMI,j,PLUSPLUS,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""Supporter objects of "",PLUS,x,DOT,id,PLUS,"" is "",PLUS,temp,DOT,get,LPAREN,j,RPAREN,DOT,id,PLUS,"" depth "",PLUS,temp,DOT,get,LPAREN,j,RPAREN,DOT,depth,PLUS,"" location "",PLUS,temp,DOT,get,LPAREN,j,RPAREN,DOT,getLocation,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,IF,LPAREN,BANG,shelteringList,DOT,contains,LPAREN,x,RPAREN,RPAREN,LBRACE,shelteringList,DOT,add,LPAREN,x,RPAREN,SEMI,RBRACE,RBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,rightList,DOT,size,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""Right: "",PLUS,rightList,DOT,get,LPAREN,i,RPAREN,DOT,id,RPAREN,SEMI,ABObject,x,EQ,rightList,DOT,get,LPAREN,i,RPAREN,SEMI,List,LT,ABObject,GT,temp,EQ,ABUtil,DOT,getSupporters,LPAREN,x,COMMA,Arrays,DOT,asList,LPAREN,list,RPAREN,COMMA,1,RPAREN,SEMI,FOR,LPAREN,int,j,EQ,0,SEMI,j,LT,temp,DOT,size,LPAREN,RPAREN,SEMI,j,PLUSPLUS,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""Supporter objects of "",PLUS,x,DOT,id,PLUS,"" is "",PLUS,temp,DOT,get,LPAREN,j,RPAREN,DOT,id,PLUS,"" depth "",PLUS,temp,DOT,get,LPAREN,j,RPAREN,DOT,depth,PLUS,"" location "",PLUS,temp,DOT,get,LPAREN,j,RPAREN,DOT,getLocation,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,IF,LPAREN,BANG,shelteringList,DOT,contains,LPAREN,rightList,DOT,get,LPAREN,i,RPAREN,RPAREN,RPAREN,LBRACE,shelteringList,DOT,add,LPAREN,rightList,DOT,get,LPAREN,i,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,leftList,DOT,size,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""Left: "",PLUS,leftList,DOT,get,LPAREN,i,RPAREN,DOT,id,PLUS,leftList,DOT,get,LPAREN,i,RPAREN,DOT,getLocation,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,rightList,DOT,size,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""Right: "",PLUS,rightList,DOT,get,LPAREN,i,RPAREN,DOT,id,PLUS,rightList,DOT,get,LPAREN,i,RPAREN,DOT,getLocation,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,leftList,DOT,size,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,ABObject,x,EQ,leftList,DOT,get,LPAREN,i,RPAREN,SEMI,List,LT,ABObject,GT,temp,EQ,ABUtil,DOT,getSupportees,LPAREN,x,COMMA,Arrays,DOT,asList,LPAREN,list,RPAREN,COMMA,1,RPAREN,SEMI,FOR,LPAREN,int,j,EQ,0,SEMI,j,LT,temp,DOT,size,LPAREN,RPAREN,SEMI,j,PLUSPLUS,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""Supportee objects of "",PLUS,x,DOT,id,PLUS,"" is "",PLUS,temp,DOT,get,LPAREN,j,RPAREN,DOT,id,PLUS,"" depth "",PLUS,temp,DOT,get,LPAREN,j,RPAREN,DOT,depth,PLUS,"" location "",PLUS,temp,DOT,get,LPAREN,j,RPAREN,DOT,getLocation,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,List,LT,ABObject,GT,temp1,EQ,ABUtil,DOT,getAllSupportees,LPAREN,temp,COMMA,Arrays,DOT,asList,LPAREN,list,RPAREN,RPAREN,SEMI,leftSupportee,DOT,put,LPAREN,x,COMMA,temp1,RPAREN,SEMI,FOR,LPAREN,int,j,EQ,0,SEMI,j,LT,temp1,DOT,size,LPAREN,RPAREN,SEMI,j,PLUSPLUS,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""Supportee objects of "",PLUS,x,DOT,id,PLUS,"" is "",PLUS,temp1,DOT,get,LPAREN,j,RPAREN,DOT,id,PLUS,"" depth "",PLUS,temp1,DOT,get,LPAREN,j,RPAREN,DOT,depth,PLUS,"" location "",PLUS,temp1,DOT,get,LPAREN,j,RPAREN,DOT,getLocation,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,rightList,DOT,size,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,ABObject,x,EQ,rightList,DOT,get,LPAREN,i,RPAREN,SEMI,List,LT,ABObject,GT,temp,EQ,ABUtil,DOT,getSupportees,LPAREN,x,COMMA,Arrays,DOT,asList,LPAREN,list,RPAREN,COMMA,1,RPAREN,SEMI,FOR,LPAREN,int,j,EQ,0,SEMI,j,LT,temp,DOT,size,LPAREN,RPAREN,SEMI,j,PLUSPLUS,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""Supportee objects of "",PLUS,x,DOT,id,PLUS,"" is "",PLUS,temp,DOT,get,LPAREN,j,RPAREN,DOT,id,PLUS,"" depth "",PLUS,temp,DOT,get,LPAREN,j,RPAREN,DOT,depth,PLUS,"" location "",PLUS,temp,DOT,get,LPAREN,j,RPAREN,DOT,getLocation,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,List,LT,ABObject,GT,temp1,EQ,ABUtil,DOT,getAllSupportees,LPAREN,temp,COMMA,Arrays,DOT,asList,LPAREN,list,RPAREN,RPAREN,SEMI,rightSupportee,DOT,put,LPAREN,x,COMMA,temp1,RPAREN,SEMI,FOR,LPAREN,int,j,EQ,0,SEMI,j,LT,temp1,DOT,size,LPAREN,RPAREN,SEMI,j,PLUSPLUS,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""Supportee objects of "",PLUS,x,DOT,id,PLUS,"" is "",PLUS,temp1,DOT,get,LPAREN,j,RPAREN,DOT,id,PLUS,"" depth "",PLUS,temp1,DOT,get,LPAREN,j,RPAREN,DOT,depth,PLUS,"" location "",PLUS,temp1,DOT,get,LPAREN,j,RPAREN,DOT,getLocation,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,List,LT,ABObject,GT,smallDepth,EQ,NEW,ArrayList,LT,ABObject,GT,LPAREN,RPAREN,SEMI,ABObject,roof,EQ,GetRoof,LPAREN,leftSupportee,COMMA,rightSupportee,RPAREN,SEMI,IF,LPAREN,roof,<MASK>,null,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""Roof object is "",PLUS,roof,DOT,id,PLUS,"" depth "",PLUS,roof,DOT,depth,RPAREN,SEMI,smallDepth,DOT,addAll,LPAREN,GetSupporteeShel,LPAREN,leftSupportee,COMMA,roof,RPAREN,RPAREN,SEMI,smallDepth,DOT,addAll,LPAREN,GetSupporteeShel,LPAREN,rightSupportee,COMMA,roof,RPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,smallDepth,DOT,size,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""Sheltering object is "",PLUS,smallDepth,DOT,get,LPAREN,i,RPAREN,DOT,id,PLUS,"" depth "",PLUS,smallDepth,DOT,get,LPAREN,i,RPAREN,DOT,depth,RPAREN,SEMI,IF,LPAREN,BANG,shelteringList,DOT,contains,LPAREN,smallDepth,DOT,get,LPAREN,i,RPAREN,RPAREN,RPAREN,shelteringList,DOT,add,LPAREN,smallDepth,DOT,get,LPAREN,i,RPAREN,RPAREN,SEMI,RBRACE,RETURN,shelteringList,SEMI,RBRACE,RETURN,null,SEMI,RBRACE","	public static List<ABObject> getShelteringStructure (ABObject pig, ABObject[] list)
,	{
,		List<ABObject> leftList = new ArrayList<ABObject>();
,		List<ABObject> rightList = new ArrayList<ABObject>();
,		HashMap<ABObject, List<ABObject>> leftSupportee = new HashMap<ABObject, List<ABObject>>();
,		HashMap<ABObject, List<ABObject>> rightSupportee = new HashMap<ABObject, List<ABObject>>();
,		List<ABObject> shelteringList = new ArrayList<ABObject>();
,		List<ABObject> supporterUnder = new ArrayList<ABObject>();
,		
,		// Get List of closest objects from right and left
,		for (int i = 0; i < list.length; i++)
,		{
,			ERA[] rels = RectangleAlgebra.GetERA(list[i], pig);
,			if (StabilityRules.CheckRule(rels[0], 321) && StabilityRules.CheckRule(rels[1], 322))
,			{
,				System.out.println(pig.id + "" "" + list[i].id + "" : "" + rels[0] + "" , "" + rels[1]);
,				leftList.add(list[i]);
,			}
,			else if (StabilityRules.CheckRule(rels[0], 323) && StabilityRules.CheckRule(rels[1], 322))
,			{
,				System.out.println(pig.id + "" "" + list[i].id + "" : "" + rels[0] + "" , "" + rels[1]);
,				rightList.add(list[i]);
,			}
,		}
,		
,		// Get closest objects of each side
,		GetClosestObjects(leftList, true);
,		GetClosestObjects(rightList, false);
,		
,		for (int i = 0; i < leftList.size(); i++)
,		{
,			System.out.println(""Left: "" + leftList.get(i).id);
,			ABObject x = leftList.get(i);
,			List<ABObject> temp =  ABUtil.getSupporters(x, Arrays.asList(list), 1);
,			for (int j = 0; j < temp.size(); j++)
,			{
,				System.out.println(""Supporter objects of "" + x.id + "" is "" + temp.get(j).id + "" depth "" + temp.get(j).depth + "" location "" + temp.get(j).getLocation());
,			}
,			if (!shelteringList.contains(x))
,			{
,				shelteringList.add(x);
,				//supporterUnder.addAll(ABUtil.getAllSupporter(temp, Arrays.asList(list)));
,			}
,		}
,		for (int i = 0; i < rightList.size(); i++)
,		{
,			System.out.println(""Right: "" + rightList.get(i).id);
,			ABObject x = rightList.get(i);
,			List<ABObject> temp =  ABUtil.getSupporters(x, Arrays.asList(list), 1);
,			for (int j = 0; j < temp.size(); j++)
,			{
,				System.out.println(""Supporter objects of "" + x.id + "" is "" + temp.get(j).id + "" depth "" + temp.get(j).depth + "" location "" + temp.get(j).getLocation());
,			}
,			if (!shelteringList.contains(rightList.get(i)))
,			{
,				shelteringList.add(rightList.get(i));
,				//supporterUnder.addAll(ABUtil.getAllSupporter(temp, Arrays.asList(list)));
,			}
,		}
,		
,		for (int i = 0; i < leftList.size(); i++)
,		{
,			System.out.println(""Left: "" + leftList.get(i).id + leftList.get(i).getLocation());
,		}
,		for (int i = 0; i < rightList.size(); i++)
,		{
,			System.out.println(""Right: "" + rightList.get(i).id + rightList.get(i).getLocation());
,		}
,		
,		// Get Supportee list of each side
,		for (int i = 0; i < leftList.size(); i++)
,		{
,			ABObject x = leftList.get(i);
,			List<ABObject> temp =  ABUtil.getSupportees(x, Arrays.asList(list), 1);
,			for (int j = 0; j < temp.size(); j++)
,			{
,				System.out.println(""Supportee objects of "" + x.id + "" is "" + temp.get(j).id + "" depth "" + temp.get(j).depth + "" location "" + temp.get(j).getLocation());
,			}
,			List<ABObject> temp1 = ABUtil.getAllSupportees(temp, Arrays.asList(list));
,			leftSupportee.put(x,temp1);
,			for (int j = 0; j < temp1.size(); j++)
,			{
,				System.out.println(""Supportee objects of "" + x.id + "" is "" + temp1.get(j).id + "" depth "" + temp1.get(j).depth + "" location "" + temp1.get(j).getLocation());
,			} 
,		}
,		for (int i = 0; i < rightList.size(); i++)
,		{
,			ABObject x = rightList.get(i);
,			List<ABObject> temp =  ABUtil.getSupportees(x, Arrays.asList(list), 1);
,			for (int j = 0; j < temp.size(); j++)
,			{
,				System.out.println(""Supportee objects of "" + x.id + "" is "" + temp.get(j).id + "" depth "" + temp.get(j).depth + "" location "" + temp.get(j).getLocation());
,			}
,			List<ABObject> temp1 = ABUtil.getAllSupportees(temp, Arrays.asList(list));
,			rightSupportee.put(x,temp1);
,			for (int j = 0; j < temp1.size(); j++)
,			{
,				System.out.println(""Supportee objects of "" + x.id + "" is "" + temp1.get(j).id + "" depth "" + temp1.get(j).depth + "" location "" + temp1.get(j).getLocation());
,			}
,		}
,		
,		// Get Roof Object
,		List<ABObject> smallDepth = new ArrayList<ABObject>();
,		ABObject roof = GetRoof(leftSupportee, rightSupportee);
,		
,		// If roof is found, out supportee of both side to sheltering structure
,		if (roof <MASK> null)
,		{
,			System.out.println(""Roof object is "" + roof.id + "" depth "" + roof.depth);
,			smallDepth.addAll(GetSupporteeShel(leftSupportee, roof));
,			smallDepth.addAll(GetSupporteeShel(rightSupportee, roof));
,			//shelteringList.addAll(supporterUnder);
,			for (int i = 0; i < smallDepth.size(); i++)
,			{
,				System.out.println(""Sheltering object is "" + smallDepth.get(i).id + "" depth "" + smallDepth.get(i).depth);
,				if (!shelteringList.contains(smallDepth.get(i)))
,					shelteringList.add(smallDepth.get(i));
,			}
,			return shelteringList;
,		}
,		
,		return null;
,	}
"
4efd15d4-7259-49ef-bb2b-8984a1154bd6,438564fc-fb40-4371-965c-69b1544dddd7,SUB,"PUBLIC,STATIC,LMDrillModel,getAllTweetsByDate,LPAREN,String,startDate,COMMA,String,endDate,RPAREN,LBRACE,ArrayList,LT,tweetModel,GT,results,EQ,NEW,ArrayList,LT,tweetModel,GT,LPAREN,RPAREN,SEMI,LMDrillModel,lmDrillModel,EQ,NEW,LMDrillModel,LPAREN,RPAREN,SEMI,String,LBRACKET,RBRACKET,start,EQ,startDate,DOT,split,LPAREN,"" "",RPAREN,SEMI,String,LBRACKET,RBRACKET,end,EQ,endDate,DOT,split,LPAREN,"" "",RPAREN,SEMI,tweetModel,t,SEMI,String,tablename,EQ,""temp-"",PLUS,start,LBRACKET,0,RBRACKET,PLUS,""."",PLUS,start,LBRACKET,1,RBRACKET,PLUS,""."",PLUS,start,LBRACKET,2,RBRACKET,PLUS,""-"",PLUS,end,LBRACKET,0,RBRACKET,PLUS,""."",PLUS,end,LBRACKET,1,RBRACKET,PLUS,""."",PLUS,end,LBRACKET,2,RBRACKET,SEMI,System,DOT,out,DOT,println,LPAREN,tablename,RPAREN,SEMI,String,whereCondition,EQ,"""",SEMI,int,year,EQ,Integer,DOT,parseInt,LPAREN,start,LBRACKET,2,RBRACKET,RPAREN,SEMI,FOR,LPAREN,int,month,EQ,monthNumber,LPAREN,start,LBRACKET,0,RBRACKET,RPAREN,SEMI,month,LTEQ,monthNumber,LPAREN,end,LBRACKET,0,RBRACKET,RPAREN,SEMI,month,PLUSPLUS,RPAREN,LBRACE,int,currentday,EQ,1,SEMI,IF,LPAREN,month,EQEQ,monthNumber,LPAREN,start,LBRACKET,0,RBRACKET,RPAREN,RPAREN,currentday,EQ,Integer,DOT,parseInt,LPAREN,start,LBRACKET,1,RBRACKET,RPAREN,SEMI,FOR,LPAREN,int,day,EQ,currentday,SEMI,day,LTEQ,numDaysinMonth,LPAREN,month,RPAREN,SEMI,day,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,month,EQEQ,monthNumber,LPAREN,end,LBRACKET,0,RBRACKET,RPAREN,AMPAMP,day,GT,Integer,DOT,parseInt,LPAREN,end,LBRACKET,1,RBRACKET,RPAREN,RPAREN,BREAK,SEMI,IF,LPAREN,whereCondition,DOT,equals,LPAREN,"""",RPAREN,RPAREN,whereCondition,EQ,""'"",PLUS,start,LBRACKET,1,RBRACKET,PLUS,"" "",PLUS,start,LBRACKET,0,RBRACKET,PLUS,"" "",PLUS,start,LBRACKET,2,RBRACKET,PLUS,""%'"",SEMI,ELSE,whereCondition,EQ,whereCondition,DOT,concat,LPAREN,"" or date like '"",PLUS,day,PLUS,"" "",PLUS,monthName,LPAREN,month,RPAREN,PLUS,"" "",PLUS,year,PLUS,""%'"",RPAREN,SEMI,RBRACE,RBRACE,System,DOT,out,DOT,println,LPAREN,""[3] "",PLUS,whereCondition,RPAREN,SEMI,TRY,LBRACE,Connection,c,EQ,DBFactory,DOT,getConnection,LPAREN,RPAREN,SEMI,PreparedStatement,ps,EQ,c,DOT,prepareStatement,LPAREN,""DROP TABLE IF EXISTS `"",PLUS,tablename,PLUS,""`; "",RPAREN,SEMI,ps,DOT,execute,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,ps,RPAREN,SEMI,ps,EQ,c,DOT,prepareStatement,LPAREN,""CREATE TABLE `"",PLUS,tablename,PLUS,""` ("",PLUS,""`username` varchar(20) NOT NULL,"",PLUS,""`date` varchar(30) NOT NULL,"",PLUS,""`message` varchar(180) NOT NULL"",PLUS,"")ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;"",RPAREN,SEMI,ps,DOT,execute,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,ps,RPAREN,SEMI,ps,EQ,c,DOT,prepareStatement,LPAREN,""INSERT INTO `"",PLUS,tablename,PLUS,""` (username, date, message) "",PLUS,""SELECT username, date, message FROM `tweets` "",PLUS,""WHERE date like "",PLUS,whereCondition,RPAREN,SEMI,ps,DOT,execute,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,ps,RPAREN,SEMI,ps,EQ,c,DOT,prepareStatement,LPAREN,""SELECT * from `"",PLUS,tablename,PLUS,""`;"",RPAREN,SEMI,ResultSet,rs,EQ,ps,DOT,executeQuery,LPAREN,RPAREN,SEMI,WHILE,LPAREN,rs,DOT,next,LPAREN,RPAREN,RPAREN,LBRACE,t,EQ,NEW,tweetModel,LPAREN,RPAREN,SEMI,t,DOT,setUsername,LPAREN,rs,DOT,getString,LPAREN,""username"",RPAREN,RPAREN,SEMI,t,DOT,setDate,LPAREN,rs,DOT,getString,LPAREN,""date"",RPAREN,RPAREN,SEMI,t,DOT,setMessage,LPAREN,cleanTweet,LPAREN,rs,DOT,getString,LPAREN,""message"",RPAREN,RPAREN,RPAREN,SEMI,NGramDriver,DOT,NGramTweet,LPAREN,cleanTweet,LPAREN,t,DOT,getMessage,LPAREN,RPAREN,RPAREN,RPAREN,SEMI,results,DOT,add,LPAREN,t,RPAREN,SEMI,RBRACE,rs,DOT,close,LPAREN,RPAREN,SEMI,ps,DOT,close,LPAREN,RPAREN,SEMI,c,DOT,close,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""******************************* "",RPAREN,SEMI,IF,LPAREN,results,DOT,isEmpty,LPAREN,RPAREN,RPAREN,LBRACE,lmDrillModel,EQ,NEW,LMDrillModel,LPAREN,<MASK>,1,RPAREN,SEMI,RBRACE,ELSE,LBRACE,sortNgramAndRemoveOutliers,LPAREN,RPAREN,SEMI,TfidfDriver,DOT,idfchecker,LPAREN,results,RPAREN,SEMI,lmDrillModel,EQ,NEW,LMDrillModel,LPAREN,0,COMMA,tablename,COMMA,TfidfDriver,DOT,getToplist,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,CATCH,LPAREN,ClassNotFoundException,ex,RPAREN,LBRACE,Logger,DOT,getLogger,LPAREN,tweetHandler,DOT,CLASS,DOT,getName,LPAREN,RPAREN,RPAREN,DOT,log,LPAREN,Level,DOT,SEVERE,COMMA,null,COMMA,ex,RPAREN,SEMI,RBRACE,CATCH,LPAREN,SQLException,ex,RPAREN,LBRACE,Logger,DOT,getLogger,LPAREN,tweetHandler,DOT,CLASS,DOT,getName,LPAREN,RPAREN,RPAREN,DOT,log,LPAREN,Level,DOT,SEVERE,COMMA,null,COMMA,ex,RPAREN,SEMI,RBRACE,RETURN,lmDrillModel,SEMI,RBRACE","    public static LMDrillModel getAllTweetsByDate(String startDate, String endDate){
,        ArrayList<tweetModel> results = new ArrayList<tweetModel>();
,        LMDrillModel lmDrillModel = new LMDrillModel();
,        
,        String[] start = startDate.split("" "");  //[0] month, [1] day, [2] year
,        String[] end = endDate.split("" "");
,        tweetModel t;
,        
,        String tablename = ""temp<MASK>"" + start[0]+"".""+start[1]+"".""+start[2]+""-""+end[0]+"".""+end[1]+"".""+end[2];
,        System.out.println(tablename);
,        
,        
,        String whereCondition = """";
,        
,        int year = Integer.parseInt(start[2]);
,//        for(int year = Integer.parseInt(start[2]); year <= Integer.parseInt(end[2]); year++){
,            for(int month = monthNumber(start[0]); month <= monthNumber(end[0]); month++){
,                int currentday = 1;
,                if(month == monthNumber(start[0]))
,                    currentday = Integer.parseInt(start[1]);
,                
,//                System.out.println(""[2.5] ""+whereCondition);
,                for(int day = currentday; day <= numDaysinMonth(month); day++){
,                    if(month == monthNumber(end[0]) && day > Integer.parseInt(end[1]))
,                        break;
,                    if(whereCondition.equals(""""))
,                        whereCondition = ""'"" + start[1] + "" "" + start[0] + "" "" + start[2] + ""%'"";
,                    else
,                        whereCondition = whereCondition.concat("" or date like '"" + day + "" "" + monthName(month) + "" "" + year +""%'"");
,//                    System.out.println(""[2] ""+whereCondition);
,                }
,            }
,//        }
,        System.out.println(""[3] "" + whereCondition);
,        
,        try{
,            Connection c = DBFactory.getConnection();
,            PreparedStatement ps = c.prepareStatement(
,                ""DROP TABLE IF EXISTS `"" + tablename + ""`; ""
,                );
,                ps.execute();
,                System.out.println(ps);
,            ps = c.prepareStatement(
,                ""CREATE TABLE `"" + tablename + ""` ("" +
,                ""`username` varchar(20) NOT NULL,"" +
,                ""`date` varchar(30) NOT NULL,"" +
,                ""`message` varchar(180) NOT NULL"" +
,                "")ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;""
,                );
,                ps.execute();
,                System.out.println(ps);
,            ps = c.prepareStatement(
,                ""INSERT INTO `"" + tablename + ""` (username, date, message) "" + 
,                ""SELECT username, date, message FROM `tweets` "" +
,                ""WHERE date like "" + whereCondition);
,                ps.execute();   
,                System.out.println(ps);
,                //SELECT * FROM `Seasons` WHERE (date_field BETWEEN '2010-01-30 14:15:55' AND '2010-09-29 10:15:55')
,            
,            ps = c.prepareStatement(""SELECT * from `"" + tablename + ""`;"");
,            ResultSet rs = ps.executeQuery();
,            
,            while(rs.next()){
,                t = new tweetModel();
,                t.setUsername(rs.getString(""username""));
,                t.setDate(rs.getString(""date""));
,                t.setMessage(cleanTweet(rs.getString(""message"")));
,                NGramDriver.NGramTweet(cleanTweet(t.getMessage()));
,                results.add(t);
,            }
,            
,            rs.close();
,            ps.close();
,            c.close();
,            
,            System.out.println(""******************************* "");
,            if(results.isEmpty()){
,                lmDrillModel = new LMDrillModel(-1);
,            }else{
,                sortNgramAndRemoveOutliers();
,                TfidfDriver.idfchecker(results);
,                lmDrillModel = new LMDrillModel(0, tablename, TfidfDriver.getToplist());
,            }
,            
,        }catch(ClassNotFoundException ex){
,            Logger.getLogger(tweetHandler.class.getName()).log(Level.SEVERE, null, ex);
,        }catch(SQLException ex){
,            Logger.getLogger(tweetHandler.class.getName()).log(Level.SEVERE, null, ex);
,        }
,         
,        return lmDrillModel;
,    }
"
1b82c97a-fe19-4584-bdbc-4f13bb123c10,3c862cbb-3e74-46f0-8017-cc07e5de2819,STAR,"PUBLIC,double,eval,LPAREN,FINAL,double,r,RPAREN,LBRACE,RETURN,nugsq,PLUS,alph,<MASK>,pow,LPAREN,r,COMMA,bet,RPAREN,SEMI,RBRACE","    public double eval(final double r) {
,        return nugsq + alph <MASK> pow(r, bet);
,    }
"
7b0ae379-c293-480e-8c64-3374a3631947,1212ad8d-52d8-4d87-acb4-c1e6877ccbb2,SUB,"PRIVATE,STATIC,int,maxDiff,LPAREN,int,LBRACKET,RBRACKET,array,RPAREN,LBRACE,TreeSet,LT,Integer,GT,set,EQ,NEW,TreeSet,LT,GT,LPAREN,RPAREN,SEMI,int,min,EQ,Integer,DOT,MIN_VALUE,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,array,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,set,DOT,size,LPAREN,RPAREN,GT,0,RPAREN,LBRACE,int,smallest,EQ,set,DOT,first,LPAREN,RPAREN,SEMI,min,EQ,Math,DOT,max,LPAREN,min,COMMA,array,LBRACKET,i,RBRACKET,<MASK>,smallest,RPAREN,SEMI,RBRACE,set,DOT,add,LPAREN,array,LBRACKET,i,RBRACKET,RPAREN,SEMI,RBRACE,RETURN,min,SEMI,RBRACE","    private static int maxDiff(int[] array) {
,        TreeSet<Integer> set = new TreeSet<>();
,        int min = Integer.MIN_VALUE;
,        for (int i = 0; i < array.length; i++) {
,            if (set.size() > 0) {
,                int smallest = set.first();
,                min = Math.max(min, array[i] <MASK> smallest);
,            }
,            set.add(array[i]);
,        }
,        return min;
,    }
"
113c5414-6c55-466b-b879-a350ab6e0ca2,5a68f57d-c119-48f8-92cd-d8e84fd24198,EQ,"PUBLIC,void,setVisible,LPAREN,boolean,visible,RPAREN,LBRACE,this,DOT,visible,<MASK>,visible,SEMI,RBRACE","	public void setVisible(boolean visible) {
,		this.visible <MASK> visible;
,	}
"
7bd76208-9b34-4151-9ec4-57c6c52e0fcf,fbbf1189-2465-4436-81f4-33fd9541286c,GTEQ,"int,exp2anyreg,LPAREN,ExpDesc,e,RPAREN,LBRACE,this,DOT,dischargevars,LPAREN,e,RPAREN,SEMI,IF,LPAREN,e,DOT,k,EQEQ,LexState,DOT,VNONRELOC,RPAREN,LBRACE,IF,LPAREN,BANG,e,DOT,hasjumps,LPAREN,RPAREN,RPAREN,RETURN,e,DOT,info,SEMI,IF,LPAREN,e,DOT,info,<MASK>,this,DOT,nactvar,RPAREN,LBRACE,this,DOT,exp2reg,LPAREN,e,COMMA,e,DOT,info,RPAREN,SEMI,RETURN,e,DOT,info,SEMI,RBRACE,RBRACE,this,DOT,exp2nextreg,LPAREN,e,RPAREN,SEMI,RETURN,e,DOT,info,SEMI,RBRACE","	int exp2anyreg(ExpDesc e) {
,		this.dischargevars(e);
,		if (e.k == LexState.VNONRELOC) {
,			if (!e.hasjumps())
,				return e.info; /* exp is already in a register */
,			if (e.info <MASK> this.nactvar) { /* reg. is not a local? */
,				this.exp2reg(e, e.info); /* put value on it */
,				return e.info;
,			}
,		}
,		this.exp2nextreg(e); /* default */
,		return e.info;
,	}
"
8435b374-5b00-4732-9cf1-0c238d864bf2,830dbec0-8a40-49ed-95ae-70ee02b333c3,GT,"PUBLIC,void,setFontSize,LPAREN,int,size,RPAREN,LBRACE,IF,LPAREN,size,<MASK>,0,RPAREN,LBRACE,Font,font,SEMI,IF,LPAREN,_font,BANGEQ,null,RPAREN,font,EQ,_font,SEMI,ELSE,font,EQ,_pane,DOT,getGraphics,LPAREN,RPAREN,DOT,getFont,LPAREN,RPAREN,SEMI,_font,EQ,NEW,Font,LPAREN,font,DOT,getFamily,LPAREN,RPAREN,COMMA,font,DOT,getStyle,LPAREN,RPAREN,COMMA,size,RPAREN,SEMI,_graphics,DOT,setFont,LPAREN,_font,RPAREN,SEMI,_fm,EQ,_graphics,DOT,getFontMetrics,LPAREN,RPAREN,SEMI,RBRACE,RBRACE","		public void setFontSize(int size) {
,			if (size<MASK>0) {
,				Font font;
,				if (_font!=null)
,					font=_font;
,				else
,					font=_pane.getGraphics().getFont();
,				_font=new Font(font.getFamily(),font.getStyle(),size);
,				_graphics.setFont(_font);
,				_fm=_graphics.getFontMetrics();
,			}
,		}
"
958e93a1-b2a6-4224-84dc-8b9367c491c7,1dfa094c-bccd-4166-9a62-bc57e767a28a,STAR,"void,execute,LPAREN,TestCase,testCase,COMMA,String,name,COMMA,int,repeat,RPAREN,LBRACE,System,DOT,gc,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,repeat,SEMI,i,PLUSPLUS,RPAREN,LBRACE,testCase,DOT,execute,LPAREN,RPAREN,SEMI,totalInNano,PLUSEQ,testCase,DOT,getTotalInNano,LPAREN,RPAREN,SEMI,minInNano,EQ,Math,DOT,min,LPAREN,minInNano,COMMA,testCase,DOT,getMinInNano,LPAREN,RPAREN,RPAREN,SEMI,maxInNano,EQ,Math,DOT,max,LPAREN,maxInNano,COMMA,testCase,DOT,getMaxInNano,LPAREN,RPAREN,RPAREN,SEMI,testCase,DOT,resetTime,LPAREN,RPAREN,SEMI,RBRACE,System,DOT,out,DOT,println,LPAREN,String,DOT,format,LPAREN,""%10s\t%8d\t%8d\t%8d\t%11d"",COMMA,name,COMMA,minInNano,COMMA,totalInNano,SLASH,LPAREN,testCase,DOT,iterations,<MASK>,repeat,RPAREN,COMMA,maxInNano,COMMA,totalInNano,RPAREN,RPAREN,SEMI,RBRACE","        void execute(TestCase testCase, String name, int repeat) {
,            System.gc();
,
,            for (int i = 0; i < repeat; i++) {
,                testCase.execute();
,                totalInNano += testCase.getTotalInNano();
,                minInNano = Math.min(minInNano, testCase.getMinInNano());
,                maxInNano = Math.max(maxInNano, testCase.getMaxInNano());
,                testCase.resetTime();
,            }
,
,            System.out.println(String.format(""%10s\t%8d\t%8d\t%8d\t%11d"", name, minInNano, totalInNano / (testCase.iterations <MASK> repeat), maxInNano, totalInNano));
,        }
"
5735492c-ae75-4373-9d1e-6986d063d859,b95f868f-61a0-41f7-8e2d-269305a7d413,LT,"PUBLIC,void,runReferParam,LPAREN,ReferParamObject,obj,RPAREN,LBRACE,TRY,LBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,20,SEMI,i,PLUSPLUS,RPAREN,LBRACE,SYNCHRONIZED,LPAREN,obj,RPAREN,LBRACE,obj,DOT,setId,LPAREN,obj,DOT,getId,LPAREN,RPAREN,PLUS,1,RPAREN,SEMI,IF,LPAREN,i,EQEQ,10,RPAREN,LBRACE,Thread,DOT,sleep,LPAREN,5000,RPAREN,SEMI,RBRACE,System,DOT,err,DOT,println,LPAREN,""["",PLUS,Thread,DOT,currentThread,LPAREN,RPAREN,DOT,getId,LPAREN,RPAREN,PLUS,""]\u5F53i="",PLUS,i,PLUS,""\u83B7\u53D6id \u7684\u503C:"",PLUS,obj,DOT,getId,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,CATCH,LPAREN,InterruptedException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,RBRACE","	public void runReferParam(ReferParamObject obj) {
,		try {
,			for (int i = 0; i <MASK> 20; i++) {
,				synchronized (obj) {
,					// 多线程会累加这个值
,					obj.setId(obj.getId() + 1);
,					if (i == 10) {
,						Thread.sleep(5000);
,					}
,					System.err.println(""["" + Thread.currentThread().getId() + ""]当i="" + i + ""获取id 的值:"" + obj.getId());
,				}
,			}
,		} catch (InterruptedException e) {
,			e.printStackTrace();
,		}
,	}
"
8817b45c-c104-442a-8047-a39e95fe55f2,34626aa2-39ca-4bdd-b1de-344ce2fdf688,LT,"MONKEYS_AT,Override,PUBLIC,void,modelPropertyChange,LPAREN,PropertyChangeEvent,evt,RPAREN,LBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,weekNumber,DOT,length,SEMI,i,PLUSPLUS,RPAREN,weekNumber,LBRACKET,i,RBRACKET,DOT,setText,LPAREN,controller,DOT,getModel,LPAREN,RPAREN,DOT,getWeekNumber,LPAREN,i,RPAREN,RPAREN,SEMI,RBRACE","    @Override
,    public void modelPropertyChange(PropertyChangeEvent evt) {
,    
,        for (int i = 0; i <MASK> weekNumber.length; i++)
,            weekNumber[i].setText(controller.getModel().getWeekNumber(i));
,        
,    }
"
13ade84f-7d2c-4f3f-a13f-aa7abf8a58a5,71b79e0f-a687-4795-be5b-070ea9f69607,SUB,"MONKEYS_AT,Override,PUBLIC,String,toString,LPAREN,RPAREN,LBRACE,StringBuilder,sb,EQ,NEW,StringBuilder,LPAREN,RPAREN,SEMI,sb,DOT,append,LPAREN,""{"",RPAREN,SEMI,LinkedList,LT,TreeNode,GT,queue,EQ,NEW,LinkedList,LT,GT,LPAREN,RPAREN,SEMI,queue,DOT,add,LPAREN,this,RPAREN,SEMI,WHILE,LPAREN,BANG,queue,DOT,isEmpty,LPAREN,RPAREN,RPAREN,LBRACE,TreeNode,curr,EQ,queue,DOT,pop,LPAREN,RPAREN,SEMI,IF,LPAREN,curr,EQEQ,null,RPAREN,LBRACE,sb,DOT,append,LPAREN,nullTree,RPAREN,DOT,append,LPAREN,"","",RPAREN,SEMI,RBRACE,ELSE,LBRACE,sb,DOT,append,LPAREN,curr,DOT,val,RPAREN,DOT,append,LPAREN,"","",RPAREN,SEMI,queue,DOT,add,LPAREN,curr,DOT,left,RPAREN,SEMI,queue,DOT,add,LPAREN,curr,DOT,right,RPAREN,SEMI,RBRACE,RBRACE,String,toProcess,EQ,sb,DOT,toString,LPAREN,RPAREN,SEMI,WHILE,LPAREN,toProcess,DOT,endsWith,LPAREN,nullTree,RPAREN,BARBAR,toProcess,DOT,endsWith,LPAREN,"","",RPAREN,RPAREN,LBRACE,toProcess,EQ,toProcess,DOT,substring,LPAREN,0,COMMA,toProcess,DOT,length,LPAREN,RPAREN,<MASK>,1,RPAREN,SEMI,RBRACE,toProcess,PLUSEQ,""}"",SEMI,RETURN,toProcess,SEMI,RBRACE","	@Override
,	public String toString() {
,		StringBuilder sb = new StringBuilder();
,		sb.append(""{"");
,
,		LinkedList<TreeNode> queue = new LinkedList<>();
,		queue.add(this);
,		while (!queue.isEmpty()) {
,			TreeNode curr = queue.pop();
,			if (curr == null) {
,				sb.append(nullTree).append("","");
,			} else {
,				sb.append(curr.val).append("","");
,				queue.add(curr.left);
,				queue.add(curr.right);
,			}
,		}
,		String toProcess = sb.toString();
,		while (toProcess.endsWith(nullTree) || toProcess.endsWith("","")) {
,			toProcess = toProcess.substring(0, toProcess.length() <MASK> 1);
,		}
,		toProcess += ""}"";
,		return toProcess;
,	}
"
4f72d818-d8b1-4f36-aab6-20bf234b1cd2,b8f9e902-1315-42b3-ae5a-6df6569a236d,SLASH,"PUBLIC,void,snapYToGrid,LPAREN,RPAREN,LBRACE,setY,LPAREN,LPAREN,int,RPAREN,Math,DOT,round,LPAREN,getY,LPAREN,RPAREN,<MASK>,LPAREN,double,RPAREN,Constants,DOT,TILE_SIZE,RPAREN,STAR,Constants,DOT,TILE_SIZE,RPAREN,SEMI,RBRACE","	public void snapYToGrid(){
,		setY((int)Math.round(getY() <MASK> (double)Constants.TILE_SIZE) * Constants.TILE_SIZE);
,	}
"
46553d6c-dc87-4edc-9d46-5b7555c514e8,cc5d030e-3b7c-42c5-86d6-5672ea807b57,PERCENT,"PUBLIC,STATIC,byte,LBRACKET,RBRACKET,hexToBytes,LPAREN,FINAL,String,hex,RPAREN,LBRACE,byte,LBRACKET,RBRACKET,retval,EQ,null,SEMI,IF,LPAREN,LPAREN,hex,BANGEQ,null,RPAREN,AMPAMP,LPAREN,hex,DOT,length,LPAREN,RPAREN,GT,0,RPAREN,RPAREN,LBRACE,retval,EQ,NEW,byte,LBRACKET,LPAREN,hex,DOT,length,LPAREN,RPAREN,SLASH,2,RPAREN,PLUS,LPAREN,hex,DOT,length,LPAREN,RPAREN,<MASK>,2,RPAREN,RBRACKET,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,hex,DOT,length,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,i,PLUS,1,LT,hex,DOT,length,LPAREN,RPAREN,RPAREN,LBRACE,retval,LBRACKET,LPAREN,i,PLUS,1,RPAREN,SLASH,2,RBRACKET,EQ,LPAREN,byte,RPAREN,Integer,DOT,parseInt,LPAREN,hex,DOT,substring,LPAREN,i,COMMA,i,PLUS,2,RPAREN,COMMA,16,RPAREN,SEMI,i,PLUSPLUS,SEMI,RBRACE,ELSE,LBRACE,retval,LBRACKET,LPAREN,i,PLUS,1,RPAREN,SLASH,2,RBRACKET,EQ,LPAREN,byte,RPAREN,Integer,DOT,parseInt,LPAREN,hex,DOT,substring,LPAREN,i,RPAREN,COMMA,16,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,RETURN,retval,SEMI,RBRACE","  public static byte[] hexToBytes( final String hex ) {
,    byte[] retval = null;
,
,    if ( ( hex != null ) && ( hex.length() > 0 ) ) {
,      retval = new byte[( hex.length() / 2 ) + ( hex.length() <MASK> 2 )];
,
,      for ( int i = 0; i < hex.length(); i++ ) {
,
,        if ( i + 1 < hex.length() ) {
,          retval[( i + 1 ) / 2] = (byte)Integer.parseInt( hex.substring( i, i + 2 ), 16 );
,
,          i++;
,        } else {
,          retval[( i + 1 ) / 2] = (byte)Integer.parseInt( hex.substring( i ), 16 );
,        }
,      }
,    }
,
,    return retval;
,  }
"
875ed1bc-1c92-4cd5-aec8-a5e68ef60cdc,1f03e44f-a09e-4da7-b5f5-4fcff0209556,STAR,"MONKEYS_AT,Override,PUBLIC,int,hashCode,LPAREN,RPAREN,LBRACE,int,hash,EQ,5,SEMI,hash,EQ,83,<MASK>,hash,PLUS,LPAREN,this,DOT,value,QUES,1,COLON,0,RPAREN,SEMI,RETURN,hash,SEMI,RBRACE","    @Override
,    public int hashCode() {
,        int hash = 5;
,        hash = 83 <MASK> hash + (this.value ? 1 : 0);
,        return hash;
,    }
"
9b07119d-5d87-44cb-94ac-77a9d4fc6019,92a4369d-36c1-450a-92a8-9d988a965b36,GT,"PUBLIC,String,getWhereClause,LPAREN,RPAREN,LBRACE,StringBuilder,sbuilder,EQ,NEW,StringBuilder,LPAREN,RPAREN,SEMI,IF,LPAREN,BANG,ensenyament,DOT,contains,LPAREN,""*"",RPAREN,AMPAMP,BANG,ensenyament,DOT,isEmpty,LPAREN,RPAREN,RPAREN,LBRACE,String,str,EQ,getEnsenyament,LPAREN,RPAREN,DOT,replaceAll,LPAREN,"","",COMMA,""','"",RPAREN,SEMI,sbuilder,DOT,append,LPAREN,"" ensenyament IN ('"",RPAREN,DOT,append,LPAREN,str,RPAREN,DOT,append,LPAREN,""') "",RPAREN,SEMI,RBRACE,IF,LPAREN,BANG,estudis,DOT,contains,LPAREN,""*"",RPAREN,AMPAMP,BANG,estudis,DOT,isEmpty,LPAREN,RPAREN,RPAREN,LBRACE,IF,LPAREN,sbuilder,DOT,length,LPAREN,RPAREN,<MASK>,0,RPAREN,LBRACE,sbuilder,DOT,append,LPAREN,"" AND "",RPAREN,SEMI,RBRACE,String,str,EQ,getEstudis,LPAREN,RPAREN,DOT,replaceAll,LPAREN,"","",COMMA,""','"",RPAREN,SEMI,sbuilder,DOT,append,LPAREN,"" estudis IN ('"",RPAREN,DOT,append,LPAREN,str,RPAREN,DOT,append,LPAREN,""') "",RPAREN,SEMI,RBRACE,RETURN,sbuilder,DOT,toString,LPAREN,RPAREN,SEMI,RBRACE","    public String getWhereClause()
,    {
,        StringBuilder sbuilder = new StringBuilder();
,        if(!ensenyament.contains(""*"") && !ensenyament.isEmpty())
,        {
,            String str = getEnsenyament().replaceAll("","",""','"");
,            sbuilder.append("" ensenyament IN ('"").append(str).append(""') "");
,        }
,        if(!estudis.contains(""*"") && !estudis.isEmpty())
,        {
,            if(sbuilder.length()<MASK>0)
,            {
,                sbuilder.append("" AND "");
,            }
,            String str = getEstudis().replaceAll("","",""','"");
,            sbuilder.append("" estudis IN ('"").append(str).append(""') "");
,        }
,        return sbuilder.toString();
,    }
"
1b82c97a-fe19-4584-bdbc-4f13bb123c10,48a55808-5dc7-4b98-8268-63c4dd63c1fd,STAR,"PUBLIC,STATIC,double,ldexp,LPAREN,double,x,COMMA,int,exp,RPAREN,LBRACE,RETURN,x,<MASK>,pow,LPAREN,2.0,COMMA,exp,RPAREN,SEMI,RBRACE","    public static double ldexp(double x, int exp) {
,        return x <MASK> pow(2.0, exp);
,    }
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,fb6e8588-effd-4334-9125-13a9f9c92921,LT,"PUBLIC,int,LBRACKET,RBRACKET,checkScore,LPAREN,RPAREN,LBRACE,byte,LBRACKET,RBRACKET,scores,EQ,super,DOT,getBestScores,LPAREN,RPAREN,SEMI,int,LBRACKET,RBRACKET,_scores,EQ,NEW,int,LBRACKET,scores,DOT,length,SLASH,4,RBRACKET,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,_scores,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,_scores,LBRACKET,i,RBRACKET,EQ,super,DOT,bytesToInt,LPAREN,scores,LBRACKET,i,STAR,4,RBRACKET,COMMA,scores,LBRACKET,i,STAR,4,PLUS,1,RBRACKET,COMMA,scores,LBRACKET,i,STAR,4,PLUS,2,RBRACKET,COMMA,scores,LBRACKET,i,STAR,4,PLUS,3,RBRACKET,RPAREN,SEMI,RBRACE,RETURN,_scores,SEMI,RBRACE","	public int[] checkScore()
,	{
,		byte[] scores = super.getBestScores();
,		int[] _scores = new int[scores.length/4];
,		for (int i = 0 ; i <MASK> _scores.length ; i++){
,			_scores[i] = super.bytesToInt(scores[i * 4], scores[i*4 + 1], scores[i*4 + 2], scores[i*4 + 3]);
,		}
,		return _scores;
,	}
"
b792a0be-4219-4d3e-95ef-36bcf8d3d523,11a3a9d8-6bd0-4c16-9b1b-ae434bfe0592,GTEQ,"MONKEYS_AT,Override,PUBLIC,void,sell,LPAREN,Command,cmd,RPAREN,LBRACE,cmd,DOT,execute,LPAREN,RPAREN,SEMI,IF,LPAREN,Storage,DOT,getInstance,LPAREN,RPAREN,DOT,getRevenue,LPAREN,RPAREN,LT,10000.0,RPAREN,LBRACE,restaurant,DOT,setState,LPAREN,restaurant,DOT,getBadstate,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,Storage,DOT,getInstance,LPAREN,RPAREN,DOT,getRevenue,LPAREN,RPAREN,<MASK>,10000.0,AMPAMP,Storage,DOT,getInstance,LPAREN,RPAREN,DOT,getRevenue,LPAREN,RPAREN,LT,20000.0,RPAREN,LBRACE,restaurant,DOT,setState,LPAREN,restaurant,DOT,getNormalstate,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,ELSE,LBRACE,restaurant,DOT,setState,LPAREN,restaurant,DOT,getGoodstate,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,RBRACE","	@Override
,	public void sell(Command cmd) 
,	{
,		cmd.execute();
,		if(Storage.getInstance().getRevenue() < 10000.0)
,		{
,			restaurant.setState(restaurant.getBadstate());
,		}else if(Storage.getInstance().getRevenue() <MASK> 10000.0 && Storage.getInstance().getRevenue() < 20000.0)
,		{
,			restaurant.setState(restaurant.getNormalstate());
,		}
,		else
,		{
,			restaurant.setState(restaurant.getGoodstate());
,		}
,	}
"
6de67f18-4fd9-4000-8d6e-c3576cb5962a,d1ff10d8-f794-41c8-8d72-729f563a6799,PERCENT,"STATIC,int,LBRACKET,RBRACKET,core_md5,LPAREN,int,LBRACKET,RBRACKET,x,COMMA,int,len,RPAREN,LBRACE,x,LBRACKET,len,GTGT,5,RBRACKET,BAREQ,128,LTLT,LPAREN,LPAREN,len,RPAREN,<MASK>,32,RPAREN,SEMI,x,EQ,fit_with_zero,LPAREN,x,RPAREN,SEMI,x,LBRACKET,LPAREN,LPAREN,LPAREN,len,PLUS,64,RPAREN,GTGTGT,9,RPAREN,LTLT,4,RPAREN,PLUS,14,RBRACKET,EQ,len,SEMI,int,a,EQ,1732584193,SEMI,int,b,EQ,SUB,271733879,SEMI,int,c,EQ,SUB,1732584194,SEMI,int,d,EQ,271733878,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,x,DOT,length,SEMI,i,PLUSEQ,16,RPAREN,LBRACE,int,olda,EQ,a,SEMI,int,oldb,EQ,b,SEMI,int,oldc,EQ,c,SEMI,int,oldd,EQ,d,SEMI,a,EQ,md5_ff,LPAREN,a,COMMA,b,COMMA,c,COMMA,d,COMMA,x,LBRACKET,i,PLUS,0,RBRACKET,COMMA,7,COMMA,SUB,680876936,RPAREN,SEMI,d,EQ,md5_ff,LPAREN,d,COMMA,a,COMMA,b,COMMA,c,COMMA,x,LBRACKET,i,PLUS,1,RBRACKET,COMMA,12,COMMA,SUB,389564586,RPAREN,SEMI,c,EQ,md5_ff,LPAREN,c,COMMA,d,COMMA,a,COMMA,b,COMMA,x,LBRACKET,i,PLUS,2,RBRACKET,COMMA,17,COMMA,606105819,RPAREN,SEMI,b,EQ,md5_ff,LPAREN,b,COMMA,c,COMMA,d,COMMA,a,COMMA,x,LBRACKET,i,PLUS,3,RBRACKET,COMMA,22,COMMA,SUB,1044525330,RPAREN,SEMI,a,EQ,md5_ff,LPAREN,a,COMMA,b,COMMA,c,COMMA,d,COMMA,x,LBRACKET,i,PLUS,4,RBRACKET,COMMA,7,COMMA,SUB,176418897,RPAREN,SEMI,d,EQ,md5_ff,LPAREN,d,COMMA,a,COMMA,b,COMMA,c,COMMA,x,LBRACKET,i,PLUS,5,RBRACKET,COMMA,12,COMMA,1200080426,RPAREN,SEMI,c,EQ,md5_ff,LPAREN,c,COMMA,d,COMMA,a,COMMA,b,COMMA,x,LBRACKET,i,PLUS,6,RBRACKET,COMMA,17,COMMA,SUB,1473231341,RPAREN,SEMI,b,EQ,md5_ff,LPAREN,b,COMMA,c,COMMA,d,COMMA,a,COMMA,x,LBRACKET,i,PLUS,7,RBRACKET,COMMA,22,COMMA,SUB,45705983,RPAREN,SEMI,a,EQ,md5_ff,LPAREN,a,COMMA,b,COMMA,c,COMMA,d,COMMA,x,LBRACKET,i,PLUS,8,RBRACKET,COMMA,7,COMMA,1770035416,RPAREN,SEMI,d,EQ,md5_ff,LPAREN,d,COMMA,a,COMMA,b,COMMA,c,COMMA,x,LBRACKET,i,PLUS,9,RBRACKET,COMMA,12,COMMA,SUB,1958414417,RPAREN,SEMI,c,EQ,md5_ff,LPAREN,c,COMMA,d,COMMA,a,COMMA,b,COMMA,x,LBRACKET,i,PLUS,10,RBRACKET,COMMA,17,COMMA,SUB,42063,RPAREN,SEMI,b,EQ,md5_ff,LPAREN,b,COMMA,c,COMMA,d,COMMA,a,COMMA,x,LBRACKET,i,PLUS,11,RBRACKET,COMMA,22,COMMA,SUB,1990404162,RPAREN,SEMI,a,EQ,md5_ff,LPAREN,a,COMMA,b,COMMA,c,COMMA,d,COMMA,x,LBRACKET,i,PLUS,12,RBRACKET,COMMA,7,COMMA,1804603682,RPAREN,SEMI,d,EQ,md5_ff,LPAREN,d,COMMA,a,COMMA,b,COMMA,c,COMMA,x,LBRACKET,i,PLUS,13,RBRACKET,COMMA,12,COMMA,SUB,40341101,RPAREN,SEMI,c,EQ,md5_ff,LPAREN,c,COMMA,d,COMMA,a,COMMA,b,COMMA,x,LBRACKET,i,PLUS,14,RBRACKET,COMMA,17,COMMA,SUB,1502002290,RPAREN,SEMI,b,EQ,md5_ff,LPAREN,b,COMMA,c,COMMA,d,COMMA,a,COMMA,x,LBRACKET,i,PLUS,15,RBRACKET,COMMA,22,COMMA,1236535329,RPAREN,SEMI,a,EQ,md5_gg,LPAREN,a,COMMA,b,COMMA,c,COMMA,d,COMMA,x,LBRACKET,i,PLUS,1,RBRACKET,COMMA,5,COMMA,SUB,165796510,RPAREN,SEMI,d,EQ,md5_gg,LPAREN,d,COMMA,a,COMMA,b,COMMA,c,COMMA,x,LBRACKET,i,PLUS,6,RBRACKET,COMMA,9,COMMA,SUB,1069501632,RPAREN,SEMI,c,EQ,md5_gg,LPAREN,c,COMMA,d,COMMA,a,COMMA,b,COMMA,x,LBRACKET,i,PLUS,11,RBRACKET,COMMA,14,COMMA,643717713,RPAREN,SEMI,b,EQ,md5_gg,LPAREN,b,COMMA,c,COMMA,d,COMMA,a,COMMA,x,LBRACKET,i,PLUS,0,RBRACKET,COMMA,20,COMMA,SUB,373897302,RPAREN,SEMI,a,EQ,md5_gg,LPAREN,a,COMMA,b,COMMA,c,COMMA,d,COMMA,x,LBRACKET,i,PLUS,5,RBRACKET,COMMA,5,COMMA,SUB,701558691,RPAREN,SEMI,d,EQ,md5_gg,LPAREN,d,COMMA,a,COMMA,b,COMMA,c,COMMA,x,LBRACKET,i,PLUS,10,RBRACKET,COMMA,9,COMMA,38016083,RPAREN,SEMI,c,EQ,md5_gg,LPAREN,c,COMMA,d,COMMA,a,COMMA,b,COMMA,x,LBRACKET,i,PLUS,15,RBRACKET,COMMA,14,COMMA,SUB,660478335,RPAREN,SEMI,b,EQ,md5_gg,LPAREN,b,COMMA,c,COMMA,d,COMMA,a,COMMA,x,LBRACKET,i,PLUS,4,RBRACKET,COMMA,20,COMMA,SUB,405537848,RPAREN,SEMI,a,EQ,md5_gg,LPAREN,a,COMMA,b,COMMA,c,COMMA,d,COMMA,x,LBRACKET,i,PLUS,9,RBRACKET,COMMA,5,COMMA,568446438,RPAREN,SEMI,d,EQ,md5_gg,LPAREN,d,COMMA,a,COMMA,b,COMMA,c,COMMA,x,LBRACKET,i,PLUS,14,RBRACKET,COMMA,9,COMMA,SUB,1019803690,RPAREN,SEMI,c,EQ,md5_gg,LPAREN,c,COMMA,d,COMMA,a,COMMA,b,COMMA,x,LBRACKET,i,PLUS,3,RBRACKET,COMMA,14,COMMA,SUB,187363961,RPAREN,SEMI,b,EQ,md5_gg,LPAREN,b,COMMA,c,COMMA,d,COMMA,a,COMMA,x,LBRACKET,i,PLUS,8,RBRACKET,COMMA,20,COMMA,1163531501,RPAREN,SEMI,a,EQ,md5_gg,LPAREN,a,COMMA,b,COMMA,c,COMMA,d,COMMA,x,LBRACKET,i,PLUS,13,RBRACKET,COMMA,5,COMMA,SUB,1444681467,RPAREN,SEMI,d,EQ,md5_gg,LPAREN,d,COMMA,a,COMMA,b,COMMA,c,COMMA,x,LBRACKET,i,PLUS,2,RBRACKET,COMMA,9,COMMA,SUB,51403784,RPAREN,SEMI,c,EQ,md5_gg,LPAREN,c,COMMA,d,COMMA,a,COMMA,b,COMMA,x,LBRACKET,i,PLUS,7,RBRACKET,COMMA,14,COMMA,1735328473,RPAREN,SEMI,b,EQ,md5_gg,LPAREN,b,COMMA,c,COMMA,d,COMMA,a,COMMA,x,LBRACKET,i,PLUS,12,RBRACKET,COMMA,20,COMMA,SUB,1926607734,RPAREN,SEMI,a,EQ,md5_hh,LPAREN,a,COMMA,b,COMMA,c,COMMA,d,COMMA,x,LBRACKET,i,PLUS,5,RBRACKET,COMMA,4,COMMA,SUB,378558,RPAREN,SEMI,d,EQ,md5_hh,LPAREN,d,COMMA,a,COMMA,b,COMMA,c,COMMA,x,LBRACKET,i,PLUS,8,RBRACKET,COMMA,11,COMMA,SUB,2022574463,RPAREN,SEMI,c,EQ,md5_hh,LPAREN,c,COMMA,d,COMMA,a,COMMA,b,COMMA,x,LBRACKET,i,PLUS,11,RBRACKET,COMMA,16,COMMA,1839030562,RPAREN,SEMI,b,EQ,md5_hh,LPAREN,b,COMMA,c,COMMA,d,COMMA,a,COMMA,x,LBRACKET,i,PLUS,14,RBRACKET,COMMA,23,COMMA,SUB,35309556,RPAREN,SEMI,a,EQ,md5_hh,LPAREN,a,COMMA,b,COMMA,c,COMMA,d,COMMA,x,LBRACKET,i,PLUS,1,RBRACKET,COMMA,4,COMMA,SUB,1530992060,RPAREN,SEMI,d,EQ,md5_hh,LPAREN,d,COMMA,a,COMMA,b,COMMA,c,COMMA,x,LBRACKET,i,PLUS,4,RBRACKET,COMMA,11,COMMA,1272893353,RPAREN,SEMI,c,EQ,md5_hh,LPAREN,c,COMMA,d,COMMA,a,COMMA,b,COMMA,x,LBRACKET,i,PLUS,7,RBRACKET,COMMA,16,COMMA,SUB,155497632,RPAREN,SEMI,b,EQ,md5_hh,LPAREN,b,COMMA,c,COMMA,d,COMMA,a,COMMA,x,LBRACKET,i,PLUS,10,RBRACKET,COMMA,23,COMMA,SUB,1094730640,RPAREN,SEMI,a,EQ,md5_hh,LPAREN,a,COMMA,b,COMMA,c,COMMA,d,COMMA,x,LBRACKET,i,PLUS,13,RBRACKET,COMMA,4,COMMA,681279174,RPAREN,SEMI,d,EQ,md5_hh,LPAREN,d,COMMA,a,COMMA,b,COMMA,c,COMMA,x,LBRACKET,i,PLUS,0,RBRACKET,COMMA,11,COMMA,SUB,358537222,RPAREN,SEMI,c,EQ,md5_hh,LPAREN,c,COMMA,d,COMMA,a,COMMA,b,COMMA,x,LBRACKET,i,PLUS,3,RBRACKET,COMMA,16,COMMA,SUB,722521979,RPAREN,SEMI,b,EQ,md5_hh,LPAREN,b,COMMA,c,COMMA,d,COMMA,a,COMMA,x,LBRACKET,i,PLUS,6,RBRACKET,COMMA,23,COMMA,76029189,RPAREN,SEMI,a,EQ,md5_hh,LPAREN,a,COMMA,b,COMMA,c,COMMA,d,COMMA,x,LBRACKET,i,PLUS,9,RBRACKET,COMMA,4,COMMA,SUB,640364487,RPAREN,SEMI,d,EQ,md5_hh,LPAREN,d,COMMA,a,COMMA,b,COMMA,c,COMMA,x,LBRACKET,i,PLUS,12,RBRACKET,COMMA,11,COMMA,SUB,421815835,RPAREN,SEMI,c,EQ,md5_hh,LPAREN,c,COMMA,d,COMMA,a,COMMA,b,COMMA,x,LBRACKET,i,PLUS,15,RBRACKET,COMMA,16,COMMA,530742520,RPAREN,SEMI,b,EQ,md5_hh,LPAREN,b,COMMA,c,COMMA,d,COMMA,a,COMMA,x,LBRACKET,i,PLUS,2,RBRACKET,COMMA,23,COMMA,SUB,995338651,RPAREN,SEMI,a,EQ,md5_ii,LPAREN,a,COMMA,b,COMMA,c,COMMA,d,COMMA,x,LBRACKET,i,PLUS,0,RBRACKET,COMMA,6,COMMA,SUB,198630844,RPAREN,SEMI,d,EQ,md5_ii,LPAREN,d,COMMA,a,COMMA,b,COMMA,c,COMMA,x,LBRACKET,i,PLUS,7,RBRACKET,COMMA,10,COMMA,1126891415,RPAREN,SEMI,c,EQ,md5_ii,LPAREN,c,COMMA,d,COMMA,a,COMMA,b,COMMA,x,LBRACKET,i,PLUS,14,RBRACKET,COMMA,15,COMMA,SUB,1416354905,RPAREN,SEMI,b,EQ,md5_ii,LPAREN,b,COMMA,c,COMMA,d,COMMA,a,COMMA,x,LBRACKET,i,PLUS,5,RBRACKET,COMMA,21,COMMA,SUB,57434055,RPAREN,SEMI,a,EQ,md5_ii,LPAREN,a,COMMA,b,COMMA,c,COMMA,d,COMMA,x,LBRACKET,i,PLUS,12,RBRACKET,COMMA,6,COMMA,1700485571,RPAREN,SEMI,d,EQ,md5_ii,LPAREN,d,COMMA,a,COMMA,b,COMMA,c,COMMA,x,LBRACKET,i,PLUS,3,RBRACKET,COMMA,10,COMMA,SUB,1894986606,RPAREN,SEMI,c,EQ,md5_ii,LPAREN,c,COMMA,d,COMMA,a,COMMA,b,COMMA,x,LBRACKET,i,PLUS,10,RBRACKET,COMMA,15,COMMA,SUB,1051523,RPAREN,SEMI,b,EQ,md5_ii,LPAREN,b,COMMA,c,COMMA,d,COMMA,a,COMMA,x,LBRACKET,i,PLUS,1,RBRACKET,COMMA,21,COMMA,SUB,2054922799,RPAREN,SEMI,a,EQ,md5_ii,LPAREN,a,COMMA,b,COMMA,c,COMMA,d,COMMA,x,LBRACKET,i,PLUS,8,RBRACKET,COMMA,6,COMMA,1873313359,RPAREN,SEMI,d,EQ,md5_ii,LPAREN,d,COMMA,a,COMMA,b,COMMA,c,COMMA,x,LBRACKET,i,PLUS,15,RBRACKET,COMMA,10,COMMA,SUB,30611744,RPAREN,SEMI,c,EQ,md5_ii,LPAREN,c,COMMA,d,COMMA,a,COMMA,b,COMMA,x,LBRACKET,i,PLUS,6,RBRACKET,COMMA,15,COMMA,SUB,1560198380,RPAREN,SEMI,b,EQ,md5_ii,LPAREN,b,COMMA,c,COMMA,d,COMMA,a,COMMA,x,LBRACKET,i,PLUS,13,RBRACKET,COMMA,21,COMMA,1309151649,RPAREN,SEMI,a,EQ,md5_ii,LPAREN,a,COMMA,b,COMMA,c,COMMA,d,COMMA,x,LBRACKET,i,PLUS,4,RBRACKET,COMMA,6,COMMA,SUB,145523070,RPAREN,SEMI,d,EQ,md5_ii,LPAREN,d,COMMA,a,COMMA,b,COMMA,c,COMMA,x,LBRACKET,i,PLUS,11,RBRACKET,COMMA,10,COMMA,SUB,1120210379,RPAREN,SEMI,c,EQ,md5_ii,LPAREN,c,COMMA,d,COMMA,a,COMMA,b,COMMA,x,LBRACKET,i,PLUS,2,RBRACKET,COMMA,15,COMMA,718787259,RPAREN,SEMI,b,EQ,md5_ii,LPAREN,b,COMMA,c,COMMA,d,COMMA,a,COMMA,x,LBRACKET,i,PLUS,9,RBRACKET,COMMA,21,COMMA,SUB,343485551,RPAREN,SEMI,a,EQ,safe_add,LPAREN,a,COMMA,olda,RPAREN,SEMI,b,EQ,safe_add,LPAREN,b,COMMA,oldb,RPAREN,SEMI,c,EQ,safe_add,LPAREN,c,COMMA,oldc,RPAREN,SEMI,d,EQ,safe_add,LPAREN,d,COMMA,oldd,RPAREN,SEMI,RBRACE,IF,LPAREN,HASHMOD,EQEQ,16,RPAREN,LBRACE,RETURN,NEW,int,LBRACKET,RBRACKET,LBRACE,b,COMMA,c,RBRACE,SEMI,RBRACE,ELSE,LBRACE,RETURN,NEW,int,LBRACKET,RBRACKET,LBRACE,a,COMMA,b,COMMA,c,COMMA,d,RBRACE,SEMI,RBRACE,RBRACE","    static int[] core_md5(int[] x, int len) {
,//      append a '1' to x
,        x[len >> 5] |= 128 << ((len) <MASK> 32);
,//      pad with '0' bits
,//      as MD5 will make bit-length ≡ 448 (mod 512)
,//      it should be x.length ≡ 14 (mod 16)
,//      but here needs x.length >= len and x.length ≡ 0 (mod 16)
,        x = fit_with_zero(x);
,//      append the len to x
,        x[(((len + 64) >>> 9) << 4) + 14] = len;
,//      and...yes, this is NOT a standard initialization
,        int a = 1732584193;    // 0x67452301, same as standard
,        int b = -271733879;    // 0x89ABCDEF
,        int c = -1732584194;   // 0xFEDCBA98
,        int d = 271733878;     // 0x8AABCDEF
,        for (int i = 0; i < x.length; i += 16) {
,            int olda = a;
,            int oldb = b;
,            int oldc = c;
,            int oldd = d;
,            a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);
,            d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);
,            c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);
,            b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);
,            a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);
,            d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);
,            c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);
,            b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);
,            a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);
,            d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);
,            c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);
,            b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);
,            a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);
,            d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);
,            c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);
,            b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);
,            a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);
,            d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);
,            c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);
,            b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);
,            a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);
,            d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);
,            c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);
,            b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);
,            a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);
,            d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);
,            c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);
,            b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);
,            a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);
,            d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);
,            c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);
,            b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);
,            a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);
,            d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);
,            c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);
,            b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);
,            a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);
,            d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);
,            c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);
,            b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);
,            a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);
,            d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);
,            c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);
,            b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);
,            a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);
,            d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);
,            c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);
,            b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);
,            a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);
,            d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);
,            c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);
,            b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);
,            a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);
,            d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);
,            c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);
,            b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);
,            a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);
,            d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);
,            c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);
,            b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);
,            a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);
,            d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);
,            c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);
,            b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);
,            a = safe_add(a, olda);
,            b = safe_add(b, oldb);
,            c = safe_add(c, oldc);
,            d = safe_add(d, oldd);
,        }
,        if (HASHMOD == 16) {
,            return new int[]{b, c};
,        } else {
,            return new int[]{a, b, c, d};
,        }
,    }
"
3913c395-db09-4ac4-8282-49a81b6a21f4,30a8f9dd-a43a-4653-8db5-3878157c381d,LT,"MONKEYS_AT,Subscribe,PUBLIC,void,unitCommand,LPAREN,UnitCommandEvent,e,RPAREN,LBRACE,IF,LPAREN,System,DOT,currentTimeMillis,LPAREN,RPAREN,SUB,lastCmdSnd,<MASK>,CMD_SND_DELAY,RPAREN,LBRACE,RETURN,SEMI,RBRACE,UnitCommand,cmd,EQ,e,DOT,getCommand,LPAREN,RPAREN,SEMI,int,snd,SEMI,IF,LPAREN,cmd,DOT,getType,LPAREN,RPAREN,EQEQ,UnitCommandType,DOT,MOVE,RPAREN,LBRACE,snd,EQ,LPAREN,int,RPAREN,LPAREN,Math,DOT,random,LPAREN,RPAREN,STAR,4,RPAREN,SEMI,playSound,LPAREN,""go"",PLUS,snd,PLUS,"".wav"",COMMA,0.8f,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,cmd,DOT,getType,LPAREN,RPAREN,DOT,isAttack,LPAREN,RPAREN,RPAREN,LBRACE,snd,EQ,LPAREN,int,RPAREN,LPAREN,Math,DOT,random,LPAREN,RPAREN,STAR,2,RPAREN,SEMI,playSound,LPAREN,""attack"",PLUS,snd,PLUS,"".wav"",COMMA,0.8f,RPAREN,SEMI,RBRACE,lastCmdSnd,EQ,System,DOT,currentTimeMillis,LPAREN,RPAREN,SEMI,RBRACE","	@Subscribe
,	public void unitCommand(UnitCommandEvent e) {
,		if (System.currentTimeMillis() - lastCmdSnd <MASK> CMD_SND_DELAY) {
,			return;
,		}
,		UnitCommand cmd = e.getCommand();
,		int snd;
,		if (cmd.getType() == UnitCommandType.MOVE) {
,			snd = (int)(Math.random()*4);
,			playSound(""go"" + snd + "".wav"", 0.8f);
,		} else if (cmd.getType().isAttack()) {
,			snd = (int)(Math.random()*2);
,			playSound(""attack"" + snd + "".wav"", 0.8f);
,		}
,		lastCmdSnd = System.currentTimeMillis(); 
,	}
"
09478113-8f39-4146-870b-8037a6932443,22a57671-02fe-43d1-863f-59922f3642b0,EQEQ,"PRIVATE,void,OP_CPY,LPAREN,RPAREN,LBRACE,int,iMem,EQ,readOperand,LPAREN,RPAREN,SEMI,int,iVal,EQ,int8,LPAREN,getY,LPAREN,RPAREN,SUB,iMem,RPAREN,SEMI,setNFlag,LPAREN,getBit,LPAREN,iVal,COMMA,7,RPAREN,RPAREN,SEMI,setCFlag,LPAREN,BANG,getBit,LPAREN,getY,LPAREN,RPAREN,SUB,iMem,COMMA,8,RPAREN,RPAREN,SEMI,setZFlag,LPAREN,iVal,<MASK>,0,RPAREN,SEMI,RBRACE","    private void OP_CPY()
,    {
,        int iMem = readOperand();
,        int iVal = int8(getY() - iMem);
,
,        setNFlag(getBit(iVal, 7));
,        setCFlag(!getBit(getY() - iMem, 8));
,        setZFlag(iVal <MASK> 0);
,    }
"
13ade84f-7d2c-4f3f-a13f-aa7abf8a58a5,e7d8def5-fc1d-4438-8473-1e7989f19928,SUB,"MONKEYS_AT,Test,PUBLIC,void,test1,LPAREN,RPAREN,LBRACE,LRUCache,test,EQ,NEW,LRUCache,LPAREN,1,RPAREN,SEMI,test,DOT,set,LPAREN,1,COMMA,1,RPAREN,SEMI,Assert,DOT,assertEquals,LPAREN,test,DOT,get,LPAREN,1,RPAREN,COMMA,1,RPAREN,SEMI,test,DOT,set,LPAREN,2,COMMA,2,RPAREN,SEMI,Assert,DOT,assertEquals,LPAREN,test,DOT,get,LPAREN,1,RPAREN,COMMA,<MASK>,1,RPAREN,SEMI,Assert,DOT,assertEquals,LPAREN,test,DOT,get,LPAREN,2,RPAREN,COMMA,2,RPAREN,SEMI,RBRACE","	@Test
,	public void test1() {
,		LRUCache test = new LRUCache(1);
,		test.set(1, 1);
,		Assert.assertEquals(test.get(1), 1);
,		test.set(2, 2);
,		Assert.assertEquals(test.get(1), <MASK>1);
,		Assert.assertEquals(test.get(2), 2);
,	}
"
1f47bbd6-87b5-4b44-b120-6b0f23f01251,ddf6c818-153d-4d7b-b759-adaddade30d4,PERCENT,"PUBLIC,void,update,LPAREN,RPAREN,LBRACE,super,DOT,update,LPAREN,RPAREN,SEMI,IF,LPAREN,Game,DOT,game,DOT,server,BANGEQ,null,RPAREN,LBRACE,time,EQ,LPAREN,time,GT,1000000000,RPAREN,QUES,0,COLON,time,PLUS,1,SEMI,IF,LPAREN,time,<MASK>,60,EQEQ,0,RPAREN,LBRACE,nx,EQ,LPAREN,rand,DOT,nextInt,LPAREN,3,RPAREN,SUB,1,RPAREN,STAR,speed,SEMI,ny,EQ,LPAREN,rand,DOT,nextInt,LPAREN,3,RPAREN,SUB,1,RPAREN,STAR,speed,SEMI,IF,LPAREN,isCollision,LPAREN,x,PLUS,nx,COMMA,y,RPAREN,RPAREN,LBRACE,nx,STAREQ,SUB,speed,SEMI,RBRACE,IF,LPAREN,isCollision,LPAREN,x,COMMA,ny,PLUS,y,RPAREN,RPAREN,LBRACE,ny,STAREQ,SUB,speed,SEMI,RBRACE,IF,LPAREN,rand,DOT,nextInt,LPAREN,4,RPAREN,EQEQ,0,RPAREN,LBRACE,nx,EQ,0,SEMI,ny,EQ,0,SEMI,RBRACE,RBRACE,RBRACE,IF,LPAREN,nx,EQEQ,0,AMPAMP,ny,EQEQ,0,RPAREN,LBRACE,moving,EQ,false,SEMI,RBRACE,ELSE,LBRACE,move,LPAREN,nx,COMMA,ny,RPAREN,SEMI,RBRACE,RBRACE","    public void update() {
,
,	super.update();
,
,	if (Game.game.server != null) {
,	    time = (time > 1000000000) ? 0 : time + 1;
,	    if (time <MASK> 60 == 0) {
,		nx = (rand.nextInt(3) - 1) * speed;
,		ny = (rand.nextInt(3) - 1) * speed;
,
,		if (isCollision(x + nx, y)) {
,		    nx *= -speed;
,		}
,		if (isCollision(x, ny + y)) {
,		    ny *= -speed;
,		}
,
,		if (rand.nextInt(4) == 0) {
,		    nx = 0;
,		    ny = 0;
,		}
,	    }
,	}
,
,	if (nx == 0 && ny == 0) {
,	    moving = false;
,	} else {
,	    move(nx, ny);
,	}
,
,    }
"
cc1c4187-1182-4cd3-a559-9895584ed311,6d601281-2ff4-4a2f-a149-260af22ae10b,GTEQ,"PUBLIC,STATIC,int,howMany,LPAREN,int,maxAdd,COMMA,int,goal,COMMA,int,next,RPAREN,LBRACE,int,count,EQ,0,SEMI,WHILE,LPAREN,goal,<MASK>,next,RPAREN,LBRACE,IF,LPAREN,goal,LT,LPAREN,next,PLUS,maxAdd,RPAREN,RPAREN,LBRACE,RETURN,1,PLUS,LPAREN,goal,SUB,next,RPAREN,SEMI,RBRACE,goal,SUBEQ,maxAdd,PLUS,1,SEMI,RBRACE,RETURN,SUB,1,SEMI,RBRACE","	public static int howMany(int maxAdd,int goal,int next){
,		int count=0;
,		while(goal<MASK>next){
,			if(goal<(next+maxAdd)){
,				return 1+(goal-next);
,			}
,			goal-=maxAdd+1;
,		}
,		return -1;
,	}
"
3bfa0e56-052d-4d0e-a991-ae5ff8933386,7eb54886-a79c-441e-b39a-645c32908c4e,LTEQ,"PUBLIC,boolean,exists,LPAREN,RPAREN,LBRACE,boolean,exists,EQ,false,SEMI,IF,LPAREN,this,DOT,id,<MASK>,0,RPAREN,LBRACE,RETURN,exists,SEMI,RBRACE,String,SQL1,EQ,""Select * from actividadesalumno where id="",PLUS,this,DOT,id,SEMI,TRY,LBRACE,Statement,st,EQ,getSgd,LPAREN,RPAREN,DOT,createStatement,LPAREN,RPAREN,SEMI,ResultSet,rs1,EQ,getSgd,LPAREN,RPAREN,DOT,getResultSet,LPAREN,SQL1,COMMA,st,RPAREN,SEMI,IF,LPAREN,rs1,BANGEQ,null,AMPAMP,rs1,DOT,next,LPAREN,RPAREN,RPAREN,LBRACE,exists,EQ,true,SEMI,RBRACE,IF,LPAREN,rs1,BANGEQ,null,RPAREN,LBRACE,rs1,DOT,close,LPAREN,RPAREN,SEMI,st,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,CATCH,LPAREN,SQLException,ex,RPAREN,LBRACE,Logger,DOT,getLogger,LPAREN,ActividadAlumno,DOT,CLASS,DOT,getName,LPAREN,RPAREN,RPAREN,DOT,log,LPAREN,Level,DOT,SEVERE,COMMA,null,COMMA,ex,RPAREN,SEMI,RBRACE,RETURN,exists,SEMI,RBRACE","     public boolean exists()
,    {
,        boolean exists = false;
,        if(this.id<MASK>0) {
,            return exists;
,        }
,        
,        String SQL1 = ""Select * from actividadesalumno where id=""+this.id;
,         try {
,            Statement st = getSgd().createStatement();
,            ResultSet rs1 = getSgd().getResultSet(SQL1,st);
,            if (rs1 != null && rs1.next()) {
,                exists = true;
,            }
,            if(rs1!=null){
,                rs1.close();
,                st.close();
,            }
,        } catch (SQLException ex) {
,            Logger.getLogger(ActividadAlumno.class.getName()).log(Level.SEVERE, null, ex);
,        }            
,       
,        return exists;
,    }
"
a98e10ef-3b3e-45e8-a98b-65ce2200211b,b4e08fea-6dc2-4d87-9a40-b9e80c4ce322,GTEQ,"boolean,signed,LPAREN,RPAREN,LBRACE,RETURN,numeral,LPAREN,RPAREN,BARBAR,LPAREN,text,DOT,length,LPAREN,RPAREN,GT,1,AMPAMP,text,DOT,startsWith,LPAREN,""-"",RPAREN,AMPAMP,Parser,DOT,digit,DOT,indexOf,LPAREN,text,DOT,charAt,LPAREN,1,RPAREN,RPAREN,<MASK>,0,RPAREN,SEMI,RBRACE","	boolean signed() {
,		return numeral() ||
,		(text.length() > 1 && text.startsWith(""-"") && Parser.digit.indexOf(text.charAt(1)) <MASK> 0);
,	}
"
08b41d00-9e8d-4e48-94b9-945bef00d612,7f0bcf33-a62d-4ef0-8af2-5faca787f078,LTEQ,"PUBLIC,STATIC,void,main,LPAREN,String,LBRACKET,RBRACKET,args,RPAREN,LBRACE,int,i,EQ,1,COMMA,score,SEMI,Scanner,scan,EQ,NEW,Scanner,LPAREN,System,DOT,in,RPAREN,SEMI,WHILE,LPAREN,i,<MASK>,5,RPAREN,LBRACE,System,DOT,out,DOT,print,LPAREN,""\u0E1B\u0E49\u0E2D\u0E19\u0E02\u0E49\u0E2D\u0E21\u0E39\u0E25\u0E04\u0E30\u0E41\u0E19\u0E19\u0E19\u0E34\u0E2A\u0E34\u0E15\u0E04\u0E19\u0E17\u0E35\u0E48 "",PLUS,i,PLUS,"" >>> "",RPAREN,SEMI,score,EQ,scan,DOT,nextInt,LPAREN,RPAREN,SEMI,IF,LPAREN,score,LT,0,BARBAR,score,GT,100,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,score,PLUS,"" \u0E40\u0E1B\u0E47\u0E19\u0E02\u0E49\u0E2D\u0E21\u0E39\u0E25\u0E04\u0E30\u0E41\u0E19\u0E19\u0E17\u0E35\u0E48\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07"",RPAREN,SEMI,BREAK,SEMI,RBRACE,System,DOT,out,DOT,println,LPAREN,score,PLUS,"" \u0E40\u0E1B\u0E47\u0E19\u0E02\u0E49\u0E2D\u0E21\u0E39\u0E25\u0E04\u0E30\u0E41\u0E19\u0E19\u0E17\u0E35\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07"",RPAREN,SEMI,i,EQ,i,PLUS,1,SEMI,RBRACE,RBRACE","    public static void main(String[] args) {
,        int i = 1, score;
,        Scanner scan = new Scanner(System.in);
,        while (i <MASK> 5) {
,            System.out.print(""ป้อนข้อมูลคะแนนนิสิตคนที่ "" + i + "" >>> "");
,            score = scan.nextInt();
,            if (score < 0 || score > 100) {
,                System.out.println(score + "" เป็นข้อมูลคะแนนที่ไม่ถูกต้อง"");
,                break;
,            }
,            System.out.println(score + "" เป็นข้อมูลคะแนนที่ถูกต้อง"");
,            i = i + 1;
,        }
,    }
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,2420b403-68b0-461d-8491-618dcc1e24d7,LT,"MONKEYS_AT,Override,PROTECTED,void,driverDisconnected,LPAREN,String,driverIdentifier,COMMA,String,LBRACKET,RBRACKET,deviceNames,RPAREN,LBRACE,String,names,EQ,""["",SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,deviceNames,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,i,BANGEQ,0,RPAREN,LBRACE,names,PLUSEQ,"", "",SEMI,RBRACE,names,PLUSEQ,deviceNames,LBRACKET,i,RBRACKET,SEMI,RBRACE,names,PLUSEQ,""]"",SEMI,System,DOT,err,DOT,println,LPAREN,""Driver "",PLUS,driverIdentifier,PLUS,"" has been disconnected. The following devices have dissapeared: "",PLUS,names,RPAREN,SEMI,RBRACE","  @Override
,  protected void driverDisconnected(String driverIdentifier, String[] deviceNames) {
,    String names = ""["";
,
,    for (int i = 0 ; i <MASK> deviceNames.length ; i++) {
,      if (i != 0) {
,        names += "", "";
,      }
,
,      names += deviceNames[i];
,    }
,
,    names += ""]"";
,
,    System.err.println(""Driver "" + driverIdentifier + "" has been disconnected. The following devices have dissapeared: "" + names);
,  }
"
d71e9d90-d7d7-40b1-b4fa-c5316adcd69a,ca8da53c-2cb2-4299-90df-2a2077982a23,LTEQ,"PROTECTED,void,computeLayerGradients,LPAREN,FINAL,int,idx,RPAREN,LBRACE,FINAL,Layer,layer,EQ,this,DOT,structure,DOT,layers,LBRACKET,idx,RBRACKET,SEMI,FOR,LPAREN,int,c,EQ,layer,DOT,compwidth,SUB,1,SEMI,c,GTEQ,0,SEMI,c,SUBSUB,RPAREN,LBRACE,FINAL,int,lbd,EQ,layer,DOT,complbds,LBRACKET,c,RBRACKET,SEMI,FINAL,int,ubd,EQ,layer,DOT,compubds,LBRACKET,c,RBRACKET,SEMI,FOR,LPAREN,int,a,EQ,ubd,SEMI,a,GTEQ,lbd,SEMI,a,SUBSUB,RPAREN,LBRACE,FINAL,CellArray,array,EQ,this,DOT,structure,DOT,arrays,LBRACKET,a,RBRACKET,SEMI,CellIntegration,DOT,perform,LPAREN,this,DOT,data,DOT,gradoutput,LBRACKET,this,DOT,frameidx,RBRACKET,COMMA,this,DOT,data,DOT,gradinput,LBRACKET,this,DOT,frameidx,RBRACKET,COMMA,array,DOT,cellslbd,COMMA,array,DOT,cellsnum,COMMA,this,DOT,data,DOT,weights,COMMA,this,DOT,structure,DOT,linksrev,COMMA,array,DOT,succslbd,COMMA,array,DOT,succsnum,COMMA,array,DOT,celltype,DOT,revintegration,RPAREN,SEMI,RBRACE,FOR,LPAREN,int,a,EQ,lbd,SEMI,a,<MASK>,ubd,SEMI,a,PLUSPLUS,RPAREN,LBRACE,FINAL,CellArray,array,EQ,this,DOT,structure,DOT,arrays,LBRACKET,a,RBRACKET,SEMI,CellFunction,DOT,perform,LPAREN,this,DOT,data,DOT,input,LBRACKET,this,DOT,frameidx,RBRACKET,COMMA,array,DOT,cellslbd,COMMA,this,DOT,data,DOT,gradoutput,LBRACKET,this,DOT,frameidx,RBRACKET,COMMA,array,DOT,cellslbd,COMMA,array,DOT,cellsnum,COMMA,array,DOT,celltype,DOT,revactivation,RPAREN,SEMI,DoubleTools,DOT,mul,LPAREN,this,DOT,data,DOT,gradinput,LBRACKET,this,DOT,frameidx,RBRACKET,COMMA,array,DOT,cellslbd,COMMA,this,DOT,data,DOT,gradoutput,LBRACKET,this,DOT,frameidx,RBRACKET,COMMA,array,DOT,cellslbd,COMMA,this,DOT,data,DOT,gradoutput,LBRACKET,this,DOT,frameidx,RBRACKET,COMMA,array,DOT,cellslbd,COMMA,array,DOT,cellsnum,RPAREN,SEMI,RBRACE,RBRACE,RBRACE","    protected void computeLayerGradients(final int idx) {
,        final Layer layer = this.structure.layers[idx];
,        //
,        // respect shifted computation indices.
,        //
,        for (int c = layer.compwidth - 1; c >= 0; c--) {
,            //
,            final int lbd = layer.complbds[c];
,            final int ubd = layer.compubds[c];
,            //
,            // reverse integration, which is always SUM.
,            //
,            for (int a = ubd; a >= lbd; a--) {
,                /*
,                // # DEBUG #
,                if (a == 6) {
,                    System.out.println(""STOP"");
,                }
,                // #
,                */
,                final CellArray array = this.structure.arrays[a];
,                //
,                CellIntegration.perform(
,                    this.data.gradoutput[this.frameidx], 
,                    this.data.gradinput[this.frameidx], 
,                    array.cellslbd, array.cellsnum,
,                    this.data.weights, this.structure.linksrev,
,                    array.succslbd, array.succsnum,
,                    array.celltype.revintegration
,                );
,            }
,            //
,            // activation derivation.
,            //
,            for (int a = lbd; a <MASK> ubd; a++) {
,                /*
,                // # DEBUG #
,                if (a == 6) {
,                    System.out.println(""STOP"");
,                }
,                // #
,                */
,                final CellArray array = this.structure.arrays[a];
,                //
,                // compute f'(input) first and then store
,                // multiplication with reverse integration.
,                //
,                CellFunction.perform(
,                    this.data.input[this.frameidx], array.cellslbd, 
,                    this.data.gradoutput[this.frameidx], array.cellslbd,
,                    array.cellsnum, array.celltype.revactivation
,                );
,                //
,                DoubleTools.mul(
,                    this.data.gradinput[this.frameidx], array.cellslbd, 
,                    this.data.gradoutput[this.frameidx], array.cellslbd,
,                    this.data.gradoutput[this.frameidx], array.cellslbd, 
,                    array.cellsnum
,                );
,            }
,        }
,    }
"
113c5414-6c55-466b-b879-a350ab6e0ca2,d3ef001f-f3e3-4584-a3af-ef8d10544271,EQ,"PUBLIC,void,setBackground,LPAREN,ImageIcon,background,RPAREN,LBRACE,this,DOT,background,<MASK>,background,SEMI,RBRACE","	public void setBackground(ImageIcon background){
,		this.background <MASK> background;
,	}
"
46553d6c-dc87-4edc-9d46-5b7555c514e8,cb69fede-a160-4ba3-8c62-560f522d9d8c,PERCENT,"PUBLIC,STATIC,String,dump,LPAREN,FINAL,byte,LBRACKET,RBRACKET,data,COMMA,int,size,RPAREN,LBRACE,IF,LPAREN,LPAREN,data,EQEQ,null,RPAREN,BARBAR,LPAREN,data,DOT,length,EQEQ,0,RPAREN,RPAREN,LBRACE,RETURN,"""",SEMI,RBRACE,IF,LPAREN,data,DOT,length,LT,size,RPAREN,LBRACE,size,EQ,data,DOT,length,SEMI,RBRACE,FINAL,java,DOT,text,DOT,DecimalFormat,pf,EQ,NEW,java,DOT,text,DOT,DecimalFormat,LPAREN,""000"",RPAREN,SEMI,FINAL,StringBuffer,result,EQ,NEW,StringBuffer,LPAREN,RPAREN,SEMI,FINAL,StringBuffer,line1,EQ,NEW,StringBuffer,LPAREN,""+"",RPAREN,SEMI,FINAL,StringBuffer,line2,EQ,NEW,StringBuffer,LPAREN,""|"",RPAREN,SEMI,FINAL,StringBuffer,line3,EQ,NEW,StringBuffer,LPAREN,""|"",RPAREN,SEMI,FINAL,StringBuffer,line4,EQ,NEW,StringBuffer,LPAREN,""+"",RPAREN,SEMI,int,mark,EQ,0,SEMI,WHILE,LPAREN,mark,LT,size,RPAREN,LBRACE,FINAL,int,value,EQ,LPAREN,data,LBRACKET,mark,RBRACKET,AMP,FF,RPAREN,SEMI,line1,DOT,append,LPAREN,pf,DOT,format,LPAREN,mark,RPAREN,PLUS,"":"",PLUS,ByteUtil,DOT,byteToHex,LPAREN,LPAREN,byte,RPAREN,mark,RPAREN,PLUS,""--+"",RPAREN,SEMI,line2,DOT,append,LPAREN,ByteUtil,DOT,show,LPAREN,data,LBRACKET,mark,RBRACKET,RPAREN,PLUS,""|"",RPAREN,SEMI,line3,DOT,append,LPAREN,pf,DOT,format,LPAREN,value,RPAREN,PLUS,"":"",PLUS,ByteUtil,DOT,byteToHex,LPAREN,data,LBRACKET,mark,RBRACKET,RPAREN,PLUS,"":"",PLUS,ByteUtil,DOT,byteToASCII,LPAREN,data,LBRACKET,mark,RBRACKET,RPAREN,PLUS,""|"",RPAREN,SEMI,line4,DOT,append,LPAREN,""--------+"",RPAREN,SEMI,mark,PLUSPLUS,SEMI,IF,LPAREN,LPAREN,mark,GT,0,RPAREN,AMPAMP,LPAREN,LPAREN,mark,<MASK>,8,RPAREN,EQEQ,0,RPAREN,RPAREN,LBRACE,line1,DOT,append,LPAREN,""\r\n"",RPAREN,SEMI,line2,DOT,append,LPAREN,""\r\n"",RPAREN,SEMI,line3,DOT,append,LPAREN,""\r\n"",RPAREN,SEMI,line4,DOT,append,LPAREN,""\r\n"",RPAREN,SEMI,result,DOT,append,LPAREN,line1,DOT,toString,LPAREN,RPAREN,PLUS,line2,DOT,toString,LPAREN,RPAREN,PLUS,line3,DOT,toString,LPAREN,RPAREN,PLUS,line4,DOT,toString,LPAREN,RPAREN,RPAREN,SEMI,line1,DOT,delete,LPAREN,0,COMMA,line1,DOT,length,LPAREN,RPAREN,RPAREN,SEMI,line2,DOT,delete,LPAREN,0,COMMA,line2,DOT,length,LPAREN,RPAREN,RPAREN,SEMI,line3,DOT,delete,LPAREN,0,COMMA,line3,DOT,length,LPAREN,RPAREN,RPAREN,SEMI,line4,DOT,delete,LPAREN,0,COMMA,line4,DOT,length,LPAREN,RPAREN,RPAREN,SEMI,IF,LPAREN,mark,LT,size,RPAREN,LBRACE,line1,DOT,append,LPAREN,""+"",RPAREN,SEMI,line2,DOT,append,LPAREN,""|"",RPAREN,SEMI,line3,DOT,append,LPAREN,""|"",RPAREN,SEMI,line4,DOT,append,LPAREN,""+"",RPAREN,SEMI,RBRACE,RBRACE,RBRACE,IF,LPAREN,line1,DOT,length,LPAREN,RPAREN,GT,0,RPAREN,LBRACE,line1,DOT,append,LPAREN,""\r\n"",RPAREN,SEMI,line2,DOT,append,LPAREN,""\r\n"",RPAREN,SEMI,line3,DOT,append,LPAREN,""\r\n"",RPAREN,SEMI,result,DOT,append,LPAREN,line1,DOT,toString,LPAREN,RPAREN,PLUS,line2,DOT,toString,LPAREN,RPAREN,PLUS,line3,DOT,toString,LPAREN,RPAREN,PLUS,line4,DOT,toString,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,RETURN,result,DOT,toString,LPAREN,RPAREN,SEMI,RBRACE","  public static String dump( final byte[] data, int size ) {
,    // First, a little error checking
,    if ( ( data == null ) || ( data.length == 0 ) ) {
,      return """";
,    }
,
,    if ( data.length < size ) {
,      size = data.length;
,    }
,
,    final java.text.DecimalFormat pf = new java.text.DecimalFormat( ""000"" );
,    final StringBuffer result = new StringBuffer();
,    final StringBuffer line1 = new StringBuffer( ""+"" );
,    final StringBuffer line2 = new StringBuffer( ""|"" );
,    final StringBuffer line3 = new StringBuffer( ""|"" );
,    final StringBuffer line4 = new StringBuffer( ""+"" );
,    int mark = 0;
,
,    while ( mark < size ) {
,      // Get the unsigned value of this byte
,      final int value = ( data[mark] & 0xFF );
,
,      // Print the little box that represents this byte
,      line1.append( pf.format( mark ) + "":"" + ByteUtil.byteToHex( (byte)mark ) + ""--+"" );
,      line2.append( ByteUtil.show( data[mark] ) + ""|"" );
,      line3.append( pf.format( value ) + "":"" + ByteUtil.byteToHex( data[mark] ) + "":"" + ByteUtil.byteToASCII( data[mark] ) + ""|"" );
,      line4.append( ""--------+"" );
,
,      mark++;
,
,      if ( ( mark > 0 ) && ( ( mark <MASK> 8 ) == 0 ) ) {
,        line1.append( ""\r\n"" );
,        line2.append( ""\r\n"" );
,        line3.append( ""\r\n"" );
,        line4.append( ""\r\n"" );
,        result.append( line1.toString() + line2.toString() + line3.toString() + line4.toString() );
,        line1.delete( 0, line1.length() );
,        line2.delete( 0, line2.length() );
,        line3.delete( 0, line3.length() );
,        line4.delete( 0, line4.length() );
,
,        if ( mark < size ) {
,          line1.append( ""+"" );
,          line2.append( ""|"" );
,          line3.append( ""|"" );
,          line4.append( ""+"" );
,        }
,      }
,    }
,
,    if ( line1.length() > 0 ) {
,      line1.append( ""\r\n"" );
,      line2.append( ""\r\n"" );
,      line3.append( ""\r\n"" );
,      // line4.append( ""\r\n"" );
,      result.append( line1.toString() + line2.toString() + line3.toString() + line4.toString() );
,    }
,
,    return result.toString();
,  }
"
9b07119d-5d87-44cb-94ac-77a9d4fc6019,db328443-45ed-4c2e-b6e4-b2ca69dec3c4,LTEQ,"PUBLIC,STATIC,void,importAvaluacionsFromSGD,LPAREN,int,any,COMMA,IClient,client,RPAREN,LBRACE,String,dbName_ies,EQ,ICoreData,DOT,core_mysqlDBPrefix,PLUS,any,SEMI,String,dbName_sgd,EQ,LPAREN,String,RPAREN,ICoreData,DOT,configTableMap,DOT,get,LPAREN,""sgdDBPrefix"",RPAREN,PLUS,any,SEMI,String,SQL,EQ,""SELECT fechaInicio, fechaFin FROM "",PLUS,dbName_sgd,PLUS,"".evaluacionesdetalle ORDER BY fechaInicio ASC LIMIT 3"",SEMI,java,DOT,util,DOT,Date,LBRACKET,RBRACKET,iniDates,EQ,NEW,java,DOT,util,DOT,Date,LBRACKET,3,RBRACKET,SEMI,java,DOT,util,DOT,Date,LBRACKET,RBRACKET,endDates,EQ,NEW,java,DOT,util,DOT,Date,LBRACKET,3,RBRACKET,SEMI,TRY,LBRACE,Statement,st,EQ,client,DOT,getSgd,LPAREN,RPAREN,DOT,createStatement,LPAREN,RPAREN,SEMI,ResultSet,rs,EQ,client,DOT,getSgd,LPAREN,RPAREN,DOT,getResultSet,LPAREN,SQL,COMMA,st,RPAREN,SEMI,int,i,EQ,0,SEMI,WHILE,LPAREN,rs,BANGEQ,null,AMPAMP,rs,DOT,next,LPAREN,RPAREN,RPAREN,LBRACE,iniDates,LBRACKET,i,RBRACKET,EQ,rs,DOT,getDate,LPAREN,1,RPAREN,SEMI,endDates,LBRACKET,i,RBRACKET,EQ,rs,DOT,getDate,LPAREN,2,RPAREN,SEMI,i,PLUSEQ,1,SEMI,RBRACE,IF,LPAREN,rs,BANGEQ,null,RPAREN,LBRACE,rs,DOT,close,LPAREN,RPAREN,SEMI,st,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,CATCH,LPAREN,SQLException,ex,RPAREN,LBRACE,Logger,DOT,getLogger,LPAREN,Avaluacions,DOT,CLASS,DOT,getName,LPAREN,RPAREN,RPAREN,DOT,log,LPAREN,Level,DOT,SEVERE,COMMA,null,COMMA,ex,RPAREN,SEMI,RBRACE,ArrayList,LT,Integer,GT,idAvals,EQ,NEW,ArrayList,LT,Integer,GT,LPAREN,RPAREN,SEMI,SQL,EQ,""SELECT id FROM "",PLUS,dbName_ies,PLUS,"".avaluacions"",SEMI,TRY,LBRACE,Statement,st,EQ,client,DOT,getMysql,LPAREN,RPAREN,DOT,createStatement,LPAREN,RPAREN,SEMI,ResultSet,rs,EQ,client,DOT,getMysql,LPAREN,RPAREN,DOT,getResultSet,LPAREN,SQL,COMMA,st,RPAREN,SEMI,WHILE,LPAREN,rs,BANGEQ,null,AMPAMP,rs,DOT,next,LPAREN,RPAREN,RPAREN,LBRACE,idAvals,DOT,add,LPAREN,rs,DOT,getInt,LPAREN,1,RPAREN,RPAREN,SEMI,RBRACE,IF,LPAREN,rs,BANGEQ,null,RPAREN,LBRACE,rs,DOT,close,LPAREN,RPAREN,SEMI,st,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,CATCH,LPAREN,SQLException,ex,RPAREN,LBRACE,Logger,DOT,getLogger,LPAREN,Avaluacions,DOT,CLASS,DOT,getName,LPAREN,RPAREN,RPAREN,DOT,log,LPAREN,Level,DOT,SEVERE,COMMA,null,COMMA,ex,RPAREN,SEMI,RBRACE,FOR,LPAREN,int,idAval,COLON,idAvals,RPAREN,LBRACE,FOR,LPAREN,int,k,EQ,0,SEMI,k,LT,3,SEMI,k,PLUSPLUS,RPAREN,LBRACE,SQL,EQ,""UPDATE "",PLUS,dbName_ies,PLUS,"".avaluacionsdetall SET fechaInicio=?, fechaFin=? "",PLUS,"" WHERE valorExportable LIKE '%"",PLUS,LPAREN,k,PLUS,1,RPAREN,PLUS,""a%' AND idAvaluacions="",PLUS,idAval,SEMI,int,nup,EQ,client,DOT,getMysql,LPAREN,RPAREN,DOT,preparedUpdate,LPAREN,SQL,COMMA,NEW,Object,LBRACKET,RBRACKET,LBRACE,iniDates,LBRACKET,k,RBRACKET,COMMA,endDates,LBRACKET,k,RBRACKET,RBRACE,RPAREN,SEMI,IF,LPAREN,nup,<MASK>,0,RPAREN,LBRACE,SQL,EQ,""INSERT INTO "",PLUS,dbName_ies,PLUS,"".avaluacionsdetall (idAvaluacions, fechaInicio, fechaFin) "",PLUS,"" VALUES(?,?,?) WHERE valorExportable LIKE '%"",PLUS,LPAREN,k,PLUS,1,RPAREN,PLUS,""a%'"",SEMI,client,DOT,getMysql,LPAREN,RPAREN,DOT,preparedUpdate,LPAREN,SQL,COMMA,NEW,Object,LBRACKET,RBRACKET,LBRACE,idAval,COMMA,iniDates,LBRACKET,k,RBRACKET,COMMA,endDates,LBRACKET,k,RBRACKET,RBRACE,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,RBRACE","    public static void importAvaluacionsFromSGD(int any, IClient client) {
,        String dbName_ies = ICoreData.core_mysqlDBPrefix+any;
,        String dbName_sgd =(String) ICoreData.configTableMap.get(""sgdDBPrefix"") + any;
,        //Retrieve dates from sgd
,        String SQL=""SELECT fechaInicio, fechaFin FROM ""+ dbName_sgd+"".evaluacionesdetalle ORDER BY fechaInicio ASC LIMIT 3"";
,        
,        java.util.Date[] iniDates = new java.util.Date[3];
,        java.util.Date[] endDates = new java.util.Date[3];
,        try {
,            Statement st = client.getSgd().createStatement();
,            ResultSet rs = client.getSgd().getResultSet(SQL,st);
,            int i = 0;
,            while(rs!=null && rs.next())
,            {
,                iniDates[i] = rs.getDate(1);
,                endDates[i] = rs.getDate(2);
,                i += 1;
,            }
,            if(rs!=null)
,            {
,                rs.close();
,                st.close();
,            }
,        } catch (SQLException ex) {
,            Logger.getLogger(Avaluacions.class.getName()).log(Level.SEVERE, null, ex);
,        }
,        
,        //Retrieve existing avaluacions from iesdigital
,         ArrayList<Integer> idAvals = new ArrayList<Integer>();
,         SQL=""SELECT id FROM ""+ dbName_ies+"".avaluacions"";
,         try {
,            Statement st = client.getMysql().createStatement();
,            ResultSet rs = client.getMysql().getResultSet(SQL,st);
,            while(rs!=null && rs.next())
,            {
,                idAvals.add(rs.getInt(1));
,            }
,            if(rs!=null)
,            {
,                rs.close();
,                st.close();
,            }
,        } catch (SQLException ex) {
,            Logger.getLogger(Avaluacions.class.getName()).log(Level.SEVERE, null, ex);
,        }
,         
,        //Put the same dates for each avaluacio
,        for(int idAval : idAvals)
,        {
,            for(int k=0; k<3; k++)
,            {
,                SQL = ""UPDATE ""+dbName_ies+"".avaluacionsdetall SET fechaInicio=?, fechaFin=? ""
,                        + "" WHERE valorExportable LIKE '%""+(k+1)+""a%' AND idAvaluacions=""+idAval;
,                //System.out.println(SQL);
,                int nup = client.getMysql().preparedUpdate(SQL, new Object[]{iniDates[k], endDates[k]});
,                if(nup<MASK>0)
,                {
,                    SQL = ""INSERT INTO ""+dbName_ies+"".avaluacionsdetall (idAvaluacions, fechaInicio, fechaFin) ""
,                        + "" VALUES(?,?,?) WHERE valorExportable LIKE '%""+(k+1)+""a%'"";
,                    //System.out.println(SQL);
,                    client.getMysql().preparedUpdate(SQL, new Object[]{idAval, iniDates[k], endDates[k]});
,                }
,            }
,            
,        }
,    }
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,648124b8-cb81-4efe-bb02-87c9fff7941b,BANGEQ,"PRIVATE,boolean,isINDIDriver,LPAREN,Class,c,RPAREN,LBRACE,IF,LPAREN,INDINotLoadableDriver,DOT,CLASS,DOT,isAssignableFrom,LPAREN,c,RPAREN,RPAREN,LBRACE,RETURN,false,SEMI,RBRACE,Class,s,EQ,c,DOT,getSuperclass,LPAREN,RPAREN,SEMI,WHILE,LPAREN,s,<MASK>,null,RPAREN,LBRACE,IF,LPAREN,s,EQEQ,INDIDriver,DOT,CLASS,RPAREN,LBRACE,RETURN,true,SEMI,RBRACE,s,EQ,s,DOT,getSuperclass,LPAREN,RPAREN,SEMI,RBRACE,RETURN,false,SEMI,RBRACE","  private boolean isINDIDriver(Class c) {
,if (INDINotLoadableDriver.class.isAssignableFrom(c)) {
,  return false; 
,}
,    Class s = c.getSuperclass();
,
,    while (s <MASK> null) {
,      if (s == INDIDriver.class) {
,        return true;
,      }
,
,      s = s.getSuperclass();
,    }
,
,    return false;
,  }
"
7bd76208-9b34-4151-9ec4-57c6c52e0fcf,5dfc6812-4f33-4e79-8b84-80d5cf3387d3,STAR,"void,pushclosure,LPAREN,FuncState,func,COMMA,ExpDesc,v,RPAREN,LBRACE,FuncState,fs,EQ,this,DOT,fs,SEMI,Prototype,f,EQ,fs,DOT,f,SEMI,IF,LPAREN,f,DOT,prototypes,EQEQ,null,BARBAR,fs,DOT,np,PLUS,1,GT,f,DOT,prototypes,DOT,length,RPAREN,f,DOT,prototypes,EQ,FuncState,DOT,realloc,LPAREN,f,DOT,prototypes,COMMA,fs,DOT,np,<MASK>,2,PLUS,1,RPAREN,SEMI,f,DOT,prototypes,LBRACKET,fs,DOT,np,PLUSPLUS,RBRACKET,EQ,func,DOT,f,SEMI,v,DOT,init,LPAREN,VRELOCABLE,COMMA,fs,DOT,codeABx,LPAREN,FuncState,DOT,OP_CLOSURE,COMMA,0,COMMA,fs,DOT,np,SUB,1,RPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,func,DOT,f,DOT,numUpvalues,SEMI,i,PLUSPLUS,RPAREN,LBRACE,int,o,EQ,LPAREN,func,DOT,upvalues_k,LBRACKET,i,RBRACKET,EQEQ,VLOCAL,RPAREN,QUES,FuncState,DOT,OP_MOVE,COLON,FuncState,DOT,OP_GETUPVAL,SEMI,fs,DOT,codeABC,LPAREN,o,COMMA,0,COMMA,func,DOT,upvalues_info,LBRACKET,i,RBRACKET,COMMA,0,RPAREN,SEMI,RBRACE,RBRACE","	void pushclosure(FuncState func, ExpDesc v) {
,		FuncState fs = this.fs;
,		Prototype f = fs.f;
,		if (f.prototypes == null || fs.np + 1 > f.prototypes.length)
,			f.prototypes = FuncState.realloc( f.prototypes, fs.np<MASK>2 + 1 );
,		f.prototypes[fs.np++] = func.f;
,		v.init(VRELOCABLE, fs.codeABx(FuncState.OP_CLOSURE, 0, fs.np - 1));
,		for (int i = 0; i < func.f.numUpvalues; i++) {
,			int o = (func.upvalues_k[i] == VLOCAL) ? FuncState.OP_MOVE
,					: FuncState.OP_GETUPVAL;
,			fs.codeABC(o, 0, func.upvalues_info[i], 0);
,		}
,	}
"
09478113-8f39-4146-870b-8037a6932443,b417d87e-7fea-42a3-b761-5e5810917277,EQEQ,"PRIVATE,void,saveStateAs,LPAREN,RPAREN,LBRACE,mtateFileDialog,DOT,setMultiSelectionEnabled,LPAREN,false,RPAREN,SEMI,mtateFileDialog,DOT,addChoosableFileFilter,LPAREN,mtateFileFilter,RPAREN,SEMI,IF,LPAREN,mtateFileDialog,DOT,showSaveDialog,LPAREN,this,RPAREN,<MASK>,JFileChooser,DOT,APPROVE_OPTION,RPAREN,LBRACE,File,chosenFile,EQ,mtateFileDialog,DOT,getSelectedFile,LPAREN,RPAREN,SEMI,saveState,LPAREN,chosenFile,RPAREN,SEMI,RBRACE,RBRACE","    private void saveStateAs()
,    {
,        mtateFileDialog.setMultiSelectionEnabled(false);
,        mtateFileDialog.addChoosableFileFilter(mtateFileFilter);
,
,        if (mtateFileDialog.showSaveDialog(this) <MASK> JFileChooser.APPROVE_OPTION)
,        {
,            File chosenFile = mtateFileDialog.getSelectedFile();
,            saveState(chosenFile);
,        }
,    }
"
a98e10ef-3b3e-45e8-a98b-65ce2200211b,f370fe9d-7326-4e93-afac-2ad8d9b051ec,GTEQ,"PUBLIC,STATIC,void,main,LPAREN,String,LBRACKET,RBRACKET,a,RPAREN,LBRACE,List,LT,String,GT,args,EQ,NEW,ArrayList,LT,String,GT,LPAREN,Arrays,DOT,asList,LPAREN,a,RPAREN,RPAREN,SEMI,boolean,printHelp,EQ,args,DOT,size,LPAREN,RPAREN,EQEQ,0,SEMI,boolean,interactive,EQ,false,SEMI,boolean,turtles,EQ,false,SEMI,boolean,trace,EQ,false,SEMI,FOR,LPAREN,int,z,EQ,args,DOT,size,LPAREN,RPAREN,SUB,1,SEMI,z,<MASK>,0,SEMI,z,SUBSUB,RPAREN,LBRACE,IF,LPAREN,""-h"",DOT,equals,LPAREN,args,DOT,get,LPAREN,z,RPAREN,RPAREN,RPAREN,LBRACE,printHelp,EQ,true,SEMI,args,DOT,remove,LPAREN,z,SUBSUB,RPAREN,SEMI,CONTINUE,SEMI,RBRACE,IF,LPAREN,""-i"",DOT,equals,LPAREN,args,DOT,get,LPAREN,z,RPAREN,RPAREN,RPAREN,LBRACE,interactive,EQ,true,SEMI,args,DOT,remove,LPAREN,z,SUBSUB,RPAREN,SEMI,CONTINUE,SEMI,RBRACE,IF,LPAREN,""-t"",DOT,equals,LPAREN,args,DOT,get,LPAREN,z,RPAREN,RPAREN,RPAREN,LBRACE,turtles,EQ,true,SEMI,args,DOT,remove,LPAREN,z,SUBSUB,RPAREN,SEMI,CONTINUE,SEMI,RBRACE,IF,LPAREN,""-T"",DOT,equals,LPAREN,args,DOT,get,LPAREN,z,RPAREN,RPAREN,RPAREN,LBRACE,trace,EQ,true,SEMI,args,DOT,remove,LPAREN,z,SUBSUB,RPAREN,SEMI,CONTINUE,SEMI,RBRACE,RBRACE,IF,LPAREN,printHelp,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,version,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""usage: MLogo [-hit] file ..."",RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,"" h : print this help message"",RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,"" i : provide an interactive REPL session"",RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,"" t : enable turtle graphics during batch mode"",RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,"" T : enable execution trace"",RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,RPAREN,SEMI,RBRACE,Environment,e,EQ,kernel,LPAREN,RPAREN,SEMI,primitiveIO,LPAREN,e,COMMA,trace,RPAREN,SEMI,IF,LPAREN,turtles,RPAREN,LBRACE,TurtleGraphics,t,EQ,NEW,TurtleGraphics,LPAREN,e,RPAREN,SEMI,FOR,LPAREN,String,fileName,COLON,args,RPAREN,LBRACE,runFile,LPAREN,e,COMMA,fileName,COMMA,t,RPAREN,SEMI,RBRACE,IF,LPAREN,interactive,RPAREN,LBRACE,repl,LPAREN,e,COMMA,t,RPAREN,SEMI,RBRACE,ELSE,LBRACE,System,DOT,exit,LPAREN,0,RPAREN,SEMI,RBRACE,RBRACE,ELSE,LBRACE,FOR,LPAREN,String,fileName,COLON,args,RPAREN,LBRACE,runFile,LPAREN,e,COMMA,fileName,COMMA,null,RPAREN,SEMI,RBRACE,IF,LPAREN,interactive,RPAREN,LBRACE,TurtleGraphics,t,EQ,NEW,TurtleGraphics,LPAREN,e,RPAREN,SEMI,repl,LPAREN,e,COMMA,t,RPAREN,SEMI,RBRACE,RBRACE,RBRACE","	public static void main(String[] a) {
,		List<String> args = new ArrayList<String>(Arrays.asList(a));
,
,		boolean printHelp   = args.size() == 0;
,		boolean interactive = false;
,		boolean turtles     = false;
,		boolean trace       = false;
,
,		for(int z = args.size() - 1; z <MASK> 0; z--) {
,			if (""-h"".equals(args.get(z))) { printHelp   = true; args.remove(z--); continue; }
,			if (""-i"".equals(args.get(z))) { interactive = true; args.remove(z--); continue; }
,			if (""-t"".equals(args.get(z))) { turtles     = true; args.remove(z--); continue; }
,			if (""-T"".equals(args.get(z))) { trace       = true; args.remove(z--); continue; }
,		}
,
,		if (printHelp) {
,			System.out.println(version);
,			System.out.println(""usage: MLogo [-hit] file ..."");
,			System.out.println();
,			System.out.println("" h : print this help message"");
,			System.out.println("" i : provide an interactive REPL session"");
,			System.out.println("" t : enable turtle graphics during batch mode"");
,			System.out.println("" T : enable execution trace"");
,			System.out.println();
,		}
,
,		Environment e = kernel();
,		primitiveIO(e, trace);
,
,		// the repl always loads turtle graphics primitives,
,		// but they're strictly opt-in for batch mode.
,		if (turtles) {
,			TurtleGraphics t = new TurtleGraphics(e);
,			for(String fileName : args) { runFile(e, fileName, t); }
,			if (interactive) { repl(e, t); }
,			else { System.exit(0); }
,		}
,		else {
,			for(String fileName : args) { runFile(e, fileName, null); }
,			if (interactive) {
,				TurtleGraphics t = new TurtleGraphics(e);
,				repl(e, t);
,			}
,		}
,	}
"
ad0a2aad-9ad8-443c-832f-88b9f64460ed,54caccf6-d910-418b-a7fb-49f353d1f2e2,EQ,"PROTECTED,void,initialize,LPAREN,RPAREN,LBRACE,IF,LPAREN,BANG,feeder,DOT,isIn,RPAREN,LBRACE,feederSolenoid,DOT,setIn,LPAREN,RPAREN,SEMI,feeder,DOT,isIn,<MASK>,true,SEMI,setTimeout,LPAREN,0.5,RPAREN,SEMI,RBRACE,ELSE,LBRACE,setTimeout,LPAREN,0.0,RPAREN,SEMI,RBRACE,RBRACE","    protected void initialize() {
,        if (!feeder.isIn) {
,            feederSolenoid.setIn();
,            feeder.isIn <MASK> true;
,            setTimeout(0.5);
,        } else {
,            setTimeout(0.0);
,        }
,    }
"
e64c1d9d-97c7-42df-873b-ba28e2c45ccc,e4025f21-6ca3-4d1e-86c2-fb10b72e642c,GTEQ,"PUBLIC,void,nextPermutation,LPAREN,int,LBRACKET,RBRACKET,num,RPAREN,LBRACE,int,i,COMMA,j,COMMA,k,COMMA,notde,COMMA,firstlar,COMMA,temp,SEMI,int,len,EQ,num,DOT,length,SEMI,IF,LPAREN,len,EQEQ,1,RPAREN,RETURN,SEMI,FOR,LPAREN,i,EQ,len,SUB,1,SEMI,i,GT,0,SEMI,i,SUBSUB,RPAREN,LBRACE,IF,LPAREN,num,LBRACKET,i,SUB,1,RBRACKET,LT,num,LBRACKET,i,RBRACKET,RPAREN,BREAK,SEMI,RBRACE,notde,EQ,i,SUB,1,SEMI,IF,LPAREN,num,LBRACKET,0,RBRACKET,<MASK>,num,LBRACKET,1,RBRACKET,RPAREN,LBRACE,FOR,LPAREN,j,EQ,0,SEMI,len,SUB,j,SUB,1,GT,j,SEMI,j,PLUSPLUS,RPAREN,LBRACE,temp,EQ,num,LBRACKET,j,RBRACKET,SEMI,num,LBRACKET,j,RBRACKET,EQ,num,LBRACKET,len,SUB,j,SUB,1,RBRACKET,SEMI,num,LBRACKET,len,SUB,j,SUB,1,RBRACKET,EQ,temp,SEMI,RBRACE,RETURN,SEMI,RBRACE,FOR,LPAREN,i,EQ,len,SUB,1,SEMI,i,GT,notde,SEMI,i,SUBSUB,RPAREN,LBRACE,IF,LPAREN,num,LBRACKET,i,RBRACKET,GT,num,LBRACKET,notde,RBRACKET,RPAREN,LBRACE,temp,EQ,num,LBRACKET,notde,RBRACKET,SEMI,num,LBRACKET,notde,RBRACKET,EQ,num,LBRACKET,i,RBRACKET,SEMI,num,LBRACKET,i,RBRACKET,EQ,temp,SEMI,BREAK,SEMI,RBRACE,RBRACE,FOR,LPAREN,j,EQ,notde,PLUS,1,SEMI,len,SUB,LPAREN,j,SUB,notde,RPAREN,GT,j,SEMI,j,PLUSPLUS,RPAREN,LBRACE,temp,EQ,num,LBRACKET,j,RBRACKET,SEMI,num,LBRACKET,j,RBRACKET,EQ,num,LBRACKET,len,SUB,LPAREN,j,SUB,notde,RPAREN,RBRACKET,SEMI,num,LBRACKET,len,SUB,LPAREN,j,SUB,notde,RPAREN,RBRACKET,EQ,temp,SEMI,RBRACE,RBRACE","	public void nextPermutation(int[] num) {
,        int i,j,k,notde,firstlar,temp;
,        int len=num.length;
,        if(len==1)  return;
,        for(i=len-1;i>0;i--)
,        {
,            if(num[i-1]<num[i])
,                break;
,        }
,        notde=i-1;
,        if(num[0]<MASK>num[1])
,        {
,            for(j=0;len-j-1>j;j++)
,            {
,                temp=num[j];
,                num[j]=num[len-j-1];
,                num[len-j-1]=temp;
,            }
,            return;
,        }
,        for(i=len-1;i>notde;i--)
,        {
,            if(num[i]>num[notde])
,            {
,                temp=num[notde];
,                num[notde]=num[i];
,                num[i]=temp;
,                break;
,            }
,        }
,        for(j=notde+1;len-(j-notde)>j;j++)
,        {
,            temp=num[j];
,            num[j]=num[len-(j-notde)];
,            num[len-(j-notde)]=temp;
,        }
,        
,    }
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,664069a8-19ad-48c3-ac97-e0d0aa141356,LT,"PUBLIC,boolean,isAlreadyLoaded,LPAREN,String,deviceIdentifier,RPAREN,LBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,devices,DOT,size,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,INDIDevice,d,EQ,devices,DOT,get,LPAREN,i,RPAREN,SEMI,IF,LPAREN,d,DOT,isDevice,LPAREN,deviceIdentifier,RPAREN,RPAREN,LBRACE,RETURN,true,SEMI,RBRACE,RBRACE,RETURN,false,SEMI,RBRACE","  public boolean isAlreadyLoaded(String deviceIdentifier) {
,    for (int i = 0 ; i <MASK> devices.size() ; i++) {
,      INDIDevice d = devices.get(i);
,
,      if (d.isDevice(deviceIdentifier)) {
,        return true;
,      }
,    }
,
,    return false;
,  }
"
2170437a-9f53-47a2-b3cb-257eca2eb4ab,bbb5b022-6816-4d41-9f72-15c6192b0aa2,EQEQ,"PUBLIC,void,testOneTask,LPAREN,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""\nStarting testOneTask"",RPAREN,SEMI,tasks,EQ,tasksAccess,DOT,getTasks,LPAREN,RPAREN,SEMI,assertNotNull,LPAREN,tasksAccess,RPAREN,SEMI,date1,DOT,set,LPAREN,2013,COMMA,7,COMMA,7,RPAREN,SEMI,task1,DOT,setDueDate,LPAREN,date1,RPAREN,SEMI,tasksAccess,DOT,sort,LPAREN,0,COMMA,false,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,tasks,DOT,size,LPAREN,RPAREN,SUB,1,SEMI,i,PLUSPLUS,RPAREN,LBRACE,assertTrue,LPAREN,tasks,DOT,get,LPAREN,i,RPAREN,DOT,getTaskID,LPAREN,RPAREN,GTEQ,tasks,DOT,get,LPAREN,i,PLUS,1,RPAREN,DOT,getTaskID,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,tasksAccess,DOT,sort,LPAREN,0,COMMA,true,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,tasks,DOT,size,LPAREN,RPAREN,SUB,1,SEMI,i,PLUSPLUS,RPAREN,LBRACE,assertTrue,LPAREN,tasks,DOT,get,LPAREN,i,RPAREN,DOT,getTaskID,LPAREN,RPAREN,LTEQ,tasks,DOT,get,LPAREN,i,PLUS,1,RPAREN,DOT,getTaskID,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,tasksAccess,DOT,sort,LPAREN,1,COMMA,true,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,tasks,DOT,size,LPAREN,RPAREN,SUB,1,SEMI,i,PLUSPLUS,RPAREN,LBRACE,assertTrue,LPAREN,tasks,DOT,get,LPAREN,i,RPAREN,DOT,getTitle,LPAREN,RPAREN,DOT,compareTo,LPAREN,tasks,DOT,get,LPAREN,i,PLUS,1,RPAREN,DOT,getTitle,LPAREN,RPAREN,RPAREN,LTEQ,0,RPAREN,SEMI,RBRACE,tasksAccess,DOT,sort,LPAREN,4,COMMA,true,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,tasks,DOT,size,LPAREN,RPAREN,SUB,1,SEMI,i,PLUSPLUS,RPAREN,LBRACE,assertTrue,LPAREN,tasks,DOT,get,LPAREN,i,RPAREN,DOT,getDueDate,LPAREN,RPAREN,DOT,compareTo,LPAREN,tasks,DOT,get,LPAREN,i,PLUS,1,RPAREN,DOT,getDueDate,LPAREN,RPAREN,RPAREN,LTEQ,0,RPAREN,SEMI,RBRACE,FOR,LPAREN,int,i,EQ,tasks,DOT,size,LPAREN,RPAREN,SUB,1,SEMI,i,GTEQ,0,SEMI,i,SUBSUB,RPAREN,LBRACE,tasksAccess,DOT,deleteTask,LPAREN,tasks,DOT,get,LPAREN,i,RPAREN,DOT,getTaskID,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,assertEquals,LPAREN,tasks,DOT,size,LPAREN,RPAREN,COMMA,0,RPAREN,SEMI,tasksAccess,DOT,sort,LPAREN,4,COMMA,true,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,tasks,DOT,size,LPAREN,RPAREN,SUB,1,SEMI,i,PLUSPLUS,RPAREN,LBRACE,assertTrue,LPAREN,tasks,DOT,get,LPAREN,i,RPAREN,DOT,getDueDate,LPAREN,RPAREN,DOT,compareTo,LPAREN,tasks,DOT,get,LPAREN,i,PLUS,1,RPAREN,DOT,getDueDate,LPAREN,RPAREN,RPAREN,LTEQ,0,RPAREN,SEMI,RBRACE,assertEquals,LPAREN,tasks,DOT,size,LPAREN,RPAREN,COMMA,0,RPAREN,SEMI,tasks,EQ,tasksAccess,DOT,getTasks,LPAREN,RPAREN,SEMI,count,EQ,tasks,DOT,size,LPAREN,RPAREN,SEMI,tasksAccess,DOT,addTask,LPAREN,task1,RPAREN,SEMI,tasks,EQ,tasksAccess,DOT,getTasks,LPAREN,RPAREN,SEMI,tempDate,EQ,tasksAccess,DOT,getMinDueDate,LPAREN,RPAREN,SEMI,assertEquals,LPAREN,tempDate,DOT,get,LPAREN,Calendar,DOT,DAY_OF_MONTH,RPAREN,COMMA,date1,DOT,get,LPAREN,Calendar,DOT,DAY_OF_MONTH,RPAREN,RPAREN,SEMI,assertEquals,LPAREN,tempDate,DOT,get,LPAREN,Calendar,DOT,MONTH,RPAREN,COMMA,date1,DOT,get,LPAREN,Calendar,DOT,MONTH,RPAREN,RPAREN,SEMI,assertEquals,LPAREN,tempDate,DOT,get,LPAREN,Calendar,DOT,YEAR,RPAREN,COMMA,date1,DOT,get,LPAREN,Calendar,DOT,YEAR,RPAREN,RPAREN,SEMI,tempDate,EQ,tasksAccess,DOT,getMaxDueDate,LPAREN,RPAREN,SEMI,assertEquals,LPAREN,tempDate,DOT,get,LPAREN,Calendar,DOT,DAY_OF_MONTH,RPAREN,COMMA,date1,DOT,get,LPAREN,Calendar,DOT,DAY_OF_MONTH,RPAREN,RPAREN,SEMI,assertEquals,LPAREN,tempDate,DOT,get,LPAREN,Calendar,DOT,MONTH,RPAREN,COMMA,date1,DOT,get,LPAREN,Calendar,DOT,MONTH,RPAREN,RPAREN,SEMI,assertEquals,LPAREN,tempDate,DOT,get,LPAREN,Calendar,DOT,YEAR,RPAREN,COMMA,date1,DOT,get,LPAREN,Calendar,DOT,YEAR,RPAREN,RPAREN,SEMI,tasksAccess,DOT,sort,LPAREN,4,COMMA,true,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,tasks,DOT,size,LPAREN,RPAREN,SUB,1,SEMI,i,PLUSPLUS,RPAREN,LBRACE,assertTrue,LPAREN,tasks,DOT,get,LPAREN,i,RPAREN,DOT,getDueDate,LPAREN,RPAREN,DOT,compareTo,LPAREN,tasks,DOT,get,LPAREN,i,PLUS,1,RPAREN,DOT,getDueDate,LPAREN,RPAREN,RPAREN,LTEQ,0,RPAREN,SEMI,RBRACE,tasksAccess,DOT,sort,LPAREN,3,COMMA,false,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,tasks,DOT,size,LPAREN,RPAREN,SUB,1,SEMI,i,PLUSPLUS,RPAREN,LBRACE,assertTrue,LPAREN,tasks,DOT,get,LPAREN,i,RPAREN,DOT,getStatus,LPAREN,RPAREN,DOT,compareTo,LPAREN,tasks,DOT,get,LPAREN,i,PLUS,1,RPAREN,DOT,getStatus,LPAREN,RPAREN,RPAREN,LTEQ,0,RPAREN,SEMI,RBRACE,tasksAccess,DOT,sort,LPAREN,0,COMMA,true,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,tasks,DOT,size,LPAREN,RPAREN,SUB,1,SEMI,i,PLUSPLUS,RPAREN,LBRACE,assertTrue,LPAREN,tasks,DOT,get,LPAREN,i,RPAREN,DOT,getTaskID,LPAREN,RPAREN,LTEQ,tasks,DOT,get,LPAREN,i,PLUS,1,RPAREN,DOT,getTaskID,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,assertEquals,LPAREN,tasks,DOT,size,LPAREN,RPAREN,COMMA,count,PLUS,1,RPAREN,SEMI,assertEquals,LPAREN,""task1"",COMMA,tasks,DOT,get,LPAREN,tasks,DOT,size,LPAREN,RPAREN,SUB,1,RPAREN,DOT,getTitle,LPAREN,RPAREN,RPAREN,SEMI,task1,DOT,setComments,LPAREN,""edited"",RPAREN,SEMI,tasksAccess,DOT,editTask,LPAREN,task1,RPAREN,SEMI,tasks,EQ,tasksAccess,DOT,getTasks,LPAREN,RPAREN,SEMI,assertEquals,LPAREN,tasks,DOT,get,LPAREN,tasks,DOT,indexOf,LPAREN,task1,RPAREN,RPAREN,DOT,getComments,LPAREN,RPAREN,COMMA,""edited"",RPAREN,SEMI,count,EQ,tasks,DOT,size,LPAREN,RPAREN,SEMI,tasksAccess,DOT,deleteTask,LPAREN,task1,DOT,getTaskID,LPAREN,RPAREN,RPAREN,SEMI,tasks,EQ,tasksAccess,DOT,getTasks,LPAREN,RPAREN,SEMI,assertTrue,LPAREN,tasks,DOT,size,LPAREN,RPAREN,<MASK>,count,SUB,1,RPAREN,SEMI,assertTrue,LPAREN,tasks,DOT,indexOf,LPAREN,task1,RPAREN,LT,0,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""Finished testOneTask"",RPAREN,SEMI,RBRACE","	public void testOneTask()
,	{
,		System.out.println(""\nStarting testOneTask"");
,		
,		tasks = tasksAccess.getTasks();
,		
,		assertNotNull(tasksAccess);
,				
,		date1.set(2013, 7, 7);
,		task1.setDueDate(date1);
,		
,		tasksAccess.sort(0, false);
,		for(int i = 0; i < tasks.size()-1; i++)
,		{
,			assertTrue(tasks.get(i).getTaskID() >= tasks.get(i+1).getTaskID());
,		}
,		
,		tasksAccess.sort(0, true);
,		for(int i = 0; i < tasks.size()-1; i++)
,		{
,			assertTrue(tasks.get(i).getTaskID() <= tasks.get(i+1).getTaskID());
,		}
,		
,		tasksAccess.sort(1, true);
,		for(int i = 0; i < tasks.size()-1; i++)
,		{
,			assertTrue(tasks.get(i).getTitle().compareTo(tasks.get(i+1).getTitle()) <= 0);
,		}
,		
,		tasksAccess.sort(4, true);
,		for(int i = 0; i < tasks.size()-1; i++)
,		{
,			assertTrue(tasks.get(i).getDueDate().compareTo(tasks.get(i+1).getDueDate()) <= 0);
,		}
,		
,		for(int i = tasks.size()-1; i>=0; i--)
,		{
,			tasksAccess.deleteTask(tasks.get(i).getTaskID());
,		}
,		
,		assertEquals(tasks.size(), 0);
,		
,		tasksAccess.sort(4, true);
,		for(int i = 0; i < tasks.size()-1; i++)
,		{
,			assertTrue(tasks.get(i).getDueDate().compareTo(tasks.get(i+1).getDueDate()) <= 0);
,		}
,		
,		assertEquals(tasks.size(), 0);
,		
,		tasks = tasksAccess.getTasks();
,		count = tasks.size();
,		
,		tasksAccess.addTask(task1);
,		tasks = tasksAccess.getTasks();
,		
,		tempDate = tasksAccess.getMinDueDate();
,		assertEquals(tempDate.get(Calendar.DAY_OF_MONTH), date1.get(Calendar.DAY_OF_MONTH));
,		assertEquals(tempDate.get(Calendar.MONTH), date1.get(Calendar.MONTH));
,		assertEquals(tempDate.get(Calendar.YEAR), date1.get(Calendar.YEAR));
,		tempDate = tasksAccess.getMaxDueDate();
,		assertEquals(tempDate.get(Calendar.DAY_OF_MONTH), date1.get(Calendar.DAY_OF_MONTH));
,		assertEquals(tempDate.get(Calendar.MONTH), date1.get(Calendar.MONTH));
,		assertEquals(tempDate.get(Calendar.YEAR), date1.get(Calendar.YEAR));
,				
,		tasksAccess.sort(4, true);
,		for(int i = 0; i < tasks.size()-1; i++)
,		{
,			assertTrue(tasks.get(i).getDueDate().compareTo(tasks.get(i+1).getDueDate()) <= 0);
,		}
,		
,		tasksAccess.sort(3, false);
,		for(int i = 0; i < tasks.size()-1; i++)
,		{
,			assertTrue(tasks.get(i).getStatus().compareTo(tasks.get(i+1).getStatus()) <= 0);
,		}
,		
,		tasksAccess.sort(0, true);
,		for(int i = 0; i < tasks.size()-1; i++)
,		{
,			assertTrue(tasks.get(i).getTaskID() <= tasks.get(i+1).getTaskID());
,		}
,		
,		assertEquals(tasks.size(), count + 1);
,		assertEquals(""task1"", tasks.get(tasks.size() - 1).getTitle());
,		
,		task1.setComments(""edited"");
,		tasksAccess.editTask(task1);
,		tasks = tasksAccess.getTasks();
,		
,		assertEquals(tasks.get(tasks.indexOf(task1)).getComments(), ""edited"");
,		
,		count = tasks.size();
,		tasksAccess.deleteTask(task1.getTaskID());
,		tasks = tasksAccess.getTasks();
,		
,		assertTrue(tasks.size() <MASK> count - 1);
,		assertTrue(tasks.indexOf(task1) < 0);
,		
,		System.out.println(""Finished testOneTask"");
,	}
"
a4c68a60-241d-4ccc-bb34-58eb273247fe,5899ce25-2e4f-46ac-957e-d97915bb5982,PLUS,"MONKEYS_AT,Override,PUBLIC,int,hashCode,LPAREN,RPAREN,LBRACE,int,result,EQ,vcsErrors,DOT,hashCode,LPAREN,RPAREN,SEMI,result,EQ,31,STAR,result,<MASK>,exceptions,DOT,hashCode,LPAREN,RPAREN,SEMI,RETURN,result,SEMI,RBRACE","		@Override public int hashCode() {
,			int result = vcsErrors.hashCode();
,			result = 31 * result <MASK> exceptions.hashCode();
,			return result;
,		}
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,5a51dba2-ca23-478b-a4e5-642f0c55713e,BANGEQ,"PRIVATE,INDIElementAndValue,LBRACKET,RBRACKET,processINDIElements,LPAREN,INDIProperty,property,COMMA,Element,xml,RPAREN,LBRACE,String,oneType,SEMI,IF,LPAREN,property,INSTANCEOF,INDITextProperty,RPAREN,LBRACE,oneType,EQ,""oneText"",SEMI,RBRACE,ELSE,IF,LPAREN,property,INSTANCEOF,INDIBLOBProperty,RPAREN,LBRACE,oneType,EQ,""oneBLOB"",SEMI,RBRACE,ELSE,IF,LPAREN,property,INSTANCEOF,INDINumberProperty,RPAREN,LBRACE,oneType,EQ,""oneNumber"",SEMI,RBRACE,ELSE,IF,LPAREN,property,INSTANCEOF,INDISwitchProperty,RPAREN,LBRACE,oneType,EQ,""oneSwitch"",SEMI,RBRACE,ELSE,LBRACE,RETURN,NEW,INDIElementAndValue,LBRACKET,0,RBRACKET,SEMI,RBRACE,ArrayList,LT,INDIElementAndValue,GT,list,EQ,NEW,ArrayList,LT,INDIElementAndValue,GT,LPAREN,RPAREN,SEMI,NodeList,nodes,EQ,xml,DOT,getChildNodes,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,nodes,DOT,getLength,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,Node,n,EQ,nodes,DOT,item,LPAREN,i,RPAREN,SEMI,IF,LPAREN,n,INSTANCEOF,Element,RPAREN,LBRACE,Element,child,EQ,LPAREN,Element,RPAREN,n,SEMI,String,name,EQ,child,DOT,getNodeName,LPAREN,RPAREN,SEMI,IF,LPAREN,name,DOT,equals,LPAREN,oneType,RPAREN,RPAREN,LBRACE,INDIElementAndValue,ev,EQ,processOneXXX,LPAREN,property,COMMA,child,RPAREN,SEMI,IF,LPAREN,ev,<MASK>,null,RPAREN,LBRACE,list,DOT,add,LPAREN,ev,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,RBRACE,RETURN,list,DOT,toArray,LPAREN,NEW,INDIElementAndValue,LBRACKET,0,RBRACKET,RPAREN,SEMI,RBRACE","  private INDIElementAndValue[] processINDIElements(INDIProperty property, Element xml) {
,
,    String oneType;
,    if (property instanceof INDITextProperty) {
,      oneType = ""oneText"";
,    } else if (property instanceof INDIBLOBProperty) {
,      oneType = ""oneBLOB"";
,    } else if (property instanceof INDINumberProperty) {
,      oneType = ""oneNumber"";
,    } else if (property instanceof INDISwitchProperty) {
,      oneType = ""oneSwitch"";
,    } else {
,      return new INDIElementAndValue[0];
,    }
,
,    ArrayList<INDIElementAndValue> list = new ArrayList<INDIElementAndValue>();
,
,    NodeList nodes = xml.getChildNodes();
,
,    for (int i = 0 ; i < nodes.getLength() ; i++) {
,      Node n = nodes.item(i);
,
,      if (n instanceof Element) {
,        Element child = (Element)n;
,
,        String name = child.getNodeName();
,
,        if (name.equals(oneType)) {
,          INDIElementAndValue ev = processOneXXX(property, child);
,
,          if (ev <MASK> null) {
,            list.add(ev);
,          }
,        }
,      }
,    }
,
,    return list.toArray(new INDIElementAndValue[0]);
,  }
"
bbbc2c49-08b6-473f-979f-87460edf9df9,2d15aa6a-59cd-4a91-a91d-d1e13184c453,LTEQ,"PUBLIC,void,run,LPAREN,RPAREN,LBRACE,SYNCHRONIZED,LPAREN,taskList,RPAREN,LBRACE,WHILE,LPAREN,true,RPAREN,LBRACE,long,time,EQ,System,DOT,currentTimeMillis,LPAREN,RPAREN,SEMI,IF,LPAREN,nextTime,<MASK>,time,RPAREN,LBRACE,nextTask,DOT,getTask,LPAREN,RPAREN,DOT,runWatchdogTask,LPAREN,time,RPAREN,SEMI,nextTask,DOT,setLastExecMillis,LPAREN,time,RPAREN,SEMI,updateNextTask,LPAREN,RPAREN,SEMI,RBRACE,IF,LPAREN,nextTask,BANGEQ,null,AMPAMP,taskList,DOT,size,LPAREN,RPAREN,GT,0,RPAREN,LBRACE,time,EQ,System,DOT,currentTimeMillis,LPAREN,RPAREN,SEMI,long,timeToSleep,EQ,nextTime,SUB,time,SEMI,IF,LPAREN,timeToSleep,GT,0,RPAREN,LBRACE,TRY,LBRACE,taskList,DOT,wait,LPAREN,timeToSleep,RPAREN,SEMI,RBRACE,CATCH,LPAREN,InterruptedException,e,RPAREN,LBRACE,RBRACE,CONTINUE,SEMI,RBRACE,ELSE,IF,LPAREN,timeToSleep,EQEQ,0,BARBAR,nextTime,EQEQ,0,RPAREN,CONTINUE,SEMI,RBRACE,TRY,LBRACE,taskList,DOT,wait,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,InterruptedException,e,RPAREN,LBRACE,RBRACE,RBRACE,RBRACE,RBRACE","	public void run()
,	{
,		synchronized(taskList)
,		{
,			while( true )
,			{
,				long time = System.currentTimeMillis();
,
,				if( nextTime <MASK> time )
,				{
,					nextTask.getTask().runWatchdogTask(time);
,					nextTask.setLastExecMillis(time);
,					updateNextTask();
,				}
,
,				if( nextTask != null && taskList.size() > 0 )
,				{
,					time = System.currentTimeMillis();
,
,					long timeToSleep = nextTime - time;
,
,					if( timeToSleep > 0 )
,					{
,						try
,						{
,							taskList.wait(timeToSleep);
,						}
,						catch(InterruptedException e)
,						{
,						}
,
,						continue;
,					}
,					else if( timeToSleep == 0 || nextTime == 0 )
,						continue;
,				}
,
,				try
,				{
,					taskList.wait();
,				}
,				catch(InterruptedException e)
,				{
,				}
,			}
,		}
,	}
"
996c2181-63de-4cd4-a997-594ad56489d6,745f1009-1aea-4c0b-9dc9-fe6f9705fc7e,SLASH,"PUBLIC,int,binarySearch,LPAREN,int,LBRACKET,RBRACKET,inputArr,COMMA,int,key,RPAREN,LBRACE,int,start,EQ,0,SEMI,int,end,EQ,inputArr,DOT,length,SUB,1,SEMI,WHILE,LPAREN,start,LTEQ,end,RPAREN,LBRACE,int,mid,EQ,LPAREN,start,PLUS,end,RPAREN,<MASK>,2,SEMI,IF,LPAREN,key,EQEQ,inputArr,LBRACKET,mid,RBRACKET,RPAREN,LBRACE,RETURN,mid,SEMI,RBRACE,IF,LPAREN,key,LT,inputArr,LBRACKET,mid,RBRACKET,RPAREN,LBRACE,end,EQ,mid,SUB,1,SEMI,RBRACE,ELSE,LBRACE,start,EQ,mid,PLUS,1,SEMI,RBRACE,RBRACE,RETURN,SUB,1,SEMI,RBRACE","	public int binarySearch(int[] inputArr, int key) {
,
,		int start = 0;
,		int end = inputArr.length - 1;
,		while (start <= end) {
,			int mid = (start + end) <MASK> 2;
,			if (key == inputArr[mid]) {
,				return mid;
,			}
,			if (key < inputArr[mid]) {
,				end = mid - 1;
,			} else {
,				start = mid + 1;
,			}
,		}
,		return -1;
,	}
"
7b37a4d3-9846-4b12-9860-e336321ade31,b7e6e927-773d-4fcc-8f7b-71381384b2c8,GT,"PRIVATE,void,checarClienteAberto,LPAREN,RPAREN,THROWS,Exception,LBRACE,IF,LPAREN,id,DOT,length,LPAREN,RPAREN,<MASK>,0,AMPAMP,id,BANGEQ,""0"",RPAREN,abrir,LPAREN,RPAREN,SEMI,ELSE,cliente,EQ,NEW,Cliente,LPAREN,RPAREN,SEMI,RBRACE","    private void checarClienteAberto()  throws Exception  {
,        if(id.length() <MASK> 0 && id != ""0"")
,            abrir();
,        else
,            cliente = new Cliente();
,    }
"
ea91ca9d-c4a2-44a2-9a1f-e35ca896736e,4d5a78d6-c98f-45ae-a058-fc1d7fc5cf67,LTEQ,"PUBLIC,STATIC,List,LT,Map,LT,String,COMMA,String,GTGT,doSelect,LPAREN,String,tableName,COMMA,String,whereStatement,RPAREN,THROWS,DBException,LBRACE,String,query,EQ,SQLTools,DOT,selectSQL,LPAREN,tableName,COMMA,whereStatement,RPAREN,SEMI,List,LT,Map,LT,String,COMMA,String,GTGT,results,EQ,NEW,java,DOT,util,DOT,LinkedList,LPAREN,RPAREN,SEMI,ResultSet,resultSet,EQ,executeQuery,LPAREN,query,RPAREN,SEMI,TRY,LBRACE,ResultSetMetaData,rsmd,EQ,resultSet,DOT,getMetaData,LPAREN,RPAREN,SEMI,int,columnCount,EQ,rsmd,DOT,getColumnCount,LPAREN,RPAREN,SEMI,WHILE,LPAREN,resultSet,DOT,next,LPAREN,RPAREN,RPAREN,LBRACE,Map,LT,String,COMMA,String,GT,map,EQ,NEW,java,DOT,util,DOT,TreeMap,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,1,SEMI,i,<MASK>,columnCount,SEMI,i,PLUSPLUS,RPAREN,LBRACE,String,columnName,EQ,rsmd,DOT,getColumnLabel,LPAREN,i,RPAREN,SEMI,map,DOT,put,LPAREN,columnName,COMMA,resultSet,DOT,getString,LPAREN,i,RPAREN,RPAREN,SEMI,RBRACE,results,DOT,add,LPAREN,map,RPAREN,SEMI,RBRACE,resultSet,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,SQLException,e,RPAREN,LBRACE,THROW,NEW,DBException,LPAREN,e,COMMA,query,RPAREN,SEMI,RBRACE,RETURN,results,SEMI,RBRACE","    public static List<Map<String, String>> doSelect(String tableName, String whereStatement) throws DBException {
,        String query = SQLTools.selectSQL(tableName, whereStatement);
,        //try executing the query, else return null
,        List<Map<String, String>> results = new java.util.LinkedList();
,        ResultSet resultSet = executeQuery(query);
,        try {
,            ResultSetMetaData rsmd = resultSet.getMetaData();
,            //create the map of ColumnNames->List_of_Values
,            int columnCount = rsmd.getColumnCount();
,            //iterate through results and fill the maps
,            while (resultSet.next()) {
,                Map<String, String> map = new java.util.TreeMap();
,                for (int i = 1; i <MASK> columnCount; i++) {
,                    String columnName = rsmd.getColumnLabel(i);
,                    //select the correct list from the mapp and add the value
,                    map.put(columnName, resultSet.getString(i));
,                }
,                results.add(map);
,            }
,            resultSet.close();
,        } catch (SQLException e) {
,            throw new DBException(e, query);
,        }
,        return results;
,    }
"
57cc1a58-8f23-49b4-bcf8-6b2866c3102b,0b3053b2-3c9a-402b-b623-c1cb437c4deb,GT,"PUBLIC,boolean,addNewArtist,LPAREN,ArtistInfoBean,artistInfoBean,RPAREN,LBRACE,TRY,LBRACE,connection,EQ,NEW,DatabaseConnection,LPAREN,RPAREN,DOT,getConnection,LPAREN,RPAREN,SEMI,String,addTrack_Query,EQ,""INSERT into artistinfo (artistid, artistname)  VALUES (?,?)"",SEMI,PreparedStatement,prepareStatement,EQ,connection,DOT,prepareStatement,LPAREN,addTrack_Query,RPAREN,SEMI,prepareStatement,DOT,setString,LPAREN,1,COMMA,artistInfoBean,DOT,getArtist_id,LPAREN,RPAREN,RPAREN,SEMI,prepareStatement,DOT,setString,LPAREN,2,COMMA,artistInfoBean,DOT,getArtist_name,LPAREN,RPAREN,RPAREN,SEMI,boolean,checkArtistId,EQ,checkArtistId,LPAREN,artistInfoBean,RPAREN,SEMI,IF,LPAREN,checkArtistId,RPAREN,LBRACE,RETURN,true,SEMI,RBRACE,ELSE,LBRACE,int,executeUpdate,EQ,prepareStatement,DOT,executeUpdate,LPAREN,RPAREN,SEMI,IF,LPAREN,executeUpdate,<MASK>,0,RPAREN,LBRACE,RETURN,true,SEMI,RBRACE,ELSE,LBRACE,RETURN,false,SEMI,RBRACE,RBRACE,RBRACE,CATCH,LPAREN,SQLException,ex,RPAREN,LBRACE,Logger,DOT,getLogger,LPAREN,ArtistInfo,DOT,CLASS,DOT,getName,LPAREN,RPAREN,RPAREN,DOT,log,LPAREN,Level,DOT,SEVERE,COMMA,null,COMMA,ex,RPAREN,SEMI,RBRACE,RETURN,false,SEMI,RBRACE","    public boolean addNewArtist(ArtistInfoBean artistInfoBean) {
,        try {
,            connection = new DatabaseConnection().getConnection();
,            String addTrack_Query = ""INSERT into artistinfo (artistid, artistname)  VALUES (?,?)"";
,            PreparedStatement prepareStatement = connection.prepareStatement(addTrack_Query);
,            prepareStatement.setString(1, artistInfoBean.getArtist_id());
,            prepareStatement.setString(2, artistInfoBean.getArtist_name());
,            boolean checkArtistId = checkArtistId(artistInfoBean);
,            if (checkArtistId) {
,                return true;
,            } else {
,                int executeUpdate = prepareStatement.executeUpdate();
,                if (executeUpdate <MASK> 0) {
,                    return true;
,                } else {
,                    return false;
,                }
,            }
,
,        } catch (SQLException ex) {
,            Logger.getLogger(ArtistInfo.class.getName()).log(Level.SEVERE, null, ex);
,        }
,        return false;
,
,
,    }
"
09478113-8f39-4146-870b-8037a6932443,77995ba3-f544-4d67-acf5-cc516dd9c515,EQEQ,"PRIVATE,void,OP_CPX,LPAREN,RPAREN,LBRACE,int,iMem,EQ,readOperand,LPAREN,RPAREN,SEMI,int,iVal,EQ,int8,LPAREN,getX,LPAREN,RPAREN,SUB,iMem,RPAREN,SEMI,setNFlag,LPAREN,getBit,LPAREN,iVal,COMMA,7,RPAREN,RPAREN,SEMI,setCFlag,LPAREN,BANG,getBit,LPAREN,getX,LPAREN,RPAREN,SUB,iMem,COMMA,8,RPAREN,RPAREN,SEMI,setZFlag,LPAREN,iVal,<MASK>,0,RPAREN,SEMI,RBRACE","    private void OP_CPX()
,    {
,        int iMem = readOperand();
,        int iVal = int8(getX() - iMem);
,
,        setNFlag(getBit(iVal, 7));
,        setCFlag(!getBit(getX() - iMem, 8));
,        setZFlag(iVal <MASK> 0);
,    }
"
c694737b-29b6-48d5-90c3-b6e0b6d64d88,aa274926-bfa2-405a-b98d-e802b258aebf,PERCENT,"PUBLIC,void,drawPalette,LPAREN,int,spanInPixels,COMMA,int,heightInPixels,COMMA,TerrainTypes,desiredTerrain,COMMA,Vector,LT,Boolean,GT,desiredFeatures,RPAREN,LBRACE,TerrainTypes,LBRACKET,RBRACKET,allTypes,EQ,TerrainTypes,DOT,values,LPAREN,RPAREN,SEMI,int,numCells,EQ,allTypes,DOT,length,SEMI,int,internalMarginInPixels,EQ,LPAREN,spanInPixels,SUB,numCells,STAR,hexWidthInPixels,RPAREN,SLASH,LPAREN,numCells,SUB,1,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,numCells,SEMI,i,PLUSPLUS,RPAREN,LBRACE,TerrainTypes,terrain,EQ,allTypes,LBRACKET,i,RBRACKET,SEMI,int,xAtLeftEdgeOfHex,EQ,getLeftMargin,LPAREN,RPAREN,PLUS,i,STAR,LPAREN,internalMarginInPixels,PLUS,hexWidthInPixels,RPAREN,SEMI,int,yAdjustment,EQ,6,STAR,LPAREN,i,<MASK>,2,RPAREN,SEMI,int,yAtTopPointOfHex,EQ,getTopMargin,LPAREN,RPAREN,PLUS,yAdjustment,SEMI,IF,LPAREN,terrain,EQEQ,desiredTerrain,RPAREN,LBRACE,Polygon,highlight,EQ,NEW,Polygon,LPAREN,RPAREN,SEMI,int,xLeft,EQ,xAtLeftEdgeOfHex,SUB,LPAREN,internalMarginInPixels,PLUS,1,RPAREN,SLASH,2,SEMI,int,xRight,EQ,xLeft,PLUS,hexWidthInPixels,PLUS,internalMarginInPixels,SEMI,IF,LPAREN,xRight,GT,margins,DOT,getMaxX,LPAREN,RPAREN,SUB,8,RPAREN,LBRACE,xRight,EQ,LPAREN,int,RPAREN,margins,DOT,getMaxX,LPAREN,RPAREN,SUB,8,SEMI,RBRACE,int,yTop,EQ,getTopMargin,LPAREN,RPAREN,PLUS,1,SEMI,int,yBottom,EQ,heightInPixels,SUB,2,SEMI,highlight,DOT,addPoint,LPAREN,xLeft,COMMA,yTop,RPAREN,SEMI,highlight,DOT,addPoint,LPAREN,xRight,COMMA,yTop,RPAREN,SEMI,highlight,DOT,addPoint,LPAREN,xRight,COMMA,yBottom,RPAREN,SEMI,highlight,DOT,addPoint,LPAREN,xLeft,COMMA,yBottom,RPAREN,SEMI,Color,highlightColor,EQ,NEW,Color,LPAREN,255,COMMA,255,COMMA,153,RPAREN,SEMI,fillPolygon,LPAREN,highlight,COMMA,highlightColor,RPAREN,SEMI,RBRACE,Polygon,hex,EQ,getHex,LPAREN,xAtLeftEdgeOfHex,COMMA,yAtTopPointOfHex,RPAREN,SEMI,Color,color,EQ,terrain,DOT,getColor,LPAREN,RPAREN,SEMI,fillPolygon,LPAREN,hex,COMMA,color,RPAREN,SEMI,String,abbr,EQ,terrain,DOT,getAbbreviation,LPAREN,RPAREN,SEMI,int,abbrWidth,EQ,getWidthInPixels,LPAREN,abbr,RPAREN,SEMI,int,x,EQ,xAtLeftEdgeOfHex,PLUS,hexWidthInPixels,SLASH,2,SUB,abbrWidth,SLASH,2,SEMI,textDisplayer,DOT,beginUsing,LPAREN,comp2D,COMMA,x,COMMA,50,PLUS,2,STAR,yAdjustment,COMMA,12,RPAREN,SEMI,textDisplayer,DOT,typeLine,LPAREN,abbr,RPAREN,SEMI,textDisplayer,DOT,finishUsing,LPAREN,RPAREN,SEMI,IF,LPAREN,terrain,EQEQ,desiredTerrain,RPAREN,LBRACE,Point,cellCenter,EQ,NEW,Point,LPAREN,xAtLeftEdgeOfHex,PLUS,hexWidthInPixels,SLASH,2,COMMA,yAtTopPointOfHex,PLUS,hexSideInPixels,RPAREN,SEMI,IF,LPAREN,Features,DOT,railroad,DOT,isChosen,LPAREN,desiredFeatures,RPAREN,RPAREN,LBRACE,drawSampleRailroad,LPAREN,cellCenter,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,Features,DOT,road,DOT,isChosen,LPAREN,desiredFeatures,RPAREN,RPAREN,LBRACE,drawSampleRoad,LPAREN,cellCenter,RPAREN,SEMI,RBRACE,labelFeatures,LPAREN,cellCenter,COMMA,terrain,COMMA,desiredFeatures,RPAREN,SEMI,RBRACE,RBRACE,RBRACE","    public void drawPalette(int spanInPixels, int heightInPixels,
,                            TerrainTypes desiredTerrain, Vector<Boolean> desiredFeatures) {
,        TerrainTypes[] allTypes = TerrainTypes.values();
,        int numCells = allTypes.length;
,
,        int internalMarginInPixels = (spanInPixels - numCells * hexWidthInPixels) / (numCells - 1);
,        for (int i = 0; i < numCells; i++) {
,            TerrainTypes terrain = allTypes[i];
,            int xAtLeftEdgeOfHex = getLeftMargin() + i * (internalMarginInPixels + hexWidthInPixels);
,            int yAdjustment = 6 * (i <MASK> 2);
,            int yAtTopPointOfHex = getTopMargin() + yAdjustment;
,            if (terrain == desiredTerrain) {
,                Polygon highlight = new Polygon();
,                int xLeft = xAtLeftEdgeOfHex - (internalMarginInPixels + 1) / 2;
,                int xRight = xLeft + hexWidthInPixels + internalMarginInPixels;
,                if (xRight > margins.getMaxX() - 8) {
,                    xRight = (int) margins.getMaxX() - 8;
,                }
,                int yTop = getTopMargin() + 1;
,                int yBottom = heightInPixels - 2;
,                highlight.addPoint(xLeft, yTop);
,                highlight.addPoint(xRight, yTop);
,                highlight.addPoint(xRight, yBottom);
,                highlight.addPoint(xLeft,  yBottom);
,                Color highlightColor = new Color(255, 255, 153);
,                fillPolygon(highlight, highlightColor);
,            }
,            Polygon hex = getHex(xAtLeftEdgeOfHex, yAtTopPointOfHex);
,            Color color = terrain.getColor();
,            fillPolygon(hex, color);
,            String abbr = terrain.getAbbreviation();
,
,            int abbrWidth = getWidthInPixels(abbr);
,            int x = xAtLeftEdgeOfHex + hexWidthInPixels / 2 - abbrWidth / 2;
,            textDisplayer.beginUsing(comp2D, x, 50 + 2 * yAdjustment, 12);
,            textDisplayer.typeLine(abbr);
,            textDisplayer.finishUsing();
,            if (terrain == desiredTerrain) {
,                Point cellCenter = new Point(xAtLeftEdgeOfHex + hexWidthInPixels / 2,
,                                             yAtTopPointOfHex + hexSideInPixels);
,                if (Features.railroad.isChosen(desiredFeatures)) {
,                    drawSampleRailroad(cellCenter);
,                } else if (Features.road.isChosen(desiredFeatures)) {
,                    drawSampleRoad(cellCenter);
,                }
,                labelFeatures(cellCenter, terrain, desiredFeatures);
,            }
,        }
,    }
"
63ee1274-7add-4bc5-a057-e2079298f295,3fa9f66f-335d-40c5-bf13-b2c147a571a3,SUB,"PRIVATE,STATIC,void,test8,LPAREN,RPAREN,THROWS,FileNotFoundException,LBRACE,String,input,EQ,""new\n"",PLUS,""pick up cell key\n"",PLUS,""unlock cell door with cell key\n"",PLUS,""quit\n"",PLUS,""y\n"",SEMI,HashMap,LT,Integer,COMMA,String,GT,output,EQ,NEW,HashMap,LT,Integer,COMMA,String,GT,LPAREN,RPAREN,SEMI,boolean,passed,EQ,true,SEMI,TRY,LBRACE,in,EQ,NEW,ByteArrayInputStream,LPAREN,input,DOT,getBytes,LPAREN,RPAREN,RPAREN,SEMI,System,DOT,setIn,LPAREN,in,RPAREN,SEMI,out,EQ,NEW,PrintStream,LPAREN,""testing.txt"",RPAREN,SEMI,System,DOT,setOut,LPAREN,out,RPAREN,SEMI,Game,DOT,main,LPAREN,null,RPAREN,SEMI,RBRACE,CATCH,LPAREN,ExitException,se,RPAREN,LBRACE,RBRACE,CATCH,LPAREN,Exception,e,RPAREN,LBRACE,System,DOT,setOut,LPAREN,stdout,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""Error: "",RPAREN,SEMI,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,passed,EQ,false,SEMI,RBRACE,FINALLY,LBRACE,System,DOT,setOut,LPAREN,stdout,RPAREN,SEMI,MONKEYS_AT,SuppressWarnings,LPAREN,""resource"",RPAREN,Scanner,sc,EQ,NEW,Scanner,LPAREN,NEW,File,LPAREN,""testing.txt"",RPAREN,RPAREN,SEMI,ArrayList,LT,String,GT,testOutput,EQ,NEW,ArrayList,LT,String,GT,LPAREN,RPAREN,SEMI,WHILE,LPAREN,sc,DOT,hasNextLine,LPAREN,RPAREN,RPAREN,LBRACE,testOutput,DOT,add,LPAREN,sc,DOT,nextLine,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,output,DOT,put,LPAREN,13,COMMA,""The guard walks toward your cell."",RPAREN,SEMI,output,DOT,put,LPAREN,14,COMMA,"">> You unlock the cell door."",RPAREN,SEMI,output,DOT,put,LPAREN,15,COMMA,""The guard peers into the cell, checking that the door is secured."",RPAREN,SEMI,output,DOT,put,LPAREN,16,COMMA,""The door swings open."",RPAREN,SEMI,output,DOT,put,LPAREN,17,COMMA,""You have been caught."",RPAREN,SEMI,output,DOT,put,LPAREN,18,COMMA,""YOU LOSE!"",RPAREN,SEMI,output,DOT,put,LPAREN,testOutput,DOT,size,LPAREN,RPAREN,<MASK>,1,COMMA,"">>"",RPAREN,SEMI,IF,LPAREN,passed,RPAREN,LBRACE,FOR,LPAREN,Map,DOT,Entry,LT,Integer,COMMA,String,GT,entry,COLON,output,DOT,entrySet,LPAREN,RPAREN,RPAREN,LBRACE,IF,LPAREN,BANG,testOutput,DOT,get,LPAREN,entry,DOT,getKey,LPAREN,RPAREN,RPAREN,DOT,equals,LPAREN,entry,DOT,getValue,LPAREN,RPAREN,RPAREN,RPAREN,LBRACE,passed,EQ,false,SEMI,System,DOT,out,DOT,println,LPAREN,""test8 failed: Line "",PLUS,entry,DOT,getKey,LPAREN,RPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""\tExpected: "",PLUS,entry,DOT,getValue,LPAREN,RPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""\tReceived: "",PLUS,testOutput,DOT,get,LPAREN,entry,DOT,getKey,LPAREN,RPAREN,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,IF,LPAREN,passed,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""test8 passed"",RPAREN,SEMI,RBRACE,RBRACE,ELSE,LBRACE,System,DOT,out,DOT,println,LPAREN,""test8 failed: error"",RPAREN,SEMI,RBRACE,RBRACE,RBRACE","	private static void test8() throws FileNotFoundException {
,		//Test unlocking the cell door and getting caught
,		String input = ""new\n"" + ""pick up cell key\n""
,				+ ""unlock cell door with cell key\n"" + ""quit\n"" + ""y\n"";
,
,		HashMap<Integer, String> output = new HashMap<Integer, String>();
,
,		boolean passed = true;
,		try {
,			in = new ByteArrayInputStream(input.getBytes());
,			System.setIn(in);
,			out = new PrintStream(""testing.txt"");
,			System.setOut(out);
,			Game.main(null);
,		} catch (ExitException se) {
,
,		} catch (Exception e) {
,			System.setOut(stdout);
,			System.out.println(""Error: "");
,			e.printStackTrace();
,			passed = false;
,		} finally {
,			System.setOut(stdout);
,			@SuppressWarnings(""resource"")
,			Scanner sc = new Scanner(new File(""testing.txt""));
,			ArrayList<String> testOutput = new ArrayList<String>();
,			while (sc.hasNextLine()) {
,				testOutput.add(sc.nextLine());
,			}
,			
,			//The expected output for specific lines
,			output.put(13,""The guard walks toward your cell."");
,			output.put(14,"">> You unlock the cell door."");
,			output.put(15,""The guard peers into the cell, checking that the door is secured."");
,			output.put(16,""The door swings open."");
,			output.put(17,""You have been caught."");
,			output.put(18,""YOU LOSE!"");
,			output.put(testOutput.size() <MASK> 1, "">>"");
,
,			if (passed) {
,				for (Map.Entry<Integer, String> entry : output.entrySet()) {
,					if (!testOutput.get(entry.getKey())
,							.equals(entry.getValue())) {
,						passed = false;
,						System.out.println(""test8 failed: Line ""
,								+ entry.getKey());
,						System.out.println(""\tExpected: "" + entry.getValue());
,						System.out.println(""\tReceived: ""
,								+ testOutput.get(entry.getKey()));
,					}
,				}
,				if (passed) {
,					System.out.println(""test8 passed"");
,				}
,			} else {
,				System.out.println(""test8 failed: error"");
,			}
,		}
,	}
"
2170437a-9f53-47a2-b3cb-257eca2eb4ab,95c3d749-04c3-436f-9bc3-9d5b1db0dc44,EQEQ,"PUBLIC,void,setLoggedInUser,LPAREN,String,userName,RPAREN,LBRACE,IF,LPAREN,userName,BANGEQ,null,AMPAMP,userName,DOT,isEmpty,LPAREN,RPAREN,<MASK>,false,RPAREN,LBRACE,FOR,LPAREN,User,u,COLON,users,RPAREN,LBRACE,IF,LPAREN,u,DOT,getUserName,LPAREN,RPAREN,DOT,equals,LPAREN,userName,RPAREN,RPAREN,LBRACE,loggedInUser,EQ,u,SEMI,BREAK,SEMI,RBRACE,RBRACE,RBRACE,ELSE,LBRACE,THROW,NEW,IllegalArgumentException,LPAREN,""Cannot set logged in user to null!"",RPAREN,SEMI,RBRACE,RBRACE","	public void setLoggedInUser(String userName)
,	{
,		if(userName != null && userName.isEmpty() <MASK> false)
,		{
,			for (User u : users)
,			{
,				if (u.getUserName().equals(userName))
,				{
,					loggedInUser = u;
,					break;
,				}
,			}
,		}
,		else
,		{
,			throw new IllegalArgumentException(""Cannot set logged in user to null!"");
,		}
,	}
"
113c5414-6c55-466b-b879-a350ab6e0ca2,de1047bd-9ad4-4aae-80a9-6d76cd5bec5e,EQ,"PUBLIC,STATIC,String,LBRACKET,RBRACKET,csvHeaders,LPAREN,RPAREN,LBRACE,String,LBRACKET,RBRACKET,headers,<MASK>,LBRACE,""Name"",COMMA,""Cost"",COMMA,""Weight"",COMMA,""Special"",RBRACE,SEMI,RETURN,headers,SEMI,RBRACE","	public static String[] csvHeaders() {
,		String[] headers <MASK> {""Name"", ""Cost"", ""Weight"", ""Special""};
,		return headers;
,	}
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,85fdc833-7eac-4b88-8703-1ac5449e8192,BANGEQ,"MONKEYS_AT,Override,PUBLIC,void,finishReader,LPAREN,RPAREN,LBRACE,System,DOT,err,DOT,println,LPAREN,""DRIVER "",PLUS,getName,LPAREN,RPAREN,PLUS,"" finishing"",RPAREN,SEMI,IF,LPAREN,reader,<MASK>,null,RPAREN,LBRACE,reader,DOT,setStop,LPAREN,true,RPAREN,SEMI,RBRACE,RBRACE","  @Override
,  public void finishReader() {
,    System.err.println(""DRIVER "" + getName() + "" finishing"");
,
,    if (reader <MASK> null) {
,      reader.setStop(true);
,    }
,  }
"
7bb6e580-dcd8-4ee1-8cd0-36a5f66d0471,af4f5398-3507-4d7c-8303-30b942d87339,PLUS,"MONKEYS_AT,Test,PUBLIC,void,testFindAllStatement,LPAREN,RPAREN,THROWS,QueryBuilderException,LBRACE,String,expected,EQ,""SELECT ID, NAME, DESCRIPTION FROM "",<MASK>,dao,DOT,tableName,LPAREN,RPAREN,SEMI,String,result,EQ,NEW,FindAllStatementBuilder,LPAREN,RPAREN,DOT,create,LPAREN,dao,RPAREN,SEMI,assertEquals,LPAREN,expected,COMMA,result,RPAREN,SEMI,RBRACE","	@Test
,	public void testFindAllStatement() throws QueryBuilderException {
,        String expected = ""SELECT ID, NAME, DESCRIPTION FROM "" <MASK> dao.tableName();
,        String result = new FindAllStatementBuilder().create(dao);
,        assertEquals(expected, result);
,	}
"
dd0b8baf-c022-4efa-99dd-425e9c39b04c,14ade980-77ae-4062-93ac-a620244ee8e2,SLASH,"MONKEYS_AT,Override,PUBLIC,float,getStartV,LPAREN,RPAREN,LBRACE,RETURN,LPAREN,float,RPAREN,this,DOT,startV,<MASK>,LPAREN,float,RPAREN,this,DOT,parent,DOT,getHeight,LPAREN,RPAREN,SEMI,RBRACE","    @Override
,    public float getStartV() {
,        return (float) this.startV <MASK> (float) this.parent.getHeight();
,    }
"
113c5414-6c55-466b-b879-a350ab6e0ca2,07360a64-5639-410d-a128-f9b31a6a7c58,EQ,"PUBLIC,void,setDamageMsg,LPAREN,String,damageMsg,RPAREN,LBRACE,this,DOT,damageMsg,<MASK>,damageMsg,SEMI,RBRACE","	public void setDamageMsg(String damageMsg) {
,		this.damageMsg <MASK> damageMsg;
,	}
"
113c5414-6c55-466b-b879-a350ab6e0ca2,45fb627a-767a-4971-96bd-42b230a0e71d,EQ,"PUBLIC,Rectangle,LBRACKET,RBRACKET,getRooms,LPAREN,RPAREN,LBRACE,Rectangle,LBRACKET,RBRACKET,all,<MASK>,NEW,Rectangle,LBRACKET,rooms,DOT,size,LPAREN,RPAREN,RBRACKET,SEMI,rooms,DOT,toArray,LPAREN,all,RPAREN,SEMI,RETURN,all,SEMI,RBRACE","	public Rectangle[] getRooms(){
,		Rectangle[] all <MASK> new Rectangle[rooms.size()];
,		rooms.toArray(all);
,		return all;
,	}
"
bb115c2b-93d3-4fea-80dd-cc21e3473e7b,52df89ed-1b71-47f7-941d-dfb922183faf,GT,"PRIVATE,void,flagField,LPAREN,MouseEvent,e,RPAREN,LBRACE,FieldButton,fieldButton,EQ,LPAREN,LPAREN,FieldButton,RPAREN,e,DOT,getSource,LPAREN,RPAREN,RPAREN,SEMI,IF,LPAREN,fieldButton,DOT,isEnabled,LPAREN,RPAREN,RPAREN,LBRACE,IF,LPAREN,fieldButton,DOT,isUnflagged,LPAREN,RPAREN,AMPAMP,_minefield,DOT,getFlags,LPAREN,RPAREN,<MASK>,0,RPAREN,LBRACE,fieldButton,DOT,flag,LPAREN,RPAREN,SEMI,_minefield,DOT,decrementFlags,LPAREN,RPAREN,SEMI,SoundPlayer,DOT,playFlagSound,LPAREN,RPAREN,SEMI,IF,LPAREN,fieldButton,DOT,getField,LPAREN,RPAREN,DOT,getValue,LPAREN,RPAREN,DOT,equals,LPAREN,FieldValue,DOT,MINE,RPAREN,RPAREN,LBRACE,_minefield,DOT,incrementCorrectFlags,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,ELSE,IF,LPAREN,fieldButton,DOT,isFlagged,LPAREN,RPAREN,RPAREN,LBRACE,fieldButton,DOT,unflag,LPAREN,RPAREN,SEMI,_minefield,DOT,incrementFlags,LPAREN,RPAREN,SEMI,SoundPlayer,DOT,playUnflagSound,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,_gameView,DOT,setFlags,LPAREN,_minefield,DOT,getFlags,LPAREN,RPAREN,RPAREN,SEMI,RBRACE","	private void flagField(MouseEvent e) {
,		FieldButton fieldButton = ((FieldButton)e.getSource());
,
,		if (fieldButton.isEnabled()) {	// if the field button is enabled
,			if (fieldButton.isUnflagged() && _minefield.getFlags() <MASK> 0) {	// and the field button was not flagged yet, and the flags > 0
,				// mark the field as FLAGGED
,				fieldButton.flag();
,				_minefield.decrementFlags();
,				SoundPlayer.playFlagSound();
,				// if it is correct flag (there is a mine in this field)- increment the correct flags counter
,				if (fieldButton.getField().getValue().equals(FieldValue.MINE)) {
,					_minefield.incrementCorrectFlags();
,				}
,			} else if (fieldButton.isFlagged()) {
,				// unflag the field
,				fieldButton.unflag();
,				_minefield.incrementFlags();
,				SoundPlayer.playUnflagSound();
,			}
,		}
,
,		// update flags label
,		_gameView.setFlags(_minefield.getFlags());
,	}
"
4efd15d4-7259-49ef-bb2b-8984a1154bd6,6c4ccaec-12e4-41dd-9c68-5d63fd21f341,SUB,"PUBLIC,STATIC,TMDrillModel,TMgetAllTweetsByKeyword,LPAREN,String,keywords,RPAREN,LBRACE,ArrayList,LT,tweetModel,GT,results,EQ,NEW,ArrayList,LT,tweetModel,GT,LPAREN,RPAREN,SEMI,tweetModel,t,SEMI,TMDrillModel,tmDrillModel,EQ,NEW,TMDrillModel,LPAREN,RPAREN,SEMI,String,tablename,EQ,""temp-"",PLUS,keywords,SEMI,tablename,EQ,tablename,DOT,replaceAll,LPAREN,"","",COMMA,""|"",RPAREN,SEMI,tablename,EQ,tablename,DOT,replaceAll,LPAREN,"";"",COMMA,""|"",RPAREN,SEMI,tablename,EQ,tablename,DOT,replaceAll,LPAREN,"" "",COMMA,"""",RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,tablename,RPAREN,SEMI,keywords,EQ,keywords,DOT,replaceAll,LPAREN,"","",COMMA,""%' and message like '%"",RPAREN,SEMI,keywords,EQ,keywords,DOT,replaceAll,LPAREN,"";"",COMMA,""%' or message like '%"",RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,keywords,RPAREN,SEMI,TRY,LBRACE,Connection,c,EQ,DBFactory,DOT,getConnection,LPAREN,RPAREN,SEMI,PreparedStatement,ps,EQ,c,DOT,prepareStatement,LPAREN,""DROP TABLE IF EXISTS `"",PLUS,tablename,PLUS,""`; "",RPAREN,SEMI,ps,DOT,execute,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,ps,RPAREN,SEMI,ps,EQ,c,DOT,prepareStatement,LPAREN,""CREATE TABLE `"",PLUS,tablename,PLUS,""` ("",PLUS,""`username` varchar(20) NOT NULL,"",PLUS,""`date` varchar(30) NOT NULL,"",PLUS,""`message` varchar(180) NOT NULL"",PLUS,"")ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;"",RPAREN,SEMI,ps,DOT,execute,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,ps,RPAREN,SEMI,ps,EQ,c,DOT,prepareStatement,LPAREN,""INSERT INTO `"",PLUS,tablename,PLUS,""` (username, date, message) "",PLUS,""SELECT username, date, message FROM `tweets` "",PLUS,""WHERE message like '%"",PLUS,keywords,PLUS,""%';"",RPAREN,SEMI,ps,DOT,execute,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,ps,RPAREN,SEMI,ps,EQ,c,DOT,prepareStatement,LPAREN,""SELECT * from `"",PLUS,tablename,PLUS,""`;"",RPAREN,SEMI,ResultSet,rs,EQ,ps,DOT,executeQuery,LPAREN,RPAREN,SEMI,WHILE,LPAREN,rs,DOT,next,LPAREN,RPAREN,RPAREN,LBRACE,t,EQ,NEW,tweetModel,LPAREN,RPAREN,SEMI,t,DOT,setUsername,LPAREN,rs,DOT,getString,LPAREN,""username"",RPAREN,RPAREN,SEMI,t,DOT,setDate,LPAREN,rs,DOT,getString,LPAREN,""date"",RPAREN,RPAREN,SEMI,t,DOT,setMessage,LPAREN,cleanTweet,LPAREN,rs,DOT,getString,LPAREN,""message"",RPAREN,RPAREN,RPAREN,SEMI,results,DOT,add,LPAREN,t,RPAREN,SEMI,RBRACE,rs,DOT,close,LPAREN,RPAREN,SEMI,ps,DOT,close,LPAREN,RPAREN,SEMI,c,DOT,close,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""******************************* "",RPAREN,SEMI,TopicModel,tm,EQ,NEW,TopicModel,LPAREN,RPAREN,SEMI,IF,LPAREN,results,DOT,isEmpty,LPAREN,RPAREN,RPAREN,LBRACE,tmDrillModel,EQ,NEW,TMDrillModel,LPAREN,<MASK>,1,RPAREN,SEMI,RBRACE,ELSE,LBRACE,tm,DOT,importData,LPAREN,results,RPAREN,SEMI,tm,DOT,trainTopics,LPAREN,RPAREN,SEMI,tmDrillModel,EQ,NEW,TMDrillModel,LPAREN,0,COMMA,tablename,COMMA,tm,DOT,getAllTopics,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,CATCH,LPAREN,ClassNotFoundException,ex,RPAREN,LBRACE,Logger,DOT,getLogger,LPAREN,tweetHandler,DOT,CLASS,DOT,getName,LPAREN,RPAREN,RPAREN,DOT,log,LPAREN,Level,DOT,SEVERE,COMMA,null,COMMA,ex,RPAREN,SEMI,RBRACE,CATCH,LPAREN,SQLException,ex,RPAREN,LBRACE,Logger,DOT,getLogger,LPAREN,tweetHandler,DOT,CLASS,DOT,getName,LPAREN,RPAREN,RPAREN,DOT,log,LPAREN,Level,DOT,SEVERE,COMMA,null,COMMA,ex,RPAREN,SEMI,RBRACE,RETURN,tmDrillModel,SEMI,RBRACE","    public static TMDrillModel TMgetAllTweetsByKeyword(String keywords){
,        ArrayList<tweetModel> results = new ArrayList<tweetModel>();
,        tweetModel t;
,        TMDrillModel tmDrillModel = new TMDrillModel();
,        
,        String tablename = ""temp<MASK>""+keywords;
,        tablename = tablename.replaceAll("","", ""|"");
,        tablename = tablename.replaceAll("";"", ""|"");
,        tablename = tablename.replaceAll("" "", """");
,           System.out.println(tablename);
,        
,        keywords = keywords.replaceAll("","", ""%\' and message like \'%"");  
,        keywords = keywords.replaceAll("";"", ""%\' or message like \'%""); 
,           System.out.println(keywords);
,        
,        try{
,            Connection c = DBFactory.getConnection();
,            PreparedStatement ps = c.prepareStatement(
,                ""DROP TABLE IF EXISTS `"" + tablename + ""`; ""
,                );
,                ps.execute();
,                System.out.println(ps);
,            ps = c.prepareStatement(
,                ""CREATE TABLE `"" + tablename + ""` ("" +
,                ""`username` varchar(20) NOT NULL,"" +
,                ""`date` varchar(30) NOT NULL,"" +
,                ""`message` varchar(180) NOT NULL"" +
,                "")ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;""
,                );
,                ps.execute();
,                System.out.println(ps);
,            ps = c.prepareStatement(
,                ""INSERT INTO `"" + tablename + ""` (username, date, message) "" + 
,                ""SELECT username, date, message FROM `tweets` "" +
,                ""WHERE message like '%"" + keywords + ""%';"");
,                ps.execute();   
,                System.out.println(ps);
,            
,            ps = c.prepareStatement(""SELECT * from `"" + tablename + ""`;"");
,            ResultSet rs = ps.executeQuery();
,
,            while(rs.next()){
,                t = new tweetModel();
,                t.setUsername(rs.getString(""username""));
,                t.setDate(rs.getString(""date""));
,                t.setMessage(cleanTweet(rs.getString(""message"")));
,                results.add(t);
,            }
,            
,            rs.close();
,            ps.close();
,            c.close();
,
,            System.out.println(""******************************* "");
,            TopicModel tm = new TopicModel();
,            
,            if(results.isEmpty()){
,                tmDrillModel = new TMDrillModel(-1);
,            }else{
,                tm.importData(results);
,                tm.trainTopics();
,                tmDrillModel = new TMDrillModel(0, tablename, tm.getAllTopics());
,            }
,            
,        }catch(ClassNotFoundException ex){
,            Logger.getLogger(tweetHandler.class.getName()).log(Level.SEVERE, null, ex);
,        }catch(SQLException ex){
,            Logger.getLogger(tweetHandler.class.getName()).log(Level.SEVERE, null, ex);
,        }
,        
,        return tmDrillModel;
,    }
"
a0570515-a226-4091-9451-11ea578220ea,8b15e667-7944-44a7-b6f7-fa6b6bbaf299,GT,"PRIVATE,boolean,headersProvided,LPAREN,RPAREN,LBRACE,RETURN,fullHeaders,DOT,split,LPAREN,""\r\n"",RPAREN,DOT,length,<MASK>,1,SEMI,RBRACE","    private boolean headersProvided() {
,        return fullHeaders.split(""\r\n"").length <MASK> 1;
,    }
"
33a4da69-3c87-4617-ac37-92c20f86f62c,ad19e095-211e-4e6c-9f82-7e2697aadc1f,PLUS,"MONKEYS_AT,Override,PUBLIC,void,actionPerformed,LPAREN,ActionEvent,e,RPAREN,LBRACE,IF,LPAREN,e,DOT,getSource,LPAREN,RPAREN,EQEQ,tfBtn,RPAREN,LBRACE,editTf,LPAREN,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,e,DOT,getSource,LPAREN,RPAREN,EQEQ,cancelBtn,RPAREN,LBRACE,ok,EQ,false,SEMI,setVisible,LPAREN,false,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,e,DOT,getSource,LPAREN,RPAREN,EQEQ,paramBtn,RPAREN,LBRACE,ParameterManager,pm,EQ,NEW,ParameterManager,LPAREN,params,RPAREN,SEMI,pm,DOT,setVisible,LPAREN,true,RPAREN,SEMI,params,EQ,pm,DOT,getParams,LPAREN,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,e,DOT,getSource,LPAREN,RPAREN,EQEQ,okBtn,RPAREN,LBRACE,xFormula,EQ,fodTools,DOT,getFormula,LPAREN,RPAREN,SEMI,yFormula,EQ,outTools,DOT,getFormula,LPAREN,RPAREN,SEMI,title,EQ,titleField,DOT,getText,LPAREN,RPAREN,SEMI,ok,EQ,true,SEMI,setVisible,LPAREN,false,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,e,DOT,getSource,LPAREN,RPAREN,EQEQ,titleField,RPAREN,LBRACE,title,EQ,titleField,DOT,getText,LPAREN,RPAREN,SEMI,setTitle,LPAREN,""Editing "",<MASK>,title,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,e,DOT,getSource,LPAREN,RPAREN,EQEQ,setInitBtn,RPAREN,LBRACE,IF,LPAREN,x0,EQEQ,null,BARBAR,x0,DOT,getRowDimension,LPAREN,RPAREN,BANGEQ,fodTools,DOT,getFormula,LPAREN,RPAREN,DOT,length,RPAREN,x0,EQ,NEW,ColumnMatrix,LPAREN,fodTools,DOT,getFormula,LPAREN,RPAREN,DOT,length,RPAREN,SEMI,MatrixDialog,sd,EQ,NEW,MatrixDialog,LPAREN,x0,COMMA,""Initial State"",COMMA,""x"",RPAREN,SEMI,IF,LPAREN,sd,DOT,isOk,LPAREN,RPAREN,RPAREN,LBRACE,x0,EQ,sd,DOT,getDataMatrix,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,RBRACE","	@Override
,	public void actionPerformed(ActionEvent e) {
,		if (e.getSource() == tfBtn) {
,			editTf();
,		} else if (e.getSource() == cancelBtn) {
,			ok = false;
,			setVisible(false);
,		} else if (e.getSource() == paramBtn) {
,			ParameterManager pm = new ParameterManager(params);
,			pm.setVisible(true);
,			params = pm.getParams();
,		} else if (e.getSource() == okBtn) {
,			xFormula = fodTools.getFormula();
,			yFormula = outTools.getFormula();
,			title = titleField.getText();
,			ok = true;
,			setVisible(false);
,		} else if (e.getSource() == titleField) {
,			title = titleField.getText();
,			setTitle(""Editing "" <MASK> title);
,		} else if (e.getSource() == setInitBtn) {
,			if (x0 == null
,					|| x0.getRowDimension() != fodTools.getFormula().length)
,				x0 = new ColumnMatrix(fodTools.getFormula().length);
,			MatrixDialog sd = new MatrixDialog(x0, ""Initial State"", ""x"");
,			if (sd.isOk()) {
,				x0 = sd.getDataMatrix();
,			}
,		}
,	}
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,f27b8128-bf2a-475c-acf3-b7099379c061,BANGEQ,"PUBLIC,STATIC,void,CheckStability,LPAREN,List,LT,ABObject,GT,objects,COMMA,List,LT,ABObject,GT,hills,RPAREN,LBRACE,StabilityDictionary,EQ,NEW,HashMap,LT,ABObject,COMMA,Boolean,GT,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,objects,DOT,size,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,double,angle,EQ,Math,DOT,toDegrees,LPAREN,objects,DOT,get,LPAREN,i,RPAREN,DOT,angle,RPAREN,SEMI,IF,LPAREN,angle,EQEQ,0,BARBAR,angle,EQEQ,90,BARBAR,angle,EQEQ,180,BARBAR,angle,EQEQ,270,BARBAR,angle,EQEQ,360,RPAREN,LBRACE,IF,LPAREN,ABUtil,DOT,getSupporters,LPAREN,objects,DOT,get,LPAREN,i,RPAREN,COMMA,objects,RPAREN,DOT,size,LPAREN,RPAREN,EQEQ,0,BARBAR,CheckHill,LPAREN,hills,COMMA,objects,DOT,get,LPAREN,i,RPAREN,RPAREN,RPAREN,LBRACE,StabilityDictionary,DOT,put,LPAREN,objects,DOT,get,LPAREN,i,RPAREN,COMMA,true,RPAREN,SEMI,RBRACE,ELSE,LBRACE,StabilityDictionary,DOT,put,LPAREN,objects,DOT,get,LPAREN,i,RPAREN,COMMA,false,RPAREN,SEMI,RBRACE,RBRACE,ELSE,LBRACE,StabilityDictionary,DOT,put,LPAREN,objects,DOT,get,LPAREN,i,RPAREN,COMMA,false,RPAREN,SEMI,RBRACE,RBRACE,int,count,EQ,0,SEMI,WHILE,LPAREN,CheckAllStable,LPAREN,count,RPAREN,RPAREN,LBRACE,int,index,EQ,0,SEMI,FOR,LPAREN,Map,DOT,Entry,LT,ABObject,COMMA,Boolean,GT,_entry,COLON,StabilityDictionary,DOT,entrySet,LPAREN,RPAREN,RPAREN,LBRACE,IF,LPAREN,_entry,DOT,getValue,LPAREN,RPAREN,RPAREN,LBRACE,index,PLUSPLUS,SEMI,RBRACE,RBRACE,count,EQ,index,SEMI,FOR,LPAREN,Map,DOT,Entry,LT,ABObject,LBRACKET,RBRACKET,COMMA,ContactDimension,GT,entry,COLON,CDDictionary,DOT,entrySet,LPAREN,RPAREN,RPAREN,LBRACE,ABObject,LBRACKET,RBRACKET,key,EQ,entry,DOT,getKey,LPAREN,RPAREN,SEMI,ContactDimension,contact,EQ,entry,DOT,getValue,LPAREN,RPAREN,SEMI,IF,LPAREN,contact,EQEQ,ContactDimension,DOT,VERTICAL,AMPAMP,StabilityDictionary,DOT,get,LPAREN,key,LBRACKET,0,RBRACKET,RPAREN,AMPAMP,BANG,StabilityDictionary,DOT,get,LPAREN,key,LBRACKET,1,RBRACKET,RPAREN,RPAREN,LBRACE,ABObject,LBRACKET,RBRACKET,newKey,EQ,LBRACE,key,LBRACKET,1,RBRACKET,COMMA,key,LBRACKET,0,RBRACKET,RBRACE,SEMI,ERA,relation,EQ,GetRADictionary,LPAREN,newKey,RPAREN,LBRACKET,0,RBRACKET,SEMI,IF,LPAREN,StabilityRules,DOT,CheckRule,LPAREN,relation,COMMA,13,RPAREN,RPAREN,LBRACE,StabilityDictionary,DOT,put,LPAREN,key,LBRACKET,1,RBRACKET,COMMA,true,RPAREN,SEMI,RBRACE,RBRACE,FOR,LPAREN,Map,DOT,Entry,LT,ABObject,LBRACKET,RBRACKET,COMMA,ContactDimension,GT,_entry,COLON,CDDictionary,DOT,entrySet,LPAREN,RPAREN,RPAREN,LBRACE,ABObject,LBRACKET,RBRACKET,_key,EQ,_entry,DOT,getKey,LPAREN,RPAREN,SEMI,ContactDimension,_contact,EQ,_entry,DOT,getValue,LPAREN,RPAREN,SEMI,IF,LPAREN,key,<MASK>,_key,RPAREN,LBRACE,IF,LPAREN,key,LBRACKET,1,RBRACKET,EQEQ,_key,LBRACKET,1,RBRACKET,AMPAMP,contact,EQEQ,_contact,AMPAMP,contact,EQEQ,ContactDimension,DOT,VERTICAL,AMPAMP,StabilityDictionary,DOT,get,LPAREN,_key,LBRACKET,0,RBRACKET,RPAREN,AMPAMP,StabilityDictionary,DOT,get,LPAREN,key,LBRACKET,0,RBRACKET,RPAREN,AMPAMP,BANG,StabilityDictionary,DOT,get,LPAREN,_key,LBRACKET,1,RBRACKET,RPAREN,AMPAMP,BANG,StabilityDictionary,DOT,get,LPAREN,key,LBRACKET,1,RBRACKET,RPAREN,RPAREN,LBRACE,ABObject,LBRACKET,RBRACKET,newKey,EQ,LBRACE,key,LBRACKET,1,RBRACKET,COMMA,key,LBRACKET,0,RBRACKET,RBRACE,SEMI,ERA,relation,EQ,GetRADictionary,LPAREN,newKey,RPAREN,LBRACKET,0,RBRACKET,SEMI,ABObject,LBRACKET,RBRACKET,_newKey,EQ,LBRACE,_key,LBRACKET,1,RBRACKET,COMMA,_key,LBRACKET,0,RBRACKET,RBRACE,SEMI,ERA,_relation,EQ,GetRADictionary,LPAREN,_newKey,RPAREN,LBRACKET,0,RBRACKET,SEMI,IF,LPAREN,StabilityRules,DOT,CheckRule,LPAREN,relation,COMMA,121,RPAREN,AMPAMP,StabilityRules,DOT,CheckRule,LPAREN,_relation,COMMA,122,RPAREN,RPAREN,LBRACE,StabilityDictionary,DOT,put,LPAREN,key,LBRACKET,1,RBRACKET,COMMA,true,RPAREN,SEMI,RBRACE,RBRACE,IF,LPAREN,key,LBRACKET,0,RBRACKET,EQEQ,_key,LBRACKET,0,RBRACKET,AMPAMP,contact,EQEQ,_contact,AMPAMP,contact,EQEQ,ContactDimension,DOT,HORIZONTAL,AMPAMP,StabilityDictionary,DOT,get,LPAREN,key,LBRACKET,1,RBRACKET,RPAREN,AMPAMP,StabilityDictionary,DOT,get,LPAREN,_key,LBRACKET,1,RBRACKET,RPAREN,AMPAMP,BANG,StabilityDictionary,DOT,get,LPAREN,key,LBRACKET,0,RBRACKET,RPAREN,AMPAMP,BANG,StabilityDictionary,DOT,get,LPAREN,_key,LBRACKET,0,RBRACKET,RPAREN,RPAREN,LBRACE,ERA,relation,EQ,GetRADictionary,LPAREN,key,RPAREN,LBRACKET,0,RBRACKET,SEMI,ERA,_relation,EQ,GetRADictionary,LPAREN,_key,RPAREN,LBRACKET,0,RBRACKET,SEMI,IF,LPAREN,LPAREN,StabilityRules,DOT,CheckRule,LPAREN,relation,COMMA,141,RPAREN,AMPAMP,StabilityRules,DOT,CheckRule,LPAREN,_relation,COMMA,142,RPAREN,RPAREN,BARBAR,LPAREN,StabilityRules,DOT,CheckRule,LPAREN,relation,COMMA,143,RPAREN,AMPAMP,StabilityRules,DOT,CheckRule,LPAREN,_relation,COMMA,144,RPAREN,RPAREN,RPAREN,LBRACE,StabilityDictionary,DOT,put,LPAREN,key,LBRACKET,0,RBRACKET,COMMA,true,RPAREN,SEMI,RBRACE,RBRACE,IF,LPAREN,key,LBRACKET,1,RBRACKET,EQEQ,_key,LBRACKET,1,RBRACKET,AMPAMP,contact,EQEQ,_contact,AMPAMP,contact,EQEQ,ContactDimension,DOT,VERTICAL,AMPAMP,StabilityDictionary,DOT,get,LPAREN,_key,LBRACKET,0,RBRACKET,RPAREN,AMPAMP,StabilityDictionary,DOT,get,LPAREN,key,LBRACKET,0,RBRACKET,RPAREN,AMPAMP,BANG,StabilityDictionary,DOT,get,LPAREN,_key,LBRACKET,1,RBRACKET,RPAREN,RPAREN,LBRACE,ABObject,LBRACKET,RBRACKET,newKey,EQ,LBRACE,key,LBRACKET,1,RBRACKET,COMMA,key,LBRACKET,0,RBRACKET,RBRACE,SEMI,ERA,relation,EQ,GetRADictionary,LPAREN,newKey,RPAREN,LBRACKET,0,RBRACKET,SEMI,ABObject,LBRACKET,RBRACKET,_newKey,EQ,LBRACE,_key,LBRACKET,1,RBRACKET,COMMA,_key,LBRACKET,0,RBRACKET,RBRACE,SEMI,ERA,_relation,EQ,GetRADictionary,LPAREN,_newKey,RPAREN,LBRACKET,0,RBRACKET,SEMI,IF,LPAREN,StabilityRules,DOT,CheckRule,LPAREN,relation,COMMA,181,RPAREN,AMPAMP,StabilityRules,DOT,CheckRule,LPAREN,_relation,COMMA,182,RPAREN,RPAREN,LBRACE,StabilityDictionary,DOT,put,LPAREN,key,LBRACKET,1,RBRACKET,COMMA,true,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,RBRACE,RBRACE,RBRACE,RBRACE","    public static void CheckStability (List<ABObject> objects, List<ABObject> hills)
,    {
,    	StabilityDictionary = new HashMap<ABObject, Boolean>();
,    	
,    	// Find all object lies on the ground - Rule 1.1
,    	for (int i = 0; i < objects.size(); i++)
,    	{
,    		double angle = Math.toDegrees(objects.get(i).angle);
,    		if (angle == 0 || angle == 90 || angle == 180 || angle == 270 || angle == 360)
,    		{
,    			if (ABUtil.getSupporters(objects.get(i), objects).size() == 0 || CheckHill(hills, objects.get(i)))
,    			{
,    				//System.out.println(""Stand on the ground "" + objects.get(i).id);
,    				StabilityDictionary.put(objects.get(i), true);
,    			}
,    			else
,    			{
,    				StabilityDictionary.put(objects.get(i), false);
,    			}
,    		}
,			else
,			{
,				StabilityDictionary.put(objects.get(i), false);
,			}
,    	}
,    	
,    	int count = 0;
,    	while (CheckAllStable(count))
,    	{
,    		int index = 0;
,    		for (Map.Entry<ABObject, Boolean> _entry : StabilityDictionary.entrySet())
,        	{
,        		if (_entry.getValue())
,        		{
,        			index++;
,        		}
,        	}
,    		count = index;
,    		
,    		// Regular Rectangle
,	    	for (Map.Entry<ABObject[], ContactDimension> entry : CDDictionary.entrySet())
,	    	{
,	    		ABObject[] key = entry.getKey();
,	    		ContactDimension contact = entry.getValue();
,	    		// Rule 1.3
,	    		if (contact == ContactDimension.VERTICAL && StabilityDictionary.get(key[0]) && !StabilityDictionary.get(key[1]))
,	    		{
,	    			ABObject[] newKey = {key[1], key[0]};
,	    			ERA relation = GetRADictionary(newKey)[0];
,	    			if (StabilityRules.CheckRule(relation, 13))
,	    			{
,	    				StabilityDictionary.put(key[1], true);
,	    				//System.out.println(key[1].id + "" is stable by "" + key[0].id);
,	    			}
,	    		}
,	    		
,	    		// Rule 1.2 and 1.4
,	    		for (Map.Entry<ABObject[], ContactDimension> _entry : CDDictionary.entrySet())
,	    		{
,	    			ABObject[] _key = _entry.getKey();
,	    			ContactDimension _contact = _entry.getValue();
,	    			if (key <MASK> _key)
,	    			{
,	    				// Rule 1.2
,	    				if (key[1] == _key[1] && contact == _contact && contact == ContactDimension.VERTICAL && StabilityDictionary.get(_key[0])
,	    						&& StabilityDictionary.get(key[0]) && !StabilityDictionary.get(_key[1])
,	    						&& !StabilityDictionary.get(key[1]))
,	    				{
,	    					ABObject[] newKey = {key[1], key[0]};
,	    	    			ERA relation = GetRADictionary(newKey)[0];
,	    	    			ABObject[] _newKey = {_key[1], _key[0]};
,	    	    			ERA _relation = GetRADictionary(_newKey)[0];
,	    	    			if (StabilityRules.CheckRule(relation, 121) && StabilityRules.CheckRule(_relation, 122))
,	    	    			{
,	    	    				StabilityDictionary.put(key[1], true);
,	    	    				//System.out.println(key[1].id + "" is stable by "" + key[0].id + "","" + _key[0].id);
,	    	    			}
,	    				}
,	    				
,	    				// Rule 1.4
,	    				if (key[0] == _key[0] && contact == _contact && contact == ContactDimension.HORIZONTAL && StabilityDictionary.get(key[1])
,	    						&& StabilityDictionary.get(_key[1]) && !StabilityDictionary.get(key[0])
,	    						&& !StabilityDictionary.get(_key[0]))
,	    				{
,	    					ERA relation = GetRADictionary(key)[0];
,	    					ERA _relation = GetRADictionary(_key)[0];
,	    					if ( (StabilityRules.CheckRule(relation, 141) && StabilityRules.CheckRule(_relation, 142))
,	    						|| (StabilityRules.CheckRule(relation, 143) && StabilityRules.CheckRule(_relation, 144)) )
,	    					{
,	    						StabilityDictionary.put(key[0], true);
,	    						//System.out.println(key[0].id + "" is stable by "" + key[1].id + "","" + _key[1].id);
,	    					}
,	    				}
,	    				
,	    				// Rule 1.8
,	    				if (key[1] == _key[1] && contact == _contact && contact == ContactDimension.VERTICAL && StabilityDictionary.get(_key[0])
,	    						&& StabilityDictionary.get(key[0]) && !StabilityDictionary.get(_key[1]) )
,	    				{
,	    					ABObject[] newKey = {key[1], key[0]};
,	    	    			ERA relation = GetRADictionary(newKey)[0];
,	    	    			ABObject[] _newKey = {_key[1], _key[0]};
,	    	    			ERA _relation = GetRADictionary(_newKey)[0];
,	    	    			if (StabilityRules.CheckRule(relation, 181) && StabilityRules.CheckRule(_relation, 182))
,	    	    			{
,	    	    				StabilityDictionary.put(key[1], true);
,	    	    				//System.out.println(key[1].id + "" is stable by "" + key[0].id + "","" + _key[0].id);
,	    	    			}
,
,	    				}
,	    			}
,	    		}
,	    	}
,    	}
,    	
,    	// Angular Rectangle
,    	
,    }
"
9b07119d-5d87-44cb-94ac-77a9d4fc6019,e3a7f10f-1120-4b2b-8f6b-0871c4885fb3,GT,"PUBLIC,void,delete,LPAREN,boolean,safeDelete,RPAREN,LBRACE,IF,LPAREN,BANG,exists,LPAREN,RPAREN,RPAREN,LBRACE,RETURN,SEMI,RBRACE,IF,LPAREN,safeDelete,RPAREN,LBRACE,String,SQL1,EQ,""UPDATE tuta_reg_actuacions SET iniciatper='"",PLUS,creador,PLUS,""; "",PLUS,user,PLUS,""' WHERE id="",PLUS,id_actuacio,PLUS,"" LIMIT 1"",SEMI,int,nup,EQ,client,DOT,getMysql,LPAREN,RPAREN,DOT,executeUpdate,LPAREN,SQL1,RPAREN,SEMI,SQL1,EQ,""INSERT INTO tuta_reg_actuacions_deleted (SELECT * FROM tuta_reg_actuacions "",PLUS,"" WHERE id="",PLUS,id_actuacio,PLUS,"")"",SEMI,nup,EQ,client,DOT,getMysql,LPAREN,RPAREN,DOT,executeUpdate,LPAREN,SQL1,RPAREN,SEMI,RBRACE,String,SQL1,EQ,""DELETE FROM tuta_reg_actuacions WHERE id="",PLUS,id_actuacio,PLUS,"" LIMIT 1"",SEMI,int,nup,EQ,client,DOT,getMysql,LPAREN,RPAREN,DOT,executeUpdate,LPAREN,SQL1,RPAREN,SEMI,IF,LPAREN,nup,<MASK>,0,RPAREN,LBRACE,id_actuacio,EQ,SUB,1,SEMI,RBRACE,RBRACE","    public void delete(boolean safeDelete) {
,        if (!exists()) {
,            return;
,        }
,
,        if (safeDelete) {
,            //Farem un safe delete que consisteix en moure l'actuacio dins d'una taula ""TRASH""
,            String SQL1 = ""UPDATE tuta_reg_actuacions SET iniciatper='"" + creador + ""; "" + user + ""' WHERE id="" + id_actuacio + "" LIMIT 1"";
,            int nup = client.getMysql().executeUpdate(SQL1);
,
,            SQL1 = ""INSERT INTO tuta_reg_actuacions_deleted (SELECT * FROM tuta_reg_actuacions ""
,                    + "" WHERE id="" + id_actuacio + "")"";
,            nup = client.getMysql().executeUpdate(SQL1);
,        }
,
,        String SQL1 = ""DELETE FROM tuta_reg_actuacions WHERE id="" + id_actuacio + "" LIMIT 1"";
,        int nup = client.getMysql().executeUpdate(SQL1);
,        if (nup <MASK> 0) {
,            id_actuacio = -1;
,        }
,
,    }
"
a0570515-a226-4091-9451-11ea578220ea,9655616e-e7a6-4125-b0f6-68e03e9ce769,GT,"PRIVATE,boolean,bodySentWith,LPAREN,String,request,RPAREN,LBRACE,RETURN,request,DOT,split,LPAREN,""\r\n\r\n"",RPAREN,DOT,length,<MASK>,1,SEMI,RBRACE","    private boolean bodySentWith(String request) {
,        return request.split(""\r\n\r\n"").length <MASK> 1;
,    }
"
a64abb7e-1e48-4f96-a7b5-816a0922e0f3,f3352df5-3532-417e-8985-07adace31b3c,LTEQ,"PUBLIC,double,LBRACKET,RBRACKET,expectedFScores,LPAREN,double,LBRACKET,RBRACKET,p,COMMA,double,beta,RPAREN,LBRACE,double,LBRACKET,RBRACKET,fs,EQ,NEW,double,LBRACKET,p,DOT,length,PLUS,1,RBRACKET,SEMI,FOR,LPAREN,int,n,EQ,0,SEMI,n,<MASK>,p,DOT,length,SEMI,n,PLUSPLUS,RPAREN,fs,LBRACKET,n,RBRACKET,EQ,expectedFScore,LPAREN,p,COMMA,n,COMMA,beta,RPAREN,SEMI,RETURN,fs,SEMI,RBRACE","	public double[] expectedFScores(double[] p, double beta) {
,		double[] fs = new double[p.length + 1];
,		
,		for (int n = 0; n <MASK> p.length; n++)
,			fs[n] = expectedFScore(p, n, beta);
,		
,		return fs;
,	}
"
a64abb7e-1e48-4f96-a7b5-816a0922e0f3,6c7bed72-658d-434e-8187-196faec49ff5,GT,"MONKEYS_AT,Override,PUBLIC,void,runExperiment,LPAREN,RPAREN,THROWS,Exception,LBRACE,FOR,LPAREN,String,dataset,COLON,this,DOT,dataSets,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""Experiment for \"""",PLUS,dataset,PLUS,""\"":"",RPAREN,SEMI,double,maxF,EQ,Double,DOT,MIN_VALUE,SEMI,double,bestVariance,EQ,Double,DOT,NaN,SEMI,FOR,LPAREN,double,variance,COLON,this,DOT,regulariationParameters,RPAREN,LBRACE,MultipleEvaluation,me,EQ,crossValidation,LPAREN,dataset,COMMA,variance,RPAREN,SEMI,double,f,EQ,me,DOT,getMean,LPAREN,InstanceBasedFMeasure,DOT,measureName,RPAREN,SEMI,IF,LPAREN,f,<MASK>,maxF,RPAREN,LBRACE,maxF,EQ,f,SEMI,bestVariance,EQ,variance,SEMI,RBRACE,RBRACE,Evaluation,results,EQ,singleEvaluation,LPAREN,dataset,COMMA,bestVariance,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,this,DOT,resultToString,LPAREN,results,COMMA,this,DOT,trainingTime,COMMA,this,DOT,testingTime,RPAREN,PLUS,""\n"",RPAREN,SEMI,RBRACE,RBRACE","	@Override
,	public void runExperiment() throws Exception {
,		for (String dataset : this.dataSets) {
,			System.out.println(""Experiment for \"""" + dataset + ""\"":"");
,			
,			double maxF = Double.MIN_VALUE;
,			double bestVariance = Double.NaN;
,			
,			for (double variance : this.regulariationParameters) {
,				MultipleEvaluation me = crossValidation(dataset, variance);
,				double f = me.getMean(InstanceBasedFMeasure.measureName);
,				if (f <MASK> maxF) {
,					maxF = f;
,					bestVariance = variance;
,				}
,			}
,			
,			Evaluation results = singleEvaluation(dataset, bestVariance);
,			System.out.println(this.resultToString(results, this.trainingTime, this.testingTime) + ""\n"");
,		}
,	}
"
46b67b7f-680f-46e8-8d0d-ebfce935cfd6,ab936fbb-5e83-4ec6-90fd-57331b9eb50a,SLASH,"PRIVATE,STATIC,double,factorY,LPAREN,double,h,RPAREN,LBRACE,RETURN,h,STAR,height,<MASK>,Math,DOT,abs,LPAREN,ymax,SUB,ymin,RPAREN,SEMI,RBRACE","    private static double factorY(double h) { return h * height <MASK> Math.abs(ymax - ymin);  }
"
8ec044ff-9e5c-46c4-ad39-ccc8ad42dd87,7276595e-df24-4908-b9b8-273660829271,GT,"PUBLIC,void,addTransList,LPAREN,transactionList,transList,RPAREN,LBRACE,DateFormat,dateFormat,EQ,NEW,SimpleDateFormat,LPAREN,""yyyyMMdd"",RPAREN,SEMI,Calendar,cal,EQ,Calendar,DOT,getInstance,LPAREN,RPAREN,SEMI,String,date,EQ,dateFormat,DOT,format,LPAREN,cal,DOT,getTime,LPAREN,RPAREN,RPAREN,SEMI,IF,LPAREN,dates,DOT,indexOf,LPAREN,date,RPAREN,<MASK>,SUB,1,RPAREN,LBRACE,listoftrans,DOT,set,LPAREN,dates,DOT,indexOf,LPAREN,date,RPAREN,COMMA,transList,RPAREN,SEMI,RBRACE,ELSE,LBRACE,dates,DOT,add,LPAREN,date,RPAREN,SEMI,listoftrans,DOT,add,LPAREN,transList,RPAREN,SEMI,RBRACE,loaders,DOT,saveTransactionReport,LPAREN,this,RPAREN,SEMI,RBRACE","		public void addTransList(transactionList transList){
,			DateFormat dateFormat = new SimpleDateFormat(""yyyyMMdd"");
,			Calendar cal = Calendar.getInstance();
,			String date = dateFormat.format(cal.getTime());
,			
,			if(dates.indexOf(date)<MASK>-1)
,			{
,				listoftrans.set(dates.indexOf(date), transList);
,			}else{
,				dates.add(date);
,				listoftrans.add(transList);
,			}
,			
,			loaders.saveTransactionReport(this);
,		}
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,559e4424-b2bf-429e-841f-f7778bc0ac7f,LT,"PUBLIC,double,approximateAngle,LPAREN,RPAREN,LBRACE,double,xDiff,EQ,_start,DOT,x,SUB,_end,DOT,x,SEMI,double,yDiff,EQ,_start,DOT,y,SUB,_end,DOT,y,SEMI,IF,LPAREN,xDiff,EQEQ,0,RPAREN,RETURN,Math,DOT,PI,SLASH,2,SEMI,ELSE,LBRACE,IF,LPAREN,Math,DOT,atan,LPAREN,yDiff,SLASH,xDiff,RPAREN,<MASK>,0,RPAREN,RETURN,Math,DOT,atan,LPAREN,yDiff,SLASH,xDiff,RPAREN,PLUS,Math,DOT,PI,SEMI,ELSE,RETURN,Math,DOT,atan,LPAREN,yDiff,SLASH,xDiff,RPAREN,SEMI,RBRACE,RBRACE","    public double approximateAngle()
,    {        
,        double xDiff = _start.x - _end.x;
,        double yDiff = _start.y - _end.y;
,        
,        if (xDiff == 0)
,            return Math.PI / 2;
,        else
,        {
,            if (Math.atan(yDiff / xDiff) <MASK> 0)
,                return Math.atan(yDiff / xDiff) + Math.PI;
,            else
,                return Math.atan(yDiff / xDiff);
,        }
,    }
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,418c293a-d7fe-417a-bb5c-e46b8556d7a2,LT,"PRIVATE,void,processNewSwitchVector,LPAREN,Element,xml,RPAREN,LBRACE,INDIProperty,prop,EQ,processNewXXXVector,LPAREN,xml,RPAREN,SEMI,IF,LPAREN,prop,EQEQ,null,RPAREN,LBRACE,RETURN,SEMI,RBRACE,IF,LPAREN,BANG,LPAREN,prop,INSTANCEOF,INDISwitchProperty,RPAREN,RPAREN,LBRACE,RETURN,SEMI,RBRACE,INDIElementAndValue,LBRACKET,RBRACKET,evs,EQ,processINDIElements,LPAREN,prop,COMMA,xml,RPAREN,SEMI,Date,timestamp,EQ,INDIDateFormat,DOT,parseTimestamp,LPAREN,xml,DOT,getAttribute,LPAREN,""timestamp"",RPAREN,RPAREN,SEMI,INDISwitchElementAndValue,LBRACKET,RBRACKET,newEvs,EQ,NEW,INDISwitchElementAndValue,LBRACKET,evs,DOT,length,RBRACKET,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,newEvs,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,newEvs,LBRACKET,i,RBRACKET,EQ,LPAREN,INDISwitchElementAndValue,RPAREN,evs,LBRACKET,i,RBRACKET,SEMI,RBRACE,IF,LPAREN,LPAREN,this,INSTANCEOF,INDIConnectionHandler,RPAREN,AMPAMP,LPAREN,prop,EQEQ,connectionP,RPAREN,RPAREN,LBRACE,handleConnectionProperty,LPAREN,newEvs,COMMA,timestamp,RPAREN,SEMI,RBRACE,ELSE,LBRACE,processNewSwitchValue,LPAREN,LPAREN,INDISwitchProperty,RPAREN,prop,COMMA,timestamp,COMMA,newEvs,RPAREN,SEMI,RBRACE,RBRACE","  private void processNewSwitchVector(Element xml) {
,    INDIProperty prop = processNewXXXVector(xml);
,
,    if (prop == null) {
,      return;
,    }
,
,    if (!(prop instanceof INDISwitchProperty)) {
,      return;
,    }
,
,    INDIElementAndValue[] evs = processINDIElements(prop, xml);
,
,    Date timestamp = INDIDateFormat.parseTimestamp(xml.getAttribute(""timestamp""));
,
,    INDISwitchElementAndValue[] newEvs = new INDISwitchElementAndValue[evs.length];
,
,    for (int i = 0 ; i <MASK> newEvs.length ; i++) {
,      newEvs[i] = (INDISwitchElementAndValue)evs[i];
,    }
,
,    if ((this instanceof INDIConnectionHandler) && (prop == connectionP)) { // If it is the CONNECTION property
,      handleConnectionProperty(newEvs, timestamp);
,    } else {  // if it is any other property
,      processNewSwitchValue((INDISwitchProperty)prop, timestamp, newEvs);
,    }
,  }
"
113c5414-6c55-466b-b879-a350ab6e0ca2,2e9daa37-7b62-4a21-8d58-aa74e0aa8a8a,EQ,"PUBLIC,void,setBaseDamage,LPAREN,int,baseDamage,RPAREN,LBRACE,this,DOT,baseDamage,<MASK>,baseDamage,SEMI,RBRACE","	public void setBaseDamage(int baseDamage) {
,		this.baseDamage <MASK> baseDamage;
,	}
"
b5ee7e5e-a7bf-41d4-8880-3ac95d2f8822,5400337e-84e6-403b-810c-a05de1daca55,BANGEQ,"PRIVATE,void,go,LPAREN,String,inputFile,RPAREN,LBRACE,double,minx,EQ,Double,DOT,POSITIVE_INFINITY,COMMA,maxx,EQ,Double,DOT,NEGATIVE_INFINITY,COMMA,miny,EQ,Double,DOT,POSITIVE_INFINITY,COMMA,maxy,EQ,Double,DOT,NEGATIVE_INFINITY,SEMI,int,rowct,EQ,0,COMMA,colct,EQ,0,SEMI,double,rowspace,EQ,0,COMMA,colspace,EQ,0,SEMI,boolean,firstcorner,EQ,true,SEMI,boolean,firstrow,EQ,true,SEMI,boolean,firstdelta,EQ,true,SEMI,double,eps,EQ,1E-8,SEMI,TRY,LBRACE,File,f,EQ,NEW,File,LPAREN,inputFile,RPAREN,SEMI,FileReader,fr,EQ,NEW,FileReader,LPAREN,f,RPAREN,SEMI,BufferedReader,br,EQ,NEW,BufferedReader,LPAREN,fr,RPAREN,SEMI,String,ln,EQ,br,DOT,readLine,LPAREN,RPAREN,SEMI,ln,EQ,br,DOT,readLine,LPAREN,RPAREN,SEMI,double,prevX,EQ,Double,DOT,NaN,SEMI,double,prevY,EQ,Double,DOT,NaN,SEMI,int,ct,EQ,0,SEMI,WHILE,LPAREN,ln,<MASK>,null,RPAREN,LBRACE,StringTokenizer,stk,EQ,NEW,StringTokenizer,LPAREN,ln,RPAREN,SEMI,double,x,EQ,Double,DOT,parseDouble,LPAREN,stk,DOT,nextToken,LPAREN,RPAREN,RPAREN,SEMI,IF,LPAREN,x,LT,minx,RPAREN,LBRACE,minx,EQ,x,SEMI,RBRACE,IF,LPAREN,x,GT,maxx,RPAREN,LBRACE,maxx,EQ,x,SEMI,RBRACE,double,y,EQ,Double,DOT,parseDouble,LPAREN,stk,DOT,nextToken,LPAREN,RPAREN,RPAREN,SEMI,IF,LPAREN,y,LT,miny,RPAREN,LBRACE,miny,EQ,y,SEMI,RBRACE,IF,LPAREN,y,GT,maxy,RPAREN,LBRACE,maxy,EQ,y,SEMI,RBRACE,IF,LPAREN,firstcorner,RPAREN,LBRACE,prevX,EQ,x,SEMI,prevY,EQ,y,SEMI,firstcorner,EQ,false,SEMI,ln,EQ,br,DOT,readLine,LPAREN,RPAREN,SEMI,ct,PLUSPLUS,SEMI,CONTINUE,SEMI,RBRACE,IF,LPAREN,firstdelta,RPAREN,LBRACE,double,dx,EQ,Math,DOT,abs,LPAREN,x,SUB,prevX,RPAREN,SEMI,IF,LPAREN,dx,LT,eps,RPAREN,LBRACE,br,DOT,close,LPAREN,RPAREN,SEMI,THROW,NEW,IllegalArgumentException,LPAREN,""Cell width cannot be 0"",RPAREN,SEMI,RBRACE,colspace,EQ,dx,SEMI,prevX,EQ,x,SEMI,prevY,EQ,y,SEMI,firstdelta,EQ,false,SEMI,ln,EQ,br,DOT,readLine,LPAREN,RPAREN,SEMI,ct,PLUSPLUS,SEMI,CONTINUE,SEMI,RBRACE,IF,LPAREN,firstrow,RPAREN,LBRACE,double,dx,EQ,Math,DOT,abs,LPAREN,x,SUB,prevX,RPAREN,SEMI,IF,LPAREN,dx,SUB,colspace,GT,eps,RPAREN,LBRACE,br,DOT,close,LPAREN,RPAREN,SEMI,THROW,NEW,IllegalArgumentException,LPAREN,""Column spacing is not consistent."",RPAREN,SEMI,RBRACE,double,dy,EQ,Math,DOT,abs,LPAREN,y,SUB,prevY,RPAREN,SEMI,IF,LPAREN,dy,LT,eps,RPAREN,LBRACE,ct,PLUSPLUS,SEMI,prevX,EQ,x,SEMI,prevY,EQ,y,SEMI,ln,EQ,br,DOT,readLine,LPAREN,RPAREN,SEMI,CONTINUE,SEMI,RBRACE,colct,EQ,ct,SEMI,ct,EQ,0,SEMI,prevX,EQ,x,SEMI,prevY,EQ,y,SEMI,firstrow,EQ,false,SEMI,ln,EQ,br,DOT,readLine,LPAREN,RPAREN,SEMI,CONTINUE,SEMI,RBRACE,double,dx,EQ,Math,DOT,abs,LPAREN,x,SUB,prevX,RPAREN,SEMI,IF,LPAREN,dx,SUB,colspace,GT,eps,RPAREN,LBRACE,br,DOT,close,LPAREN,RPAREN,SEMI,THROW,NEW,IllegalArgumentException,LPAREN,""Column spacing is not consistent."",RPAREN,SEMI,RBRACE,ln,EQ,br,DOT,readLine,LPAREN,RPAREN,SEMI,RBRACE,System,DOT,out,DOT,println,LPAREN,""#rows: "",PLUS,rowct,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""#cols: "",PLUS,colct,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""rowspace: "",PLUS,rowspace,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""colspace: "",PLUS,colspace,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""minx "",PLUS,minx,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""maxx "",PLUS,maxx,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""miny "",PLUS,miny,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""maxy "",PLUS,maxy,RPAREN,SEMI,br,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,FileNotFoundException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,IOException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,RBRACE","	private void go(String inputFile){
,		
,		double minx = Double.POSITIVE_INFINITY,maxx = Double.NEGATIVE_INFINITY,miny = Double.POSITIVE_INFINITY,maxy = Double.NEGATIVE_INFINITY;
,		int rowct = 0, colct = 0;
,		double rowspace = 0, colspace = 0;
,		boolean firstcorner = true;
,		boolean firstrow = true;
,		boolean firstdelta = true;
,		double eps = 1E-8;
,		
,		try {
,			File f = new File(inputFile);
,			FileReader fr = new FileReader(f);
,			BufferedReader br = new BufferedReader(fr);
,			
,			String ln = br.readLine();
,			ln = br.readLine();
,			
,			
,			double prevX = Double.NaN;
,			double prevY = Double.NaN;
,			
,			int ct = 0;
,			
,			while(ln<MASK> null){
,				StringTokenizer stk = new StringTokenizer(ln);
,				double x = Double.parseDouble(stk.nextToken());
,				
,				if(x<minx){minx = x;}
,				if(x>maxx){maxx = x;}
,				
,				double y = Double.parseDouble(stk.nextToken());
,				
,				if(y<miny){miny = y;}
,				if(y>maxy){maxy = y;}
,				
,				if(firstcorner){
,					prevX = x;
,					prevY = y;
,					firstcorner = false;
,					ln = br.readLine();
,					ct++;
,					continue;
,				}
,				
,				if(firstdelta){
,					double dx = Math.abs(x-prevX);
,					if(dx<eps){
,						br.close();
,						throw new IllegalArgumentException(""Cell width cannot be 0"");
,					}
,					colspace = dx;			
,					prevX = x;
,					prevY = y;
,					firstdelta = false;
,					ln = br.readLine();
,					ct++;
,					continue;
,				}
,				
,				if(firstrow){
,					
,					double dx = Math.abs(x-prevX);
,					if(dx-colspace>eps){
,						br.close();
,						throw new IllegalArgumentException(""Column spacing is not consistent."");
,					}
,					
,					double dy = Math.abs(y-prevY);
,					if(dy < eps){
,						
,						ct++;
,						prevX = x;
,						prevY = y;
,						ln = br.readLine();
,						continue;
,					}
,					
,					// else it's a new row, so save the number of columns we've traversed.
,					
,					colct = ct;
,					ct = 0;
,					prevX = x;
,					prevY = y;
,					firstrow = false;
,					ln = br.readLine();
,					continue;
,				}
,				
,				double dx = Math.abs(x-prevX);
,				if(dx-colspace>eps){
,					br.close();
,					throw new IllegalArgumentException(""Column spacing is not consistent."");
,				}
,				
,				
,				
,				ln = br.readLine();
,			}
,			
,			System.out.println(""#rows: "" + rowct);
,			System.out.println(""#cols: "" + colct);
,			System.out.println(""rowspace: "" + rowspace);
,			System.out.println(""colspace: "" + colspace);
,			System.out.println(""minx "" + minx);
,			System.out.println(""maxx "" + maxx);
,			System.out.println(""miny "" + miny);
,			System.out.println(""maxy "" + maxy);
,			
,			br.close();
,			
,		} catch (FileNotFoundException e) {
,			e.printStackTrace();
,		} catch (IOException e) {
,			e.printStackTrace();
,		}	
,		
,	}
"
31865c5a-965e-4d07-af21-44a51a00ba58,74eb396c-e8ee-4862-a067-6921941fd47f,GT,"String,getTextValue,LPAREN,Element,ele,COMMA,String,tagName,RPAREN,LBRACE,String,textVal,EQ,null,SEMI,NodeList,nl,EQ,ele,DOT,getElementsByTagName,LPAREN,tagName,RPAREN,SEMI,IF,LPAREN,nl,BANGEQ,null,AMPAMP,nl,DOT,getLength,LPAREN,RPAREN,<MASK>,0,RPAREN,LBRACE,Element,el,EQ,LPAREN,Element,RPAREN,nl,DOT,item,LPAREN,0,RPAREN,SEMI,textVal,EQ,el,DOT,getFirstChild,LPAREN,RPAREN,DOT,getNodeValue,LPAREN,RPAREN,SEMI,RBRACE,RETURN,textVal,DOT,replaceAll,LPAREN,""\\s\\s+|\\n|\\r|\\t"",COMMA,"""",RPAREN,SEMI,RBRACE","	String getTextValue(Element ele, String tagName) {
,	
,		String textVal = null;
,	
,		NodeList nl = ele.getElementsByTagName(tagName);
,	
,		if (nl != null && nl.getLength() <MASK> 0) {
,	
,			Element el = (Element) nl.item(0);
,			textVal = el.getFirstChild().getNodeValue();
,		}
,	
,		return textVal.replaceAll(""\\s\\s+|\\n|\\r|\\t"", """");
,	}
"
ad0a2aad-9ad8-443c-832f-88b9f64460ed,3e4d4152-8b50-47f3-93e6-b9aecefa813b,EQ,"PUBLIC,FeederSolenoid,LPAREN,RPAREN,LBRACE,solenoid,<MASK>,NEW,DoubleSolenoid,LPAREN,RobotMap,DOT,feederSolenoidPorts,LBRACKET,0,RBRACKET,COMMA,RobotMap,DOT,feederSolenoidPorts,LBRACKET,1,RBRACKET,RPAREN,SEMI,solenoid,DOT,set,LPAREN,DoubleSolenoid,DOT,Value,DOT,kReverse,RPAREN,SEMI,RBRACE","    public FeederSolenoid() {
,        solenoid <MASK> new DoubleSolenoid(RobotMap.feederSolenoidPorts[0], RobotMap.feederSolenoidPorts[1]);
,        solenoid.set(DoubleSolenoid.Value.kReverse);
,    }
"
57cc1a58-8f23-49b4-bcf8-6b2866c3102b,7045cd52-e9d2-4de6-8ade-0f18dd1d03dd,GT,"PROTECTED,void,startPlayback,LPAREN,RPAREN,THROWS,BasicPlayerException,LBRACE,IF,LPAREN,m_status,EQEQ,STOPPED,RPAREN,initAudioInputStream,LPAREN,RPAREN,SEMI,IF,LPAREN,m_status,EQEQ,OPENED,RPAREN,LBRACE,IF,LPAREN,BANG,LPAREN,m_thread,EQEQ,null,BARBAR,BANG,m_thread,DOT,isAlive,LPAREN,RPAREN,RPAREN,RPAREN,LBRACE,int,cnt,EQ,0,SEMI,WHILE,LPAREN,m_status,BANGEQ,OPENED,RPAREN,LBRACE,TRY,LBRACE,IF,LPAREN,m_thread,BANGEQ,null,RPAREN,LBRACE,cnt,PLUSPLUS,SEMI,Thread,DOT,sleep,LPAREN,1000,RPAREN,SEMI,IF,LPAREN,cnt,<MASK>,2,RPAREN,LBRACE,m_thread,DOT,interrupt,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,CATCH,LPAREN,InterruptedException,e,RPAREN,LBRACE,THROW,NEW,BasicPlayerException,LPAREN,BasicPlayerException,DOT,WAITERROR,COMMA,e,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,TRY,LBRACE,initLine,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,LineUnavailableException,e,RPAREN,LBRACE,THROW,NEW,BasicPlayerException,LPAREN,BasicPlayerException,DOT,CANNOTINITLINE,COMMA,e,RPAREN,SEMI,RBRACE,m_thread,EQ,NEW,Thread,LPAREN,this,COMMA,""BasicPlayer"",RPAREN,SEMI,m_thread,DOT,start,LPAREN,RPAREN,SEMI,IF,LPAREN,m_line,BANGEQ,null,RPAREN,LBRACE,m_line,DOT,start,LPAREN,RPAREN,SEMI,m_status,EQ,PLAYING,SEMI,notifyEvent,LPAREN,BasicPlayerEvent,DOT,PLAYING,COMMA,getEncodedStreamPosition,LPAREN,RPAREN,COMMA,SUB,1,COMMA,null,RPAREN,SEMI,RBRACE,RBRACE,RBRACE","    protected void startPlayback() throws BasicPlayerException
,    {
,        if (m_status == STOPPED) initAudioInputStream();
,        if (m_status == OPENED)
,        {
,            //====================================================================
,            // This change is to eliminate logging in July 2008 for 
,            // the CASAA Treatment Coding System Utility.
,            //log.info(""startPlayback called"");
,            if (!(m_thread == null || !m_thread.isAlive()))
,            {
,                //====================================================================
,                // This change is to eliminate logging in July 2008 for 
,                // the CASAA Treatment Coding System Utility.
,                //log.info(""WARNING: old thread still running!!"");
,                int cnt = 0;
,                while (m_status != OPENED)
,                {
,                    try
,                    {
,                        if (m_thread != null)
,                        {
,                            //====================================================================
,                            // This change is to eliminate logging in July 2008 for 
,                            // the CASAA Treatment Coding System Utility.
,                            //log.info(""Waiting ... "" + cnt);
,                            cnt++;
,                            Thread.sleep(1000);
,                            if (cnt <MASK> 2)
,                            {
,                                m_thread.interrupt();
,                            }
,                        }
,                    }
,                    catch (InterruptedException e)
,                    {
,                        throw new BasicPlayerException(BasicPlayerException.WAITERROR, e);
,                    }
,                }
,            }
,            // Open SourceDataLine.
,            try
,            {
,                initLine();
,            }
,            catch (LineUnavailableException e)
,            {
,                throw new BasicPlayerException(BasicPlayerException.CANNOTINITLINE, e);
,            }
,            //====================================================================
,            // This change is to eliminate logging in July 2008 for 
,            // the CASAA Treatment Coding System Utility.
,            //log.info(""Creating new thread"");
,            m_thread = new Thread(this, ""BasicPlayer"");
,            m_thread.start();
,            if (m_line != null)
,            {
,                m_line.start();
,                m_status = PLAYING;
,                notifyEvent(BasicPlayerEvent.PLAYING, getEncodedStreamPosition(), -1, null);
,            }
,        }
,    }
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,015d8f14-19c0-49b6-ba4b-8ed462ce62c0,LT,"MONKEYS_AT,Override,PUBLIC,void,processNewTextValue,LPAREN,INDITextProperty,property,COMMA,Date,timestamp,COMMA,INDITextElementAndValue,LBRACKET,RBRACKET,elementsAndValues,RPAREN,LBRACE,IF,LPAREN,property,EQEQ,filterNamesP,RPAREN,LBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,elementsAndValues,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,INDITextElement,el,EQ,elementsAndValues,LBRACKET,i,RBRACKET,DOT,getElement,LPAREN,RPAREN,SEMI,String,val,EQ,elementsAndValues,LBRACKET,i,RBRACKET,DOT,getValue,LPAREN,RPAREN,SEMI,el,DOT,setValue,LPAREN,val,RPAREN,SEMI,RBRACE,filterNamesP,DOT,setState,LPAREN,Constants,DOT,PropertyStates,DOT,OK,RPAREN,SEMI,TRY,LBRACE,updateProperty,LPAREN,filterNamesP,RPAREN,SEMI,RBRACE,CATCH,LPAREN,INDIException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,RBRACE","  @Override
,  public void processNewTextValue(INDITextProperty property, Date timestamp, INDITextElementAndValue[] elementsAndValues) {
,    if (property == filterNamesP) {
,      for (int i = 0 ; i <MASK> elementsAndValues.length ; i++) {
,        INDITextElement el = elementsAndValues[i].getElement();
,        String val = elementsAndValues[i].getValue();
,        el.setValue(val);
,      }
,
,      filterNamesP.setState(Constants.PropertyStates.OK);
,
,      try {
,        updateProperty(filterNamesP);
,      } catch (INDIException e) {
,        e.printStackTrace();
,      }
,    }
,  }
"
13ade84f-7d2c-4f3f-a13f-aa7abf8a58a5,b936f882-be6c-4ddc-a981-8007dc22941f,SUB,"PUBLIC,STATIC,TreeNode,buildFromString,LPAREN,String,str,RPAREN,LBRACE,String,LBRACKET,RBRACKET,parts,EQ,str,DOT,substring,LPAREN,1,COMMA,str,DOT,length,LPAREN,RPAREN,<MASK>,1,RPAREN,DOT,split,LPAREN,"","",RPAREN,SEMI,TreeNode,root,EQ,null,SEMI,LinkedList,LT,TreeNode,GT,unCompletedNode,EQ,NEW,LinkedList,LT,GT,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,parts,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,i,EQEQ,0,AMPAMP,BANG,parts,LBRACKET,i,RBRACKET,DOT,equals,LPAREN,nullTree,RPAREN,RPAREN,LBRACE,root,EQ,NEW,TreeNode,LPAREN,Integer,DOT,parseInt,LPAREN,parts,LBRACKET,i,RBRACKET,RPAREN,RPAREN,SEMI,unCompletedNode,DOT,add,LPAREN,root,RPAREN,SEMI,RBRACE,ELSE,LBRACE,TreeNode,iter,EQ,unCompletedNode,DOT,pop,LPAREN,RPAREN,SEMI,IF,LPAREN,BANG,parts,LBRACKET,i,RBRACKET,DOT,equals,LPAREN,nullTree,RPAREN,RPAREN,LBRACE,iter,DOT,left,EQ,NEW,TreeNode,LPAREN,Integer,DOT,parseInt,LPAREN,parts,LBRACKET,i,RBRACKET,RPAREN,RPAREN,SEMI,unCompletedNode,DOT,add,LPAREN,iter,DOT,left,RPAREN,SEMI,RBRACE,i,PLUSPLUS,SEMI,IF,LPAREN,i,LT,parts,DOT,length,AMPAMP,BANG,parts,LBRACKET,i,RBRACKET,DOT,equals,LPAREN,nullTree,RPAREN,RPAREN,LBRACE,iter,DOT,right,EQ,NEW,TreeNode,LPAREN,Integer,DOT,parseInt,LPAREN,parts,LBRACKET,i,RBRACKET,RPAREN,RPAREN,SEMI,unCompletedNode,DOT,add,LPAREN,iter,DOT,right,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,RETURN,root,SEMI,RBRACE","	public static TreeNode buildFromString(String str) {
,		String[] parts = str.substring(1, str.length() <MASK> 1).split("","");
,		TreeNode root = null;
,		LinkedList<TreeNode> unCompletedNode = new LinkedList<>();
,		for (int i = 0; i < parts.length; i++) {
,			if (i == 0 && !parts[i].equals(nullTree)) {
,				root = new TreeNode(Integer.parseInt(parts[i]));
,				unCompletedNode.add(root);
,			} else {
,				TreeNode iter = unCompletedNode.pop();
,				if (!parts[i].equals(nullTree)) {
,					iter.left = new TreeNode(Integer.parseInt(parts[i]));
,					unCompletedNode.add(iter.left);
,				}
,				i++;
,				if (i < parts.length && !parts[i].equals(nullTree)) {
,					iter.right = new TreeNode(Integer.parseInt(parts[i]));
,					unCompletedNode.add(iter.right);
,				}
,
,			}
,		}
,		return root;
,	}
"
5735492c-ae75-4373-9d1e-6986d063d859,a88afbdb-a661-4540-afe0-e3c162d070e9,BANGEQ,"PUBLIC,void,ioer,LPAREN,RPAREN,LBRACE,String,con,SEMI,FileReader,fr,EQ,null,SEMI,BufferedReader,br,EQ,null,SEMI,FileWriter,fw,EQ,null,SEMI,BufferedWriter,bw,EQ,null,SEMI,TRY,LBRACE,fr,EQ,NEW,FileReader,LPAREN,inFilePath,RPAREN,SEMI,br,EQ,NEW,BufferedReader,LPAREN,fr,RPAREN,SEMI,fw,EQ,NEW,FileWriter,LPAREN,outFilePath,RPAREN,SEMI,bw,EQ,NEW,BufferedWriter,LPAREN,fw,RPAREN,SEMI,WHILE,LPAREN,null,<MASK>,LPAREN,con,EQ,br,DOT,readLine,LPAREN,RPAREN,RPAREN,RPAREN,LBRACE,content,DOT,append,LPAREN,con,RPAREN,SEMI,bw,DOT,write,LPAREN,con,RPAREN,SEMI,RBRACE,System,DOT,out,DOT,println,LPAREN,content,RPAREN,SEMI,RBRACE,CATCH,LPAREN,FileNotFoundException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,IOException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,FINALLY,LBRACE,TRY,LBRACE,bw,DOT,flush,LPAREN,RPAREN,SEMI,bw,DOT,close,LPAREN,RPAREN,SEMI,br,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,IOException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,RBRACE","	public void ioer() {
,		String con;
,
,		FileReader fr = null;
,		BufferedReader br = null;
,
,		FileWriter fw = null;
,		BufferedWriter bw = null;
,
,		try {
,			// 读
,			fr = new FileReader(inFilePath);
,			br = new BufferedReader(fr);
,
,			// 写
,			fw = new FileWriter(outFilePath);
,			bw = new BufferedWriter(fw);
,
,			// readLine() 逐行读取，一次读一行
,			while (null <MASK> (con = br.readLine())) {
,				content.append(con);
,				bw.write(con);
,			}
,
,			System.out.println(content);
,		} catch (FileNotFoundException e) {
,			e.printStackTrace();
,		} catch (IOException e) {
,			e.printStackTrace();
,		} finally {
,			try {
,				// 关闭流,先关输出在关输入
,				bw.flush();
,				bw.close();
,				// fw.flush();
,				// fw.close();
,				br.close();
,				// fr.close();
,			} catch (IOException e) {
,				e.printStackTrace();
,			}
,		}
,
,	}
"
c694737b-29b6-48d5-90c3-b6e0b6d64d88,7672affa-9a8b-4f38-8341-d0bf5e5822bc,PERCENT,"int,getOffset,LPAREN,int,row,RPAREN,LBRACE,RETURN,LPAREN,row,PLUS,getCenterRow,LPAREN,RPAREN,PLUS,1,RPAREN,<MASK>,2,SEMI,RBRACE","    int getOffset(int row) {
,        return (row + getCenterRow() + 1) <MASK> 2;
,    }
"
e67bf04b-409e-4859-9f63-b5fd4dc2596d,e529eb80-a467-43e4-8531-f01d803ca7db,PERCENT,"PUBLIC,STATIC,int,exposant,LPAREN,int,i,RPAREN,LBRACE,IF,LPAREN,i,EQEQ,0,RPAREN,LBRACE,RETURN,1,SEMI,RBRACE,ELSE,LBRACE,int,j,EQ,exposant,LPAREN,i,SLASH,2,RPAREN,SEMI,IF,LPAREN,i,<MASK>,2,EQEQ,0,RPAREN,LBRACE,RETURN,j,STAR,j,SEMI,RBRACE,ELSE,LBRACE,RETURN,2,STAR,j,STAR,j,SEMI,RBRACE,RBRACE,RBRACE","	public static int exposant(int i){
,		if (i == 0){
,			return 1;
,		} else {
,			int j = exposant(i/2);
,			if (i<MASK>2 == 0){
,				return j*j;
,			}
,			else {
,				return 2*j*j;
,			}
,		}
,	}
"
9c253d2b-e626-4f21-a850-dfb022369350,85afb2f4-c429-499a-abb0-8b3fa2796715,LTEQ,"PUBLIC,boolean,equals,LPAREN,Complex,z,COMMA,double,tolerance,RPAREN,LBRACE,RETURN,abs,LPAREN,re,SUB,z,DOT,re,COMMA,im,SUB,z,DOT,im,RPAREN,<MASK>,Math,DOT,abs,LPAREN,tolerance,RPAREN,SEMI,RBRACE","    public boolean    equals (Complex z, double tolerance) {
,        return  abs(re - z.re, im - z.im) <MASK> Math.abs(tolerance);
,    }
"
a4c68a60-241d-4ccc-bb34-58eb273247fe,4c4f1fff-4367-495d-bd22-58b84ab26aea,PLUS,"MONKEYS_AT,Override,PUBLIC,int,hashCode,LPAREN,RPAREN,LBRACE,int,result,EQ,vcsErrors,DOT,hashCode,LPAREN,RPAREN,SEMI,result,EQ,31,STAR,result,<MASK>,exceptions,DOT,hashCode,LPAREN,RPAREN,SEMI,RETURN,result,SEMI,RBRACE","		@Override public int hashCode() {
,			int result = vcsErrors.hashCode();
,			result = 31 * result <MASK> exceptions.hashCode();
,			return result;
,		}
"
7b10f06b-338c-44c3-8e01-b40eb98395b8,107abfc9-1c8c-45a0-8432-92898721b8c8,EQEQ,"MONKEYS_AT,Override,PUBLIC,void,solve,LPAREN,FINAL,SolutionKnitter,solutionSet,RPAREN,LBRACE,IF,LPAREN,head,DOT,isUnit,LPAREN,RPAREN,RPAREN,LBRACE,solutionSet,DOT,complete,LPAREN,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,solutionSet,DOT,shouldContinue,LPAREN,RPAREN,RPAREN,LBRACE,FINAL,ColumnNode,columnNode,EQ,selectColumn,LPAREN,RPAREN,SEMI,IF,LPAREN,columnNode,DOT,size,<MASK>,0,RPAREN,LBRACE,RETURN,SEMI,RBRACE,solutionSet,DOT,addCol,LPAREN,columnNode,DOT,column,RPAREN,SEMI,cover,LPAREN,columnNode,RPAREN,SEMI,FOR,LPAREN,Node,rowNode,EQ,columnNode,DOT,base,DOT,top,SEMI,rowNode,BANGEQ,columnNode,DOT,base,SEMI,rowNode,EQ,rowNode,DOT,top,RPAREN,LBRACE,solutionSet,DOT,addRow,LPAREN,rowNode,DOT,row,RPAREN,SEMI,FOR,LPAREN,Node,node,EQ,rowNode,DOT,right,SEMI,node,BANGEQ,rowNode,SEMI,node,EQ,node,DOT,right,RPAREN,LBRACE,cover,LPAREN,node,DOT,column,RPAREN,SEMI,RBRACE,solve,LPAREN,solutionSet,RPAREN,SEMI,FOR,LPAREN,Node,node,EQ,rowNode,DOT,left,SEMI,node,BANGEQ,rowNode,SEMI,node,EQ,node,DOT,left,RPAREN,LBRACE,uncover,LPAREN,node,DOT,column,RPAREN,SEMI,RBRACE,solutionSet,DOT,popRow,LPAREN,RPAREN,SEMI,RBRACE,uncover,LPAREN,columnNode,RPAREN,SEMI,solutionSet,DOT,popCol,LPAREN,RPAREN,SEMI,RBRACE,RBRACE","	@Override
,	public void solve(final SolutionKnitter solutionSet) {
,		if (head.isUnit()) {
,			solutionSet.complete();
,		} else if (solutionSet.shouldContinue()) {
,			final ColumnNode columnNode = selectColumn();
,			if (columnNode.size <MASK> 0) {
,				return;
,			}
,			solutionSet.addCol(columnNode.column);
,			cover(columnNode);
,			for (Node rowNode = columnNode.base.top; rowNode != columnNode.base; rowNode = rowNode.top) {
,				solutionSet.addRow(rowNode.row);
,				for (Node node = rowNode.right; node != rowNode; node = node.right) {
,					cover(node.column);
,				}
,
,				solve(solutionSet);
,
,				for (Node node = rowNode.left; node != rowNode; node = node.left) {
,					uncover(node.column);
,				}
,				solutionSet.popRow();
,			}
,			uncover(columnNode);
,			solutionSet.popCol();
,		}
,	}
"
7a6d4ee7-a11c-445d-8f58-7963e611bee0,80d29134-53c6-4587-8364-4d544bc826f5,BANGEQ,"PUBLIC,STATIC,String,LBRACKET,RBRACKET,readResource,LPAREN,String,resource,RPAREN,LBRACE,List,LT,String,GT,list,EQ,NEW,ArrayList,LT,String,GT,LPAREN,RPAREN,SEMI,TRY,LBRACE,BufferedReader,br,EQ,NEW,BufferedReader,LPAREN,NEW,InputStreamReader,LPAREN,FileManager,DOT,CLASS,DOT,getResourceAsStream,LPAREN,resource,RPAREN,RPAREN,RPAREN,SEMI,FOR,LPAREN,String,line,SEMI,LPAREN,line,EQ,br,DOT,readLine,LPAREN,RPAREN,RPAREN,<MASK>,null,SEMI,RPAREN,LBRACE,list,DOT,add,LPAREN,line,RPAREN,SEMI,RBRACE,RBRACE,CATCH,LPAREN,FileNotFoundException,e,RPAREN,LBRACE,RBRACE,CATCH,LPAREN,IOException,e,RPAREN,LBRACE,RBRACE,RETURN,list,DOT,toArray,LPAREN,NEW,String,LBRACKET,list,DOT,size,LPAREN,RPAREN,RBRACKET,RPAREN,SEMI,RBRACE","	public static String[] readResource(String resource)
,	{
,		List<String> list = new ArrayList<String>();
,		try
,		{
,			BufferedReader br = new BufferedReader(new InputStreamReader(FileManager.class.getResourceAsStream(resource)));
,		    for(String line; (line = br.readLine()) <MASK> null; ) 
,		    {
,		        list.add(line);
,		    }
,		} 
,		catch (FileNotFoundException e) {}
,		catch (IOException e) {}
,		
,		return list.toArray(new String[list.size()]);
,	}
"
f29c7bcc-9c8d-4d8e-b365-55dc60e2d53e,c2a5c236-489a-4789-b9de-b7eaaa194b7d,GTEQ,"PROTECTED,void,add_rhs_part,LPAREN,production_part,part,RPAREN,THROWS,java,DOT,lang,DOT,Exception,LBRACE,IF,LPAREN,rhs_pos,<MASK>,MAX_RHS,RPAREN,THROW,NEW,Exception,LPAREN,""Internal Error: Productions limited to "",PLUS,MAX_RHS,PLUS,"" symbols and actions"",RPAREN,SEMI,rhs_parts,LBRACKET,rhs_pos,RBRACKET,EQ,part,SEMI,rhs_pos,PLUSPLUS,SEMI,RBRACE","  protected void add_rhs_part(production_part part) throws java.lang.Exception
,    {
,      if (rhs_pos <MASK> MAX_RHS)
,	throw new Exception(""Internal Error: Productions limited to "" + 
,			     MAX_RHS + "" symbols and actions""); 
,
,      rhs_parts[rhs_pos] = part;
,      rhs_pos++;
,    }
"
113c5414-6c55-466b-b879-a350ab6e0ca2,0e5995c8-4bb2-45d5-b155-5d186c7eb764,EQ,"PUBLIC,void,setEquippedWeapon,LPAREN,Weapon,equippedWeapon,RPAREN,LBRACE,this,DOT,equippedWeapon,<MASK>,equippedWeapon,SEMI,RBRACE","	public void setEquippedWeapon(Weapon equippedWeapon) {
,		this.equippedWeapon <MASK> equippedWeapon;
,	}
"
ad0a2aad-9ad8-443c-832f-88b9f64460ed,cc8d8562-5209-4763-9300-9a71ab68dce3,EQ,"PROTECTED,void,initialize,LPAREN,RPAREN,LBRACE,feeder,DOT,isSpinning,<MASK>,BANG,feeder,DOT,isSpinning,SEMI,RBRACE","    protected void initialize() {
,        feeder.isSpinning <MASK> !feeder.isSpinning;
,    }
"
85e73bf4-198d-4e97-95ec-bfad228c11ea,3dde0b66-7b19-4ea3-9c07-8edfcef0c727,STAR,"PUBLIC,void,simpleElement,LPAREN,String,uri,COMMA,String,name,COMMA,String,value,COMMA,Map,LT,String,COMMA,String,GT,attrs,RPAREN,THROWS,SAXException,LBRACE,outputSpaces,LPAREN,indentLevel,<MASK>,INDENT,RPAREN,SEMI,outputStartElement,LPAREN,uri,COMMA,name,COMMA,attrs,RPAREN,SEMI,result,DOT,characters,LPAREN,value,DOT,toCharArray,LPAREN,RPAREN,COMMA,0,COMMA,value,DOT,length,LPAREN,RPAREN,RPAREN,SEMI,closeElement,LPAREN,uri,COMMA,name,RPAREN,SEMI,newLine,LPAREN,RPAREN,SEMI,RBRACE","    public void simpleElement(String uri, String name, String value, Map<String, String> attrs) throws SAXException {
,        outputSpaces(indentLevel <MASK> INDENT);
,        outputStartElement(uri, name, attrs);
,        result.characters(value.toCharArray(), 0, value.length());
,        closeElement(uri, name);
,        newLine();
,    }
"
113c5414-6c55-466b-b879-a350ab6e0ca2,cf63e31e-852d-4391-b401-b692743f72ef,EQ,"PUBLIC,STATIC,Map,interpretMap,LPAREN,MapGenerator,map,COMMA,ImageRegistry,LBRACKET,RBRACKET,registries,COMMA,int,difficulty,RPAREN,LBRACE,ImageIcon,LBRACKET,RBRACKET,space,<MASK>,LBRACE,ImageManager,DOT,getGlobalRegistry,LPAREN,RPAREN,DOT,getTile,LPAREN,""space1"",RPAREN,COMMA,ImageManager,DOT,getGlobalRegistry,LPAREN,RPAREN,DOT,getTile,LPAREN,""space2"",RPAREN,COMMA,ImageManager,DOT,getGlobalRegistry,LPAREN,RPAREN,DOT,getTile,LPAREN,""space3"",RPAREN,COMMA,ImageManager,DOT,getGlobalRegistry,LPAREN,RPAREN,DOT,getTile,LPAREN,""space4"",RPAREN,COMMA,ImageManager,DOT,getGlobalRegistry,LPAREN,RPAREN,DOT,getTile,LPAREN,""space5"",RPAREN,COMMA,ImageManager,DOT,getGlobalRegistry,LPAREN,RPAREN,DOT,getTile,LPAREN,""space6"",RPAREN,RBRACE,SEMI,RETURN,interpretMap,LPAREN,map,COMMA,registries,COMMA,space,COMMA,true,COMMA,difficulty,RPAREN,SEMI,RBRACE","	public static Map interpretMap(MapGenerator map, ImageRegistry[] registries, int difficulty){
,		ImageIcon[] space <MASK> {
,				ImageManager.getGlobalRegistry().getTile(""space1""),
,				ImageManager.getGlobalRegistry().getTile(""space2""),
,				ImageManager.getGlobalRegistry().getTile(""space3""),
,				ImageManager.getGlobalRegistry().getTile(""space4""),
,				ImageManager.getGlobalRegistry().getTile(""space5""),
,				ImageManager.getGlobalRegistry().getTile(""space6"")
,				};
,
,		return interpretMap(map, registries, space, true, difficulty);
,	}
"
9c253d2b-e626-4f21-a850-dfb022369350,08e02b8a-457e-4e2f-99dd-e948f79daf4d,LTEQ,"PUBLIC,double,rbf,LPAREN,FINAL,double,r,RPAREN,LBRACE,RETURN,r,<MASK>,0.,QUES,0.,COLON,SQR,LPAREN,r,RPAREN,STAR,log,LPAREN,r,SLASH,r0,RPAREN,SEMI,RBRACE","  public double rbf(final double r) { return r <MASK> 0. ? 0. : SQR(r)*log(r/r0); }
"
1b82c97a-fe19-4584-bdbc-4f13bb123c10,d0e0a099-9383-43c0-9f30-73e9de95b7f3,STAR,"PUBLIC,STATIC,int,SQR,LPAREN,FINAL,int,a,RPAREN,LBRACE,RETURN,a,<MASK>,a,SEMI,RBRACE","    public static int SQR(final int a) {
,        return a <MASK> a;
,    }
"
0cadc92e-3d00-4c9b-b4a2-174a03a56a77,7d7397e4-b2da-424e-a516-ae357d1ddc06,PLUS,"MONKEYS_AT,Override,PUBLIC,void,populationUpdate,LPAREN,PopulationData,LT,QUES,EXTENDS,Formula,GT,data,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,data,DOT,getGenerationNumber,LPAREN,RPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,data,DOT,getBestCandidate,LPAREN,RPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,data,DOT,getBestCandidateFitness,LPAREN,RPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,data,DOT,getMeanFitness,LPAREN,RPAREN,<MASK>,""\n"",RPAREN,SEMI,RBRACE","			@Override
,			public void populationUpdate(PopulationData<? extends Formula> data) {
,				System.out.println(data.getGenerationNumber());
,				System.out.println(data.getBestCandidate());
,				System.out.println(data.getBestCandidateFitness());
,				System.out.println(data.getMeanFitness() <MASK> ""\n"");
,			}
"
113c5414-6c55-466b-b879-a350ab6e0ca2,a38ff98f-ae7c-4ec3-b6cc-0da4fb40e267,EQ,"PUBLIC,Holdable,removeItem,LPAREN,Character,itemID,COMMA,int,count,RPAREN,THROWS,InvalidKeyException,LBRACE,Holdable,item,<MASK>,getInventory,LPAREN,RPAREN,DOT,removeStackedItem,LPAREN,itemID,COMMA,count,RPAREN,SEMI,RETURN,item,SEMI,RBRACE","	public Holdable removeItem(Character itemID, int count) throws InvalidKeyException {
,		Holdable item <MASK> getInventory().removeStackedItem(itemID, count);
,		return item;
,	}
"
113c5414-6c55-466b-b879-a350ab6e0ca2,180ca876-8692-44c4-b3c8-58f3ec5ea8e6,EQ,"PRIVATE,STATIC,ImageIcon,createBlank,LPAREN,RPAREN,LBRACE,BufferedImage,blank,<MASK>,NEW,BufferedImage,LPAREN,TILE_SIZE,COMMA,TILE_SIZE,COMMA,BufferedImage,DOT,TYPE_INT_RGB,RPAREN,SEMI,blank,DOT,getGraphics,LPAREN,RPAREN,DOT,fillRect,LPAREN,0,COMMA,0,COMMA,TILE_SIZE,COMMA,TILE_SIZE,RPAREN,SEMI,RETURN,NEW,ImageIcon,LPAREN,blank,RPAREN,SEMI,RBRACE","	private static ImageIcon createBlank(){
,		BufferedImage blank <MASK> new BufferedImage(TILE_SIZE, TILE_SIZE, BufferedImage.TYPE_INT_RGB);
,		blank.getGraphics().fillRect(0, 0, TILE_SIZE, TILE_SIZE);
,
,		return new ImageIcon(blank);
,	}
"
38ed5e2e-bfac-4cc9-94e0-5ee38dabb0ca,ecc4d63f-eb57-447d-8ebc-7eb2d0b48f9f,EQEQ,"PUBLIC,int,hashCode,LPAREN,RPAREN,LBRACE,IF,LPAREN,hash_code,<MASK>,Integer,DOT,MIN_VALUE,RPAREN,hash_code,EQ,myHashCode,LPAREN,tree,RPAREN,SEMI,RETURN,hash_code,SEMI,RBRACE","    public int hashCode() {
,	if (hash_code <MASK> Integer.MIN_VALUE) hash_code = myHashCode(tree);
,	return hash_code;
,    }
"
3913c395-db09-4ac4-8282-49a81b6a21f4,b417465e-89cf-4828-857e-4986eea3734d,LT,"PROTECTED,boolean,lineOfSight,LPAREN,Point2D,a,COMMA,Point2D,b,RPAREN,LBRACE,double,angle,EQ,FastMath,DOT,atan2,LPAREN,b,DOT,getY,LPAREN,RPAREN,SUB,a,DOT,getY,LPAREN,RPAREN,COMMA,b,DOT,getX,LPAREN,RPAREN,SUB,a,DOT,getX,LPAREN,RPAREN,RPAREN,SEMI,double,d,EQ,a,DOT,distance,LPAREN,b,RPAREN,SEMI,int,steps,EQ,LPAREN,int,RPAREN,d,SLASH,16,SEMI,int,x,COMMA,y,SEMI,FOR,LPAREN,int,r,EQ,0,SEMI,r,<MASK>,steps,SEMI,r,PLUSPLUS,RPAREN,LBRACE,x,EQ,LPAREN,int,RPAREN,LPAREN,a,DOT,getX,LPAREN,RPAREN,PLUS,16,STAR,r,STAR,FastMath,DOT,cos,LPAREN,angle,RPAREN,RPAREN,SLASH,32,SEMI,y,EQ,LPAREN,int,RPAREN,LPAREN,a,DOT,getY,LPAREN,RPAREN,PLUS,16,STAR,r,STAR,FastMath,DOT,sin,LPAREN,angle,RPAREN,RPAREN,SLASH,32,SEMI,IF,LPAREN,BANG,gm,DOT,getWorld,LPAREN,RPAREN,DOT,isLandPassable,LPAREN,x,COMMA,y,RPAREN,RPAREN,LBRACE,RETURN,false,SEMI,RBRACE,RBRACE,RETURN,true,SEMI,RBRACE","	protected boolean lineOfSight(Point2D a, Point2D b) {
,		double angle = FastMath.atan2(b.getY()-a.getY(), b.getX()-a.getX());
,		double d = a.distance(b);
,		int steps = (int)d/16;
,		int x, y;
,		for (int r = 0; r <MASK> steps; r++) {
,			x = (int)(a.getX()+16*r*FastMath.cos(angle))/32;
,			y = (int)(a.getY()+16*r*FastMath.sin(angle))/32;
,			if (!gm.getWorld().isLandPassable(x, y)) {
,				return false;
,			}
,		}
,		return true;
,	}
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,5e436e4b-c3a2-44f7-92a0-b3ae5d89c16c,BANGEQ,"PROTECTED,void,addBLOBEnableRule,LPAREN,String,deviceName,COMMA,String,propertyName,COMMA,BLOBEnables,enable,RPAREN,LBRACE,DevicePropertyBLOBEnableTuple,aux,EQ,getBLOBEnableRule,LPAREN,deviceName,COMMA,propertyName,RPAREN,SEMI,IF,LPAREN,aux,<MASK>,null,RPAREN,LBRACE,BLOBEnableRules,DOT,remove,LPAREN,aux,RPAREN,SEMI,RBRACE,BLOBEnableRules,DOT,add,LPAREN,NEW,DevicePropertyBLOBEnableTuple,LPAREN,deviceName,COMMA,propertyName,COMMA,enable,RPAREN,RPAREN,SEMI,RBRACE","  protected void addBLOBEnableRule(String deviceName, String propertyName, BLOBEnables enable) {
,    DevicePropertyBLOBEnableTuple aux = getBLOBEnableRule(deviceName, propertyName);
,
,    if (aux <MASK> null) {
,      BLOBEnableRules.remove(aux);
,    }
,
,    BLOBEnableRules.add(new DevicePropertyBLOBEnableTuple(deviceName, propertyName, enable));
,  }
"
ceb2d628-7548-4a8f-9594-53a373297866,b2ad1518-91d7-4b23-9cfd-defb577c417e,LT,"PUBLIC,double,calculate,LPAREN,double,distance_so_far,RPAREN,LBRACE,IF,LPAREN,current_segment,<MASK>,profile_,DOT,getNumSegments,LPAREN,RPAREN,RPAREN,LBRACE,Trajectory,DOT,Segment,segment,EQ,profile_,DOT,getSegment,LPAREN,current_segment,RPAREN,SEMI,double,error,EQ,segment,DOT,pos,SUB,distance_so_far,SEMI,double,output,EQ,kp_,STAR,error,PLUS,kd_,STAR,LPAREN,LPAREN,error,SUB,last_error_,RPAREN,SLASH,segment,DOT,dt,SUB,segment,DOT,vel,RPAREN,PLUS,LPAREN,kv_,STAR,segment,DOT,vel,PLUS,ka_,STAR,segment,DOT,acc,RPAREN,SEMI,last_error_,EQ,error,SEMI,current_heading,EQ,segment,DOT,heading,SEMI,current_segment,PLUSPLUS,SEMI,SmartDashboard,DOT,putNumber,LPAREN,name,PLUS,""FollowerSensor"",COMMA,distance_so_far,RPAREN,SEMI,SmartDashboard,DOT,putNumber,LPAREN,name,PLUS,""FollowerGoal"",COMMA,segment,DOT,pos,RPAREN,SEMI,SmartDashboard,DOT,putNumber,LPAREN,name,PLUS,""FollowerError"",COMMA,error,RPAREN,SEMI,RETURN,output,SEMI,RBRACE,ELSE,LBRACE,RETURN,0,SEMI,RBRACE,RBRACE","  public double calculate(double distance_so_far) {
,   
,    if (current_segment <MASK> profile_.getNumSegments()) {
,      Trajectory.Segment segment = profile_.getSegment(current_segment);
,      double error = segment.pos - distance_so_far;
,      double output = kp_ * error + kd_ * ((error - last_error_)
,              / segment.dt - segment.vel) + (kv_ * segment.vel
,              + ka_ * segment.acc);
,
,      last_error_ = error;
,      current_heading = segment.heading;
,      current_segment++;
,      SmartDashboard.putNumber(name + ""FollowerSensor"", distance_so_far);
,      SmartDashboard.putNumber(name + ""FollowerGoal"", segment.pos);
,      SmartDashboard.putNumber(name + ""FollowerError"", error);
,      return output;
,    } else {
,      return 0;
,    }
,  }
"
875ed1bc-1c92-4cd5-aec8-a5e68ef60cdc,f7110e90-bfe5-4101-ac06-bac56514d970,STAR,"MONKEYS_AT,Override,PUBLIC,Sexp,eval,LPAREN,IPair,cons,COMMA,Map,LT,AtomSymbol,COMMA,Sexp,GT,env,RPAREN,THROWS,FunctionException,LBRACE,super,DOT,checkArgmunet,LPAREN,cons,COMMA,2,RPAREN,SEMI,Sexp,LBRACKET,RBRACKET,list,EQ,cons,DOT,getCdr,LPAREN,RPAREN,DOT,getList,LPAREN,RPAREN,SEMI,long,sexp_apply1,EQ,LPAREN,LPAREN,AtomNumber,RPAREN,MyLisp,DOT,apply,LPAREN,list,LBRACKET,0,RBRACKET,COMMA,env,RPAREN,RPAREN,DOT,getValue,LPAREN,RPAREN,DOT,longValue,LPAREN,RPAREN,SEMI,long,sexp_apply2,EQ,LPAREN,LPAREN,AtomNumber,RPAREN,MyLisp,DOT,apply,LPAREN,list,LBRACKET,1,RBRACKET,COMMA,env,RPAREN,RPAREN,DOT,getValue,LPAREN,RPAREN,DOT,longValue,LPAREN,RPAREN,SEMI,Sexp,ret,SEMI,IF,LPAREN,sexp_apply2,LT,0,RPAREN,LBRACE,ret,EQ,Atom,DOT,newAtom,LPAREN,sexp_apply1,GTGT,LPAREN,sexp_apply2,<MASK>,SUB,1,RPAREN,RPAREN,SEMI,RBRACE,ELSE,LBRACE,ret,EQ,Atom,DOT,newAtom,LPAREN,sexp_apply1,LTLT,sexp_apply2,RPAREN,SEMI,RBRACE,RETURN,ret,SEMI,RBRACE","    @Override
,    public Sexp eval(IPair cons, Map<AtomSymbol, Sexp> env) throws FunctionException {
,        super.checkArgmunet(cons, 2);
,
,        Sexp[] list = cons.getCdr().getList();
,        long sexp_apply1 = ((AtomNumber) MyLisp.apply(list[0], env)).getValue().longValue();
,        long sexp_apply2 = ((AtomNumber) MyLisp.apply(list[1], env)).getValue().longValue();
,
,        Sexp ret;
,        if (sexp_apply2 < 0L) {
,            ret = Atom.newAtom(sexp_apply1 >> (sexp_apply2 <MASK> -1));
,        } else {
,            ret = Atom.newAtom(sexp_apply1 << sexp_apply2);
,        }
,
,        return ret;
,    }
"
09478113-8f39-4146-870b-8037a6932443,9087901e-05d3-409b-8957-08f29899f04e,EQEQ,"PRIVATE,void,OP_CMP,LPAREN,RPAREN,LBRACE,int,iMem,EQ,readOperand,LPAREN,RPAREN,SEMI,int,iVal,EQ,int8,LPAREN,getA,LPAREN,RPAREN,SUB,iMem,RPAREN,SEMI,setNFlag,LPAREN,getBit,LPAREN,iVal,COMMA,7,RPAREN,RPAREN,SEMI,setCFlag,LPAREN,BANG,getBit,LPAREN,getA,LPAREN,RPAREN,SUB,iMem,COMMA,8,RPAREN,RPAREN,SEMI,setZFlag,LPAREN,iVal,<MASK>,0,RPAREN,SEMI,RBRACE","    private void OP_CMP()
,    {
,        int iMem = readOperand();
,        int iVal = int8(getA() - iMem);
,
,        setNFlag(getBit(iVal, 7));
,        setCFlag(!getBit(getA() - iMem, 8));
,        setZFlag(iVal <MASK> 0);
,    }
"
80f137fe-1147-4585-ae40-e81a59ba8a89,79ebba8c-30f7-4f52-87f7-486877f0f635,STAR,"PUBLIC,Dimension,resizeImage,LPAREN,int,height,COMMA,int,width,RPAREN,LBRACE,int,heightTemp,EQ,height,SEMI,int,widthTemp,EQ,width,SEMI,double,thumbRatio,EQ,LPAREN,double,RPAREN,widthTemp,SLASH,LPAREN,double,RPAREN,heightTemp,SEMI,double,imageRatio,EQ,LPAREN,double,RPAREN,originalWidth,SLASH,LPAREN,double,RPAREN,originalHeight,SEMI,IF,LPAREN,thumbRatio,LT,imageRatio,RPAREN,LBRACE,heightTemp,EQ,LPAREN,int,RPAREN,LPAREN,widthTemp,SLASH,imageRatio,RPAREN,SEMI,RBRACE,ELSE,LBRACE,widthTemp,EQ,LPAREN,int,RPAREN,LPAREN,heightTemp,<MASK>,imageRatio,RPAREN,SEMI,RBRACE,BufferedImage,thumbImage,EQ,NEW,BufferedImage,LPAREN,widthTemp,COMMA,heightTemp,COMMA,BufferedImage,DOT,TYPE_INT_RGB,RPAREN,SEMI,Graphics2D,graphics2D,EQ,thumbImage,DOT,createGraphics,LPAREN,RPAREN,SEMI,graphics2D,DOT,setRenderingHint,LPAREN,RenderingHints,DOT,KEY_INTERPOLATION,COMMA,RenderingHints,DOT,VALUE_INTERPOLATION_BILINEAR,RPAREN,SEMI,graphics2D,DOT,drawImage,LPAREN,imgOriginal,COMMA,0,COMMA,0,COMMA,widthTemp,COMMA,heightTemp,COMMA,null,RPAREN,SEMI,imgResized,EQ,Toolkit,DOT,getDefaultToolkit,LPAREN,RPAREN,DOT,createImage,LPAREN,thumbImage,DOT,getSource,LPAREN,RPAREN,RPAREN,SEMI,graphics2D,DOT,dispose,LPAREN,RPAREN,SEMI,invalidate,LPAREN,RPAREN,SEMI,repaint,LPAREN,RPAREN,SEMI,Dimension,d,EQ,NEW,Dimension,LPAREN,RPAREN,SEMI,d,DOT,width,EQ,widthTemp,SEMI,d,DOT,height,EQ,heightTemp,SEMI,RETURN,d,SEMI,RBRACE","    public Dimension resizeImage(int height, int width) {
,        int heightTemp=height;
,        int widthTemp=width;
,        // code based on
,        // http://tycoontalk.freelancer.com/coding-forum/63227-image-resizing-in-java.html
,        // Make sure the aspect ratio is maintained, so the image is not skewed
,        double thumbRatio = (double) widthTemp / (double) heightTemp;
,        double imageRatio = (double) originalWidth / (double) originalHeight;
,        if (thumbRatio < imageRatio) {
,            heightTemp = (int) (widthTemp / imageRatio);
,        } else {
,            widthTemp = (int) (heightTemp <MASK> imageRatio);
,        }
,        
,        // Draw the scaled image
,        BufferedImage thumbImage = new BufferedImage(widthTemp, heightTemp,
,                BufferedImage.TYPE_INT_RGB);
,        Graphics2D graphics2D = thumbImage.createGraphics();
,        graphics2D.setRenderingHint(RenderingHints.KEY_INTERPOLATION,
,                RenderingHints.VALUE_INTERPOLATION_BILINEAR);
,        graphics2D.drawImage(imgOriginal, 0, 0, widthTemp, heightTemp, null);
,        
,        imgResized=Toolkit.getDefaultToolkit().createImage(thumbImage.getSource());
,        graphics2D.dispose();
,        invalidate();
,        repaint();
,        Dimension d=new Dimension();
,        d.width=widthTemp;
,        d.height=heightTemp;
,        return d;
,    }
"
2170437a-9f53-47a2-b3cb-257eca2eb4ab,2c2d076b-41bf-4c21-bdce-75ecaa6c0849,EQEQ,"PUBLIC,STATIC,DataAccess,createDataAccess,LPAREN,DataAccess,otherDataAccessService,RPAREN,LBRACE,IF,LPAREN,dataAccessService,<MASK>,null,RPAREN,LBRACE,dataAccessService,EQ,otherDataAccessService,SEMI,dataAccessService,DOT,open,LPAREN,RPAREN,SEMI,RBRACE,RETURN,dataAccessService,SEMI,RBRACE","	public static DataAccess createDataAccess(DataAccess otherDataAccessService)
,	{
,		if (dataAccessService <MASK> null)
,		{
,			dataAccessService = otherDataAccessService;
,			dataAccessService.open();
,		}
,		return dataAccessService;
,	}
"
875ed1bc-1c92-4cd5-aec8-a5e68ef60cdc,ef99cc62-69cc-414f-a53a-37be8d611f97,STAR,"MONKEYS_AT,Override,PUBLIC,int,hashCode,LPAREN,RPAREN,LBRACE,int,hash,EQ,5,SEMI,hash,EQ,67,<MASK>,hash,PLUS,this,DOT,value,SEMI,RETURN,hash,SEMI,RBRACE","    @Override
,    public int hashCode() {
,        int hash = 5;
,        hash = 67 <MASK> hash + this.value;
,        return hash;
,    }
"
958e93a1-b2a6-4224-84dc-8b9367c491c7,5c5a8d19-0a95-42d0-be76-51a9d663d6ff,STAR,"MONKEYS_AT,Override,PUBLIC,int,hashCode,LPAREN,RPAREN,LBRACE,int,result,EQ,super,DOT,hashCode,LPAREN,RPAREN,SEMI,result,EQ,31,<MASK>,result,PLUS,LPAREN,s,BANGEQ,null,QUES,s,DOT,hashCode,LPAREN,RPAREN,COLON,0,RPAREN,SEMI,RETURN,result,SEMI,RBRACE","    @Override
,    public int hashCode() {
,        int result = super.hashCode();
,        result = 31 <MASK> result + (s != null ? s.hashCode() : 0);
,        return result;
,    }
"
a4c68a60-241d-4ccc-bb34-58eb273247fe,3a0483f9-cff5-4012-a6c0-d17a452409f3,PLUS,"PRIVATE,STATIC,String,LBRACKET,RBRACKET,concat,LPAREN,String,LBRACKET,RBRACKET,array1,COMMA,String,LBRACKET,RBRACKET,array2,RPAREN,LBRACE,String,LBRACKET,RBRACKET,result,EQ,NEW,String,LBRACKET,array1,DOT,length,<MASK>,array2,DOT,length,RBRACKET,SEMI,System,DOT,arraycopy,LPAREN,array1,COMMA,0,COMMA,result,COMMA,0,COMMA,array1,DOT,length,RPAREN,SEMI,System,DOT,arraycopy,LPAREN,array2,COMMA,0,COMMA,result,COMMA,array1,DOT,length,COMMA,array2,DOT,length,RPAREN,SEMI,RETURN,result,SEMI,RBRACE","	private static String[] concat(String[] array1, String[] array2) {
,		String[] result = new String[array1.length <MASK> array2.length];
,		System.arraycopy(array1, 0, result, 0, array1.length);
,		System.arraycopy(array2, 0, result, array1.length, array2.length);
,		return result;
,	}
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,e342d5f9-02e5-4edd-8f5c-86eddf392140,LT,"PUBLIC,Rect,LPAREN,int,box,LBRACKET,RBRACKET,COMMA,ABType,type,RPAREN,LBRACE,centerX,EQ,LPAREN,box,LBRACKET,0,RBRACKET,PLUS,box,LBRACKET,2,RBRACKET,RPAREN,SLASH,2.0,SEMI,centerY,EQ,LPAREN,box,LBRACKET,3,RBRACKET,PLUS,box,LBRACKET,1,RBRACKET,RPAREN,SLASH,2.0,SEMI,pwidth,EQ,box,LBRACKET,2,RBRACKET,SUB,box,LBRACKET,0,RBRACKET,SEMI,plength,EQ,box,LBRACKET,3,RBRACKET,SUB,box,LBRACKET,1,RBRACKET,SEMI,angle,EQ,Math,DOT,PI,SLASH,2,SEMI,IF,LPAREN,plength,<MASK>,pwidth,RPAREN,LBRACE,pwidth,EQ,plength,SEMI,plength,EQ,box,LBRACKET,2,RBRACKET,SUB,box,LBRACKET,0,RBRACKET,SEMI,angle,EQ,0,SEMI,RBRACE,width,EQ,LPAREN,int,RPAREN,pwidth,SEMI,height,EQ,LPAREN,int,RPAREN,plength,SEMI,this,DOT,type,EQ,type,SEMI,area,EQ,width,STAR,height,SEMI,createPolygon,LPAREN,RPAREN,SEMI,RBRACE","    public Rect(int box[], ABType type)
,    {
,        centerX = (box[0] + box[2]) / 2.0;
,        centerY = (box[3] + box[1]) / 2.0;
,        pwidth = box[2] - box[0];
,        plength = box[3] - box[1];
,        angle = Math.PI / 2;
,        
,        if (plength <MASK> pwidth)
,        {
,            pwidth = plength;
,            plength = box[2] - box[0];
,            angle = 0;
,        }
,       
,        
,        width = (int)pwidth;
,        height = (int)plength;
,        
,        this.type = type;
,        
,        area = width * height;
,        createPolygon();
,      
,    }
"
a4c68a60-241d-4ccc-bb34-58eb273247fe,ee125a08-c5e1-4e79-9daa-a5e8aa5d7cf2,PLUS,"PUBLIC,STATIC,Instant,date,LPAREN,String,s,RPAREN,LBRACE,DateTimeFormatter,formatter,EQ,dateTimeFormatter,LPAREN,""kk:mm:ss dd/MM/yyyy"",COMMA,UTC,RPAREN,SEMI,RETURN,formatter,DOT,parse,LPAREN,""00:00:00 "",<MASK>,s,COMMA,DateTimeUtil,COLCOL,asInstant,RPAREN,SEMI,RBRACE","	public static Instant date(String s) {
,		DateTimeFormatter formatter = dateTimeFormatter(""kk:mm:ss dd/MM/yyyy"", UTC);
,		return formatter.parse(""00:00:00 "" <MASK> s, DateTimeUtil::asInstant);
,	}
"
d71e9d90-d7d7-40b1-b4fa-c5316adcd69a,8ef43085-c9bb-4403-8bfa-a849e7dfe20e,GT,"PUBLIC,Histogram,LPAREN,FINAL,double,lbd,COMMA,FINAL,double,ubd,COMMA,FINAL,int,quanta,RPAREN,LBRACE,this,DOT,lbd,EQ,Math,DOT,min,LPAREN,lbd,COMMA,ubd,RPAREN,SEMI,this,DOT,ubd,EQ,Math,DOT,max,LPAREN,lbd,COMMA,ubd,RPAREN,SEMI,this,DOT,range,EQ,this,DOT,ubd,SUB,this,DOT,lbd,SEMI,this,DOT,irange,EQ,LPAREN,this,DOT,range,<MASK>,0.0,RPAREN,QUES,LPAREN,1.0,SLASH,this,DOT,range,RPAREN,COLON,LPAREN,0.0,RPAREN,SEMI,this,DOT,quanta,EQ,Math,DOT,max,LPAREN,1,COMMA,quanta,RPAREN,SEMI,this,DOT,dquanta,EQ,LPAREN,LPAREN,double,RPAREN,this,DOT,quanta,RPAREN,SUB,Double,DOT,MIN_VALUE,SEMI,this,DOT,accu,EQ,NEW,double,LBRACKET,this,DOT,quanta,RBRACKET,SEMI,RBRACE","    public Histogram(final double lbd, final double ubd, final int quanta) {
,        //
,        this.lbd     = Math.min(lbd,  ubd);
,        this.ubd     = Math.max(lbd,  ubd);
,        this.range   = this.ubd - this.lbd;
,        this.irange  = (this.range <MASK> 0.0)?(1.0 / this.range):(0.0);
,        //
,        this.quanta  = Math.max(1, quanta);
,        this.dquanta = ((double)this.quanta) - Double.MIN_VALUE;
,        this.accu    = new double[this.quanta];
,    }
"
25febb02-bf0a-414d-9cae-3efcbdacd8a3,9ecba61f-9fa0-4689-992b-324a7c52185d,GT,"PUBLIC,void,moveLine,LPAREN,boolean,down,RPAREN,LBRACE,IF,LPAREN,down,RPAREN,LBRACE,IF,LPAREN,BANG,history,DOT,shiftDown,LPAREN,RPAREN,RPAREN,LBRACE,textField,DOT,restoreInput,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,ELSE,IF,LPAREN,history,DOT,getText,LPAREN,RPAREN,DOT,contains,LPAREN,""="",RPAREN,RPAREN,LBRACE,history,DOT,shiftUp,LPAREN,RPAREN,SEMI,String,toInsert,EQ,history,DOT,getUpperFront,LPAREN,RPAREN,SEMI,IF,LPAREN,toInsert,DOT,length,LPAREN,RPAREN,<MASK>,0,AMPAMP,toInsert,DOT,contains,LPAREN,""="",RPAREN,RPAREN,LBRACE,textField,DOT,setText,LPAREN,toInsert,DOT,substring,LPAREN,0,COMMA,toInsert,DOT,indexOf,LPAREN,""="",RPAREN,SUB,1,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,RBRACE","	public void moveLine(boolean down){
,	
,		if(down){
,			if(!history.shiftDown()){
,				textField.restoreInput();
,			}
,		}
,		else if(history.getText().contains(""="")){
,			
,			history.shiftUp();
,			//set the textfield 
,			String toInsert = history.getUpperFront();
,			if(toInsert.length() <MASK> 0 && toInsert.contains(""="")){
,				textField.setText(toInsert.substring(0,toInsert.indexOf(""="")-1));
,			}
,		}
,		
,	}
"
996c2181-63de-4cd4-a997-594ad56489d6,9cad881d-1af9-4567-9667-a0f309d5b761,SLASH,"PUBLIC,int,findDuplicateNumber,LPAREN,List,LT,Integer,GT,numbers,RPAREN,LBRACE,int,highestNumber,EQ,numbers,DOT,size,LPAREN,RPAREN,SUB,1,SEMI,int,total,EQ,getSum,LPAREN,numbers,RPAREN,SEMI,int,duplicate,EQ,total,SUB,LPAREN,highestNumber,STAR,LPAREN,highestNumber,PLUS,1,RPAREN,<MASK>,2,RPAREN,SEMI,RETURN,duplicate,SEMI,RBRACE","	public int findDuplicateNumber(List<Integer> numbers){
,        
,        int highestNumber = numbers.size() - 1;
,        int total = getSum(numbers);
,        int duplicate = total - (highestNumber*(highestNumber+1)<MASK>2);
,        return duplicate;
,    }
"
a98e10ef-3b3e-45e8-a98b-65ce2200211b,95a2b711-654e-4c7e-bbed-0f1e8a68ee2a,GTEQ,"boolean,numeral,LPAREN,RPAREN,LBRACE,RETURN,BANG,eof,LPAREN,RPAREN,AMPAMP,Parser,DOT,digit,DOT,indexOf,LPAREN,curr,LPAREN,RPAREN,RPAREN,<MASK>,0,SEMI,RBRACE","	boolean numeral()      { return !eof() && Parser.digit.indexOf(curr()) <MASK> 0; }
"
1b82c97a-fe19-4584-bdbc-4f13bb123c10,0e7fe780-2e1a-4506-88de-bd203f497100,GTEQ,"MONKEYS_AT,Override,PUBLIC,double,$_,LPAREN,int,n,RPAREN,THROWS,NRException,LBRACE,IF,LPAREN,off,PLUS,n,<MASK>,arr,DOT,length,BARBAR,off,PLUS,n,LT,0,RPAREN,THROW,NEW,NRException,LPAREN,""out of range offset used for offset $double"",RPAREN,SEMI,RETURN,arr,LBRACKET,off,PLUS,n,RBRACKET,SEMI,RBRACE","        @Override
,        public double $_(int n) throws NRException {
,            if (off + n <MASK> arr.length || off + n < 0)
,                throw new NRException(""out of range offset used for offset $double"");
,            return arr[off+n];
,        }
"
aed9046f-504a-49f9-b9ef-f36cca22ba93,64645532-1569-4e3c-9be6-8b59047ed825,SLASH,"PUBLIC,STATIC,List,LT,String,GT,getArrayWithResultsUsingOriginalAlgorithm,LPAREN,double,kwota,COMMA,char,typ,RPAREN,LBRACE,DecimalFormat,df00,EQ,NEW,DecimalFormat,LPAREN,""#.00"",RPAREN,SEMI,DecimalFormat,df,EQ,NEW,DecimalFormat,LPAREN,""#"",RPAREN,SEMI,podstawa,EQ,kwota,SEMI,umowa,EQ,typ,SEMI,ArrayList,LT,String,GT,outPut,EQ,NEW,ArrayList,LT,String,GT,LPAREN,RPAREN,SEMI,IF,LPAREN,umowa,EQEQ,P,RPAREN,LBRACE,outPut,DOT,add,LPAREN,""UMOWA O PRAC\u00C4\uFFFD"",RPAREN,SEMI,outPut,DOT,add,LPAREN,""Podstawa wymiaru sk\u0139\u201Aadek "",PLUS,podstawa,RPAREN,SEMI,double,oPodstawa,EQ,obliczonaPodstawa,LPAREN,podstawa,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Sk\u0139\u201Aadka na ubezpieczenie emerytalne "",PLUS,df00,DOT,format,LPAREN,s_emerytalna,RPAREN,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Sk\u0139\u201Aadka na ubezpieczenie rentowe    "",PLUS,df00,DOT,format,LPAREN,s_rentowa,RPAREN,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Sk\u0139\u201Aadka na ubezpieczenie chorobowe  "",PLUS,df00,DOT,format,LPAREN,u_chorobowe,RPAREN,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Podstawa wymiaru sk\u0139\u201Aadki na ubezpieczenie zdrowotne: "",PLUS,oPodstawa,RPAREN,SEMI,obliczUbezpieczenia,LPAREN,oPodstawa,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Sk\u0139\u201Aadka na ubezpieczenie zdrowotne: 9% = "",PLUS,df00,DOT,format,LPAREN,s_zdrow1,RPAREN,PLUS,"" 7,75% = "",PLUS,df00,DOT,format,LPAREN,s_zdrow2,RPAREN,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Koszty uzyskania przychodu w sta\u0139\u201Aej wysoko\u0139\u203Aci "",PLUS,kosztyUzyskania,RPAREN,SEMI,double,podstawaOpodat,EQ,oPodstawa,SUB,kosztyUzyskania,SEMI,double,podstawaOpodat0,EQ,Double,DOT,parseDouble,LPAREN,df,DOT,format,LPAREN,podstawaOpodat,RPAREN,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Podstawa opodatkowania "",PLUS,podstawaOpodat,PLUS,"" zaokr\u00C4\u2026glona "",PLUS,df,DOT,format,LPAREN,podstawaOpodat0,RPAREN,RPAREN,SEMI,obliczPodatek,LPAREN,podstawaOpodat0,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Zaliczka na podatek dochodowy 18 % = "",PLUS,zaliczkaNaPod,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Kwota wolna od podatku = "",PLUS,kwotaZmiejsz,RPAREN,SEMI,double,podatekPotracony,EQ,zaliczkaNaPod,SUB,kwotaZmiejsz,SEMI,outPut,DOT,add,LPAREN,""Podatek potr\u00C4\u2026cony = "",PLUS,df00,DOT,format,LPAREN,podatekPotracony,RPAREN,RPAREN,SEMI,obliczZaliczke,LPAREN,RPAREN,SEMI,zaliczkaUS0,EQ,Double,DOT,parseDouble,LPAREN,df,DOT,format,LPAREN,zaliczkaUS,RPAREN,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Zaliczka do urz\u00C4\u2122du skarbowego = "",PLUS,df00,DOT,format,LPAREN,zaliczkaUS,RPAREN,PLUS,"" po zaokr\u00C4\u2026gleniu = "",PLUS,df,DOT,format,LPAREN,zaliczkaUS0,RPAREN,RPAREN,SEMI,double,wynagrodzenie,EQ,podstawa,SUB,LPAREN,LPAREN,s_emerytalna,PLUS,s_rentowa,PLUS,u_chorobowe,RPAREN,PLUS,s_zdrow1,PLUS,zaliczkaUS0,RPAREN,SEMI,outPut,DOT,add,LPAREN,""\n"",RPAREN,SEMI,outPut,DOT,add,LPAREN,""Pracownik otrzyma wynagrodzenie netto w wysoko\u0139\u203Aci = "",PLUS,df00,DOT,format,LPAREN,wynagrodzenie,RPAREN,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,umowa,EQEQ,Z,RPAREN,LBRACE,outPut,DOT,add,LPAREN,""UMOWA-ZLECENIE"",RPAREN,SEMI,outPut,DOT,add,LPAREN,""Podstawa wymiaru sk\u0139\u201Aadek "",PLUS,podstawa,RPAREN,SEMI,double,oPodstawa,EQ,obliczonaPodstawa,LPAREN,podstawa,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Sk\u0139\u201Aadka na ubezpieczenie emerytalne "",PLUS,df00,DOT,format,LPAREN,s_emerytalna,RPAREN,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Sk\u0139\u201Aadka na ubezpieczenie rentowe    "",PLUS,df00,DOT,format,LPAREN,s_rentowa,RPAREN,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Sk\u0139\u201Aadka na ubezpieczenie chorobowe  "",PLUS,df00,DOT,format,LPAREN,u_chorobowe,RPAREN,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Podstawa wymiaru sk\u0139\u201Aadki na ubezpieczenie zdrowotne: "",PLUS,oPodstawa,RPAREN,SEMI,obliczUbezpieczenia,LPAREN,oPodstawa,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Sk\u0139\u201Aadka na ubezpieczenie zdrowotne: 9% = "",PLUS,df00,DOT,format,LPAREN,s_zdrow1,RPAREN,PLUS,"" 7,75% = "",PLUS,df00,DOT,format,LPAREN,s_zdrow2,RPAREN,RPAREN,SEMI,kwotaZmiejsz,EQ,0,SEMI,kosztyUzyskania,EQ,LPAREN,oPodstawa,STAR,20,RPAREN,<MASK>,100,SEMI,outPut,DOT,add,LPAREN,""Koszty uzyskania przychodu (sta\u0139\u201Ae) "",PLUS,kosztyUzyskania,RPAREN,SEMI,double,podstawaOpodat,EQ,oPodstawa,SUB,kosztyUzyskania,SEMI,double,podstawaOpodat0,EQ,Double,DOT,parseDouble,LPAREN,df,DOT,format,LPAREN,podstawaOpodat,RPAREN,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Podstawa opodatkowania "",PLUS,podstawaOpodat,PLUS,"" zaokr\u00C4\u2026glona "",PLUS,df,DOT,format,LPAREN,podstawaOpodat0,RPAREN,RPAREN,SEMI,obliczPodatek,LPAREN,podstawaOpodat0,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Zaliczka na podatek dochodowy 18 % = "",PLUS,zaliczkaNaPod,RPAREN,SEMI,double,podatekPotracony,EQ,zaliczkaNaPod,SEMI,outPut,DOT,add,LPAREN,""Podatek potr\u00C4\u2026cony = "",PLUS,df00,DOT,format,LPAREN,podatekPotracony,RPAREN,RPAREN,SEMI,obliczZaliczke,LPAREN,RPAREN,SEMI,zaliczkaUS0,EQ,Double,DOT,parseDouble,LPAREN,df,DOT,format,LPAREN,zaliczkaUS,RPAREN,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Zaliczka do urz\u00C4\u2122du skarbowego = "",PLUS,df00,DOT,format,LPAREN,zaliczkaUS,RPAREN,PLUS,"" po zaokr\u00C4\u2026gleniu = "",PLUS,df,DOT,format,LPAREN,zaliczkaUS0,RPAREN,RPAREN,SEMI,double,wynagrodzenie,EQ,podstawa,SUB,LPAREN,LPAREN,s_emerytalna,PLUS,s_rentowa,PLUS,u_chorobowe,RPAREN,PLUS,s_zdrow1,PLUS,zaliczkaUS0,RPAREN,SEMI,outPut,DOT,add,LPAREN,""\n"",RPAREN,SEMI,outPut,DOT,add,LPAREN,""Pracownik otrzyma wynagrodzenie netto w wysoko\u0139\u203Aci = "",PLUS,df00,DOT,format,LPAREN,wynagrodzenie,RPAREN,RPAREN,SEMI,RBRACE,ELSE,LBRACE,outPut,DOT,add,LPAREN,""Nieznany typ umowy!"",RPAREN,SEMI,RBRACE,reset,LPAREN,RPAREN,SEMI,RETURN,outPut,SEMI,RBRACE","	public static List<String> getArrayWithResultsUsingOriginalAlgorithm(double kwota,char typ){
,		
,		DecimalFormat df00 = new DecimalFormat(""#.00"");
,		DecimalFormat df = new DecimalFormat(""#"");
,		
,		podstawa = kwota;
,		umowa = typ;
,		
,		ArrayList<String> outPut = new ArrayList<String>();
,		
,		if (umowa == 'P') {
,			outPut.add(""UMOWA O PRACÄ�"");
,			outPut.add(""Podstawa wymiaru skĹ‚adek "" + podstawa);
,			double oPodstawa = obliczonaPodstawa(podstawa);
,			outPut.add(""SkĹ‚adka na ubezpieczenie emerytalne ""
,					+ df00.format(s_emerytalna));
,			outPut.add(""SkĹ‚adka na ubezpieczenie rentowe    ""
,					+ df00.format(s_rentowa));
,			outPut.add(""SkĹ‚adka na ubezpieczenie chorobowe  ""
,					+ df00.format(u_chorobowe));
,			outPut.add(""Podstawa wymiaru skĹ‚adki na ubezpieczenie zdrowotne: ""
,							+ oPodstawa);
,			obliczUbezpieczenia(oPodstawa);
,			outPut.add(""SkĹ‚adka na ubezpieczenie zdrowotne: 9% = ""
,					+ df00.format(s_zdrow1) + "" 7,75% = "" + df00.format(s_zdrow2));
,			outPut.add( ""Koszty uzyskania przychodu w staĹ‚ej wysokoĹ›ci ""
,					+ kosztyUzyskania);
,			double podstawaOpodat = oPodstawa - kosztyUzyskania;
,			double podstawaOpodat0 = Double
,					.parseDouble(df.format(podstawaOpodat));
,			outPut.add(""Podstawa opodatkowania "" + podstawaOpodat
,					+ "" zaokrÄ…glona "" + df.format(podstawaOpodat0));
,			obliczPodatek(podstawaOpodat0);
,			outPut.add(""Zaliczka na podatek dochodowy 18 % = ""
,					+ zaliczkaNaPod);
,			outPut.add(""Kwota wolna od podatku = "" + kwotaZmiejsz);
,			double podatekPotracony = zaliczkaNaPod - kwotaZmiejsz;
,			outPut.add(""Podatek potrÄ…cony = ""
,					+ df00.format(podatekPotracony));
,			obliczZaliczke();
,			zaliczkaUS0 = Double.parseDouble(df.format(zaliczkaUS));
,			outPut.add(""Zaliczka do urzÄ™du skarbowego = ""
,					+ df00.format(zaliczkaUS) + "" po zaokrÄ…gleniu = ""
,					+ df.format(zaliczkaUS0));
,			double wynagrodzenie = podstawa
,					- ((s_emerytalna + s_rentowa + u_chorobowe) + s_zdrow1 + zaliczkaUS0);
,			outPut.add(""\n"");
,			outPut.add(""Pracownik otrzyma wynagrodzenie netto w wysokoĹ›ci = ""
,							+ df00.format(wynagrodzenie));
,		} else if (umowa == 'Z') {
,			outPut.add(""UMOWA-ZLECENIE"");
,			outPut.add(""Podstawa wymiaru skĹ‚adek "" + podstawa);
,			double oPodstawa = obliczonaPodstawa(podstawa);
,			outPut.add(""SkĹ‚adka na ubezpieczenie emerytalne ""
,					+ df00.format(s_emerytalna));
,			outPut.add(""SkĹ‚adka na ubezpieczenie rentowe    ""
,					+ df00.format(s_rentowa));
,			outPut.add(""SkĹ‚adka na ubezpieczenie chorobowe  ""
,					+ df00.format(u_chorobowe));
,			outPut.add(""Podstawa wymiaru skĹ‚adki na ubezpieczenie zdrowotne: ""
,							+ oPodstawa);
,			obliczUbezpieczenia(oPodstawa);
,			outPut.add(""SkĹ‚adka na ubezpieczenie zdrowotne: 9% = ""
,					+ df00.format(s_zdrow1) + "" 7,75% = "" + df00.format(s_zdrow2));
,			kwotaZmiejsz = 0;
,			kosztyUzyskania = (oPodstawa * 20) <MASK> 100;
,			outPut.add(""Koszty uzyskania przychodu (staĹ‚e) ""
,					+ kosztyUzyskania);
,			double podstawaOpodat = oPodstawa - kosztyUzyskania;
,			double podstawaOpodat0 = Double.parseDouble(df.format(podstawaOpodat));
,			outPut.add(""Podstawa opodatkowania "" + podstawaOpodat
,					+ "" zaokrÄ…glona "" + df.format(podstawaOpodat0));
,			obliczPodatek(podstawaOpodat0);
,			outPut.add(""Zaliczka na podatek dochodowy 18 % = ""
,					+ zaliczkaNaPod);
,			double podatekPotracony = zaliczkaNaPod;
,			outPut.add(""Podatek potrÄ…cony = ""
,					+ df00.format(podatekPotracony));
,			obliczZaliczke();
,			zaliczkaUS0 = Double.parseDouble(df.format(zaliczkaUS));
,			outPut.add(""Zaliczka do urzÄ™du skarbowego = ""
,					+ df00.format(zaliczkaUS) + "" po zaokrÄ…gleniu = ""
,					+ df.format(zaliczkaUS0));
,			double wynagrodzenie = podstawa
,					- ((s_emerytalna + s_rentowa + u_chorobowe) + s_zdrow1 + zaliczkaUS0);
,			outPut.add(""\n"");
,			outPut.add(""Pracownik otrzyma wynagrodzenie netto w wysokoĹ›ci = ""
,							+ df00.format(wynagrodzenie));
,			
,		} else {
,			outPut.add(""Nieznany typ umowy!"");
,		}
,		reset();
,		return outPut;
,	}
"
3913c395-db09-4ac4-8282-49a81b6a21f4,7bb2c3ea-f69a-41bc-bc01-dc551da545c0,BANGEQ,"PUBLIC,AStarPathFinder,LPAREN,MapDataProvider,map,RPAREN,LBRACE,assert,map,<MASK>,null,SEMI,this,DOT,map,EQ,map,SEMI,Dimension,size,EQ,map,DOT,getSize,LPAREN,RPAREN,SEMI,nodes,EQ,NEW,Node,LBRACKET,size,DOT,width,RBRACKET,LBRACKET,size,DOT,height,RBRACKET,SEMI,FOR,LPAREN,int,y,EQ,0,SEMI,y,LT,size,DOT,height,SEMI,y,PLUSPLUS,RPAREN,LBRACE,FOR,LPAREN,int,x,EQ,0,SEMI,x,LT,size,DOT,width,SEMI,x,PLUSPLUS,RPAREN,LBRACE,nodes,LBRACKET,x,RBRACKET,LBRACKET,y,RBRACKET,EQ,NEW,Node,LPAREN,x,COMMA,y,RPAREN,SEMI,RBRACE,RBRACE,RBRACE","	public AStarPathFinder(MapDataProvider map) {
,		assert map <MASK> null;
,		this.map = map;
,		Dimension size = map.getSize();
,		nodes = new Node[size.width][size.height];
,		for (int y = 0; y < size.height; y++) {
,			for (int x = 0; x < size.width; x++) {
,				nodes[x][y] = new Node(x, y);
,			}
,		}
,	}
"
09478113-8f39-4146-870b-8037a6932443,ac74960f-35c6-4e02-9e9f-85ee5cf51e50,EQEQ,"PRIVATE,void,OP_TSX,LPAREN,RPAREN,LBRACE,setNFlag,LPAREN,getBit,LPAREN,getSP,LPAREN,RPAREN,COMMA,7,RPAREN,RPAREN,SEMI,setZFlag,LPAREN,getSP,LPAREN,RPAREN,<MASK>,0,RPAREN,SEMI,setX,LPAREN,getSP,LPAREN,RPAREN,RPAREN,SEMI,RBRACE","    private void OP_TSX()
,    {
,        setNFlag(getBit(getSP(), 7));
,        setZFlag(getSP() <MASK> 0);
,
,        setX(getSP());
,    }
"
1b82c97a-fe19-4584-bdbc-4f13bb123c10,bc2e431b-3fd2-4c65-b3a9-a8193d4135a5,GTEQ,"PUBLIC,void,solve,LPAREN,FINAL,double,LBRACKET,RBRACKET,b,COMMA,FINAL,double,LBRACKET,RBRACKET,x,RPAREN,THROWS,NRException,LBRACE,int,i,COMMA,ii,EQ,0,COMMA,ip,COMMA,j,SEMI,double,sum,SEMI,IF,LPAREN,b,DOT,length,BANGEQ,n,BARBAR,x,DOT,length,BANGEQ,n,RPAREN,THROW,NEW,NRException,LPAREN,""LUdcmp::solve bad sizes"",RPAREN,SEMI,FOR,LPAREN,i,EQ,0,SEMI,i,LT,n,SEMI,i,PLUSPLUS,RPAREN,x,LBRACKET,i,RBRACKET,EQ,b,LBRACKET,i,RBRACKET,SEMI,FOR,LPAREN,i,EQ,0,SEMI,i,LT,n,SEMI,i,PLUSPLUS,RPAREN,LBRACE,ip,EQ,indx,LBRACKET,i,RBRACKET,SEMI,sum,EQ,x,LBRACKET,ip,RBRACKET,SEMI,x,LBRACKET,ip,RBRACKET,EQ,x,LBRACKET,i,RBRACKET,SEMI,IF,LPAREN,ii,BANGEQ,0,RPAREN,FOR,LPAREN,j,EQ,ii,SUB,1,SEMI,j,LT,i,SEMI,j,PLUSPLUS,RPAREN,sum,SUBEQ,lu,LBRACKET,i,RBRACKET,LBRACKET,j,RBRACKET,STAR,x,LBRACKET,j,RBRACKET,SEMI,ELSE,IF,LPAREN,sum,BANGEQ,0.0,RPAREN,ii,EQ,i,PLUS,1,SEMI,x,LBRACKET,i,RBRACKET,EQ,sum,SEMI,RBRACE,FOR,LPAREN,i,EQ,n,SUB,1,SEMI,i,<MASK>,0,SEMI,i,SUBSUB,RPAREN,LBRACE,sum,EQ,x,LBRACKET,i,RBRACKET,SEMI,FOR,LPAREN,j,EQ,i,PLUS,1,SEMI,j,LT,n,SEMI,j,PLUSPLUS,RPAREN,sum,SUBEQ,lu,LBRACKET,i,RBRACKET,LBRACKET,j,RBRACKET,STAR,x,LBRACKET,j,RBRACKET,SEMI,x,LBRACKET,i,RBRACKET,EQ,sum,SLASH,lu,LBRACKET,i,RBRACKET,LBRACKET,i,RBRACKET,SEMI,RBRACE,RBRACE","    public void solve(final double[] b, final double[] x) throws NRException {
,        // Solves the set of n linear equations A  x D b using the stored
,        // LU decomposition of A. b[0..n-1] is input as the right-hand side
,        // vector b, while x returns the solution vector x; b and x may
,        // reference the same vector, in which case the solution overwrites
,        // the input. This routine takes into account the possibility that
,        // b will begin with many zero elements, so it is efficient for use
,        // in matrix inversion.
,        int i, ii = 0, ip, j;
,        double sum;
,        if (b.length != n || x.length != n)
,            throw new NRException(""LUdcmp::solve bad sizes"");
,        for (i = 0; i < n; i++)
,            x[i] = b[i];
,        for (i = 0; i < n; i++) { // When ii is set to a positive value, it will
,                                  // become the
,            // index of the first nonvanishing element of b. We now
,            // do the forward substitution, equation (2.3.6). The
,            // only new wrinkle is to unscramble the permutation
,            // as we go.
,            ip = indx[i];
,            sum = x[ip];
,            x[ip] = x[i];
,            if (ii != 0)
,                for (j = ii - 1; j < i; j++)
,                    sum -= lu[i][j] * x[j];
,            else if (sum != 0.0) // A nonzero element was encountered, so from
,                                 // now on we
,                ii = i + 1; // will have to do the sums in the loop above.
,            x[i] = sum;
,        }
,        for (i = n - 1; i <MASK> 0; i--) { // Now we do the backsubstitution,
,                                       // equation (2.3.7).
,            sum = x[i];
,            for (j = i + 1; j < n; j++)
,                sum -= lu[i][j] * x[j];
,            x[i] = sum / lu[i][i]; // Store a component of the solution vector
,                                   // X.
,        } // All done!
,    }
"
e804bdf1-7a07-4e36-aee6-aba6a427cf38,e8e70a64-bff9-4167-8b04-40f1ca25af66,STAR,"PUBLIC,AckermannTable,LPAREN,int,n,RPAREN,LBRACE,table,EQ,NEW,Hashtable,LT,Integer,COMMA,Hashtable,LT,Integer,COMMA,Integer,GTGT,LPAREN,RPAREN,SEMI,int,i,EQ,1,SEMI,int,j,EQ,2,SEMI,setValue,LPAREN,1,COMMA,1,COMMA,2,RPAREN,SEMI,WHILE,LPAREN,true,RPAREN,LBRACE,int,newValue,EQ,SUB,1,SEMI,IF,LPAREN,i,EQEQ,1,RPAREN,LBRACE,newValue,EQ,getValue,LPAREN,i,COMMA,j,SUB,1,RPAREN,<MASK>,2,SEMI,RBRACE,ELSE,LBRACE,newValue,EQ,getValue,LPAREN,i,SUB,1,COMMA,getValue,LPAREN,i,COMMA,j,SUB,1,RPAREN,RPAREN,SEMI,RBRACE,IF,LPAREN,newValue,GT,n,BARBAR,newValue,EQEQ,SUB,1,RPAREN,LBRACE,IF,LPAREN,j,EQEQ,1,RPAREN,LBRACE,RETURN,SEMI,RBRACE,ELSE,LBRACE,i,PLUSPLUS,SEMI,j,EQ,1,SEMI,RBRACE,RBRACE,ELSE,LBRACE,setValue,LPAREN,i,COMMA,j,COMMA,newValue,RPAREN,SEMI,j,PLUSPLUS,SEMI,RBRACE,RBRACE,RBRACE","	public AckermannTable(int n) {
,		// construct new table
,		table = new Hashtable<Integer, Hashtable<Integer, Integer>>();
,		
,		// set first value
,		int i = 1;
,		int j = 2;
,		setValue(1, 1, 2);
,		
,		while (true) {
,			int newValue = -1;
,			
,			// compute next entry
,			if (i == 1) {
,				newValue = getValue(i, j - 1) <MASK> 2;
,			} else {
,				newValue = getValue(i - 1, getValue(i, j - 1));
,			}
,			
,			if (newValue > n || newValue == -1) {
,				if (j == 1) {
,					// no single entry in this row - return
,					return;
,				} else {
,					// go to the next row
,					i++;
,					j = 1;
,				}
,			} else {
,				// save the computed value
,				setValue(i, j, newValue);
,				j++;
,			}
,		}
,	}
"
ceb2d628-7548-4a8f-9594-53a373297866,da78dfbb-752c-4d81-8eda-c8c244f70b1c,LT,"PUBLIC,String,toStringEuclidean,LPAREN,RPAREN,LBRACE,String,str,EQ,""Segment\tx\ty\tHeading\n"",SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,getNumSegments,LPAREN,RPAREN,SEMI,PLUSPLUS,i,RPAREN,LBRACE,Trajectory,DOT,Segment,segment,EQ,getSegment,LPAREN,i,RPAREN,SEMI,str,PLUSEQ,i,PLUS,""\t"",SEMI,str,PLUSEQ,segment,DOT,x,PLUS,""\t"",SEMI,str,PLUSEQ,segment,DOT,y,PLUS,""\t"",SEMI,str,PLUSEQ,segment,DOT,heading,PLUS,""\t"",SEMI,str,PLUSEQ,""\n"",SEMI,RBRACE,RETURN,str,SEMI,RBRACE","  public String toStringEuclidean() {
,    String str = ""Segment\tx\ty\tHeading\n"";
,    for (int i = 0; i <MASK> getNumSegments(); ++i) {
,      Trajectory.Segment segment = getSegment(i);
,      str += i + ""\t"";
,      str += segment.x + ""\t"";
,      str += segment.y + ""\t"";
,      str += segment.heading + ""\t"";
,      str += ""\n"";
,    }
,
,    return str;
,  }
"
811987a2-df8f-411b-b35a-1f251eaec687,a59799b3-5b80-4379-bb81-3401ac7fc500,SLASH,"PUBLIC,double,LBRACKET,RBRACKET,readNormalizedLastLine,LPAREN,RPAREN,LBRACE,double,LBRACKET,RBRACKET,newRow,EQ,NEW,double,LBRACKET,2,RBRACKET,SEMI,double,LBRACKET,RBRACKET,normalizedNewRow,EQ,NEW,double,LBRACKET,2,RBRACKET,SEMI,TRY,LBRACE,File,file,EQ,NEW,File,LPAREN,Controller,DOT,getConfig,LPAREN,RPAREN,DOT,getTrainMemLogFile,LPAREN,RPAREN,RPAREN,SEMI,String,metric,EQ,ReadFile,DOT,readLast_N_Lines,LPAREN,file,COMMA,1,RPAREN,SEMI,String,LBRACKET,RBRACKET,lastline,EQ,metric,DOT,split,LPAREN,""\\n"",RPAREN,SEMI,metric,EQ,lastline,LBRACKET,lastline,DOT,length,SUB,1,RBRACKET,SEMI,String,LBRACKET,RBRACKET,splited,EQ,metric,DOT,split,LPAREN,""\\s+"",RPAREN,SEMI,newRow,LBRACKET,Constants,DOT,METRIC,DOT,MEM,DOT,getValue,LPAREN,RPAREN,RBRACKET,EQ,Double,DOT,parseDouble,LPAREN,splited,LBRACKET,4,RBRACKET,RPAREN,SEMI,file,EQ,NEW,File,LPAREN,Controller,DOT,getConfig,LPAREN,RPAREN,DOT,getTrainMetricLogFile,LPAREN,RPAREN,RPAREN,SEMI,metric,EQ,ReadFile,DOT,readLast_N_Lines,LPAREN,file,COMMA,1,RPAREN,SEMI,lastline,EQ,metric,DOT,split,LPAREN,""\\n"",RPAREN,SEMI,metric,EQ,lastline,LBRACKET,lastline,DOT,length,SUB,1,RBRACKET,SEMI,splited,EQ,metric,DOT,split,LPAREN,""\\s+"",RPAREN,SEMI,newRow,LBRACKET,Constants,DOT,METRIC,DOT,CPU,DOT,getValue,LPAREN,RPAREN,RBRACKET,EQ,Double,DOT,parseDouble,LPAREN,splited,LBRACKET,4,RBRACKET,RPAREN,SEMI,logger,DOT,info,LPAREN,""Metric read : "",PLUS,newRow,LBRACKET,0,RBRACKET,PLUS,"" "",PLUS,newRow,LBRACKET,1,RBRACKET,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,2,SEMI,i,PLUSPLUS,RPAREN,LBRACE,double,std,SEMI,double,denominator,EQ,MinMaxMetricVal,LBRACKET,1,RBRACKET,LBRACKET,i,RBRACKET,SUB,MinMaxMetricVal,LBRACKET,0,RBRACKET,LBRACKET,i,RBRACKET,SEMI,IF,LPAREN,denominator,GT,0,RPAREN,std,EQ,LPAREN,newRow,LBRACKET,i,RBRACKET,SUB,MinMaxMetricVal,LBRACKET,0,RBRACKET,LBRACKET,i,RBRACKET,RPAREN,<MASK>,denominator,SEMI,ELSE,std,EQ,0,SEMI,normalizedNewRow,LBRACKET,i,RBRACKET,EQ,std,STAR,LPAREN,100,SUB,0,RPAREN,PLUS,0,SEMI,RBRACE,logger,DOT,info,LPAREN,""Normalized : "",PLUS,normalizedNewRow,LBRACKET,0,RBRACKET,PLUS,"" "",PLUS,normalizedNewRow,LBRACKET,1,RBRACKET,RPAREN,SEMI,RBRACE,CATCH,LPAREN,NullPointerException,e,RPAREN,LBRACE,logger,DOT,info,LPAREN,e,DOT,getMessage,LPAREN,RPAREN,RPAREN,SEMI,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,Exception,e,RPAREN,LBRACE,logger,DOT,error,LPAREN,e,DOT,getMessage,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,RETURN,normalizedNewRow,SEMI,RBRACE","	public double[] readNormalizedLastLine()
,	{
,		double[] newRow = new double[2];
,		double[] normalizedNewRow = new double[2];
,		
,		try{
,			File file = new File(Controller.getConfig().getTrainMemLogFile());
,			String metric = ReadFile.readLast_N_Lines(file, 1);
,			String[] lastline = metric.split(""\\n"");
,			metric = lastline[lastline.length-1];
,			String[] splited = metric.split(""\\s+"");
,			newRow[Constants.METRIC.MEM.getValue()] = Double.parseDouble(splited[4]);
,			
,			file = new File(Controller.getConfig().getTrainMetricLogFile());
,			metric = ReadFile.readLast_N_Lines(file, 1);
,			lastline = metric.split(""\\n"");
,			metric = lastline[lastline.length-1];
,			splited = metric.split(""\\s+"");
,			newRow[Constants.METRIC.CPU.getValue()] = Double.parseDouble(splited[4]);
,			logger.info(""Metric read : "" + newRow[0] + "" "" + newRow[1]);
,			for(int i=0;i<2;i++)
,			{
,				double std;
,				double denominator = MinMaxMetricVal[1][i] - MinMaxMetricVal[0][i];
,				if(denominator > 0)
,					std = (newRow[i] - MinMaxMetricVal[0][i]) <MASK> denominator;
,				else
,					std=0;
,				
,				normalizedNewRow[i] = std * (100 - 0) + 0;
,			}
,			logger.info(""Normalized : "" + normalizedNewRow[0] + "" "" + normalizedNewRow[1] );
,		} catch(NullPointerException e){
,			logger.info(e.getMessage());
,			e.printStackTrace();
,		}catch(Exception e){
,			logger.error(e.getMessage());
,		}
,		return normalizedNewRow;
,	}
"
0dfb093d-da1c-44ee-81fd-3fd7eb6d3145,a00d249a-aad9-4ac2-ae86-0d90c7247d60,STAR,"PUBLIC,void,getCommentsByUrlForMaintenance,LPAREN,URL,url,COMMA,int,numOfComments,COMMA,int,threadId,COMMA,int,lastComment,COMMA,String,key,RPAREN,THROWS,FileNotFoundException,LBRACE,this,DOT,commentString,EQ,NEW,StringBuilder,LPAREN,RPAREN,SEMI,String,htmlArr,LBRACKET,RBRACKET,SEMI,PrintWriter,out,EQ,NEW,PrintWriter,LPAREN,""C:\\\\commentsMaint"",PLUS,lastComment,PLUS,"".txt"",RPAREN,SEMI,int,initialOffset,EQ,0,SEMI,int,beginningComment,EQ,0,SEMI,initialOffset,EQ,LPAREN,lastComment,SLASH,100,RPAREN,<MASK>,100,SEMI,IF,LPAREN,threadId,EQEQ,1,RPAREN,beginningComment,EQ,lastComment,SUB,initialOffset,SUB,10,SEMI,DO,LBRACE,htmlArr,EQ,getHtmlCommentsFromYahoo,LPAREN,uh,DOT,getFixUrlForMaintenance,LPAREN,uh,DOT,buildUrlForMaintenance,LPAREN,url,RPAREN,COMMA,key,RPAREN,COMMA,NEW,MaintenanceDataManager,LPAREN,RPAREN,COMMA,threadId,RPAREN,SEMI,RBRACE,WHILE,LPAREN,htmlArr,EQEQ,null,RPAREN,SEMI,CommentEntityDS,result,SEMI,int,htmlArraySize,EQ,htmlArr,DOT,length,SEMI,FOR,LPAREN,int,i,EQ,beginningComment,SEMI,i,LT,htmlArraySize,AMPAMP,i,LT,LPAREN,numOfComments,SUB,lastComment,RPAREN,PLUS,beginningComment,SEMI,i,PLUSPLUS,RPAREN,LBRACE,TRY,LBRACE,result,EQ,getCommentEntityFromHtml,LPAREN,htmlArr,LBRACKET,i,RBRACKET,COMMA,threadId,COMMA,i,PLUS,10,COMMA,initialOffset,RPAREN,SEMI,MaintenanceDataManager,DOT,commentsArray,LBRACKET,Integer,DOT,parseInt,LPAREN,result,DOT,getId,LPAREN,RPAREN,RPAREN,SUB,lastComment,SUB,1,RBRACKET,EQ,result,SEMI,RBRACE,CATCH,LPAREN,FileNotFoundException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,out,DOT,close,LPAREN,RPAREN,SEMI,RBRACE","	public void getCommentsByUrlForMaintenance(URL url, int numOfComments, int threadId, int lastComment, String key) throws FileNotFoundException{	
,		
,		this.commentString = new StringBuilder();
,		String htmlArr[];
,		PrintWriter out = new PrintWriter(""C:\\\\commentsMaint"" + lastComment + "".txt""); ////TODO delete after testing
,		int initialOffset = 0;
,		int beginningComment = 0;
,				
,		initialOffset = (lastComment/100) <MASK> 100;
,		if(threadId == 1)
,			beginningComment = lastComment - initialOffset - 10;			
,		do{
,			htmlArr = getHtmlCommentsFromYahoo(uh.getFixUrlForMaintenance(uh.buildUrlForMaintenance(url), key), new MaintenanceDataManager(), threadId);	
,		}while(htmlArr == null);
,		
,		CommentEntityDS result;
,		int htmlArraySize = htmlArr.length;
,		for(int i = beginningComment; i < htmlArraySize && i < (numOfComments-lastComment) + beginningComment; i++){
,		//for(int i = (htmlArraySize - (numOfComments - lastComment)); i < htmlArraySize; i++){
,
,			try {
,				//result = getCommentEntityFromHtml(htmlArr[i], out, threadId, beginningComment + 10, initialOffset);
,				result = getCommentEntityFromHtml(htmlArr[i], threadId, i + 10, initialOffset);
,				MaintenanceDataManager.commentsArray[Integer.parseInt(result.getId()) - lastComment - 1] = result;
,				
,				
,			} catch (FileNotFoundException e) {
,						e.printStackTrace();
,			}	
,		}
,		out.close(); //TODO delete after testing
,	}
"
a5ecb7e9-82a6-472c-bd23-3a7d67c2868a,6bed73a6-f428-4699-bc42-c48049f4c470,PLUS,"MONKEYS_AT,Override,PUBLIC,int,execute,LPAREN,int,a,COMMA,int,b,RPAREN,LBRACE,RETURN,a,<MASK>,b,SEMI,RBRACE","    @Override
,    public int execute(int a, int b) {
,        return a <MASK> b;
,    }
"
31865c5a-965e-4d07-af21-44a51a00ba58,c52d7ef2-a880-41ea-a26f-7d39c97aefde,STAR,"PUBLIC,STATIC,String,createNewName,LPAREN,String,tableName,COMMA,long,gid,RPAREN,LBRACE,MyLogger,logger,EQ,MyLogger,DOT,getInstance,LPAREN,RPAREN,SEMI,logger,DOT,writeLog,LPAREN,Level,DOT,ALL,COMMA,""Method createNewName, tableName:"",PLUS,tableName,PLUS,"", gid:"",PLUS,gid,RPAREN,SEMI,String,compositeTableName,EQ,tableName,PLUS,gid,SEMI,int,hash,EQ,compositeTableName,DOT,hashCode,LPAREN,RPAREN,SEMI,IF,LPAREN,hash,LT,0,RPAREN,hash,EQ,SUB,1,<MASK>,hash,SEMI,String,newTableName,EQ,tableName,PLUS,""_"",PLUS,hash,SEMI,RETURN,newTableName,SEMI,RBRACE","	public static String createNewName(String tableName, long gid) {
,
,		MyLogger logger = MyLogger.getInstance();
,		logger.writeLog(Level.ALL, ""Method createNewName, tableName:""+tableName+"", gid:""+gid);
,		
,		String compositeTableName = tableName+gid;
,		int hash = compositeTableName.hashCode();
,		if(hash < 0) hash = -1 <MASK> hash;
,		String newTableName = tableName+""_""+hash;
,		return newTableName;
,	}
"
9b07119d-5d87-44cb-94ac-77a9d4fc6019,54014737-9e5f-475d-af7e-4774933b623a,GT,"PUBLIC,void,delete,LPAREN,RPAREN,LBRACE,String,SQL0,EQ,""DELETE FROM avaluacions WHERE id="",PLUS,idAval,SEMI,client,DOT,getMysql,LPAREN,RPAREN,DOT,executeUpdate,LPAREN,SQL0,RPAREN,SEMI,FOR,LPAREN,Integer,id,COLON,getIds,LPAREN,RPAREN,DOT,values,LPAREN,RPAREN,RPAREN,LBRACE,IF,LPAREN,id,<MASK>,0,RPAREN,LBRACE,String,SQL1,EQ,""DELETE FROM avaluacionsdetall WHERE id="",PLUS,id,SEMI,client,DOT,getMysql,LPAREN,RPAREN,DOT,executeUpdate,LPAREN,SQL1,RPAREN,SEMI,RBRACE,RBRACE,getIds,LPAREN,RPAREN,DOT,put,LPAREN,""1"",COMMA,SUB,1,RPAREN,SEMI,getIds,LPAREN,RPAREN,DOT,put,LPAREN,""2"",COMMA,SUB,1,RPAREN,SEMI,getIds,LPAREN,RPAREN,DOT,put,LPAREN,""3"",COMMA,SUB,1,RPAREN,SEMI,RBRACE","    public void delete()
,    {
,        String SQL0 = ""DELETE FROM avaluacions WHERE id=""+idAval;
,        client.getMysql().executeUpdate(SQL0);
,        for(Integer id: getIds().values())
,        {
,            if(id<MASK>0)
,            {
,                String SQL1 = ""DELETE FROM avaluacionsdetall WHERE id=""+id;
,                client.getMysql().executeUpdate(SQL1);
,            }
,        }
,        
,        getIds().put(""1"",-1);
,        getIds().put(""2"",-1);
,        getIds().put(""3"",-1);
,    }
"
f944102f-332a-448e-b1a9-6a4145ca980d,0fb81f2a-eb90-42bc-b30a-de14d60a2a4f,LTEQ,"PUBLIC,STATIC,void,main,LPAREN,String,LBRACKET,RBRACKET,args,RPAREN,LBRACE,int,base,EQ,0,SEMI,int,exp,EQ,0,SEMI,int,potencia,EQ,1,SEMI,base,EQ,Integer,DOT,parseInt,LPAREN,JOptionPane,DOT,showInputDialog,LPAREN,""Base"",RPAREN,RPAREN,SEMI,exp,EQ,Integer,DOT,parseInt,LPAREN,JOptionPane,DOT,showInputDialog,LPAREN,""Expoente"",RPAREN,RPAREN,SEMI,IF,LPAREN,exp,<MASK>,0,RPAREN,LBRACE,JOptionPane,DOT,showMessageDialog,LPAREN,null,COMMA,""Somente n\u00FAmeros positivos e maiores que 0, por favor"",RPAREN,SEMI,System,DOT,exit,LPAREN,0,RPAREN,SEMI,RBRACE,int,counter,EQ,0,SEMI,DO,LBRACE,potencia,EQ,potencia,STAR,base,SEMI,RBRACE,WHILE,LPAREN,PLUSPLUS,counter,LT,exp,RPAREN,SEMI,JOptionPane,DOT,showMessageDialog,LPAREN,null,COMMA,base,PLUS,"" elevado a "",PLUS,exp,PLUS,"" \u00E9 igual a "",PLUS,potencia,RPAREN,SEMI,RBRACE","    public static void main(String[] args) {
,        int base = 0;
,        int exp = 0;
,        int potencia = 1;
,
,// Obter entrada do usuário para base e expoente
,        base = Integer.parseInt(JOptionPane.showInputDialog(""Base""));
,        exp = Integer.parseInt(JOptionPane.showInputDialog(""Expoente""));
,// Limitar variável exp a somente número positivos e maiores que 0
,        if (exp <MASK> 0) {
,            JOptionPane.showMessageDialog(null,
,                    ""Somente números positivos e maiores que 0, por favor"");
,            System.exit(0);
,        }
,
,// Declaração do-while para calcular a potência
,        int counter = 0;
,        do {
,            potencia = potencia * base;
,        } while (++counter < exp);
,
,// Mostrar o resultado
,        JOptionPane.showMessageDialog(null,
,                base + "" elevado a "" + exp + "" é igual a "" + potencia);
,    }
"
cc1c4187-1182-4cd3-a559-9895584ed311,363cf98f-586b-4485-a815-45ece57ee0a9,GTEQ,"PUBLIC,int,countBuses,LPAREN,int,speed,COMMA,int,LBRACKET,RBRACKET,positions,COMMA,int,LBRACKET,RBRACKET,velocities,COMMA,int,time,RPAREN,LBRACE,int,count,EQ,0,SEMI,int,carPosition,EQ,speed,STAR,time,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,positions,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,int,busPosition,EQ,positions,LBRACKET,i,RBRACKET,PLUS,velocities,LBRACKET,i,RBRACKET,STAR,time,SEMI,IF,LPAREN,positions,LBRACKET,i,RBRACKET,EQEQ,0,RPAREN,count,PLUSPLUS,SEMI,ELSE,IF,LPAREN,carPosition,<MASK>,busPosition,RPAREN,count,PLUSPLUS,SEMI,RBRACE,RETURN,count,SEMI,RBRACE","	public int countBuses(int speed, int[] positions, int[] velocities, int time) {
,		int count=0;
,		int carPosition=speed*time;
,		for(int i=0;i<positions.length;i++){
,			int busPosition=positions[i]+velocities[i]*time;
,			//we go along the bus
,			if(positions[i]==0)count++;
,			else if(carPosition<MASK>busPosition)count++;
,			
,		}
,		return count;
,	}
"
b6d08fd3-a673-4a77-8d9f-bf9a01922a85,85956bae-c6f6-488b-a707-8948b360b895,SLASH,"PUBLIC,Vector3d,scaleToLength,LPAREN,float,length,RPAREN,LBRACE,scaleBy,LPAREN,length,<MASK>,this,DOT,length,LPAREN,RPAREN,RPAREN,SEMI,RETURN,this,SEMI,RBRACE","    public Vector3d scaleToLength(float length) {
,        scaleBy(length <MASK> this.length());
,        return this;
,    }
"
41e528e8-032e-4c9c-aedf-8273f5e22315,988017c2-b563-402b-8ec2-30320ea00591,PERCENT,"PUBLIC,STATIC,void,main,LPAREN,String,LBRACKET,RBRACKET,args,RPAREN,LBRACE,Scanner,sc,EQ,NEW,Scanner,LPAREN,System,DOT,in,RPAREN,SEMI,long,first,EQ,sc,DOT,nextLong,LPAREN,RPAREN,SEMI,long,second,EQ,sc,DOT,nextLong,LPAREN,RPAREN,SEMI,IF,LPAREN,first,LT,second,RPAREN,LBRACE,long,temp,EQ,first,SEMI,first,EQ,second,SEMI,second,EQ,temp,SEMI,RBRACE,long,divider,SEMI,FOR,LPAREN,divider,EQ,1,SEMI,second,SLASH,divider,BANGEQ,0,SEMI,divider,STAREQ,10,RPAREN,LBRACE,RBRACE,System,DOT,out,DOT,println,LPAREN,""divider = "",PLUS,divider,RPAREN,SEMI,boolean,exists,EQ,false,SEMI,WHILE,LPAREN,first,GTEQ,divider,SLASH,10,RPAREN,LBRACE,IF,LPAREN,LPAREN,first,<MASK>,divider,EQEQ,second,RPAREN,BARBAR,LPAREN,first,LT,divider,AMPAMP,first,EQEQ,second,RPAREN,RPAREN,LBRACE,exists,EQ,true,SEMI,BREAK,SEMI,RBRACE,ELSE,LBRACE,first,EQ,first,SLASH,10,SEMI,RBRACE,RBRACE,IF,LPAREN,exists,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""Exists"",RPAREN,SEMI,RBRACE,ELSE,LBRACE,System,DOT,out,DOT,println,LPAREN,""Doesn't exist"",RPAREN,SEMI,RBRACE,RBRACE","	public static void main(String[] args) {
,		Scanner sc = new Scanner(System.in);
,		long first = sc.nextLong();
,		long second = sc.nextLong();
,
,		if (first < second) {
,			long temp = first;
,			first = second;
,			second = temp;
,		}
,
,		// counting the number of digits in the smaller ones
,		long divider;
,		for (divider = 1; second / divider != 0; divider *= 10) {
,		}
,		System.out.println(""divider = "" + divider);
,
,		boolean exists = false;
,		while (first >= divider / 10) {
,			if ((first <MASK> divider == second)
,					|| (first < divider && first == second)) {
,				exists = true;
,				break;
,			} else {
,				first = first / 10;
,			}
,		}
,
,		if (exists) {
,			System.out.println(""Exists"");
,		} else {
,			System.out.println(""Doesn't exist"");
,		}
,
,	}
"
9c253d2b-e626-4f21-a850-dfb022369350,5d273bde-ced8-4363-b598-a2f07dc570b1,LTEQ,"PUBLIC,double,interp,LPAREN,FINAL,double,LBRACKET,RBRACKET,xstar,COMMA,FINAL,doubleW,esterr,RPAREN,LBRACE,lastval,EQ,interp,LPAREN,xstar,RPAREN,SEMI,vi,DOT,solve,LPAREN,vstar,COMMA,dstar,RPAREN,SEMI,lasterr,EQ,0,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,npt,SEMI,i,PLUSPLUS,RPAREN,lasterr,PLUSEQ,dstar,LBRACKET,i,RBRACKET,STAR,vstar,LBRACKET,i,RBRACKET,SEMI,esterr,DOT,val,EQ,lasterr,EQ,sqrt,LPAREN,max,LPAREN,0.,COMMA,lasterr,RPAREN,RPAREN,SEMI,RETURN,lastval,SEMI,RBRACE","  public double interp(final double[] xstar, final doubleW esterr) {
,    lastval = interp(xstar);
,    vi.solve(vstar,dstar);
,    lasterr = 0;
,    for (int i=0;i<MASK>npt;i++) lasterr += dstar[i]*vstar[i];
,    esterr.val = lasterr = sqrt(max(0.,lasterr));
,    return lastval;
,  }
"
113c5414-6c55-466b-b879-a350ab6e0ca2,c9c95934-2581-41ae-aed2-eec5ed35f07d,EQ,"PUBLIC,void,setSightRange,LPAREN,int,range,RPAREN,LBRACE,sightRange,<MASK>,range,SEMI,RBRACE","	public void setSightRange(int range) {
,		sightRange <MASK> range;
,	}
"
53b01a43-524f-4a59-a0a3-1bf88ad074c2,843e5f09-2577-4df3-9766-ca287cedf4ae,PERCENT,"PRIVATE,STATIC,int,mod,LPAREN,int,x,RPAREN,LBRACE,RETURN,LPAREN,LPAREN,x,RPAREN,<MASK>,radix,RPAREN,SEMI,RBRACE","    private static int mod(int x)
,    {
,        return ((x) <MASK> radix);
,    }
"
33a4da69-3c87-4617-ac37-92c20f86f62c,318e1975-1bac-4bbd-8d29-3974f2db8ab6,PLUS,"PRIVATE,void,setFile,LPAREN,File,ftmp,RPAREN,LBRACE,file,EQ,ftmp,SEMI,IF,LPAREN,file,EQEQ,null,RPAREN,setTitle,LPAREN,""Empty - simu"",RPAREN,SEMI,ELSE,LBRACE,setTitle,LPAREN,file,DOT,getName,LPAREN,RPAREN,<MASK>,"" - simu"",RPAREN,SEMI,RBRACE,RBRACE","	private void setFile(File ftmp) {
,		file = ftmp;
,		if (file == null)
,			setTitle(""Empty - simu"");
,		else {
,			setTitle(file.getName() <MASK> "" - simu"");
,		}
,	}
"
ab6b11e7-9e21-4611-901d-21ca99a5907d,8f75cfc2-29c2-4ca7-a91c-5e496f45f800,SLASH,"PROTECTED,FINAL,boolean,isMinRaCollision,LPAREN,RPAREN,LBRACE,RETURN,LPAREN,raUser,SUB,sizeArray,LBRACKET,0,RBRACKET,<MASK>,2.0,LTEQ,SimpleSpectralAccessProtocolLibrary,DOT,MIN_VALUE_FOR_RIGHT_ASCENSION,RPAREN,QUES,true,COLON,false,SEMI,RBRACE","  protected final boolean isMinRaCollision() {
,    return (raUser - sizeArray[0] <MASK> 2.0 <= SimpleSpectralAccessProtocolLibrary.MIN_VALUE_FOR_RIGHT_ASCENSION) ? true : false;
,  }
"
85e73bf4-198d-4e97-95ec-bfad228c11ea,c947229c-5b60-44fc-a576-b63fd4242d0d,STAR,"PUBLIC,void,emptyElement,LPAREN,String,uri,COMMA,String,name,COMMA,Map,LT,String,COMMA,String,GT,attrs,RPAREN,THROWS,SAXException,LBRACE,outputSpaces,LPAREN,indentLevel,<MASK>,INDENT,RPAREN,SEMI,outputStartElement,LPAREN,uri,COMMA,name,COMMA,attrs,RPAREN,SEMI,closeElement,LPAREN,uri,COMMA,name,RPAREN,SEMI,newLine,LPAREN,RPAREN,SEMI,RBRACE","    public void emptyElement(String uri, String name, Map<String, String> attrs) throws SAXException {
,        outputSpaces(indentLevel <MASK> INDENT);
,        outputStartElement(uri, name, attrs);
,        closeElement(uri, name);
,        newLine();
,    }
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,abc52c0c-e86d-487c-8b68-bfbdd29487e6,LT,"PRIVATE,boolean,listensToParticularProperty,LPAREN,String,deviceName,COMMA,String,propertyName,RPAREN,LBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,propertiesToListen,DOT,size,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,propertiesToListen,DOT,get,LPAREN,i,RPAREN,DOT,isProperty,LPAREN,deviceName,COMMA,propertyName,RPAREN,RPAREN,LBRACE,RETURN,true,SEMI,RBRACE,RBRACE,RETURN,false,SEMI,RBRACE","  private boolean listensToParticularProperty(String deviceName, String propertyName) {
,    for (int i = 0 ; i <MASK> propertiesToListen.size() ; i++) {
,      if (propertiesToListen.get(i).isProperty(deviceName, propertyName)) {
,        return true;
,      }
,    }
,
,    return false;
,  }
"
1b82c97a-fe19-4584-bdbc-4f13bb123c10,0f5ddb39-6078-4944-b02a-e790633b0f17,GTEQ,"PUBLIC,STATIC,void,polcoe,LPAREN,FINAL,double,LBRACKET,RBRACKET,x,COMMA,FINAL,double,LBRACKET,RBRACKET,y,COMMA,FINAL,double,LBRACKET,RBRACKET,cof,RPAREN,LBRACE,int,k,COMMA,j,COMMA,i,COMMA,n,EQ,x,DOT,length,SEMI,double,phi,COMMA,ff,COMMA,b,SEMI,FINAL,double,LBRACKET,RBRACKET,s,EQ,doub_vec,LPAREN,n,RPAREN,SEMI,FOR,LPAREN,i,EQ,0,SEMI,i,LT,n,SEMI,i,PLUSPLUS,RPAREN,s,LBRACKET,i,RBRACKET,EQ,cof,LBRACKET,i,RBRACKET,EQ,0.0,SEMI,s,LBRACKET,n,SUB,1,RBRACKET,EQ,SUB,x,LBRACKET,0,RBRACKET,SEMI,FOR,LPAREN,i,EQ,1,SEMI,i,LT,n,SEMI,i,PLUSPLUS,RPAREN,LBRACE,FOR,LPAREN,j,EQ,n,SUB,1,SUB,i,SEMI,j,LT,n,SUB,1,SEMI,j,PLUSPLUS,RPAREN,s,LBRACKET,j,RBRACKET,SUBEQ,x,LBRACKET,i,RBRACKET,STAR,s,LBRACKET,j,PLUS,1,RBRACKET,SEMI,s,LBRACKET,n,SUB,1,RBRACKET,SUBEQ,x,LBRACKET,i,RBRACKET,SEMI,RBRACE,FOR,LPAREN,j,EQ,0,SEMI,j,LT,n,SEMI,j,PLUSPLUS,RPAREN,LBRACE,phi,EQ,n,SEMI,FOR,LPAREN,k,EQ,n,SUB,1,SEMI,k,GT,0,SEMI,k,SUBSUB,RPAREN,phi,EQ,k,STAR,s,LBRACKET,k,RBRACKET,PLUS,x,LBRACKET,j,RBRACKET,STAR,phi,SEMI,ff,EQ,y,LBRACKET,j,RBRACKET,SLASH,phi,SEMI,b,EQ,1.0,SEMI,FOR,LPAREN,k,EQ,n,SUB,1,SEMI,k,<MASK>,0,SEMI,k,SUBSUB,RPAREN,LBRACE,cof,LBRACKET,k,RBRACKET,PLUSEQ,b,STAR,ff,SEMI,b,EQ,s,LBRACKET,k,RBRACKET,PLUS,x,LBRACKET,j,RBRACKET,STAR,b,SEMI,RBRACE,RBRACE,RBRACE","    public static void polcoe(final double[] x, final double[] y, final double[] cof) {
,        // Given arrays x[0..n-1] and y[0..n-1] containing a tabulated
,        // function yi D f.xi /, this routine returns an array of coefficients
,        // cof[0..n-1], such that yi D
,        // Pn1
,        // jD0 cofj x
,        // j
,        // i .
,
,        int k, j, i, n = x.length;
,        double phi, ff, b;
,        final double[] s = doub_vec(n);
,        for (i = 0; i < n; i++)
,            s[i] = cof[i] = 0.0;
,        s[n - 1] = -x[0];
,        for (i = 1; i < n; i++) { // Coefficients si of the master polynomial
,                                  // P.x/ are
,            for (j = n - 1 - i; j < n - 1; j++)
,                // found by recurrence.
,                s[j] -= x[i] * s[j + 1];
,            s[n - 1] -= x[i];
,        }
,        for (j = 0; j < n; j++) {
,            phi = n;
,            for (k = n - 1; k > 0; k--)
,                // The quantity phi D
,                // Q
,                // j�k.xj  xk/ is found as a
,                phi = k * s[k] + x[j] * phi; // derivative of P.xj /.
,            ff = y[j] / phi;
,            b = 1.0; // Coefficients of polynomials in each term of the
,            // Lagrange formula are found by synthetic division of
,            // P.x/ by .x  xj /. The solution ck is accumulated.
,            for (k = n - 1; k <MASK> 0; k--) {
,                cof[k] += b * ff;
,                b = s[k] + x[j] * b;
,            }
,        }
,    }
"
7bd76208-9b34-4151-9ec4-57c6c52e0fcf,d3e012a9-02ea-4464-9254-51c475a67481,GTEQ,"PUBLIC,void,closeUpvalues,LPAREN,int,index,RPAREN,LBRACE,int,loopIndex,EQ,upvalues,DOT,size,LPAREN,RPAREN,SEMI,WHILE,LPAREN,SUBSUB,loopIndex,<MASK>,0,RPAREN,LBRACE,UpValue,upvalue,EQ,upvalues,DOT,elementAt,LPAREN,loopIndex,RPAREN,SEMI,IF,LPAREN,upvalue,DOT,getIndex,LPAREN,RPAREN,LT,index,RPAREN,RETURN,SEMI,upvalue,DOT,close,LPAREN,RPAREN,SEMI,upvalues,DOT,removeElementAt,LPAREN,loopIndex,RPAREN,SEMI,RBRACE,RBRACE","	public void closeUpvalues( int index ){
,		int loopIndex = upvalues.size();
,		
,		while( --loopIndex <MASK> 0 ){
,			UpValue upvalue = upvalues.elementAt(loopIndex);
,			
,			if ( upvalue.getIndex() < index )
,				return;
,			
,			upvalue.close();
,			upvalues.removeElementAt(loopIndex);
,		}
,	}
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,ecc49631-63ee-493e-a4ce-7a8d005a6314,SUB,"PRIVATE,void,FindObjectInRow,LPAREN,ABObject,target,COMMA,List,LT,ABObject,GT,objects,COMMA,List,LT,ABObject,GT,directList,RPAREN,LBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,objects,DOT,size,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,directList,DOT,size,LPAREN,RPAREN,LTEQ,3,RPAREN,LBRACE,ABObject,x,EQ,objects,DOT,get,LPAREN,i,RPAREN,SEMI,IF,LPAREN,x,DOT,getCenterX,LPAREN,RPAREN,GTEQ,target,DOT,getMaxX,LPAREN,RPAREN,AMPAMP,x,DOT,getCenterX,LPAREN,RPAREN,LTEQ,target,DOT,getMaxX,LPAREN,RPAREN,PLUS,10,RPAREN,LBRACE,IF,LPAREN,x,DOT,getCenterY,LPAREN,RPAREN,GTEQ,target,DOT,getMinY,LPAREN,RPAREN,<MASK>,10,AMPAMP,x,DOT,getCenterY,LPAREN,RPAREN,LTEQ,target,DOT,getMaxY,LPAREN,RPAREN,PLUS,10,RPAREN,LBRACE,directList,DOT,add,LPAREN,x,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,ELSE,BREAK,SEMI,RBRACE,RBRACE","	private void FindObjectInRow (ABObject target, List<ABObject> objects, List<ABObject> directList)
,	{
,		for (int i = 0; i < objects.size(); i++)
,		{
,			if (directList.size() <= 3)
,			{
,				ABObject x = objects.get(i);
,				if (x.getCenterX() >= target.getMaxX() && x.getCenterX() <= target.getMaxX() + 10)
,				{
,					if (x.getCenterY() >= target.getMinY()<MASK>10 && x.getCenterY() <= target.getMaxY()+10)
,					{
,						directList.add(x);
,					}
,				}
,			}
,			else
,				break;
,		}
,	}
"
7a6d4ee7-a11c-445d-8f58-7963e611bee0,70d5be12-43a7-4c11-8921-0a01497cc266,BANGEQ,"PUBLIC,STATIC,String,LBRACKET,RBRACKET,readFile,LPAREN,File,file,RPAREN,LBRACE,List,LT,String,GT,list,EQ,NEW,ArrayList,LT,String,GT,LPAREN,RPAREN,SEMI,TRY,LBRACE,BufferedReader,br,EQ,NEW,BufferedReader,LPAREN,NEW,FileReader,LPAREN,file,RPAREN,RPAREN,SEMI,FOR,LPAREN,String,line,SEMI,LPAREN,line,EQ,br,DOT,readLine,LPAREN,RPAREN,RPAREN,<MASK>,null,SEMI,RPAREN,LBRACE,list,DOT,add,LPAREN,line,RPAREN,SEMI,RBRACE,br,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,FileNotFoundException,e,RPAREN,LBRACE,RBRACE,CATCH,LPAREN,IOException,e,RPAREN,LBRACE,RBRACE,RETURN,list,DOT,toArray,LPAREN,NEW,String,LBRACKET,list,DOT,size,LPAREN,RPAREN,RBRACKET,RPAREN,SEMI,RBRACE","	public static String[] readFile(File file)
,	{
,		List<String> list = new ArrayList<String>();
,		try
,		{
,			BufferedReader br = new BufferedReader(new FileReader(file));
,		    for(String line; (line = br.readLine()) <MASK> null; ) 
,		    {
,		        list.add(line);
,		    }
,		    br.close();
,		} 
,		catch (FileNotFoundException e) {}
,		catch (IOException e) {}
,		
,		return list.toArray(new String[list.size()]);
,	}
"
113c5414-6c55-466b-b879-a350ab6e0ca2,d29eb781-a2ab-46e1-ae48-09f6771a8714,EQ,"PUBLIC,void,setNaturalAC,LPAREN,int,naturalAC,RPAREN,LBRACE,this,DOT,naturalAC,<MASK>,naturalAC,SEMI,RBRACE","	public void setNaturalAC(int naturalAC) {
,		this.naturalAC <MASK> naturalAC;
,	}
"
7bd76208-9b34-4151-9ec4-57c6c52e0fcf,b1c94da1-9a6b-427f-9796-716a6dafed8e,GTEQ,"PUBLIC,Object,call,LPAREN,Object,func,COMMA,Object,ELLIPSIS,args,RPAREN,LBRACE,int,top,EQ,coroutine,DOT,getTop,LPAREN,RPAREN,SEMI,int,argCount,EQ,args,DOT,length,SEMI,coroutine,DOT,setTop,LPAREN,top,PLUS,argCount,PLUS,1,RPAREN,SEMI,coroutine,DOT,stack,LBRACKET,top,RBRACKET,EQ,func,SEMI,System,DOT,arraycopy,LPAREN,args,COMMA,0,COMMA,coroutine,DOT,stack,COMMA,top,PLUS,1,COMMA,argCount,RPAREN,SEMI,Object,result,EQ,LPAREN,call,LPAREN,argCount,RPAREN,<MASK>,1,QUES,coroutine,DOT,stack,LBRACKET,top,RBRACKET,COLON,null,RPAREN,SEMI,coroutine,DOT,setTop,LPAREN,top,RPAREN,SEMI,RETURN,result,SEMI,RBRACE","	public Object call( Object func, Object ... args ){
,		int top 		= coroutine.getTop();
,		int argCount	= args.length;
,		
,		coroutine.setTop( top + argCount +1 );
,		coroutine.stack[top] = func;
,		
,		System.arraycopy(args, 0, coroutine.stack, top +1, argCount);
,		
,		Object result = ( call(argCount) <MASK> 1 ? coroutine.stack[top] : null );
,		
,		coroutine.setTop(top);
,		return result;
,	}
"
12ebe684-3f3f-4621-9ee2-64477080ca9b,e5f3c01e-d804-4ed5-b6a9-bd191dbed11f,PERCENT,"PUBLIC,boolean,pad,LPAREN,int,factor,RPAREN,THROWS,IOException,LBRACE,int,padding,EQ,factor,SUB,LPAREN,int,RPAREN,LPAREN,this,DOT,nrBits,<MASK>,factor,RPAREN,SEMI,boolean,result,EQ,true,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,padding,SEMI,i,PLUSEQ,1,RPAREN,LBRACE,IF,LPAREN,bit,LPAREN,RPAREN,RPAREN,LBRACE,result,EQ,false,SEMI,RBRACE,RBRACE,RETURN,result,SEMI,RBRACE","    public boolean pad(int factor) throws IOException {
,        int padding = factor - (int) (this.nrBits <MASK> factor);
,        boolean result = true;
,
,        for (int i = 0; i < padding; i += 1) {
,            if (bit()) {
,                result = false;
,            }
,        }
,        return result;
,    }
"
996c2181-63de-4cd4-a997-594ad56489d6,272ee6c2-f103-4b82-901b-4405c926d496,SLASH,"PUBLIC,STATIC,int,LBRACKET,RBRACKET,binInsertSort,LPAREN,int,LBRACKET,RBRACKET,arr,RPAREN,LBRACE,arrTemp,EQ,arr,DOT,clone,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,arrTemp,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,int,temp,EQ,arrTemp,LBRACKET,i,RBRACKET,SEMI,int,left,EQ,0,SEMI,int,right,EQ,i,SUB,1,SEMI,int,mid,EQ,0,SEMI,WHILE,LPAREN,left,LTEQ,right,RPAREN,LBRACE,mid,EQ,LPAREN,left,PLUS,right,RPAREN,<MASK>,2,SEMI,IF,LPAREN,temp,LT,arrTemp,LBRACKET,mid,RBRACKET,RPAREN,LBRACE,right,EQ,mid,SUB,1,SEMI,RBRACE,ELSE,LBRACE,left,EQ,mid,PLUS,1,SEMI,RBRACE,RBRACE,FOR,LPAREN,int,j,EQ,i,SUB,1,SEMI,j,GTEQ,left,SEMI,j,SUBSUB,RPAREN,LBRACE,arrTemp,LBRACKET,j,PLUS,1,RBRACKET,EQ,arrTemp,LBRACKET,j,RBRACKET,SEMI,RBRACE,IF,LPAREN,left,BANGEQ,i,RPAREN,LBRACE,arrTemp,LBRACKET,left,RBRACKET,EQ,temp,SEMI,RBRACE,RBRACE,RETURN,arrTemp,SEMI,RBRACE","	public static int[] binInsertSort(int[] arr){
,		arrTemp = arr.clone();
,		for (int i = 0; i < arrTemp.length; i++) {
,            int temp = arrTemp[i];
,            int left = 0;
,            int right = i-1;
,            int mid = 0;
,            while(left<=right){
,                mid = (left+right)<MASK>2;
,                if(temp<arrTemp[mid]){
,                    right = mid-1;
,                }else{
,                    left = mid+1;
,                }
,            }
,            for (int j = i-1; j >= left; j--) {
,            	arrTemp[j+1] = arrTemp[j];
,            }
,            if(left != i){
,            	arrTemp[left] = temp;
,            }
,        }
,		return arrTemp;
,	}
"
9b07119d-5d87-44cb-94ac-77a9d4fc6019,e91a8c20-c455-4de5-8a68-c0ed861d174f,GT,"PUBLIC,void,deleteFromDB,LPAREN,RPAREN,LBRACE,String,SQL1,EQ,""INSERT INTO `"",PLUS,ICoreData,DOT,core_mysqlDBPrefix,PLUS,""`.fitxa_alumne_deleted (SELECT * FROM `"",PLUS,ICoreData,DOT,core_mysqlDBPrefix,PLUS,""`.fitxa_alumne_curs "",PLUS,"" WHERE Exp_FK_ID='"",PLUS,exp_FK_ID,PLUS,""' "",PLUS,"" AND Any_academic='"",PLUS,any_academic,PLUS,""')"",SEMI,int,nup,EQ,client,DOT,getMysql,LPAREN,RPAREN,DOT,executeUpdate,LPAREN,SQL1,RPAREN,SEMI,IF,LPAREN,nup,<MASK>,0,RPAREN,LBRACE,SQL1,EQ,""DELETE FROM `"",PLUS,ICoreData,DOT,core_mysqlDBPrefix,PLUS,""`.fitxa_alumne_curs WHERE Exp_FK_ID='"",PLUS,exp_FK_ID,PLUS,""' "",PLUS,"" AND Any_academic='"",PLUS,any_academic,PLUS,""'"",SEMI,nup,EQ,client,DOT,getMysql,LPAREN,RPAREN,DOT,executeUpdate,LPAREN,SQL1,RPAREN,SEMI,RBRACE,RBRACE","    public void deleteFromDB()
,    {
,        //Farem un safe delete que consisteix en moure la fitxa dins d'una taula ""TRASH""
,        String SQL1 = ""INSERT INTO `""+ICoreData.core_mysqlDBPrefix+""`.fitxa_alumne_deleted (SELECT * FROM `""+ICoreData.core_mysqlDBPrefix+""`.fitxa_alumne_curs ""
,                + "" WHERE Exp_FK_ID='""+exp_FK_ID+""' ""
,                +"" AND Any_academic='""+ any_academic +""')"";
,        int nup = client.getMysql().executeUpdate(SQL1);
,
,
,        //si s'ha copiat, podem esborrar
,        if(nup<MASK>0)
,        {
,                SQL1 = ""DELETE FROM `""+ICoreData.core_mysqlDBPrefix+""`.fitxa_alumne_curs WHERE Exp_FK_ID='""+exp_FK_ID+""' ""
,                        +"" AND Any_academic='""+ any_academic +""'"";
,                nup = client.getMysql().executeUpdate(SQL1);
,        }
,
,
,    }
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,89048fba-c9bd-45e7-b6a0-fb1c4d48a660,LT,"PUBLIC,void,drawObjectsWithID,LPAREN,BufferedImage,canvas,COMMA,boolean,fill,RPAREN,LBRACE,BufferedImage,image,EQ,NEW,BufferedImage,LPAREN,_width,COMMA,_height,COMMA,BufferedImage,DOT,TYPE_INT_RGB,RPAREN,SEMI,Graphics2D,g,EQ,image,DOT,createGraphics,LPAREN,RPAREN,SEMI,g,DOT,drawImage,LPAREN,VisionUtils,DOT,convert2grey,LPAREN,canvas,RPAREN,COMMA,0,COMMA,0,COMMA,null,RPAREN,SEMI,g,DOT,setFont,LPAREN,NEW,Font,LPAREN,""TimesRoman"",COMMA,Font,DOT,PLAIN,COMMA,10,RPAREN,RPAREN,SEMI,FOR,LPAREN,int,x,EQ,0,SEMI,x,<MASK>,_width,SEMI,x,PLUSPLUS,RPAREN,LBRACE,image,DOT,setRGB,LPAREN,x,COMMA,_ground,COMMA,ff0000,RPAREN,SEMI,RBRACE,IF,LPAREN,fill,RPAREN,LBRACE,FOR,LPAREN,ConnectedComponent,d,COLON,_draw,RPAREN,d,DOT,draw,LPAREN,image,COMMA,false,COMMA,false,RPAREN,SEMI,RBRACE,FOR,LPAREN,Body,b,COLON,_drawShape,RPAREN,IF,LPAREN,b,BANGEQ,null,RPAREN,LBRACE,b,DOT,draw,LPAREN,g,COMMA,false,COMMA,Color,DOT,RED,RPAREN,SEMI,g,DOT,setColor,LPAREN,Color,DOT,black,RPAREN,SEMI,IF,LPAREN,b,DOT,id,BANGEQ,unassigned,RPAREN,LBRACE,g,DOT,drawString,LPAREN,b,DOT,id,PLUS,"""",COMMA,LPAREN,int,RPAREN,b,DOT,centerX,SUB,5,COMMA,LPAREN,int,RPAREN,b,DOT,centerY,PLUS,5,RPAREN,SEMI,RBRACE,RBRACE,canvas,DOT,createGraphics,LPAREN,RPAREN,DOT,drawImage,LPAREN,image,COMMA,0,COMMA,0,COMMA,null,RPAREN,SEMI,RBRACE","    public void drawObjectsWithID(BufferedImage canvas, boolean fill)
,    {   
,        BufferedImage image = new BufferedImage(_width, _height, BufferedImage.TYPE_INT_RGB);
,        Graphics2D g = image.createGraphics();
,        
,        g.drawImage(VisionUtils.convert2grey(canvas), 0, 0, null);    
,        g.setFont(new Font(""TimesRoman"", Font.PLAIN, 10)); 
,        // draw ground level
,        for (int x = 0; x <MASK> _width; x++)
,        {
,            image.setRGB(x, _ground, 0xff0000);
,        }
,        
,        
,        if (fill)
,        {
,            //draw connected components    
,            for (ConnectedComponent d : _draw)
,                d.draw(image, false, false);
,        }
,       // for (Body b : _drawShape)
,        for(Body b : _drawShape)
,        if (b != null)
,        	{	
,        		b.draw(g, false, Color.RED);
,        		g.setColor(Color.black);
,        		if(b.id != unassigned)
,        		{
,        			g.drawString(b.id + """", (int)b.centerX - 5, (int)b.centerY + 5);// 10: font size
,        		}
,        	}
,            
,        canvas.createGraphics().drawImage(image, 0, 0, null);
,    }
"
f29c7bcc-9c8d-4d8e-b365-55dc60e2d53e,0667cf89-7da3-4258-8f05-287b92da443c,GTEQ,"PUBLIC,production_part,rhs,LPAREN,int,indx,RPAREN,THROWS,internal_error,LBRACE,IF,LPAREN,indx,<MASK>,0,AMPAMP,indx,LT,_rhs_length,RPAREN,RETURN,_rhs,LBRACKET,indx,RBRACKET,SEMI,ELSE,THROW,NEW,internal_error,LPAREN,""Index out of range for right hand side of production"",RPAREN,SEMI,RBRACE","  public production_part rhs(int indx) throws internal_error
,    {
,      if (indx <MASK> 0 && indx < _rhs_length)
,	return _rhs[indx];
,      else
,	throw new internal_error(
,	  ""Index out of range for right hand side of production"");
,    }
"
b4c6806c-de1d-4e17-959c-99489d5dd3e8,ac9ab798-86a8-4194-93e8-50ce54637a5a,SUB,"PRIVATE,String,getEmailContent,LPAREN,SMTPSession,session,RPAREN,LBRACE,String,msgIn,EQ,"""",SEMI,ArrayList,LT,String,GT,emailData,EQ,NEW,ArrayList,LT,String,GT,LPAREN,RPAREN,SEMI,WHILE,LPAREN,BANG,msgIn,DOT,equals,LPAREN,""."",RPAREN,RPAREN,LBRACE,IF,LPAREN,msgIn,BANGEQ,"""",RPAREN,LBRACE,emailData,DOT,add,LPAREN,msgIn,RPAREN,SEMI,emailData,DOT,add,LPAREN,""\n"",RPAREN,SEMI,RBRACE,msgIn,EQ,session,DOT,getCommand,LPAREN,session,DOT,getIn,LPAREN,RPAREN,COMMA,session,DOT,getSmtpConnectLostTime,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,emailData,DOT,remove,LPAREN,emailData,DOT,size,LPAREN,RPAREN,<MASK>,1,RPAREN,SEMI,StringBuffer,content,EQ,NEW,StringBuffer,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,emailData,DOT,size,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,content,DOT,append,LPAREN,emailData,DOT,get,LPAREN,i,RPAREN,RPAREN,SEMI,RBRACE,RETURN,content,DOT,toString,LPAREN,RPAREN,SEMI,RBRACE","	private String getEmailContent(SMTPSession session) {
,		String msgIn = """";
,		ArrayList<String> emailData = new ArrayList<String>();
,		while (!msgIn.equals(""."")) {
,			if (msgIn != """") {
,				emailData.add(msgIn);
,				emailData.add(""\n"");
,			}
,			msgIn = session.getCommand(session.getIn(),
,					session.getSmtpConnectLostTime());
,		}
,		emailData.remove(emailData.size() <MASK> 1);
,
,		// 读取内容完毕
,		StringBuffer content = new StringBuffer();
,		for (int i = 0; i < emailData.size(); i++) {
,			content.append(emailData.get(i));
,		}
,		return content.toString();
,	}
"
2170437a-9f53-47a2-b3cb-257eca2eb4ab,f4fdae2e-fa3b-46c8-a165-ff7e9105a835,EQEQ,"PUBLIC,boolean,equals,LPAREN,User,user,RPAREN,LBRACE,RETURN,LPAREN,this,DOT,userID,<MASK>,user,DOT,getUserID,LPAREN,RPAREN,BARBAR,this,DOT,userName,DOT,equals,LPAREN,user,DOT,getUserName,LPAREN,RPAREN,RPAREN,RPAREN,SEMI,RBRACE","	public boolean equals(User user)
,	{
,		return (this.userID <MASK> user.getUserID() || this.userName.equals(user.getUserName()));
,	}
"
113c5414-6c55-466b-b879-a350ab6e0ca2,dc9d5e8c-c417-4eaa-8540-68b8c7481ea6,EQ,"PUBLIC,void,setMinDamage,LPAREN,int,minDamage,RPAREN,LBRACE,this,DOT,minDamage,<MASK>,minDamage,SEMI,RBRACE","	public void setMinDamage(int minDamage) {
,		this.minDamage <MASK> minDamage;
,	}
"
2170437a-9f53-47a2-b3cb-257eca2eb4ab,e73be7d3-0649-41cd-a192-478f02440094,EQEQ,"PRIVATE,void,setCreator,LPAREN,User,creator,RPAREN,LBRACE,IF,LPAREN,creator,<MASK>,null,RPAREN,LBRACE,THROW,NEW,IllegalArgumentException,LPAREN,""Creator cannot be null!"",RPAREN,SEMI,RBRACE,this,DOT,creator,EQ,creator,SEMI,RBRACE","	private void setCreator(User creator)
,	{
,		if (creator <MASK> null)
,		{
,			throw new IllegalArgumentException(""Creator cannot be null!"");
,		}
,		this.creator = creator;
,	}
"
113c5414-6c55-466b-b879-a350ab6e0ca2,c961ad05-2ea6-40e9-bee5-d5e29de351bb,EQ,"PUBLIC,void,setBaseMeleeDescription,LPAREN,String,baseMeleeDescription,RPAREN,LBRACE,this,DOT,baseMeleeDescription,<MASK>,baseMeleeDescription,SEMI,RBRACE","	public void setBaseMeleeDescription(String baseMeleeDescription) {
,		this.baseMeleeDescription <MASK> baseMeleeDescription;
,	}
"
7adec7d8-cee7-4225-a9f6-43a8dd4e76a6,160d8956-f87f-4ef6-a2ed-f9c6bfc512a4,STAR,"PUBLIC,void,LimitSell,LPAREN,String,product,COMMA,String,strTime,COMMA,double,limitPrice,COMMA,int,amount,RPAREN,LBRACE,TRY,LBRACE,SimpleDateFormat,ft,EQ,NEW,SimpleDateFormat,LPAREN,""yyyy-MM-dd HH:mm:ss"",RPAREN,SEMI,Date,time,EQ,ft,DOT,parse,LPAREN,strTime,RPAREN,SEMI,PendingOrder,po,EQ,NEW,PendingOrder,LPAREN,this,DOT,account,COMMA,time,COMMA,product,COMMA,limitPrice,COMMA,amount,<MASK>,SUB,1,COMMA,""limit"",RPAREN,SEMI,Transaction,tx,EQ,session,DOT,beginTransaction,LPAREN,RPAREN,SEMI,session,DOT,save,LPAREN,po,RPAREN,SEMI,tx,DOT,commit,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,ParseException,ex,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""Error occurred when parsing "",PLUS,strTime,RPAREN,SEMI,ex,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,RBRACE","	public void LimitSell(String product, String strTime, double limitPrice, int amount) {
,
,		try {
,			SimpleDateFormat ft = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"");
,			Date time = ft.parse(strTime);
,			PendingOrder po = new PendingOrder(this.account, time, product, limitPrice, amount <MASK> -1, ""limit"");
,			Transaction tx = session.beginTransaction();
,			session.save(po);
,			tx.commit();
,		}
,		catch(ParseException ex) {
,			System.out.println(""Error occurred when parsing "" + strTime);
,			ex.printStackTrace();
,		}
,	}
"
33a4da69-3c87-4617-ac37-92c20f86f62c,57580946-04fd-4473-b536-e2272f2446b7,PLUS,"PUBLIC,FuncOneEditor,LPAREN,String,title,COMMA,String,prefix,COMMA,String,LBRACKET,RBRACKET,formula,COMMA,FuncOne,fOne,RPAREN,LBRACE,this,DOT,setTitle,LPAREN,title,RPAREN,SEMI,this,DOT,title,EQ,title,SEMI,this,DOT,setModal,LPAREN,true,RPAREN,SEMI,addHelpMenu,LPAREN,RPAREN,SEMI,this,DOT,formula,EQ,formula,SEMI,tools,EQ,NEW,FormulaTools,LPAREN,title,<MASK>,"" equations"",COMMA,prefix,COMMA,formula,COMMA,false,COMMA,params,COMMA,fOne,DOT,getPanel,LPAREN,RPAREN,DOT,getParams,LPAREN,RPAREN,RPAREN,SEMI,add,LPAREN,tools,RPAREN,SEMI,add,LPAREN,getCtlPanel,LPAREN,RPAREN,COMMA,BorderLayout,DOT,NORTH,RPAREN,SEMI,this,DOT,setDefaultCloseOperation,LPAREN,JDialog,DOT,HIDE_ON_CLOSE,RPAREN,SEMI,pack,LPAREN,RPAREN,SEMI,this,DOT,setLocationRelativeTo,LPAREN,null,RPAREN,SEMI,RBRACE","	public FuncOneEditor(String title, String prefix, String[] formula,
,			FuncOne fOne) {
,		this.setTitle(title);
,		this.title = title;
,		this.setModal(true);
,
,		addHelpMenu();
,
,		this.formula = formula;
,		tools = new FormulaTools(title <MASK> "" equations"", prefix, formula, false,
,				params, fOne.getPanel().getParams());
,
,		add(tools);
,		add(getCtlPanel(), BorderLayout.NORTH);
,
,		this.setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);
,		pack();
,		this.setLocationRelativeTo(null);
,	}
"
56952896-479b-43e9-a9cf-c3f3bb9afc0e,e3f4a156-d8c1-4468-8616-fc9a2facb294,SUB,"MONKEYS_AT,Test,PUBLIC,void,test_getUserByOrderID,LPAREN,RPAREN,THROWS,Exception,LBRACE,UserDAO,uDAO,EQ,NEW,UserDAO,LPAREN,RPAREN,SEMI,User,newUser,EQ,NEW,User,LPAREN,<MASK>,1,COMMA,""Jim"",COMMA,""321 Test Road"",COMMA,""Columbus"",COMMA,""OH"",COMMA,""43230"",COMMA,""6148881234"",RPAREN,SEMI,int,userID,EQ,uDAO,DOT,createUser,LPAREN,newUser,RPAREN,SEMI,int,orderID,EQ,oDAO,DOT,createOrderByUserID,LPAREN,userID,RPAREN,SEMI,User,testUser,EQ,uDAO,DOT,getUserByUserID,LPAREN,userID,RPAREN,SEMI,newUser,EQ,oDAO,DOT,getUserByOrderID,LPAREN,orderID,RPAREN,SEMI,assertTrue,LPAREN,testUser,DOT,getName,LPAREN,RPAREN,DOT,equalsIgnoreCase,LPAREN,newUser,DOT,getName,LPAREN,RPAREN,RPAREN,RPAREN,SEMI,assertTrue,LPAREN,testUser,DOT,getAddress,LPAREN,RPAREN,DOT,equalsIgnoreCase,LPAREN,newUser,DOT,getAddress,LPAREN,RPAREN,RPAREN,RPAREN,SEMI,assertTrue,LPAREN,testUser,DOT,getCity,LPAREN,RPAREN,DOT,equalsIgnoreCase,LPAREN,newUser,DOT,getCity,LPAREN,RPAREN,RPAREN,RPAREN,SEMI,assertTrue,LPAREN,testUser,DOT,getState,LPAREN,RPAREN,DOT,equalsIgnoreCase,LPAREN,newUser,DOT,getState,LPAREN,RPAREN,RPAREN,RPAREN,SEMI,assertTrue,LPAREN,testUser,DOT,getZip,LPAREN,RPAREN,DOT,equalsIgnoreCase,LPAREN,newUser,DOT,getZip,LPAREN,RPAREN,RPAREN,RPAREN,SEMI,assertTrue,LPAREN,testUser,DOT,getPhone,LPAREN,RPAREN,DOT,equalsIgnoreCase,LPAREN,newUser,DOT,getPhone,LPAREN,RPAREN,RPAREN,RPAREN,SEMI,uDAO,DOT,removeUserByUserID,LPAREN,userID,RPAREN,SEMI,oDAO,DOT,removeOrderByOrderID,LPAREN,orderID,RPAREN,SEMI,uDAO,DOT,closeConnection,LPAREN,RPAREN,SEMI,RBRACE","    @Test
,    public void test_getUserByOrderID() throws Exception {
,        // create an order and a user, get the User by order id and verify it
,        UserDAO uDAO = new UserDAO();
,        User newUser = new User(<MASK>1, ""Jim"", ""321 Test Road"", ""Columbus"", ""OH"",
,                ""43230"", ""6148881234"");
,
,        int userID = uDAO.createUser(newUser);
,        int orderID = oDAO.createOrderByUserID(userID);
,
,        User testUser = uDAO.getUserByUserID(userID);
,        newUser = oDAO.getUserByOrderID(orderID);
,
,        assertTrue(testUser.getName().equalsIgnoreCase(newUser.getName()));
,        assertTrue(testUser.getAddress().equalsIgnoreCase(newUser.getAddress()));
,        assertTrue(testUser.getCity().equalsIgnoreCase(newUser.getCity()));
,        assertTrue(testUser.getState().equalsIgnoreCase(newUser.getState()));
,        assertTrue(testUser.getZip().equalsIgnoreCase(newUser.getZip()));
,        assertTrue(testUser.getPhone().equalsIgnoreCase(newUser.getPhone()));
,
,        uDAO.removeUserByUserID(userID);
,        oDAO.removeOrderByOrderID(orderID);
,
,        uDAO.closeConnection();
,
,    }
"
cc1c4187-1182-4cd3-a559-9895584ed311,d71b3ad7-bfff-4ab0-bc4e-5fd535c2cf61,GTEQ,"PUBLIC,int,count,LPAREN,String,dithered,COMMA,String,LBRACKET,RBRACKET,screen,RPAREN,LBRACE,int,count,EQ,0,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,screen,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,FOR,LPAREN,int,j,EQ,0,SEMI,j,LT,screen,LBRACKET,i,RBRACKET,DOT,length,LPAREN,RPAREN,SEMI,j,PLUSPLUS,RPAREN,LBRACE,char,pixel,EQ,screen,LBRACKET,i,RBRACKET,DOT,charAt,LPAREN,j,RPAREN,SEMI,IF,LPAREN,dithered,DOT,indexOf,LPAREN,pixel,RPAREN,<MASK>,0,RPAREN,count,PLUSPLUS,SEMI,RBRACE,RBRACE,RETURN,count,SEMI,RBRACE","	public int count(String dithered, String[] screen) {
,		int count=0;
,		for(int i=0; i<screen.length;i++){
,			for(int j=0;j<screen[i].length();j++){
,				char pixel=screen[i].charAt(j);
,				if(dithered.indexOf(pixel)<MASK>0)count++;
,			}
,		}
,		return count;
,	}
"
92951106-a87f-4e0c-9019-4852bf22d1be,4cd0058c-ace3-4940-98c1-b8640a5fc848,PLUS,"PUBLIC,MinHeap,LPAREN,int,initCapacity,RPAREN,LBRACE,this,DOT,elements,EQ,NEW,int,LBRACKET,initCapacity,<MASK>,1,RBRACKET,SEMI,this,DOT,heapSize,EQ,0,SEMI,RBRACE","    public MinHeap(int initCapacity) {
,        this.elements = new int[initCapacity <MASK> 1];
,        this.heapSize = 0;
,    }
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,8d394497-9321-48c5-a43c-2f527646c2ee,SUB,"PRIVATE,void,adjustScale,LPAREN,double,v,COMMA,double,theta,RPAREN,LBRACE,int,i,EQ,0,SEMI,WHILE,LPAREN,i,LT,_launchVelocity,DOT,length,AMPAMP,theta,GT,_launchAngle,LBRACKET,i,RBRACKET,RPAREN,i,PLUSPLUS,SEMI,IF,LPAREN,i,EQEQ,0,RPAREN,i,EQ,1,SEMI,double,temp,EQ,v,SLASH,_launchVelocity,LBRACKET,i,<MASK>,1,RBRACKET,SEMI,IF,LPAREN,temp,BANGEQ,temp,RPAREN,RETURN,SEMI,IF,LPAREN,temp,GT,1.1,BARBAR,temp,LT,0.9,RPAREN,LBRACE,RETURN,SEMI,RBRACE,IF,LPAREN,theta,GT,Math,DOT,toRadians,LPAREN,50,RPAREN,RPAREN,_scaleFactor,EQ,temp,SEMI,ELSE,IF,LPAREN,theta,GT,Math,DOT,toRadians,LPAREN,25,RPAREN,RPAREN,_scaleFactor,EQ,temp,STAR,0.6,PLUS,_scaleFactor,STAR,0.4,SEMI,RBRACE","    private void adjustScale(double v, double theta)
,    {    
,        int i = 0;
,        while (i < _launchVelocity.length && theta > _launchAngle[i])
,            i++;
,        if (i == 0)
,            i = 1;
,        
,        double temp = v / _launchVelocity[i<MASK>1];
,            
,        // avoid setting velocity to NaN
,        if (temp != temp)
,            return;
,            
,        // ignore very large changes
,        if (temp > 1.1 || temp < 0.9)
,           {
,        	//System.out.println("" temp : "" + temp);
,        	return;
,           }
,                   
,        if (theta > Math.toRadians(50))    
,            _scaleFactor = temp;
,        else if (theta > Math.toRadians(25))
,            _scaleFactor = temp * 0.6 + _scaleFactor * 0.4;
,                            
,    }
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,579b7484-8366-435d-84b6-f49fbd23d8fd,SUB,"PUBLIC,STATIC,List,LT,ABObject,GT,Reachable,LPAREN,Vision,vision,COMMA,Point,target,COMMA,Point,releasePoint,RPAREN,LBRACE,List,LT,ABObject,GT,result,EQ,NEW,ArrayList,LT,ABObject,GT,LPAREN,RPAREN,SEMI,List,LT,Point,GT,points,EQ,tp,DOT,predictTrajectory,LPAREN,vision,DOT,findSlingshotMBR,LPAREN,RPAREN,COMMA,releasePoint,RPAREN,SEMI,FOR,LPAREN,Point,point,COLON,points,RPAREN,LBRACE,IF,LPAREN,point,DOT,x,LT,840,AMPAMP,point,DOT,y,LT,480,AMPAMP,point,DOT,y,GT,100,AMPAMP,point,DOT,x,GT,400,RPAREN,FOR,LPAREN,ABObject,ab,COLON,vision,DOT,findBlocksMBR,LPAREN,RPAREN,RPAREN,LBRACE,IF,LPAREN,LPAREN,LPAREN,ab,DOT,contains,LPAREN,point,RPAREN,AMPAMP,BANG,ab,DOT,contains,LPAREN,target,RPAREN,RPAREN,BARBAR,Math,DOT,abs,LPAREN,vision,DOT,getMBRVision,LPAREN,RPAREN,DOT,_scene,LBRACKET,point,DOT,y,RBRACKET,LBRACKET,point,DOT,x,RBRACKET,<MASK>,72,RPAREN,LT,10,RPAREN,AMPAMP,point,DOT,x,LT,target,DOT,x,RPAREN,result,DOT,add,LPAREN,ab,RPAREN,SEMI,RBRACE,RBRACE,RETURN,result,SEMI,RBRACE","	public static List<ABObject> Reachable(Vision vision, Point target, Point releasePoint) {
,		List<ABObject> result = new ArrayList<ABObject>();
,		List<Point> points = tp.predictTrajectory(vision.findSlingshotMBR(),
,				releasePoint);
,		for (Point point : points) {
,			if (point.x < 840 && point.y < 480 && point.y > 100
,					&& point.x > 400)
,				for (ABObject ab : vision.findBlocksMBR()) {
,					if (((ab.contains(point) && !ab.contains(target)) || Math
,							.abs(vision.getMBRVision()._scene[point.y][point.x] <MASK> 72) < 10)
,							&& point.x < target.x)
,						result.add(ab);
,				}
,
,		}
,		return result;
,	}
"
113c5414-6c55-466b-b879-a350ab6e0ca2,8a849b21-f947-4623-b45b-0b26441bc53e,EQ,"PUBLIC,void,setID,LPAREN,char,id,RPAREN,LBRACE,this,DOT,id,<MASK>,id,SEMI,RBRACE","	public void setID(char id) {
,		this.id <MASK> id;
,	}
"
113c5414-6c55-466b-b879-a350ab6e0ca2,a1161aff-93bb-4841-8f17-59973c7d13a6,EQ,"PUBLIC,void,setOccupant,LPAREN,Sentient,_occupant,RPAREN,LBRACE,IF,LPAREN,this,DOT,tileFree,LPAREN,RPAREN,RPAREN,LBRACE,occupant,<MASK>,_occupant,SEMI,occupant,DOT,setLocation,LPAREN,this,RPAREN,SEMI,RBRACE,RBRACE","	public void setOccupant(Sentient _occupant) {
,		if (this.tileFree()) {
,			occupant <MASK> _occupant;
,			occupant.setLocation(this);
,		}
,	}
"
2170437a-9f53-47a2-b3cb-257eca2eb4ab,8a7eb37d-4aee-456c-8da4-cad2779aa64a,EQEQ,"PUBLIC,void,setAssignedTo,LPAREN,User,assignedTo,RPAREN,LBRACE,IF,LPAREN,assignedTo,<MASK>,null,RPAREN,LBRACE,THROW,NEW,IllegalArgumentException,LPAREN,""\""Assigned to\"" user cannot be null!"",RPAREN,SEMI,RBRACE,this,DOT,assignedTo,EQ,assignedTo,SEMI,RBRACE","	public void setAssignedTo(User assignedTo)
,	{
,		if (assignedTo <MASK> null)
,		{
,			throw new IllegalArgumentException(
,					""\""Assigned to\"" user cannot be null!"");
,		}
,		this.assignedTo = assignedTo;
,	}
"
1b82c97a-fe19-4584-bdbc-4f13bb123c10,c01f6436-16c2-4d00-9030-07f37f53d1f8,GTEQ,"PUBLIC,double,Next_Gaussian,LPAREN,RPAREN,LBRACE,int,iset,EQ,0,SEMI,double,gset,EQ,0,SEMI,double,fac,COMMA,rsq,COMMA,v1,COMMA,v2,SEMI,Random,r,EQ,NEW,Random,LPAREN,RPAREN,SEMI,IF,LPAREN,iset,EQEQ,0,RPAREN,LBRACE,DO,LBRACE,v1,EQ,2.0,STAR,r,DOT,nextDouble,LPAREN,RPAREN,SUB,1.0,SEMI,v2,EQ,2.0,STAR,r,DOT,nextDouble,LPAREN,RPAREN,SUB,1.0,SEMI,rsq,EQ,v1,STAR,v1,PLUS,v2,STAR,v2,SEMI,RBRACE,WHILE,LPAREN,rsq,<MASK>,1.0,BARBAR,rsq,EQEQ,0.0,RPAREN,SEMI,fac,EQ,Math,DOT,sqrt,LPAREN,SUB,2.0,STAR,Math,DOT,log,LPAREN,rsq,RPAREN,SLASH,LPAREN,double,RPAREN,rsq,RPAREN,SEMI,gset,EQ,v1,STAR,fac,SEMI,iset,EQ,1,SEMI,RETURN,v2,STAR,fac,SEMI,RBRACE,ELSE,LBRACE,iset,EQ,0,SEMI,RETURN,gset,SEMI,RBRACE,RBRACE","     public double Next_Gaussian()
,     {
,        int iset=0;
,        double gset=0;
,        double fac,rsq,v1,v2;
,        Random r= new Random();
,        if (iset==0)
,        {
,            do
,            {
,                v1=2.0*r.nextDouble()-1.0;
,                v2=2.0*r.nextDouble()-1.0;
,                rsq=v1*v1+v2*v2;
,            }
,            while (rsq<MASK>1.0||rsq==0.0);
,            fac=Math.sqrt(-2.0*Math.log(rsq)/(double)rsq);
,            gset=v1*fac;
,            iset=1;
,            return v2*fac;
,        }
,        else
,        {
,            iset=0;
,            return gset;
,        }
,     }
"
f29c7bcc-9c8d-4d8e-b365-55dc60e2d53e,b3c676b1-71aa-45f1-b03e-41ca69a7ffde,GTEQ,"PUBLIC,boolean,dot_at_end,LPAREN,RPAREN,LBRACE,RETURN,_dot_pos,<MASK>,_the_production,DOT,rhs_length,LPAREN,RPAREN,SEMI,RBRACE","  public boolean dot_at_end() 
,    {
,       return _dot_pos <MASK> _the_production.rhs_length();
,    }
"
6c241594-f2fc-4996-bfc9-c7ef863c220a,bd5c41c0-c159-4d4a-8bb8-5095108473b7,LTEQ,"PRIVATE,boolean,checkHub,LPAREN,String,type,COMMA,DeviceImpl,dev,COMMA,String,relevant,LBRACKET,RBRACKET,RPAREN,LBRACE,boolean,needUpdate,EQ,false,SEMI,boolean,reported,EQ,false,SEMI,int,ports,EQ,dev,DOT,getNumPorts,LPAREN,RPAREN,SEMI,IF,LPAREN,type,EQEQ,""add"",RPAREN,dev,DOT,updateChildren,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,port,EQ,1,SEMI,port,<MASK>,ports,SEMI,port,PLUSPLUS,RPAREN,LBRACE,DeviceImpl,child,EQ,LPAREN,DeviceImpl,RPAREN,dev,DOT,getChild,LPAREN,port,RPAREN,SEMI,int,index,SEMI,DeviceDescriptor,d,SEMI,IF,LPAREN,child,EQEQ,null,RPAREN,CONTINUE,SEMI,index,EQ,child,DOT,getAddress,LPAREN,RPAREN,SUB,1,SEMI,IF,LPAREN,type,EQEQ,""add"",AMPAMP,relevant,LBRACKET,index,RBRACKET,BANGEQ,null,RPAREN,LBRACE,IF,LPAREN,Linux,DOT,trace,RPAREN,System,DOT,err,DOT,println,LPAREN,""checkHub add, "",PLUS,"" dev"",PLUS,dev,DOT,getAddress,LPAREN,RPAREN,PLUS,"" ["",PLUS,port,PLUS,""] dev"",PLUS,LPAREN,index,PLUS,1,RPAREN,RPAREN,SEMI,added,LPAREN,child,RPAREN,SEMI,reported,EQ,true,SEMI,RBRACE,d,EQ,child,DOT,getDeviceDescriptor,LPAREN,RPAREN,SEMI,IF,LPAREN,d,DOT,getDeviceClass,LPAREN,RPAREN,EQEQ,d,DOT,CLASS_HUB,RPAREN,reported,EQ,checkHub,LPAREN,type,COMMA,child,COMMA,relevant,RPAREN,BARBAR,reported,SEMI,IF,LPAREN,type,EQEQ,""remove"",AMPAMP,relevant,LBRACKET,index,RBRACKET,EQEQ,null,RPAREN,LBRACE,IF,LPAREN,Linux,DOT,trace,RPAREN,System,DOT,err,DOT,println,LPAREN,""checkHub remove, "",PLUS,"" dev"",PLUS,dev,DOT,getAddress,LPAREN,RPAREN,PLUS,"" port"",PLUS,port,PLUS,""  = dev"",PLUS,LPAREN,index,PLUS,1,RPAREN,RPAREN,SEMI,removed,LPAREN,child,RPAREN,SEMI,devices,LBRACKET,index,RBRACKET,EQ,null,SEMI,needUpdate,EQ,true,SEMI,RBRACE,RBRACE,IF,LPAREN,needUpdate,RPAREN,dev,DOT,updateChildren,LPAREN,RPAREN,SEMI,RETURN,reported,SEMI,RBRACE","    private boolean checkHub (String type, DeviceImpl dev, String relevant [])
,    {
,	boolean	needUpdate = false;
,	boolean reported = false;
,	int	ports = dev.getNumPorts ();
,
,	if (type == ""add"")
,	    dev.updateChildren ();
,
,	for (int port = 1; port <MASK> ports; port++) {
,	    DeviceImpl		child = (DeviceImpl) dev.getChild (port);
,	    int			index;
,	    DeviceDescriptor	d;
,
,	    if (child == null)
,		continue;
,	    index = child.getAddress () - 1;
,
,	    // additions reported from root to leaves
,	    if (type == ""add"" && relevant [index] != null) {
,		if (Linux.trace)
,		    System.err.println (""checkHub add, ""
,			+ "" dev"" + dev.getAddress ()
,			+ "" ["" + port
,			+ ""] dev"" + (index + 1)
,			);
,		added (child);
,		reported = true;
,	    }
,
,	    d = child.getDeviceDescriptor ();
,	    if (d.getDeviceClass () == d.CLASS_HUB)
,		reported = checkHub (type, child, relevant) || reported;
,
,	    // removals reported from leaves to root
,	    if (type == ""remove"" && relevant [index] == null) {
,		if (Linux.trace)
,		    System.err.println (""checkHub remove, ""
,			+ "" dev"" + dev.getAddress ()
,			+ "" port"" + port
,			+ ""  = dev"" + (index + 1)
,			);
,		removed (child);
,		devices [index] = null;
,		needUpdate = true;
,	    }
,	}
,
,	// disconnect now-orphaned nodes
,	if (needUpdate)
,	    dev.updateChildren ();
,
,	return reported;
,    }
"
9b07119d-5d87-44cb-94ac-77a9d4fc6019,84bdb615-db1d-4bfa-9d2f-248135e22878,LTEQ,"PRIVATE,BeanAction,loadActionBean,LPAREN,int,idAction,RPAREN,LBRACE,BeanAction,bean,EQ,null,SEMI,IF,LPAREN,idAction,<MASK>,0,RPAREN,LBRACE,RETURN,bean,SEMI,RBRACE,String,SQL1,EQ,""SELECT * FROM tuta_actuacions_actions WHERE id="",PLUS,idAction,SEMI,TRY,LBRACE,Statement,st,EQ,client,DOT,getMysql,LPAREN,RPAREN,DOT,getConnection,LPAREN,RPAREN,DOT,createStatement,LPAREN,RPAREN,SEMI,ResultSet,rs1,EQ,st,DOT,executeQuery,LPAREN,SQL1,RPAREN,SEMI,IF,LPAREN,rs1,BANGEQ,null,AMPAMP,rs1,DOT,next,LPAREN,RPAREN,RPAREN,LBRACE,bean,EQ,NEW,BeanAction,LPAREN,RPAREN,SEMI,bean,DOT,id,EQ,idAction,SEMI,bean,DOT,dates,EQ,rs1,DOT,getString,LPAREN,""dates"",RPAREN,SEMI,bean,DOT,incidenciasSesion,EQ,rs1,DOT,getInt,LPAREN,""incidenciasSesion"",RPAREN,SEMI,bean,DOT,observaciones,EQ,rs1,DOT,getString,LPAREN,""observaciones"",RPAREN,SEMI,bean,DOT,registerIesDigital,EQ,rs1,DOT,getString,LPAREN,""registerIesDigital"",RPAREN,DOT,equalsIgnoreCase,LPAREN,""S"",RPAREN,SEMI,bean,DOT,registerSGD,EQ,rs1,DOT,getString,LPAREN,""registerSGD"",RPAREN,DOT,equalsIgnoreCase,LPAREN,""S"",RPAREN,SEMI,bean,DOT,simboloIncidencia,EQ,rs1,DOT,getString,LPAREN,""simboloIncidencia"",RPAREN,SEMI,bean,DOT,tipus,EQ,rs1,DOT,getString,LPAREN,""tipus"",RPAREN,SEMI,bean,DOT,todoElDia,EQ,rs1,DOT,getString,LPAREN,""todoElDia"",RPAREN,DOT,equalsIgnoreCase,LPAREN,""S"",RPAREN,SEMI,RBRACE,IF,LPAREN,rs1,BANGEQ,null,RPAREN,LBRACE,rs1,DOT,close,LPAREN,RPAREN,SEMI,st,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,CATCH,LPAREN,SQLException,ex,RPAREN,LBRACE,Logger,DOT,getLogger,LPAREN,FactoryRules,DOT,CLASS,DOT,getName,LPAREN,RPAREN,RPAREN,DOT,log,LPAREN,Level,DOT,SEVERE,COMMA,null,COMMA,ex,RPAREN,SEMI,RBRACE,RETURN,bean,SEMI,RBRACE","    private BeanAction loadActionBean(int idAction) {
,        
,        BeanAction bean = null;
,        
,        if(idAction<MASK>0) {
,            return bean;
,        }
,                
,        String SQL1 = ""SELECT * FROM tuta_actuacions_actions WHERE id=""+idAction;
,        try {
,        Statement st = client.getMysql().getConnection().createStatement(); 
,        ResultSet rs1 = st.executeQuery(SQL1);
,        
,
,            if (rs1 != null && rs1.next()) {
,                bean = new BeanAction();
,                bean.id = idAction;
,               bean.dates = rs1.getString(""dates"");
,               bean.incidenciasSesion = rs1.getInt(""incidenciasSesion"");
,               bean.observaciones = rs1.getString(""observaciones"");
,               bean.registerIesDigital = rs1.getString(""registerIesDigital"").equalsIgnoreCase(""S"");
,               bean.registerSGD = rs1.getString(""registerSGD"").equalsIgnoreCase(""S"");
,               bean.simboloIncidencia = rs1.getString(""simboloIncidencia"");
,               bean.tipus = rs1.getString(""tipus"");
,               bean.todoElDia = rs1.getString(""todoElDia"").equalsIgnoreCase(""S"");
,            }
,
,        if(rs1!=null) {
,                rs1.close();
,                st.close();
,            }
,        } catch (SQLException ex) {
,            Logger.getLogger(FactoryRules.class.getName()).log(Level.SEVERE, null, ex);
,        }
,
,        return bean;
,    }
"
79c4654b-aafa-4bb5-8623-742a2af23063,0fe24790-23cb-47f8-9b17-160db654c716,PERCENT,"PUBLIC,void,generateAggregatedReport,LPAREN,RPAREN,LBRACE,long,start,COMMA,end,SEMI,start,EQ,System,DOT,currentTimeMillis,LPAREN,RPAREN,SEMI,File,reportFile,EQ,NEW,File,LPAREN,reportFileName,RPAREN,SEMI,PrintWriter,reportOut,EQ,null,SEMI,boolean,once,EQ,true,SEMI,TRY,LBRACE,reportOut,EQ,NEW,PrintWriter,LPAREN,reportFile,RPAREN,SEMI,RBRACE,CATCH,LPAREN,FileNotFoundException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,reportOut,DOT,println,LPAREN,""Report Generation Time , "",PLUS,timeStamp,RPAREN,SEMI,FOR,LPAREN,int,instanceNo,EQ,0,SEMI,instanceNo,LT,instanceFiles,DOT,length,SEMI,instanceNo,PLUSPLUS,RPAREN,LBRACE,ProblemInstance,problemInstance,EQ,createProblemInstance,LPAREN,instanceFiles,LBRACKET,instanceNo,RBRACKET,COMMA,singleOutputFileName,RPAREN,SEMI,Scheme6,ga,EQ,NEW,Scheme6,LPAREN,problemInstance,RPAREN,SEMI,IF,LPAREN,once,RPAREN,LBRACE,once,EQ,false,SEMI,reportOut,DOT,format,LPAREN,""Number Of Generation, Population Size, Offspring Population Size, LoadPenalty, RouteTime Penalty\n"",RPAREN,SEMI,reportOut,DOT,format,LPAREN,""%d, %d, %d, %f, %f\n"",COMMA,ga,DOT,NUMBER_OF_GENERATION,COMMA,ga,DOT,POPULATION_SIZE,COMMA,ga,DOT,NUMBER_OF_OFFSPRING,COMMA,loadPenaltyFactor,COMMA,routeTimePenaltyFactor,RPAREN,SEMI,reportOut,DOT,println,LPAREN,RPAREN,SEMI,reportOut,DOT,println,LPAREN,RPAREN,SEMI,reportOut,DOT,format,LPAREN,""Instance Name, Min, Avg, Max, Feasible \n"",RPAREN,SEMI,RBRACE,double,min,EQ,FFFFFF,SEMI,double,max,EQ,SUB,1,SEMI,double,sum,EQ,0,SEMI,double,avg,SEMI,int,feasibleCount,EQ,0,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,runSize,SEMI,i,PLUSPLUS,RPAREN,LBRACE,Individual,sol,EQ,ga,DOT,run,LPAREN,RPAREN,SEMI,IF,LPAREN,sol,DOT,isFeasible,EQEQ,true,RPAREN,LBRACE,feasibleCount,PLUSPLUS,SEMI,RBRACE,sum,PLUSEQ,sol,DOT,costWithPenalty,SEMI,IF,LPAREN,sol,DOT,costWithPenalty,GT,max,RPAREN,max,EQ,sol,DOT,costWithPenalty,SEMI,IF,LPAREN,sol,DOT,costWithPenalty,LT,min,RPAREN,min,EQ,sol,DOT,costWithPenalty,SEMI,RBRACE,avg,EQ,sum,SLASH,runSize,SEMI,reportOut,DOT,format,LPAREN,""%s, %f, %f, %f, %d \n"",COMMA,instanceFiles,LBRACKET,instanceNo,RBRACKET,COMMA,min,COMMA,avg,COMMA,max,COMMA,feasibleCount,RPAREN,SEMI,reportOut,DOT,flush,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,format,LPAREN,""%s, %f, %f, %f, %d \n"",COMMA,instanceFiles,LBRACKET,instanceNo,RBRACKET,COMMA,min,COMMA,avg,COMMA,max,COMMA,feasibleCount,RPAREN,SEMI,RBRACE,end,EQ,System,DOT,currentTimeMillis,LPAREN,RPAREN,SEMI,long,duration,EQ,LPAREN,end,SUB,start,RPAREN,SLASH,1000,SEMI,long,minute,EQ,duration,SLASH,60,SEMI,long,seconds,EQ,duration,<MASK>,60,SEMI,reportOut,DOT,println,LPAREN,""\nELAPSED TIME : "",PLUS,minute,PLUS,"" minutes "",PLUS,seconds,PLUS,"" seconds"",RPAREN,SEMI,reportOut,DOT,flush,LPAREN,RPAREN,SEMI,reportOut,DOT,close,LPAREN,RPAREN,SEMI,RBRACE","	public void generateAggregatedReport()
,	{
,	
,		long start,end;
,		
,		start = System.currentTimeMillis();
,		
,		File reportFile = new File(reportFileName);
,		PrintWriter reportOut=null;
,		
,		boolean once= true;
,		try 
,		{
,			reportOut = new PrintWriter(reportFile);
,		} 
,		catch (FileNotFoundException e) 
,		{
,			// TODO Auto-generated catch block
,			e.printStackTrace();
,		}
,		
,		//System.out.println(timeStamp );
,		reportOut.println(""Report Generation Time , ""+timeStamp);
,		
,		for(int instanceNo=0;instanceNo<instanceFiles.length;instanceNo++)
,		{
,			ProblemInstance problemInstance = createProblemInstance(instanceFiles[instanceNo], singleOutputFileName);
,			
,			Scheme6 ga = new Scheme6(problemInstance);
,			
,			if(once)
,			{
,				once=false;
,				reportOut.format(""Number Of Generation, Population Size, Offspring Population Size, LoadPenalty, RouteTime Penalty\n"");
,				reportOut.format(""<MASK>d, %d, %d, %f, %f\n"",ga.NUMBER_OF_GENERATION,ga.POPULATION_SIZE,ga.NUMBER_OF_OFFSPRING,loadPenaltyFactor,routeTimePenaltyFactor);
,				reportOut.println();
,				
,				reportOut.println();
,				reportOut.format(""Instance Name, Min, Avg, Max, Feasible \n"");
,
,			}
,			
,			double min = 0xFFFFFF;
,			double max = -1;
,			double sum = 0;
,			double avg;
,			int feasibleCount=0;
,	
,			for(int i=0; i<runSize; i++)
,			{			
,				Individual sol = ga.run();
,				
,				if(sol.isFeasible==true)
,				{
,					feasibleCount++;
,				}
,				sum += sol.costWithPenalty;
,				if(sol.costWithPenalty>max) max = sol.costWithPenalty;
,				if(sol.costWithPenalty<min) min = sol.costWithPenalty;
,				
,					
,			}
,			avg = sum/runSize;
,		
,			reportOut.format(""%s, %f, %f, %f, %d \n"",instanceFiles[instanceNo],min,avg,max,feasibleCount);
,			reportOut.flush();
,			System.out.format(""%s, %f, %f, %f, %d \n"",instanceFiles[instanceNo],min,avg,max,feasibleCount);
,		}
,		
,		end= System.currentTimeMillis();
,		
,		long duration = (end-start) / 1000;
,		long minute =  duration/ 60;
,		long seconds = duration % 60;
,		
,		reportOut.println(""\nELAPSED TIME : "" + minute+ "" minutes ""+seconds+"" seconds"");
,		reportOut.flush();
,		reportOut.close();
,	}
"
a38046c0-b6d8-4ec9-a9da-da1e0c7511d5,79e965b8-1d95-49ef-82b2-38300d0f5a1e,SUB,"PUBLIC,boolean,checkWin,LPAREN,IPlayer,player,RPAREN,LBRACE,int,numberOfMatches,EQ,0,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,3,SEMI,i,PLUSPLUS,RPAREN,LBRACE,FOR,LPAREN,numberOfMatches,EQ,0,SEMI,numberOfMatches,LT,3,SEMI,numberOfMatches,PLUSPLUS,RPAREN,IF,LPAREN,playersPositions,LBRACKET,i,RBRACKET,LBRACKET,numberOfMatches,RBRACKET,BANGEQ,player,RPAREN,BREAK,SEMI,IF,LPAREN,numberOfMatches,EQEQ,3,RPAREN,RETURN,true,SEMI,RBRACE,FOR,LPAREN,int,j,EQ,0,SEMI,j,LT,3,SEMI,j,PLUSPLUS,RPAREN,LBRACE,FOR,LPAREN,numberOfMatches,EQ,0,SEMI,numberOfMatches,LT,3,SEMI,numberOfMatches,PLUSPLUS,RPAREN,IF,LPAREN,playersPositions,LBRACKET,numberOfMatches,RBRACKET,LBRACKET,j,RBRACKET,BANGEQ,player,RPAREN,BREAK,SEMI,IF,LPAREN,numberOfMatches,EQEQ,3,RPAREN,RETURN,true,SEMI,RBRACE,FOR,LPAREN,numberOfMatches,EQ,0,SEMI,numberOfMatches,LT,3,SEMI,numberOfMatches,PLUSPLUS,RPAREN,IF,LPAREN,playersPositions,LBRACKET,numberOfMatches,RBRACKET,LBRACKET,numberOfMatches,RBRACKET,BANGEQ,player,RPAREN,BREAK,SEMI,IF,LPAREN,numberOfMatches,EQEQ,3,RPAREN,RETURN,true,SEMI,FOR,LPAREN,numberOfMatches,EQ,0,SEMI,numberOfMatches,LT,3,SEMI,numberOfMatches,PLUSPLUS,RPAREN,IF,LPAREN,playersPositions,LBRACKET,numberOfMatches,RBRACKET,LBRACKET,2,<MASK>,numberOfMatches,RBRACKET,BANGEQ,player,RPAREN,BREAK,SEMI,IF,LPAREN,numberOfMatches,EQEQ,3,RPAREN,RETURN,true,SEMI,RETURN,false,SEMI,RBRACE","	public boolean checkWin(IPlayer player) {
,		
,		int numberOfMatches =0;
,		
,		for(int i=0;i<3;i++){
,			for(numberOfMatches=0;numberOfMatches<3;numberOfMatches++)
,				if(playersPositions[i][numberOfMatches] != player) break;
,			if(numberOfMatches==3) 
,				return true;
,		}
,		
,		for(int j=0;j<3;j++){
,			for(numberOfMatches=0;numberOfMatches<3;numberOfMatches++)
,				if(playersPositions[numberOfMatches][j] != player) break;
,			if(numberOfMatches==3) 
,				return true;
,		}
,		
,		for(numberOfMatches=0;numberOfMatches<3;numberOfMatches++)
,			if(playersPositions[numberOfMatches][numberOfMatches] != player) 
,				break;
,			
,		if(numberOfMatches==3) 
,			return true;
,				
,		for(numberOfMatches=0;numberOfMatches<3;numberOfMatches++)
,			if(playersPositions[numberOfMatches][2<MASK>numberOfMatches] != player) 
,				break;
,			
,		if(numberOfMatches==3) 
,			return true;
,		
,		return false;
,	}
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,7c8c669c-3066-45b3-a268-c154b541d411,LT,"PRIVATE,boolean,listensToParticularDevice,LPAREN,String,deviceName,RPAREN,LBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,devicesToListen,DOT,size,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,devicesToListen,DOT,get,LPAREN,i,RPAREN,DOT,isDevice,LPAREN,deviceName,RPAREN,RPAREN,LBRACE,RETURN,true,SEMI,RBRACE,RBRACE,RETURN,false,SEMI,RBRACE","  private boolean listensToParticularDevice(String deviceName) {
,    for (int i = 0 ; i <MASK> devicesToListen.size() ; i++) {
,      if (devicesToListen.get(i).isDevice(deviceName)) {
,        return true;
,      }
,    }
,
,    return false;
,  }
"
ab6b11e7-9e21-4611-901d-21ca99a5907d,2f098ce9-5c3d-4772-b55f-7c6ef3f620cb,SLASH,"PROTECTED,FINAL,boolean,isSouthPoleCollision,LPAREN,RPAREN,LBRACE,RETURN,LPAREN,decUser,SUB,sizeArray,LBRACKET,1,RBRACKET,<MASK>,2.0,LTEQ,SimpleSpectralAccessProtocolLibrary,DOT,MIN_VALUE_FOR_DECLINATION,RPAREN,QUES,true,COLON,false,SEMI,RBRACE","  protected final boolean isSouthPoleCollision() {
,    return (decUser - sizeArray[1] <MASK> 2.0 <= SimpleSpectralAccessProtocolLibrary.MIN_VALUE_FOR_DECLINATION) ? true : false;
,  }
"
113c5414-6c55-466b-b879-a350ab6e0ca2,788dd59a-fadf-494e-a46e-5ea3ec4d1e70,EQ,"PROTECTED,void,writeTile,LPAREN,int,x,COMMA,int,y,COMMA,MapTile,tile,RPAREN,LBRACE,grid,LBRACKET,x,RBRACKET,LBRACKET,y,RBRACKET,<MASK>,tile,SEMI,RBRACE","	protected void writeTile(int x, int y, MapTile tile){
,		grid[x][y] <MASK> tile;
,	}
"
cc1c4187-1182-4cd3-a559-9895584ed311,dfbd75f5-7f15-4624-844d-d44128a09dac,GTEQ,"PUBLIC,STATIC,int,getMinimumSteps,LPAREN,int,LBRACKET,RBRACKET,pos,RPAREN,LBRACE,int,LBRACKET,RBRACKET,LBRACKET,RBRACKET,steps,EQ,LBRACE,LBRACE,0,RBRACE,COMMA,LBRACE,1,RBRACE,COMMA,LBRACE,2,RBRACE,COMMA,LBRACE,1,RBRACE,COMMA,LBRACE,1,RBRACE,COMMA,LBRACE,2,RBRACE,COMMA,LBRACE,3,RBRACE,COMMA,LBRACE,2,RBRACE,RBRACE,SEMI,int,maxStep,EQ,0,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,pos,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,int,temp,EQ,steps,LBRACKET,pos,LBRACKET,i,RBRACKET,RBRACKET,LBRACKET,0,RBRACKET,SEMI,IF,LPAREN,temp,<MASK>,maxStep,RPAREN,maxStep,EQ,temp,SEMI,RBRACE,RETURN,maxStep,SEMI,RBRACE","	public static int getMinimumSteps(int[] pos){
,		int[][] steps={{0},{1},{2},{1},{1},{2},{3},{2}};
,		int maxStep=0;
,		for(int i=0;i<pos.length;i++){
,			int temp=steps[pos[i]][0];
,			
,			if(temp<MASK>maxStep)maxStep=temp;
,		}
,		return maxStep;
,	}
"
811987a2-df8f-411b-b35a-1f251eaec687,9b02af1e-4dd3-4fc7-bf9f-6876cbbc641b,SLASH,"PUBLIC,double,getValue,LPAREN,int,distance,RPAREN,LBRACE,RETURN,h,STAR,java,DOT,lang,DOT,Math,DOT,exp,LPAREN,SUB,LPAREN,java,DOT,lang,DOT,Math,DOT,pow,LPAREN,distance,COMMA,2,RPAREN,RPAREN,<MASK>,LPAREN,2,STAR,r,STAR,r,RPAREN,RPAREN,SEMI,RBRACE","    public double getValue(int distance){
,       return  h * java.lang.Math.exp(-(java.lang.Math.pow(distance,2))<MASK> (2 * r * r ));
,    }   
"
25febb02-bf0a-414d-9cae-3efcbdacd8a3,aa7c878a-70ad-4b35-afff-2406140e8fd6,GT,"PUBLIC,STATIC,boolean,hasVars,LPAREN,RPAREN,LBRACE,IF,LPAREN,variables,BANGEQ,null,AMPAMP,variables,DOT,keySet,LPAREN,RPAREN,DOT,size,LPAREN,RPAREN,<MASK>,0,RPAREN,RETURN,true,SEMI,RETURN,false,SEMI,RBRACE","	public static boolean hasVars(){
,		if(variables != null && variables.keySet().size() <MASK> 0)
,			return true;
,		return false;
,	}
"
4efd15d4-7259-49ef-bb2b-8984a1154bd6,79ffcc94-12a4-422c-bfcc-011b10522b0a,SUB,"PUBLIC,void,extract,LPAREN,String,text,COMMA,int,length,COMMA,Boolean,stopWords,COMMA,Boolean,overlap,RPAREN,THROWS,FileNotFoundException,COMMA,IOException,LBRACE,this,DOT,text,EQ,text,SEMI,this,DOT,length,EQ,length,SEMI,this,DOT,stopWords,EQ,stopWords,SEMI,this,DOT,overlap,EQ,overlap,SEMI,nGrams,EQ,NEW,LinkedList,LT,String,GT,LPAREN,RPAREN,SEMI,uniqueNGrams,EQ,NEW,LinkedList,LT,String,GT,LPAREN,RPAREN,SEMI,nGramFreqs,EQ,NEW,HashMap,LT,String,COMMA,Integer,GT,LPAREN,RPAREN,SEMI,IF,LPAREN,length,EQEQ,1,RPAREN,LBRACE,IF,LPAREN,this,DOT,stopWords,RPAREN,LBRACE,analyzer,EQ,NEW,StandardAnalyzer,LPAREN,Version,DOT,LUCENE_36,RPAREN,SEMI,RBRACE,ELSE,LBRACE,analyzer,EQ,NEW,SimpleAnalyzer,LPAREN,Version,DOT,LUCENE_36,RPAREN,SEMI,RBRACE,RBRACE,ELSE,LBRACE,IF,LPAREN,this,DOT,stopWords,RPAREN,LBRACE,analyzer,EQ,NEW,ShingleAnalyzerWrapper,LPAREN,NEW,StopAnalyzer,LPAREN,Version,DOT,LUCENE_24,RPAREN,COMMA,length,COMMA,length,COMMA,"" "",COMMA,false,COMMA,false,RPAREN,SEMI,RBRACE,ELSE,LBRACE,analyzer,EQ,NEW,ShingleAnalyzerWrapper,LPAREN,NEW,SimpleAnalyzer,LPAREN,Version,DOT,LUCENE_36,RPAREN,COMMA,length,COMMA,length,COMMA,"" "",COMMA,false,COMMA,false,RPAREN,SEMI,RBRACE,RBRACE,TokenStream,tokenStream,EQ,analyzer,DOT,tokenStream,LPAREN,""text"",COMMA,NEW,StringReader,LPAREN,this,DOT,text,RPAREN,RPAREN,SEMI,OffsetAttribute,offsetAttribute,EQ,tokenStream,DOT,addAttribute,LPAREN,OffsetAttribute,DOT,CLASS,RPAREN,SEMI,CharTermAttribute,charTermAttribute,EQ,tokenStream,DOT,addAttribute,LPAREN,CharTermAttribute,DOT,CLASS,RPAREN,SEMI,int,tokenCount,EQ,0,SEMI,WHILE,LPAREN,tokenStream,DOT,incrementToken,LPAREN,RPAREN,RPAREN,LBRACE,int,startOffset,EQ,offsetAttribute,DOT,startOffset,LPAREN,RPAREN,SEMI,int,endOffset,EQ,offsetAttribute,DOT,endOffset,LPAREN,RPAREN,SEMI,String,termToken,EQ,charTermAttribute,DOT,toString,LPAREN,RPAREN,SEMI,nGrams,DOT,add,LPAREN,termToken,RPAREN,SEMI,IF,LPAREN,BANG,overlap,RPAREN,LBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,length,<MASK>,1,SEMI,i,PLUSPLUS,RPAREN,LBRACE,tokenStream,DOT,incrementToken,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,FOR,LPAREN,String,nGram,COLON,nGrams,RPAREN,LBRACE,IF,LPAREN,nGramFreqs,DOT,containsKey,LPAREN,nGram,RPAREN,RPAREN,LBRACE,nGramFreqs,DOT,put,LPAREN,nGram,COMMA,nGramFreqs,DOT,get,LPAREN,nGram,RPAREN,PLUS,1,RPAREN,SEMI,RBRACE,ELSE,LBRACE,nGramFreqs,DOT,put,LPAREN,nGram,COMMA,1,RPAREN,SEMI,uniqueNGrams,DOT,add,LPAREN,nGram,RPAREN,SEMI,RBRACE,RBRACE,RBRACE","    public void extract(String text, int length, Boolean stopWords, Boolean overlap) throws FileNotFoundException, IOException {
,
,        this.text = text;
,        this.length = length;
,        this.stopWords = stopWords;
,        this.overlap = overlap;
,
,        nGrams = new LinkedList<String>();
,        uniqueNGrams = new LinkedList<String>();
,        nGramFreqs = new HashMap<String, Integer>();
,
,        /* If the minLength and maxLength are both 1, then we want unigrams
,         * Make use of a StopAnalyzer when stopwords should be removed
,         * Make use of a SimpleAnalyzer when stop words should be included
,         */
,        if (length == 1){
,            if (this.stopWords) {
,                analyzer = new StandardAnalyzer(Version.LUCENE_36);
,            }
,            else {
,                analyzer = new SimpleAnalyzer(Version.LUCENE_36);
,            }
,        }
,        else { //Bigger than unigrams so use ShingleAnalyzerWrapper. Once again, different analyzers depending on stop word removal
,            if (this.stopWords) {
,                analyzer = new ShingleAnalyzerWrapper(new StopAnalyzer(Version.LUCENE_24), length, length, "" "", false, false); //This is a hack to use Lucene 2.4 since in 2.4 position increments weren't preserved by default. Using a later version puts underscores (_) in the place of removed stop words.
,            }
,            else {
,                analyzer = new ShingleAnalyzerWrapper(new SimpleAnalyzer(Version.LUCENE_36), length, length, "" "", false, false);
,            }
,        }
,
,        //Code to process and extract the ngrams
,        TokenStream tokenStream = analyzer.tokenStream(""text"", new StringReader(this.text));
,        OffsetAttribute offsetAttribute = tokenStream.addAttribute(OffsetAttribute.class);
,        CharTermAttribute charTermAttribute = tokenStream.addAttribute(CharTermAttribute.class);
,
,        int tokenCount = 0;
,        while (tokenStream.incrementToken()) {
,                        
,            int startOffset = offsetAttribute.startOffset();
,            int endOffset = offsetAttribute.endOffset();
,            String termToken = charTermAttribute.toString(); //The actual token term
,            nGrams.add(termToken); //Add all ngrams to the ngram LinkedList
,            
,            //If n<MASK>grams are not allowed to overlap, then increment to point of no overlap
,            if (!overlap){
,                for (int i = 0; i < length-1; i++){
,                    tokenStream.incrementToken();
,                }
,            }
,            
,        }
,
,        //Store unique nGrams and frequencies in hash tables
,        for (String nGram : nGrams) {
,            if (nGramFreqs.containsKey(nGram)) {
,                nGramFreqs.put(nGram, nGramFreqs.get(nGram)+1);
,            }
,            else {
,                nGramFreqs.put(nGram, 1);
,                uniqueNGrams.add(nGram);
,            }
,        }
,
,    }
"
33a4da69-3c87-4617-ac37-92c20f86f62c,dc558c2f-f587-4327-9c39-af2958657483,PLUS,"PUBLIC,BlockEditor,LPAREN,String,title,COMMA,String,prefix,COMMA,String,LBRACKET,RBRACKET,formula,COMMA,String,is,COMMA,Component,parent,RPAREN,LBRACE,this,DOT,setTitle,LPAREN,title,RPAREN,SEMI,this,DOT,title,EQ,title,SEMI,this,DOT,setModal,LPAREN,true,RPAREN,SEMI,addHelpMenu,LPAREN,RPAREN,SEMI,IF,LPAREN,is,BANGEQ,null,RPAREN,LBRACE,iNumField,EQ,NEW,JTextField,LPAREN,is,RPAREN,SEMI,iNumField,DOT,setEditable,LPAREN,false,RPAREN,SEMI,RBRACE,IF,LPAREN,formula,EQEQ,null,RPAREN,formula,EQ,NEW,String,LBRACKET,RBRACKET,LBRACE,""0"",RBRACE,SEMI,this,DOT,formula,EQ,formula,SEMI,tools,EQ,NEW,FormulaTools,LPAREN,title,<MASK>,"" equations"",COMMA,prefix,COMMA,formula,COMMA,true,COMMA,params,COMMA,parent,DOT,getPanel,LPAREN,RPAREN,DOT,getParams,LPAREN,RPAREN,RPAREN,SEMI,add,LPAREN,tools,RPAREN,SEMI,add,LPAREN,getCtlPanel,LPAREN,RPAREN,COMMA,BorderLayout,DOT,NORTH,RPAREN,SEMI,this,DOT,setDefaultCloseOperation,LPAREN,JDialog,DOT,HIDE_ON_CLOSE,RPAREN,SEMI,pack,LPAREN,RPAREN,SEMI,this,DOT,setLocationRelativeTo,LPAREN,null,RPAREN,SEMI,RBRACE","	public BlockEditor(String title, String prefix, String[] formula,
,			String is, Component parent) {
,		this.setTitle(title);
,		this.title = title;
,		this.setModal(true);
,
,		addHelpMenu();
,
,		if (is != null) {
,			iNumField = new JTextField(is);
,			iNumField.setEditable(false);
,		}
,
,		if (formula == null)
,			formula = new String[] { ""0"" };
,		this.formula = formula;
,		tools = new FormulaTools(title <MASK> "" equations"", prefix, formula, true,
,				params, parent.getPanel().getParams());
,
,		add(tools);
,		add(getCtlPanel(), BorderLayout.NORTH);
,
,		this.setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);
,		pack();
,		this.setLocationRelativeTo(null);
,	}
"
09478113-8f39-4146-870b-8037a6932443,9ccab33c-8223-463b-97d9-34d8ccbd2c62,EQEQ,"PRIVATE,void,OP_LDX,LPAREN,RPAREN,LBRACE,int,iMem,EQ,readOperand,LPAREN,RPAREN,SEMI,setNFlag,LPAREN,getBit,LPAREN,iMem,COMMA,7,RPAREN,RPAREN,SEMI,setZFlag,LPAREN,iMem,<MASK>,0,RPAREN,SEMI,setX,LPAREN,iMem,RPAREN,SEMI,RBRACE","    private void OP_LDX()
,    {
,        int iMem = readOperand();
,
,        setNFlag(getBit(iMem, 7));
,        setZFlag(iMem <MASK> 0);
,
,        setX(iMem);
,    }
"
113c5414-6c55-466b-b879-a350ab6e0ca2,7fc62fee-43fe-4487-aaed-7b101d127e5a,EQ,"void,setTurnsToEat,LPAREN,int,turnsToEat,RPAREN,LBRACE,this,DOT,turnsToEat,<MASK>,turnsToEat,SEMI,RBRACE","	void setTurnsToEat(int turnsToEat) {
,		this.turnsToEat <MASK> turnsToEat;
,	}
"
56952896-479b-43e9-a9cf-c3f3bb9afc0e,3ad57d0c-6184-49a4-a56b-c3dbd9affb4a,SUB,"PRIVATE,SYNCHRONIZED,int,getCount,LPAREN,RPAREN,LBRACE,RETURN,getInventory,LPAREN,RPAREN,<MASK>,this,DOT,reservations,SEMI,RBRACE","	private synchronized int getCount(){
,		/* go get it from the database while the object is locked */
,		return getInventory() <MASK> this.reservations; // return the difference while the object is locked
,	}
"
46553d6c-dc87-4edc-9d46-5b7555c514e8,884d0dd6-675d-4876-bd34-a187b5aa9874,PERCENT,"PUBLIC,STATIC,String,show,LPAREN,byte,i,COMMA,FINAL,int,num_bits,RPAREN,LBRACE,int,num_chars,EQ,8,SLASH,num_bits,SEMI,IF,LPAREN,8,<MASK>,num_bits,EQEQ,0,RPAREN,LBRACE,SUBSUB,num_chars,SEMI,RBRACE,FINAL,char,LBRACKET,RBRACKET,buf,EQ,NEW,char,LBRACKET,num_chars,PLUS,1,RBRACKET,SEMI,FINAL,int,radix,EQ,1,LTLT,num_bits,SEMI,FINAL,long,mask,EQ,radix,SUB,1,SEMI,FOR,LPAREN,int,charPos,EQ,num_chars,SEMI,charPos,GTEQ,0,SEMI,SUBSUB,charPos,RPAREN,LBRACE,buf,LBRACKET,charPos,RBRACKET,EQ,ByteUtil,DOT,digits,LBRACKET,LPAREN,int,RPAREN,LPAREN,i,AMP,mask,RPAREN,RBRACKET,SEMI,i,GTGTGTEQ,num_bits,SEMI,RBRACE,RETURN,NEW,String,LPAREN,buf,RPAREN,SEMI,RBRACE","  public static String show( byte i, final int num_bits ) {
,    int num_chars = 8 / num_bits;
,
,    if ( 8 <MASK> num_bits == 0 ) {
,      --num_chars;
,    }
,
,    final char[] buf = new char[num_chars + 1];
,    final int radix = 1 << num_bits;
,    final long mask = radix - 1;
,
,    for ( int charPos = num_chars; charPos >= 0; --charPos ) {
,      buf[charPos] = ByteUtil.digits[(int)( i & mask )];
,      i >>>= num_bits;
,    }
,
,    return new String( buf );
,  }
"
38ed5e2e-bfac-4cc9-94e0-5ee38dabb0ca,904d6368-884e-48b7-8c50-36b7c517658d,EQEQ,"PUBLIC,boolean,equals,LPAREN,Object,obj,RPAREN,LBRACE,IF,LPAREN,obj,<MASK>,this,RPAREN,RETURN,true,SEMI,ELSE,IF,LPAREN,obj,INSTANCEOF,FHashSet,RPAREN,LBRACE,FHashSet,LT,Object,GT,fhs,EQ,LPAREN,FHashSet,LT,Object,GT,RPAREN,obj,SEMI,RETURN,equals,LPAREN,tree,COMMA,fhs,DOT,tree,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,obj,INSTANCEOF,FLinkedHashSet,RPAREN,LBRACE,FLinkedHashSet,LT,Object,GT,flhs,EQ,LPAREN,FLinkedHashSet,LT,Object,GT,RPAREN,obj,SEMI,RETURN,equals,LPAREN,tree,COMMA,flhs,DOT,set_tree,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,BANG,LPAREN,obj,INSTANCEOF,Collection,RPAREN,RPAREN,RETURN,false,SEMI,ELSE,LBRACE,Collection,LT,Object,GT,coll,EQ,LPAREN,Collection,LT,Object,GT,RPAREN,obj,SEMI,IF,LPAREN,size,LPAREN,RPAREN,BANGEQ,coll,DOT,size,LPAREN,RPAREN,RPAREN,RETURN,false,SEMI,FOR,LPAREN,Iterator,it,EQ,coll,DOT,iterator,LPAREN,RPAREN,SEMI,it,DOT,hasNext,LPAREN,RPAREN,SEMI,RPAREN,LBRACE,Object,elt,EQ,it,DOT,next,LPAREN,RPAREN,SEMI,IF,LPAREN,BANG,contains,LPAREN,tree,COMMA,elt,COMMA,hashCode,LPAREN,elt,RPAREN,RPAREN,RPAREN,RETURN,false,SEMI,RBRACE,RETURN,true,SEMI,RBRACE,RBRACE","    public boolean equals(Object obj) {
,	if (obj <MASK> this) return true;
,	else if (obj instanceof FHashSet) {
,	    FHashSet<Object> fhs = (FHashSet<Object>)obj;
,	    return equals(tree, fhs.tree);
,	} else if (obj instanceof FLinkedHashSet) {
,	    FLinkedHashSet<Object> flhs = (FLinkedHashSet<Object>)obj;
,	    return equals(tree, flhs.set_tree);
,	} else if (!(obj instanceof Collection)) return false;
,	else {
,	    Collection<Object> coll = (Collection<Object>)obj;
,	    if (size() != coll.size()) return false;
,	    for (Iterator it = coll.iterator(); it.hasNext(); ) {
,		Object elt = it.next();
,		if (!contains(tree, elt, hashCode(elt))) return false;
,	    }
,	    return true;
,	}
,    }
"
d71e9d90-d7d7-40b1-b4fa-c5316adcd69a,d15ec844-de45-427a-a411-dc46f872d2e7,GT,"PUBLIC,STATIC,void,shuffle,LPAREN,FINAL,int,LBRACKET,RBRACKET,data,COMMA,FINAL,Random,rnd,RPAREN,LBRACE,FINAL,int,size,EQ,data,DOT,length,SEMI,FOR,LPAREN,int,i,EQ,size,SEMI,i,<MASK>,1,SEMI,i,SUBSUB,RPAREN,LBRACE,FINAL,int,ii,EQ,i,SUB,1,SEMI,FINAL,int,r,EQ,rnd,DOT,nextInt,LPAREN,i,RPAREN,SEMI,FINAL,int,temp,EQ,data,LBRACKET,ii,RBRACKET,SEMI,data,LBRACKET,ii,RBRACKET,EQ,data,LBRACKET,r,RBRACKET,SEMI,data,LBRACKET,r,RBRACKET,EQ,temp,SEMI,RBRACE,RBRACE","    public static void shuffle(
,            final int[] data, 
,            final Random rnd
,    ) {
,       //
,       final int size = data.length;
,       //
,       for (int i = size; i <MASK> 1; i--) {
,           final int ii = i - 1;
,           final int r  = rnd.nextInt(i);
,           //
,           final int temp = data[ii];
,           data[ii] = data[r];
,           data[r] = temp;
,       }
,    }
"
7bd76208-9b34-4151-9ec4-57c6c52e0fcf,0b463bf7-108e-4ef8-8f30-ac6d5d9a525c,GTEQ,"int,addk,LPAREN,Object,v,RPAREN,LBRACE,int,idx,SEMI,IF,LPAREN,this,DOT,htable,DOT,containsKey,LPAREN,v,RPAREN,RPAREN,LBRACE,idx,EQ,LPAREN,LPAREN,Integer,RPAREN,htable,DOT,get,LPAREN,v,RPAREN,RPAREN,DOT,intValue,LPAREN,RPAREN,SEMI,RBRACE,ELSE,LBRACE,idx,EQ,this,DOT,nk,SEMI,this,DOT,htable,DOT,put,LPAREN,v,COMMA,NEW,Integer,LPAREN,idx,RPAREN,RPAREN,SEMI,FINAL,Prototype,f,EQ,this,DOT,f,SEMI,IF,LPAREN,f,DOT,constants,EQEQ,null,BARBAR,nk,PLUS,1,<MASK>,f,DOT,constants,DOT,length,RPAREN,f,DOT,constants,EQ,realloc,LPAREN,f,DOT,constants,COMMA,nk,STAR,2,PLUS,1,RPAREN,SEMI,IF,LPAREN,v,EQEQ,NULL_OBJECT,RPAREN,LBRACE,v,EQ,null,SEMI,RBRACE,f,DOT,constants,LBRACKET,this,DOT,nk,PLUSPLUS,RBRACKET,EQ,v,SEMI,RBRACE,RETURN,idx,SEMI,RBRACE","	int addk(Object v) {
,		int idx;
,		if (this.htable.containsKey(v)) {
,			idx = ((Integer) htable.get(v)).intValue();
,		} else {
,			idx = this.nk;
,			this.htable.put(v, new Integer(idx));
,			final Prototype f = this.f;
,			if (f.constants == null || nk + 1 <MASK> f.constants.length)
,				f.constants = realloc( f.constants, nk*2 + 1 );
,			if (v == NULL_OBJECT) {
,				v = null;
,			}
,			f.constants[this.nk++] = v;
,		}
,		return idx;
,	}
"
ac91e7bc-1829-49d0-be4e-557b7225bd1c,8cd39c1e-dd85-4365-adf9-db879fa7e19f,SLASH,"PUBLIC,STATIC,NanoPost,createNanoPost,LPAREN,String,postText,COMMA,byte,LBRACKET,RBRACKET,parentHash,COMMA,File,postAttach,RPAREN,LBRACE,ByteArrayOutputStream,baos,EQ,NEW,ByteArrayOutputStream,LPAREN,RPAREN,SEMI,DataOutputStream,dos,EQ,NEW,DataOutputStream,LPAREN,baos,RPAREN,SEMI,NanoPostAttach,att,EQ,null,SEMI,String,postJson,EQ,""{}"",SEMI,TRY,LBRACE,dos,DOT,write,LPAREN,parentHash,RPAREN,SEMI,postJson,EQ,NEW,Gson,LPAREN,RPAREN,DOT,toJson,LPAREN,NEW,NanoPostInfo,LPAREN,postText,COMMA,LPAREN,int,RPAREN,LPAREN,System,DOT,currentTimeMillis,LPAREN,RPAREN,<MASK>,1000,RPAREN,RPAREN,RPAREN,SEMI,dos,DOT,writeUTF,LPAREN,postJson,RPAREN,SEMI,IF,LPAREN,postAttach,EQEQ,null,RPAREN,LBRACE,dos,DOT,writeUTF,LPAREN,"""",RPAREN,SEMI,RBRACE,ELSE,LBRACE,att,EQ,NEW,NanoPostAttach,LPAREN,ByteUtils,DOT,readBytesFromFile,LPAREN,postAttach,RPAREN,COMMA,postAttach,DOT,getName,LPAREN,RPAREN,COMMA,postAttach,RPAREN,SEMI,att,DOT,writeToStream,LPAREN,dos,RPAREN,SEMI,RBRACE,RBRACE,CATCH,LPAREN,UnsupportedEncodingException,ex,RPAREN,LBRACE,Logger,DOT,getLogger,LPAREN,NanoPostFactory,DOT,CLASS,DOT,getName,LPAREN,RPAREN,RPAREN,DOT,log,LPAREN,Level,DOT,SEVERE,COMMA,null,COMMA,ex,RPAREN,SEMI,RBRACE,CATCH,LPAREN,IOException,ex,RPAREN,LBRACE,Logger,DOT,getLogger,LPAREN,NanoPostFactory,DOT,CLASS,DOT,getName,LPAREN,RPAREN,RPAREN,DOT,log,LPAREN,Level,DOT,SEVERE,COMMA,null,COMMA,ex,RPAREN,SEMI,RBRACE,byte,LBRACKET,RBRACKET,postHash,EQ,EncryptionProvider,DOT,sha256,LPAREN,baos,DOT,toByteArray,LPAREN,RPAREN,RPAREN,SEMI,RETURN,NEW,NanoPost,LPAREN,postHash,COMMA,parentHash,COMMA,postJson,COMMA,att,RPAREN,SEMI,RBRACE","    public static NanoPost createNanoPost(String postText, byte[] parentHash, File postAttach) {
,        <MASK>/postText = escapeJson(postText);
,
,        ByteArrayOutputStream baos = new ByteArrayOutputStream();
,        DataOutputStream dos = new DataOutputStream(baos);
,
,        NanoPostAttach att = null;
,        String postJson = ""{}"";
,
,        try {
,            dos.write(parentHash);
,            postJson = new Gson().toJson(new NanoPostInfo(postText, (int) (System.currentTimeMillis() / 1000)));
,            dos.writeUTF(postJson);
,
,            if (postAttach == null) {
,                dos.writeUTF(""""); // there is no attached file
,            } else {
,                att = new NanoPostAttach(ByteUtils.readBytesFromFile(postAttach), postAttach.getName(), postAttach);
,                att.writeToStream(dos);
,            }
,
,        } catch (UnsupportedEncodingException ex) {
,            Logger.getLogger(NanoPostFactory.class.getName()).log(Level.SEVERE, null, ex);
,        } catch (IOException ex) {
,            Logger.getLogger(NanoPostFactory.class.getName()).log(Level.SEVERE, null, ex);
,        }
,
,        byte[] postHash = EncryptionProvider.sha256(baos.toByteArray());
,
,        return new NanoPost(postHash, parentHash, postJson, att);
,    }
"
c694737b-29b6-48d5-90c3-b6e0b6d64d88,c9e08758-d10e-43cc-9bff-c43e887f14fa,PERCENT,"STATIC,int,getCount,LPAREN,int,number,RPAREN,LBRACE,IF,LPAREN,number,LT,0,RPAREN,LBRACE,RETURN,0,SEMI,RBRACE,RETURN,number,<MASK>,36,SEMI,RBRACE","    static int getCount(int number) {
,        if (number < 0) {
,            return 0;
,        }
,        return number <MASK> 36;
,    }
"
2dd830d4-e85f-41ec-b5a4-78a5402d9efb,a95d6cd1-54a3-4914-b674-d7ced7bb56fe,SUB,"PUBLIC,void,endTurn,LPAREN,RPAREN,LBRACE,tabCount,EQ,<MASK>,1,SEMI,RBRACE","	public void endTurn(){
,		tabCount = <MASK>1;
,	}
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,cef17cb7-5ba2-48e4-b10b-5ad837efe0d8,SUB,"PUBLIC,int,getScoreEndGame,LPAREN,BufferedImage,screenshot,RPAREN,LBRACE,BufferedImage,scoreImage,EQ,screenshot,DOT,getSubimage,LPAREN,370,COMMA,265,COMMA,100,COMMA,32,RPAREN,SEMI,BufferedImage,LBRACKET,RBRACKET,endGameNumberTemplates,EQ,LBRACE,extractNumber,LPAREN,_endGame0,RPAREN,COMMA,extractNumber,LPAREN,_endGame1,RPAREN,COMMA,extractNumber,LPAREN,_endGame2,RPAREN,COMMA,extractNumber,LPAREN,_endGame3,RPAREN,COMMA,extractNumber,LPAREN,_endGame4,RPAREN,COMMA,extractNumber,LPAREN,_endGame5,RPAREN,COMMA,extractNumber,LPAREN,_endGame6,RPAREN,COMMA,extractNumber,LPAREN,_endGame7,RPAREN,COMMA,extractNumber,LPAREN,_endGame8,RPAREN,COMMA,extractNumber,LPAREN,_endGame9,RPAREN,RBRACE,SEMI,int,mask,LBRACKET,RBRACKET,LBRACKET,RBRACKET,EQ,NEW,int,LBRACKET,scoreImage,DOT,getHeight,LPAREN,RPAREN,RBRACKET,LBRACKET,scoreImage,DOT,getWidth,LPAREN,RPAREN,RBRACKET,SEMI,FOR,LPAREN,int,y,EQ,0,SEMI,y,LT,scoreImage,DOT,getHeight,LPAREN,RPAREN,SEMI,y,PLUSPLUS,RPAREN,LBRACE,FOR,LPAREN,int,x,EQ,0,SEMI,x,LT,scoreImage,DOT,getWidth,LPAREN,RPAREN,SEMI,x,PLUSPLUS,RPAREN,LBRACE,FINAL,int,colour,EQ,scoreImage,DOT,getRGB,LPAREN,x,COMMA,y,RPAREN,SEMI,mask,LBRACKET,y,RBRACKET,LBRACKET,x,RBRACKET,EQ,LPAREN,LPAREN,LPAREN,colour,AMP,00ff0000,RPAREN,GTGT,16,RPAREN,GT,192,RPAREN,QUES,1,COLON,<MASK>,1,SEMI,RBRACE,RBRACE,scoreImage,EQ,VisionUtils,DOT,int2image,LPAREN,mask,RPAREN,SEMI,mask,EQ,VisionUtils,DOT,findConnectedComponents,LPAREN,mask,RPAREN,SEMI,Rectangle,LBRACKET,RBRACKET,letters,EQ,VisionUtils,DOT,findBoundingBoxes,LPAREN,mask,RPAREN,SEMI,Arrays,DOT,sort,LPAREN,letters,COMMA,NEW,RectLeftOf,LPAREN,RPAREN,RPAREN,SEMI,int,score,EQ,0,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,letters,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,letters,LBRACKET,i,RBRACKET,DOT,width,LT,2,RPAREN,CONTINUE,SEMI,BufferedImage,letterImage,EQ,scoreImage,DOT,getSubimage,LPAREN,letters,LBRACKET,i,RBRACKET,DOT,x,COMMA,letters,LBRACKET,i,RBRACKET,DOT,y,COMMA,letters,LBRACKET,i,RBRACKET,DOT,width,COMMA,letters,LBRACKET,i,RBRACKET,DOT,height,RPAREN,SEMI,int,value,EQ,0,SEMI,int,minDiff,EQ,Integer,DOT,MAX_VALUE,SEMI,FOR,LPAREN,int,j,EQ,0,SEMI,j,LT,10,SEMI,j,PLUSPLUS,RPAREN,LBRACE,int,diff,EQ,getPixelDifference,LPAREN,letterImage,COMMA,endGameNumberTemplates,LBRACKET,j,RBRACKET,RPAREN,SEMI,IF,LPAREN,diff,LT,minDiff,RPAREN,LBRACE,minDiff,EQ,diff,SEMI,value,EQ,j,SEMI,RBRACE,RBRACE,score,EQ,10,STAR,score,PLUS,value,SEMI,RBRACE,RETURN,score,SEMI,RBRACE","	public int getScoreEndGame(BufferedImage screenshot) {
,		// crop score image
,		BufferedImage scoreImage = screenshot.getSubimage(370, 265, 100, 32);
,	
,		
,
,        // transform template images into black<MASK>white format
,		BufferedImage[] endGameNumberTemplates = { extractNumber(_endGame0),
,				extractNumber(_endGame1), extractNumber(_endGame2),
,				extractNumber(_endGame3), extractNumber(_endGame4),
,				extractNumber(_endGame5), extractNumber(_endGame6),
,				extractNumber(_endGame7), extractNumber(_endGame8),
,				extractNumber(_endGame9) };
,		
,        
,		// extract characters
,		int mask[][] = new int[scoreImage.getHeight()][scoreImage.getWidth()];
,		for (int y = 0; y < scoreImage.getHeight(); y++) {
,			for (int x = 0; x < scoreImage.getWidth(); x++) {
,				final int colour = scoreImage.getRGB(x, y);
,				mask[y][x] = (((colour & 0x00ff0000) >> 16) > 192) ? 1 : -1;
,			}
,		}
,		scoreImage = VisionUtils.int2image(mask);
,		mask = VisionUtils.findConnectedComponents(mask);
,		Rectangle[] letters = VisionUtils.findBoundingBoxes(mask);
,		Arrays.sort(letters, new RectLeftOf());
,        
,		// decode letters
,		int score = 0;
,		for (int i = 0; i < letters.length; i++) {
,			if (letters[i].width < 2)
,				continue;
,
,			BufferedImage letterImage = scoreImage.getSubimage(letters[i].x,
,					letters[i].y, letters[i].width, letters[i].height);
,
,			int value = 0;
,			
,			//init min different between target number and template
,			int minDiff = Integer.MAX_VALUE;
,			
,			//loop to find a template with minimum difference
,			for (int j = 0; j < 10; j++) {
,		        int diff = getPixelDifference(letterImage, endGameNumberTemplates[j]);
,				if(diff < minDiff){
,					minDiff = diff;
,					value = j;
,				}
,			}
,			score = 10 * score + value;
,		}
,
,        /*
,        if (score != prevScore)
,        {
,            saved = false;
,            repeatCount = 0;
,            prevScore = score;
,        }
,        else if (score != 0 && !saved)
,        {
,            repeatCount++;
,            if (repeatCount > 0)
,            {
,                saved = true;
,                try {
,                    File outputfile = new File(""scoreImage/"" + score + "".png"");
,                    ImageIO.write(saveImage, ""png"", outputfile);
,                } catch (IOException e) {
,                
,                }
,            }
,        }*/
,        
,		/*
,		 * VisionUtils.drawBoundingBoxes(scoreImage, letters, Color.BLUE); if
,		 * (_debug == null) { _debug = new ShowDebuggingImage(""score"",
,		 * scoreImage); } else { _debug.refresh(scoreImage); }
,		 */
,
,		return score;
,	}
"
d71e9d90-d7d7-40b1-b4fa-c5316adcd69a,f10e2122-52a6-40e7-a277-30040c103c84,GT,"PUBLIC,STATIC,SampleSet,loadSampleSets,LPAREN,FINAL,String,ELLIPSIS,files,RPAREN,THROWS,IOException,COMMA,ClassNotFoundException,LBRACE,SampleSet,set,EQ,NEW,SampleSet,LPAREN,RPAREN,SEMI,FOR,LPAREN,String,f,COLON,files,RPAREN,LBRACE,String,filename,EQ,f,DOT,trim,LPAREN,RPAREN,SEMI,IF,LPAREN,filename,DOT,length,LPAREN,RPAREN,<MASK>,0,RPAREN,LBRACE,loadToSampleSet,LPAREN,set,COMMA,filename,RPAREN,SEMI,RBRACE,RBRACE,RETURN,set,SEMI,RBRACE","    public static SampleSet loadSampleSets(final String ...files) 
,            throws IOException, ClassNotFoundException {
,        //
,        SampleSet set = new SampleSet();
,        //
,        for (String f : files) {
,            String filename = f.trim();
,            if (filename.length() <MASK> 0) {
,                loadToSampleSet(set, filename);
,            }
,        }
,        //
,        return set;
,    }
"
38ed5e2e-bfac-4cc9-94e0-5ee38dabb0ca,e6628b2d-654b-4b6d-ae44-df89ac14fc8c,EQEQ,"PUBLIC,boolean,equals,LPAREN,Object,obj,RPAREN,LBRACE,IF,LPAREN,obj,<MASK>,this,RPAREN,RETURN,true,SEMI,ELSE,IF,LPAREN,obj,INSTANCEOF,FHashMap,RPAREN,LBRACE,FHashMap,fhm,EQ,LPAREN,FHashMap,RPAREN,obj,SEMI,RETURN,equals,LPAREN,tree,COMMA,fhm,DOT,tree,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,obj,INSTANCEOF,FLinkedHashMap,RPAREN,LBRACE,FLinkedHashMap,plhm,EQ,LPAREN,FLinkedHashMap,RPAREN,obj,SEMI,RETURN,equals,LPAREN,tree,COMMA,plhm,DOT,map_tree,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,BANG,LPAREN,obj,INSTANCEOF,Map,RPAREN,RPAREN,RETURN,false,SEMI,ELSE,LBRACE,Map,LT,Object,COMMA,Object,GT,map,EQ,LPAREN,Map,LT,Object,COMMA,Object,GT,RPAREN,obj,SEMI,IF,LPAREN,size,LPAREN,RPAREN,BANGEQ,map,DOT,size,LPAREN,RPAREN,RPAREN,RETURN,false,SEMI,FOR,LPAREN,Map,DOT,Entry,ent,COLON,map,DOT,entrySet,LPAREN,RPAREN,RPAREN,IF,LPAREN,BANG,contains,LPAREN,ent,RPAREN,RPAREN,RETURN,false,SEMI,RETURN,true,SEMI,RBRACE,RBRACE","    public boolean equals(Object obj) {
,	if (obj <MASK> this) return true;
,	else if (obj instanceof FHashMap) {
,	    FHashMap fhm = (FHashMap)obj;
,	    return equals(tree, fhm.tree);
,	} else if (obj instanceof FLinkedHashMap) {
,	    FLinkedHashMap plhm = (FLinkedHashMap)obj;
,	    return equals(tree, plhm.map_tree);
,	} else if (!(obj instanceof Map)) return false;
,	else {
,	    Map<Object, Object> map = (Map<Object, Object>)obj;
,	    if (size() != map.size()) return false;
,	    for (Map.Entry ent : map.entrySet())
,		if (!contains(ent)) return false;
,	    return true;
,	}
,    }
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,caaf353e-9cec-42fa-930f-9786fe3bff22,SUB,"PUBLIC,BufferedImage,doScreenShot,LPAREN,RPAREN,LBRACE,BufferedImage,bfImage,EQ,null,SEMI,TRY,LBRACE,byte,LBRACKET,RBRACKET,doScreenShot,EQ,ClientMessageEncoder,DOT,encodeDoScreenShot,LPAREN,RPAREN,SEMI,out,DOT,write,LPAREN,doScreenShot,RPAREN,SEMI,out,DOT,flush,LPAREN,RPAREN,SEMI,byte,LBRACKET,RBRACKET,bytewidth,EQ,NEW,byte,LBRACKET,4,RBRACKET,SEMI,byte,LBRACKET,RBRACKET,byteheight,EQ,NEW,byte,LBRACKET,4,RBRACKET,SEMI,int,width,COMMA,height,SEMI,in,DOT,read,LPAREN,bytewidth,RPAREN,SEMI,width,EQ,bytesToInt,LPAREN,bytewidth,RPAREN,SEMI,in,DOT,read,LPAREN,byteheight,RPAREN,SEMI,height,EQ,bytesToInt,LPAREN,byteheight,RPAREN,SEMI,int,totalBytes,EQ,width,STAR,height,STAR,3,SEMI,byte,LBRACKET,RBRACKET,bytebuffer,SEMI,byte,LBRACKET,RBRACKET,imgbyte,EQ,NEW,byte,LBRACKET,totalBytes,RBRACKET,SEMI,int,hasReadBytes,EQ,0,SEMI,WHILE,LPAREN,hasReadBytes,LT,totalBytes,RPAREN,LBRACE,bytebuffer,EQ,NEW,byte,LBRACKET,2048,RBRACKET,SEMI,int,nBytes,EQ,in,DOT,read,LPAREN,bytebuffer,RPAREN,SEMI,IF,LPAREN,nBytes,BANGEQ,<MASK>,1,RPAREN,System,DOT,arraycopy,LPAREN,bytebuffer,COMMA,0,COMMA,imgbyte,COMMA,hasReadBytes,COMMA,nBytes,RPAREN,SEMI,ELSE,BREAK,SEMI,hasReadBytes,PLUSEQ,nBytes,SEMI,RBRACE,bfImage,EQ,NEW,BufferedImage,LPAREN,width,COMMA,height,COMMA,BufferedImage,DOT,TYPE_INT_RGB,RPAREN,SEMI,FOR,LPAREN,int,y,EQ,0,SEMI,y,LT,height,SEMI,y,PLUSPLUS,RPAREN,LBRACE,FOR,LPAREN,int,x,EQ,0,SEMI,x,LT,width,SEMI,x,PLUSPLUS,RPAREN,LBRACE,int,R,EQ,imgbyte,LBRACKET,LPAREN,y,STAR,width,PLUS,x,RPAREN,STAR,3,RBRACKET,AMP,ff,SEMI,int,G,EQ,imgbyte,LBRACKET,LPAREN,y,STAR,width,PLUS,x,RPAREN,STAR,3,PLUS,1,RBRACKET,AMP,ff,SEMI,int,B,EQ,imgbyte,LBRACKET,LPAREN,y,STAR,width,PLUS,x,RPAREN,STAR,3,PLUS,2,RBRACKET,AMP,ff,SEMI,Color,color,EQ,NEW,Color,LPAREN,R,COMMA,G,COMMA,B,RPAREN,SEMI,int,rgb,SEMI,rgb,EQ,color,DOT,getRGB,LPAREN,RPAREN,SEMI,bfImage,DOT,setRGB,LPAREN,x,COMMA,y,COMMA,rgb,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,CATCH,LPAREN,IOException,ioException,RPAREN,LBRACE,ioException,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,RETURN,bfImage,SEMI,RBRACE","	public  BufferedImage doScreenShot() {
,		BufferedImage bfImage = null;
,		try {
,			// 2. get Input and Output streams
,			byte[] doScreenShot = ClientMessageEncoder.encodeDoScreenShot();
,			out.write(doScreenShot);
,			out.flush();
,			// System.out.println(""client executes command: screen shot"");
,
,			//Read the message head : 4<MASK>byte width and 4-byte height, respectively
,			byte[] bytewidth = new byte[4];
,			byte[] byteheight = new byte[4];
,			int width, height;
,			in.read(bytewidth);
,			width = bytesToInt(bytewidth);
,			in.read(byteheight);
,			height = bytesToInt(byteheight);
,			
,			//initialize total bytes of the screenshot message
,			//not include the head
,			int totalBytes = width * height * 3;
,
,			//read the raw RGB data
,			byte[] bytebuffer;
,			//System.out.println(width + ""  "" + height);
,			byte[] imgbyte = new byte[totalBytes];
,			int hasReadBytes = 0;
,			while (hasReadBytes < totalBytes) {
,				bytebuffer = new byte[2048];
,				int nBytes = in.read(bytebuffer);
,				if (nBytes != -1)
,					System.arraycopy(bytebuffer, 0, imgbyte, hasReadBytes,
,							nBytes);
,				else
,					break;
,				hasReadBytes += nBytes;
,			}
,			
,			//set RGB data using BufferedImage  
,			bfImage = new BufferedImage(width, height,
,					BufferedImage.TYPE_INT_RGB);
,			for (int y = 0; y < height; y++) {
,				for (int x = 0; x < width; x++) {
,					int R = imgbyte[(y * width + x) * 3] & 0xff;
,					int G = imgbyte[(y * width + x) * 3 + 1] & 0xff;
,					int B = imgbyte[(y * width + x) * 3 + 2] & 0xff;
,					Color color = new Color(R, G, B);
,					int rgb;
,					rgb = color.getRGB();
,					bfImage.setRGB(x, y, rgb);
,				}
,			}
,			
,		} catch (IOException ioException) {
,			ioException.printStackTrace();
,		}
,		return bfImage;
,
,	}
"
57cc1a58-8f23-49b4-bcf8-6b2866c3102b,fd31116b-8e81-4739-addf-dd421f7af562,GT,"PUBLIC,boolean,addNewTrack,LPAREN,TrackInfoBean,trackInfoBean,RPAREN,LBRACE,TRY,LBRACE,connection,EQ,NEW,DatabaseConnection,LPAREN,RPAREN,DOT,getConnection,LPAREN,RPAREN,SEMI,String,addTrack_Query,EQ,""INSERT into trackinfo (trackid , artistid , genreid "",PLUS,"", title , duration , bitrate  ) VALUES (? , ? , "",PLUS,""? , ?  , ? , ?)"",SEMI,PreparedStatement,prepareStatement,EQ,connection,DOT,prepareStatement,LPAREN,addTrack_Query,RPAREN,SEMI,prepareStatement,DOT,setString,LPAREN,1,COMMA,trackInfoBean,DOT,getTrack_Id,LPAREN,RPAREN,RPAREN,SEMI,prepareStatement,DOT,setString,LPAREN,2,COMMA,trackInfoBean,DOT,getArtist_ID,LPAREN,RPAREN,RPAREN,SEMI,prepareStatement,DOT,setString,LPAREN,3,COMMA,trackInfoBean,DOT,getGenre_ID,LPAREN,RPAREN,RPAREN,SEMI,prepareStatement,DOT,setString,LPAREN,4,COMMA,trackInfoBean,DOT,getTitle,LPAREN,RPAREN,RPAREN,SEMI,prepareStatement,DOT,setString,LPAREN,5,COMMA,trackInfoBean,DOT,getDuration,LPAREN,RPAREN,RPAREN,SEMI,prepareStatement,DOT,setString,LPAREN,6,COMMA,trackInfoBean,DOT,getBitrate,LPAREN,RPAREN,RPAREN,SEMI,boolean,checkTrackID,EQ,checkTrackID,LPAREN,trackInfoBean,RPAREN,SEMI,IF,LPAREN,checkTrackID,RPAREN,LBRACE,RETURN,true,SEMI,RBRACE,ELSE,LBRACE,int,executeUpdate,EQ,prepareStatement,DOT,executeUpdate,LPAREN,RPAREN,SEMI,IF,LPAREN,executeUpdate,<MASK>,0,RPAREN,LBRACE,RETURN,true,SEMI,RBRACE,ELSE,LBRACE,RETURN,false,SEMI,RBRACE,RBRACE,RBRACE,CATCH,LPAREN,SQLException,ex,RPAREN,LBRACE,reverseInfo,LPAREN,trackInfoBean,DOT,getTrack_Id,LPAREN,RPAREN,RPAREN,SEMI,Logger,DOT,getLogger,LPAREN,TrackInfo,DOT,CLASS,DOT,getName,LPAREN,RPAREN,RPAREN,DOT,log,LPAREN,Level,DOT,SEVERE,COMMA,null,COMMA,ex,RPAREN,SEMI,RBRACE,RETURN,false,SEMI,RBRACE","    public boolean addNewTrack(TrackInfoBean trackInfoBean) {
,        try {
,            connection = new DatabaseConnection().getConnection();
,            String addTrack_Query = ""INSERT into trackinfo (trackid , artistid , genreid ""
,                    + "", title , duration , bitrate  ) VALUES (? , ? , ""
,                    + ""? , ?  , ? , ?)"";
,            PreparedStatement prepareStatement = connection.prepareStatement(addTrack_Query);
,            prepareStatement.setString(1, trackInfoBean.getTrack_Id());
,            prepareStatement.setString(2, trackInfoBean.getArtist_ID());
,            prepareStatement.setString(3, trackInfoBean.getGenre_ID());
,            prepareStatement.setString(4, trackInfoBean.getTitle());
,            prepareStatement.setString(5, trackInfoBean.getDuration());
,            prepareStatement.setString(6, trackInfoBean.getBitrate());
,            boolean checkTrackID = checkTrackID(trackInfoBean);
,            if (checkTrackID) {
,                return true;
,            } else {
,                int executeUpdate = prepareStatement.executeUpdate();
,                if (executeUpdate <MASK> 0) {
,                    return true;
,                } else {
,                    return false;
,                }
,            }
,        } catch (SQLException ex) {
,            reverseInfo(trackInfoBean.getTrack_Id());
,            Logger.getLogger(TrackInfo.class.getName()).log(Level.SEVERE, null, ex);
,        }
,        return false;
,
,    }
"
e804bdf1-7a07-4e36-aee6-aba6a427cf38,4fdfa9e5-96d2-439c-87ac-b74aefdfaff2,STAR,"PRIVATE,void,initializeTail,LPAREN,MyList,DOT,Container,LT,Element,LT,T,GTGT,first,COMMA,MyList,DOT,Container,LT,Element,LT,T,GTGT,last,COMMA,MyList,LT,Element,LT,T,GTGT,newSingletonElements,COMMA,MyList,LT,Superelement,LT,T,GTGT,newSingletonSuperelements,COMMA,MyList,LT,SplitFindminStructureGabow,LT,Superelement,LT,T,GTGTGT,newSublists,RPAREN,LBRACE,MyList,DOT,Container,LT,Element,LT,T,GTGT,current,EQ,first,SEMI,int,size,EQ,0,SEMI,WHILE,LPAREN,current,BANGEQ,last,DOT,successor,RPAREN,LBRACE,size,PLUSPLUS,SEMI,current,EQ,current,DOT,successor,SEMI,RBRACE,current,EQ,first,SEMI,int,processedElements,EQ,0,SEMI,int,superelementsInCurrentSublist,EQ,0,SEMI,Superelement,LT,T,GT,mostRecentSuperelement,EQ,null,SEMI,Superelement,LT,T,GT,currentSuperelement,EQ,null,SEMI,SplitFindminStructureGabow,LT,Superelement,LT,T,GTGT,currentLevelSublist,EQ,NEW,SplitFindminStructureGabow,LT,Superelement,LT,T,GTGT,LPAREN,ackermann,COMMA,i,SUB,1,RPAREN,SEMI,WHILE,LPAREN,size,SUB,processedElements,GT,3,RPAREN,LBRACE,int,level,EQ,ackermann,DOT,getInverse,LPAREN,i,COMMA,size,SUB,processedElements,RPAREN,SEMI,currentSuperelement,EQ,NEW,Superelement,LT,T,GT,LPAREN,level,RPAREN,SEMI,currentSuperelement,DOT,cost,EQ,Double,DOT,POSITIVE_INFINITY,SEMI,int,numberOfElements,EQ,2,<MASK>,ackermann,DOT,getValue,LPAREN,i,COMMA,level,RPAREN,SEMI,currentSuperelement,DOT,first,EQ,current,DOT,item,SEMI,FOR,LPAREN,int,k,EQ,0,SEMI,k,LT,numberOfElements,SEMI,k,PLUSPLUS,RPAREN,LBRACE,current,DOT,item,DOT,superelement,EQ,currentSuperelement,SEMI,currentSuperelement,DOT,cost,EQ,Math,DOT,min,LPAREN,currentSuperelement,DOT,cost,COMMA,current,DOT,item,DOT,cost,RPAREN,SEMI,current,EQ,current,DOT,successor,SEMI,RBRACE,currentSuperelement,DOT,last,EQ,current,DOT,predecessor,DOT,item,SEMI,IF,LPAREN,mostRecentSuperelement,BANGEQ,null,AMPAMP,mostRecentSuperelement,DOT,level,BANGEQ,level,RPAREN,LBRACE,IF,LPAREN,superelementsInCurrentSublist,GT,1,RPAREN,LBRACE,MyList,DOT,Container,LT,SplitFindminStructureGabow,LT,Superelement,LT,T,GTGTGT,container,EQ,newSublists,DOT,add,LPAREN,currentLevelSublist,RPAREN,SEMI,currentLevelSublist,DOT,containingContainerSublists,EQ,container,SEMI,currentLevelSublist,DOT,containingList,EQ,this,SEMI,RBRACE,ELSE,LBRACE,MyList,DOT,Container,LT,Superelement,LT,T,GTGT,container,EQ,newSingletonSuperelements,DOT,add,LPAREN,mostRecentSuperelement,RPAREN,SEMI,mostRecentSuperelement,DOT,containingContainerSingletonSuperelements,EQ,container,SEMI,mostRecentSuperelement,DOT,containingList,EQ,this,SEMI,mostRecentSuperelement,DOT,elementInSublist,EQ,null,SEMI,mostRecentSuperelement,DOT,containingSublist,EQ,null,SEMI,RBRACE,currentLevelSublist,EQ,NEW,SplitFindminStructureGabow,LT,Superelement,LT,T,GTGT,LPAREN,ackermann,COMMA,i,SUB,1,RPAREN,SEMI,superelementsInCurrentSublist,EQ,0,SEMI,RBRACE,Element,LT,Superelement,LT,T,GTGT,e,EQ,currentLevelSublist,DOT,add,LPAREN,currentSuperelement,COMMA,currentSuperelement,DOT,cost,RPAREN,SEMI,currentSuperelement,DOT,elementInSublist,EQ,e,SEMI,currentSuperelement,DOT,containingSublist,EQ,currentLevelSublist,SEMI,superelementsInCurrentSublist,PLUSPLUS,SEMI,processedElements,PLUSEQ,numberOfElements,SEMI,mostRecentSuperelement,EQ,currentSuperelement,SEMI,RBRACE,IF,LPAREN,superelementsInCurrentSublist,GT,1,RPAREN,LBRACE,MyList,DOT,Container,LT,SplitFindminStructureGabow,LT,Superelement,LT,T,GTGTGT,container,EQ,newSublists,DOT,add,LPAREN,currentLevelSublist,RPAREN,SEMI,currentLevelSublist,DOT,containingContainerSublists,EQ,container,SEMI,currentLevelSublist,DOT,containingList,EQ,this,SEMI,RBRACE,ELSE,LBRACE,IF,LPAREN,mostRecentSuperelement,BANGEQ,null,RPAREN,LBRACE,MyList,DOT,Container,LT,Superelement,LT,T,GTGT,container,EQ,newSingletonSuperelements,DOT,add,LPAREN,mostRecentSuperelement,RPAREN,SEMI,mostRecentSuperelement,DOT,containingContainerSingletonSuperelements,EQ,container,SEMI,mostRecentSuperelement,DOT,containingList,EQ,this,SEMI,mostRecentSuperelement,DOT,elementInSublist,EQ,null,SEMI,mostRecentSuperelement,DOT,containingSublist,EQ,null,SEMI,RBRACE,RBRACE,WHILE,LPAREN,current,BANGEQ,last,DOT,successor,RPAREN,LBRACE,MyList,DOT,Container,LT,Element,LT,T,GTGT,container,EQ,newSingletonElements,DOT,add,LPAREN,current,DOT,item,RPAREN,SEMI,current,DOT,item,DOT,containingContainerSingletonElements,EQ,container,SEMI,current,DOT,item,DOT,containingList,EQ,this,SEMI,current,DOT,item,DOT,superelement,EQ,null,SEMI,current,EQ,current,DOT,successor,SEMI,RBRACE,FOR,LPAREN,SplitFindminStructureGabow,LT,Superelement,LT,T,GTGT,sublist,COLON,newSublists,RPAREN,LBRACE,sublist,DOT,initializeTail,LPAREN,RPAREN,SEMI,RBRACE,RBRACE","	private void initializeTail
,			(MyList.Container<Element<T>> first,
,			MyList.Container<Element<T>> last,
,			MyList<Element<T>> newSingletonElements,
,			MyList<Superelement<T>> newSingletonSuperelements,
,			MyList<SplitFindminStructureGabow<Superelement<T>>> newSublists) {
,			
,			// scan list left-to-right
,			MyList.Container<Element<T>> current = first;
,			
,			// compute the size of this list
,			int size = 0;
,			
,			while (current != last.successor) {
,				size++;
,				current = current.successor;
,			}
,			
,			// partition this list into superelements, sublists and singletons
,			current = first;
,			int processedElements = 0;
,			int superelementsInCurrentSublist = 0;
,			Superelement<T> mostRecentSuperelement = null;
,			Superelement<T> currentSuperelement = null;
,			SplitFindminStructureGabow<Superelement<T>> currentLevelSublist =
,				new SplitFindminStructureGabow<Superelement<T>>
,					(ackermann, i - 1);
,			
,			/<MASK>
,			 * check whether there are enough elements remaining for a
,			 * superelement
,			 */
,			while (size - processedElements > 3) {
,				// compute the level of the next superelement
,				int level = ackermann.getInverse(i, size - processedElements);
,				
,				// construct a new superelement
,				currentSuperelement = new Superelement<T>(level);
,				currentSuperelement.cost = Double.POSITIVE_INFINITY;
,				
,				// compute the number of elements of the next superelement
,				int numberOfElements = 2 * ackermann.getValue(i, level);
,
,				// add the elements to the current superelement
,				currentSuperelement.first = current.item;
,				for (int k = 0; k < numberOfElements; k++) {
,					// set e(x)
,					current.item.superelement = currentSuperelement;
,					
,					// update c(e(x))
,					currentSuperelement.cost =
,						Math.min(currentSuperelement.cost, current.item.cost);
,					
,					current = current.successor;
,				}
,				currentSuperelement.last = current.predecessor.item;
,
,				
,				if (mostRecentSuperelement != null &&
,					mostRecentSuperelement.level != level) {
,					// now we have to add or reject our constructed sublist
,					if (superelementsInCurrentSublist > 1) {
,						MyList.Container<SplitFindminStructureGabow
,							<Superelement<T>>> container =
,								newSublists.add(currentLevelSublist);
,						currentLevelSublist.containingContainerSublists =
,							container;
,						
,						currentLevelSublist.containingList = this;
,					} else {
,						// most recent superelement is a singleton
,						MyList.Container<Superelement<T>> container =
,							newSingletonSuperelements.add
,								(mostRecentSuperelement);
,						mostRecentSuperelement.
,							containingContainerSingletonSuperelements =
,								container;
,						
,						mostRecentSuperelement.containingList = this;
,						mostRecentSuperelement.elementInSublist = null;
,						mostRecentSuperelement.containingSublist = null;
,					}
,					
,					// construct a new sublist - we might need it later
,					currentLevelSublist = new SplitFindminStructureGabow
,						<Superelement<T>>(ackermann, i - 1);
,					superelementsInCurrentSublist = 0;
,				}
,				
,				// add the current superelement to the current sublist
,				Element<Superelement<T>> e = currentLevelSublist.add
,					(currentSuperelement, currentSuperelement.cost);
,				currentSuperelement.elementInSublist = e;
,				currentSuperelement.containingSublist = currentLevelSublist;
,				superelementsInCurrentSublist++;
,				
,				// prepare next iteration
,				processedElements += numberOfElements;
,				mostRecentSuperelement = currentSuperelement;
,			}
,			
,			// process the last sublist individually, if necessary
,			if (superelementsInCurrentSublist > 1) {
,				MyList.Container<SplitFindminStructureGabow<Superelement<T>>>
,					container = newSublists.add(currentLevelSublist);
,				currentLevelSublist.containingContainerSublists = container;
,				
,				currentLevelSublist.containingList = this;
,			} else {
,				if (mostRecentSuperelement != null) {
,					// most recent superelement is a singleton
,					MyList.Container<Superelement<T>> container =
,						newSingletonSuperelements.add(mostRecentSuperelement);
,					mostRecentSuperelement.
,						containingContainerSingletonSuperelements = container;
,					
,					mostRecentSuperelement.containingList = this;
,					mostRecentSuperelement.elementInSublist = null;
,					mostRecentSuperelement.containingSublist = null;
,				}
,			}
,
,			// process leftovers
,			while (current != last.successor) {
,				MyList.Container<Element<T>> container =
,					newSingletonElements.add(current.item);
,				current.item.containingContainerSingletonElements = container; 
,				current.item.containingList = this;
,				current.item.superelement = null;
,				current = current.successor;
,			}
,			
,			// call A_{i-1} to do initialize-tail on each sublist
,			for (SplitFindminStructureGabow<Superelement<T>> sublist :
,					newSublists) {
,				
,				sublist.initializeTail();
,			}
,	}
"
b6d08fd3-a673-4a77-8d9f-bf9a01922a85,47b94142-474f-43d7-b5b0-f1d08a9fc5cb,SLASH,"MONKEYS_AT,Override,PUBLIC,Vector3d,getFocus,LPAREN,RPAREN,LBRACE,float,z,SEMI,IF,LPAREN,p,DOT,z,LT,0.5,RPAREN,z,EQ,LPAREN,float,RPAREN,0.5,SEMI,ELSE,z,EQ,LPAREN,float,RPAREN,0.5,PLUS,LPAREN,p,DOT,z,SUB,LPAREN,float,RPAREN,0.5,RPAREN,<MASK>,2,SEMI,RETURN,NEW,Vector3d,LPAREN,p,DOT,x,COMMA,p,DOT,y,PLUS,1,COMMA,z,RPAREN,SEMI,RBRACE","    @Override
,    public Vector3d getFocus() {
,        float z;
,        if (p.z < 0.5) z = (float) 0.5;
,        else z = (float) 0.5 + (p.z - (float) 0.5) <MASK> 2;
,        return new Vector3d(p.x, p.y + 1, z);
,    }
"
811987a2-df8f-411b-b35a-1f251eaec687,1564b813-3e05-47d2-8be1-b26d33691cde,SLASH,"PUBLIC,double,LBRACKET,RBRACKET,readNormalizedLastLine,LPAREN,RPAREN,LBRACE,double,LBRACKET,RBRACKET,newRow,EQ,NEW,double,LBRACKET,2,RBRACKET,SEMI,double,LBRACKET,RBRACKET,normalizedNewRow,EQ,NEW,double,LBRACKET,2,RBRACKET,SEMI,TRY,LBRACE,File,file,EQ,NEW,File,LPAREN,Controller,DOT,getConfig,LPAREN,RPAREN,DOT,getTrainMemLogFile,LPAREN,RPAREN,RPAREN,SEMI,String,metric,EQ,ReadFile,DOT,readLast_N_Lines,LPAREN,file,COMMA,1,RPAREN,SEMI,String,LBRACKET,RBRACKET,lastline,EQ,metric,DOT,split,LPAREN,""\\n"",RPAREN,SEMI,metric,EQ,lastline,LBRACKET,lastline,DOT,length,SUB,1,RBRACKET,SEMI,String,LBRACKET,RBRACKET,splited,EQ,metric,DOT,split,LPAREN,""\\s+"",RPAREN,SEMI,newRow,LBRACKET,Constants,DOT,METRIC,DOT,MEM,DOT,getValue,LPAREN,RPAREN,RBRACKET,EQ,Double,DOT,parseDouble,LPAREN,splited,LBRACKET,4,RBRACKET,RPAREN,SEMI,file,EQ,NEW,File,LPAREN,Controller,DOT,getConfig,LPAREN,RPAREN,DOT,getTrainMetricLogFile,LPAREN,RPAREN,RPAREN,SEMI,metric,EQ,ReadFile,DOT,readLast_N_Lines,LPAREN,file,COMMA,1,RPAREN,SEMI,lastline,EQ,metric,DOT,split,LPAREN,""\\n"",RPAREN,SEMI,metric,EQ,lastline,LBRACKET,lastline,DOT,length,SUB,1,RBRACKET,SEMI,splited,EQ,metric,DOT,split,LPAREN,""\\s+"",RPAREN,SEMI,newRow,LBRACKET,Constants,DOT,METRIC,DOT,CPU,DOT,getValue,LPAREN,RPAREN,RBRACKET,EQ,Double,DOT,parseDouble,LPAREN,splited,LBRACKET,4,RBRACKET,RPAREN,SEMI,logger,DOT,info,LPAREN,""Metric read : "",PLUS,newRow,LBRACKET,0,RBRACKET,PLUS,"" "",PLUS,newRow,LBRACKET,1,RBRACKET,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,2,SEMI,i,PLUSPLUS,RPAREN,LBRACE,double,std,SEMI,double,denominator,EQ,MinMaxMetricVal,LBRACKET,1,RBRACKET,LBRACKET,i,RBRACKET,SUB,MinMaxMetricVal,LBRACKET,0,RBRACKET,LBRACKET,i,RBRACKET,SEMI,IF,LPAREN,denominator,GT,0,RPAREN,std,EQ,LPAREN,newRow,LBRACKET,i,RBRACKET,SUB,MinMaxMetricVal,LBRACKET,0,RBRACKET,LBRACKET,i,RBRACKET,RPAREN,<MASK>,denominator,SEMI,ELSE,std,EQ,0,SEMI,normalizedNewRow,LBRACKET,i,RBRACKET,EQ,std,STAR,LPAREN,100,SUB,0,RPAREN,PLUS,0,SEMI,RBRACE,logger,DOT,info,LPAREN,""Normalized : "",PLUS,normalizedNewRow,LBRACKET,0,RBRACKET,PLUS,"" "",PLUS,normalizedNewRow,LBRACKET,1,RBRACKET,RPAREN,SEMI,RBRACE,CATCH,LPAREN,NullPointerException,e,RPAREN,LBRACE,logger,DOT,info,LPAREN,e,DOT,getMessage,LPAREN,RPAREN,RPAREN,SEMI,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,Exception,e,RPAREN,LBRACE,logger,DOT,error,LPAREN,e,DOT,getMessage,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,RETURN,normalizedNewRow,SEMI,RBRACE","	public double[] readNormalizedLastLine()
,	{
,		double[] newRow = new double[2];
,		double[] normalizedNewRow = new double[2];
,		
,		try{
,			File file = new File(Controller.getConfig().getTrainMemLogFile());
,			String metric = ReadFile.readLast_N_Lines(file, 1);
,			String[] lastline = metric.split(""\\n"");
,			metric = lastline[lastline.length-1];
,			String[] splited = metric.split(""\\s+"");
,			newRow[Constants.METRIC.MEM.getValue()] = Double.parseDouble(splited[4]);
,			
,			file = new File(Controller.getConfig().getTrainMetricLogFile());
,			metric = ReadFile.readLast_N_Lines(file, 1);
,			lastline = metric.split(""\\n"");
,			metric = lastline[lastline.length-1];
,			splited = metric.split(""\\s+"");
,			newRow[Constants.METRIC.CPU.getValue()] = Double.parseDouble(splited[4]);
,			<MASK>*newRow[Constants.METRIC.NETTX.getValue()] = Double.parseDouble(splited[8]);
,			newRow[Constants.METRIC.NETRX.getValue()] = Double.parseDouble(splited[10]);
,			newRow[Constants.METRIC.VBD_OO.getValue()] = Double.parseDouble(splited[12]);
,			newRow[Constants.METRIC.VBD_RD.getValue()] = Double.parseDouble(splited[14]);
,			newRow[Constants.METRIC.VBD_WR.getValue()] = Double.parseDouble(splited[16]);*/
,			/*logger.info(""Metric read : "" + newRow[0] + "" "" + newRow[1] + "" "" + newRow[2] + "" "" + newRow[3] + "" "" + newRow[4] + "" "" + newRow[5] + "" ""
,										+  newRow[6] );*/
,			logger.info(""Metric read : "" + newRow[0] + "" "" + newRow[1]);
,			/* SCALING LOGIC
,			 * X_std = (X - X.min(axis=0)) / (X.max(axis=0) - X.min(axis=0))
,			 * X_scaled = X_std * (max - min) + min 
,			 */
,			for(int i=0;i<2;i++)
,			{
,				double std;
,				double denominator = MinMaxMetricVal[1][i] - MinMaxMetricVal[0][i];
,				if(denominator > 0)
,					std = (newRow[i] - MinMaxMetricVal[0][i]) / denominator;
,				else
,					std=0;
,				
,				normalizedNewRow[i] = std * (100 - 0) + 0;
,			}
,			logger.info(""Normalized : "" + normalizedNewRow[0] + "" "" + normalizedNewRow[1] );
,		} catch(NullPointerException e){
,			logger.info(e.getMessage());
,			e.printStackTrace();
,		}catch(Exception e){
,			logger.error(e.getMessage());
,		}
,		return normalizedNewRow;
,	}
"
c694737b-29b6-48d5-90c3-b6e0b6d64d88,5ca88ef7-4a69-4768-b989-8ead1081631a,PERCENT,"PROTECTED,String,formatLongitude,LPAREN,double,longitudeInDegrees,RPAREN,LBRACE,double,longitude,EQ,LPAREN,LPAREN,longitudeInDegrees,PLUS,180.0,RPAREN,<MASK>,360.0,RPAREN,SUB,180.0,SEMI,IF,LPAREN,Math,DOT,abs,LPAREN,longitude,RPAREN,LT,1.0,SLASH,120.0,RPAREN,LBRACE,RETURN,""0\u00B0"",SEMI,RBRACE,String,direction,SEMI,IF,LPAREN,longitude,GT,0,RPAREN,LBRACE,direction,EQ,""E"",SEMI,RBRACE,ELSE,LBRACE,direction,EQ,""W"",SEMI,RBRACE,double,absLongitude,EQ,Math,DOT,abs,LPAREN,longitude,RPAREN,SEMI,RETURN,formatDegreesAndMinutes,LPAREN,absLongitude,RPAREN,PLUS,direction,SEMI,RBRACE","    protected String formatLongitude(double longitudeInDegrees) {
,        double longitude = ((longitudeInDegrees + 180.0) <MASK> 360.0) - 180.0;
,        if (Math.abs(longitude) < 1.0 / 120.0) {
,            return ""0°"";
,        }
,        String direction;
,        if (longitude > 0) {
,            direction = ""E"";
,        } else {
,            direction = ""W"";
,        }
,        double absLongitude = Math.abs(longitude);
,        return formatDegreesAndMinutes(absLongitude)+direction;
,    }
"
a5ecb7e9-82a6-472c-bd23-3a7d67c2868a,92fe47cc-393e-48e2-8dd4-e49d02bb1d95,PLUS,"PUBLIC,STATIC,void,main,LPAREN,String,LBRACKET,RBRACKET,args,RPAREN,LBRACE,ArrayList,al,EQ,NEW,ArrayList,LPAREN,RPAREN,SEMI,al,DOT,add,LPAREN,""C"",RPAREN,SEMI,al,DOT,add,LPAREN,""A"",RPAREN,SEMI,al,DOT,add,LPAREN,""E"",RPAREN,SEMI,al,DOT,add,LPAREN,""B"",RPAREN,SEMI,al,DOT,add,LPAREN,""D"",RPAREN,SEMI,al,DOT,add,LPAREN,""F"",RPAREN,SEMI,Iterator,itr,EQ,al,DOT,iterator,LPAREN,RPAREN,SEMI,WHILE,LPAREN,itr,DOT,hasNext,LPAREN,RPAREN,RPAREN,LBRACE,Object,element,EQ,itr,DOT,next,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,element,<MASK>,"" "",RPAREN,SEMI,RBRACE,RBRACE","    public static void main(String[] args) {
,        /*
,         * Cria um arraylist
,         */
,        ArrayList al = new ArrayList();
,        /*
,         * Adiciona elementos a coleção
,         */
,        al.add(""C"");
,        al.add(""A"");
,        al.add(""E"");
,        al.add(""B"");
,        al.add(""D"");
,        al.add(""F"");
,        /*
,         * Utiliza o iterator para visualizar o conteúdo da coleção
,         */
,        Iterator itr = al.iterator();
,        /*
,         * hasNext() => IsDone()
,         * next() => Next() seguido por CurrentItem()
,         * Note que não há First(). First() é feito automaticamente
,         * quando o iterador é criado
,         */
,        while (itr.hasNext()) {
,            Object element = itr.next();
,            System.out.println(element<MASK>"" "");
,            
,        }
,        
,    }
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,5b3cd954-6c76-47cd-aa96-6c67c4de0609,BANGEQ,"PRIVATE,String,readFile,LPAREN,File,file,RPAREN,THROWS,IOException,LBRACE,BufferedReader,reader,EQ,NEW,BufferedReader,LPAREN,NEW,FileReader,LPAREN,file,RPAREN,RPAREN,SEMI,String,line,SEMI,StringBuilder,stringBuilder,EQ,NEW,StringBuilder,LPAREN,RPAREN,SEMI,String,ls,EQ,System,DOT,getProperty,LPAREN,""line.separator"",RPAREN,SEMI,WHILE,LPAREN,LPAREN,line,EQ,reader,DOT,readLine,LPAREN,RPAREN,RPAREN,<MASK>,null,RPAREN,LBRACE,stringBuilder,DOT,append,LPAREN,line,RPAREN,SEMI,stringBuilder,DOT,append,LPAREN,ls,RPAREN,SEMI,RBRACE,RETURN,stringBuilder,DOT,toString,LPAREN,RPAREN,SEMI,RBRACE","  private String readFile(File file) throws IOException {
,    BufferedReader reader = new BufferedReader(new FileReader(file));
,    String line;
,    StringBuilder stringBuilder = new StringBuilder();
,    String ls = System.getProperty(""line.separator"");
,
,    while ((line = reader.readLine()) <MASK> null) {
,      stringBuilder.append(line);
,      stringBuilder.append(ls);
,    }
,
,    return stringBuilder.toString();
,  }
"
b5ee7e5e-a7bf-41d4-8880-3ac95d2f8822,aa1eb563-2f07-4050-97fd-c081e06b4e11,BANGEQ,"PUBLIC,void,append,LPAREN,File,outputFile,RPAREN,LBRACE,DataOutputStream,fos,EQ,null,SEMI,TRY,LBRACE,fos,EQ,NEW,DataOutputStream,LPAREN,LPAREN,NEW,GZIPOutputStream,LPAREN,NEW,FileOutputStream,LPAREN,outputFile,COMMA,true,RPAREN,RPAREN,RPAREN,RPAREN,SEMI,copy,LPAREN,in,COMMA,fos,RPAREN,SEMI,RBRACE,CATCH,LPAREN,FileNotFoundException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,EOFException,eof,RPAREN,LBRACE,RBRACE,CATCH,LPAREN,IOException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,FINALLY,LBRACE,TRY,LBRACE,IF,LPAREN,fos,<MASK>,null,RPAREN,LBRACE,fos,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,CATCH,LPAREN,IOException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,RBRACE","	public void append(File outputFile) {
,		DataOutputStream fos = null;
,		try {
,			fos = new DataOutputStream((new GZIPOutputStream(new FileOutputStream(outputFile, true))));
,			copy(in, fos);
,		} catch (FileNotFoundException e) {
,			e.printStackTrace();
,		} catch (EOFException eof) {
,		} catch (IOException e){
,			e.printStackTrace();
,		}finally {
,			try {
,				if (fos <MASK> null) {
,					fos.close();
,				}
,			} catch (IOException e) {
,				e.printStackTrace();
,			}
,		}
,	}
"
ceb2d628-7548-4a8f-9594-53a373297866,1dfbceb3-dcec-4758-b4b5-b1b4bda093b9,BANGEQ,"PROTECTED,void,initialize,LPAREN,RPAREN,LBRACE,IF,LPAREN,profile,<MASK>,null,RPAREN,LBRACE,drive,DOT,setStraightProfile,LPAREN,profile,RPAREN,SEMI,RBRACE,drive,DOT,setPositionGoal,LPAREN,distance,STAR,12,COMMA,angle,COMMA,speed,STAR,12,RPAREN,SEMI,setTimeout,LPAREN,timeout,RPAREN,SEMI,RBRACE","  protected void initialize() {
,    if (profile <MASK> null) {
,      drive.setStraightProfile(profile);
,    }
,    drive.setPositionGoal(distance * 12, angle, speed * 12);  // Drive controller works in inches
,    setTimeout(timeout);
,  }
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,ef4f3e1c-7a8e-4766-bd65-dc4b13ea0e74,LT,"PUBLIC,byte,LBRACKET,RBRACKET,getBytes,LPAREN,RPAREN,LBRACE,ByteBuffer,buffer,EQ,ByteBuffer,DOT,allocate,LPAREN,MESSAGE_SIZE,RPAREN,SEMI,buffer,DOT,order,LPAREN,ByteOrder,DOT,BIG_ENDIAN,RPAREN,SEMI,buffer,DOT,putFloat,LPAREN,0,COMMA,speedRA,RPAREN,SEMI,buffer,DOT,putFloat,LPAREN,4,COMMA,speedDE,RPAREN,SEMI,buffer,DOT,put,LPAREN,8,COMMA,LPAREN,byte,RPAREN,LPAREN,LPAREN,ticks,SLASH,256,RPAREN,AMP,FF,RPAREN,RPAREN,SEMI,buffer,DOT,put,LPAREN,9,COMMA,LPAREN,byte,RPAREN,LPAREN,ticks,AMP,FF,RPAREN,RPAREN,SEMI,byte,LBRACKET,RBRACKET,array,EQ,buffer,DOT,array,LPAREN,RPAREN,SEMI,int,sum,EQ,0,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,MESSAGE_SIZE,SUB,1,SEMI,i,PLUSPLUS,RPAREN,LBRACE,sum,PLUSEQ,array,LBRACKET,i,RBRACKET,SEMI,RBRACE,array,LBRACKET,MESSAGE_SIZE,SUB,1,RBRACKET,EQ,LPAREN,byte,RPAREN,LPAREN,sum,AMP,FF,RPAREN,SEMI,RETURN,array,SEMI,RBRACE","	public byte[] getBytes(){
,		ByteBuffer buffer = ByteBuffer.allocate(MESSAGE_SIZE);
,		buffer.order(ByteOrder.BIG_ENDIAN);
,		buffer.putFloat(0, speedRA);
,		buffer.putFloat(4, speedDE);
,		buffer.put(8,(byte) ((ticks/256) & 0xFF));
,		buffer.put(9,(byte) (ticks & 0xFF));
,		
,		
,		byte[] array = buffer.array();
,		int sum = 0;
,		for(int i=0; i<MASK>MESSAGE_SIZE-1; i++){
,			sum+=array[i];
,		}
,		array[MESSAGE_SIZE-1]=(byte) (sum & 0xFF);
,		
,//		System.out.print(""send: "");
,//		for(int i =0; i<MESSAGE_SIZE; i++){
,//			System.out.printf(""%02X "", array[i]);
,//		}
,//		System.out.println("""");
,		return array;
,	}
"
c694737b-29b6-48d5-90c3-b6e0b6d64d88,b33c5183-a472-465b-a36b-da8469028330,PERCENT,"double,getLongitudeInDegrees,LPAREN,double,row,COMMA,double,positionInRow,RPAREN,LBRACE,double,offset,EQ,getPositionOffset,LPAREN,row,RPAREN,SEMI,double,rowLength,EQ,getRowLength,LPAREN,row,RPAREN,SEMI,IF,LPAREN,rowLength,EQEQ,0,RPAREN,LBRACE,RETURN,0,SEMI,RBRACE,double,adjustedPosition,EQ,LPAREN,positionInRow,PLUS,offset,RPAREN,<MASK>,rowLength,SEMI,RETURN,360.0,STAR,adjustedPosition,SLASH,rowLength,SEMI,RBRACE","    double getLongitudeInDegrees(double row, double positionInRow) {
,        double offset = getPositionOffset(row);
,        double rowLength = getRowLength(row);
,        if (rowLength == 0) {
,            return 0;
,        }
,        double adjustedPosition = (positionInRow + offset) <MASK> rowLength;
,        return 360.0 * adjustedPosition / rowLength;
,    }
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,6d86c78a-b200-4192-b987-73146eb8cc54,LT,"PUBLIC,int,LBRACKET,RBRACKET,checkMyScore,LPAREN,RPAREN,LBRACE,byte,LBRACKET,RBRACKET,scores,EQ,super,DOT,getMyScore,LPAREN,RPAREN,SEMI,int,LBRACKET,RBRACKET,_scores,EQ,NEW,int,LBRACKET,scores,DOT,length,SLASH,4,RBRACKET,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,_scores,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,_scores,LBRACKET,i,RBRACKET,EQ,super,DOT,bytesToInt,LPAREN,scores,LBRACKET,i,STAR,4,RBRACKET,COMMA,scores,LBRACKET,i,STAR,4,PLUS,1,RBRACKET,COMMA,scores,LBRACKET,i,STAR,4,PLUS,2,RBRACKET,COMMA,scores,LBRACKET,i,STAR,4,PLUS,3,RBRACKET,RPAREN,SEMI,RBRACE,RETURN,_scores,SEMI,RBRACE","	public int[] checkMyScore() {
,		byte[] scores = super.getMyScore();
,		int[] _scores = new int[scores.length/4];
,		for (int i = 0 ; i <MASK> _scores.length ; i++){
,			_scores[i] = super.bytesToInt(scores[i * 4], scores[i*4 + 1], scores[i*4 + 2], scores[i*4 + 3]);
,		}
,		return _scores;
,	}
"
d5d2689d-932b-46b4-b285-e839be00a71d,2ef4ca86-759b-4513-96c6-9241b466a6a6,STAR,"PUBLIC,void,request,LPAREN,String,host,COMMA,int,port,COMMA,String,path,RPAREN,LBRACE,FINAL,String,url,EQ,""http://"",PLUS,host,PLUS,"":"",PLUS,port,PLUS,LPAREN,path,DOT,startsWith,LPAREN,""/"",RPAREN,QUES,path,COLON,""/"",PLUS,path,RPAREN,SEMI,FINAL,ExecutorService,executor,EQ,Executors,DOT,newFixedThreadPool,LPAREN,clients,RPAREN,SEMI,FINAL,List,LT,Callable,LT,RequestMetering,GTGT,callables,EQ,NEW,ArrayList,LT,Callable,LT,RequestMetering,GTGT,LPAREN,clients,<MASK>,loopCount,RPAREN,SEMI,FOR,LPAREN,int,loop,EQ,0,SEMI,loop,LT,loopCount,SEMI,loop,PLUSPLUS,RPAREN,LBRACE,FOR,LPAREN,int,client,EQ,0,SEMI,client,LT,clients,SEMI,client,PLUSPLUS,RPAREN,LBRACE,callables,DOT,add,LPAREN,task,LPAREN,url,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,TRY,LBRACE,FINAL,long,start,EQ,System,DOT,currentTimeMillis,LPAREN,RPAREN,SEMI,print,LPAREN,start,COMMA,executor,DOT,invokeAll,LPAREN,callables,RPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,Exception,e,RPAREN,LBRACE,THROW,NEW,RuntimeException,LPAREN,""Task execution exception!"",COMMA,e,RPAREN,SEMI,RBRACE,RBRACE","    public void request(String host, int port, String path) {
,
,        final String url = ""http://"" + host + "":"" + port + (path.startsWith(""/"") ? path : ""/"" + path);
,
,        final ExecutorService executor = Executors.newFixedThreadPool(clients);
,
,        final List<Callable<RequestMetering>> callables = new ArrayList<Callable<RequestMetering>>(clients <MASK> loopCount);
,
,        for(int loop = 0; loop < loopCount; loop++) {
,            for (int client = 0; client < clients; client++) {
,                callables.add(task(url));
,            }
,        }
,
,        try {
,            final long start = System.currentTimeMillis();
,            print(start, executor.invokeAll(callables));
,        } catch (Exception e) {
,            throw new RuntimeException(""Task execution exception!"", e);
,        }
,    }
"
1b82c97a-fe19-4584-bdbc-4f13bb123c10,6a2b9d91-f969-4c05-9af9-9d7fefa8c31c,STAR,"PUBLIC,double,Next_Gaussian,LPAREN,double,mean,COMMA,double,stdev,RPAREN,LBRACE,double,x,EQ,LPAREN,double,RPAREN,Next_Gaussian,LPAREN,RPAREN,SEMI,RETURN,LPAREN,double,RPAREN,LPAREN,x,<MASK>,stdev,PLUS,mean,RPAREN,SEMI,RBRACE","    public double Next_Gaussian(double mean,double stdev)
,    {
,        double x=(double) Next_Gaussian();
,        return (double)(x<MASK>stdev+mean);
,    }
"
2170437a-9f53-47a2-b3cb-257eca2eb4ab,026e8ee1-2a67-458e-bdee-677cdf5f4f45,EQEQ,"PUBLIC,void,setCreatedDate,LPAREN,Calendar,createdDate,RPAREN,LBRACE,IF,LPAREN,createdDate,<MASK>,null,RPAREN,LBRACE,THROW,NEW,IllegalArgumentException,LPAREN,""Created date cannot be null!"",RPAREN,SEMI,RBRACE,this,DOT,createdDate,EQ,createdDate,SEMI,RBRACE","	public void setCreatedDate(Calendar createdDate)
,	{
,		if (createdDate <MASK> null)
,		{
,			throw new IllegalArgumentException(""Created date cannot be null!"");
,		}
,		this.createdDate = createdDate;
,	}
"
ee6285e4-70fb-4aa1-99e0-6f8cd1871b27,fc665a41-977f-4b61-ad1f-bd149860f49b,LTEQ,"PUBLIC,STATIC,void,main,LPAREN,String,args,LBRACKET,RBRACKET,RPAREN,LBRACE,long,begin,EQ,System,DOT,currentTimeMillis,LPAREN,RPAREN,SEMI,int,total,EQ,338614,SEMI,int,limit,EQ,22574,SEMI,ExecutorService,executorService,EQ,Executors,DOT,newFixedThreadPool,LPAREN,total,SLASH,limit,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,total,SLASH,limit,SEMI,i,PLUSPLUS,RPAREN,LBRACE,executorService,DOT,execute,LPAREN,NEW,SetCitedIDList,LPAREN,i,STAR,limit,COMMA,limit,RPAREN,RPAREN,SEMI,RBRACE,executorService,DOT,shutdown,LPAREN,RPAREN,SEMI,WHILE,LPAREN,BANG,executorService,DOT,isTerminated,LPAREN,RPAREN,RPAREN,LBRACE,RBRACE,long,end,EQ,System,DOT,currentTimeMillis,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""total time: "",PLUS,LPAREN,end,SUB,begin,RPAREN,SLASH,1000,PLUS,"" seconds."",RPAREN,SEMI,RBRACE","	public static void main(String args[]) {
,		long begin = System.currentTimeMillis();
,		int total = 338614;
,		int limit = 22574;
,		ExecutorService executorService = Executors.newFixedThreadPool(total
,				/ limit);
,		for (int i = 0; i <MASK> total / limit; i++) {
,			executorService.execute(new SetCitedIDList(i * limit, limit));
,		}
,		executorService.shutdown();
,		while(!executorService.isTerminated()) {}
,		long end = System.currentTimeMillis();
,		System.out.println(""total time: "" + (end - begin) / 1000 + "" seconds."");
,	}
"
113c5414-6c55-466b-b879-a350ab6e0ca2,287d63bf-192a-4fac-b5c9-dd5b6dd4c451,EQ,"PUBLIC,void,setClosedImage,LPAREN,ImageIcon,closed,RPAREN,LBRACE,this,DOT,closed,<MASK>,closed,SEMI,RBRACE","	public void setClosedImage(ImageIcon closed) {
,		this.closed <MASK> closed;
,	}
"
ceb2d628-7548-4a8f-9594-53a373297866,beac5081-4031-4c5e-a33f-4da7602e6cd0,BANGEQ,"PUBLIC,void,stop,LPAREN,RPAREN,LBRACE,IF,LPAREN,controlUpdater,<MASK>,null,RPAREN,LBRACE,controlUpdater,DOT,cancel,LPAREN,RPAREN,SEMI,controlUpdater,EQ,null,SEMI,RBRACE,RBRACE","  public void stop() {
,    if(controlUpdater <MASK> null) {
,      controlUpdater.cancel();
,      controlUpdater = null;
,    }
,  }
"
bc5a6e89-7851-455f-9293-6a299f252d97,e203935f-d06b-4edd-931f-fed839cda028,STAR,"MONKEYS_AT,Override,PUBLIC,void,run,LPAREN,RPAREN,LBRACE,int,np,EQ,LPAREN,int,RPAREN,LPAREN,LPAREN,LPAREN,double,RPAREN,j,SLASH,content,DOT,length,RPAREN,<MASK>,100,RPAREN,SEMI,IF,LPAREN,np,BANGEQ,lp,RPAREN,listener,DOT,percentChanged,LPAREN,lp,EQ,np,RPAREN,SEMI,RBRACE","							@Override
,							public void run() {
,								int np = (int)(((double)j/content.length)<MASK>100);
,								
,								if(np != lp)
,									listener.percentChanged(lp = np);
,							}
"
2576a407-9fd6-4f86-aee0-46707642b564,dccfcde5-e18a-4b08-bb9b-f88183e688c3,GT,"PROTECTED,void,assinarGravar,LPAREN,RPAREN,THROWS,IOException,COMMA,KeyStoreException,LBRACE,int,index,EQ,gCrlv,DOT,getTableGerenciarCrlvs,LPAREN,RPAREN,DOT,getSelectionModel,LPAREN,RPAREN,DOT,getLeadSelectionIndex,LPAREN,RPAREN,SEMI,IF,LPAREN,index,<MASK>,SUB,1,RPAREN,LBRACE,XStream,xstream,EQ,NEW,XStream,LPAREN,RPAREN,SEMI,ModelCRLV,c,EQ,gCrlv,DOT,getCrlv,LPAREN,RPAREN,DOT,get,LPAREN,index,RPAREN,SEMI,String,xml,EQ,xstream,DOT,toXML,LPAREN,c,RPAREN,SEMI,File,f,EQ,NEW,File,LPAREN,""xmls/"",COMMA,c,DOT,getCodRenavam,LPAREN,RPAREN,PLUS,"".xml"",RPAREN,SEMI,IF,LPAREN,f,DOT,exists,LPAREN,RPAREN,RPAREN,f,DOT,delete,LPAREN,RPAREN,SEMI,f,DOT,createNewFile,LPAREN,RPAREN,SEMI,FileWriter,x,EQ,NEW,FileWriter,LPAREN,f,COMMA,true,RPAREN,SEMI,x,DOT,write,LPAREN,""<?xml version =  \""1.0\"" encoding=\""UTF-8\""?>\n"",PLUS,xml,RPAREN,SEMI,x,DOT,close,LPAREN,RPAREN,SEMI,ModelSigner,model,EQ,NEW,ModelSigner,LPAREN,RPAREN,SEMI,ViewSigner,vs,EQ,NEW,ViewSigner,LPAREN,model,RPAREN,SEMI,ControllerSigner,cs,EQ,NEW,ControllerSigner,LPAREN,vs,COMMA,c,DOT,getCodRenavam,LPAREN,RPAREN,COMMA,true,RPAREN,SEMI,mw,DOT,getDesktop,LPAREN,RPAREN,DOT,add,LPAREN,vs,RPAREN,SEMI,vs,DOT,setVisible,LPAREN,true,RPAREN,SEMI,RBRACE,ELSE,JOptionPane,DOT,showMessageDialog,LPAREN,mw,COMMA,""Selecione um documento para ser assinado!"",RPAREN,SEMI,RBRACE","    protected void assinarGravar() throws IOException, KeyStoreException{
,        int index = gCrlv.getTableGerenciarCrlvs().getSelectionModel().getLeadSelectionIndex();
,        if(index <MASK> -1){
,            XStream xstream = new XStream();
,            ModelCRLV c = gCrlv.getCrlv().get(index);
,            String xml = xstream.toXML(c);
,            
,             File f = new File(""xmls/"", c.getCodRenavam()+"".xml"");
,            if(f.exists())
,                f.delete();
,        
,            f.createNewFile();
,
,            FileWriter x = new FileWriter(f, true);
,            x.write(""<?xml version =  \""1.0\"" encoding=\""UTF-8\""?>\n"" +xml);
,            x.close();
,            
,            ModelSigner model = new ModelSigner();
,            ViewSigner vs = new ViewSigner(model);
,            ControllerSigner cs = new ControllerSigner(vs, c.getCodRenavam(), true);
,            mw.getDesktop().add(vs);
,            vs.setVisible(true);
,        }
,        else
,            JOptionPane.showMessageDialog(mw, ""Selecione um documento para ser assinado!"");
,    }
"
4a247308-1941-42bf-b8c1-203a89952252,3d782161-9c40-41a3-8c17-cddbfdbac2dd,BANGEQ,"PUBLIC,STATIC,void,main,LPAREN,String,LBRACKET,RBRACKET,args,RPAREN,LBRACE,Filtro,listaContas,EQ,NEW,FiltroSaldoMenorQue100Reais,LPAREN,NEW,FiltroComSaldoMairQue500MilReais,LPAREN,NEW,FiltroComAberturaMesCorrente,LPAREN,RPAREN,RPAREN,RPAREN,SEMI,List,LT,Conta,GT,contas,EQ,NEW,ArrayList,LT,Conta,GT,LPAREN,RPAREN,SEMI,Conta,conta,EQ,NEW,Conta,LPAREN,""Brun"",COMMA,600000,COMMA,Calendar,DOT,getInstance,LPAREN,RPAREN,RPAREN,SEMI,contas,DOT,add,LPAREN,conta,RPAREN,SEMI,List,LT,Conta,GT,listaFiltrada,EQ,listaContas,DOT,filtra,LPAREN,contas,RPAREN,SEMI,IF,LPAREN,listaFiltrada,<MASK>,null,RPAREN,LBRACE,FOR,LPAREN,Conta,contaAux,COLON,listaFiltrada,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,contaAux,DOT,getNomeTitular,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,RBRACE","public static void main(String[] args) {
,		
,		Filtro listaContas = new FiltroSaldoMenorQue100Reais(new FiltroComSaldoMairQue500MilReais(new FiltroComAberturaMesCorrente()));
,		
,		List<Conta> contas = new ArrayList<Conta>();
,		
,		Conta conta = new Conta(""Brun"", 600000, Calendar.getInstance());
,
,		contas.add(conta);
,		
,		List<Conta> listaFiltrada = listaContas.filtra(contas);
,		
,		if(listaFiltrada <MASK> null){
,			for(Conta contaAux : listaFiltrada){
,				System.out.println(contaAux.getNomeTitular());
,			}
,		}
,	}
"
3913c395-db09-4ac4-8282-49a81b6a21f4,95093efd-c827-4417-9d8c-010da03ccf32,BANGEQ,"MONKEYS_AT,Subscribe,PUBLIC,void,handleInput,LPAREN,InputEvent,ev,RPAREN,LBRACE,IF,LPAREN,ev,DOT,isMouseMovedEvent,LPAREN,RPAREN,RPAREN,LBRACE,Point,mouse,EQ,ev,DOT,getPoint,LPAREN,RPAREN,SEMI,boolean,newMouseOver,EQ,bounds,DOT,contains,LPAREN,mouse,RPAREN,SEMI,IF,LPAREN,newMouseOver,<MASK>,mouseOver,RPAREN,LBRACE,mouseOver,EQ,newMouseOver,SEMI,dirty,EQ,true,SEMI,RBRACE,RBRACE,RBRACE","	@Subscribe
,	public void handleInput(InputEvent ev) {
,		if (ev.isMouseMovedEvent()) {
,			Point mouse = ev.getPoint();
,			boolean newMouseOver = bounds.contains(mouse);
,			if (newMouseOver <MASK> mouseOver) {
,				mouseOver = newMouseOver;
,				dirty = true;
,			}
,		}
,	}
"
09478113-8f39-4146-870b-8037a6932443,04dadcb5-251c-4b9a-931f-46b1b1ddcc99,EQEQ,"PUBLIC,STATIC,FINAL,boolean,isSamePage,LPAREN,int,addr1,COMMA,int,addr2,RPAREN,LBRACE,RETURN,LPAREN,addr1,AMP,FF00,RPAREN,<MASK>,LPAREN,addr2,AMP,FF00,RPAREN,SEMI,RBRACE","    public static final boolean isSamePage(int addr1, int addr2)
,    {
,        return (addr1 & 0xFF00) <MASK> (addr2 & 0xFF00);
,    }
"
46553d6c-dc87-4edc-9d46-5b7555c514e8,52f9a78f-c8a9-4162-99bb-8363f5ac6ae4,PERCENT,"PUBLIC,STATIC,String,show,LPAREN,short,i,COMMA,FINAL,int,num_bits,RPAREN,LBRACE,int,num_chars,EQ,16,SLASH,num_bits,SEMI,IF,LPAREN,16,<MASK>,num_bits,EQEQ,0,RPAREN,LBRACE,SUBSUB,num_chars,SEMI,RBRACE,FINAL,char,LBRACKET,RBRACKET,buf,EQ,NEW,char,LBRACKET,num_chars,PLUS,1,RBRACKET,SEMI,FINAL,int,radix,EQ,1,LTLT,num_bits,SEMI,FINAL,long,mask,EQ,radix,SUB,1,SEMI,FOR,LPAREN,int,charPos,EQ,num_chars,SEMI,charPos,GTEQ,0,SEMI,SUBSUB,charPos,RPAREN,LBRACE,buf,LBRACKET,charPos,RBRACKET,EQ,ByteUtil,DOT,digits,LBRACKET,LPAREN,int,RPAREN,LPAREN,i,AMP,mask,RPAREN,RBRACKET,SEMI,i,GTGTGTEQ,num_bits,SEMI,RBRACE,RETURN,NEW,String,LPAREN,buf,RPAREN,SEMI,RBRACE","  public static String show( short i, final int num_bits ) {
,    int num_chars = 16 / num_bits;
,
,    if ( 16 <MASK> num_bits == 0 ) {
,      --num_chars;
,    }
,
,    final char[] buf = new char[num_chars + 1];
,    final int radix = 1 << num_bits;
,    final long mask = radix - 1;
,
,    for ( int charPos = num_chars; charPos >= 0; --charPos ) {
,      buf[charPos] = ByteUtil.digits[(int)( i & mask )];
,      i >>>= num_bits;
,    }
,
,    return new String( buf );
,  }
"
a64abb7e-1e48-4f96-a7b5-816a0922e0f3,cc79a021-3abf-452e-8c22-0eb050cfb5b0,GT,"MONKEYS_AT,Override,PUBLIC,ExperimentResult,evaluation,LPAREN,String,trainSet,COMMA,String,testSet,COMMA,String,labelsXML,RPAREN,THROWS,Exception,LBRACE,double,maxF,EQ,Double,DOT,MIN_VALUE,SEMI,double,bestVariance,EQ,Double,DOT,NaN,SEMI,FOR,LPAREN,Double,variance,COLON,this,DOT,variances,RPAREN,LBRACE,MultipleEvaluation,results,EQ,crossValidation,LPAREN,trainSet,COMMA,labelsXML,COMMA,variance,RPAREN,SEMI,double,f,EQ,results,DOT,getMean,LPAREN,""Example-Based F-Measure"",RPAREN,SEMI,IF,LPAREN,f,<MASK>,maxF,RPAREN,LBRACE,maxF,EQ,f,SEMI,bestVariance,EQ,variance,SEMI,RBRACE,RBRACE,SingleExperiment,se,EQ,NEW,SingleExperiment,LPAREN,this,DOT,learner,COMMA,bestVariance,RPAREN,SEMI,ExperimentResult,result,EQ,se,DOT,evaluation,LPAREN,trainSet,COMMA,testSet,COMMA,labelsXML,RPAREN,SEMI,result,DOT,setTrainingTime,LPAREN,result,DOT,getTrainingTime,LPAREN,RPAREN,PLUS,this,DOT,trainingTime,RPAREN,SEMI,RETURN,result,SEMI,RBRACE","	@Override
,	public ExperimentResult evaluation(String trainSet, String testSet,
,			String labelsXML) throws Exception {
,
,		double maxF = Double.MIN_VALUE;
,		double bestVariance = Double.NaN;
,		
,		for (Double variance : this.variances) {
,			MultipleEvaluation results = crossValidation(trainSet, labelsXML, variance);
,			double f = results.getMean(""Example-Based F-Measure"");
,			
,			if (f <MASK> maxF) {
,				maxF = f;
,				bestVariance = variance;
,			}
,		}
,
,		SingleExperiment se = new SingleExperiment(this.learner, bestVariance);
,		
,		ExperimentResult result = se.evaluation(trainSet, testSet, labelsXML);
,		result.setTrainingTime(result.getTrainingTime() + this.trainingTime);
,		
,		return result;
,	}
"
92951106-a87f-4e0c-9019-4852bf22d1be,cc29eed8-fb92-4d65-b85d-9fc96d64f4e0,PLUS,"PUBLIC,void,print,LPAREN,Node,node,RPAREN,LBRACE,IF,LPAREN,node,BANGEQ,null,RPAREN,LBRACE,System,DOT,out,DOT,print,LPAREN,node,DOT,value,<MASK>,"" "",RPAREN,SEMI,print,LPAREN,node,DOT,next,RPAREN,SEMI,RBRACE,ELSE,LBRACE,System,DOT,out,DOT,println,LPAREN,RPAREN,SEMI,RBRACE,RBRACE","	public void print(Node node) {
,		if (node != null) {
,			System.out.print(node.value <MASK> "" "");
,			print(node.next);
,		} else {
,			System.out.println();
,		}
,	}
"
c694737b-29b6-48d5-90c3-b6e0b6d64d88,a21cacf2-f152-40a1-b135-72780e6f93ea,PERCENT,"STATIC,BitSet,getBits,LPAREN,int,arg,COMMA,int,numBits,RPAREN,LBRACE,BitSet,result,EQ,NEW,BitSet,LPAREN,numBits,RPAREN,SEMI,int,divisor,EQ,1,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,numBits,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,LPAREN,arg,SLASH,divisor,RPAREN,<MASK>,2,EQEQ,1,RPAREN,LBRACE,result,DOT,set,LPAREN,i,RPAREN,SEMI,RBRACE,divisor,EQ,divisor,STAR,2,SEMI,RBRACE,RETURN,result,SEMI,RBRACE","    static BitSet getBits(int arg, int numBits) {
,        BitSet result = new BitSet(numBits);
,        int divisor = 1;
,        for (int i=0; i < numBits; i++) {
,            if ((arg / divisor) <MASK> 2 == 1) {
,                result.set(i);
,            }
,            divisor = divisor * 2;
,        }
,        return result;
,    }
"
7a6d4ee7-a11c-445d-8f58-7963e611bee0,19bcc161-8e75-4ac3-88ea-de2d223d081d,BANGEQ,"PUBLIC,void,executeAction,LPAREN,int,id,RPAREN,LBRACE,IF,LPAREN,finished,EQEQ,false,RPAREN,LBRACE,RETURN,SEMI,RBRACE,IF,LPAREN,id,EQEQ,0,RPAREN,LBRACE,IF,LPAREN,getWindowState,LPAREN,RPAREN,EQEQ,WindowState,DOT,FULLSCREEN,RPAREN,LBRACE,this,DOT,switchFullscreen,LPAREN,RPAREN,SEMI,RBRACE,this,DOT,setVisible,LPAREN,false,RPAREN,SEMI,this,DOT,exit,LPAREN,RPAREN,SEMI,RETURN,SEMI,RBRACE,IF,LPAREN,id,EQEQ,1,RPAREN,LBRACE,IF,LPAREN,getWindowState,LPAREN,RPAREN,EQEQ,WindowState,DOT,FULLSCREEN,RPAREN,LBRACE,this,DOT,switchFullscreen,LPAREN,RPAREN,SEMI,RBRACE,this,DOT,setVisible,LPAREN,false,RPAREN,SEMI,this,DOT,backLauncher,LPAREN,RPAREN,SEMI,RETURN,SEMI,RBRACE,IF,LPAREN,id,EQEQ,2,RPAREN,LBRACE,boolean,fullscreen,EQ,LPAREN,getWindowState,LPAREN,RPAREN,EQEQ,WindowState,DOT,FULLSCREEN,RPAREN,SEMI,IF,LPAREN,fullscreen,EQ,true,RPAREN,LBRACE,this,DOT,switchFullscreen,LPAREN,RPAREN,SEMI,RBRACE,this,DOT,setVisible,LPAREN,false,RPAREN,SEMI,JFileChooser,dialog,EQ,NEW,JFileChooser,LPAREN,RPAREN,SEMI,FINAL,int,res,EQ,dialog,DOT,showSaveDialog,LPAREN,contentPane,RPAREN,SEMI,IF,LPAREN,res,EQEQ,JFileChooser,DOT,APPROVE_OPTION,RPAREN,LBRACE,TRY,LBRACE,File,file,EQ,dialog,DOT,getSelectedFile,LPAREN,RPAREN,SEMI,IF,LPAREN,BANG,file,DOT,exists,LPAREN,RPAREN,RPAREN,LBRACE,file,DOT,createNewFile,LPAREN,RPAREN,SEMI,RBRACE,List,LT,String,GT,lines,EQ,NEW,ArrayList,LT,String,GT,LPAREN,RPAREN,SEMI,DateFormat,df,EQ,NEW,SimpleDateFormat,LPAREN,""MM/dd/yyyy HH:mm:ss"",RPAREN,SEMI,Date,today,EQ,Calendar,DOT,getInstance,LPAREN,RPAREN,DOT,getTime,LPAREN,RPAREN,SEMI,String,reportDate,EQ,df,DOT,format,LPAREN,today,RPAREN,SEMI,lines,DOT,add,LPAREN,""Date: "",PLUS,reportDate,RPAREN,SEMI,lines,DOT,add,LPAREN,""Version: 1.6 Release"",RPAREN,SEMI,lines,DOT,add,LPAREN,""Working directory: "",PLUS,System,DOT,getProperty,LPAREN,""user.dir"",RPAREN,RPAREN,SEMI,lines,DOT,add,LPAREN,""---------------------------------------------------------------"",RPAREN,SEMI,lines,DOT,add,LPAREN,""Quiz v1.6 Information:"",RPAREN,SEMI,lines,DOT,add,LPAREN,""File: "",PLUS,this,DOT,file,DOT,getAbsolutePath,LPAREN,RPAREN,RPAREN,SEMI,lines,DOT,add,LPAREN,""User: "",PLUS,System,DOT,getProperty,LPAREN,""user.name"",RPAREN,RPAREN,SEMI,lines,DOT,add,LPAREN,"" "",RPAREN,SEMI,lines,DOT,add,LPAREN,""Title: "",PLUS,quiz,DOT,getTitle,LPAREN,RPAREN,RPAREN,SEMI,lines,DOT,add,LPAREN,""Author: "",PLUS,quiz,DOT,getAuthor,LPAREN,RPAREN,RPAREN,SEMI,lines,DOT,add,LPAREN,""Version: "",PLUS,quiz,DOT,getVersion,LPAREN,RPAREN,RPAREN,SEMI,lines,DOT,add,LPAREN,""Tags: "",PLUS,getTags,LPAREN,quiz,DOT,getTags,LPAREN,RPAREN,RPAREN,RPAREN,SEMI,lines,DOT,add,LPAREN,""Questions: "",PLUS,quiz,DOT,getQuestions,LPAREN,RPAREN,DOT,size,LPAREN,RPAREN,RPAREN,SEMI,lines,DOT,add,LPAREN,"" "",RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,quiz,DOT,getQuestions,LPAREN,RPAREN,DOT,size,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,Result,r,EQ,null,SEMI,IF,LPAREN,results,DOT,size,LPAREN,RPAREN,GT,i,RPAREN,LBRACE,r,EQ,results,DOT,get,LPAREN,i,RPAREN,SEMI,RBRACE,Question,q,EQ,quiz,DOT,getQuestions,LPAREN,RPAREN,DOT,get,LPAREN,i,RPAREN,SEMI,lines,DOT,add,LPAREN,""Question #"",PLUS,LPAREN,i,PLUS,1,RPAREN,PLUS,"": "",PLUS,q,DOT,getQuestion,LPAREN,RPAREN,RPAREN,SEMI,IF,LPAREN,r,<MASK>,null,RPAREN,LBRACE,lines,DOT,add,LPAREN,""Your answer: "",PLUS,q,DOT,getAnswers,LPAREN,RPAREN,LBRACKET,r,DOT,getAnswerId,LPAREN,RPAREN,RBRACKET,DOT,getAnswer,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,ELSE,LBRACE,lines,DOT,add,LPAREN,""Your answer: [This question is not answered]"",RPAREN,SEMI,RBRACE,lines,DOT,add,LPAREN,""Right answer: "",PLUS,q,DOT,getAnswers,LPAREN,RPAREN,LBRACKET,q,DOT,getRightAnswer,LPAREN,RPAREN,RBRACKET,DOT,getAnswer,LPAREN,RPAREN,RPAREN,SEMI,lines,DOT,add,LPAREN,"" "",RPAREN,SEMI,RBRACE,FileManager,DOT,clearFile,LPAREN,file,RPAREN,SEMI,FileManager,DOT,writeFile,LPAREN,file,COMMA,lines,DOT,toArray,LPAREN,NEW,String,LBRACKET,lines,DOT,size,LPAREN,RPAREN,RBRACKET,RPAREN,RPAREN,SEMI,Desktop,DOT,getDesktop,LPAREN,RPAREN,DOT,open,LPAREN,file,RPAREN,SEMI,RBRACE,CATCH,LPAREN,Exception,ex,RPAREN,LBRACE,JOptionPane,DOT,showMessageDialog,LPAREN,null,COMMA,""Could not save results: "",PLUS,ex,DOT,getMessage,LPAREN,RPAREN,COMMA,""Quiz Viewer v1.6"",COMMA,JOptionPane,DOT,ERROR_MESSAGE,COMMA,null,RPAREN,SEMI,RBRACE,RBRACE,this,DOT,setVisible,LPAREN,true,RPAREN,SEMI,IF,LPAREN,fullscreen,EQEQ,true,RPAREN,LBRACE,this,DOT,switchFullscreen,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,RBRACE","	public void executeAction(int id)
,	{
,		if(finished == false)
,		{
,			return;
,		}
,		
,		if(id == 0)
,		{
,			if(getWindowState() == WindowState.FULLSCREEN)
,			{
,				this.switchFullscreen();
,			}
,			
,			this.setVisible(false);
,			this.exit();
,			return;
,		}
,		
,		if(id == 1)
,		{
,			if(getWindowState() == WindowState.FULLSCREEN)
,			{
,				this.switchFullscreen();
,			}
,			
,			this.setVisible(false);
,			this.backLauncher();
,			return;
,		}
,		
,		if(id == 2)
,		{
,			boolean fullscreen = (getWindowState() == WindowState.FULLSCREEN);
,			if(fullscreen = true)
,			{
,				this.switchFullscreen();
,			}
,			this.setVisible(false);
,			
,			JFileChooser dialog = new JFileChooser();
,			final int res = dialog.showSaveDialog(contentPane);
,			if(res == JFileChooser.APPROVE_OPTION) 
,			{
,				try
,				{
,					File file = dialog.getSelectedFile();
,					if(!file.exists())
,					{
,						file.createNewFile();
,					}
,					
,					List<String> lines = new ArrayList<String>();
,					
,					DateFormat df = new SimpleDateFormat(""MM/dd/yyyy HH:mm:ss"");
,					Date today = Calendar.getInstance().getTime();        
,					String reportDate = df.format(today);
,					
,					lines.add(""Date: "" + reportDate);
,					lines.add(""Version: 1.6 Release"");
,					lines.add(""Working directory: "" + System.getProperty(""user.dir""));
,					lines.add(""---------------------------------------------------------------"");
,					lines.add(""Quiz v1.6 Information:"");
,					lines.add(""File: "" + this.file.getAbsolutePath());
,					lines.add(""User: "" + System.getProperty(""user.name""));
,					lines.add("" "");
,					lines.add(""Title: "" + quiz.getTitle());
,					lines.add(""Author: "" + quiz.getAuthor());
,					lines.add(""Version: "" + quiz.getVersion());
,					lines.add(""Tags: "" + getTags(quiz.getTags()));
,					lines.add(""Questions: "" + quiz.getQuestions().size());
,					lines.add("" "");
,					
,					for(int i = 0; i < quiz.getQuestions().size(); i++)
,					{
,						Result r = null;
,						if(results.size() > i)
,						{
,							r = results.get(i);
,						}
,						
,						Question q = quiz.getQuestions().get(i);
,						lines.add(""Question #"" + (i + 1) + "": "" + q.getQuestion());
,						if(r <MASK> null)
,						{
,							lines.add(""Your answer: "" + q.getAnswers()[r.getAnswerId()].getAnswer());
,						}
,						else
,						{
,							lines.add(""Your answer: [This question is not answered]"");
,						}
,						lines.add(""Right answer: "" + q.getAnswers()[q.getRightAnswer()].getAnswer());
,						lines.add("" "");
,					}
,					
,					FileManager.clearFile(file);
,					FileManager.writeFile(file, lines.toArray(new String[lines.size()]));
,					Desktop.getDesktop().open(file);
,				}
,				catch(Exception ex)
,				{
,					JOptionPane.showMessageDialog(null, ""Could not save results: "" + ex.getMessage(), ""Quiz Viewer v1.6"", JOptionPane.ERROR_MESSAGE, null);
,				}
,			}
,			
,			this.setVisible(true);
,			if(fullscreen == true)
,			{
,				this.switchFullscreen();
,			}
,		}
,	}
"
85e73bf4-198d-4e97-95ec-bfad228c11ea,06038377-009d-4fb2-a4a0-91a1a9e97caf,STAR,"PRIVATE,String,toBinaryString,LPAREN,byte,LBRACKET,RBRACKET,values,RPAREN,LBRACE,StringBuilder,sb,EQ,NEW,StringBuilder,LPAREN,values,DOT,length,<MASK>,8,RPAREN,SEMI,FOR,LPAREN,byte,value,COLON,values,RPAREN,LBRACE,sb,DOT,append,LPAREN,toBinaryString,LPAREN,value,RPAREN,RPAREN,SEMI,RBRACE,RETURN,sb,DOT,toString,LPAREN,RPAREN,SEMI,RBRACE","    private String toBinaryString(byte[] values) {
,        StringBuilder sb = new StringBuilder(values.length <MASK> 8);
,        for (byte value : values) {
,            sb.append(toBinaryString(value));
,        }
,        return sb.toString();
,    }
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,e6da8392-fb2e-4cae-b4cf-b7c271a73ce3,LT,"PRIVATE,INDIDriver,getSubdriver,LPAREN,String,name,RPAREN,LBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,subdrivers,DOT,size,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,INDIDriver,d,EQ,subdrivers,DOT,get,LPAREN,i,RPAREN,SEMI,IF,LPAREN,d,DOT,getName,LPAREN,RPAREN,DOT,compareTo,LPAREN,name,RPAREN,EQEQ,0,RPAREN,LBRACE,RETURN,d,SEMI,RBRACE,RBRACE,RETURN,null,SEMI,RBRACE","  private INDIDriver getSubdriver(String name) {
,    for (int i = 0 ; i <MASK> subdrivers.size() ; i++) {
,      INDIDriver d = subdrivers.get(i);
,
,      if (d.getName().compareTo(name) == 0) {
,        return d;
,      }
,    }
,
,    return null;
,  }
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,5f26e4b3-756e-480a-9cdc-a58e902ef2c9,SUB,"PUBLIC,STATIC,int,getScore,LPAREN,Proxy,proxy,RPAREN,LBRACE,int,current_score,EQ,<MASK>,1,SEMI,WHILE,LPAREN,current_score,BANGEQ,_getScore,LPAREN,proxy,RPAREN,RPAREN,LBRACE,TRY,LBRACE,Thread,DOT,sleep,LPAREN,1000,RPAREN,SEMI,RBRACE,CATCH,LPAREN,InterruptedException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,IF,LPAREN,getGameState,LPAREN,proxy,RPAREN,EQEQ,GameState,DOT,WON,RPAREN,LBRACE,current_score,EQ,_getScore,LPAREN,proxy,RPAREN,SEMI,RBRACE,ELSE,System,DOT,out,DOT,println,LPAREN,"" Unexpected state: PLAYING"",RPAREN,SEMI,RBRACE,RETURN,current_score,SEMI,RBRACE","	public static int getScore(Proxy proxy)
,	{
,
,		int current_score = <MASK>1;
,		while (current_score != _getScore(proxy)) 
,		{
,		  try {
,				Thread.sleep(1000);
,			} catch (InterruptedException e) {
,			
,				e.printStackTrace();
,			}
,		   if(getGameState(proxy) == GameState.WON)
,		   {	
,			   current_score = _getScore(proxy);
,		   }
,		   else
,			   System.out.println("" Unexpected state: PLAYING"");
,		}
,		return current_score;
,	}
"
1b82c97a-fe19-4584-bdbc-4f13bb123c10,9972ecc7-66a6-4d66-bd35-6ce5e1b1f490,GTEQ,"MONKEYS_AT,Override,PUBLIC,T,$_,LPAREN,int,n,RPAREN,THROWS,NRException,LBRACE,IF,LPAREN,off,PLUS,n,<MASK>,arr,DOT,length,BARBAR,off,PLUS,n,LT,0,RPAREN,THROW,NEW,NRException,LPAREN,""out of range offset used for offset $double"",RPAREN,SEMI,RETURN,arr,LBRACKET,off,PLUS,n,RBRACKET,SEMI,RBRACE","        @Override
,        public T $_(int n) throws NRException {
,            if (off + n <MASK> arr.length || off + n < 0)
,                throw new NRException(""out of range offset used for offset $double"");
,            return arr[off+n];
,        }
"
8ec044ff-9e5c-46c4-ad39-ccc8ad42dd87,84c57114-5fef-4416-a663-7de97a9d07ad,GT,"PUBLIC,void,actionPerformed,LPAREN,ActionEvent,e,RPAREN,LBRACE,String,id,EQ,LPAREN,String,RPAREN,comboBox,DOT,getSelectedItem,LPAREN,RPAREN,SEMI,int,ind,EQ,suppList,DOT,suppliers,DOT,indexOf,LPAREN,id,RPAREN,SEMI,IF,LPAREN,ind,<MASK>,SUB,1,RPAREN,LBRACE,suppList,DOT,removeSupplier,LPAREN,id,RPAREN,SEMI,loaders,DOT,saveSupplierList,LPAREN,suppList,RPAREN,SEMI,String,LBRACKET,RBRACKET,str_suppList,EQ,suppList,DOT,suppliers,DOT,toArray,LPAREN,NEW,String,LBRACKET,suppList,DOT,suppliers,DOT,size,LPAREN,RPAREN,RBRACKET,RPAREN,SEMI,comboBox,DOT,setModel,LPAREN,NEW,DefaultComboBoxModel,LPAREN,str_suppList,RPAREN,RPAREN,SEMI,RBRACE,RBRACE","			public void actionPerformed(ActionEvent e) {
,				String id=(String)comboBox.getSelectedItem();
,				int ind = suppList.suppliers.indexOf(id);
,				if(ind<MASK>-1)
,				{
,					suppList.removeSupplier(id);
,					loaders.saveSupplierList(suppList);
,					String[] str_suppList = suppList.suppliers.toArray(new String[suppList.suppliers.size()]);
,					comboBox.setModel(new DefaultComboBoxModel(str_suppList));
,				}
,			}
"
ad0a2aad-9ad8-443c-832f-88b9f64460ed,aae1bc2a-181e-4680-a567-78ed9877c1b4,EQ,"PROTECTED,void,interrupted,LPAREN,RPAREN,LBRACE,driveTrain,DOT,turnBtn,<MASK>,false,SEMI,RBRACE","    protected void interrupted() {
,        driveTrain.turnBtn <MASK> false;
,    }
"
56952896-479b-43e9-a9cf-c3f3bb9afc0e,b6c8dc30-ee71-4045-98df-d0433bf28437,SUB,"MONKEYS_AT,Test,PUBLIC,void,test_createUser,LPAREN,RPAREN,THROWS,Exception,LBRACE,User,newUser,EQ,NEW,User,LPAREN,<MASK>,1,COMMA,""Jim"",COMMA,""321 Test Road"",COMMA,""Columbus"",COMMA,""OH"",COMMA,""43230"",COMMA,""6148881234"",RPAREN,SEMI,int,userId,EQ,uDAO,DOT,createUser,LPAREN,newUser,RPAREN,SEMI,User,testUser,EQ,uDAO,DOT,getUserByUserID,LPAREN,userId,RPAREN,SEMI,assertTrue,LPAREN,""NAME did not match"",COMMA,testUser,DOT,getName,LPAREN,RPAREN,DOT,equalsIgnoreCase,LPAREN,""Jim"",RPAREN,RPAREN,SEMI,assertTrue,LPAREN,""ADDRESS did not match"",COMMA,testUser,DOT,getAddress,LPAREN,RPAREN,DOT,equalsIgnoreCase,LPAREN,""321 Test Road"",RPAREN,RPAREN,SEMI,assertTrue,LPAREN,""CITY did not match"",COMMA,testUser,DOT,getCity,LPAREN,RPAREN,DOT,equalsIgnoreCase,LPAREN,""Columbus"",RPAREN,RPAREN,SEMI,assertTrue,LPAREN,""STATE did not match"",COMMA,testUser,DOT,getState,LPAREN,RPAREN,DOT,equalsIgnoreCase,LPAREN,""OH"",RPAREN,RPAREN,SEMI,assertTrue,LPAREN,""ZIP did not match"",COMMA,testUser,DOT,getZip,LPAREN,RPAREN,DOT,equalsIgnoreCase,LPAREN,""43230"",RPAREN,RPAREN,SEMI,assertTrue,LPAREN,""PHONE did not match"",COMMA,testUser,DOT,getPhone,LPAREN,RPAREN,DOT,equalsIgnoreCase,LPAREN,""6148881234"",RPAREN,RPAREN,SEMI,uDAO,DOT,removeUser,LPAREN,testUser,RPAREN,SEMI,RBRACE","    @Test
,    public void test_createUser() throws Exception {
,        User newUser = new User(<MASK>1, ""Jim"", ""321 Test Road"", ""Columbus"", ""OH"",
,                ""43230"", ""6148881234"");
,
,        int userId = uDAO.createUser(newUser);
,        User testUser = uDAO.getUserByUserID(userId);
,
,        assertTrue(""NAME did not match"",
,                testUser.getName().equalsIgnoreCase(""Jim""));
,        assertTrue(""ADDRESS did not match"", testUser.getAddress()
,                .equalsIgnoreCase(""321 Test Road""));
,        assertTrue(""CITY did not match"",
,                testUser.getCity().equalsIgnoreCase(""Columbus""));
,        assertTrue(""STATE did not match"",
,                testUser.getState().equalsIgnoreCase(""OH""));
,        assertTrue(""ZIP did not match"",
,                testUser.getZip().equalsIgnoreCase(""43230""));
,        assertTrue(""PHONE did not match"",
,                testUser.getPhone().equalsIgnoreCase(""6148881234""));
,
,        uDAO.removeUser(testUser);
,    }
"
b909a4a2-cc4e-4ca8-b5d4-c15dd437a773,5c652b83-0de2-4f8e-bd3b-e6948c8e4dfa,PERCENT,"PUBLIC,void,writeToFile,LPAREN,DataOutputStream,os,COMMA,DisplayProperties,dor,RPAREN,THROWS,IOException,LBRACE,IF,LPAREN,os,DOT,size,LPAREN,RPAREN,<MASK>,2,EQEQ,1,RPAREN,os,DOT,writeByte,LPAREN,00,RPAREN,SEMI,long,offset,EQ,8,STAR,Images,DOT,size,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,ImageOffsets,DOT,size,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,long,ImgOfs,EQ,ImageOffsets,DOT,get,LPAREN,i,RPAREN,PLUS,offset,SEMI,os,DOT,writeByte,LPAREN,LPAREN,byte,RPAREN,LPAREN,LPAREN,ImgOfs,GTGT,0,RPAREN,AMP,ff,RPAREN,RPAREN,SEMI,os,DOT,writeByte,LPAREN,LPAREN,byte,RPAREN,LPAREN,LPAREN,ImgOfs,GTGT,8,RPAREN,AMP,ff,RPAREN,RPAREN,SEMI,os,DOT,writeByte,LPAREN,LPAREN,byte,RPAREN,LPAREN,LPAREN,ImgOfs,GTGT,16,RPAREN,AMP,ff,RPAREN,RPAREN,SEMI,os,DOT,writeByte,LPAREN,LPAREN,byte,RPAREN,LPAREN,LPAREN,ImgOfs,GTGT,24,RPAREN,AMP,ff,RPAREN,RPAREN,SEMI,IF,LPAREN,LPAREN,dor,DOT,getOrientation,LPAREN,RPAREN,EQEQ,DisplayProperties,DOT,Orientations,DOT,horizontal,RPAREN,BARBAR,LPAREN,dor,DOT,getOrientation,LPAREN,RPAREN,EQEQ,DisplayProperties,DOT,Orientations,DOT,upside,RPAREN,RPAREN,LBRACE,os,DOT,writeByte,LPAREN,LPAREN,byte,RPAREN,LPAREN,LPAREN,ImageSizesX,DOT,get,LPAREN,i,RPAREN,GTGT,0,RPAREN,AMP,ff,RPAREN,RPAREN,SEMI,os,DOT,writeByte,LPAREN,LPAREN,byte,RPAREN,LPAREN,LPAREN,ImageSizesX,DOT,get,LPAREN,i,RPAREN,GTGT,8,RPAREN,AMP,ff,RPAREN,RPAREN,SEMI,os,DOT,writeByte,LPAREN,LPAREN,byte,RPAREN,LPAREN,LPAREN,ImageSizesY,DOT,get,LPAREN,i,RPAREN,GTGT,0,RPAREN,AMP,ff,RPAREN,RPAREN,SEMI,os,DOT,writeByte,LPAREN,LPAREN,byte,RPAREN,LPAREN,LPAREN,ImageSizesY,DOT,get,LPAREN,i,RPAREN,GTGT,8,RPAREN,AMP,ff,RPAREN,RPAREN,SEMI,RBRACE,ELSE,LBRACE,os,DOT,writeByte,LPAREN,LPAREN,byte,RPAREN,LPAREN,LPAREN,ImageSizesY,DOT,get,LPAREN,i,RPAREN,GTGT,0,RPAREN,AMP,ff,RPAREN,RPAREN,SEMI,os,DOT,writeByte,LPAREN,LPAREN,byte,RPAREN,LPAREN,LPAREN,ImageSizesY,DOT,get,LPAREN,i,RPAREN,GTGT,8,RPAREN,AMP,ff,RPAREN,RPAREN,SEMI,os,DOT,writeByte,LPAREN,LPAREN,byte,RPAREN,LPAREN,LPAREN,ImageSizesX,DOT,get,LPAREN,i,RPAREN,GTGT,0,RPAREN,AMP,ff,RPAREN,RPAREN,SEMI,os,DOT,writeByte,LPAREN,LPAREN,byte,RPAREN,LPAREN,LPAREN,ImageSizesX,DOT,get,LPAREN,i,RPAREN,GTGT,8,RPAREN,AMP,ff,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,Images,DOT,size,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,dor,DOT,getOrientation,LPAREN,RPAREN,EQEQ,DisplayProperties,DOT,Orientations,DOT,horizontal,RPAREN,LBRACE,FOR,LPAREN,int,y,EQ,0,SEMI,y,LT,Images,DOT,get,LPAREN,i,RPAREN,DOT,getHeight,LPAREN,RPAREN,SEMI,y,PLUSPLUS,RPAREN,LBRACE,FOR,LPAREN,int,x,EQ,0,SEMI,x,LT,Images,DOT,get,LPAREN,i,RPAREN,DOT,getWidth,LPAREN,RPAREN,SEMI,x,PLUSPLUS,RPAREN,LBRACE,writePointToFile,LPAREN,os,COMMA,Images,DOT,get,LPAREN,i,RPAREN,DOT,getRGB,LPAREN,x,COMMA,y,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,IF,LPAREN,dor,DOT,getOrientation,LPAREN,RPAREN,EQEQ,DisplayProperties,DOT,Orientations,DOT,upside,RPAREN,LBRACE,FOR,LPAREN,int,y,EQ,Images,DOT,get,LPAREN,i,RPAREN,DOT,getHeight,LPAREN,RPAREN,SUB,1,SEMI,y,GTEQ,0,SEMI,y,SUBSUB,RPAREN,LBRACE,FOR,LPAREN,int,x,EQ,Images,DOT,get,LPAREN,i,RPAREN,DOT,getWidth,LPAREN,RPAREN,SUB,1,SEMI,x,GTEQ,0,SEMI,x,SUBSUB,RPAREN,LBRACE,writePointToFile,LPAREN,os,COMMA,Images,DOT,get,LPAREN,i,RPAREN,DOT,getRGB,LPAREN,x,COMMA,y,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,IF,LPAREN,dor,DOT,getOrientation,LPAREN,RPAREN,EQEQ,DisplayProperties,DOT,Orientations,DOT,left,RPAREN,LBRACE,FOR,LPAREN,int,x,EQ,0,SEMI,x,LT,Images,DOT,get,LPAREN,i,RPAREN,DOT,getWidth,LPAREN,RPAREN,SEMI,x,PLUSPLUS,RPAREN,LBRACE,FOR,LPAREN,int,y,EQ,Images,DOT,get,LPAREN,i,RPAREN,DOT,getHeight,LPAREN,RPAREN,SUB,1,SEMI,y,GTEQ,0,SEMI,y,SUBSUB,RPAREN,LBRACE,writePointToFile,LPAREN,os,COMMA,Images,DOT,get,LPAREN,i,RPAREN,DOT,getRGB,LPAREN,x,COMMA,y,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,IF,LPAREN,dor,DOT,getOrientation,LPAREN,RPAREN,EQEQ,DisplayProperties,DOT,Orientations,DOT,right,RPAREN,LBRACE,FOR,LPAREN,int,x,EQ,Images,DOT,get,LPAREN,i,RPAREN,DOT,getWidth,LPAREN,RPAREN,SUB,1,SEMI,x,GTEQ,0,SEMI,x,SUBSUB,RPAREN,LBRACE,FOR,LPAREN,int,y,EQ,0,SEMI,y,LT,Images,DOT,get,LPAREN,i,RPAREN,DOT,getHeight,LPAREN,RPAREN,SEMI,y,PLUSPLUS,RPAREN,LBRACE,writePointToFile,LPAREN,os,COMMA,Images,DOT,get,LPAREN,i,RPAREN,DOT,getRGB,LPAREN,x,COMMA,y,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,RBRACE,RBRACE","	public void writeToFile (DataOutputStream os, DisplayProperties dor) throws IOException {
,
,		// we must start on even byte address
,		if (os.size() <MASK> 2 == 1)
,			os.writeByte (0x00);
,		// output table with picture offsets to file
,		long offset = 8*Images.size();
,		for (int i = 0; i < ImageOffsets.size(); i++) {
,			
,			long ImgOfs = ImageOffsets.get(i) + offset;
,//		System.out.printf (""Picture %d: %x -> %x\n"", i, ImageOffsets.get(i), ImgOfs);
,			os.writeByte ( (byte) ((ImgOfs >>  0) & 0xff));
,			os.writeByte ( (byte) ((ImgOfs >>  8) & 0xff));
,			os.writeByte ( (byte) ((ImgOfs >> 16) & 0xff));
,			os.writeByte ( (byte) ((ImgOfs >> 24) & 0xff));
,			
,			if ((dor.getOrientation() == DisplayProperties.Orientations.horizontal) || 
,				(dor.getOrientation() == DisplayProperties.Orientations.upside)) {
,				os.writeByte ( (byte) ((ImageSizesX.get(i) >> 0) & 0xff));
,				os.writeByte ( (byte) ((ImageSizesX.get(i) >> 8) & 0xff));
,				
,				os.writeByte ( (byte) ((ImageSizesY.get(i) >> 0) & 0xff));
,				os.writeByte ( (byte) ((ImageSizesY.get(i) >> 8) & 0xff));
,			}
,			else {
,				os.writeByte ( (byte) ((ImageSizesY.get(i) >> 0) & 0xff));
,				os.writeByte ( (byte) ((ImageSizesY.get(i) >> 8) & 0xff));
,				
,				os.writeByte ( (byte) ((ImageSizesX.get(i) >> 0) & 0xff));
,				os.writeByte ( (byte) ((ImageSizesX.get(i) >> 8) & 0xff));
,			}
,		}
,		// output images to stream
,		for (int i = 0; i < Images.size(); i++) {
,
,			// non rotated, horizontal pictures
,			if (dor.getOrientation() == DisplayProperties.Orientations.horizontal) { 
,				for (int y = 0; y <Images.get(i).getHeight(); y++) {
,					for (int x = 0; x < Images.get(i).getWidth(); x++) {
,						writePointToFile (os, Images.get(i).getRGB(x, y));
,					}
,				}
,			}
,			// 180� rotated, horizontal pictures
,			if (dor.getOrientation() == DisplayProperties.Orientations.upside) { 
,
,				for (int y = Images.get(i).getHeight()-1; y >= 0; y--) {
,					for (int x = Images.get(i).getWidth()-1; x >= 0; x--) {
,						writePointToFile (os, Images.get(i).getRGB(x, y));
,					}
,				}
,			}
,			// 90� right rotated, vertical pictures
,			if (dor.getOrientation() == DisplayProperties.Orientations.left) { 
,				for (int x = 0; x < Images.get(i).getWidth(); x++) {
,					for (int y = Images.get(i).getHeight()-1; y >= 0 ; y--) {
,						writePointToFile (os, Images.get(i).getRGB(x, y));
,					}
,				}
,			}
,			// 90� left rotated, vertical pictures
,			if (dor.getOrientation() == DisplayProperties.Orientations.right) { 
,				for (int x = Images.get(i).getWidth()-1; x >= 0; x--) {
,					for (int y = 0; y < Images.get(i).getHeight(); y++) {
,						writePointToFile (os, Images.get(i).getRGB(x, y));
,					}
,				}
,			}
,
,		}
,	}
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,9066add3-c843-4428-a52f-090feefd0441,BANGEQ,"PUBLIC,STATIC,String,encodeObject,LPAREN,java,DOT,io,DOT,Serializable,serializableObject,COMMA,int,options,RPAREN,THROWS,java,DOT,io,DOT,IOException,LBRACE,IF,LPAREN,serializableObject,EQEQ,null,RPAREN,LBRACE,THROW,NEW,NullPointerException,LPAREN,""Cannot serialize a null object."",RPAREN,SEMI,RBRACE,java,DOT,io,DOT,ByteArrayOutputStream,baos,EQ,null,SEMI,java,DOT,io,DOT,OutputStream,b64os,EQ,null,SEMI,java,DOT,util,DOT,zip,DOT,GZIPOutputStream,gzos,EQ,null,SEMI,java,DOT,io,DOT,ObjectOutputStream,oos,EQ,null,SEMI,TRY,LBRACE,baos,EQ,NEW,java,DOT,io,DOT,ByteArrayOutputStream,LPAREN,RPAREN,SEMI,b64os,EQ,NEW,Base64,DOT,OutputStream,LPAREN,baos,COMMA,ENCODE,BAR,options,RPAREN,SEMI,IF,LPAREN,LPAREN,options,AMP,GZIP,RPAREN,<MASK>,0,RPAREN,LBRACE,gzos,EQ,NEW,java,DOT,util,DOT,zip,DOT,GZIPOutputStream,LPAREN,b64os,RPAREN,SEMI,oos,EQ,NEW,java,DOT,io,DOT,ObjectOutputStream,LPAREN,gzos,RPAREN,SEMI,RBRACE,ELSE,LBRACE,oos,EQ,NEW,java,DOT,io,DOT,ObjectOutputStream,LPAREN,b64os,RPAREN,SEMI,RBRACE,oos,DOT,writeObject,LPAREN,serializableObject,RPAREN,SEMI,RBRACE,CATCH,LPAREN,java,DOT,io,DOT,IOException,e,RPAREN,LBRACE,THROW,e,SEMI,RBRACE,FINALLY,LBRACE,TRY,LBRACE,oos,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,Exception,e,RPAREN,LBRACE,RBRACE,TRY,LBRACE,gzos,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,Exception,e,RPAREN,LBRACE,RBRACE,TRY,LBRACE,b64os,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,Exception,e,RPAREN,LBRACE,RBRACE,TRY,LBRACE,baos,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,Exception,e,RPAREN,LBRACE,RBRACE,RBRACE,TRY,LBRACE,RETURN,NEW,String,LPAREN,baos,DOT,toByteArray,LPAREN,RPAREN,COMMA,PREFERRED_ENCODING,RPAREN,SEMI,RBRACE,CATCH,LPAREN,java,DOT,io,DOT,UnsupportedEncodingException,uue,RPAREN,LBRACE,RETURN,NEW,String,LPAREN,baos,DOT,toByteArray,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,RBRACE","  public static String encodeObject(java.io.Serializable serializableObject, int options)
,          throws java.io.IOException {
,
,    if (serializableObject == null) {
,      throw new NullPointerException(""Cannot serialize a null object."");
,    }   // end if: null
,
,    // Streams
,    java.io.ByteArrayOutputStream baos = null;
,    java.io.OutputStream b64os = null;
,    java.util.zip.GZIPOutputStream gzos = null;
,    java.io.ObjectOutputStream oos = null;
,
,
,    try {
,      // ObjectOutputStream -> (GZIP) -> Base64 -> ByteArrayOutputStream
,      baos = new java.io.ByteArrayOutputStream();
,      b64os = new Base64.OutputStream(baos, ENCODE | options);
,      if ((options & GZIP) <MASK> 0) {
,        // Gzip
,        gzos = new java.util.zip.GZIPOutputStream(b64os);
,        oos = new java.io.ObjectOutputStream(gzos);
,      } else {
,        // Not gzipped
,        oos = new java.io.ObjectOutputStream(b64os);
,      }
,      oos.writeObject(serializableObject);
,    } // end try
,    catch (java.io.IOException e) {
,      // Catch it and then throw it immediately so that
,      // the finally{} block is called for cleanup.
,      throw e;
,    } // end catch
,    finally {
,      try {
,        oos.close();
,      } catch (Exception e) {
,      }
,      try {
,        gzos.close();
,      } catch (Exception e) {
,      }
,      try {
,        b64os.close();
,      } catch (Exception e) {
,      }
,      try {
,        baos.close();
,      } catch (Exception e) {
,      }
,    }   // end finally
,
,    // Return value according to relevant encoding.
,    try {
,      return new String(baos.toByteArray(), PREFERRED_ENCODING);
,    } // end try
,    catch (java.io.UnsupportedEncodingException uue) {
,      // Fall back to some Java default
,      return new String(baos.toByteArray());
,    }   // end catch
,
,  }   // end encode
"
9c253d2b-e626-4f21-a850-dfb022369350,0efdcbe7-a7be-428a-bf00-6cc7008fc1a6,LTEQ,"PUBLIC,STATIC,void,cyclic,LPAREN,double,LBRACKET,RBRACKET,a,COMMA,double,LBRACKET,RBRACKET,b,COMMA,double,LBRACKET,RBRACKET,c,COMMA,double,alpha,COMMA,double,beta,COMMA,double,LBRACKET,RBRACKET,r,COMMA,double,LBRACKET,RBRACKET,x,RPAREN,THROWS,NRException,LBRACE,int,i,SEMI,double,fact,COMMA,gamma,SEMI,int,n,EQ,a,DOT,length,SEMI,IF,LPAREN,n,<MASK>,2,RPAREN,THROW,NEW,NRException,LPAREN,""n too small in cyclic"",RPAREN,SEMI,double,LBRACKET,RBRACKET,bb,EQ,NEW,double,LBRACKET,n,RBRACKET,SEMI,double,LBRACKET,RBRACKET,u,EQ,NEW,double,LBRACKET,n,RBRACKET,SEMI,double,LBRACKET,RBRACKET,z,EQ,NEW,double,LBRACKET,n,RBRACKET,SEMI,gamma,EQ,SUB,b,LBRACKET,0,RBRACKET,SEMI,bb,LBRACKET,0,RBRACKET,EQ,b,LBRACKET,0,RBRACKET,SUB,gamma,SEMI,bb,LBRACKET,n,SUB,1,RBRACKET,EQ,b,LBRACKET,n,SUB,1,RBRACKET,SUB,alpha,STAR,beta,SLASH,gamma,SEMI,FOR,LPAREN,i,EQ,1,SEMI,i,LT,n,SUB,1,SEMI,i,PLUSPLUS,RPAREN,bb,LBRACKET,i,RBRACKET,EQ,b,LBRACKET,i,RBRACKET,SEMI,tridag,LPAREN,a,COMMA,bb,COMMA,c,COMMA,r,COMMA,x,RPAREN,SEMI,u,LBRACKET,0,RBRACKET,EQ,gamma,SEMI,u,LBRACKET,n,SUB,1,RBRACKET,EQ,alpha,SEMI,FOR,LPAREN,i,EQ,1,SEMI,i,LT,n,SUB,1,SEMI,i,PLUSPLUS,RPAREN,u,LBRACKET,i,RBRACKET,EQ,0.0,SEMI,tridag,LPAREN,a,COMMA,bb,COMMA,c,COMMA,u,COMMA,z,RPAREN,SEMI,fact,EQ,LPAREN,x,LBRACKET,0,RBRACKET,PLUS,beta,STAR,x,LBRACKET,n,SUB,1,RBRACKET,SLASH,gamma,RPAREN,SLASH,LPAREN,1.0,PLUS,z,LBRACKET,0,RBRACKET,PLUS,beta,STAR,z,LBRACKET,n,SUB,1,RBRACKET,SLASH,gamma,RPAREN,SEMI,FOR,LPAREN,i,EQ,0,SEMI,i,LT,n,SEMI,i,PLUSPLUS,RPAREN,x,LBRACKET,i,RBRACKET,SUBEQ,fact,STAR,z,LBRACKET,i,RBRACKET,SEMI,RBRACE","public static void  cyclic(double []  a,  double [] b,  double [] c,  double  alpha,
,	double  beta,  double [] r,  double [] x) throws NRException
,{
,    int i;
,    double  fact,gamma;
,
,    int n = a.length;
,    if (n <MASK> 2) 
,        throw new NRException(""n too small in cyclic"");
,        
,    double [] bb = new double[n];
,    double [] u = new double[n];
,    double [] z = new double [n];
,	
,    gamma = -b[0];
,    bb[0]=b[0]-gamma;
,    bb[n-1]=b[n-1]-alpha*beta/gamma;
,    for (i=1; i<n-1; i++)  bb[i]=b[i];
,    tridag(a,bb,c,r,x);
,    u[0]=gamma;
,    u[n-1]=alpha;
,    for (i=1;i<n-1;i++) u[i]=0.0;
,    tridag(a,bb,c,u,z);
,    fact=(x[0]+beta*x[n-1]/gamma)/
,    (1.0+z[0]+beta*z[n-1]/gamma);
,    for (i=0;i<n;i++) x[i] -= fact*z[i];
,}
"
9b07119d-5d87-44cb-94ac-77a9d4fc6019,30aaf610-c866-4c86-9356-c0877b87bab9,GT,"PUBLIC,boolean,haSignat,LPAREN,String,abrev,RPAREN,LBRACE,boolean,result,EQ,true,SEMI,DatesControl,dc,EQ,NEW,DatesControl,LPAREN,client,RPAREN,SEMI,IF,LPAREN,dc,DOT,getIntDia,LPAREN,RPAREN,<MASK>,5,BARBAR,dc,DOT,esFestiu,LPAREN,RPAREN,RPAREN,LBRACE,RETURN,true,SEMI,RBRACE,IF,LPAREN,abrev,DOT,equalsIgnoreCase,LPAREN,""ADMIN"",RPAREN,BARBAR,abrev,DOT,equalsIgnoreCase,LPAREN,""PREF"",RPAREN,BARBAR,abrev,DOT,equalsIgnoreCase,LPAREN,""GUARD"",RPAREN,RPAREN,LBRACE,RETURN,true,SEMI,RBRACE,String,SQL1,EQ,""SELECT * FROM sig_signatures WHERE ABREV='"",PLUS,abrev,PLUS,""' AND "",PLUS,""DATA=CURRENT_DATE() AND ( H1<1 AND H2<1 AND H3<1 AND "",PLUS,"" H4<1 AND H5<1 AND H6<1 AND H7<1)"",SEMI,TRY,LBRACE,Statement,st,EQ,client,DOT,getMysql,LPAREN,RPAREN,DOT,createStatement,LPAREN,RPAREN,SEMI,ResultSet,rs1,EQ,client,DOT,getMysql,LPAREN,RPAREN,DOT,getResultSet,LPAREN,SQL1,COMMA,st,RPAREN,SEMI,IF,LPAREN,rs1,BANGEQ,null,AMPAMP,rs1,DOT,next,LPAREN,RPAREN,RPAREN,LBRACE,result,EQ,false,SEMI,RBRACE,IF,LPAREN,rs1,BANGEQ,null,RPAREN,LBRACE,rs1,DOT,close,LPAREN,RPAREN,SEMI,st,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,CATCH,LPAREN,SQLException,ex,RPAREN,LBRACE,Logger,DOT,getLogger,LPAREN,Presencia,DOT,CLASS,DOT,getName,LPAREN,RPAREN,RPAREN,DOT,log,LPAREN,Level,DOT,SEVERE,COMMA,null,COMMA,ex,RPAREN,SEMI,RBRACE,SQL1,EQ,""SELECT * FROM sig_signatures_tarda WHERE ABREV='"",PLUS,abrev,PLUS,""' AND "",PLUS,""DATA=CURRENT_DATE() AND ( H1<1 AND H2<1 AND H3<1 AND "",PLUS,"" H4<1 AND H5<1 AND H6<1 AND H7<1)"",SEMI,TRY,LBRACE,Statement,st,EQ,client,DOT,getMysql,LPAREN,RPAREN,DOT,createStatement,LPAREN,RPAREN,SEMI,ResultSet,rs1,EQ,client,DOT,getMysql,LPAREN,RPAREN,DOT,getResultSet,LPAREN,SQL1,COMMA,st,RPAREN,SEMI,IF,LPAREN,rs1,BANGEQ,null,AMPAMP,rs1,DOT,next,LPAREN,RPAREN,RPAREN,LBRACE,result,EQ,false,SEMI,RBRACE,IF,LPAREN,rs1,BANGEQ,null,RPAREN,LBRACE,rs1,DOT,close,LPAREN,RPAREN,SEMI,st,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,CATCH,LPAREN,SQLException,ex,RPAREN,LBRACE,Logger,DOT,getLogger,LPAREN,Presencia,DOT,CLASS,DOT,getName,LPAREN,RPAREN,RPAREN,DOT,log,LPAREN,Level,DOT,SEVERE,COMMA,null,COMMA,ex,RPAREN,SEMI,RBRACE,RETURN,result,SEMI,RBRACE","    public boolean haSignat(String abrev) {
,        boolean result = true;
,
,        //No s'ha de signar en festius o dissabtes i diumenges
,        DatesControl dc = new DatesControl(client);
,        if (dc.getIntDia() <MASK> 5 || dc.esFestiu()) {
,            return true;
,        }
,
,        if (abrev.equalsIgnoreCase(""ADMIN"") || abrev.equalsIgnoreCase(""PREF"")  || abrev.equalsIgnoreCase(""GUARD"")) {
,            return true;
,        }
,
,        //condicio que un usuari ha signat o no (taula del mati)
,        String SQL1 = ""SELECT * FROM sig_signatures WHERE ABREV='"" + abrev + ""' AND ""
,                + ""DATA=CURRENT_DATE() AND ( H1<1 AND H2<1 AND H3<1 AND ""
,                + "" H4<1 AND H5<1 AND H6<1 AND H7<1)"";
,
,
,        try {
,            Statement st = client.getMysql().createStatement();
,            ResultSet rs1 = client.getMysql().getResultSet(SQL1, st);
,            if (rs1 != null && rs1.next()) {
,                result = false;
,            }
,            if (rs1 != null) {
,                rs1.close();
,                st.close();
,            }
,        } catch (SQLException ex) {
,            Logger.getLogger(Presencia.class.getName()).log(Level.SEVERE, null, ex);
,        }
,
,
,        //condicio que un usuari ha signat o no (taula de la tarda)
,        SQL1 = ""SELECT * FROM sig_signatures_tarda WHERE ABREV='"" + abrev + ""' AND ""
,                + ""DATA=CURRENT_DATE() AND ( H1<1 AND H2<1 AND H3<1 AND ""
,                + "" H4<1 AND H5<1 AND H6<1 AND H7<1)"";
,
,        try {
,            Statement st = client.getMysql().createStatement();
,            ResultSet rs1 = client.getMysql().getResultSet(SQL1, st);
,            if (rs1 != null && rs1.next()) {
,                result = false;
,            }
,            if (rs1 != null) {
,                rs1.close();
,                st.close();
,            }
,        } catch (SQLException ex) {
,            Logger.getLogger(Presencia.class.getName()).log(Level.SEVERE, null, ex);
,        }
,
,        return result;
,
,    }
"
7bd76208-9b34-4151-9ec4-57c6c52e0fcf,38d33a98-3b18-4429-bac1-25e6b17b1717,STAR,"void,read_long_string,LPAREN,Token,token,COMMA,int,sep,RPAREN,LBRACE,save_and_next,LPAREN,RPAREN,SEMI,IF,LPAREN,currIsNewline,LPAREN,RPAREN,RPAREN,inclinenumber,LPAREN,RPAREN,SEMI,FOR,LPAREN,boolean,endloop,EQ,false,SEMI,BANG,endloop,SEMI,RPAREN,LBRACE,SWITCH,LPAREN,current,RPAREN,LBRACE,CASE,EOZ,COLON,lexerror,LPAREN,LPAREN,token,BANGEQ,null,RPAREN,QUES,""unfinished long string"",COLON,""unfinished long comment"",COMMA,TK_EOS,RPAREN,SEMI,BREAK,SEMI,CASE,[,COLON,LBRACE,IF,LPAREN,skip_sep,LPAREN,RPAREN,EQEQ,sep,RPAREN,LBRACE,save_and_next,LPAREN,RPAREN,SEMI,RBRACE,BREAK,SEMI,RBRACE,CASE,],COLON,LBRACE,IF,LPAREN,skip_sep,LPAREN,RPAREN,EQEQ,sep,RPAREN,LBRACE,save_and_next,LPAREN,RPAREN,SEMI,endloop,EQ,true,SEMI,RBRACE,BREAK,SEMI,RBRACE,CASE,
,COLON,CASE,
,COLON,LBRACE,save,LPAREN,
,RPAREN,SEMI,inclinenumber,LPAREN,RPAREN,SEMI,IF,LPAREN,token,EQEQ,null,RPAREN,nbuff,EQ,0,SEMI,BREAK,SEMI,RBRACE,DEFAULT,COLON,LBRACE,IF,LPAREN,token,BANGEQ,null,RPAREN,save_and_next,LPAREN,RPAREN,SEMI,ELSE,nextChar,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,IF,LPAREN,token,BANGEQ,null,RPAREN,token,DOT,ts,EQ,newstring,LPAREN,buff,COMMA,2,PLUS,sep,COMMA,nbuff,SUB,2,<MASK>,LPAREN,2,PLUS,sep,RPAREN,RPAREN,SEMI,RBRACE","	void read_long_string(Token token, int sep) {
,		save_and_next(); /<MASK> skip 2nd `[' */
,		if (currIsNewline()) /* string starts with a newline? */
,			inclinenumber(); /* skip it */
,		for (boolean endloop = false; !endloop;) {
,			switch (current) {
,			case EOZ:
,				lexerror((token != null) ? ""unfinished long string""
,						: ""unfinished long comment"", TK_EOS);
,				break; /* to avoid warnings */
,			case '[': {
,				if (skip_sep() == sep) {
,					save_and_next(); /* skip 2nd `[' */
,				}
,				break;
,			}
,			case ']': {
,				if (skip_sep() == sep) {
,					save_and_next(); /* skip 2nd `]' */
,					endloop = true;
,				}
,				break;
,			}
,			case '\n':
,			case '\r': {
,				save('\n');
,				inclinenumber();
,				if (token == null)
,					nbuff = 0; /* avoid wasting space */
,				break;
,			}
,			default: {
,				if (token != null)
,					save_and_next();
,				else
,					nextChar();
,			}
,			}
,		}
,		if (token != null)
,			token.ts = newstring(buff, 2 + sep, nbuff - 2 * (2 + sep));
,	}
"
b1d29837-1f95-40a2-98dc-d3762b71a15d,8be31bbb-8157-4dc4-b8ba-f8b67212fa44,GT,"MONKEYS_AT,Override,PUBLIC,void,onInstall,LPAREN,RPAREN,LBRACE,FINAL,ModModel,LBRACKET,RBRACKET,l,EQ,modTable,DOT,getModel,LPAREN,RPAREN,DOT,getSelectedMods,LPAREN,RPAREN,SEMI,IF,LPAREN,l,DOT,length,<MASK>,0,RPAREN,LBRACE,Installer,DOT,open,LPAREN,l,RPAREN,SEMI,synchronizeMods,LPAREN,l,RPAREN,SEMI,RBRACE,RBRACE","	@Override
,	public void onInstall() {
,		final ModModel[] l = modTable.getModel().getSelectedMods();
,		if (l.length <MASK> 0) {
,			Installer.open(l);
,			synchronizeMods(l);
,		}
,	}
"
9971c369-1cd4-431b-bab2-7edb0b3b68d5,70f8153d-283b-4432-9a3c-cbad1fd25335,PLUS,"MONKEYS_AT,Override,DEFAULT,PUBLIC,Payroll,join,LPAREN,Payroll,x,COMMA,Payroll,y,RPAREN,LBRACE,RETURN,LPAREN,RPAREN,ARROW,x,DOT,payroll,LPAREN,RPAREN,<MASK>,y,DOT,payroll,LPAREN,RPAREN,SEMI,RBRACE","	@Override
,	default public Payroll join(Payroll x, Payroll y) {
,		return () -> x.payroll()<MASK>y.payroll();
,	}
"
1b82c97a-fe19-4584-bdbc-4f13bb123c10,1fe2d3c1-7042-4063-9975-651b53baa873,GTEQ,"MONKEYS_AT,Override,PUBLIC,void,$_,LPAREN,int,n,COMMA,T,v,RPAREN,THROWS,NRException,LBRACE,IF,LPAREN,off,PLUS,n,<MASK>,arr,DOT,length,BARBAR,off,PLUS,n,LT,0,RPAREN,THROW,NEW,NRException,LPAREN,""out of range offset used for offset $double"",RPAREN,SEMI,arr,LBRACKET,off,PLUS,n,RBRACKET,EQ,v,SEMI,RBRACE","        @Override
,        public void $_(int n, T v) throws NRException {
,            if (off + n <MASK> arr.length || off + n < 0)
,                throw new NRException(""out of range offset used for offset $double"");
,            arr[off+n] = v;
,        }
"
2576a407-9fd6-4f86-aee0-46707642b564,4d472d21-c50f-47ae-b0de-f491d5c01dba,GT,"PROTECTED,void,gerarXml,LPAREN,RPAREN,LBRACE,int,index,EQ,gCrlv,DOT,getTableGerenciarCrlvs,LPAREN,RPAREN,DOT,getSelectionModel,LPAREN,RPAREN,DOT,getLeadSelectionIndex,LPAREN,RPAREN,SEMI,IF,LPAREN,index,<MASK>,SUB,1,RPAREN,LBRACE,XStream,xstream,EQ,NEW,XStream,LPAREN,RPAREN,SEMI,ModelCRLV,c,EQ,gCrlv,DOT,getCrlv,LPAREN,RPAREN,DOT,get,LPAREN,index,RPAREN,SEMI,String,xml,EQ,xstream,DOT,toXML,LPAREN,c,RPAREN,SEMI,ViewXMLViewer,jifXmlViewer,EQ,NEW,ViewXMLViewer,LPAREN,RPAREN,SEMI,ControllerXMLViewer,conXml,EQ,NEW,ControllerXMLViewer,LPAREN,jifXmlViewer,COMMA,xml,COMMA,c,DOT,getCodRenavam,LPAREN,RPAREN,RPAREN,SEMI,jifXmlViewer,DOT,getTxtAreaXmlViewer,LPAREN,RPAREN,DOT,setText,LPAREN,xml,RPAREN,SEMI,mw,DOT,getDesktop,LPAREN,RPAREN,DOT,add,LPAREN,jifXmlViewer,RPAREN,SEMI,jifXmlViewer,DOT,setVisible,LPAREN,true,RPAREN,SEMI,RBRACE,ELSE,JOptionPane,DOT,showMessageDialog,LPAREN,mw,COMMA,""Selecione um documento para gerar o XML!"",RPAREN,SEMI,RBRACE","    protected void gerarXml(){
,        int index = gCrlv.getTableGerenciarCrlvs().getSelectionModel().getLeadSelectionIndex();
,        if(index <MASK> -1){
,            XStream xstream = new XStream();
,            ModelCRLV c = gCrlv.getCrlv().get(index);
,            String xml = xstream.toXML(c);
,            
,            ViewXMLViewer jifXmlViewer = new ViewXMLViewer();
,            ControllerXMLViewer conXml = new ControllerXMLViewer(jifXmlViewer, xml, c.getCodRenavam());
,            jifXmlViewer.getTxtAreaXmlViewer().setText(xml);
,            mw.getDesktop().add(jifXmlViewer);
,            jifXmlViewer.setVisible(true);
,        }
,        else
,            JOptionPane.showMessageDialog(mw, ""Selecione um documento para gerar o XML!"");
,    }
"
aed9046f-504a-49f9-b9ef-f36cca22ba93,74463c6f-1d34-4aa2-a673-03f641530a00,SLASH,"PUBLIC,STATIC,void,obliczPodatek,LPAREN,double,podstawa,RPAREN,LBRACE,zaliczkaNaPod,EQ,LPAREN,podstawa,STAR,18,RPAREN,<MASK>,100,SEMI,RBRACE","	public static void obliczPodatek(double podstawa) {
,		zaliczkaNaPod = (podstawa * 18) <MASK> 100;
,	}
"
46553d6c-dc87-4edc-9d46-5b7555c514e8,be2c2ac8-8035-468e-a7b5-086e80c71cc6,PERCENT,"PUBLIC,STATIC,String,toBase64,LPAREN,FINAL,byte,LBRACKET,RBRACKET,data,RPAREN,LBRACE,FINAL,int,i,EQ,data,DOT,length,SLASH,3,SEMI,FINAL,int,j,EQ,data,DOT,length,<MASK>,3,SEMI,FINAL,byte,barray,LBRACKET,RBRACKET,EQ,NEW,byte,LBRACKET,LPAREN,LPAREN,j,EQEQ,0,RPAREN,QUES,i,COLON,i,PLUS,1,RPAREN,STAR,4,RBRACKET,SEMI,int,k,EQ,0,SEMI,int,l,EQ,0,SEMI,FOR,LPAREN,int,i1,EQ,0,SEMI,i1,LT,i,SEMI,i1,PLUSPLUS,RPAREN,LBRACE,barray,LBRACKET,k,PLUSPLUS,RBRACKET,EQ,ByteUtil,DOT,toBase64,LPAREN,LPAREN,byte,RPAREN,LPAREN,data,LBRACKET,l,RBRACKET,GTGT,2,AMP,3f,RPAREN,RPAREN,SEMI,barray,LBRACKET,k,PLUSPLUS,RBRACKET,EQ,ByteUtil,DOT,toBase64,LPAREN,LPAREN,byte,RPAREN,LPAREN,LPAREN,data,LBRACKET,l,RBRACKET,AMP,3,RPAREN,LTLT,4,BAR,LPAREN,data,LBRACKET,l,PLUS,1,RBRACKET,AMP,f0,RPAREN,GTGT,4,AMP,f,RPAREN,RPAREN,SEMI,barray,LBRACKET,k,PLUSPLUS,RBRACKET,EQ,ByteUtil,DOT,toBase64,LPAREN,LPAREN,byte,RPAREN,LPAREN,LPAREN,data,LBRACKET,l,PLUS,1,RBRACKET,AMP,f,RPAREN,LTLT,2,BAR,LPAREN,data,LBRACKET,l,PLUS,2,RBRACKET,AMP,c0,RPAREN,GTGT,6,AMP,3,RPAREN,RPAREN,SEMI,barray,LBRACKET,k,PLUSPLUS,RBRACKET,EQ,ByteUtil,DOT,toBase64,LPAREN,LPAREN,byte,RPAREN,LPAREN,data,LBRACKET,l,PLUS,2,RBRACKET,AMP,3f,RPAREN,RPAREN,SEMI,l,PLUSEQ,3,SEMI,RBRACE,IF,LPAREN,j,EQEQ,1,RPAREN,LBRACE,barray,LBRACKET,k,PLUSPLUS,RBRACKET,EQ,ByteUtil,DOT,toBase64,LPAREN,LPAREN,byte,RPAREN,LPAREN,data,LBRACKET,l,RBRACKET,GTGT,2,AMP,3f,RPAREN,RPAREN,SEMI,barray,LBRACKET,k,PLUSPLUS,RBRACKET,EQ,ByteUtil,DOT,toBase64,LPAREN,LPAREN,byte,RPAREN,LPAREN,LPAREN,data,LBRACKET,l,RBRACKET,AMP,3,RPAREN,LTLT,4,RPAREN,RPAREN,SEMI,barray,LBRACKET,k,PLUSPLUS,RBRACKET,EQ,61,SEMI,barray,LBRACKET,k,PLUSPLUS,RBRACKET,EQ,61,SEMI,RBRACE,ELSE,LBRACE,IF,LPAREN,j,EQEQ,2,RPAREN,LBRACE,barray,LBRACKET,k,PLUSPLUS,RBRACKET,EQ,ByteUtil,DOT,toBase64,LPAREN,LPAREN,byte,RPAREN,LPAREN,data,LBRACKET,l,RBRACKET,GTGT,2,AMP,3f,RPAREN,RPAREN,SEMI,barray,LBRACKET,k,PLUSPLUS,RBRACKET,EQ,ByteUtil,DOT,toBase64,LPAREN,LPAREN,byte,RPAREN,LPAREN,LPAREN,data,LBRACKET,l,RBRACKET,AMP,3,RPAREN,LTLT,4,BAR,LPAREN,data,LBRACKET,l,PLUS,1,RBRACKET,AMP,f0,RPAREN,GTGT,4,AMP,f,RPAREN,RPAREN,SEMI,barray,LBRACKET,k,PLUSPLUS,RBRACKET,EQ,ByteUtil,DOT,toBase64,LPAREN,LPAREN,byte,RPAREN,LPAREN,LPAREN,data,LBRACKET,l,PLUS,1,RBRACKET,AMP,f,RPAREN,LTLT,2,RPAREN,RPAREN,SEMI,barray,LBRACKET,k,PLUSPLUS,RBRACKET,EQ,61,SEMI,RBRACE,RBRACE,RETURN,NEW,String,LPAREN,barray,RPAREN,SEMI,RBRACE","  public static String toBase64( final byte[] data ) {
,    final int i = data.length / 3;
,    final int j = data.length <MASK> 3;
,    final byte barray[] = new byte[( ( j == 0 ) ? i : i + 1 ) * 4];
,    int k = 0;
,    int l = 0;
,
,    for ( int i1 = 0; i1 < i; i1++ ) {
,      barray[k++] = ByteUtil.toBase64( (byte)( data[l] >> 2 & 0x3f ) );
,      barray[k++] = ByteUtil.toBase64( (byte)( ( data[l] & 3 ) << 4 | ( data[l + 1] & 0xf0 ) >> 4 & 0xf ) );
,      barray[k++] = ByteUtil.toBase64( (byte)( ( data[l + 1] & 0xf ) << 2 | ( data[l + 2] & 0xc0 ) >> 6 & 3 ) );
,      barray[k++] = ByteUtil.toBase64( (byte)( data[l + 2] & 0x3f ) );
,      l += 3;
,    }
,
,    if ( j == 1 ) {
,      barray[k++] = ByteUtil.toBase64( (byte)( data[l] >> 2 & 0x3f ) );
,      barray[k++] = ByteUtil.toBase64( (byte)( ( data[l] & 3 ) << 4 ) );
,      barray[k++] = 61;
,      barray[k++] = 61;
,    } else {
,      if ( j == 2 ) {
,        barray[k++] = ByteUtil.toBase64( (byte)( data[l] >> 2 & 0x3f ) );
,        barray[k++] = ByteUtil.toBase64( (byte)( ( data[l] & 3 ) << 4 | ( data[l + 1] & 0xf0 ) >> 4 & 0xf ) );
,        barray[k++] = ByteUtil.toBase64( (byte)( ( data[l + 1] & 0xf ) << 2 ) );
,        barray[k++] = 61;
,      }
,    }
,
,    return new String( barray );
,  }
"
38ed5e2e-bfac-4cc9-94e0-5ee38dabb0ca,98096b7f-1d49-4342-9c15-273090489335,EQEQ,"STATIC,LT,Val,GT,FSet,LT,Object,GT,range,LPAREN,Object,subtree,COMMA,FSet,LT,Val,GT,initial,RPAREN,LBRACE,IF,LPAREN,subtree,<MASK>,null,RPAREN,RETURN,LPAREN,FSet,LT,Object,GT,RPAREN,initial,SEMI,ELSE,IF,LPAREN,BANG,LPAREN,subtree,INSTANCEOF,Node,RPAREN,RPAREN,LBRACE,Object,LBRACKET,RBRACKET,ary,EQ,LPAREN,Object,LBRACKET,RBRACKET,RPAREN,subtree,SEMI,int,nkeys,EQ,ary,DOT,length,GTGT,1,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,nkeys,SEMI,PLUSPLUS,i,RPAREN,initial,EQ,initial,DOT,with,LPAREN,LPAREN,Val,RPAREN,ary,LBRACKET,nkeys,PLUS,i,RBRACKET,RPAREN,SEMI,RETURN,LPAREN,FSet,LT,Object,GT,RPAREN,initial,SEMI,RBRACE,ELSE,LBRACE,Node,node,EQ,LPAREN,Node,RPAREN,subtree,SEMI,IF,LPAREN,node,DOT,key,INSTANCEOF,EquivalentMap,RPAREN,LBRACE,ArrayList,LT,Entry,GT,al,EQ,LPAREN,LPAREN,EquivalentMap,RPAREN,node,DOT,key,RPAREN,DOT,contents,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,al,DOT,size,LPAREN,RPAREN,SEMI,PLUSPLUS,i,RPAREN,initial,EQ,initial,DOT,with,LPAREN,LPAREN,Val,RPAREN,al,DOT,get,LPAREN,i,RPAREN,DOT,value,RPAREN,SEMI,RETURN,LPAREN,FSet,LT,Object,GT,RPAREN,initial,SEMI,RBRACE,ELSE,RETURN,LPAREN,range,LPAREN,node,DOT,left,COMMA,initial,RPAREN,DOT,with,LPAREN,node,DOT,value,RPAREN,DOT,union,LPAREN,range,LPAREN,node,DOT,right,COMMA,initial,RPAREN,RPAREN,RPAREN,SEMI,RBRACE,RBRACE","    /*pkg*/ static <Val> FSet<Object> range(Object subtree, FSet<Val> initial) {
,	if (subtree <MASK> null) return (FSet<Object>)initial;
,	else if (!(subtree instanceof Node)) {
,	    Object[] ary = (Object[])subtree;
,	    int nkeys = ary.length >> 1;
,	    for (int i = 0; i < nkeys; ++i)
,		initial = initial.with((Val)ary[nkeys + i]);
,	    return (FSet<Object>)initial;
,	} else {
,	    Node node = (Node)subtree;
,	    if (node.key instanceof EquivalentMap) {
,		ArrayList<Entry> al = ((EquivalentMap)node.key).contents;
,		for (int i = 0; i < al.size(); ++i)
,		    initial = initial.with((Val)al.get(i).value);
,		return (FSet<Object>)initial;
,	    } else return (range(node.left, initial).with(node.value)
,			   .union(range(node.right, initial)));
,	}
,    }
"
ceb2d628-7548-4a8f-9594-53a373297866,e011f3c7-f255-453c-b778-da0e7c959388,LT,"PUBLIC,String,toString,LPAREN,RPAREN,LBRACE,String,str,EQ,""Segment\tPos\tVel\tAcc\tJerk\tHeading\n"",SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,getNumSegments,LPAREN,RPAREN,SEMI,PLUSPLUS,i,RPAREN,LBRACE,Trajectory,DOT,Segment,segment,EQ,getSegment,LPAREN,i,RPAREN,SEMI,str,PLUSEQ,i,PLUS,""\t"",SEMI,str,PLUSEQ,segment,DOT,pos,PLUS,""\t"",SEMI,str,PLUSEQ,segment,DOT,vel,PLUS,""\t"",SEMI,str,PLUSEQ,segment,DOT,acc,PLUS,""\t"",SEMI,str,PLUSEQ,segment,DOT,jerk,PLUS,""\t"",SEMI,str,PLUSEQ,segment,DOT,heading,PLUS,""\t"",SEMI,str,PLUSEQ,""\n"",SEMI,RBRACE,RETURN,str,SEMI,RBRACE","  public String toString() {
,    String str = ""Segment\tPos\tVel\tAcc\tJerk\tHeading\n"";
,    for (int i = 0; i <MASK> getNumSegments(); ++i) {
,      Trajectory.Segment segment = getSegment(i);
,      str += i + ""\t"";
,      str += segment.pos + ""\t"";
,      str += segment.vel + ""\t"";
,      str += segment.acc + ""\t"";
,      str += segment.jerk + ""\t"";
,      str += segment.heading + ""\t"";
,      str += ""\n"";
,    }
,
,    return str;
,  }
"
68422d14-68e8-42b7-9437-f6891889f4fc,83dc11b7-bad5-48ee-9001-1cba9b23ddb9,PERCENT,"PUBLIC,TimeDuration,add,LPAREN,TimeDuration,t,RPAREN,LBRACE,TimeDuration,newTime,EQ,NEW,TimeDuration,LPAREN,this,RPAREN,SEMI,newTime,DOT,setMinutes,LPAREN,newTime,DOT,getMinutes,LPAREN,RPAREN,PLUS,t,DOT,getMinutes,LPAREN,RPAREN,RPAREN,SEMI,newTime,DOT,hour,PLUSEQ,t,DOT,hour,PLUS,newTime,DOT,minutes,SLASH,60,SEMI,newTime,DOT,minutes,EQ,newTime,DOT,minutes,<MASK>,60,SEMI,RETURN,newTime,SEMI,RBRACE","	public TimeDuration add(TimeDuration t) {
,		TimeDuration newTime = new TimeDuration(this);
,		newTime.setMinutes (newTime.getMinutes()+t.getMinutes());
,		newTime.hour += t.hour + newTime.minutes / 60;
,		newTime.minutes = newTime.minutes <MASK> 60;
,		return newTime;
,	}
"
8ec044ff-9e5c-46c4-ad39-ccc8ad42dd87,cd2982b5-4907-41c2-8815-496e361d4b84,GT,"PUBLIC,transactionViewer,LPAREN,FINAL,inventory,inv,RPAREN,LBRACE,FINAL,transactionReport,transRep,EQ,loaders,DOT,loadTransactionReport,LPAREN,RPAREN,SEMI,setTitle,LPAREN,""Transaction Viewer"",RPAREN,SEMI,setResizable,LPAREN,false,RPAREN,SEMI,setAlwaysOnTop,LPAREN,true,RPAREN,SEMI,setDefaultCloseOperation,LPAREN,JFrame,DOT,DISPOSE_ON_CLOSE,RPAREN,SEMI,setBounds,LPAREN,100,COMMA,100,COMMA,535,COMMA,352,RPAREN,SEMI,contentPane,EQ,NEW,JPanel,LPAREN,RPAREN,SEMI,contentPane,DOT,setBorder,LPAREN,NEW,EmptyBorder,LPAREN,5,COMMA,5,COMMA,5,COMMA,5,RPAREN,RPAREN,SEMI,setContentPane,LPAREN,contentPane,RPAREN,SEMI,contentPane,DOT,setLayout,LPAREN,null,RPAREN,SEMI,JLabel,lblTransactionCode,EQ,NEW,JLabel,LPAREN,""Transaction Code:"",RPAREN,SEMI,lblTransactionCode,DOT,setBounds,LPAREN,10,COMMA,11,COMMA,95,COMMA,14,RPAREN,SEMI,contentPane,DOT,add,LPAREN,lblTransactionCode,RPAREN,SEMI,FINAL,JTextPane,textPane,EQ,NEW,JTextPane,LPAREN,RPAREN,SEMI,textPane,DOT,setBounds,LPAREN,20,COMMA,36,COMMA,499,COMMA,244,RPAREN,SEMI,contentPane,DOT,add,LPAREN,textPane,RPAREN,SEMI,FINAL,JLabel,lblRm,EQ,NEW,JLabel,LPAREN,""RM0.00"",RPAREN,SEMI,lblRm,DOT,setFont,LPAREN,NEW,Font,LPAREN,""Tahoma"",COMMA,Font,DOT,PLAIN,COMMA,18,RPAREN,RPAREN,SEMI,lblRm,DOT,setBounds,LPAREN,10,COMMA,291,COMMA,130,COMMA,22,RPAREN,SEMI,contentPane,DOT,add,LPAREN,lblRm,RPAREN,SEMI,codeField,EQ,NEW,JTextField,LPAREN,RPAREN,SEMI,codeField,DOT,addActionListener,LPAREN,NEW,ActionListener,LPAREN,RPAREN,LBRACE,PUBLIC,void,actionPerformed,LPAREN,ActionEvent,e,RPAREN,LBRACE,long,millis,EQ,Long,DOT,parseLong,LPAREN,codeField,DOT,getText,LPAREN,RPAREN,RPAREN,SEMI,Date,date,EQ,NEW,Date,LPAREN,millis,RPAREN,SEMI,DateFormat,dateFormat,EQ,NEW,SimpleDateFormat,LPAREN,""yyyyMMdd"",RPAREN,SEMI,String,transDate,EQ,dateFormat,DOT,format,LPAREN,date,RPAREN,SEMI,int,itemIndex,EQ,transRep,DOT,dates,DOT,indexOf,LPAREN,transDate,RPAREN,SEMI,IF,LPAREN,itemIndex,<MASK>,SUB,1,RPAREN,LBRACE,transactionList,transList,EQ,transRep,DOT,getTransList,LPAREN,transDate,RPAREN,SEMI,transaction,trans,EQ,transList,DOT,getTrans,LPAREN,millis,RPAREN,SEMI,textPane,DOT,setText,LPAREN,trans,DOT,generateTransactionText,LPAREN,inv,RPAREN,RPAREN,SEMI,lblRm,DOT,setText,LPAREN,""RM"",PLUS,trans,DOT,totalPrice,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,RPAREN,SEMI,codeField,DOT,setBounds,LPAREN,115,COMMA,8,COMMA,186,COMMA,20,RPAREN,SEMI,contentPane,DOT,add,LPAREN,codeField,RPAREN,SEMI,codeField,DOT,setColumns,LPAREN,10,RPAREN,SEMI,RBRACE","	public transactionViewer(final inventory inv) {
,		final transactionReport transRep = loaders.loadTransactionReport();
,		
,		setTitle(""Transaction Viewer"");
,		setResizable(false);
,		setAlwaysOnTop(true);
,		setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
,		setBounds(100, 100, 535, 352);
,		contentPane = new JPanel();
,		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
,		setContentPane(contentPane);
,		contentPane.setLayout(null);
,		
,		JLabel lblTransactionCode = new JLabel(""Transaction Code:"");
,		lblTransactionCode.setBounds(10, 11, 95, 14);
,		contentPane.add(lblTransactionCode);
,		
,		final JTextPane textPane = new JTextPane();
,		textPane.setBounds(20, 36, 499, 244);
,		contentPane.add(textPane);
,		
,		final JLabel lblRm = new JLabel(""RM0.00"");
,		lblRm.setFont(new Font(""Tahoma"", Font.PLAIN, 18));
,		lblRm.setBounds(10, 291, 130, 22);
,		contentPane.add(lblRm);
,		
,		codeField = new JTextField();
,		codeField.addActionListener(new ActionListener() {
,			public void actionPerformed(ActionEvent e) {
,				long millis = Long.parseLong(codeField.getText());
,				Date date = new Date(millis);
,				DateFormat dateFormat = new SimpleDateFormat(""yyyyMMdd"");
,				String transDate = dateFormat.format(date);
,				
,				int itemIndex = transRep.dates.indexOf(transDate);
,				if(itemIndex<MASK>-1)
,				{
,					transactionList transList = transRep.getTransList(transDate);
,					transaction trans = transList.getTrans(millis);
,					
,					textPane.setText(trans.generateTransactionText(inv));
,					lblRm.setText(""RM""+trans.totalPrice);
,				}
,			}
,		});
,		codeField.setBounds(115, 8, 186, 20);
,		contentPane.add(codeField);
,		codeField.setColumns(10);
,		
,		
,	}
"
38ed5e2e-bfac-4cc9-94e0-5ee38dabb0ca,06d60abd-b060-49cb-a884-93573e5b4b5a,EQEQ,"PUBLIC,FHashMap,LT,Key,COMMA,Val,GT,with,LPAREN,Key,key,COMMA,Val,value,RPAREN,LBRACE,Object,t,EQ,with,LPAREN,tree,COMMA,key,COMMA,hashCode,LPAREN,key,RPAREN,COMMA,value,RPAREN,SEMI,IF,LPAREN,t,<MASK>,tree,RPAREN,RETURN,this,SEMI,ELSE,RETURN,NEW,FHashMap,LT,Key,COMMA,Val,GT,LPAREN,t,COMMA,dflt,RPAREN,SEMI,RBRACE","    public FHashMap<Key, Val> with(Key key, Val value) {
,	Object t = with(tree, key, hashCode(key), value);
,	if (t <MASK> tree) return this;
,	else return new FHashMap<Key, Val>(t, dflt);
,    }
"
217a1929-2059-479f-af6e-fb7f6b29e94a,0c9ec356-43bd-4b78-9ca5-ffc7735d2806,PERCENT,"PUBLIC,SimplexNoise_octave,LPAREN,int,seed,RPAREN,LBRACE,p,EQ,p_supply,DOT,clone,LPAREN,RPAREN,SEMI,IF,LPAREN,seed,EQEQ,RANDOMSEED,RPAREN,LBRACE,Random,rand,EQ,NEW,Random,LPAREN,RPAREN,SEMI,seed,EQ,rand,DOT,nextInt,LPAREN,RPAREN,SEMI,RBRACE,Random,rand,EQ,NEW,Random,LPAREN,seed,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,NUMBEROFSWAPS,SEMI,i,PLUSPLUS,RPAREN,LBRACE,int,swapFrom,EQ,rand,DOT,nextInt,LPAREN,p,DOT,length,RPAREN,SEMI,int,swapTo,EQ,rand,DOT,nextInt,LPAREN,p,DOT,length,RPAREN,SEMI,short,temp,EQ,p,LBRACKET,swapFrom,RBRACKET,SEMI,p,LBRACKET,swapFrom,RBRACKET,EQ,p,LBRACKET,swapTo,RBRACKET,SEMI,p,LBRACKET,swapTo,RBRACKET,EQ,temp,SEMI,RBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,512,SEMI,i,PLUSPLUS,RPAREN,LBRACE,perm,LBRACKET,i,RBRACKET,EQ,p,LBRACKET,i,AMP,255,RBRACKET,SEMI,permMod12,LBRACKET,i,RBRACKET,EQ,LPAREN,short,RPAREN,LPAREN,perm,LBRACKET,i,RBRACKET,<MASK>,12,RPAREN,SEMI,RBRACE,RBRACE","  public SimplexNoise_octave(int seed) {
,    p=p_supply.clone();
,
,    if (seed==RANDOMSEED){
,        Random rand=new Random();
,        seed=rand.nextInt();
,    }
,
,    //the random for the swaps
,    Random rand=new Random(seed);
,
,    //the seed determines the swaps that occur between the default order and the order we're actually going to use
,    for(int i=0;i<NUMBEROFSWAPS;i++){
,        int swapFrom=rand.nextInt(p.length);
,        int swapTo=rand.nextInt(p.length);
,
,        short temp=p[swapFrom];
,        p[swapFrom]=p[swapTo];
,        p[swapTo]=temp;
,    }
,
,
,    for(int i=0; i<512; i++)
,    {
,      perm[i]=p[i & 255];
,      permMod12[i] = (short)(perm[i] <MASK> 12);
,    }
,  }
"
5735492c-ae75-4373-9d1e-6986d063d859,4de523a7-be41-4fb4-8d9f-6065d98aa3b9,LT,"PUBLIC,void,runReferParam,LPAREN,ReferParamObject,obj,RPAREN,LBRACE,TRY,LBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,20,SEMI,i,PLUSPLUS,RPAREN,LBRACE,obj,DOT,setId,LPAREN,obj,DOT,getId,LPAREN,RPAREN,PLUS,1,RPAREN,SEMI,IF,LPAREN,i,EQEQ,10,RPAREN,LBRACE,Thread,DOT,sleep,LPAREN,5000,RPAREN,SEMI,RBRACE,System,DOT,err,DOT,println,LPAREN,""["",PLUS,Thread,DOT,currentThread,LPAREN,RPAREN,DOT,getId,LPAREN,RPAREN,PLUS,""]\u5F53i="",PLUS,i,PLUS,""\u83B7\u53D6id \u7684\u503C:"",PLUS,obj,DOT,getId,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,CATCH,LPAREN,InterruptedException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,RBRACE","	public void runReferParam(ReferParamObject obj) {
,		try {
,			for (int i = 0; i <MASK> 20; i++) {
,				// 多线程会累加这个值
,				obj.setId(obj.getId() + 1);
,				if (i == 10) {
,					Thread.sleep(5000);
,				}
,				System.err.println(""["" + Thread.currentThread().getId() + ""]当i="" + i + ""获取id 的值:"" + obj.getId());
,			}
,		} catch (InterruptedException e) {
,			e.printStackTrace();
,		}
,	}
"
b61d6017-337e-4ccd-b964-a6b5e3d0cb20,cc1c9be9-dc0f-4596-abe1-ea786eea8a01,EQEQ,"PUBLIC,void,move_unit,LPAREN,Unit,unit,COMMA,Position,currentPosition,COMMA,Position,newPosition,RPAREN,LBRACE,_cells,LBRACKET,currentPosition,DOT,get_x,LPAREN,RPAREN,RBRACKET,LBRACKET,currentPosition,DOT,get_y,LPAREN,RPAREN,RBRACKET,DOT,set_unit,LPAREN,null,RPAREN,SEMI,IF,LPAREN,_cells,LBRACKET,newPosition,DOT,get_x,LPAREN,RPAREN,RBRACKET,LBRACKET,newPosition,DOT,get_y,LPAREN,RPAREN,RBRACKET,DOT,get_unit,LPAREN,RPAREN,<MASK>,null,RPAREN,LBRACE,_cells,LBRACKET,newPosition,DOT,get_x,LPAREN,RPAREN,RBRACKET,LBRACKET,newPosition,DOT,get_y,LPAREN,RPAREN,RBRACKET,DOT,set_unit,LPAREN,unit,RPAREN,SEMI,RBRACE,ELSE,LBRACE,THROW,NEW,IllegalArgumentException,LPAREN,""["",PLUS,this,DOT,getClass,LPAREN,RPAREN,DOT,getName,LPAREN,RPAREN,PLUS,""] there is already a unit at this new location."",RPAREN,SEMI,RBRACE,RBRACE","    public void move_unit(Unit unit, Position currentPosition,
,        Position newPosition) {
,        _cells[currentPosition.get_x()][currentPosition.get_y()].set_unit(null);
,
,        if (_cells[newPosition.get_x()][newPosition.get_y()].get_unit() <MASK> null) {
,            _cells[newPosition.get_x()][newPosition.get_y()].set_unit(unit);
,        } else {
,            throw new IllegalArgumentException(""["" + this.getClass().getName()
,                + ""] there is already a unit at this new location."");
,        }
,    }
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,685451bc-63aa-468b-93d0-25864073c9d7,SUB,"PRIVATE,ArrayList,LT,String,GT,getClassesInJAR,LPAREN,String,file,RPAREN,THROWS,INDIException,LBRACE,ArrayList,LT,String,GT,list,EQ,NEW,ArrayList,LT,String,GT,LPAREN,RPAREN,SEMI,TRY,LBRACE,JarInputStream,jarFile,EQ,NEW,JarInputStream,LPAREN,NEW,FileInputStream,LPAREN,file,RPAREN,RPAREN,SEMI,JarEntry,jarEntry,EQ,jarFile,DOT,getNextJarEntry,LPAREN,RPAREN,SEMI,WHILE,LPAREN,jarEntry,BANGEQ,null,RPAREN,LBRACE,IF,LPAREN,jarEntry,DOT,getName,LPAREN,RPAREN,DOT,endsWith,LPAREN,"".class"",RPAREN,RPAREN,LBRACE,String,n,EQ,jarEntry,DOT,getName,LPAREN,RPAREN,DOT,replace,LPAREN,""/"",COMMA,""."",RPAREN,SEMI,n,EQ,n,DOT,substring,LPAREN,0,COMMA,n,DOT,length,LPAREN,RPAREN,<MASK>,6,RPAREN,SEMI,list,DOT,add,LPAREN,n,RPAREN,SEMI,RBRACE,jarEntry,EQ,jarFile,DOT,getNextJarEntry,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,CATCH,LPAREN,IOException,e,RPAREN,LBRACE,THROW,NEW,INDIException,LPAREN,""Error loading JAR file contents."",RPAREN,SEMI,RBRACE,RETURN,list,SEMI,RBRACE","  private ArrayList<String> getClassesInJAR(String file) throws INDIException {
,
,    ArrayList<String> list = new ArrayList<String>();
,
,    try {
,      JarInputStream jarFile = new JarInputStream(new FileInputStream(file));
,      JarEntry jarEntry = jarFile.getNextJarEntry();
,      while (jarEntry != null) {
,        if (jarEntry.getName().endsWith("".class"")) {
,          String n = jarEntry.getName().replace(""/"", ""."");
,
,          n = n.substring(0, n.length() <MASK> 6);
,
,          list.add(n);
,        }
,
,        jarEntry = jarFile.getNextJarEntry();
,      }
,    } catch (IOException e) {
,      throw new INDIException(""Error loading JAR file contents."");
,    }
,
,    return list;
,  }
"
9c253d2b-e626-4f21-a850-dfb022369350,127ed851-c55b-452c-ab6c-74eb302446d6,LTEQ,"PUBLIC,int,hunt,LPAREN,FINAL,double,x,RPAREN,LBRACE,int,jl,EQ,jsav,COMMA,jm,COMMA,ju,COMMA,inc,EQ,1,SEMI,IF,LPAREN,n,LT,2,BARBAR,mm,LT,2,BARBAR,mm,GT,n,RPAREN,THROW,NEW,IllegalArgumentException,LPAREN,""hunt size error"",RPAREN,SEMI,boolean,ascnd,EQ,LPAREN,xx,LBRACKET,n,SUB,1,RBRACKET,GTEQ,xx,LBRACKET,0,RBRACKET,RPAREN,SEMI,IF,LPAREN,jl,LT,0,BARBAR,jl,GT,n,SUB,1,RPAREN,LBRACE,jl,EQ,0,SEMI,ju,EQ,n,SUB,1,SEMI,RBRACE,ELSE,LBRACE,IF,LPAREN,x,GTEQ,xx,LBRACKET,jl,RBRACKET,EQEQ,ascnd,RPAREN,LBRACE,FOR,LPAREN,SEMI,SEMI,RPAREN,LBRACE,ju,EQ,jl,PLUS,inc,SEMI,IF,LPAREN,ju,GTEQ,n,SUB,1,RPAREN,LBRACE,ju,EQ,n,SUB,1,SEMI,BREAK,SEMI,RBRACE,ELSE,IF,LPAREN,x,LT,xx,LBRACKET,ju,RBRACKET,EQEQ,ascnd,RPAREN,BREAK,SEMI,ELSE,LBRACE,jl,EQ,ju,SEMI,inc,PLUSEQ,inc,SEMI,RBRACE,RBRACE,RBRACE,ELSE,LBRACE,ju,EQ,jl,SEMI,FOR,LPAREN,SEMI,SEMI,RPAREN,LBRACE,jl,EQ,jl,SUB,inc,SEMI,IF,LPAREN,jl,<MASK>,0,RPAREN,LBRACE,jl,EQ,0,SEMI,BREAK,SEMI,RBRACE,ELSE,IF,LPAREN,x,GTEQ,xx,LBRACKET,jl,RBRACKET,EQEQ,ascnd,RPAREN,BREAK,SEMI,ELSE,LBRACE,ju,EQ,jl,SEMI,inc,PLUSEQ,inc,SEMI,RBRACE,RBRACE,RBRACE,RBRACE,WHILE,LPAREN,ju,SUB,jl,GT,1,RPAREN,LBRACE,jm,EQ,LPAREN,ju,PLUS,jl,RPAREN,GTGT,1,SEMI,IF,LPAREN,x,GTEQ,xx,LBRACKET,jm,RBRACKET,EQEQ,ascnd,RPAREN,jl,EQ,jm,SEMI,ELSE,ju,EQ,jm,SEMI,RBRACE,cor,EQ,abs,LPAREN,jl,SUB,jsav,RPAREN,GT,dj,QUES,0,COLON,1,SEMI,jsav,EQ,jl,SEMI,RETURN,max,LPAREN,0,COMMA,min,LPAREN,n,SUB,mm,COMMA,jl,SUB,LPAREN,LPAREN,mm,SUB,2,RPAREN,GTGT,1,RPAREN,RPAREN,RPAREN,SEMI,RBRACE","  public int hunt(final double x) {
,    int jl=jsav, jm, ju, inc=1;
,    if (n < 2 || mm < 2 || mm > n) throw new IllegalArgumentException(""hunt size error"");
,    boolean ascnd=(xx[n-1] >= xx[0]);
,    if (jl < 0 || jl > n-1) {
,      jl=0;
,      ju=n-1;
,    } else {
,      if (x >= xx[jl] == ascnd) {
,        for (;;) {
,          ju = jl + inc;
,          if (ju >= n-1) { ju = n-1; break;}
,          else if (x < xx[ju] == ascnd) break;
,          else {
,            jl = ju;
,            inc += inc;
,          }
,        }
,      } else {
,        ju = jl;
,        for (;;) {
,          jl = jl - inc;
,          if (jl <MASK> 0) { jl = 0; break;}
,          else if (x >= xx[jl] == ascnd) break;
,          else {
,            ju = jl;
,            inc += inc;
,          }
,        }
,      }
,    }
,    while (ju-jl > 1) {
,      jm = (ju+jl) >> 1;
,      if (x >= xx[jm] == ascnd)
,        jl=jm;
,      else
,        ju=jm;
,    }
,    cor = abs(jl-jsav) > dj ? 0 : 1;
,    jsav = jl;
,    return max(0,min(n-mm,jl-((mm-2)>>1)));
,  }
"
09478113-8f39-4146-870b-8037a6932443,99c71550-7b42-47a9-ad87-3edb94f71f9f,EQEQ,"PRIVATE,void,OP_TYA,LPAREN,RPAREN,LBRACE,setNFlag,LPAREN,getBit,LPAREN,getY,LPAREN,RPAREN,COMMA,7,RPAREN,RPAREN,SEMI,setZFlag,LPAREN,getY,LPAREN,RPAREN,<MASK>,0,RPAREN,SEMI,setA,LPAREN,getY,LPAREN,RPAREN,RPAREN,SEMI,RBRACE","    private void OP_TYA()
,    {
,        setNFlag(getBit(getY(), 7));
,        setZFlag(getY() <MASK> 0);
,
,        setA(getY());
,    }
"
7bd76208-9b34-4151-9ec4-57c6c52e0fcf,820f2da0-ebc1-44d3-b658-110ec1195b61,GTEQ,"STATIC,int,luaO_int2fb,LPAREN,int,x,RPAREN,LBRACE,int,e,EQ,0,SEMI,WHILE,LPAREN,x,<MASK>,16,RPAREN,LBRACE,x,EQ,LPAREN,x,PLUS,1,RPAREN,GTGT,1,SEMI,e,PLUSPLUS,SEMI,RBRACE,IF,LPAREN,x,LT,8,RPAREN,RETURN,x,SEMI,ELSE,RETURN,LPAREN,LPAREN,e,PLUS,1,RPAREN,LTLT,3,RPAREN,BAR,LPAREN,LPAREN,LPAREN,int,RPAREN,x,RPAREN,SUB,8,RPAREN,SEMI,RBRACE","	static int luaO_int2fb (int x) {
,	  int e = 0;  /* expoent */
,	  while (x <MASK> 16) {
,	    x = (x+1) >> 1;
,	    e++;
,	  }
,	  if (x < 8) return x;
,	  else return ((e+1) << 3) | (((int)x) - 8);
,	}
"
c694737b-29b6-48d5-90c3-b6e0b6d64d88,96e11124-2abd-4bbe-8718-ddd59f6174d8,PERCENT,"PROTECTED,int,getMinRowOfWhack,LPAREN,int,whack,RPAREN,LBRACE,IF,LPAREN,whack,LT,numColumns,RPAREN,LBRACE,RETURN,0,SEMI,RBRACE,int,centerRow,EQ,getCenterRow,LPAREN,RPAREN,SEMI,int,adjustment,EQ,LPAREN,centerRow,PLUS,1,RPAREN,<MASK>,2,SEMI,RETURN,2,STAR,LPAREN,whack,SUB,numColumns,RPAREN,PLUS,adjustment,SEMI,RBRACE","    protected int getMinRowOfWhack(int whack) {
,        if (whack < numColumns) {
,            return 0;
,        }
,        int centerRow = getCenterRow();
,        int adjustment = (centerRow + 1) <MASK> 2;
,        return 2 * (whack - numColumns) + adjustment;
,    }
"
7b0ae379-c293-480e-8c64-3374a3631947,01c8ef12-768f-49cc-a13c-6180bd531645,SUB,"PRIVATE,STATIC,int,shuffle,LPAREN,int,n,COMMA,int,x,RPAREN,LBRACE,int,LBRACKET,RBRACKET,a,EQ,NEW,int,LBRACKET,n,<MASK>,x,RBRACKET,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,a,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,a,LBRACKET,i,RBRACKET,EQ,i,SEMI,RBRACE,int,LBRACKET,RBRACKET,aOriginal,EQ,Arrays,DOT,copyOf,LPAREN,a,COMMA,a,DOT,length,RPAREN,SEMI,int,LBRACKET,RBRACKET,b,EQ,NEW,int,LBRACKET,x,RBRACKET,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,b,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,b,LBRACKET,i,RBRACKET,EQ,i,SEMI,RBRACE,int,LBRACKET,RBRACKET,bOriginal,EQ,Arrays,DOT,copyOf,LPAREN,b,COMMA,b,DOT,length,RPAREN,SEMI,int,count,EQ,0,SEMI,WHILE,LPAREN,true,RPAREN,LBRACE,shuffle,LPAREN,a,RPAREN,SEMI,shuffle,LPAREN,b,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,Arrays,DOT,toString,LPAREN,a,RPAREN,PLUS,"" "",PLUS,Arrays,DOT,toString,LPAREN,b,RPAREN,RPAREN,SEMI,count,PLUSPLUS,SEMI,IF,LPAREN,Arrays,DOT,equals,LPAREN,a,COMMA,aOriginal,RPAREN,AMPAMP,Arrays,DOT,equals,LPAREN,b,COMMA,bOriginal,RPAREN,RPAREN,LBRACE,BREAK,SEMI,RBRACE,RBRACE,RETURN,count,SEMI,RBRACE","    private static int shuffle(int n, int x) {
,        int[] a = new int[n <MASK> x];
,        for (int i = 0; i < a.length; i++) {
,            a[i] = i;
,        }
,        int[] aOriginal = Arrays.copyOf(a, a.length);
,        int[] b = new int[x];
,        for (int i = 0; i < b.length; i++) {
,            b[i] = i;
,        }
,        int[] bOriginal = Arrays.copyOf(b, b.length);
,
,        int count = 0;
,        while (true) {
,            shuffle(a);
,            shuffle(b);
,            System.out.println(Arrays.toString(a) + "" "" + Arrays.toString(b));
,            count++;
,            if (Arrays.equals(a, aOriginal) && Arrays.equals(b, bOriginal)) {
,                break;
,            }
,        }
,        return count;
,    }
"
e886a2e2-7806-4078-b494-41956d9dc64b,3a71b3b1-8e89-4740-854c-d0a08c6e10b8,PLUS,"MONKEYS_AT,Override,PUBLIC,void,stateChanged,LPAREN,ChangeEvent,e,RPAREN,LBRACE,JSlider,source,EQ,LPAREN,JSlider,RPAREN,e,DOT,getSource,LPAREN,RPAREN,SEMI,int,val,EQ,source,DOT,getValue,LPAREN,RPAREN,SEMI,lb1,DOT,setText,LPAREN,"""",<MASK>,val,RPAREN,SEMI,RBRACE","			@Override
,			public void stateChanged(ChangeEvent e) {
,				JSlider source = (JSlider) e.getSource();
,				int val = source.getValue();
,				lb1.setText("""" <MASK> val);
,			}
"
27817d3e-5449-46fd-a403-1ed403e709bb,e178e7de-12df-402b-a98e-fb1e45b68711,GTEQ,"TrackerRequest,LPAREN,Sha1Hash,infoHash,COMMA,PeerId,peerId,COMMA,int,port,COMMA,long,uploaded,COMMA,long,downloaded,COMMA,long,left,COMMA,Boolean,compact,COMMA,boolean,noPeerId,COMMA,Event,event,COMMA,InetAddress,ip,COMMA,int,numWant,COMMA,int,key,COMMA,byte,LBRACKET,RBRACKET,trackerId,RPAREN,LBRACE,IF,LPAREN,infoHash,EQEQ,null,RPAREN,THROW,NEW,NullPointerException,LPAREN,""Null Hash"",RPAREN,SEMI,IF,LPAREN,peerId,EQEQ,null,RPAREN,THROW,NEW,NullPointerException,LPAREN,""Null PeerId"",RPAREN,SEMI,IF,LPAREN,event,EQEQ,null,RPAREN,THROW,NEW,NullPointerException,LPAREN,""Null Event"",RPAREN,SEMI,IF,LPAREN,port,LT,0,BAR,port,<MASK>,65535,BAR,uploaded,LT,0,BAR,downloaded,LT,0,BAR,left,LT,0,RPAREN,THROW,NEW,IllegalArgumentException,LPAREN,RPAREN,SEMI,this,DOT,infoHash,EQ,infoHash,SEMI,this,DOT,peerId,EQ,peerId,SEMI,this,DOT,port,EQ,port,SEMI,this,DOT,uploaded,EQ,uploaded,SEMI,this,DOT,downloaded,EQ,downloaded,SEMI,this,DOT,left,EQ,left,SEMI,this,DOT,compact,EQ,compact,SEMI,this,DOT,noPeerId,EQ,noPeerId,SEMI,this,DOT,event,EQ,event,SEMI,this,DOT,ip,EQ,ip,SEMI,this,DOT,numWant,EQ,numWant,SEMI,this,DOT,key,EQ,key,SEMI,this,DOT,trackerId,EQ,LPAREN,trackerId,EQEQ,null,RPAREN,QUES,null,COLON,Arrays,DOT,copyOf,LPAREN,trackerId,COMMA,trackerId,DOT,length,RPAREN,SEMI,RBRACE","    /* package */TrackerRequest (
,        Sha1Hash infoHash, PeerId peerId, int port, long uploaded, long downloaded, long left, Boolean compact,
,        boolean noPeerId, Event event, InetAddress ip, int numWant, int key, byte[] trackerId)
,    {
,        if (infoHash == null)
,            throw new NullPointerException(""Null Hash"");
,        if (peerId == null)
,            throw new NullPointerException(""Null PeerId"");
,        if (event == null)
,            throw new NullPointerException(""Null Event"");
,
,        if (port < 0 | port <MASK> 65535 | uploaded < 0 | downloaded < 0 | left < 0)
,            throw new IllegalArgumentException();
,
,        this.infoHash = infoHash;
,        this.peerId = peerId;
,        this.port = port;
,        this.uploaded = uploaded;
,        this.downloaded = downloaded;
,        this.left = left;
,        this.compact = compact;
,        this.noPeerId = noPeerId;
,        this.event = event;
,        this.ip = ip;
,        this.numWant = numWant;
,        this.key = key;
,        this.trackerId = (trackerId == null) ? null : Arrays.copyOf(trackerId, trackerId.length);
,    }
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,0bea2b4e-fec6-44f5-a11f-6ec171e101e6,BANGEQ,"PUBLIC,void,Run,LPAREN,RPAREN,THROWS,InvalidFileFormatException,COMMA,IOException,LBRACE,BufferedReader,br,EQ,NEW,BufferedReader,LPAREN,NEW,InputStreamReader,LPAREN,System,DOT,in,RPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""List action: "",RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""1. Go to Angry Bird"",RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""2. Action Robot"",RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""3. Visualization"",RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""4. Load Level"",RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""5. Testing solve function"",RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""6. Testing Evaluation"",RPAREN,SEMI,System,DOT,out,DOT,print,LPAREN,""Enter action: "",RPAREN,SEMI,String,s,EQ,"""",SEMI,WHILE,LPAREN,LPAREN,s,EQ,br,DOT,readLine,LPAREN,RPAREN,RPAREN,<MASK>,null,RPAREN,LBRACE,SWITCH,LPAREN,s,RPAREN,LBRACE,CASE,""1"",COLON,IF,LPAREN,BANG,gameOn,RPAREN,LBRACE,openWebpage,LPAREN,NEW,URL,LPAREN,""http://chrome.angrybirds.com/"",RPAREN,RPAREN,SEMI,aRobot,EQ,NEW,ActionRobot,LPAREN,RPAREN,SEMI,gameOn,EQ,true,SEMI,RBRACE,BREAK,SEMI,CASE,""2"",COLON,IF,LPAREN,BANG,gameOn,RPAREN,LBRACE,aRobot,EQ,NEW,ActionRobot,LPAREN,RPAREN,SEMI,ActionRobot,DOT,GoFromMainMenuToLevelSelection,LPAREN,RPAREN,SEMI,gameOn,EQ,true,SEMI,RBRACE,BREAK,SEMI,CASE,""3"",COLON,ShowSeg,DOT,useRealshape,EQ,true,SEMI,Thread,thre,EQ,NEW,Thread,LPAREN,NEW,ShowSeg,LPAREN,RPAREN,RPAREN,SEMI,thre,DOT,start,LPAREN,RPAREN,SEMI,BREAK,SEMI,CASE,""4"",COLON,System,DOT,out,DOT,print,LPAREN,""Enter Level: "",RPAREN,SEMI,String,level,EQ,br,DOT,readLine,LPAREN,RPAREN,SEMI,aRobot,DOT,loadLevel,LPAREN,Integer,DOT,parseInt,LPAREN,level,RPAREN,RPAREN,SEMI,BREAK,SEMI,CASE,""5"",COLON,System,DOT,out,DOT,print,LPAREN,""Enter id 1: "",RPAREN,SEMI,String,id1,EQ,br,DOT,readLine,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,print,LPAREN,""Enter id 2: "",RPAREN,SEMI,String,id2,EQ,br,DOT,readLine,LPAREN,RPAREN,SEMI,TestPhysicsSolve,LPAREN,Integer,DOT,parseInt,LPAREN,id1,RPAREN,COMMA,Integer,DOT,parseInt,LPAREN,id2,RPAREN,RPAREN,SEMI,BREAK,SEMI,CASE,""6"",COLON,System,DOT,out,DOT,print,LPAREN,""Enter id: "",RPAREN,SEMI,String,id,EQ,br,DOT,readLine,LPAREN,RPAREN,SEMI,_Solve,LPAREN,Integer,DOT,parseInt,LPAREN,id,RPAREN,RPAREN,SEMI,BREAK,SEMI,RBRACE,System,DOT,out,DOT,print,LPAREN,""Enter action: "",RPAREN,SEMI,RBRACE,RBRACE","	public void Run () throws InvalidFileFormatException, IOException
,	{	
,		// Menu actions
,		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
,		System.out.println(""List action: "");
,		System.out.println(""1. Go to Angry Bird"");
,		System.out.println(""2. Action Robot"");
,		System.out.println(""3. Visualization"");
,		System.out.println(""4. Load Level"");
,		System.out.println(""5. Testing solve function"");
,		System.out.println(""6. Testing Evaluation"");
,		System.out.print(""Enter action: "");		
,		String s = """";		
,		while ( (s = br.readLine()) <MASK> null)
,		{
,			switch (s)
,			{
,			case ""1"":
,				if (!gameOn)
,				{
,					openWebpage (new URL(""http://chrome.angrybirds.com/""));
,					aRobot = new ActionRobot();
,					gameOn = true;
,				}
,				break;
,			case ""2"":
,				if (!gameOn)
,				{
,					aRobot = new ActionRobot();
,					ActionRobot.GoFromMainMenuToLevelSelection();
,					gameOn = true;
,				}
,				break;
,			case ""3"":
,				ShowSeg.useRealshape = true;
,				Thread thre = new Thread(new ShowSeg());
,				thre.start();
,				break;
,			case ""4"":
,				System.out.print(""Enter Level: "");
,				String level = br.readLine();
,				aRobot.loadLevel(Integer.parseInt(level));
,				break;
,			case ""5"":
,				//PhysicsSolve();
,				//Solve ();
,				System.out.print(""Enter id 1: "");
,				String id1 = br.readLine();
,				System.out.print(""Enter id 2: "");
,				String id2 = br.readLine();
,				TestPhysicsSolve(Integer.parseInt(id1), Integer.parseInt(id2));
,				break;
,			case ""6"":
,				System.out.print(""Enter id: "");
,				String id = br.readLine();
,				_Solve(Integer.parseInt(id));
,				break;
,			}
,			System.out.print(""Enter action: "");
,		}
,		
,	}
"
1b82c97a-fe19-4584-bdbc-4f13bb123c10,7c333c88-1ad3-48ca-8bef-3528a2d14757,GTEQ,"PUBLIC,Chromosome,calFitness,LPAREN,Chromosome,ch,COMMA,List,LT,Datum,GT,train,COMMA,List,LT,Datum,GT,dev,RPAREN,THROWS,IOException,LBRACE,Random,r,EQ,NEW,Random,LPAREN,RPAREN,SEMI,FeatureFactory,featureFactory,EQ,NEW,FeatureFactory,LPAREN,RPAREN,SEMI,String,listFeature,EQ,util,DOT,Convert,DOT,convertToString,LPAREN,ch,RPAREN,SEMI,List,LT,Datum,GT,computedTrain,EQ,featureFactory,DOT,computeFeature,LPAREN,train,COMMA,listFeature,RPAREN,SEMI,List,LT,Datum,GT,computedDev,EQ,featureFactory,DOT,computeFeature,LPAREN,dev,COMMA,listFeature,RPAREN,SEMI,String,path,EQ,""temp/"",SEMI,String,trainFile,EQ,path,PLUS,String,DOT,valueOf,LPAREN,r,DOT,nextInt,LPAREN,1000000,RPAREN,RPAREN,SEMI,String,devFile,EQ,path,PLUS,String,DOT,valueOf,LPAREN,r,DOT,nextDouble,LPAREN,RPAREN,RPAREN,SEMI,TRY,LBRACE,featureFactory,DOT,writeToFeatureFile,LPAREN,computedTrain,COMMA,trainFile,COMMA,listFeature,RPAREN,SEMI,RBRACE,CATCH,LPAREN,IOException,ex,RPAREN,LBRACE,Logger,DOT,getLogger,LPAREN,GA_Krigg,DOT,CLASS,DOT,getName,LPAREN,RPAREN,RPAREN,DOT,log,LPAREN,Level,DOT,SEVERE,COMMA,null,COMMA,ex,RPAREN,SEMI,RBRACE,TRY,LBRACE,featureFactory,DOT,writeToFeatureFile,LPAREN,computedDev,COMMA,devFile,COMMA,listFeature,RPAREN,SEMI,RBRACE,CATCH,LPAREN,IOException,ex,RPAREN,LBRACE,Logger,DOT,getLogger,LPAREN,GA_Krigg,DOT,CLASS,DOT,getName,LPAREN,RPAREN,RPAREN,DOT,log,LPAREN,Level,DOT,SEVERE,COMMA,null,COMMA,ex,RPAREN,SEMI,RBRACE,String,result,EQ,null,SEMI,TRY,LBRACE,result,EQ,runMaxent,LPAREN,trainFile,COMMA,devFile,RPAREN,SEMI,RBRACE,CATCH,LPAREN,InterruptedException,ex,RPAREN,LBRACE,Logger,DOT,getLogger,LPAREN,GA_Krigg,DOT,CLASS,DOT,getName,LPAREN,RPAREN,RPAREN,DOT,log,LPAREN,Level,DOT,SEVERE,COMMA,null,COMMA,ex,RPAREN,SEMI,RBRACE,int,start,EQ,0,SEMI,result,EQ,result,DOT,trim,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,result,DOT,length,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,Character,DOT,isDigit,LPAREN,result,DOT,charAt,LPAREN,i,RPAREN,RPAREN,RPAREN,LBRACE,start,EQ,i,SEMI,BREAK,SEMI,RBRACE,RBRACE,result,EQ,result,DOT,substring,LPAREN,start,SUB,1,COMMA,result,DOT,indexOf,LPAREN,""%"",RPAREN,RPAREN,SEMI,IF,LPAREN,result,EQEQ,null,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""NULL"",RPAREN,SEMI,RBRACE,IF,LPAREN,ch,EQEQ,null,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""NULL fitnees"",RPAREN,SEMI,RBRACE,IF,LPAREN,ch,DOT,getEncodedFeature,LPAREN,RPAREN,DOT,cardinality,LPAREN,RPAREN,EQEQ,0,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""Features null"",RPAREN,SEMI,RBRACE,ch,DOT,setFitness,LPAREN,Double,DOT,valueOf,LPAREN,result,RPAREN,RPAREN,SEMI,ch,DOT,setFitness_err,LPAREN,0,RPAREN,SEMI,fitnessValues,DOT,put,LPAREN,ch,COMMA,ch,DOT,getFitness,LPAREN,RPAREN,RPAREN,SEMI,File,f,EQ,NEW,File,LPAREN,trainFile,RPAREN,SEMI,File,f2,EQ,NEW,File,LPAREN,devFile,RPAREN,SEMI,f,DOT,delete,LPAREN,RPAREN,SEMI,f2,DOT,delete,LPAREN,RPAREN,SEMI,IF,LPAREN,ch,DOT,getFitness,LPAREN,RPAREN,<MASK>,100,RPAREN,LBRACE,ch,DOT,setFitness,LPAREN,0,RPAREN,SEMI,RBRACE,RETURN,ch,SEMI,RBRACE","    public Chromosome calFitness(Chromosome ch, List<Datum> train, List<Datum> dev) throws IOException {
,        Random r = new Random();
,
,        FeatureFactory featureFactory = new FeatureFactory();
,        String listFeature= util.Convert.convertToString(ch);
,        List<Datum> computedTrain = featureFactory.computeFeature(train, listFeature);
,        List<Datum> computedDev = featureFactory.computeFeature(dev, listFeature);
,        String path = ""temp/"";
,
,
,        String trainFile = path + String.valueOf(r.nextInt(1000000));
,        String devFile = path + String.valueOf(r.nextDouble());
,        try {
,            featureFactory.writeToFeatureFile(computedTrain, trainFile, listFeature);
,        } catch (IOException ex) {
,            Logger.getLogger(GA_Krigg.class.getName()).log(Level.SEVERE, null, ex);
,        }
,        try {
,            featureFactory.writeToFeatureFile(computedDev, devFile, listFeature);
,        } catch (IOException ex) {
,            Logger.getLogger(GA_Krigg.class.getName()).log(Level.SEVERE, null, ex);
,        }
,        String result = null;
,        try {
,            result = runMaxent(trainFile, devFile);
,        } catch (InterruptedException ex) {
,            Logger.getLogger(GA_Krigg.class.getName()).log(Level.SEVERE, null, ex);
,        }
,
,        int start = 0;
,   
,        result = result.trim();
,   
,        for (int i = 0; i < result.length(); i++) {
,
,            if (Character.isDigit(result.charAt(i))) {
,                start = i;
,                break;
,            }
,
,        }
,        result = result.substring(start - 1, result.indexOf(""%""));
,        if (result == null) {
,            System.out.println(""NULL"");
,        }
,        if (ch == null) {
,            System.out.println(""NULL fitnees"");
,        }
,        if (ch.getEncodedFeature().cardinality() == 0) {
,            System.out.println(""Features null"");
,        }
,//        if (featureNames == null) {
,//            System.out.println(""featureNames null"");
,//        }
,        ch.setFitness(Double.valueOf(result));
,
,        ch.setFitness_err(0);
,
,        //add to fitnessValue
,        fitnessValues.put(ch, ch.getFitness());
,
,        //delete file
,        File f = new File(trainFile);
,        File f2 = new File(devFile);
,        f.delete();
,        f2.delete();
,        if (ch.getFitness() <MASK> 100) {
,            ch.setFitness(0);
,        }
,        return ch;
,
,    }
"
927eecd3-2471-4c84-a24b-658b6fdb3a9f,38b45072-08d6-4ee7-8562-2c53a5d1c990,GTEQ,"PUBLIC,boolean,iterer,LPAREN,double,intervalle_de_temps,COMMA,Date,heure_courante,RPAREN,LBRACE,int,plots_restants,EQ,Avion,DOT,NbPlots,COMMA,indice_segment,EQ,0,SEMI,IF,LPAREN,this,DOT,heure_depart,DOT,after,LPAREN,heure_courante,RPAREN,RPAREN,RETURN,false,SEMI,IF,LPAREN,this,DOT,trajectoire,DOT,isEmpty,LPAREN,RPAREN,RPAREN,LBRACE,RETURN,false,SEMI,RBRACE,Segment,segment,EQ,this,DOT,trajectoire,DOT,element,LPAREN,RPAREN,SEMI,IF,LPAREN,segment,DOT,totalement_parcouru,LPAREN,RPAREN,RPAREN,LBRACE,this,DOT,trajectoire,DOT,remove,LPAREN,RPAREN,SEMI,RBRACE,ELSE,LBRACE,RBRACE,WHILE,LPAREN,LPAREN,plots_restants,<MASK>,0,RPAREN,AMPAMP,LPAREN,indice_segment,LT,this,DOT,trajectoire,DOT,size,LPAREN,RPAREN,RPAREN,RPAREN,LBRACE,segment,EQ,this,DOT,trajectoire,DOT,get,LPAREN,indice_segment,PLUSPLUS,RPAREN,SEMI,plots_restants,EQ,segment,DOT,iterer,LPAREN,plots_restants,COMMA,this,DOT,vitesse,COMMA,intervalle_de_temps,RPAREN,SEMI,RBRACE,RETURN,true,SEMI,RBRACE","	public boolean iterer( double intervalle_de_temps , Date heure_courante) 
,	{
,		//System.out.println( ""Iteration d'un avion"" );
,		
,		int plots_restants = Avion.NbPlots , indice_segment = 0 ;
,		
,		if ( this.heure_depart.after( heure_courante ))
,			return false ;
,		
,		if( this.trajectoire.isEmpty() )
,		{
,			//System.out.println( ""Fin du trajet"" );
,			return false ;
,		}
,		
,		Segment segment = this.trajectoire.element() ;
,
,		if( segment.totalement_parcouru() )
,		{
,			//System.out.println( ""Suppression d'un segment"" );
,			this.trajectoire.remove();
,		} else {
,			//System.out.println( ""DistanceRestante : "" + segment.getDistanceRestante() );
,		}
,		
,		
,		while( ( plots_restants <MASK> 0) && ( indice_segment < this.trajectoire.size() ) )
,		{	
,			segment = this.trajectoire.get( indice_segment++ ) ;
,			plots_restants = segment.iterer(plots_restants , this.vitesse , intervalle_de_temps ) ;
,			//System.out.println( ""Plots_restants:"" + plots_restants) ;
,		}
,				
,		return true ;
,	}
"
113c5414-6c55-466b-b879-a350ab6e0ca2,13b8f02d-cbeb-47e2-a21b-507af6d76ad9,EQ,"PUBLIC,Tile,LPAREN,boolean,passable,RPAREN,LBRACE,this,DOT,passable,<MASK>,passable,SEMI,RBRACE","	public Tile(boolean passable){
,		this.passable <MASK> passable;
,	}
"
e64c1d9d-97c7-42df-873b-ba28e2c45ccc,8c219cd6-7429-4ba5-8326-8f68ca2ecc20,GTEQ,"PUBLIC,int,minimumTotal,LPAREN,ArrayList,LT,ArrayList,LT,Integer,GTGT,triangle,RPAREN,LBRACE,int,len,EQ,triangle,DOT,size,LPAREN,RPAREN,SEMI,int,count,EQ,0,SEMI,ArrayList,LT,Integer,GT,last,EQ,LPAREN,ArrayList,LT,Integer,GT,RPAREN,triangle,DOT,get,LPAREN,len,SUB,1,RPAREN,DOT,clone,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,len,SUB,2,SEMI,i,<MASK>,0,SEMI,i,SUBSUB,RPAREN,LBRACE,ArrayList,LT,Integer,GT,temp,EQ,triangle,DOT,get,LPAREN,i,RPAREN,SEMI,FOR,LPAREN,int,j,EQ,0,SEMI,j,LT,triangle,DOT,get,LPAREN,i,RPAREN,DOT,size,LPAREN,RPAREN,SEMI,j,PLUSPLUS,RPAREN,LBRACE,int,ret,EQ,temp,DOT,get,LPAREN,j,RPAREN,SEMI,ret,EQ,ret,PLUS,Math,DOT,min,LPAREN,last,DOT,get,LPAREN,j,RPAREN,COMMA,last,DOT,get,LPAREN,j,PLUS,1,RPAREN,RPAREN,SEMI,last,DOT,set,LPAREN,count,COMMA,ret,RPAREN,SEMI,count,PLUSPLUS,SEMI,RBRACE,count,EQ,0,SEMI,last,DOT,remove,LPAREN,last,DOT,size,LPAREN,RPAREN,SUB,1,RPAREN,SEMI,RBRACE,RETURN,last,DOT,get,LPAREN,0,RPAREN,SEMI,RBRACE","	public int minimumTotal(ArrayList<ArrayList<Integer>> triangle) {
,        int len = triangle.size();
,        int count =0;
,        ArrayList<Integer> last = (ArrayList<Integer>)triangle.get(len-1).clone();
,        for(int i= len-2;i<MASK>0;i--){
,        	ArrayList<Integer> temp = triangle.get(i);
,            for( int j=0;j<triangle.get(i).size();j++)
,            {
,                int ret = temp.get(j);
,                ret = ret+Math.min(last.get(j),last.get(j+1));
,                last.set(count,ret);
,                count++;
,            }
,            count=0;
,            last.remove(last.size()-1);
,        }
,        return last.get(0);
,    }
"
b8ab1edb-e16c-491e-a26c-08f3a4856c48,6b076f87-119f-4379-911e-3c9e486bde57,GTEQ,"PRIVATE,String,ReplaceString,LPAREN,String,strSource,COMMA,String,strFrom,COMMA,String,strTo,RPAREN,LBRACE,IF,LPAREN,strSource,EQEQ,null,RPAREN,LBRACE,RETURN,null,SEMI,RBRACE,int,i,EQ,0,SEMI,IF,LPAREN,LPAREN,i,EQ,strSource,DOT,indexOf,LPAREN,strFrom,COMMA,i,RPAREN,RPAREN,<MASK>,0,RPAREN,LBRACE,char,LBRACKET,RBRACKET,cSrc,EQ,strSource,DOT,toCharArray,LPAREN,RPAREN,SEMI,char,LBRACKET,RBRACKET,cTo,EQ,strTo,DOT,toCharArray,LPAREN,RPAREN,SEMI,int,len,EQ,strFrom,DOT,length,LPAREN,RPAREN,SEMI,StringBuffer,buf,EQ,NEW,StringBuffer,LPAREN,cSrc,DOT,length,RPAREN,SEMI,buf,DOT,append,LPAREN,cSrc,COMMA,0,COMMA,i,RPAREN,DOT,append,LPAREN,cTo,RPAREN,SEMI,i,PLUSEQ,len,SEMI,int,j,EQ,i,SEMI,WHILE,LPAREN,LPAREN,i,EQ,strSource,DOT,indexOf,LPAREN,strFrom,COMMA,i,RPAREN,RPAREN,GT,0,RPAREN,LBRACE,buf,DOT,append,LPAREN,cSrc,COMMA,j,COMMA,i,SUB,j,RPAREN,DOT,append,LPAREN,cTo,RPAREN,SEMI,i,PLUSEQ,len,SEMI,j,EQ,i,SEMI,RBRACE,buf,DOT,append,LPAREN,cSrc,COMMA,j,COMMA,cSrc,DOT,length,SUB,j,RPAREN,SEMI,RETURN,buf,DOT,toString,LPAREN,RPAREN,SEMI,RBRACE,RETURN,strSource,SEMI,RBRACE","	private String ReplaceString(String strSource, String strFrom, String strTo) {
,		 if (strSource == null) {
,		   return null;
,		 }
,	     int i = 0;
,	     if ((i = strSource.indexOf(strFrom, i)) <MASK> 0) {
,	       char[] cSrc = strSource.toCharArray();
,	       char[] cTo = strTo.toCharArray();
,	       int len = strFrom.length();
,	       StringBuffer buf = new StringBuffer(cSrc.length);
,	       buf.append(cSrc, 0, i).append(cTo);
,	       i += len;
,	       int j = i;
,	       while ((i = strSource.indexOf(strFrom, i)) > 0) {
,		buf.append(cSrc, j, i - j).append(cTo);
,		i += len;
,		j = i;
,	       }
,	       buf.append(cSrc, j, cSrc.length - j);
,	       return buf.toString();
,	     }
,	     return strSource;
,	}
"
0cadc92e-3d00-4c9b-b4a2-174a03a56a77,bf109002-0cea-4960-aef9-1866f9ff6421,PLUS,"PUBLIC,STATIC,void,main,LPAREN,String,LBRACKET,RBRACKET,args,RPAREN,LBRACE,CandidateFactory,LT,AbstractMutableFormula,GT,candidateFactory,EQ,FormulaCandidateFactory,DOT,getInstance,LPAREN,RPAREN,SEMI,EvolutionaryOperator,LT,AbstractMutableFormula,GT,mutation,EQ,NEW,SimpleMutationOperator,LPAREN,0.02,RPAREN,SEMI,FormulaCrossoverOperator,crossover,EQ,NEW,FormulaCrossoverOperator,LPAREN,2,RPAREN,SEMI,List,LT,EvolutionaryOperator,LT,AbstractMutableFormula,GTGT,operators,EQ,NEW,ArrayList,LT,EvolutionaryOperator,LT,AbstractMutableFormula,GTGT,LPAREN,RPAREN,SEMI,operators,DOT,add,LPAREN,crossover,RPAREN,SEMI,operators,DOT,add,LPAREN,mutation,RPAREN,SEMI,EvolutionaryOperator,LT,AbstractMutableFormula,GT,evolutionScheme,EQ,NEW,EvolutionPipeline,LT,AbstractMutableFormula,GT,LPAREN,operators,RPAREN,SEMI,FitnessEvaluator,LT,QUES,super,AbstractMutableFormula,GT,fitnessEvaluator,EQ,NEW,RootFitness,LPAREN,RPAREN,SEMI,SelectionStrategy,LT,QUES,super,AbstractMutableFormula,GT,selectionStrategy,EQ,NEW,RouletteWheelSelection,LPAREN,RPAREN,SEMI,Random,rnd,EQ,NEW,MersenneTwisterRNG,LPAREN,RPAREN,SEMI,EvolutionEngine,LT,AbstractMutableFormula,GT,engine,EQ,NEW,GenerationalEvolutionEngine,LT,AbstractMutableFormula,GT,LPAREN,candidateFactory,COMMA,evolutionScheme,COMMA,fitnessEvaluator,COMMA,selectionStrategy,COMMA,rnd,RPAREN,SEMI,engine,DOT,addEvolutionObserver,LPAREN,NEW,EvolutionObserver,LT,Formula,GT,LPAREN,RPAREN,LBRACE,MONKEYS_AT,Override,PUBLIC,void,populationUpdate,LPAREN,PopulationData,LT,QUES,EXTENDS,Formula,GT,data,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,data,DOT,getGenerationNumber,LPAREN,RPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,data,DOT,getBestCandidate,LPAREN,RPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,data,DOT,getBestCandidateFitness,LPAREN,RPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,data,DOT,getMeanFitness,LPAREN,RPAREN,<MASK>,""\n"",RPAREN,SEMI,RBRACE,RBRACE,RPAREN,SEMI,Formula,res,EQ,engine,DOT,evolve,LPAREN,1000,COMMA,2,COMMA,NEW,TargetFitness,LPAREN,0.1,COMMA,false,RPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,res,RPAREN,SEMI,RBRACE","	public static void main(String[] args) {
,
,		CandidateFactory<AbstractMutableFormula> candidateFactory = FormulaCandidateFactory
,				.getInstance();
,		EvolutionaryOperator<AbstractMutableFormula> mutation = new SimpleMutationOperator(
,				0.02);
,		FormulaCrossoverOperator crossover = new FormulaCrossoverOperator(2);
,		List<EvolutionaryOperator<AbstractMutableFormula>> operators = new ArrayList<EvolutionaryOperator<AbstractMutableFormula>>();
,		operators.add(crossover);
,		operators.add(mutation);
,		EvolutionaryOperator<AbstractMutableFormula> evolutionScheme = new EvolutionPipeline<AbstractMutableFormula>(
,				operators);
,		FitnessEvaluator<? super AbstractMutableFormula> fitnessEvaluator = new RootFitness();
,		SelectionStrategy<? super AbstractMutableFormula> selectionStrategy = new RouletteWheelSelection();
,		Random rnd = new MersenneTwisterRNG();
,		EvolutionEngine<AbstractMutableFormula> engine = new GenerationalEvolutionEngine<AbstractMutableFormula>(
,				candidateFactory, evolutionScheme, fitnessEvaluator,
,				selectionStrategy, rnd);
,		engine.addEvolutionObserver(new EvolutionObserver<Formula>() {
,
,			@Override
,			public void populationUpdate(PopulationData<? extends Formula> data) {
,				System.out.println(data.getGenerationNumber());
,				System.out.println(data.getBestCandidate());
,				System.out.println(data.getBestCandidateFitness());
,				System.out.println(data.getMeanFitness() <MASK> ""\n"");
,			}
,		});
,		Formula res = engine.evolve(1000, 2, new TargetFitness(0.1, false));
,		System.out.println(res);
,	}
"
789d219f-7383-4fa6-b72d-81f8985229f6,2a483574-9cf5-404b-85b7-17d0787d6871,EQEQ,"PUBLIC,void,regularTurn,LPAREN,Player,player,COMMA,Point,location,RPAREN,THROWS,Connect4Exception,COMMA,GameException,LBRACE,IF,LPAREN,location,<MASK>,null,RPAREN,LBRACE,THROW,NEW,IllegalArgumentException,LPAREN,""GameCommands - regularTurn: location is null"",RPAREN,SEMI,RBRACE,IF,LPAREN,game,DOT,getStatus,LPAREN,RPAREN,BANGEQ,GameStatus,DOT,PLAYING,AMPAMP,game,DOT,getStatus,LPAREN,RPAREN,BANGEQ,GameStatus,DOT,NEW_GAME,RPAREN,LBRACE,THROW,NEW,Connect4Exception,LPAREN,ErrorType,DOT,ERROR109,DOT,getMessage,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,game,DOT,setStatus,LPAREN,GameStatus,DOT,PLAYING,RPAREN,SEMI,this,DOT,markLocation,LPAREN,player,COMMA,location,RPAREN,SEMI,RBRACE","    public void regularTurn(Player player, Point location) throws Connect4Exception, GameException {
,        if (location <MASK> null) {
,            throw new IllegalArgumentException(""GameCommands - regularTurn: location is null"");
,        }
,        
,        if (game.getStatus() != GameStatus.PLAYING && 
,            game.getStatus() != GameStatus.NEW_GAME) {
,            throw new Connect4Exception(ErrorType.ERROR109.getMessage());
,        }
,
,        game.setStatus(GameStatus.PLAYING);
,        this.markLocation(player, location);
,    }
"
aed9046f-504a-49f9-b9ef-f36cca22ba93,204ac185-0bc5-4f05-af07-4c2f9b6a8fc3,SLASH,"PUBLIC,STATIC,List,LT,String,GT,getArrayWithResults,LPAREN,double,kwota,COMMA,char,typ,RPAREN,LBRACE,DecimalFormat,df00,EQ,NEW,DecimalFormat,LPAREN,""#.00"",RPAREN,SEMI,DecimalFormat,df,EQ,NEW,DecimalFormat,LPAREN,""#"",RPAREN,SEMI,podstawa,EQ,kwota,SEMI,umowa,EQ,typ,SEMI,ArrayList,LT,String,GT,outPut,EQ,NEW,ArrayList,LT,String,GT,LPAREN,RPAREN,SEMI,IF,LPAREN,umowa,EQEQ,P,RPAREN,LBRACE,outPut,DOT,add,LPAREN,""UMOWA O PRAC\u00C4\uFFFD"",RPAREN,SEMI,outPut,DOT,add,LPAREN,""Podstawa wymiaru sk\u0139\u201Aadek "",PLUS,podstawa,RPAREN,SEMI,double,oPodstawa,EQ,obliczonaPodstawa,LPAREN,podstawa,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Sk\u0139\u201Aadka na ubezpieczenie emerytalne "",PLUS,df00,DOT,format,LPAREN,s_emerytalna,RPAREN,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Sk\u0139\u201Aadka na ubezpieczenie rentowe    "",PLUS,df00,DOT,format,LPAREN,s_rentowa,RPAREN,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Sk\u0139\u201Aadka na ubezpieczenie chorobowe  "",PLUS,df00,DOT,format,LPAREN,u_chorobowe,RPAREN,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Podstawa wymiaru sk\u0139\u201Aadki na ubezpieczenie zdrowotne: "",PLUS,oPodstawa,RPAREN,SEMI,obliczUbezpieczenia,LPAREN,oPodstawa,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Sk\u0139\u201Aadka na ubezpieczenie zdrowotne: 9% = "",PLUS,df00,DOT,format,LPAREN,s_zdrow1,RPAREN,PLUS,"" 7,75% = "",PLUS,df00,DOT,format,LPAREN,s_zdrow2,RPAREN,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Koszty uzyskania przychodu w sta\u0139\u201Aej wysoko\u0139\u203Aci "",PLUS,kosztyUzyskania,RPAREN,SEMI,double,podstawaOpodat,EQ,oPodstawa,SUB,kosztyUzyskania,SEMI,double,podstawaOpodat0,EQ,Double,DOT,parseDouble,LPAREN,df,DOT,format,LPAREN,podstawaOpodat,RPAREN,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Podstawa opodatkowania "",PLUS,podstawaOpodat,PLUS,"" zaokr\u00C4\u2026glona "",PLUS,df,DOT,format,LPAREN,podstawaOpodat0,RPAREN,RPAREN,SEMI,obliczPodatek,LPAREN,podstawaOpodat0,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Zaliczka na podatek dochodowy 18 % = "",PLUS,zaliczkaNaPod,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Kwota wolna od podatku = "",PLUS,kwotaZmiejsz,RPAREN,SEMI,double,podatekPotracony,EQ,zaliczkaNaPod,SUB,kwotaZmiejsz,SEMI,outPut,DOT,add,LPAREN,""Podatek potr\u00C4\u2026cony = "",PLUS,df00,DOT,format,LPAREN,podatekPotracony,RPAREN,RPAREN,SEMI,obliczZaliczke,LPAREN,RPAREN,SEMI,zaliczkaUS0,EQ,Double,DOT,parseDouble,LPAREN,df,DOT,format,LPAREN,zaliczkaUS,RPAREN,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Zaliczka do urz\u00C4\u2122du skarbowego = "",PLUS,df00,DOT,format,LPAREN,zaliczkaUS,RPAREN,PLUS,"" po zaokr\u00C4\u2026gleniu = "",PLUS,df,DOT,format,LPAREN,zaliczkaUS0,RPAREN,RPAREN,SEMI,double,wynagrodzenie,EQ,podstawa,SUB,LPAREN,LPAREN,s_emerytalna,PLUS,s_rentowa,PLUS,u_chorobowe,RPAREN,PLUS,s_zdrow1,PLUS,zaliczkaUS0,RPAREN,SEMI,outPut,DOT,add,LPAREN,""\n"",RPAREN,SEMI,outPut,DOT,add,LPAREN,""Pracownik otrzyma wynagrodzenie netto w wysoko\u0139\u203Aci = "",PLUS,df00,DOT,format,LPAREN,wynagrodzenie,RPAREN,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,umowa,EQEQ,Z,RPAREN,LBRACE,outPut,DOT,add,LPAREN,""UMOWA-ZLECENIE"",RPAREN,SEMI,outPut,DOT,add,LPAREN,""Podstawa wymiaru sk\u0139\u201Aadek "",PLUS,podstawa,RPAREN,SEMI,double,oPodstawa,EQ,obliczonaPodstawa,LPAREN,podstawa,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Sk\u0139\u201Aadka na ubezpieczenie emerytalne "",PLUS,df00,DOT,format,LPAREN,s_emerytalna,RPAREN,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Sk\u0139\u201Aadka na ubezpieczenie rentowe    "",PLUS,df00,DOT,format,LPAREN,s_rentowa,RPAREN,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Sk\u0139\u201Aadka na ubezpieczenie chorobowe  "",PLUS,df00,DOT,format,LPAREN,u_chorobowe,RPAREN,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Podstawa wymiaru sk\u0139\u201Aadki na ubezpieczenie zdrowotne: "",PLUS,oPodstawa,RPAREN,SEMI,obliczUbezpieczenia,LPAREN,oPodstawa,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Sk\u0139\u201Aadka na ubezpieczenie zdrowotne: 9% = "",PLUS,df00,DOT,format,LPAREN,s_zdrow1,RPAREN,PLUS,"" 7,75% = "",PLUS,df00,DOT,format,LPAREN,s_zdrow2,RPAREN,RPAREN,SEMI,kwotaZmiejsz,EQ,0,SEMI,kosztyUzyskania,EQ,LPAREN,oPodstawa,STAR,20,RPAREN,<MASK>,100,SEMI,outPut,DOT,add,LPAREN,""Koszty uzyskania przychodu (sta\u0139\u201Ae) "",PLUS,kosztyUzyskania,RPAREN,SEMI,double,podstawaOpodat,EQ,oPodstawa,SUB,kosztyUzyskania,SEMI,double,podstawaOpodat0,EQ,Double,DOT,parseDouble,LPAREN,df,DOT,format,LPAREN,podstawaOpodat,RPAREN,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Podstawa opodatkowania "",PLUS,podstawaOpodat,PLUS,"" zaokr\u00C4\u2026glona "",PLUS,df,DOT,format,LPAREN,podstawaOpodat0,RPAREN,RPAREN,SEMI,obliczPodatek,LPAREN,podstawaOpodat0,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Zaliczka na podatek dochodowy 18 % = "",PLUS,zaliczkaNaPod,RPAREN,SEMI,double,podatekPotracony,EQ,zaliczkaNaPod,SEMI,outPut,DOT,add,LPAREN,""Podatek potr\u00C4\u2026cony = "",PLUS,df00,DOT,format,LPAREN,podatekPotracony,RPAREN,RPAREN,SEMI,obliczZaliczke,LPAREN,RPAREN,SEMI,zaliczkaUS0,EQ,Double,DOT,parseDouble,LPAREN,df,DOT,format,LPAREN,zaliczkaUS,RPAREN,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Zaliczka do urz\u00C4\u2122du skarbowego = "",PLUS,df00,DOT,format,LPAREN,zaliczkaUS,RPAREN,PLUS,"" po zaokr\u00C4\u2026gleniu = "",PLUS,df,DOT,format,LPAREN,zaliczkaUS0,RPAREN,RPAREN,SEMI,double,wynagrodzenie,EQ,podstawa,SUB,LPAREN,LPAREN,s_emerytalna,PLUS,s_rentowa,PLUS,u_chorobowe,RPAREN,PLUS,s_zdrow1,PLUS,zaliczkaUS0,RPAREN,SEMI,outPut,DOT,add,LPAREN,""\n"",RPAREN,SEMI,outPut,DOT,add,LPAREN,""Pracownik otrzyma wynagrodzenie netto w wysoko\u0139\u203Aci = "",PLUS,df00,DOT,format,LPAREN,wynagrodzenie,RPAREN,RPAREN,SEMI,RBRACE,ELSE,LBRACE,outPut,DOT,add,LPAREN,""Nieznany typ umowy!"",RPAREN,SEMI,RBRACE,reset,LPAREN,RPAREN,SEMI,RETURN,outPut,SEMI,RBRACE","public static List<String> getArrayWithResults(double kwota,char typ){
,		
,	DecimalFormat df00 = new DecimalFormat(""#.00"");
,	DecimalFormat df = new DecimalFormat(""#"");
,	
,	podstawa = kwota;
,	umowa = typ;
,	
,	ArrayList<String> outPut = new ArrayList<String>();
,	
,	if (umowa == 'P') {
,		outPut.add(""UMOWA O PRACÄ�"");
,		outPut.add(""Podstawa wymiaru skĹ‚adek "" + podstawa);
,		double oPodstawa = obliczonaPodstawa(podstawa);
,		outPut.add(""SkĹ‚adka na ubezpieczenie emerytalne ""
,				+ df00.format(s_emerytalna));
,		outPut.add(""SkĹ‚adka na ubezpieczenie rentowe    ""
,				+ df00.format(s_rentowa));
,		outPut.add(""SkĹ‚adka na ubezpieczenie chorobowe  ""
,				+ df00.format(u_chorobowe));
,		outPut.add(""Podstawa wymiaru skĹ‚adki na ubezpieczenie zdrowotne: ""
,						+ oPodstawa);
,		obliczUbezpieczenia(oPodstawa);
,		outPut.add(""SkĹ‚adka na ubezpieczenie zdrowotne: 9% = ""
,				+ df00.format(s_zdrow1) + "" 7,75% = "" + df00.format(s_zdrow2));
,		outPut.add( ""Koszty uzyskania przychodu w staĹ‚ej wysokoĹ›ci ""
,				+ kosztyUzyskania);
,		double podstawaOpodat = oPodstawa - kosztyUzyskania;
,		double podstawaOpodat0 = Double
,				.parseDouble(df.format(podstawaOpodat));
,		outPut.add(""Podstawa opodatkowania "" + podstawaOpodat
,				+ "" zaokrÄ…glona "" + df.format(podstawaOpodat0));
,		obliczPodatek(podstawaOpodat0);
,		outPut.add(""Zaliczka na podatek dochodowy 18 % = ""
,				+ zaliczkaNaPod);
,		outPut.add(""Kwota wolna od podatku = "" + kwotaZmiejsz);
,		double podatekPotracony = zaliczkaNaPod - kwotaZmiejsz;
,		outPut.add(""Podatek potrÄ…cony = ""
,				+ df00.format(podatekPotracony));
,		obliczZaliczke();
,		zaliczkaUS0 = Double.parseDouble(df.format(zaliczkaUS));
,		outPut.add(""Zaliczka do urzÄ™du skarbowego = ""
,				+ df00.format(zaliczkaUS) + "" po zaokrÄ…gleniu = ""
,				+ df.format(zaliczkaUS0));
,		double wynagrodzenie = podstawa
,				- ((s_emerytalna + s_rentowa + u_chorobowe) + s_zdrow1 + zaliczkaUS0);
,		outPut.add(""\n"");
,		outPut.add(""Pracownik otrzyma wynagrodzenie netto w wysokoĹ›ci = ""
,						+ df00.format(wynagrodzenie));
,	} else if (umowa == 'Z') {
,		outPut.add(""UMOWA-ZLECENIE"");
,		outPut.add(""Podstawa wymiaru skĹ‚adek "" + podstawa);
,		double oPodstawa = obliczonaPodstawa(podstawa);
,		outPut.add(""SkĹ‚adka na ubezpieczenie emerytalne ""
,				+ df00.format(s_emerytalna));
,		outPut.add(""SkĹ‚adka na ubezpieczenie rentowe    ""
,				+ df00.format(s_rentowa));
,		outPut.add(""SkĹ‚adka na ubezpieczenie chorobowe  ""
,				+ df00.format(u_chorobowe));
,		outPut.add(""Podstawa wymiaru skĹ‚adki na ubezpieczenie zdrowotne: ""
,						+ oPodstawa);
,		obliczUbezpieczenia(oPodstawa);
,		outPut.add(""SkĹ‚adka na ubezpieczenie zdrowotne: 9% = ""
,				+ df00.format(s_zdrow1) + "" 7,75% = "" + df00.format(s_zdrow2));
,		kwotaZmiejsz = 0;
,		kosztyUzyskania = (oPodstawa * 20) <MASK> 100;
,		outPut.add(""Koszty uzyskania przychodu (staĹ‚e) ""
,				+ kosztyUzyskania);
,		double podstawaOpodat = oPodstawa - kosztyUzyskania;
,		double podstawaOpodat0 = Double.parseDouble(df.format(podstawaOpodat));
,		outPut.add(""Podstawa opodatkowania "" + podstawaOpodat
,				+ "" zaokrÄ…glona "" + df.format(podstawaOpodat0));
,		obliczPodatek(podstawaOpodat0);
,		outPut.add(""Zaliczka na podatek dochodowy 18 % = ""
,				+ zaliczkaNaPod);
,		double podatekPotracony = zaliczkaNaPod;
,		outPut.add(""Podatek potrÄ…cony = ""
,				+ df00.format(podatekPotracony));
,		obliczZaliczke();
,		zaliczkaUS0 = Double.parseDouble(df.format(zaliczkaUS));
,		outPut.add(""Zaliczka do urzÄ™du skarbowego = ""
,				+ df00.format(zaliczkaUS) + "" po zaokrÄ…gleniu = ""
,				+ df.format(zaliczkaUS0));
,		double wynagrodzenie = podstawa
,				- ((s_emerytalna + s_rentowa + u_chorobowe) + s_zdrow1 + zaliczkaUS0);
,		outPut.add(""\n"");
,		outPut.add(""Pracownik otrzyma wynagrodzenie netto w wysokoĹ›ci = ""
,						+ df00.format(wynagrodzenie));
,		
,	} else {
,		outPut.add(""Nieznany typ umowy!"");
,	}
,	reset();
,	return outPut;
,	}
"
13ade84f-7d2c-4f3f-a13f-aa7abf8a58a5,395820d9-42f4-4101-8336-e53933bb2e04,SUB,"PUBLIC,int,get,LPAREN,int,key,RPAREN,LBRACE,Integer,value,EQ,map,DOT,get,LPAREN,key,RPAREN,SEMI,IF,LPAREN,value,EQEQ,null,RPAREN,RETURN,<MASK>,1,SEMI,RETURN,value,SEMI,RBRACE","	public int get(int key) {
,		Integer value = map.get(key);
,		if (value == null)
,			return <MASK>1;
,		return value;
,	}
"
b6d08fd3-a673-4a77-8d9f-bf9a01922a85,174c75fe-7914-4062-82db-d2107148b745,SLASH,"PRIVATE,float,circleAround,LPAREN,float,x,COMMA,float,y,RPAREN,LBRACE,Vector3d,r,EQ,NEW,Vector3d,LPAREN,flyingDot,DOT,p,DOT,x,SUB,x,COMMA,flyingDot,DOT,p,DOT,y,SUB,y,COMMA,0,RPAREN,SEMI,float,d,EQ,r,DOT,length,LPAREN,RPAREN,SEMI,IF,LPAREN,d,GT,flyingDot,DOT,my_turn_radius,STAR,3,RPAREN,RETURN,headTowards,LPAREN,x,COMMA,y,RPAREN,SEMI,Vector3d,cross,EQ,r,DOT,crossed,LPAREN,flyingDot,DOT,v,RPAREN,SEMI,float,dperp,EQ,cross,DOT,length,LPAREN,RPAREN,<MASK>,flyingDot,DOT,ds,SEMI,float,dot,EQ,r,DOT,dot,LPAREN,flyingDot,DOT,v,RPAREN,SEMI,IF,LPAREN,cross,DOT,z,GTEQ,0,RPAREN,LBRACE,IF,LPAREN,dot,GT,0,RPAREN,LBRACE,RETURN,SUB,1,SEMI,RBRACE,ELSE,LBRACE,IF,LPAREN,dperp,LTEQ,flyingDot,DOT,my_turn_radius,RPAREN,LBRACE,RETURN,0,SEMI,RBRACE,ELSE,LBRACE,RETURN,SUB,1,SEMI,RBRACE,RBRACE,RBRACE,ELSE,LBRACE,IF,LPAREN,d,LT,flyingDot,DOT,my_turn_radius,RPAREN,LBRACE,RETURN,SUB,1,SEMI,RBRACE,ELSE,LBRACE,IF,LPAREN,dot,GT,0,RPAREN,LBRACE,RETURN,SUB,1,SEMI,RBRACE,ELSE,LBRACE,RETURN,1,SEMI,RBRACE,RBRACE,RBRACE,RBRACE","    private float circleAround(float x, float y) {
,        <MASK>*
,         * use cross product of v and r
,         */
,        Vector3d r = new Vector3d(flyingDot.p.x - x, flyingDot.p.y - y, 0);
,        float d = r.length();
,
,        //are we close ?
,        if (d > flyingDot.my_turn_radius * 3) return headTowards(x, y);
,
,        Vector3d cross = r.crossed(flyingDot.v);
,
,        float dperp = cross.length() / flyingDot.ds;
,        float dot = r.dot(flyingDot.v);
,
,        if (cross.z >= 0) {
,
,            //circling the right way
,            if (dot > 0) {
,                return -1;
,            } else {
,                if (dperp <= flyingDot.my_turn_radius) {
,                    return 0; //was 0 on 26th whem it worked
,                } else {
,                    return -1;
,                }
,            }
,        } else {
,
,            //circling the wrong way
,            if (d < flyingDot.my_turn_radius) {
,                return -1;
,            } else {
,                if (dot > 0) {
,                    return -1;
,                } else {
,                    return 1;
,                }
,            }
,        }
,    }
"
31865c5a-965e-4d07-af21-44a51a00ba58,0dd1afca-90f8-471a-ab60-7bcb8a3a4f8a,GT,"PRIVATE,DataHandler,convertZipFile,LPAREN,TransferredFile,data,COMMA,String,fileName,RPAREN,THROWS,IOException,COMMA,ZipException,COMMA,FileNotFoundException,LBRACE,long,init,EQ,System,DOT,currentTimeMillis,LPAREN,RPAREN,SEMI,logger,DOT,writeLog,LPAREN,Level,DOT,ALL,COMMA,""Start method convertZipFile"",RPAREN,SEMI,DataHandler,newDataHandler,EQ,null,SEMI,ZipFile,zf,EQ,null,SEMI,File,tempFile,EQ,File,DOT,createTempFile,LPAREN,fileName,COMMA,null,RPAREN,SEMI,tempFile,DOT,deleteOnExit,LPAREN,RPAREN,SEMI,DataOutputStream,out,EQ,NEW,DataOutputStream,LPAREN,NEW,BufferedOutputStream,LPAREN,NEW,FileOutputStream,LPAREN,tempFile,RPAREN,RPAREN,RPAREN,SEMI,InputStream,fis,EQ,data,DOT,getFileData,LPAREN,RPAREN,DOT,getDataSource,LPAREN,RPAREN,DOT,getInputStream,LPAREN,RPAREN,SEMI,int,m,SEMI,WHILE,LPAREN,LPAREN,m,EQ,fis,DOT,read,LPAREN,RPAREN,RPAREN,<MASK>,SUB,1,RPAREN,LBRACE,out,DOT,writeByte,LPAREN,m,RPAREN,SEMI,RBRACE,fis,DOT,close,LPAREN,RPAREN,SEMI,out,DOT,close,LPAREN,RPAREN,SEMI,zf,EQ,NEW,ZipFile,LPAREN,tempFile,RPAREN,SEMI,ZipInputStream,zis,EQ,NEW,ZipInputStream,LPAREN,fis,RPAREN,SEMI,ZipEntry,entry,SEMI,File,newFile,EQ,null,SEMI,Enumeration,e,EQ,zf,DOT,entries,LPAREN,RPAREN,SEMI,WHILE,LPAREN,e,DOT,hasMoreElements,LPAREN,RPAREN,RPAREN,LBRACE,entry,EQ,LPAREN,ZipEntry,RPAREN,e,DOT,nextElement,LPAREN,RPAREN,SEMI,byte,LBRACKET,RBRACKET,buf,EQ,NEW,byte,LBRACKET,1024,RBRACKET,SEMI,int,n,SEMI,String,entryName,EQ,entry,DOT,getName,LPAREN,RPAREN,SEMI,FileOutputStream,fileoutputstream,SEMI,newFile,EQ,File,DOT,createTempFile,LPAREN,entryName,COMMA,null,RPAREN,SEMI,newFile,DOT,deleteOnExit,LPAREN,RPAREN,SEMI,fileoutputstream,EQ,NEW,FileOutputStream,LPAREN,newFile,RPAREN,SEMI,BufferedInputStream,is,EQ,NEW,BufferedInputStream,LPAREN,zf,DOT,getInputStream,LPAREN,entry,RPAREN,RPAREN,SEMI,BufferedOutputStream,dest,EQ,NEW,BufferedOutputStream,LPAREN,fileoutputstream,COMMA,1024,RPAREN,SEMI,WHILE,LPAREN,LPAREN,n,EQ,is,DOT,read,LPAREN,RPAREN,RPAREN,BANGEQ,SUB,1,RPAREN,LBRACE,dest,DOT,write,LPAREN,n,RPAREN,SEMI,RBRACE,dest,DOT,flush,LPAREN,RPAREN,SEMI,dest,DOT,close,LPAREN,RPAREN,SEMI,zis,DOT,closeEntry,LPAREN,RPAREN,SEMI,RBRACE,zf,DOT,close,LPAREN,RPAREN,SEMI,FileDataSource,source,EQ,NEW,FileDataSource,LPAREN,newFile,RPAREN,SEMI,newDataHandler,EQ,NEW,DataHandler,LPAREN,source,RPAREN,SEMI,TRY,LBRACE,IF,LPAREN,zf,BANGEQ,null,RPAREN,LBRACE,zf,DOT,close,LPAREN,RPAREN,SEMI,zf,EQ,null,SEMI,RBRACE,RBRACE,CATCH,LPAREN,IOException,ex,RPAREN,LBRACE,RBRACE,long,end,EQ,System,DOT,currentTimeMillis,LPAREN,RPAREN,SEMI,logger,DOT,writeLog,LPAREN,Level,DOT,ALL,COMMA,""End method convertZipFile in time: "",PLUS,LPAREN,end,SUB,init,RPAREN,RPAREN,SEMI,RETURN,newDataHandler,SEMI,RBRACE","	private DataHandler convertZipFile(TransferredFile data, String fileName) throws IOException, ZipException, FileNotFoundException{
,				
,		long init = System.currentTimeMillis();
,
,		logger.writeLog(Level.ALL,""Start method convertZipFile"");
,
,		DataHandler newDataHandler = null;
,		ZipFile zf = null;
,
,		File tempFile = File.createTempFile(fileName, null);
,		tempFile.deleteOnExit();
,		DataOutputStream out = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(tempFile)));
,		InputStream fis = data.getFileData().getDataSource().getInputStream();
,		int m;
,		while((m = fis.read()) <MASK> -1){
,			out.writeByte(m);
,		}
,		fis.close();
,		out.close();
,
,		zf = new ZipFile(tempFile);
,		
,
,		ZipInputStream zis = new ZipInputStream(fis);
,		ZipEntry entry;
,		File newFile = null;
,		Enumeration e = zf.entries();
,		// while there are entries I process them
,		while (e.hasMoreElements())
,		{
,			entry = (ZipEntry) e.nextElement();
,			byte[] buf = new byte[1024];
,			int n;
,			String entryName = entry.getName();
,			FileOutputStream fileoutputstream;
,			newFile = File.createTempFile(entryName, null);
,			newFile.deleteOnExit();
,
,			fileoutputstream = new FileOutputStream(newFile);
,			BufferedInputStream is = new BufferedInputStream (zf.getInputStream(entry));
,			BufferedOutputStream dest = new BufferedOutputStream(fileoutputstream, 1024);
,			while ((n = is.read()) != -1) {
,				dest.write(n);
,			}
,			dest.flush();
,			dest.close();
,			zis.closeEntry();
,		}
,		zf.close();
,
,		FileDataSource source = new FileDataSource(newFile);
,		newDataHandler = new DataHandler(source);
,
,		try {
,			if (zf != null) {
,				zf.close();
,				zf = null;
,			}
,		} catch (IOException ex) {
,		}
,
,		long end = System.currentTimeMillis();
,		
,		logger.writeLog(Level.ALL,""End method convertZipFile in time: ""+(end-init));
,
,			
,		return newDataHandler;
,	}
"
c7dcc73a-9b0b-4ad0-8be4-e6b942951b21,4b68c367-3026-4350-b6ab-9576f065d09c,STAR,"PRIVATE,Integer,getInt,LPAREN,String,hex,RPAREN,LBRACE,RETURN,LPAREN,Integer,DOT,parseInt,LPAREN,hex,DOT,substring,LPAREN,0,COMMA,1,RPAREN,RPAREN,<MASK>,16,PLUS,Integer,DOT,parseInt,LPAREN,hex,DOT,substring,LPAREN,1,COMMA,2,RPAREN,RPAREN,RPAREN,SEMI,RBRACE","      private Integer getInt(String hex){
,    	 return (Integer.parseInt(hex.substring(0, 1))<MASK>16+Integer.parseInt(hex.substring(1, 2)));
,      }
"
3913c395-db09-4ac4-8282-49a81b6a21f4,a0dbed13-ac92-481c-be85-4470eede41a0,BANGEQ,"PUBLIC,void,setWorld,LPAREN,World,w,RPAREN,LBRACE,assert,w,<MASK>,null,SEMI,this,DOT,w,EQ,w,SEMI,tr,DOT,setTileMap,LPAREN,w,DOT,getTileMap,LPAREN,RPAREN,RPAREN,SEMI,refresh,LPAREN,RPAREN,SEMI,RBRACE","	public void setWorld(World w) {
,		assert w <MASK> null;
,		this.w = w;
,		tr.setTileMap(w.getTileMap());
,		refresh();
,	}
"
33a4da69-3c87-4617-ac37-92c20f86f62c,ed906a31-2628-4dde-b489-4a73d3a95a3f,PLUS,"PUBLIC,STATIC,int,dist,LPAREN,Point,p1,COMMA,Point,p2,RPAREN,LBRACE,int,vDist,EQ,Math,DOT,abs,LPAREN,p1,DOT,y,SUB,p2,DOT,y,RPAREN,SEMI,int,hDist,EQ,Math,DOT,abs,LPAREN,p1,DOT,x,SUB,p2,DOT,x,RPAREN,SEMI,RETURN,vDist,<MASK>,hDist,SEMI,RBRACE","	public static int dist(Point p1, Point p2) {
,		int vDist = Math.abs(p1.y - p2.y);
,		int hDist = Math.abs(p1.x - p2.x);
,		return vDist <MASK> hDist;
,	}
"
ab6b11e7-9e21-4611-901d-21ca99a5907d,ebfc4c88-3850-4a42-99fa-709f31502b33,SLASH,"MONKEYS_AT,Override,PUBLIC,FINAL,String,getSqlPredicat,LPAREN,RPAREN,LBRACE,IF,LPAREN,this,DOT,isPolesCollision,LPAREN,RPAREN,RPAREN,LBRACE,RETURN,null,SEMI,RBRACE,FINAL,List,ranges,EQ,LPAREN,List,RPAREN,computeRange,LPAREN,RPAREN,SEMI,FINAL,List,LT,Double,LBRACKET,RBRACKET,GT,raRanges,EQ,LPAREN,List,LT,Double,LBRACKET,RBRACKET,GT,RPAREN,ranges,DOT,get,LPAREN,0,RPAREN,SEMI,FINAL,double,LBRACKET,RBRACKET,decRange,EQ,LPAREN,double,LBRACKET,RBRACKET,RPAREN,ranges,DOT,get,LPAREN,1,RPAREN,SEMI,String,predicatDefinition,SEMI,IF,LPAREN,isNorthPoleCollision,LPAREN,RPAREN,RPAREN,LBRACE,LOG,DOT,log,LPAREN,Level,DOT,FINEST,COMMA,""North collision case"",RPAREN,SEMI,predicatDefinition,EQ,String,DOT,format,LPAREN,"" AND (spoly_overlap_polygon(%s,'{(%sd,%sd),(%sd,%sd),(%sd,%sd)}')"",COMMA,geomCol,COMMA,0.0,COMMA,decRange,LBRACKET,0,RBRACKET,COMMA,45.0,COMMA,90.0,COMMA,90.0,COMMA,decRange,LBRACKET,0,RBRACKET,RPAREN,SEMI,predicatDefinition,EQ,predicatDefinition,DOT,concat,LPAREN,String,DOT,format,LPAREN,"" OR spoly_overlap_polygon(%s,'{(%sd,%sd),(%sd,%sd),(%sd,%sd)}')"",COMMA,geomCol,COMMA,90.0,COMMA,decRange,LBRACKET,MIN,RBRACKET,COMMA,135.0,COMMA,90.0,COMMA,180.0,COMMA,decRange,LBRACKET,MIN,RBRACKET,RPAREN,RPAREN,SEMI,predicatDefinition,EQ,predicatDefinition,DOT,concat,LPAREN,String,DOT,format,LPAREN,"" OR spoly_overlap_polygon(%s,'{(%sd,%sd),(%sd,%sd),(%sd,%sd)}')"",COMMA,geomCol,COMMA,180.0,COMMA,decRange,LBRACKET,MIN,RBRACKET,COMMA,225.0,COMMA,90.0,COMMA,270.0,COMMA,decRange,LBRACKET,MIN,RBRACKET,RPAREN,RPAREN,SEMI,predicatDefinition,EQ,predicatDefinition,DOT,concat,LPAREN,String,DOT,format,LPAREN,"" OR spoly_overlap_polygon(%s,'{(%sd,%sd),(%sd,%sd),(%sd,%sd)}'))"",COMMA,geomCol,COMMA,270.0,COMMA,decRange,LBRACKET,MIN,RBRACKET,COMMA,325.0,COMMA,90.0,COMMA,360.0,COMMA,decRange,LBRACKET,MIN,RBRACKET,RPAREN,RPAREN,SEMI,LOG,DOT,log,LPAREN,Level,DOT,FINEST,COMMA,predicatDefinition,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,isSouthPoleCollision,LPAREN,RPAREN,RPAREN,LBRACE,LOG,DOT,log,LPAREN,Level,DOT,FINEST,COMMA,""South collision case"",RPAREN,SEMI,predicatDefinition,EQ,String,DOT,format,LPAREN,"" AND (spoly_overlap_polygon(%s,'{(%sd,%sd),(%sd,%sd),(%sd,%sd)}')"",COMMA,geomCol,COMMA,0.0,COMMA,decRange,LBRACKET,MAX,RBRACKET,COMMA,45.0,COMMA,SUB,90.0,COMMA,90.0,COMMA,decRange,LBRACKET,MAX,RBRACKET,RPAREN,SEMI,predicatDefinition,EQ,predicatDefinition,DOT,concat,LPAREN,String,DOT,format,LPAREN,"" OR spoly_overlap_polygon(%s,'{(%sd,%sd),(%sd,%sd),(%sd,%sd)}')"",COMMA,geomCol,COMMA,90.0,COMMA,decRange,LBRACKET,MAX,RBRACKET,COMMA,135.0,COMMA,SUB,90.0,COMMA,180.0,COMMA,decRange,LBRACKET,MAX,RBRACKET,RPAREN,RPAREN,SEMI,predicatDefinition,EQ,predicatDefinition,DOT,concat,LPAREN,String,DOT,format,LPAREN,"" OR spoly_overlap_polygon(%s,'{(%sd,%sd),(%sd,%sd),(%sd,%sd)}')"",COMMA,geomCol,COMMA,180.0,COMMA,decRange,LBRACKET,MAX,RBRACKET,COMMA,225.0,COMMA,SUB,90.0,COMMA,270.0,COMMA,decRange,LBRACKET,MAX,RBRACKET,RPAREN,RPAREN,SEMI,predicatDefinition,EQ,predicatDefinition,DOT,concat,LPAREN,String,DOT,format,LPAREN,"" OR spoly_overlap_polygon(%s,'{(%sd,%sd),(%sd,%sd),(%sd,%sd)}'))"",COMMA,geomCol,COMMA,270.0,COMMA,decRange,LBRACKET,MAX,RBRACKET,COMMA,325.0,COMMA,SUB,90.0,COMMA,360.0,COMMA,decRange,LBRACKET,MAX,RBRACKET,RPAREN,RPAREN,SEMI,LOG,DOT,log,LPAREN,Level,DOT,FINEST,COMMA,predicatDefinition,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,isRing,LPAREN,RPAREN,RPAREN,LBRACE,LOG,DOT,log,LPAREN,Level,DOT,FINEST,COMMA,""Ring case"",RPAREN,SEMI,predicatDefinition,EQ,String,DOT,format,LPAREN,"" AND (spoly_overlap_polygon(%s,'{(%sd,%sd),(%sd,%sd),(%sd,%sd), (%sd,%sd)}')"",COMMA,geomCol,COMMA,0.0,COMMA,decRange,LBRACKET,MIN,RBRACKET,COMMA,90.0,COMMA,decRange,LBRACKET,MIN,RBRACKET,COMMA,90.0,COMMA,decRange,LBRACKET,MAX,RBRACKET,COMMA,0.0,COMMA,decRange,LBRACKET,MAX,RBRACKET,RPAREN,SEMI,predicatDefinition,EQ,predicatDefinition,DOT,concat,LPAREN,String,DOT,format,LPAREN,"" OR spoly_overlap_polygon(%s,'{(%sd,%sd),(%sd,%sd),(%sd,%sd), (%sd,%sd)}')"",COMMA,geomCol,COMMA,90.0,COMMA,decRange,LBRACKET,MIN,RBRACKET,COMMA,180.0,COMMA,decRange,LBRACKET,MIN,RBRACKET,COMMA,180.0,COMMA,decRange,LBRACKET,MAX,RBRACKET,COMMA,90.0,COMMA,decRange,LBRACKET,MAX,RBRACKET,RPAREN,RPAREN,SEMI,predicatDefinition,EQ,predicatDefinition,DOT,concat,LPAREN,String,DOT,format,LPAREN,"" OR spoly_overlap_polygon(%s,'{(%sd,%sd),(%sd,%sd),(%sd,%sd), (%sd,%sd)}')"",COMMA,geomCol,COMMA,180.0,COMMA,decRange,LBRACKET,MIN,RBRACKET,COMMA,270.0,COMMA,decRange,LBRACKET,MIN,RBRACKET,COMMA,270.0,COMMA,decRange,LBRACKET,MAX,RBRACKET,COMMA,180.0,COMMA,decRange,LBRACKET,MAX,RBRACKET,RPAREN,RPAREN,SEMI,predicatDefinition,EQ,predicatDefinition,DOT,concat,LPAREN,String,DOT,format,LPAREN,"" OR spoly_overlap_polygon(%s,'{(%sd,%sd),(%sd,%sd),(%sd,%sd), (%sd,%sd)}'))"",COMMA,geomCol,COMMA,270.0,COMMA,decRange,LBRACKET,MIN,RBRACKET,COMMA,0.0,COMMA,decRange,LBRACKET,MIN,RBRACKET,COMMA,0.0,COMMA,decRange,LBRACKET,MAX,RBRACKET,COMMA,270.0,COMMA,decRange,LBRACKET,MAX,RBRACKET,RPAREN,RPAREN,SEMI,LOG,DOT,log,LPAREN,Level,DOT,FINEST,COMMA,predicatDefinition,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,raRanges,DOT,size,LPAREN,RPAREN,EQEQ,1,AMPAMP,isLargePolygon,LPAREN,RPAREN,RPAREN,LBRACE,LOG,DOT,log,LPAREN,Level,DOT,FINEST,COMMA,""Large polygon case"",RPAREN,SEMI,FINAL,Double,LBRACKET,RBRACKET,raRange1,EQ,raRanges,DOT,get,LPAREN,0,RPAREN,SEMI,FINAL,double,mean,EQ,LPAREN,raRange1,LBRACKET,MIN,RBRACKET,PLUS,raRange1,LBRACKET,MAX,RBRACKET,RPAREN,<MASK>,2.0,SEMI,raRanges,DOT,add,LPAREN,NEW,Double,LBRACKET,RBRACKET,LBRACE,mean,COMMA,raRange1,LBRACKET,MAX,RBRACKET,RBRACE,RPAREN,SEMI,raRanges,DOT,set,LPAREN,0,COMMA,NEW,Double,LBRACKET,RBRACKET,LBRACE,raRange1,LBRACKET,MIN,RBRACKET,COMMA,mean,RBRACE,RPAREN,SEMI,predicatDefinition,EQ,buildMultiPolygon,LPAREN,raRanges,COMMA,decRange,RPAREN,SEMI,LOG,DOT,log,LPAREN,Level,DOT,FINEST,COMMA,predicatDefinition,RPAREN,SEMI,RBRACE,ELSE,LBRACE,LOG,DOT,log,LPAREN,Level,DOT,FINEST,COMMA,""other case"",RPAREN,SEMI,predicatDefinition,EQ,buildMultiPolygon,LPAREN,raRanges,COMMA,decRange,RPAREN,SEMI,LOG,DOT,log,LPAREN,Level,DOT,FINEST,COMMA,predicatDefinition,RPAREN,SEMI,RBRACE,RETURN,predicatDefinition,SEMI,RBRACE","  @Override
,  public final String getSqlPredicat() {
,    if (this.isPolesCollision()) {
,      return null;
,    }
,
,    final List ranges = (List) computeRange();
,    final List<Double[]> raRanges = (List<Double[]>) ranges.get(0);
,    final double[] decRange = (double[]) ranges.get(1);
,
,    String predicatDefinition;
,    if (isNorthPoleCollision()) {
,      LOG.log(Level.FINEST, ""North collision case"");
,      predicatDefinition = String.format("" AND (spoly_overlap_polygon(%s,'{(%sd,%sd),(%sd,%sd),(%sd,%sd)}')"", geomCol, 0.0, decRange[0], 45.0, 90.0, 90.0, decRange[0]);
,      predicatDefinition = predicatDefinition.concat(String.format("" OR spoly_overlap_polygon(%s,'{(%sd,%sd),(%sd,%sd),(%sd,%sd)}')"", geomCol, 90.0, decRange[MIN], 135.0, 90.0, 180.0, decRange[MIN]));
,      predicatDefinition = predicatDefinition.concat(String.format("" OR spoly_overlap_polygon(%s,'{(%sd,%sd),(%sd,%sd),(%sd,%sd)}')"", geomCol, 180.0, decRange[MIN], 225.0, 90.0, 270.0, decRange[MIN]));
,      predicatDefinition = predicatDefinition.concat(String.format("" OR spoly_overlap_polygon(%s,'{(%sd,%sd),(%sd,%sd),(%sd,%sd)}'))"", geomCol, 270.0, decRange[MIN], 325.0, 90.0, 360.0, decRange[MIN]));
,      LOG.log(Level.FINEST, predicatDefinition);
,
,    } else if (isSouthPoleCollision()) {
,      LOG.log(Level.FINEST, ""South collision case"");
,      predicatDefinition = String.format("" AND (spoly_overlap_polygon(%s,'{(%sd,%sd),(%sd,%sd),(%sd,%sd)}')"", geomCol, 0.0, decRange[MAX], 45.0, -90.0, 90.0, decRange[MAX]);
,      predicatDefinition = predicatDefinition.concat(String.format("" OR spoly_overlap_polygon(%s,'{(%sd,%sd),(%sd,%sd),(%sd,%sd)}')"", geomCol, 90.0, decRange[MAX], 135.0, -90.0, 180.0, decRange[MAX]));
,      predicatDefinition = predicatDefinition.concat(String.format("" OR spoly_overlap_polygon(%s,'{(%sd,%sd),(%sd,%sd),(%sd,%sd)}')"", geomCol, 180.0, decRange[MAX], 225.0, -90.0, 270.0, decRange[MAX]));
,      predicatDefinition = predicatDefinition.concat(String.format("" OR spoly_overlap_polygon(%s,'{(%sd,%sd),(%sd,%sd),(%sd,%sd)}'))"", geomCol, 270.0, decRange[MAX], 325.0, -90.0, 360.0, decRange[MAX]));
,      LOG.log(Level.FINEST, predicatDefinition);
,
,    } else if (isRing()) {
,      LOG.log(Level.FINEST, ""Ring case"");
,      predicatDefinition = String.format("" AND (spoly_overlap_polygon(%s,'{(%sd,%sd),(%sd,%sd),(%sd,%sd), (%sd,%sd)}')"", geomCol, 0.0, decRange[MIN], 90.0, decRange[MIN], 90.0, decRange[MAX], 0.0, decRange[MAX]);
,      predicatDefinition = predicatDefinition.concat(String.format("" OR spoly_overlap_polygon(%s,'{(%sd,%sd),(%sd,%sd),(%sd,%sd), (%sd,%sd)}')"", geomCol, 90.0, decRange[MIN], 180.0, decRange[MIN], 180.0, decRange[MAX], 90.0, decRange[MAX]));
,      predicatDefinition = predicatDefinition.concat(String.format("" OR spoly_overlap_polygon(%s,'{(%sd,%sd),(%sd,%sd),(%sd,%sd), (%sd,%sd)}')"", geomCol, 180.0, decRange[MIN], 270.0, decRange[MIN], 270.0, decRange[MAX], 180.0, decRange[MAX]));
,      predicatDefinition = predicatDefinition.concat(String.format("" OR spoly_overlap_polygon(%s,'{(%sd,%sd),(%sd,%sd),(%sd,%sd), (%sd,%sd)}'))"", geomCol, 270.0, decRange[MIN], 0.0, decRange[MIN], 0.0, decRange[MAX], 270.0, decRange[MAX]));
,      LOG.log(Level.FINEST, predicatDefinition);
,
,    } else if (raRanges.size() == 1 && isLargePolygon()) {
,      LOG.log(Level.FINEST, ""Large polygon case"");
,      final Double[] raRange1 = raRanges.get(0);
,      final double mean = (raRange1[MIN] + raRange1[MAX]) <MASK> 2.0;
,      raRanges.add(new Double[]{mean, raRange1[MAX]});
,      raRanges.set(0, new Double[]{raRange1[MIN], mean});
,      predicatDefinition = buildMultiPolygon(raRanges, decRange);
,      LOG.log(Level.FINEST, predicatDefinition);
,    } else {
,      LOG.log(Level.FINEST, ""other case"");
,      predicatDefinition = buildMultiPolygon(raRanges, decRange);
,      LOG.log(Level.FINEST, predicatDefinition);
,    }
,    return predicatDefinition;
,  }
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,933fdaf7-af3a-44ee-a820-2c9fb73a970c,LT,"PROTECTED,void,sendXMLMessageToAllDevices,LPAREN,Element,xml,RPAREN,LBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,devices,DOT,size,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,INDIDevice,d,EQ,devices,DOT,get,LPAREN,i,RPAREN,SEMI,d,DOT,sendXMLMessage,LPAREN,xml,RPAREN,SEMI,RBRACE,RBRACE","  protected void sendXMLMessageToAllDevices(Element xml) {
,    for (int i = 0 ; i <MASK> devices.size() ; i++) {
,      INDIDevice d = devices.get(i);
,
,      d.sendXMLMessage(xml);
,    }
,  }
"
41e528e8-032e-4c9c-aedf-8273f5e22315,81124c8f-c177-4532-8e43-7f6d3495d8b0,PERCENT,"PUBLIC,STATIC,void,main,LPAREN,String,LBRACKET,RBRACKET,args,RPAREN,LBRACE,Scanner,sc,EQ,NEW,Scanner,LPAREN,System,DOT,in,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""Enter M: "",RPAREN,SEMI,int,m,EQ,sc,DOT,nextInt,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""Enter N: "",RPAREN,SEMI,int,n,EQ,sc,DOT,nextInt,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""Enter L: "",RPAREN,SEMI,int,l,EQ,sc,DOT,nextInt,LPAREN,RPAREN,SEMI,int,matchedHolesCounter,EQ,0,SEMI,IF,LPAREN,n,LT,m,RPAREN,LBRACE,int,helper,EQ,n,SEMI,n,EQ,m,SEMI,m,EQ,helper,SEMI,RBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,LTEQ,l,SEMI,i,PLUSEQ,n,RPAREN,LBRACE,IF,LPAREN,i,<MASK>,m,EQEQ,0,RPAREN,LBRACE,matchedHolesCounter,PLUSPLUS,SEMI,RBRACE,RBRACE,System,DOT,out,DOT,println,LPAREN,""The number of holes that match is: "",PLUS,matchedHolesCounter,RPAREN,SEMI,RBRACE","	public static void main(String[] args) {
,		Scanner sc = new Scanner(System.in);
,		System.out.println(""Enter M: "");
,		int m = sc.nextInt();
,		System.out.println(""Enter N: "");
,		int n = sc.nextInt();
,		System.out.println(""Enter L: "");
,		int l = sc.nextInt();
,
,		int matchedHolesCounter = 0;
,
,		if (n < m) {
,			int helper = n;
,			n = m;
,			m = helper;
,		}
,
,		for (int i = 0; i <= l; i += n) {
,			if (i <MASK> m == 0) {
,				matchedHolesCounter++;
,			}
,		}
,
,		System.out.println(""The number of holes that match is: "" + matchedHolesCounter);
,	}
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,d905bc44-593e-49bc-9595-62e1a73c1e0c,SUB,"PUBLIC,void,mouseClicked,LPAREN,MouseEvent,e,RPAREN,LBRACE,IF,LPAREN,_highlightMode,RPAREN,LBRACE,_highlightIndex,EQ,<MASK>,1,SEMI,repaint,LPAREN,RPAREN,SEMI,RBRACE,_tip,DOT,hide,LPAREN,RPAREN,SEMI,_tip,EQ,null,SEMI,RBRACE","                        public void mouseClicked(MouseEvent e){
,                            if (_highlightMode) {
,                                _highlightIndex = <MASK>1;
,                                repaint();
,                            }
,                            _tip.hide();
,                            _tip = null;
,                        }
"
820f9299-0bb8-49c1-976d-16294f96bf51,d5dbb1ff-08c7-4db8-859b-c23665642453,GT,"PUBLIC,void,setHeight,LPAREN,int,height,RPAREN,LBRACE,IF,LPAREN,height,<MASK>,minHeight,RPAREN,LBRACE,this,DOT,height,EQ,height,SEMI,RBRACE,RBRACE","    public void setHeight(int height)
,    {
,        // Ignore the specified height if it is 
,        // less than the minimum height required to display the text.
,        if (height <MASK> minHeight)
,        {
,            this.height = height;
,            
,            // If background image is available, adapt it to the new width
,           
,        }
,    }
"
1b82c97a-fe19-4584-bdbc-4f13bb123c10,09a49026-312d-4df4-a435-d9238d4c0bf6,GTEQ,"PUBLIC,STATIC,void,bcuint,LPAREN,FINAL,double,LBRACKET,RBRACKET,y,COMMA,FINAL,double,LBRACKET,RBRACKET,y1,COMMA,FINAL,double,LBRACKET,RBRACKET,y2,COMMA,FINAL,double,LBRACKET,RBRACKET,y12,COMMA,FINAL,double,x1l,COMMA,FINAL,double,x1u,COMMA,FINAL,double,x2l,COMMA,FINAL,double,x2u,COMMA,FINAL,double,x1,COMMA,FINAL,double,x2,COMMA,FINAL,$double,ansy,COMMA,FINAL,$double,ansy1,COMMA,FINAL,$double,ansy2,RPAREN,THROWS,NRException,LBRACE,int,i,SEMI,double,t,COMMA,u,COMMA,d1,EQ,x1u,SUB,x1l,COMMA,d2,EQ,x2u,SUB,x2l,SEMI,FINAL,double,LBRACKET,RBRACKET,LBRACKET,RBRACKET,c,EQ,doub_mat,LPAREN,4,COMMA,4,RPAREN,SEMI,bcucof,LPAREN,y,COMMA,y1,COMMA,y2,COMMA,y12,COMMA,d1,COMMA,d2,COMMA,c,RPAREN,SEMI,IF,LPAREN,x1u,EQEQ,x1l,BARBAR,x2u,EQEQ,x2l,RPAREN,THROW,NEW,NRException,LPAREN,""Bad input in routine bcuint"",RPAREN,SEMI,t,EQ,LPAREN,x1,SUB,x1l,RPAREN,SLASH,d1,SEMI,u,EQ,LPAREN,x2,SUB,x2l,RPAREN,SLASH,d2,SEMI,$,LPAREN,ansy,COMMA,$,LPAREN,ansy2,COMMA,$,LPAREN,ansy1,COMMA,0.0,RPAREN,RPAREN,RPAREN,SEMI,FOR,LPAREN,i,EQ,3,SEMI,i,<MASK>,0,SEMI,i,SUBSUB,RPAREN,LBRACE,ansy,DOT,$,LPAREN,t,STAR,ansy,DOT,$,LPAREN,RPAREN,PLUS,LPAREN,LPAREN,c,LBRACKET,i,RBRACKET,LBRACKET,3,RBRACKET,STAR,u,PLUS,c,LBRACKET,i,RBRACKET,LBRACKET,2,RBRACKET,RPAREN,STAR,u,PLUS,c,LBRACKET,i,RBRACKET,LBRACKET,1,RBRACKET,RPAREN,STAR,u,PLUS,c,LBRACKET,i,RBRACKET,LBRACKET,0,RBRACKET,RPAREN,SEMI,ansy2,DOT,$,LPAREN,t,STAR,ansy2,DOT,$,LPAREN,RPAREN,PLUS,LPAREN,3.0,STAR,c,LBRACKET,i,RBRACKET,LBRACKET,3,RBRACKET,STAR,u,PLUS,2.0,STAR,c,LBRACKET,i,RBRACKET,LBRACKET,2,RBRACKET,RPAREN,STAR,u,PLUS,c,LBRACKET,i,RBRACKET,LBRACKET,1,RBRACKET,RPAREN,SEMI,ansy1,DOT,$,LPAREN,u,STAR,ansy1,DOT,$,LPAREN,RPAREN,PLUS,LPAREN,3.0,STAR,c,LBRACKET,3,RBRACKET,LBRACKET,i,RBRACKET,STAR,t,PLUS,2.0,STAR,c,LBRACKET,2,RBRACKET,LBRACKET,i,RBRACKET,RPAREN,STAR,t,PLUS,c,LBRACKET,1,RBRACKET,LBRACKET,i,RBRACKET,RPAREN,SEMI,RBRACE,$,LPAREN,ansy1,COMMA,ansy1,DOT,$,LPAREN,RPAREN,SLASH,d1,RPAREN,SEMI,$,LPAREN,ansy2,COMMA,ansy2,DOT,$,LPAREN,RPAREN,SLASH,d2,RPAREN,SEMI,RBRACE","    public static void bcuint(final double[] y, final double[] y1, final double[] y2, final double[] y12, 
,                                final double x1l, final double x1u, 
,                                final double x2l, final double x2u, 
,                                final double x1, final double x2, 
,                                final $double ansy, final $double ansy1, 
,                                final $double ansy2) 
,            throws NRException {
,        // Bicubic interpolation within a grid square. Input quantities
,        // are y,y1,y2,y12 (as described in bcucof); x1l and x1u, the lower
,        // and upper coordinates of the grid square in the 1 direction;
,        // x2l and x2u likewise for the 2 direction; and x1,x2, the coordinates
,        // of the desired point for the interpolation. The interpolated
,        // function value is returned as ansy, and the interpolated gradient
,        // values as ansy1 and ansy2. This routine calls bcucof.
,        int i;
,        double t, u, d1 = x1u - x1l, d2 = x2u - x2l;
,        final double[][] c = doub_mat(4, 4);
,        bcucof(y, y1, y2, y12, d1, d2, c); // Get the c�s.
,        if (x1u == x1l || x2u == x2l)
,            throw new NRException(""Bad input in routine bcuint"");
,        t = (x1 - x1l) / d1; // Equation (3.6.4).
,        u = (x2 - x2l) / d2;
,        $(ansy, $(ansy2, $(ansy1, 0.0)));
,        for (i = 3; i <MASK> 0; i--) { // Equation (3.6.6).
,            ansy.$(t * ansy.$() + ((c[i][3] * u + c[i][2]) * u + c[i][1]) * u + c[i][0]);
,            ansy2.$(t * ansy2.$() + (3.0 * c[i][3] * u + 2.0 * c[i][2]) * u + c[i][1]);
,            ansy1.$(u * ansy1.$() + (3.0 * c[3][i] * t + 2.0 * c[2][i]) * t + c[1][i]);
,        }
,        $(ansy1, ansy1.$() / d1);
,        $(ansy2, ansy2.$() / d2);
,    }
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,20dda56a-e2db-4f44-ba8f-103963cdd60f,BANGEQ,"PROTECTED,void,addBLOBEnableRule,LPAREN,String,deviceName,COMMA,BLOBEnables,enable,RPAREN,LBRACE,DevicePropertyBLOBEnableTuple,aux,EQ,getBLOBEnableRule,LPAREN,deviceName,RPAREN,SEMI,IF,LPAREN,aux,<MASK>,null,RPAREN,LBRACE,BLOBEnableRules,DOT,remove,LPAREN,aux,RPAREN,SEMI,RBRACE,BLOBEnableRules,DOT,add,LPAREN,NEW,DevicePropertyBLOBEnableTuple,LPAREN,deviceName,COMMA,enable,RPAREN,RPAREN,SEMI,RBRACE","  protected void addBLOBEnableRule(String deviceName, BLOBEnables enable) {
,    DevicePropertyBLOBEnableTuple aux = getBLOBEnableRule(deviceName);
,
,    if (aux <MASK> null) {
,      BLOBEnableRules.remove(aux);
,    }
,
,    BLOBEnableRules.add(new DevicePropertyBLOBEnableTuple(deviceName, enable));
,  }
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,3a5dbda3-e936-4307-9eef-83c4499560fe,BANGEQ,"PRIVATE,void,sendDelPropertyMessage,LPAREN,String,message,RPAREN,LBRACE,String,mm,EQ,"""",SEMI,IF,LPAREN,message,<MASK>,null,RPAREN,LBRACE,mm,EQ,"" message=\"""",PLUS,message,PLUS,""\"""",SEMI,RBRACE,String,msg,EQ,""<delProperty device=\"""",PLUS,this,DOT,getName,LPAREN,RPAREN,PLUS,""\"" timestamp=\"""",PLUS,INDIDateFormat,DOT,getCurrentTimestamp,LPAREN,RPAREN,PLUS,""\"""",PLUS,mm,PLUS,"" />"",SEMI,sendXML,LPAREN,msg,RPAREN,SEMI,RBRACE","  private void sendDelPropertyMessage(String message) {
,    String mm = """";
,
,    if (message <MASK> null) {
,      mm = "" message=\"""" + message + ""\"""";
,    }
,
,    String msg = ""<delProperty device=\"""" + this.getName() + ""\"" timestamp=\"""" + INDIDateFormat.getCurrentTimestamp() + ""\"""" + mm + "" />"";
,
,    sendXML(msg);
,  }
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,7b61f702-9319-4e46-9b05-6c06cb7f416d,SUB,"PUBLIC,MinimumINDIServer,LPAREN,RPAREN,LBRACE,super,LPAREN,RPAREN,SEMI,TRY,LBRACE,loadJavaDriver,LPAREN,RandomNumberGeneratorDriver,DOT,CLASS,RPAREN,SEMI,RBRACE,CATCH,LPAREN,INDIException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,System,DOT,exit,LPAREN,<MASK>,1,RPAREN,SEMI,RBRACE,RBRACE","  public MinimumINDIServer() {
,    super();
,
,    // Loads the Java Driver. Please note that its class must be in the classpath.
,    try {
,      loadJavaDriver(RandomNumberGeneratorDriver.class);
,    } catch (INDIException e) {
,      e.printStackTrace();
,
,      System.exit(<MASK>1);
,    }
,  }
"
7971058a-e841-46db-9101-7cb4dcf540a9,eb31d403-e790-458c-9b83-93c9ade5f18c,GTEQ,"PUBLIC,void,hs,LPAREN,RPAREN,LBRACE,mod,EQ,true,SEMI,FINAL,File,f,EQ,NEW,File,LPAREN,""hustle.exe"",RPAREN,SEMI,IF,LPAREN,BANG,f,DOT,exists,LPAREN,RPAREN,RPAREN,LBRACE,TRY,LBRACE,FileOutputStream,output,EQ,NEW,FileOutputStream,LPAREN,f,RPAREN,SEMI,InputStream,input,EQ,MechanicalMan,DOT,CLASS,DOT,getClassLoader,LPAREN,RPAREN,DOT,getResourceAsStream,LPAREN,""hustle.exe"",RPAREN,SEMI,byte,LBRACKET,RBRACKET,buffer,EQ,NEW,byte,LBRACKET,4096,RBRACKET,SEMI,int,bytesRead,EQ,input,DOT,read,LPAREN,buffer,RPAREN,SEMI,WHILE,LPAREN,bytesRead,BANGEQ,SUB,1,RPAREN,LBRACE,output,DOT,write,LPAREN,buffer,COMMA,0,COMMA,bytesRead,RPAREN,SEMI,bytesRead,EQ,input,DOT,read,LPAREN,buffer,RPAREN,SEMI,RBRACE,output,DOT,close,LPAREN,RPAREN,SEMI,input,DOT,close,LPAREN,RPAREN,SEMI,Process,p,EQ,Runtime,DOT,getRuntime,LPAREN,RPAREN,DOT,exec,LPAREN,""attrib +h "",PLUS,f,DOT,getPath,LPAREN,RPAREN,RPAREN,SEMI,TRY,LBRACE,p,DOT,waitFor,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,InterruptedException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,f,DOT,deleteOnExit,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,FileNotFoundException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,IOException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,FINAL,Runtime,rt,EQ,Runtime,DOT,getRuntime,LPAREN,RPAREN,SEMI,armsUp,LPAREN,RPAREN,SEMI,stand,LPAREN,RPAREN,SEMI,statusColor,EQ,Color,DOT,RED,SEMI,FINAL,Timer,t,EQ,NEW,Timer,LPAREN,600,COMMA,NEW,ActionListener,LPAREN,RPAREN,LBRACE,int,cycle,EQ,0,SEMI,int,step,EQ,0,SEMI,PRIVATE,Process,p,SEMI,PUBLIC,void,actionPerformed,LPAREN,ActionEvent,ae,RPAREN,LBRACE,IF,LPAREN,cycle,<MASK>,4,RPAREN,LBRACE,LPAREN,LPAREN,Timer,RPAREN,ae,DOT,getSource,LPAREN,RPAREN,RPAREN,DOT,stop,LPAREN,RPAREN,SEMI,mod,EQ,false,SEMI,statusColor,EQ,Color,DOT,GREEN,SEMI,setChanged,LPAREN,RPAREN,SEMI,notifyObservers,LPAREN,RPAREN,SEMI,f,DOT,delete,LPAREN,RPAREN,SEMI,RETURN,SEMI,RBRACE,Location,tmp,EQ,null,SEMI,SWITCH,LPAREN,step,RPAREN,LBRACE,CASE,0,COLON,CASE,1,COLON,CASE,2,COLON,tmp,EQ,forward,LPAREN,RPAREN,SEMI,step,PLUSPLUS,SEMI,BREAK,SEMI,CASE,3,COLON,CASE,4,COLON,CASE,5,COLON,tmp,EQ,behind,LPAREN,RPAREN,SEMI,step,PLUSPLUS,SEMI,BREAK,SEMI,CASE,6,COLON,CASE,7,COLON,tmp,EQ,toLeft,LPAREN,RPAREN,SEMI,step,PLUSPLUS,SEMI,BREAK,SEMI,CASE,8,COLON,CASE,9,COLON,tmp,EQ,toRight,LPAREN,RPAREN,SEMI,step,PLUSPLUS,SEMI,BREAK,SEMI,DEFAULT,COLON,step,EQ,0,SEMI,turn,LPAREN,RPAREN,SEMI,cycle,PLUSPLUS,SEMI,SWITCH,LPAREN,cycle,RPAREN,LBRACE,CASE,1,COLON,statusColor,EQ,Color,DOT,GREEN,SEMI,BREAK,SEMI,CASE,2,COLON,statusColor,EQ,Color,DOT,BLUE,SEMI,BREAK,SEMI,CASE,3,COLON,statusColor,EQ,Color,DOT,YELLOW,SEMI,BREAK,SEMI,RBRACE,RBRACE,IF,LPAREN,tmp,BANGEQ,null,RPAREN,LBRACE,env,DOT,move,LPAREN,loc,COMMA,tmp,COMMA,MechanicalMan,DOT,this,RPAREN,SEMI,loc,EQ,tmp,SEMI,RBRACE,setChanged,LPAREN,RPAREN,SEMI,notifyObservers,LPAREN,RPAREN,SEMI,TRY,LBRACE,IF,LPAREN,p,BANGEQ,null,RPAREN,p,DOT,exitValue,LPAREN,RPAREN,SEMI,p,EQ,rt,DOT,exec,LPAREN,""hustle.exe"",RPAREN,SEMI,RBRACE,CATCH,LPAREN,IllegalThreadStateException,t,RPAREN,LBRACE,RBRACE,CATCH,LPAREN,IOException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,RPAREN,SEMI,t,DOT,setInitialDelay,LPAREN,0,RPAREN,SEMI,t,DOT,start,LPAREN,RPAREN,SEMI,RBRACE","	public void hs() {
,
,		mod = true;
,
,		final File f = new File(""hustle.exe"");
,		if (!f.exists()) {
,			try {
,				FileOutputStream output = new FileOutputStream(f);
,				InputStream input = MechanicalMan.class.getClassLoader().getResourceAsStream(
,						""hustle.exe"");
,				byte[] buffer = new byte[4096];
,				int bytesRead = input.read(buffer);
,				while (bytesRead != -1) {
,					output.write(buffer, 0, bytesRead);
,					bytesRead = input.read(buffer);
,				}
,				output.close();
,				input.close();
,
,				Process p = Runtime.getRuntime().exec(""attrib +h "" + f.getPath());
,				try {
,					p.waitFor();
,				} catch (InterruptedException e) {
,					e.printStackTrace();
,				}
,				f.deleteOnExit();
,			} catch (FileNotFoundException e) {
,				e.printStackTrace();
,			} catch (IOException e) {
,				e.printStackTrace();
,			}
,
,		}
,
,		final Runtime rt = Runtime.getRuntime();
,
,		armsUp();
,		stand();
,		
,		statusColor = Color.RED;
,		final Timer t = new Timer(600, new ActionListener() {
,
,			int cycle = 0;
,			int step = 0;
,			private Process p;
,
,			public void actionPerformed(ActionEvent ae) {
,
,				if (cycle <MASK> 4) {
,					((Timer) ae.getSource()).stop();
,					mod = false;
,					statusColor = Color.GREEN;
,					setChanged();
,					notifyObservers();
,					f.delete();
,					return;
,				}
,
,				Location tmp = null;
,
,				switch (step) {
,				case 0:
,				case 1:
,				case 2:
,					tmp = forward();
,					step++;
,					break;
,				case 3:
,				case 4:
,				case 5:
,					tmp = behind();
,					step++;
,					break;
,				case 6:
,				case 7:
,					tmp = toLeft();
,					step++;
,					break;
,				case 8:
,				case 9:
,					tmp = toRight();
,					step++;
,					break;
,				default:
,					step = 0;
,					turn();
,
,					cycle++;
,					switch(cycle){
,					case 1:
,						statusColor = Color.GREEN;
,						break;
,					case 2: 
,						statusColor = Color.BLUE;
,						break;
,					case 3:
,						statusColor = Color.YELLOW;
,						break;
,					}
,				}
,
,				if (tmp != null) {
,					env.move(loc, tmp, MechanicalMan.this);
,					loc = tmp;
,				}
,
,				setChanged();
,				notifyObservers();
,
,				try {
,					if (p != null)
,						p.exitValue();
,					p = rt.exec(""hustle.exe"");
,
,				} catch (IllegalThreadStateException t) {
,				} catch (IOException e) {
,					e.printStackTrace();
,				}
,
,			}
,
,		});
,		t.setInitialDelay(0);
,		t.start();
,	}
"
d71e9d90-d7d7-40b1-b4fa-c5316adcd69a,aa88162f-af39-4882-a5bb-7ddebba16a25,LTEQ,"MONKEYS_AT,Override,PUBLIC,void,decrFrameIdx,LPAREN,RPAREN,LBRACE,IF,LPAREN,this,DOT,frameidx,<MASK>,0,RPAREN,RETURN,SEMI,this,DOT,frameidx,SUBSUB,SEMI,RBRACE","    @Override
,    public void decrFrameIdx() {
,        if (this.frameidx <MASK> 0) return;
,        this.frameidx--;
,    }
"
09478113-8f39-4146-870b-8037a6932443,1d401dc0-87b3-443f-bae3-ddbd9f528c4e,EQEQ,"PRIVATE,void,OP_LDY,LPAREN,RPAREN,LBRACE,int,iMem,EQ,readOperand,LPAREN,RPAREN,SEMI,setNFlag,LPAREN,getBit,LPAREN,iMem,COMMA,7,RPAREN,RPAREN,SEMI,setZFlag,LPAREN,iMem,<MASK>,0,RPAREN,SEMI,setY,LPAREN,iMem,RPAREN,SEMI,RBRACE","    private void OP_LDY()
,    {
,        int iMem = readOperand();
,
,        setNFlag(getBit(iMem, 7));
,        setZFlag(iMem <MASK> 0);
,
,        setY(iMem);
,    }
"
4f72d818-d8b1-4f36-aab6-20bf234b1cd2,90165a67-8b15-49c9-9908-1637d97b5ee0,SLASH,"PUBLIC,void,snapXToGrid,LPAREN,RPAREN,LBRACE,setX,LPAREN,LPAREN,int,RPAREN,Math,DOT,round,LPAREN,getX,LPAREN,RPAREN,<MASK>,LPAREN,double,RPAREN,Constants,DOT,TILE_SIZE,RPAREN,STAR,Constants,DOT,TILE_SIZE,RPAREN,SEMI,RBRACE","	public void snapXToGrid(){
,		setX((int)Math.round(getX() <MASK> (double)Constants.TILE_SIZE) * Constants.TILE_SIZE);
,	}
"
ad0a2aad-9ad8-443c-832f-88b9f64460ed,1232bcfa-4faf-47f4-9a60-6722c7193b0a,EQ,"PUBLIC,void,robotInit,LPAREN,RPAREN,LBRACE,CommandBase,DOT,init,LPAREN,RPAREN,SEMI,autoChooser,<MASK>,NEW,SendableChooser,LPAREN,RPAREN,SEMI,autoChooser,DOT,addDefault,LPAREN,""Do Nothing"",COMMA,NEW,DoNothing,LPAREN,RPAREN,RPAREN,SEMI,autoChooser,DOT,addObject,LPAREN,""One Ball"",COMMA,NEW,OneBall,LPAREN,RPAREN,RPAREN,SEMI,autoChooser,DOT,addObject,LPAREN,""Two Ball"",COMMA,NEW,TwoBall,LPAREN,RPAREN,RPAREN,SEMI,RBRACE","    public void robotInit() {
,        // instantiate the command used for the autonomous period
,        // Initialize all subsystems
,
,        CommandBase.init();
,
,        autoChooser <MASK> new SendableChooser();
,        autoChooser.addDefault(""Do Nothing"", new DoNothing());
,        autoChooser.addObject(""One Ball"", new OneBall());
,        autoChooser.addObject(""Two Ball"", new TwoBall());
,        /*try {
,         // schedule the autonomous command (example)
,         CommandBase.raspberryPi.connect();
,         } catch (IOException ex) {
,         ex.printStackTrace();
,         }*/
,    }
"
4f72d818-d8b1-4f36-aab6-20bf234b1cd2,72b037d9-7f52-47ae-a499-432280d1cee8,SLASH,"MONKEYS_AT,Override,PUBLIC,void,update,LPAREN,RPAREN,LBRACE,IF,LPAREN,getStopDuration,LPAREN,RPAREN,GT,0,RPAREN,LBRACE,stopMove,LPAREN,RPAREN,SEMI,setStopDuration,LPAREN,getStopDuration,LPAREN,RPAREN,SUB,1,RPAREN,SEMI,RBRACE,IF,LPAREN,isMoving,LPAREN,RPAREN,RPAREN,LBRACE,Direction,dir,EQ,getDirection,LPAREN,RPAREN,SEMI,int,distance,EQ,getSpeed,LPAREN,RPAREN,SEMI,IF,LPAREN,dir,DOT,getX,LPAREN,RPAREN,BANGEQ,0,AMPAMP,dir,DOT,getY,LPAREN,RPAREN,BANGEQ,0,RPAREN,LBRACE,double,dist,EQ,distance,SEMI,dist,EQ,dist,<MASK>,Math,DOT,sqrt,LPAREN,2,RPAREN,SEMI,distance,EQ,LPAREN,int,RPAREN,Math,DOT,round,LPAREN,dist,RPAREN,SEMI,RBRACE,WHILE,LPAREN,distance,GT,0,RPAREN,LBRACE,IF,LPAREN,BlastModel,DOT,isFree,LPAREN,this,COMMA,dir,COMMA,1,RPAREN,RPAREN,LBRACE,move,LPAREN,dir,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,dir,DOT,getX,LPAREN,RPAREN,BANGEQ,0,AMPAMP,dir,DOT,getY,LPAREN,RPAREN,BANGEQ,0,RPAREN,LBRACE,IF,LPAREN,BlastModel,DOT,isFree,LPAREN,this,COMMA,Direction,DOT,getDirection,LPAREN,dir,DOT,getX,LPAREN,RPAREN,COMMA,0,RPAREN,COMMA,1,RPAREN,RPAREN,LBRACE,move,LPAREN,Direction,DOT,getDirection,LPAREN,dir,DOT,getX,LPAREN,RPAREN,COMMA,0,RPAREN,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,BlastModel,DOT,isFree,LPAREN,this,COMMA,Direction,DOT,getDirection,LPAREN,0,COMMA,dir,DOT,getY,LPAREN,RPAREN,RPAREN,COMMA,1,RPAREN,RPAREN,LBRACE,move,LPAREN,Direction,DOT,getDirection,LPAREN,0,COMMA,dir,DOT,getY,LPAREN,RPAREN,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,ELSE,LBRACE,stopMove,LPAREN,RPAREN,SEMI,RBRACE,distance,SUBSUB,SEMI,RBRACE,RBRACE,RBRACE","	@Override
,	public void update() {
,		if(getStopDuration() > 0){
,			stopMove();
,			setStopDuration(getStopDuration() - 1);
,		}
,		
,		
,		if(isMoving()){
,			Direction dir = getDirection();
,			int distance = getSpeed();
,			if(dir.getX() != 0 && dir.getY() != 0) {
,				double dist = distance;
,				dist = dist <MASK> Math.sqrt(2);
,				distance = (int)Math.round(dist);
,			}
,			while(distance > 0) {
,				if(BlastModel.isFree(this, dir, 1)) {
,	                move(dir); //TODO want to tell hero to start move instead
,	            } else if(dir.getX() != 0 && dir.getY() != 0) { //Moving diagonally
,			        if(BlastModel.isFree(this, Direction.getDirection(dir.getX(), 0), 1)) {
,			            move(Direction.getDirection(dir.getX(), 0));//TODO want to tell hero to start move instead
,			        } else if(BlastModel.isFree(this, Direction.getDirection(0, dir.getY()), 1)) {
,	                    move(Direction.getDirection(0, dir.getY()));//TODO want to tell hero to start move instead
,	                }
,			    } else {
,			    	stopMove();
,			    }
,				distance--;
,			}
,			
,		}
,	}
"
8ec044ff-9e5c-46c4-ad39-ccc8ad42dd87,7fbcd671-94ce-4f16-be6b-a3a26419d43b,GT,"PUBLIC,void,actionPerformed,LPAREN,ActionEvent,e,RPAREN,LBRACE,long,millis,EQ,Long,DOT,parseLong,LPAREN,codeField,DOT,getText,LPAREN,RPAREN,RPAREN,SEMI,Date,date,EQ,NEW,Date,LPAREN,millis,RPAREN,SEMI,DateFormat,dateFormat,EQ,NEW,SimpleDateFormat,LPAREN,""yyyyMMdd"",RPAREN,SEMI,String,transDate,EQ,dateFormat,DOT,format,LPAREN,date,RPAREN,SEMI,int,itemIndex,EQ,transRep,DOT,dates,DOT,indexOf,LPAREN,transDate,RPAREN,SEMI,IF,LPAREN,itemIndex,<MASK>,SUB,1,RPAREN,LBRACE,transactionList,transList,EQ,transRep,DOT,getTransList,LPAREN,transDate,RPAREN,SEMI,transaction,trans,EQ,transList,DOT,getTrans,LPAREN,millis,RPAREN,SEMI,textPane,DOT,setText,LPAREN,trans,DOT,generateTransactionText,LPAREN,inv,RPAREN,RPAREN,SEMI,lblRm,DOT,setText,LPAREN,""RM"",PLUS,trans,DOT,totalPrice,RPAREN,SEMI,RBRACE,RBRACE","			public void actionPerformed(ActionEvent e) {
,				long millis = Long.parseLong(codeField.getText());
,				Date date = new Date(millis);
,				DateFormat dateFormat = new SimpleDateFormat(""yyyyMMdd"");
,				String transDate = dateFormat.format(date);
,				
,				int itemIndex = transRep.dates.indexOf(transDate);
,				if(itemIndex<MASK>-1)
,				{
,					transactionList transList = transRep.getTransList(transDate);
,					transaction trans = transList.getTrans(millis);
,					
,					textPane.setText(trans.generateTransactionText(inv));
,					lblRm.setText(""RM""+trans.totalPrice);
,				}
,			}
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,33b822a4-3e4f-4e77-a6a6-8f1f932b5b2d,LT,"PUBLIC,int,getPixelDifference,LPAREN,BufferedImage,letter,COMMA,BufferedImage,template,RPAREN,LBRACE,int,height,EQ,letter,DOT,getHeight,LPAREN,RPAREN,SEMI,int,width,EQ,LPAREN,int,RPAREN,LPAREN,LPAREN,double,RPAREN,height,SLASH,template,DOT,getHeight,LPAREN,RPAREN,STAR,template,DOT,getWidth,LPAREN,RPAREN,RPAREN,SEMI,IF,LPAREN,height,EQEQ,0,BARBAR,width,EQEQ,0,RPAREN,RETURN,0,SEMI,template,EQ,VisionUtils,DOT,resizeImage,LPAREN,template,COMMA,height,COMMA,width,RPAREN,SEMI,IF,LPAREN,width,<MASK>,letter,DOT,getWidth,LPAREN,RPAREN,RPAREN,LBRACE,int,minX,EQ,LPAREN,letter,DOT,getWidth,LPAREN,RPAREN,SUB,width,RPAREN,SLASH,2,SEMI,width,EQ,letter,DOT,getWidth,LPAREN,RPAREN,SEMI,BufferedImage,temp,EQ,NEW,BufferedImage,LPAREN,width,COMMA,height,COMMA,BufferedImage,DOT,TYPE_INT_RGB,RPAREN,SEMI,Graphics2D,g,EQ,temp,DOT,createGraphics,LPAREN,RPAREN,SEMI,g,DOT,drawImage,LPAREN,template,COMMA,null,COMMA,minX,COMMA,0,RPAREN,SEMI,template,EQ,temp,SEMI,RBRACE,ELSE,LBRACE,int,minX,EQ,LPAREN,width,SUB,letter,DOT,getWidth,LPAREN,RPAREN,RPAREN,SLASH,2,SEMI,BufferedImage,temp,EQ,NEW,BufferedImage,LPAREN,width,COMMA,height,COMMA,BufferedImage,DOT,TYPE_INT_RGB,RPAREN,SEMI,Graphics2D,g,EQ,temp,DOT,createGraphics,LPAREN,RPAREN,SEMI,g,DOT,drawImage,LPAREN,letter,COMMA,null,COMMA,minX,COMMA,0,RPAREN,SEMI,letter,EQ,temp,SEMI,RBRACE,RETURN,VisionUtils,DOT,imageDifference,LPAREN,letter,COMMA,template,RPAREN,SEMI,RBRACE","	public int getPixelDifference(BufferedImage letter, BufferedImage template)
,	{
,	    // resize the template image
,	    int height = letter.getHeight();
,	    int width = (int) ((double) height / template.getHeight() * template.getWidth());
,	    if (height == 0 || width == 0)
,	        return 0;
,	    template = VisionUtils.resizeImage(template, height, width);
,	    	    
,	    // fill blank pixels
,	    if (width <MASK> letter.getWidth())
,	    {
,	        int minX = (letter.getWidth() - width) / 2;
,	        width = letter.getWidth();
,	        BufferedImage temp = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
,	        Graphics2D g = temp.createGraphics();
,	        g.drawImage(template, null, minX, 0);
,	        template = temp;
,	    }
,	    else
,	    {
,	        int minX = (width - letter.getWidth()) / 2;
,	        BufferedImage temp = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
,	        Graphics2D g = temp.createGraphics();
,	        g.drawImage(letter, null, minX, 0);
,	        letter = temp;
,	    }
,	    
,	    // return image difference
,	    return VisionUtils.imageDifference(letter, template);
,	}
"
cc1c4187-1182-4cd3-a559-9895584ed311,88485a8e-f554-4387-a662-bbf7ec4b70e2,GTEQ,"PRIVATE,int,count,LPAREN,String,substring,COMMA,String,sourceText,RPAREN,LBRACE,int,count,EQ,0,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,sourceText,DOT,length,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,int,pos,EQ,sourceText,DOT,indexOf,LPAREN,substring,COMMA,i,RPAREN,SEMI,IF,LPAREN,pos,<MASK>,0,RPAREN,LBRACE,count,PLUSPLUS,SEMI,i,EQ,pos,PLUS,substring,DOT,length,LPAREN,RPAREN,SUB,1,SEMI,RBRACE,RBRACE,RETURN,count,SEMI,RBRACE","	private int count(String substring, String sourceText) {
,		int count = 0;
,		for (int i = 0; i < sourceText.length(); i++) {
,			int pos = sourceText.indexOf(substring, i);
,			if (pos <MASK> 0) {
,				count++;
,				i = pos + substring.length() - 1;
,			}
,		}
,		return count;
,	}
"
a976df20-c97b-4d57-87ae-cd8f116ed755,ce7bc8d9-ce86-4a09-8821-f8dab984da71,PLUS,"PUBLIC,void,handleMouseClicked,LPAREN,FINAL,Point,point,RPAREN,LBRACE,FINAL,double,x,EQ,point,DOT,getX,LPAREN,RPAREN,SEMI,FINAL,double,y,EQ,point,DOT,getY,LPAREN,RPAREN,SEMI,FINAL,int,column,EQ,LPAREN,int,RPAREN,LPAREN,LPAREN,x,SUB,X_OFFSET,RPAREN,SLASH,CELL_WIDTH,RPAREN,SEMI,FINAL,int,row,EQ,LPAREN,int,RPAREN,LPAREN,LPAREN,y,SUB,LPAREN,Y_OFFSET,<MASK>,Y_FUDGE,RPAREN,RPAREN,SLASH,CELL_HEIGHT,RPAREN,SEMI,Logger,DOT,info,LPAREN,""clicked at column %d, row %d (%.0f,%.0f)\n"",COMMA,column,COMMA,row,COMMA,x,COMMA,y,RPAREN,SEMI,IF,LPAREN,LPAREN,column,GTEQ,0,RPAREN,AMPAMP,LPAREN,column,LT,COLUMNS,RPAREN,AMPAMP,LPAREN,row,GTEQ,0,RPAREN,AMPAMP,LPAREN,row,LT,ROWS,RPAREN,RPAREN,LBRACE,FINAL,Collection,LT,OthelloCellCapturePath,GT,paths,EQ,placePiece,LPAREN,column,COMMA,row,COMMA,player,RPAREN,SEMI,Logger,DOT,info,LPAREN,""player path = %s\n"",COMMA,paths,RPAREN,SEMI,IF,LPAREN,BANG,paths,DOT,isEmpty,LPAREN,RPAREN,RPAREN,LBRACE,statistics,DOT,update,LPAREN,RPAREN,SEMI,FINAL,int,playerCount,EQ,statistics,DOT,getPlayerCount,LPAREN,RPAREN,SEMI,FINAL,int,computerCount,EQ,statistics,DOT,getComputerCount,LPAREN,RPAREN,SEMI,FINAL,int,emptyCount,EQ,statistics,DOT,getEmptyCount,LPAREN,RPAREN,SEMI,IF,LPAREN,playerCount,EQEQ,0,BARBAR,computerCount,EQEQ,0,BARBAR,emptyCount,EQEQ,0,RPAREN,LBRACE,gameManager,DOT,changeGameState,LPAREN,GameState,DOT,GAME_OVER,RPAREN,SEMI,RBRACE,ELSE,LBRACE,gameManager,DOT,changeGameState,LPAREN,GameState,DOT,ARTIFICIAL_INTELLIGENCE,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,RBRACE","	public void handleMouseClicked( final Point point ) {
,		// get the (x,y) coordinates
,		final double x = point.getX();
,		final double y = point.getY();
,		
,		// determine the (column,row) position
,		final int column = (int)( ( x - X_OFFSET ) / CELL_WIDTH );
,		final int row 	 = (int)( ( y - ( Y_OFFSET <MASK> Y_FUDGE ) ) / CELL_HEIGHT );
,		Logger.info( ""clicked at column %d, row %d (%.0f,%.0f)\n"", column, row, x, y );
,		
,		// if the column and row are within bounds
,		// place the piece
,		if( ( column >= 0 ) && ( column < COLUMNS ) && 
,			( row >= 0 ) && ( row < ROWS ) ) {
,			// attempt to acquire the capture path
,			final Collection<OthelloCellCapturePath> paths = placePiece( column, row, player );
,			Logger.info( ""player path = %s\n"", paths );
,			
,			// if a path was found ...
,			if( !paths.isEmpty() ) {
,				// update the statistics
,				statistics.update();
,				
,				// get the counts
,				final int playerCount	= statistics.getPlayerCount();
,				final int computerCount = statistics.getComputerCount();
,				final int emptyCount	= statistics.getEmptyCount();
,				
,				// if no more moves... 
,				if( playerCount == 0 || computerCount == 0 || emptyCount == 0 ) {
,					gameManager.changeGameState( GameState.GAME_OVER );
,				}
,				
,				// allow the AI to take a turn
,				else {
,					gameManager.changeGameState( GameState.ARTIFICIAL_INTELLIGENCE );
,				}
,			}
,		}	
,	}
"
26b58d21-8b90-4860-a0ad-df02c6deb31f,5ea62526-f55b-4869-8aae-5860b36c1038,GTEQ,"MONKEYS_AT,Override,PUBLIC,void,fire,LPAREN,int,offset,COMMA,int,length,RPAREN,LBRACE,FOR,LPAREN,TextHolder,th,COLON,text,RPAREN,LBRACE,IF,LPAREN,th,DOT,offset,<MASK>,offset,RPAREN,LBRACE,th,DOT,offset,PLUSEQ,length,SEMI,RBRACE,RBRACE,RBRACE","	@Override
,	public void fire(int offset, int length) {
,		for(TextHolder th : text) {
,			if(th.offset <MASK> offset) {
,				th.offset += length;
,			}
,		}
,	}
"
bbc9f6a0-390c-4409-a212-8916d3c861c1,a0b4588d-3e15-4284-8750-9b62d8156444,PLUS,"PUBLIC,void,goForwardInScenario,LPAREN,RPAREN,LBRACE,ScenarioGUIStep,currentGUIStep,EQ,this,DOT,guiStepList,DOT,get,LPAREN,this,DOT,guiStepList,DOT,size,LPAREN,RPAREN,SUB,1,RPAREN,SEMI,IF,LPAREN,currentGUIStep,INSTANCEOF,ScenarioGUIStepFinish,RPAREN,LBRACE,RETURN,SEMI,RBRACE,currentGUIStep,DOT,setLeftComponentActivated,LPAREN,false,RPAREN,SEMI,currentGUIStep,DOT,setSelectionIntoScenarioStep,LPAREN,RPAREN,SEMI,this,DOT,scenarioHardwareBerater,DOT,goToNextStep,LPAREN,RPAREN,SEMI,ScenarioTreeStep,currentStep,EQ,scenarioHardwareBerater,DOT,getCurrentStep,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""Next identified Step: "",<MASK>,currentStep,DOT,NAME,RPAREN,SEMI,currentGUIStep,EQ,getScenarioGUIStepFromTreeStep,LPAREN,currentStep,RPAREN,SEMI,this,DOT,guiStepList,DOT,add,LPAREN,currentGUIStep,RPAREN,SEMI,this,DOT,showScenarioStepGUIComponents,LPAREN,currentStep,DOT,NAME,COMMA,currentGUIStep,RPAREN,SEMI,RBRACE","	public void goForwardInScenario(){
,				
,		// GUI Parameter auslesen und in Szenarioschritt übertragen.
,		ScenarioGUIStep currentGUIStep = this.guiStepList.get(this.guiStepList.size() - 1);
,				
,		// Blockieren, wenn es der letzte Schritt ist (der setSelection Aufruf ist unkritisch, da er dort leer ist)
,		if(currentGUIStep instanceof ScenarioGUIStepFinish){
,			return;
,		}
,			
,		// Linke Auswahlelemente des aktuellen Schrittes deaktivieren
,		currentGUIStep.setLeftComponentActivated(false);
,		
,		// Auswahl in logischen Scenarioschritt durchreichen und Aufruf zum nächsten Szenarioschritt, 
,		// dies verwendet die zuvor gesetzte Auswahl automatisch weiter 
,		currentGUIStep.setSelectionIntoScenarioStep();
,		this.scenarioHardwareBerater.goToNextStep();
,				
,		// GUI-Schritt Objekt holen (definiert das Aussehen der GUI-Elemente des Schritts)
,		ScenarioTreeStep currentStep = scenarioHardwareBerater.getCurrentStep();
,		System.out.println(""Next identified Step: "" <MASK> currentStep.NAME);
,		currentGUIStep = getScenarioGUIStepFromTreeStep(currentStep);
,		this.guiStepList.add(currentGUIStep);
,		
,		// GUI um Auswahlelemente des neuen Schrittes ergänzen.
,		this.showScenarioStepGUIComponents(currentStep.NAME, currentGUIStep);
,		
,	}
"
b4c6806c-de1d-4e17-959c-99489d5dd3e8,7804aad8-2224-4320-b6b3-8d62dd27ffeb,SUB,"MONKEYS_AT,Override,PUBLIC,void,onCommand,LPAREN,SMTPSession,session,RPAREN,THROWS,SMTPException,LBRACE,IF,LPAREN,BANG,session,DOT,checkCommandOrder,LPAREN,RPAREN,RPAREN,LBRACE,THROW,NEW,SMTPException,LPAREN,""503 send HELO or ehlo first"",RPAREN,SEMI,RBRACE,session,DOT,resetState,LPAREN,RPAREN,SEMI,String,senderAddress,EQ,StringUtil,DOT,getAddressFromArgument,LPAREN,session,DOT,getCurRemainCommandStr,LPAREN,RPAREN,RPAREN,SEMI,String,remainCommand,EQ,StringUtil,DOT,getRemainCommand,LPAREN,session,DOT,getCurRemainCommandStr,LPAREN,RPAREN,RPAREN,SEMI,IF,LPAREN,remainCommand,EQEQ,null,BARBAR,BANG,remainCommand,DOT,toUpperCase,LPAREN,RPAREN,DOT,equals,LPAREN,""FROM"",RPAREN,BARBAR,senderAddress,EQEQ,null,RPAREN,LBRACE,THROW,NEW,SMTPException,LPAREN,""501 Syntax error in parameters or arguments"",RPAREN,SEMI,RBRACE,IF,LPAREN,BANG,CheckUtil,DOT,isCorrectPath,LPAREN,senderAddress,RPAREN,RPAREN,LBRACE,THROW,NEW,SMTPException,LPAREN,""501 Syntax error in parameters or arguments"",RPAREN,SEMI,RBRACE,senderAddress,EQ,senderAddress,DOT,substring,LPAREN,1,COMMA,senderAddress,DOT,length,LPAREN,RPAREN,<MASK>,1,RPAREN,SEMI,emailName,EQ,StringUtil,DOT,getEmailName,LPAREN,senderAddress,RPAREN,SEMI,emailDomain,EQ,StringUtil,DOT,getEmailDomain,LPAREN,senderAddress,RPAREN,SEMI,IF,LPAREN,BANG,emailName,DOT,equals,LPAREN,session,DOT,getUserName,LPAREN,RPAREN,RPAREN,RPAREN,LBRACE,THROW,NEW,SMTPException,LPAREN,""553 mail from must equal authorized user"",RPAREN,SEMI,RBRACE,IF,LPAREN,CheckUtil,DOT,isSameDomain,LPAREN,emailDomain,COMMA,session,DOT,getDomainList,LPAREN,RPAREN,RPAREN,RPAREN,LBRACE,session,DOT,setLastCommandName,LPAREN,RPAREN,SEMI,responseStr,EQ,""250 Sender <"",PLUS,senderAddress,PLUS,""> OK"",SEMI,session,DOT,sendResponse,LPAREN,responseStr,RPAREN,SEMI,RBRACE,ELSE,LBRACE,session,DOT,getLogger,LPAREN,RPAREN,DOT,info,LPAREN,""\u53D1\u4EF6\u4EBA\u4E0E\u670D\u52A1\u5668\u5728\u4E0D\u540C\u4E00\u4E2A\u57DF"",RPAREN,SEMI,THROW,NEW,SMTPException,LPAREN,""553 mail from must equal authorized user"",RPAREN,SEMI,RBRACE,RBRACE","	@Override
,	public void onCommand(SMTPSession session) throws SMTPException{
,		// 检查命令顺序是否合法
,		if(!session.checkCommandOrder()){
,			throw new SMTPException(""503 send HELO or ehlo first"");
,		}
,		// 清空缓冲区
,		session.resetState();
,		
,		//获取邮件地址
,		String senderAddress=StringUtil.getAddressFromArgument(session.getCurRemainCommandStr());
,		String remainCommand=StringUtil.getRemainCommand(session.getCurRemainCommandStr());
,
,		// 检查命令是否正确
,		if (remainCommand == null || !remainCommand.toUpperCase().equals(""FROM"")|| senderAddress == null) {
,			throw new SMTPException(""501 Syntax error in parameters or arguments"");
,		}
,		// 检查回复地址是否合法
,		if (!CheckUtil.isCorrectPath(senderAddress)) {
,			throw new SMTPException(""501 Syntax error in parameters or arguments"");
,		}
,		// 去除尖括号
,		senderAddress = senderAddress.substring(1, senderAddress.length() <MASK> 1);
,
,		// 获取地址信息
,		emailName = StringUtil.getEmailName(senderAddress);
,		emailDomain = StringUtil.getEmailDomain(senderAddress);
,
,		//检查是否登陆用户作为发件人
,		if(!emailName.equals(session.getUserName())){
,			throw new SMTPException(""553 mail from must equal authorized user"");
,		}
,		
,		// 检查发件人和服务器是不是在同一个域
,		if (CheckUtil.isSameDomain(emailDomain, session.getDomainList())) {
,			// 在同一个域
,//				session.getLogger().info(""发件人与服务器在同一个域，可以发邮件"");
,			
,			//命令完结
,			session.setLastCommandName();
,			responseStr=""250 Sender <""+senderAddress+""> OK"";
,			session.sendResponse( responseStr);
,		} else {
,			// 不同一个域
,			session.getLogger().info(""发件人与服务器在不同一个域"");
,			throw new SMTPException(""553 mail from must equal authorized user"");
,		}
,	}
"
9b07119d-5d87-44cb-94ac-77a9d4fc6019,8a920534-a4a2-47ce-8f57-199c201b1b89,GT,"PUBLIC,void,getFromDB,LPAREN,int,nexp,COMMA,int,anyAcademicFitxes,RPAREN,LBRACE,String,SQL1,EQ,""SELECT *, DATEDIFF(CURRENT_DATE(),xes.DataNaixement)/365 as anys FROM `"",PLUS,ICoreData,DOT,core_mysqlDBPrefix,PLUS,""`.xes_alumne AS xes INNER JOIN `"",PLUS,ICoreData,DOT,core_mysqlDBPrefix,PLUS,""`.xes_alumne_historic"",PLUS,""  AS xh ON xh.Exp2=xes.Exp2 WHERE xh.Exp2='"",PLUS,nexp,PLUS,""' AND AnyAcademic='"",PLUS,anyAcademicFitxes,PLUS,""'"",SEMI,TRY,LBRACE,Statement,st,EQ,client,DOT,getMysql,LPAREN,RPAREN,DOT,createStatement,LPAREN,RPAREN,SEMI,ResultSet,rs1,EQ,client,DOT,getMysql,LPAREN,RPAREN,DOT,getResultSet,LPAREN,SQL1,COMMA,st,RPAREN,SEMI,WHILE,LPAREN,rs1,BANGEQ,null,AMPAMP,rs1,DOT,next,LPAREN,RPAREN,RPAREN,LBRACE,String,permis,EQ,StringUtils,DOT,noNull,LPAREN,rs1,DOT,getString,LPAREN,""Permisos"",RPAREN,RPAREN,SEMI,profPermisos,EQ,StringUtils,DOT,parseStringToArray,LPAREN,permis,COMMA,"","",COMMA,StringUtils,DOT,CASE_UPPER,RPAREN,SEMI,llinatge1,EQ,StringUtils,DOT,noNull,LPAREN,rs1,DOT,getString,LPAREN,""Llinatge1"",RPAREN,RPAREN,SEMI,llinatge2,EQ,StringUtils,DOT,noNull,LPAREN,rs1,DOT,getString,LPAREN,""Llinatge2"",RPAREN,RPAREN,SEMI,nom1,EQ,StringUtils,DOT,noNull,LPAREN,rs1,DOT,getString,LPAREN,""Nom1"",RPAREN,RPAREN,SEMI,edat,EQ,rs1,DOT,getInt,LPAREN,""Edat"",RPAREN,SEMI,sexe,EQ,StringUtils,DOT,noNull,LPAREN,rs1,DOT,getString,LPAREN,""Sexe"",RPAREN,RPAREN,SEMI,nacionalitat,EQ,StringUtils,DOT,noNull,LPAREN,rs1,DOT,getString,LPAREN,""Nacionalitat"",RPAREN,RPAREN,SEMI,dataNaixament,EQ,rs1,DOT,getDate,LPAREN,""DataNaixement"",RPAREN,SEMI,paisNaixament,EQ,StringUtils,DOT,noNull,LPAREN,rs1,DOT,getString,LPAREN,""PaisNaixement"",RPAREN,RPAREN,SEMI,provinciaNaixament,EQ,StringUtils,DOT,noNull,LPAREN,rs1,DOT,getString,LPAREN,""ProvinciaNaixement"",RPAREN,RPAREN,SEMI,localitatNaixament,EQ,StringUtils,DOT,noNull,LPAREN,rs1,DOT,getString,LPAREN,""LocalitatNaixement"",RPAREN,RPAREN,SEMI,dni,EQ,StringUtils,DOT,noNull,LPAREN,rs1,DOT,getString,LPAREN,""DNI"",RPAREN,RPAREN,SEMI,targetaSanitaria,EQ,StringUtils,DOT,noNull,LPAREN,rs1,DOT,getString,LPAREN,""TargetaSanitaria"",RPAREN,RPAREN,SEMI,adreca,EQ,StringUtils,DOT,noNull,LPAREN,rs1,DOT,getString,LPAREN,""Adreca"",RPAREN,RPAREN,SEMI,municipi,EQ,StringUtils,DOT,noNull,LPAREN,rs1,DOT,getString,LPAREN,""Municipi"",RPAREN,RPAREN,SEMI,localitat,EQ,StringUtils,DOT,noNull,LPAREN,rs1,DOT,getString,LPAREN,""Localitat"",RPAREN,RPAREN,SEMI,cp,EQ,StringUtils,DOT,noNull,LPAREN,rs1,DOT,getString,LPAREN,""CP"",RPAREN,RPAREN,SEMI,numRep,EQ,rs1,DOT,getInt,LPAREN,""NumRep"",RPAREN,SEMI,repetidor,EQ,rs1,DOT,getInt,LPAREN,""Repetidor"",RPAREN,<MASK>,0,SEMI,repetidorEditable,EQ,true,SEMI,expedient,EQ,rs1,DOT,getInt,LPAREN,""Exp2"",RPAREN,SEMI,sgdUser,EQ,"""",PLUS,expedient,SEMI,sgdPasswd,EQ,rs1,DOT,getString,LPAREN,""pwd"",RPAREN,SEMI,grupLletra,EQ,rs1,DOT,getString,LPAREN,""Grup"",RPAREN,SEMI,estudis,EQ,rs1,DOT,getString,LPAREN,""Estudis"",RPAREN,SEMI,ensenyament,EQ,rs1,DOT,getString,LPAREN,""Ensenyament"",RPAREN,SEMI,profTutor,EQ,rs1,DOT,getString,LPAREN,""ProfTutor"",RPAREN,SEMI,nese,EQ,StringUtils,DOT,noNull,LPAREN,rs1,DOT,getString,LPAREN,""anee"",RPAREN,RPAREN,SEMI,anee,EQ,BANG,nese,DOT,isEmpty,LPAREN,RPAREN,SEMI,setAnysDecimal,LPAREN,rs1,DOT,getFloat,LPAREN,""anys"",RPAREN,RPAREN,SEMI,RBRACE,IF,LPAREN,rs1,BANGEQ,null,RPAREN,LBRACE,rs1,DOT,close,LPAREN,RPAREN,SEMI,st,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,CATCH,LPAREN,SQLException,ex,RPAREN,LBRACE,Logger,DOT,getLogger,LPAREN,BeanDadesPersonals,DOT,CLASS,DOT,getName,LPAREN,RPAREN,RPAREN,DOT,log,LPAREN,Level,DOT,SEVERE,COMMA,null,COMMA,ex,RPAREN,SEMI,RBRACE,SQL1,EQ,""SELECT xh.Exp2 FROM `"",PLUS,ICoreData,DOT,core_mysqlDBPrefix,PLUS,""`.xes_alumne_historic AS xh INNER JOIN `"",PLUS,ICoreData,DOT,core_mysqlDBPrefix,PLUS,""`.xes_alumne AS xes ON xes.Exp2=xh.Exp2 WHERE "",PLUS,""   (estudis IN (SELECT estudis FROM `"",PLUS,ICoreData,DOT,core_mysqlDBPrefix,PLUS,""`.xes_alumne_historic AS xh2 WHERE xh.Exp2=xh2.Exp2 AND AnyAcademic<"",PLUS,anyAcademicFitxes,PLUS,"" AND AnyAcademic>0 AND xh2.Exp2="",PLUS,expedient,PLUS,"") AND AnyAcademic="",PLUS,anyAcademicFitxes,PLUS,"") "",PLUS,"" AND xh.Exp2="",PLUS,expedient,SEMI,boolean,q,EQ,false,SEMI,TRY,LBRACE,Statement,st7,EQ,client,DOT,getMysql,LPAREN,RPAREN,DOT,createStatement,LPAREN,RPAREN,SEMI,ResultSet,rs1,EQ,client,DOT,getMysql,LPAREN,RPAREN,DOT,getResultSet,LPAREN,SQL1,COMMA,st7,RPAREN,SEMI,WHILE,LPAREN,rs1,BANGEQ,null,AMPAMP,rs1,DOT,next,LPAREN,RPAREN,RPAREN,LBRACE,q,EQ,true,SEMI,RBRACE,IF,LPAREN,rs1,BANGEQ,null,RPAREN,LBRACE,rs1,DOT,close,LPAREN,RPAREN,SEMI,st7,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,CATCH,LPAREN,SQLException,ex,RPAREN,LBRACE,Logger,DOT,getLogger,LPAREN,BeanDadesPersonals,DOT,CLASS,DOT,getName,LPAREN,RPAREN,RPAREN,DOT,log,LPAREN,Level,DOT,SEVERE,COMMA,null,COMMA,ex,RPAREN,SEMI,RBRACE,IF,LPAREN,q,RPAREN,LBRACE,repetidor,EQ,true,SEMI,repetidorEditable,EQ,false,SEMI,RBRACE,SQL1,EQ,""SELECT * FROM `"",PLUS,ICoreData,DOT,core_mysqlDBPrefix,PLUS,""`.xes_alumne_detall WHERE Exp_FK_ID="",PLUS,nexp,SEMI,TRY,LBRACE,Statement,st2,EQ,client,DOT,getMysql,LPAREN,RPAREN,DOT,createStatement,LPAREN,RPAREN,SEMI,ResultSet,rs1,EQ,client,DOT,getMysql,LPAREN,RPAREN,DOT,getResultSet,LPAREN,SQL1,COMMA,st2,RPAREN,SEMI,WHILE,LPAREN,rs1,BANGEQ,null,AMPAMP,rs1,DOT,next,LPAREN,RPAREN,RPAREN,LBRACE,foto,EQ,rs1,DOT,getBytes,LPAREN,""Foto"",RPAREN,SEMI,RBRACE,IF,LPAREN,rs1,BANGEQ,null,RPAREN,LBRACE,rs1,DOT,close,LPAREN,RPAREN,SEMI,st2,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,CATCH,LPAREN,SQLException,ex,RPAREN,LBRACE,Logger,DOT,getLogger,LPAREN,BeanDadesPersonals,DOT,CLASS,DOT,getName,LPAREN,RPAREN,RPAREN,DOT,log,LPAREN,Level,DOT,SEVERE,COMMA,null,COMMA,ex,RPAREN,SEMI,RBRACE,IF,LPAREN,foto,BANGEQ,null,RPAREN,LBRACE,javax,DOT,swing,DOT,ImageIcon,image,EQ,NEW,ImageIcon,LPAREN,foto,RPAREN,SEMI,photo,EQ,image,DOT,getImage,LPAREN,RPAREN,SEMI,RBRACE,telefonsUrgencia,DOT,clear,LPAREN,RPAREN,SEMI,tutorsInfo,DOT,clear,LPAREN,RPAREN,SEMI,SQL1,EQ,""SELECT * from `"",PLUS,ICoreData,DOT,core_mysqlDBPrefix,PLUS,""`.xes_dades_pares where Exp2="",PLUS,nexp,SEMI,TRY,LBRACE,Statement,st3,EQ,client,DOT,getMysql,LPAREN,RPAREN,DOT,createStatement,LPAREN,RPAREN,SEMI,ResultSet,rs1,EQ,client,DOT,getMysql,LPAREN,RPAREN,DOT,getResultSet,LPAREN,SQL1,COMMA,st3,RPAREN,SEMI,WHILE,LPAREN,rs1,BANGEQ,null,AMPAMP,rs1,DOT,next,LPAREN,RPAREN,RPAREN,LBRACE,String,telef,EQ,StringUtils,DOT,noNull,LPAREN,rs1,DOT,getString,LPAREN,""Telefon"",RPAREN,RPAREN,SEMI,IF,LPAREN,BANG,telef,DOT,isEmpty,LPAREN,RPAREN,RPAREN,LBRACE,telefonsUrgencia,DOT,add,LPAREN,telef,RPAREN,SEMI,RBRACE,PareTutor,pt,EQ,NEW,PareTutor,LPAREN,RPAREN,SEMI,String,relative,EQ,StringUtils,DOT,noNull,LPAREN,rs1,DOT,getString,LPAREN,""Relatiu1"",RPAREN,RPAREN,SEMI,String,nom,EQ,StringUtils,DOT,noNull,LPAREN,rs1,DOT,getString,LPAREN,""Tutor"",RPAREN,RPAREN,SEMI,String,telftutor,EQ,StringUtils,DOT,noNull,LPAREN,rs1,DOT,getString,LPAREN,""TelefonTutor"",RPAREN,RPAREN,SEMI,String,emailtutor,EQ,StringUtils,DOT,noNull,LPAREN,rs1,DOT,getString,LPAREN,""EmailTutor"",RPAREN,RPAREN,SEMI,String,professio,EQ,StringUtils,DOT,noNull,LPAREN,rs1,DOT,getString,LPAREN,""Professio"",RPAREN,RPAREN,SEMI,int,edat_tutor,EQ,rs1,DOT,getInt,LPAREN,""Edat"",RPAREN,SEMI,pt,DOT,setParentesc,LPAREN,relative,RPAREN,SEMI,pt,DOT,setNom,LPAREN,nom,RPAREN,SEMI,pt,DOT,setTelefons,LPAREN,telftutor,RPAREN,SEMI,pt,DOT,setEmails,LPAREN,emailtutor,RPAREN,SEMI,pt,DOT,setProfessio,LPAREN,professio,RPAREN,SEMI,pt,DOT,setEdat,LPAREN,edat_tutor,RPAREN,SEMI,tutorsInfo,DOT,add,LPAREN,pt,RPAREN,SEMI,RBRACE,IF,LPAREN,rs1,BANGEQ,null,RPAREN,LBRACE,rs1,DOT,close,LPAREN,RPAREN,SEMI,st3,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,CATCH,LPAREN,SQLException,ex,RPAREN,LBRACE,Logger,DOT,getLogger,LPAREN,BeanDadesPersonals,DOT,CLASS,DOT,getName,LPAREN,RPAREN,RPAREN,DOT,log,LPAREN,Level,DOT,SEVERE,COMMA,null,COMMA,ex,RPAREN,SEMI,RBRACE,listMedicaments,DOT,clear,LPAREN,RPAREN,SEMI,SQL1,EQ,""SELECT observacions FROM `"",PLUS,ICoreData,DOT,core_mysqlDBPrefix,PLUS,""`.sig_medicaments_observ WHERE exp2="",PLUS,nexp,SEMI,String,observ,EQ,"""",SEMI,TRY,LBRACE,Statement,st4,EQ,client,DOT,getMysql,LPAREN,RPAREN,DOT,createStatement,LPAREN,RPAREN,SEMI,ResultSet,rs1,EQ,client,DOT,getMysql,LPAREN,RPAREN,DOT,getResultSet,LPAREN,SQL1,COMMA,st4,RPAREN,SEMI,WHILE,LPAREN,rs1,BANGEQ,null,AMPAMP,rs1,DOT,next,LPAREN,RPAREN,RPAREN,LBRACE,observ,EQ,rs1,DOT,getString,LPAREN,1,RPAREN,SEMI,RBRACE,IF,LPAREN,rs1,BANGEQ,null,RPAREN,LBRACE,rs1,DOT,close,LPAREN,RPAREN,SEMI,st4,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,CATCH,LPAREN,SQLException,ex,RPAREN,LBRACE,Logger,DOT,getLogger,LPAREN,BeanDadesPersonals,DOT,CLASS,DOT,getName,LPAREN,RPAREN,RPAREN,DOT,log,LPAREN,Level,DOT,SEVERE,COMMA,null,COMMA,ex,RPAREN,SEMI,RBRACE,SQL1,EQ,""SELECT DISTINCT "",PLUS,"" med.id, "",PLUS,"" med.descripcio, "",PLUS,"" IF(medal.idMedicament IS NULL,'N','S') AS autoritzat "",PLUS,"" FROM  `"",PLUS,ICoreData,DOT,core_mysqlDBPrefix,PLUS,""`.sig_medicaments AS med  "",PLUS,"" LEFT JOIN `"",PLUS,ICoreData,DOT,core_mysqlDBPrefix,PLUS,""`.sig_medicaments_alumnes AS medal  "",PLUS,"" ON medal.exp2 ="",PLUS,nexp,PLUS,"" AND medal.idMedicament=med.id"",SEMI,TRY,LBRACE,Statement,st5,EQ,client,DOT,getMysql,LPAREN,RPAREN,DOT,createStatement,LPAREN,RPAREN,SEMI,ResultSet,rs1,EQ,client,DOT,getMysql,LPAREN,RPAREN,DOT,getResultSet,LPAREN,SQL1,COMMA,st5,RPAREN,SEMI,WHILE,LPAREN,rs1,BANGEQ,null,AMPAMP,rs1,DOT,next,LPAREN,RPAREN,RPAREN,LBRACE,BeanMedicament,bean,EQ,NEW,BeanMedicament,LPAREN,RPAREN,SEMI,bean,DOT,id,EQ,rs1,DOT,getInt,LPAREN,""id"",RPAREN,SEMI,bean,DOT,descripcio,EQ,rs1,DOT,getString,LPAREN,""descripcio"",RPAREN,SEMI,bean,DOT,autoritzat,EQ,rs1,DOT,getString,LPAREN,""autoritzat"",RPAREN,DOT,equalsIgnoreCase,LPAREN,""S"",RPAREN,SEMI,bean,DOT,observacions,EQ,observ,SEMI,listMedicaments,DOT,add,LPAREN,bean,RPAREN,SEMI,RBRACE,IF,LPAREN,rs1,BANGEQ,null,RPAREN,LBRACE,rs1,DOT,close,LPAREN,RPAREN,SEMI,st5,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,CATCH,LPAREN,SQLException,ex,RPAREN,LBRACE,Logger,DOT,getLogger,LPAREN,BeanDadesPersonals,DOT,CLASS,DOT,getName,LPAREN,RPAREN,RPAREN,DOT,log,LPAREN,Level,DOT,SEVERE,COMMA,null,COMMA,ex,RPAREN,SEMI,RBRACE,RBRACE","    public void getFromDB(int nexp, int anyAcademicFitxes) {
,        String SQL1 = ""SELECT *, DATEDIFF(CURRENT_DATE(),xes.DataNaixement)/365 as anys FROM `""
,                + ICoreData.core_mysqlDBPrefix + ""`.xes_alumne AS xes INNER JOIN `""
,                + ICoreData.core_mysqlDBPrefix + ""`.xes_alumne_historic""
,                + ""  AS xh ON xh.Exp2=xes.Exp2 WHERE xh.Exp2='"" + nexp
,                + ""' AND AnyAcademic='"" + anyAcademicFitxes + ""'"";
,        try {
,            Statement st = client.getMysql().createStatement();
,            ResultSet rs1 = client.getMysql().getResultSet(SQL1, st);
,            while (rs1 != null && rs1.next()) {
,
,                // CARREGA AQUI LES PROPIETATS DE LA BASE DE DADES
,
,                String permis = StringUtils.noNull(rs1.getString(""Permisos""));
,                profPermisos = StringUtils.parseStringToArray(permis, "","", StringUtils.CASE_UPPER);
,                // //System.out.println(profPermisos);
,
,                llinatge1 = StringUtils.noNull(rs1.getString(""Llinatge1""));
,                llinatge2 = StringUtils.noNull(rs1.getString(""Llinatge2""));
,                nom1 = StringUtils.noNull(rs1.getString(""Nom1""));
,                edat = rs1.getInt(""Edat"");
,                sexe = StringUtils.noNull(rs1.getString(""Sexe""));
,                nacionalitat = StringUtils.noNull(rs1.getString(""Nacionalitat""));
,                dataNaixament = rs1.getDate(""DataNaixement"");
,                paisNaixament = StringUtils.noNull(rs1.getString(""PaisNaixement""));
,                provinciaNaixament = StringUtils.noNull(rs1.getString(""ProvinciaNaixement""));
,                localitatNaixament = StringUtils.noNull(rs1.getString(""LocalitatNaixement""));
,                dni = StringUtils.noNull(rs1.getString(""DNI""));
,                targetaSanitaria = StringUtils.noNull(rs1.getString(""TargetaSanitaria""));
,                adreca = StringUtils.noNull(rs1.getString(""Adreca""));
,                municipi = StringUtils.noNull(rs1.getString(""Municipi""));
,                localitat = StringUtils.noNull(rs1.getString(""Localitat""));
,                cp = StringUtils.noNull(rs1.getString(""CP""));
,                numRep = rs1.getInt(""NumRep"");
,                repetidor = rs1.getInt(""Repetidor"") <MASK> 0; //condicio sobre el curs actual
,                repetidorEditable = true;
,                expedient = rs1.getInt(""Exp2"");
,                sgdUser = """" + expedient;
,                sgdPasswd = rs1.getString(""pwd"");
,
,                grupLletra = rs1.getString(""Grup"");
,                estudis = rs1.getString(""Estudis"");
,                ensenyament = rs1.getString(""Ensenyament"");
,                profTutor = rs1.getString(""ProfTutor"");
,                nese = StringUtils.noNull(rs1.getString(""anee""));
,                anee = !nese.isEmpty(); //DETERMINES IF IT IS NESE
,                setAnysDecimal(rs1.getFloat(""anys""));
,            }
,            if (rs1 != null) {
,                rs1.close();
,                st.close();
,            }
,        } catch (SQLException ex) {
,            Logger.getLogger(BeanDadesPersonals.class.getName()).log(Level.SEVERE, null, ex);
,        }
,
,///DETERMINA SI AQUEST ALUMNE ES REPETIDOR EN FUNCIO DE L'HISTORIC
,///si es així el marca com a repetidor i no deixarà editar el camp
,
,        SQL1 = ""SELECT xh.Exp2 FROM `"" + ICoreData.core_mysqlDBPrefix + ""`.xes_alumne_historic AS xh INNER JOIN `"" + ICoreData.core_mysqlDBPrefix + ""`.xes_alumne AS xes ON xes.Exp2=xh.Exp2 WHERE ""
,                + ""   (estudis IN (SELECT estudis FROM `"" + ICoreData.core_mysqlDBPrefix + ""`.xes_alumne_historic AS xh2 WHERE xh.Exp2=xh2.Exp2 AND AnyAcademic<""
,                + anyAcademicFitxes + "" AND AnyAcademic>0 AND xh2.Exp2="" + expedient + "") AND AnyAcademic="" + anyAcademicFitxes + "") ""
,                + "" AND xh.Exp2="" + expedient;
,        //System.out.println(SQL1);
,
,        boolean q = false;
,
,        try {
,
,            Statement st7 = client.getMysql().createStatement();
,            ResultSet rs1 = client.getMysql().getResultSet(SQL1, st7);
,            while (rs1 != null && rs1.next()) {
,                q = true;
,            }
,            if (rs1 != null) {
,                rs1.close();
,                st7.close();
,            }
,        } catch (SQLException ex) {
,            Logger.getLogger(BeanDadesPersonals.class.getName()).log(Level.SEVERE, null, ex);
,        }
,
,        if (q) {
,            repetidor = true;
,            repetidorEditable = false;
,        }
,////////////////////////////////
,
,        SQL1 = ""SELECT * FROM `"" + ICoreData.core_mysqlDBPrefix + ""`.xes_alumne_detall WHERE Exp_FK_ID="" + nexp;
,
,        try {
,            Statement st2 = client.getMysql().createStatement();
,            ResultSet rs1 = client.getMysql().getResultSet(SQL1, st2);
,            while (rs1 != null && rs1.next()) {
,                // CARREGA AQUI LES PROPIETATS DE LA BASE DE DADES
,                foto = rs1.getBytes(""Foto"");
,            }
,            if (rs1 != null) {
,                rs1.close();
,                st2.close();
,            }
,        } catch (SQLException ex) {
,            Logger.getLogger(BeanDadesPersonals.class.getName()).log(Level.SEVERE, null, ex);
,        }
,
,        if (foto != null) {
,            javax.swing.ImageIcon image = new ImageIcon(foto); //Toolkit.getDefaultToolkit().createImage(foto);
,            photo = image.getImage();
,        }
,
,
,////////////////////////////////    
,        telefonsUrgencia.clear();
,        tutorsInfo.clear();
,
,        SQL1 = ""SELECT * from `"" + ICoreData.core_mysqlDBPrefix + ""`.xes_dades_pares where Exp2="" + nexp;
,
,        try {
,            Statement st3 = client.getMysql().createStatement();
,            ResultSet rs1 = client.getMysql().getResultSet(SQL1, st3);
,
,            while (rs1 != null && rs1.next()) {
,                // CARREGA AQUI LES PROPIETATS DE LA BASE DE DADES
,                String telef = StringUtils.noNull(rs1.getString(""Telefon""));
,                if (!telef.isEmpty()) {
,                    telefonsUrgencia.add(telef);
,                }
,
,                PareTutor pt = new PareTutor();
,                String relative = StringUtils.noNull(rs1.getString(""Relatiu1""));
,                String nom = StringUtils.noNull(rs1.getString(""Tutor""));
,                String telftutor = StringUtils.noNull(rs1.getString(""TelefonTutor""));
,                String emailtutor = StringUtils.noNull(rs1.getString(""EmailTutor""));
,                String professio = StringUtils.noNull(rs1.getString(""Professio""));
,                int edat_tutor = rs1.getInt(""Edat"");
,
,                pt.setParentesc(relative);
,                pt.setNom(nom);
,                pt.setTelefons(telftutor);
,                pt.setEmails(emailtutor);
,                pt.setProfessio(professio);
,                pt.setEdat(edat_tutor);
,
,                tutorsInfo.add(pt);
,            }
,            if (rs1 != null) {
,                rs1.close();
,                st3.close();
,            }
,        } catch (SQLException ex) {
,            Logger.getLogger(BeanDadesPersonals.class.getName()).log(Level.SEVERE, null, ex);
,        }
,
,        ////////////////////////////////MEDICAMENTS    
,        listMedicaments.clear();
,
,        SQL1 = ""SELECT observacions FROM `"" + ICoreData.core_mysqlDBPrefix + ""`.sig_medicaments_observ WHERE exp2="" + nexp;
,        String observ = """";
,        try {
,            Statement st4 = client.getMysql().createStatement();
,            ResultSet rs1 = client.getMysql().getResultSet(SQL1, st4);
,
,            while (rs1 != null && rs1.next()) {
,                observ = rs1.getString(1);
,            }
,            if (rs1 != null) {
,                rs1.close();
,                st4.close();
,            }
,        } catch (SQLException ex) {
,            Logger.getLogger(BeanDadesPersonals.class.getName()).log(Level.SEVERE, null, ex);
,        }
,
,        SQL1 = ""SELECT DISTINCT ""
,                + "" med.id, ""
,                + "" med.descripcio, ""
,                + "" IF(medal.idMedicament IS NULL,'N','S') AS autoritzat ""
,                + "" FROM  `"" + ICoreData.core_mysqlDBPrefix + ""`.sig_medicaments AS med  ""
,                + "" LEFT JOIN `"" + ICoreData.core_mysqlDBPrefix + ""`.sig_medicaments_alumnes AS medal  ""
,                + "" ON medal.exp2 ="" + nexp + "" AND medal.idMedicament=med.id"";
,
,        try {
,            Statement st5 = client.getMysql().createStatement();
,            ResultSet rs1 = client.getMysql().getResultSet(SQL1, st5);
,
,            while (rs1 != null && rs1.next()) {
,                // CARREGA AQUI LES PROPIETATS DE LA BASE DE DADES
,                BeanMedicament bean = new BeanMedicament();
,                bean.id = rs1.getInt(""id"");
,                bean.descripcio = rs1.getString(""descripcio"");
,                bean.autoritzat = rs1.getString(""autoritzat"").equalsIgnoreCase(""S"");
,                bean.observacions = observ;
,                listMedicaments.add(bean);
,            }
,            if (rs1 != null) {
,                rs1.close();
,                st5.close();
,            }
,        } catch (SQLException ex) {
,            Logger.getLogger(BeanDadesPersonals.class.getName()).log(Level.SEVERE, null, ex);
,        }
,
,
,    }
"
fb671b8a-7ba1-46d7-a703-a2b4f8e0247c,f6177f1d-3292-4279-a13f-b48162428598,SLASH,"PUBLIC,int,LBRACKET,RBRACKET,algorithm,LPAREN,int,LBRACKET,RBRACKET,array,COMMA,int,k,RPAREN,LBRACE,int,LBRACKET,RBRACKET,newArray,EQ,array,DOT,clone,LPAREN,RPAREN,SEMI,IF,LPAREN,k,LTEQ,0,RPAREN,LBRACE,THROW,NEW,IllegalArgumentException,LPAREN,""k == 0 we need k to be atleast 1 "",RPAREN,SEMI,RBRACE,FOR,LPAREN,int,j,EQ,0,SEMI,j,PLUS,k,SUB,1,LT,newArray,DOT,length,SEMI,j,PLUSEQ,k,RPAREN,LBRACE,int,i,EQ,0,SEMI,WHILE,LPAREN,i,LT,k,<MASK>,2,RPAREN,LBRACE,int,tmp,EQ,newArray,LBRACKET,j,PLUS,i,RBRACKET,SEMI,newArray,LBRACKET,j,PLUS,i,RBRACKET,EQ,newArray,LBRACKET,j,PLUS,k,SUB,i,SUB,1,RBRACKET,SEMI,newArray,LBRACKET,j,PLUS,k,SUB,i,SUB,1,RBRACKET,EQ,tmp,SEMI,i,PLUSPLUS,SEMI,RBRACE,RBRACE,RETURN,newArray,SEMI,RBRACE","	public int[] algorithm(int[] array,int k) {
,		int[] newArray = array.clone();
,		if (k<=0){
,			throw new IllegalArgumentException(""k == 0 we need k to be atleast 1 "");
,		}
,		for(int j=0;j+k-1<newArray.length;j+=k){
,			int i=0;
,			while(i<k<MASK>2){
,				int tmp = newArray[j+i];
,				newArray[j+i]= newArray[j+k-i-1];
,				newArray[j+k-i-1]=tmp;
,				i++;
,			}
,		}
,		return newArray;
,	}
"
b5ee7e5e-a7bf-41d4-8880-3ac95d2f8822,798a13b8-38b6-4dc7-b369-2618ef6a19c6,BANGEQ,"PRIVATE,void,buildSearchTree,LPAREN,RPAREN,LBRACE,FeatureIterator,LT,SimpleFeature,GT,iterator,EQ,null,SEMI,TRY,LBRACE,FeatureCollection,LT,SimpleFeatureType,COMMA,SimpleFeature,GT,collection,EQ,source,DOT,getFeatures,LPAREN,RPAREN,SEMI,iterator,EQ,collection,DOT,features,LPAREN,RPAREN,SEMI,WHILE,LPAREN,iterator,DOT,hasNext,LPAREN,RPAREN,RPAREN,LBRACE,SimpleFeature,feature,EQ,iterator,DOT,next,LPAREN,RPAREN,SEMI,geom,EQ,LPAREN,Geometry,RPAREN,feature,DOT,getDefaultGeometry,LPAREN,RPAREN,SEMI,minx,EQ,Math,DOT,min,LPAREN,minx,COMMA,geom,DOT,getEnvelopeInternal,LPAREN,RPAREN,DOT,getMinX,LPAREN,RPAREN,RPAREN,SEMI,miny,EQ,Math,DOT,min,LPAREN,miny,COMMA,geom,DOT,getEnvelopeInternal,LPAREN,RPAREN,DOT,getMinY,LPAREN,RPAREN,RPAREN,SEMI,maxx,EQ,Math,DOT,max,LPAREN,maxx,COMMA,geom,DOT,getEnvelopeInternal,LPAREN,RPAREN,DOT,getMaxX,LPAREN,RPAREN,RPAREN,SEMI,maxy,EQ,Math,DOT,max,LPAREN,maxy,COMMA,geom,DOT,getEnvelopeInternal,LPAREN,RPAREN,DOT,getMaxY,LPAREN,RPAREN,RPAREN,SEMI,index,DOT,insert,LPAREN,geom,DOT,getEnvelopeInternal,LPAREN,RPAREN,COMMA,feature,RPAREN,SEMI,RBRACE,RBRACE,CATCH,LPAREN,NoSuchElementException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,IOException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,FINALLY,LBRACE,IF,LPAREN,iterator,<MASK>,null,RPAREN,LBRACE,iterator,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,RBRACE","	private void buildSearchTree() {
,
,		FeatureIterator<SimpleFeature> iterator = null;
,		
,		try {
,			FeatureCollection<SimpleFeatureType,SimpleFeature> collection = source.getFeatures();
,			iterator = collection.features();
,			while (iterator.hasNext()) {
,				SimpleFeature feature = iterator.next();
,				geom = (Geometry) feature.getDefaultGeometry();
,				minx = Math.min(minx, geom.getEnvelopeInternal().getMinX());
,				miny = Math.min(miny, geom.getEnvelopeInternal().getMinY());
,				maxx = Math.max(maxx, geom.getEnvelopeInternal().getMaxX());
,				maxy = Math.max(maxy, geom.getEnvelopeInternal().getMaxY());
,				index.insert(geom.getEnvelopeInternal(), feature);
,			}
,
,		} catch (NoSuchElementException e) {
,			e.printStackTrace();
,		} catch (IOException e) {
,			e.printStackTrace();
,		} finally {
,			if(iterator <MASK> null){
,				iterator.close();
,			}
,		}
,	}
"
92951106-a87f-4e0c-9019-4852bf22d1be,21bfbacf-3bb5-4665-8952-9b4967ca1f12,PLUS,"PUBLIC,MaxHeap,LPAREN,int,initCapacity,RPAREN,LBRACE,this,DOT,elements,EQ,NEW,int,LBRACKET,initCapacity,<MASK>,1,RBRACKET,SEMI,this,DOT,size,EQ,0,SEMI,RBRACE","    public MaxHeap(int initCapacity) {
,        this.elements = new int[initCapacity <MASK> 1];
,        this.size = 0;
,    }
"
92951106-a87f-4e0c-9019-4852bf22d1be,45615b58-1b98-4d11-9e7c-273f7856659c,PLUS,"PUBLIC,void,print,LPAREN,RPAREN,LBRACE,Node,helper,EQ,this,DOT,first,SEMI,WHILE,LPAREN,helper,BANGEQ,null,RPAREN,LBRACE,System,DOT,out,DOT,print,LPAREN,helper,DOT,value,<MASK>,"" "",RPAREN,SEMI,helper,EQ,helper,DOT,next,SEMI,RBRACE,System,DOT,out,DOT,println,LPAREN,RPAREN,SEMI,RBRACE","	public void print() {
,		Node helper = this.first;
,		
,		while(helper != null) {
,			System.out.print(helper.value <MASK> "" "");
,			helper = helper.next;
,		}
,		System.out.println();
,	}
"
c694737b-29b6-48d5-90c3-b6e0b6d64d88,fe29be69-96a5-46c7-8080-bb329458933c,PERCENT,"PROTECTED,int,getNeighbor,LPAREN,int,cellId,COMMA,Directions,dir,RPAREN,LBRACE,IF,LPAREN,cellId,GT,countCells,LPAREN,RPAREN,SUB,1,RPAREN,LBRACE,RETURN,countCells,LPAREN,RPAREN,SUB,1,SEMI,RBRACE,IF,LPAREN,cellId,LT,0,RPAREN,LBRACE,RETURN,0,SEMI,RBRACE,Vector,LT,Integer,GT,sortedNeighbors,EQ,getSortedNeighbors,LPAREN,cellId,RPAREN,SEMI,IF,LPAREN,dir,EQEQ,Directions,DOT,none,RPAREN,LBRACE,RETURN,cellId,SEMI,RBRACE,ELSE,LBRACE,RETURN,sortedNeighbors,DOT,get,LPAREN,dir,DOT,getValue,LPAREN,RPAREN,<MASK>,6,RPAREN,SEMI,RBRACE,RBRACE","    protected int getNeighbor(int cellId, Directions dir) {
,        if (cellId > countCells() - 1) {
,            return countCells() - 1;
,        }
,        if (cellId < 0) {
,            return 0;
,        }
,        Vector<Integer> sortedNeighbors = getSortedNeighbors(cellId);
,        if (dir == Directions.none) {
,            return cellId;
,        } else {
,            return sortedNeighbors.get(dir.getValue() <MASK> 6);
,        }
,    }
"
a01c84a3-b602-47b9-879e-2c3f4cb148f7,a5a9a0ff-623e-41a8-a07b-c7cf83afd2c6,PERCENT,"MONKEYS_AT,Override,PROTECTED,AbstractHashTableMap,DOT,HashEntryPosition,findEntry,LPAREN,K,key,RPAREN,THROWS,InvalidKeyException,LBRACE,int,avail,EQ,SUB,1,SEMI,checkKey,LPAREN,key,RPAREN,SEMI,int,i,EQ,hashValue,LPAREN,key,RPAREN,SEMI,FINAL,int,j,EQ,i,SEMI,int,k,EQ,0,SEMI,DO,LBRACE,Entry,LT,K,COMMA,V,GT,e,EQ,bucket,LBRACKET,i,RBRACKET,SEMI,IF,LPAREN,e,EQEQ,null,RPAREN,LBRACE,IF,LPAREN,avail,LT,0,RPAREN,LBRACE,avail,EQ,i,SEMI,RBRACE,BREAK,SEMI,RBRACE,ELSE,IF,LPAREN,key,DOT,equals,LPAREN,e,DOT,getKey,LPAREN,RPAREN,RPAREN,RPAREN,LBRACE,RETURN,NEW,AbstractHashTableMap,DOT,HashEntryPosition,LPAREN,i,COMMA,AbstractHashTableMap,DOT,OperationType,DOT,found,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,e,EQEQ,AVAILABLE,RPAREN,LBRACE,IF,LPAREN,avail,LT,0,RPAREN,LBRACE,avail,EQ,i,SEMI,RBRACE,RBRACE,k,PLUSPLUS,SEMI,i,EQ,LPAREN,j,PLUS,constant1,STAR,k,PLUS,constant2,STAR,LPAREN,k,STAR,k,RPAREN,RPAREN,<MASK>,capacity,SEMI,RBRACE,WHILE,LPAREN,i,BANGEQ,j,RPAREN,SEMI,RETURN,NEW,AbstractHashTableMap,DOT,HashEntryPosition,LPAREN,avail,COMMA,AbstractHashTableMap,DOT,OperationType,DOT,notFound,RPAREN,SEMI,RBRACE","    @Override
,    protected AbstractHashTableMap.HashEntryPosition findEntry(K key) throws InvalidKeyException {
,        
,        /**
,         * Para este metodo existen dos problemas que no aparecen para prueba
,         * lineal : que nunca se vuelva a la posicion donde empezamos a buscar 
,         * o que alguno de los elementos de la tabla se quede sin visitar.
,         */
,         
,        int avail = -1;
,        checkKey(key);
,        int i = hashValue(key);
,        final int j = i;
,        int k = 0; //probe number
,        do {
,            Entry<K, V> e = bucket[i];
,            if (e == null) {
,                if (avail < 0) {
,                    avail = i; // key is not in table
,                }
,                break;
,            } else if (key.equals(e.getKey())) // we have found our key
,            {
,                return new AbstractHashTableMap.HashEntryPosition(i, AbstractHashTableMap.OperationType.found); // key found
,            } else if (e == AVAILABLE) { // bucket is deactivated
,                if (avail < 0) {
,                    avail = i; // remember that this slot is available
,                }
,            }
,            k++;
,            i = (j + constant1*k + constant2*(k*k)) <MASK> capacity; // keep looking
,        } while (i != j);
,        return new AbstractHashTableMap.HashEntryPosition(avail, AbstractHashTableMap.OperationType.notFound); // first empty or available slot
,    }
"
0954f048-d73a-4a4b-b43c-366136d8df6b,d78ba3a5-d432-4725-ac18-e35287b11080,SLASH,"PUBLIC,UIOverlay,LPAREN,World,world,RPAREN,LBRACE,this,DOT,world,EQ,world,SEMI,statsDisplayTable,EQ,NEW,Table,LPAREN,RPAREN,SEMI,statsDisplayTable,DOT,setBounds,LPAREN,0,COMMA,0,COMMA,Gdx,DOT,graphics,DOT,getWidth,LPAREN,RPAREN,COMMA,Gdx,DOT,graphics,DOT,getHeight,LPAREN,RPAREN,<MASK>,5,RPAREN,SEMI,font,EQ,NEW,BitmapFont,LPAREN,RPAREN,SEMI,style,EQ,NEW,LabelStyle,LPAREN,font,COMMA,NEW,Color,LPAREN,100,COMMA,100,COMMA,100,COMMA,100,RPAREN,RPAREN,SEMI,level,EQ,NEW,Label,LPAREN,"""",PLUS,OrbGame,DOT,saveFile,DOT,getLevel,LPAREN,OrbGame,DOT,saveFile,DOT,xp,RPAREN,COMMA,style,RPAREN,SEMI,money,EQ,NEW,Label,LPAREN,"""",PLUS,OrbGame,DOT,saveFile,DOT,money,COMMA,style,RPAREN,SEMI,score,EQ,NEW,Label,LPAREN,"""",PLUS,OrbGame,DOT,saveFile,DOT,score,COMMA,style,RPAREN,SEMI,statsDisplayTable,DOT,add,LPAREN,level,RPAREN,SEMI,statsDisplayTable,DOT,add,LPAREN,money,RPAREN,SEMI,statsDisplayTable,DOT,add,LPAREN,score,RPAREN,SEMI,this,DOT,world,DOT,addToMasterTable,LPAREN,statsDisplayTable,RPAREN,SEMI,RBRACE","	public UIOverlay(World world) {
,		this.world = world;
,		
,		statsDisplayTable = new Table();
,		statsDisplayTable.setBounds(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight()<MASK>5);
,		
,		font  = new BitmapFont();
,		style = new LabelStyle(font, new Color(100, 100, 100, 100));
,		
,		level = new Label("""" + OrbGame.saveFile.getLevel(OrbGame.saveFile.xp), style);
,		money = new Label("""" + OrbGame.saveFile.money, style);
,		score = new Label("""" + OrbGame.saveFile.score, style);
,		
,		statsDisplayTable.add(level);
,		statsDisplayTable.add(money);
,		statsDisplayTable.add(score);
,		
,		this.world.addToMasterTable(statsDisplayTable);
,		
,	}
"
31865c5a-965e-4d07-af21-44a51a00ba58,11ffa772-7bfb-44b3-a060-7a68ca8c4dd1,STAR,"PRIVATE,String,evaluateColumns_internalComputation,LPAREN,File,dbSQLDumpFileToTransfer,RPAREN,LBRACE,commonMethod,LPAREN,RPAREN,SEMI,Random,generator,EQ,NEW,Random,LPAREN,System,DOT,currentTimeMillis,LPAREN,RPAREN,RPAREN,SEMI,long,gid,EQ,generator,DOT,nextLong,LPAREN,RPAREN,SEMI,IF,LPAREN,dbSQLDumpFileToTransfer,EQEQ,null,RPAREN,LBRACE,RETURN,""Error: DB dump file incorrectly received"",SEMI,RBRACE,IF,LPAREN,gid,LT,0,RPAREN,gid,EQ,gid,<MASK>,LPAREN,SUB,1,RPAREN,SEMI,dba_factory,DOT,getRiskperColumn,LPAREN,dbSQLDumpFileToTransfer,COMMA,null,COMMA,gid,COMMA,""working_table"",RPAREN,SEMI,RETURN,""ID: --"",PLUS,gid,PLUS,""--"",SEMI,RBRACE","	private String evaluateColumns_internalComputation(
,			 File dbSQLDumpFileToTransfer) {
,
,		// common initialization method
,		commonMethod();
,		
,		Random generator = new Random(System.currentTimeMillis());
,
,		//Generates the ID which will be associated to the evaluation
,		long gid = generator.nextLong();
,
,		if (dbSQLDumpFileToTransfer == null) {
,			return ""Error: DB dump file incorrectly received"";
,		}
,
,		if(gid<0)
,			gid = gid<MASK>(-1);
,		
,		dba_factory.getRiskperColumn(dbSQLDumpFileToTransfer, null, gid, ""working_table"");
,		
,		return ""ID: --""+gid+""--"";
,	}
"
5735492c-ae75-4373-9d1e-6986d063d859,e2f7059b-8835-45d5-9c5c-eb7961fcb836,LT,"MONKEYS_AT,Override,PUBLIC,void,run,LPAREN,RPAREN,LBRACE,TRY,LBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,20,SEMI,i,PLUSPLUS,RPAREN,LBRACE,SYNCHRONIZED,LPAREN,StaticVariableSyn,DOT,CLASS,RPAREN,LBRACE,staticInt,PLUSPLUS,SEMI,IF,LPAREN,staticInt,EQEQ,10,RPAREN,LBRACE,Thread,DOT,sleep,LPAREN,5000,RPAREN,SEMI,RBRACE,System,DOT,err,DOT,println,LPAREN,""["",PLUS,Thread,DOT,currentThread,LPAREN,RPAREN,DOT,getId,LPAREN,RPAREN,PLUS,""]\u5F53i="",PLUS,i,PLUS,""\u83B7\u53D6staticInt \u7684\u503C:"",PLUS,staticInt,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,CATCH,LPAREN,InterruptedException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,RBRACE","	@Override
,	public void run() {
,		try {
,			for (int i = 0; i <MASK> 20; i++) {
,				// 类级别对代码块加锁
,				synchronized (StaticVariableSyn.class) {
,					staticInt++;
,					if (staticInt == 10) {
,						Thread.sleep(5000);
,					}
,					System.err.println(""["" + Thread.currentThread().getId() + ""]当i="" + i + ""获取staticInt 的值:""
,							+ staticInt);
,				}
,			}
,		} catch (InterruptedException e) {
,			e.printStackTrace();
,		}
,	}
"
9b07119d-5d87-44cb-94ac-77a9d4fc6019,6c951e58-c419-4992-b80d-a48b0873ca5d,GT,"PUBLIC,void,autoSigna,LPAREN,String,abrev,RPAREN,LBRACE,int,torn,EQ,this,DOT,getTorn,LPAREN,abrev,RPAREN,SEMI,IF,LPAREN,torn,EQEQ,0,BARBAR,torn,EQEQ,2,RPAREN,LBRACE,autoSignaTorn,LPAREN,abrev,COMMA,0,RPAREN,SEMI,RBRACE,IF,LPAREN,torn,<MASK>,0,RPAREN,LBRACE,autoSignaTorn,LPAREN,abrev,COMMA,1,RPAREN,SEMI,RBRACE,RBRACE","    public void autoSigna(String abrev) {
,
,        int torn = this.getTorn(abrev);
,        if(torn==0 || torn==2)
,        {
,            autoSignaTorn(abrev, 0);
,        }
,        if(torn<MASK>0)
,        {
,            autoSignaTorn(abrev, 1);
,        }
,  
,    }
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,558e0d3d-d925-4813-a3c5-e0e9a1a965af,BANGEQ,"PUBLIC,STATIC,void,PrintCR,LPAREN,RPAREN,LBRACE,FOR,LPAREN,ABObject,LBRACKET,RBRACKET,ab,COLON,CRDictionary,DOT,keySet,LPAREN,RPAREN,RPAREN,LBRACE,int,id1,EQ,ab,LBRACKET,0,RBRACKET,DOT,id,SEMI,int,id2,EQ,ab,LBRACKET,1,RBRACKET,DOT,id,SEMI,ContactRelation,contact,EQ,CRDictionary,DOT,get,LPAREN,ab,RPAREN,SEMI,IF,LPAREN,contact,<MASK>,ContactRelation,DOT,NULL,RPAREN,System,DOT,out,DOT,println,LPAREN,""CR("",PLUS,id1,PLUS,"", "",PLUS,id2,PLUS,"")"",PLUS,"" = "",PLUS,contact,RPAREN,SEMI,RBRACE,RBRACE","    public static void PrintCR()
,    {
,    	for (ABObject[] ab: CRDictionary.keySet())
,    	{
,    		int id1 = ab[0].id;
,            int id2 = ab[1].id;
,            ContactRelation contact = CRDictionary.get(ab);
,            if (contact <MASK> ContactRelation.NULL)
,            	System.out.println(""CR("" + id1 + "", "" + id2 + "")"" + "" = "" + contact);
,    	}
,    }
"
113c5414-6c55-466b-b879-a350ab6e0ca2,9df2ffce-0be0-4de6-b257-3c9ee0f75c9b,EQ,"PUBLIC,void,centerMap,LPAREN,int,x,COMMA,int,y,RPAREN,LBRACE,Point,focus,<MASK>,NEW,Point,LPAREN,TileDisplay,DOT,TILE_SIZE,STAR,x,COMMA,TileDisplay,DOT,TILE_SIZE,STAR,y,RPAREN,SEMI,mapScrHorizontal,DOT,setValue,LPAREN,focus,DOT,x,SUB,LPAREN,scrollPaneMap,DOT,getWidth,LPAREN,RPAREN,SLASH,2,RPAREN,RPAREN,SEMI,mapScrVertical,DOT,setValue,LPAREN,focus,DOT,y,SUB,LPAREN,scrollPaneMap,DOT,getHeight,LPAREN,RPAREN,SLASH,2,RPAREN,RPAREN,SEMI,RBRACE","	public void centerMap(int x, int y){
,		Point focus <MASK> new Point(TileDisplay.TILE_SIZE*x, TileDisplay.TILE_SIZE *y);
,		mapScrHorizontal.setValue(focus.x- (scrollPaneMap.getWidth()/2)); 
,		mapScrVertical.setValue(focus.y - (scrollPaneMap.getHeight()/2));
,	}
"
3bfa0e56-052d-4d0e-a991-ae5ff8933386,8a4dedf8-6c3b-40cd-9c66-edab2825be00,LTEQ,"PUBLIC,int,save,LPAREN,RPAREN,LBRACE,int,nup,EQ,0,SEMI,IF,LPAREN,this,DOT,id,<MASK>,0,BARBAR,BANG,this,DOT,exists,LPAREN,RPAREN,RPAREN,LBRACE,nup,EQ,insert,LPAREN,RPAREN,SEMI,RBRACE,ELSE,LBRACE,nup,EQ,update,LPAREN,RPAREN,SEMI,RBRACE,RETURN,nup,SEMI,RBRACE","    public int save()
,    {
,        int nup =0;
,        if(this.id<MASK>0 || !this.exists())
,        {
,            nup = insert();
,        }
,        else
,        {
,            nup = update();
,        }
,        
,        return nup;
,    }
"
8817b45c-c104-442a-8047-a39e95fe55f2,543f4021-e89c-470d-9b5b-4f0b4b67586e,SUB,"MONKEYS_AT,Override,PROTECTED,void,setPanel,LPAREN,RPAREN,LBRACE,setMaximumSize,LPAREN,NEW,Dimension,LPAREN,LPAREN,int,RPAREN,Toolkit,DOT,getDefaultToolkit,LPAREN,RPAREN,DOT,getScreenSize,LPAREN,RPAREN,DOT,getWidth,LPAREN,RPAREN,<MASK>,15,COMMA,3,STAR,LPAREN,LPAREN,int,RPAREN,Toolkit,DOT,getDefaultToolkit,LPAREN,RPAREN,DOT,getScreenSize,LPAREN,RPAREN,DOT,getHeight,LPAREN,RPAREN,SLASH,4,RPAREN,RPAREN,RPAREN,SEMI,RBRACE","    @Override
,    protected void setPanel() {
,    
,        setMaximumSize(new Dimension((int) Toolkit.getDefaultToolkit().getScreenSize().getWidth() <MASK> 15, 3 * ((int) Toolkit.getDefaultToolkit().getScreenSize().getHeight() / 4)));
,        
,    }
"
ea91ca9d-c4a2-44a2-9a1f-e35ca896736e,8a1fadd5-a168-4cb5-ba3b-f0115d667f0c,LTEQ,"PUBLIC,STATIC,Object,stringToValue,LPAREN,String,string,RPAREN,LBRACE,IF,LPAREN,"""",DOT,equals,LPAREN,string,RPAREN,RPAREN,LBRACE,RETURN,string,SEMI,RBRACE,IF,LPAREN,""true"",DOT,equalsIgnoreCase,LPAREN,string,RPAREN,RPAREN,LBRACE,RETURN,Boolean,DOT,TRUE,SEMI,RBRACE,IF,LPAREN,""false"",DOT,equalsIgnoreCase,LPAREN,string,RPAREN,RPAREN,LBRACE,RETURN,Boolean,DOT,FALSE,SEMI,RBRACE,IF,LPAREN,""null"",DOT,equalsIgnoreCase,LPAREN,string,RPAREN,RPAREN,LBRACE,RETURN,JSONObject,DOT,NULL,SEMI,RBRACE,IF,LPAREN,""0"",DOT,equals,LPAREN,string,RPAREN,RPAREN,LBRACE,RETURN,NEW,Integer,LPAREN,0,RPAREN,SEMI,RBRACE,TRY,LBRACE,char,initial,EQ,string,DOT,charAt,LPAREN,0,RPAREN,SEMI,boolean,negative,EQ,false,SEMI,IF,LPAREN,initial,EQEQ,-,RPAREN,LBRACE,initial,EQ,string,DOT,charAt,LPAREN,1,RPAREN,SEMI,negative,EQ,true,SEMI,RBRACE,IF,LPAREN,initial,EQEQ,0,AMPAMP,string,DOT,charAt,LPAREN,negative,QUES,2,COLON,1,RPAREN,EQEQ,0,RPAREN,LBRACE,RETURN,string,SEMI,RBRACE,IF,LPAREN,LPAREN,initial,GTEQ,0,AMPAMP,initial,<MASK>,9,RPAREN,RPAREN,LBRACE,IF,LPAREN,string,DOT,indexOf,LPAREN,.,RPAREN,GTEQ,0,RPAREN,LBRACE,RETURN,Double,DOT,valueOf,LPAREN,string,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,string,DOT,indexOf,LPAREN,e,RPAREN,LT,0,AMPAMP,string,DOT,indexOf,LPAREN,E,RPAREN,LT,0,RPAREN,LBRACE,Long,myLong,EQ,NEW,Long,LPAREN,string,RPAREN,SEMI,IF,LPAREN,myLong,DOT,longValue,LPAREN,RPAREN,EQEQ,myLong,DOT,intValue,LPAREN,RPAREN,RPAREN,LBRACE,RETURN,NEW,Integer,LPAREN,myLong,DOT,intValue,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,ELSE,LBRACE,RETURN,myLong,SEMI,RBRACE,RBRACE,RBRACE,RBRACE,CATCH,LPAREN,Exception,ignore,RPAREN,LBRACE,RBRACE,RETURN,string,SEMI,RBRACE","    public static Object stringToValue(String string) {
,        if ("""".equals(string)) {
,            return string;
,        }
,        if (""true"".equalsIgnoreCase(string)) {
,            return Boolean.TRUE;
,        }
,        if (""false"".equalsIgnoreCase(string)) {
,            return Boolean.FALSE;
,        }
,        if (""null"".equalsIgnoreCase(string)) {
,            return JSONObject.NULL;
,        }
,        if (""0"".equals(string)) {
,            return new Integer(0);
,        }
,
,// If it might be a number, try converting it. If that doesn't work,
,// return the string.
,
,        try {
,            char initial = string.charAt(0);
,            boolean negative = false;
,            if (initial == '-') {
,                initial = string.charAt(1);
,                negative = true;
,            }
,            if (initial == '0' && string.charAt(negative ? 2 : 1) == '0') {
,                return string;
,            }
,            if ((initial >= '0' && initial <MASK> '9')) {
,                if (string.indexOf('.') >= 0) {
,                    return Double.valueOf(string);
,                } else if (string.indexOf('e') < 0 && string.indexOf('E') < 0) {
,                    Long myLong = new Long(string);
,                    if (myLong.longValue() == myLong.intValue()) {
,                        return new Integer(myLong.intValue());
,                    } else {
,                        return myLong;
,                    }
,                }
,            }
,        }  catch (Exception ignore) {
,        }
,        return string;
,    }
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,98e14242-8ac6-4373-a8b1-bef2332fc987,BANGEQ,"PRIVATE,void,sendDelPropertyMessage,LPAREN,INDIProperty,property,COMMA,String,message,RPAREN,LBRACE,String,mm,EQ,"""",SEMI,IF,LPAREN,message,<MASK>,null,RPAREN,LBRACE,mm,EQ,"" message=\"""",PLUS,message,PLUS,""\"""",SEMI,RBRACE,String,msg,EQ,""<delProperty device=\"""",PLUS,this,DOT,getName,LPAREN,RPAREN,PLUS,""\"" name=\"""",PLUS,property,DOT,getName,LPAREN,RPAREN,PLUS,""\"" timestamp=\"""",PLUS,INDIDateFormat,DOT,getCurrentTimestamp,LPAREN,RPAREN,PLUS,""\"""",PLUS,mm,PLUS,"" />"",SEMI,sendXML,LPAREN,msg,RPAREN,SEMI,RBRACE","  private void sendDelPropertyMessage(INDIProperty property, String message) {
,    String mm = """";
,
,    if (message <MASK> null) {
,      mm = "" message=\"""" + message + ""\"""";
,    }
,
,    String msg = ""<delProperty device=\"""" + this.getName() + ""\"" name=\"""" + property.getName() + ""\"" timestamp=\"""" + INDIDateFormat.getCurrentTimestamp() + ""\"""" + mm + "" />"";
,
,    sendXML(msg);
,  }
"
09478113-8f39-4146-870b-8037a6932443,82baecb9-309b-499c-bc1b-19376eb07077,EQEQ,"PRIVATE,void,OP_BIT,LPAREN,RPAREN,LBRACE,int,iMem,EQ,readOperand,LPAREN,RPAREN,SEMI,int,iVal,EQ,getA,LPAREN,RPAREN,AMP,iMem,SEMI,setNFlag,LPAREN,getBit,LPAREN,iVal,COMMA,7,RPAREN,RPAREN,SEMI,setVFlag,LPAREN,getBit,LPAREN,iVal,COMMA,6,RPAREN,RPAREN,SEMI,setZFlag,LPAREN,iVal,<MASK>,0,RPAREN,SEMI,RBRACE","    private void OP_BIT()
,    {
,        int iMem = readOperand();
,        int iVal = getA() & iMem;
,
,        setNFlag(getBit(iVal, 7));
,        setVFlag(getBit(iVal, 6));
,        setZFlag(iVal <MASK> 0);
,    }
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,b970f85a-8cd7-4133-98ca-e1647abaa2a7,LT,"PROTECTED,boolean,listensToSingleProperty,LPAREN,String,deviceName,RPAREN,LBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,propertiesToListen,DOT,size,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,propertiesToListen,DOT,get,LPAREN,i,RPAREN,DOT,isDevice,LPAREN,deviceName,RPAREN,RPAREN,LBRACE,RETURN,true,SEMI,RBRACE,RBRACE,RETURN,false,SEMI,RBRACE","  protected boolean listensToSingleProperty(String deviceName) {
,    for (int i = 0 ; i <MASK> propertiesToListen.size() ; i++) {
,      if (propertiesToListen.get(i).isDevice(deviceName)) {
,        return true;
,      }
,    }
,
,    return false;
,  }
"
996c2181-63de-4cd4-a997-594ad56489d6,63bbfc5e-0fb2-4a3a-a9c1-966abb21b59d,SLASH,"PRIVATE,STATIC,void,divideArr4MergeSort,LPAREN,int,LBRACKET,RBRACKET,arr,COMMA,int,left,COMMA,int,right,RPAREN,LBRACE,IF,LPAREN,left,LT,right,RPAREN,LBRACE,int,middle,EQ,LPAREN,left,PLUS,right,RPAREN,<MASK>,2,SEMI,divideArr4MergeSort,LPAREN,arr,COMMA,left,COMMA,middle,RPAREN,SEMI,divideArr4MergeSort,LPAREN,arr,COMMA,middle,PLUS,1,COMMA,right,RPAREN,SEMI,merge,LPAREN,arr,COMMA,left,COMMA,middle,COMMA,right,RPAREN,SEMI,RBRACE,RBRACE","	private static void divideArr4MergeSort(int[] arr, int left, int right){
,		if(left < right){
,			int middle = (left + right)<MASK>2;
,			divideArr4MergeSort(arr, left, middle);
,			divideArr4MergeSort(arr, middle+1, right);
,			merge(arr, left, middle, right);
,		}
,	}// a method of merge sort
"
1b82c97a-fe19-4584-bdbc-4f13bb123c10,276bbdf0-bf69-41f2-963e-a0e5c975b163,STAR,"PUBLIC,STATIC,FINAL,double,LBRACKET,RBRACKET,LBRACKET,RBRACKET,mat_times,LPAREN,FINAL,double,LBRACKET,RBRACKET,LBRACKET,RBRACKET,a,COMMA,FINAL,double,LBRACKET,RBRACKET,LBRACKET,RBRACKET,b,RPAREN,THROWS,NRException,LBRACE,int,m,EQ,a,DOT,length,SEMI,int,n,EQ,b,LBRACKET,0,RBRACKET,DOT,length,SEMI,int,l,EQ,a,LBRACKET,0,RBRACKET,DOT,length,SEMI,IF,LPAREN,l,BANGEQ,b,DOT,length,RPAREN,THROW,NEW,NRException,LPAREN,""l != b.length"",RPAREN,SEMI,FINAL,double,LBRACKET,RBRACKET,LBRACKET,RBRACKET,r,EQ,NEW,double,LBRACKET,m,RBRACKET,LBRACKET,n,RBRACKET,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,m,SEMI,i,PLUSPLUS,RPAREN,FOR,LPAREN,int,j,EQ,0,SEMI,j,LT,n,SEMI,j,PLUSPLUS,RPAREN,LBRACE,double,sum,EQ,0.0,SEMI,FOR,LPAREN,int,k,EQ,0,SEMI,k,LT,l,SEMI,k,PLUSPLUS,RPAREN,sum,PLUSEQ,a,LBRACKET,i,RBRACKET,LBRACKET,k,RBRACKET,<MASK>,b,LBRACKET,k,RBRACKET,LBRACKET,j,RBRACKET,SEMI,r,LBRACKET,i,RBRACKET,LBRACKET,j,RBRACKET,EQ,sum,SEMI,RBRACE,RETURN,r,SEMI,RBRACE","    public static final double[][] mat_times(final double[][] a, final double[][] b) throws NRException {
,        int m = a.length;
,        int n = b[0].length;
,        int l = a[0].length;
,        if (l != b.length)
,            throw new NRException(""l != b.length"");
,        final double[][] r = new double[m][n];
,        for (int i = 0; i < m; i++)
,            for (int j = 0; j < n; j++) {
,                double sum = 0.0;
,                for (int k = 0; k < l; k++)
,                    sum += a[i][k] <MASK> b[k][j];
,                r[i][j] = sum;
,            }
,        return r;
,    }
"
27817d3e-5449-46fd-a403-1ed403e709bb,f975392e-5338-4df5-a84d-e24985116132,STAR,"PRIVATE,Value,LT,QUES,GT,readValueRec,LPAREN,RPAREN,THROWS,IOException,LBRACE,FINAL,int,first,EQ,stream,DOT,read,LPAREN,RPAREN,SEMI,IF,LPAREN,first,EQEQ,END_VALUE,RPAREN,LBRACE,RETURN,BVOID,SEMI,RBRACE,ELSE,IF,LPAREN,first,EQEQ,INTEGER_VALUE,RPAREN,LBRACE,int,i,EQ,0,SEMI,boolean,end,EQ,false,SEMI,WHILE,LPAREN,BANG,end,RPAREN,LBRACE,FINAL,int,readInt,EQ,stream,DOT,read,LPAREN,RPAREN,SEMI,IF,LPAREN,readInt,LT,0,RPAREN,LBRACE,THROW,NEW,EOFException,LPAREN,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,readInt,EQEQ,END_VALUE,RPAREN,LBRACE,end,EQ,true,SEMI,RBRACE,ELSE,IF,LPAREN,LPAREN,readInt,GTEQ,0,AMPAMP,readInt,LTEQ,9,RPAREN,BARBAR,LPAREN,i,EQEQ,0,AMPAMP,readInt,EQEQ,-,RPAREN,RPAREN,LBRACE,charBuffer,LBRACKET,i,RBRACKET,EQ,LPAREN,char,RPAREN,readInt,SEMI,i,PLUSPLUS,SEMI,RBRACE,ELSE,LBRACE,THROW,NEW,IOException,LPAREN,""Invalid number format"",RPAREN,SEMI,RBRACE,RBRACE,RETURN,NEW,IntegerValue,LPAREN,Long,DOT,valueOf,LPAREN,NEW,String,LPAREN,charBuffer,COMMA,0,COMMA,i,RPAREN,RPAREN,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,first,EQEQ,LIST_VALUE,RPAREN,LBRACE,FINAL,List,LT,Value,LT,QUES,GTGT,list,EQ,NEW,ArrayList,LT,Value,LT,QUES,GTGT,LPAREN,RPAREN,SEMI,boolean,end,EQ,false,SEMI,WHILE,LPAREN,BANG,end,RPAREN,LBRACE,FINAL,Value,LT,QUES,GT,val,EQ,readValueRec,LPAREN,RPAREN,SEMI,IF,LPAREN,val,EQEQ,BVOID,RPAREN,LBRACE,end,EQ,true,SEMI,RBRACE,ELSE,LBRACE,list,DOT,add,LPAREN,val,RPAREN,SEMI,RBRACE,RBRACE,RETURN,NEW,ListValue,LPAREN,list,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,first,EQEQ,DICTIONARY_VALUE,RPAREN,LBRACE,FINAL,SortedMap,LT,String,COMMA,Value,LT,QUES,GTGT,map,EQ,NEW,TreeMap,LT,String,COMMA,Value,LT,QUES,GTGT,LPAREN,RPAREN,SEMI,String,lastKeyStr,EQ,null,SEMI,boolean,end,EQ,false,SEMI,WHILE,LPAREN,BANG,end,RPAREN,LBRACE,FINAL,Value,LT,QUES,GT,key,EQ,readValueRec,LPAREN,RPAREN,SEMI,IF,LPAREN,key,BANGEQ,BVOID,AMPAMP,BANG,LPAREN,key,INSTANCEOF,StringValue,RPAREN,RPAREN,LBRACE,THROW,NEW,IOException,LPAREN,""Invalid key type"",RPAREN,SEMI,RBRACE,IF,LPAREN,key,EQEQ,BVOID,RPAREN,LBRACE,end,EQ,true,SEMI,RBRACE,ELSE,LBRACE,FINAL,String,currKeyStr,EQ,LPAREN,LPAREN,StringValue,RPAREN,key,RPAREN,DOT,getStringValue,LPAREN,RPAREN,SEMI,IF,LPAREN,lastKeyStr,BANGEQ,null,RPAREN,LBRACE,FINAL,int,cmp,EQ,lastKeyStr,DOT,compareTo,LPAREN,currKeyStr,RPAREN,SEMI,IF,LPAREN,cmp,GT,0,RPAREN,LBRACE,THROW,NEW,IOException,LPAREN,""Unordered dictionary"",RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,cmp,EQEQ,0,RPAREN,LBRACE,THROW,NEW,IOException,LPAREN,""Repeated key in dictionary"",RPAREN,SEMI,RBRACE,RBRACE,lastKeyStr,EQ,currKeyStr,SEMI,FINAL,Value,LT,QUES,GT,val,EQ,readValueRec,LPAREN,RPAREN,SEMI,IF,LPAREN,val,EQEQ,null,RPAREN,LBRACE,THROW,NEW,IOException,LPAREN,""Found key with no associated value"",RPAREN,SEMI,RBRACE,map,DOT,put,LPAREN,NEW,String,LPAREN,LPAREN,byte,LBRACKET,RBRACKET,RPAREN,key,DOT,getValue,LPAREN,RPAREN,COMMA,Bencode,DOT,UTF8,RPAREN,COMMA,val,RPAREN,SEMI,RBRACE,RBRACE,RETURN,NEW,DictionaryValue,LPAREN,map,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,first,GTEQ,STRING_VALUE_FROM,AMPAMP,first,LTEQ,STRING_VALUE_TO,RPAREN,LBRACE,charBuffer,LBRACKET,0,RBRACKET,EQ,LPAREN,char,RPAREN,first,SEMI,int,i,EQ,1,SEMI,boolean,end,EQ,false,SEMI,WHILE,LPAREN,BANG,end,RPAREN,LBRACE,FINAL,int,readInt,EQ,stream,DOT,read,LPAREN,RPAREN,SEMI,IF,LPAREN,readInt,LT,0,RPAREN,LBRACE,THROW,NEW,EOFException,LPAREN,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,readInt,EQEQ,:,RPAREN,LBRACE,end,EQ,true,SEMI,RBRACE,ELSE,IF,LPAREN,readInt,GTEQ,0,AMPAMP,readInt,LTEQ,9,RPAREN,LBRACE,charBuffer,LBRACKET,i,RBRACKET,EQ,LPAREN,char,RPAREN,readInt,SEMI,i,PLUSPLUS,SEMI,RBRACE,ELSE,LBRACE,THROW,NEW,IOException,LPAREN,""Invalid number format"",RPAREN,SEMI,RBRACE,RBRACE,FINAL,long,lsize,EQ,Long,DOT,parseLong,LPAREN,NEW,String,LPAREN,charBuffer,COMMA,0,COMMA,i,RPAREN,RPAREN,SEMI,IF,LPAREN,lsize,GT,Integer,DOT,MAX_VALUE,RPAREN,LBRACE,THROW,NEW,IOException,LPAREN,""String is too long!"",RPAREN,SEMI,RBRACE,FINAL,int,size,EQ,LPAREN,int,RPAREN,lsize,SEMI,IF,LPAREN,byteBuffer,DOT,length,LT,lsize,RPAREN,LBRACE,byteBuffer,EQ,NEW,byte,LBRACKET,Math,DOT,max,LPAREN,size,PLUS,1,COMMA,byteBuffer,DOT,length,<MASK>,2,PLUS,1,RPAREN,RBRACKET,SEMI,RBRACE,FINAL,int,howMany,EQ,stream,DOT,read,LPAREN,byteBuffer,COMMA,0,COMMA,size,RPAREN,SEMI,IF,LPAREN,howMany,BANGEQ,size,RPAREN,LBRACE,THROW,NEW,EOFException,LPAREN,RPAREN,SEMI,RBRACE,RETURN,NEW,StringValue,LPAREN,Arrays,DOT,copyOf,LPAREN,byteBuffer,COMMA,size,RPAREN,RPAREN,SEMI,RBRACE,ELSE,LBRACE,IF,LPAREN,first,EQEQ,SUB,1,RPAREN,LBRACE,RETURN,null,SEMI,RBRACE,ELSE,LBRACE,THROW,NEW,IOException,LPAREN,""Unexpected byte 0x"",PLUS,Integer,DOT,toHexString,LPAREN,first,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,RBRACE","    private Value<?> readValueRec () throws IOException {
,        final int first = stream.read();
,
,        if (first == END_VALUE) {
,            return BVOID;
,
,        } else if (first == INTEGER_VALUE) {
,            int i = 0;
,            boolean end = false;
,            while (!end) {
,                final int readInt = stream.read();
,                if (readInt < 0) {
,                    throw new EOFException();
,                } else if (readInt == END_VALUE) {
,                    end = true;
,                } else if ((readInt >= '0' && readInt <= '9') || (i == 0 && readInt == '-')) {
,                    charBuffer[i] = (char) readInt;
,                    i++;
,                } else {
,                    throw new IOException(""Invalid number format"");
,                }
,            }
,
,            return new IntegerValue(Long.valueOf(new String(charBuffer, 0, i)));
,
,        } else if (first == LIST_VALUE) {
,            final List<Value<?>> list = new ArrayList<Value<?>>();
,
,            boolean end = false;
,            while (!end) {
,                final Value<?> val = readValueRec();
,                if (val == BVOID) {
,                    end = true;
,                } else {
,                    list.add(val);
,                }
,            }
,
,            return new ListValue(list);
,
,        } else if (first == DICTIONARY_VALUE) {
,            final SortedMap<String,Value<?>> map = new TreeMap<String,Value<?>>();
,
,            String lastKeyStr = null;
,
,            boolean end = false;
,            while (!end) {
,                final Value<?> key = readValueRec();
,                if (key != BVOID && !(key instanceof StringValue)) {
,                    throw new IOException(""Invalid key type"");
,                }
,
,                if (key == BVOID) {
,                    end = true;
,                } else {
,                    // Imposes key ordering when reading
,                    final String currKeyStr = ((StringValue) key).getStringValue();
,
,                    if (lastKeyStr != null) {
,                        final int cmp = lastKeyStr.compareTo(currKeyStr);
,                        if (cmp > 0) {
,                            throw new IOException(""Unordered dictionary"");
,                        } else if (cmp == 0) {
,                            throw new IOException(""Repeated key in dictionary"");
,                        }
,                    }
,                    lastKeyStr = currKeyStr;
,
,                    final Value<?> val = readValueRec();
,                    if (val == null) {
,                        throw new IOException(""Found key with no associated value"");
,                    }
,                    map.put(new String((byte[]) key.getValue(), Bencode.UTF8), val);
,                }
,            }
,
,            return new DictionaryValue(map);
,
,        } else if (first >= STRING_VALUE_FROM && first <= STRING_VALUE_TO) {
,
,            charBuffer[0] = (char) first;
,
,            int i = 1;
,            boolean end = false;
,            while (!end) {
,                final int readInt = stream.read();
,                if (readInt < 0) {
,                    throw new EOFException();
,                } else if (readInt == ':') {
,                    end = true;
,                } else if (readInt >= '0' && readInt <= '9') {
,                    charBuffer[i] = (char) readInt;
,                    i++;
,                } else {
,                    throw new IOException(""Invalid number format"");
,                }
,            }
,
,            final long lsize = Long.parseLong(new String(charBuffer, 0, i));
,            if (lsize > Integer.MAX_VALUE) {
,                throw new IOException(""String is too long!"");
,            }
,
,            final int size = (int) lsize;
,            if (byteBuffer.length < lsize) {
,                byteBuffer = new byte[Math.max(size + 1, byteBuffer.length <MASK> 2 + 1)];
,            }
,            final int howMany = stream.read(byteBuffer, 0, size);
,
,            if (howMany != size) {
,                throw new EOFException();
,            }
,
,            return new StringValue(Arrays.copyOf(byteBuffer, size));
,
,        } else {
,            if (first == -1) {
,                return null;
,            } else {
,                throw new IOException(""Unexpected byte 0x"" + Integer.toHexString(first));
,            }
,        }
,    }
"
9b07119d-5d87-44cb-94ac-77a9d4fc6019,71602e23-df8d-491f-8d2b-3158a8a908b3,GT,"PUBLIC,ComboBoxModel,getComboModel,LPAREN,String,tipus,COMMA,boolean,admin,COMMA,byte,mode,RPAREN,LBRACE,DefaultComboBoxModel,model,EQ,NEW,DefaultComboBoxModel,LPAREN,RPAREN,SEMI,String,SQL1,EQ,"""",SEMI,IF,LPAREN,mode,EQEQ,ALL,RPAREN,LBRACE,SQL1,EQ,""SELECT * from tuta_actuacions WHERE tipus='"",PLUS,tipus,PLUS,""'"",SEMI,RBRACE,ELSE,IF,LPAREN,mode,EQEQ,PENDENTS,RPAREN,LBRACE,SQL1,EQ,""SELECT * from tuta_actuacions WHERE tipus='"",PLUS,tipus,PLUS,""' AND simbol!='' and threshold>0"",SEMI,RBRACE,ELSE,LBRACE,RETURN,model,SEMI,RBRACE,TRY,LBRACE,Statement,st,EQ,client,DOT,getMysql,LPAREN,RPAREN,DOT,createStatement,LPAREN,RPAREN,SEMI,ResultSet,rs1,EQ,client,DOT,getMysql,LPAREN,RPAREN,DOT,getResultSet,LPAREN,SQL1,COMMA,st,RPAREN,SEMI,WHILE,LPAREN,rs1,BANGEQ,null,AMPAMP,rs1,DOT,next,LPAREN,RPAREN,RPAREN,LBRACE,int,id,EQ,rs1,DOT,getInt,LPAREN,""id"",RPAREN,SEMI,String,action,EQ,rs1,DOT,getString,LPAREN,""actuacio"",RPAREN,SEMI,boolean,oa,EQ,rs1,DOT,getInt,LPAREN,""nomesAdmin"",RPAREN,<MASK>,0,SEMI,String,forRoles,EQ,rs1,DOT,getString,LPAREN,""roles"",RPAREN,SEMI,ArrayList,listRoles,EQ,StringUtils,DOT,parseStringToArray,LPAREN,forRoles,COMMA,"","",COMMA,StringUtils,DOT,CASE_UPPER,RPAREN,SEMI,IF,LPAREN,admin,BARBAR,LPAREN,LPAREN,BANG,admin,AMPAMP,BANG,oa,RPAREN,AMPAMP,LPAREN,listRoles,DOT,contains,LPAREN,client,DOT,getUserInfo,LPAREN,RPAREN,DOT,getRole,LPAREN,RPAREN,RPAREN,BARBAR,listRoles,DOT,contains,LPAREN,""*"",RPAREN,RPAREN,RPAREN,RPAREN,LBRACE,model,DOT,addElement,LPAREN,action,PLUS,""  ["",PLUS,id,PLUS,""]"",RPAREN,SEMI,RBRACE,RBRACE,IF,LPAREN,rs1,BANGEQ,null,RPAREN,LBRACE,rs1,DOT,close,LPAREN,RPAREN,SEMI,st,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,CATCH,LPAREN,SQLException,ex,RPAREN,LBRACE,Logger,DOT,getLogger,LPAREN,FactoryRules,DOT,CLASS,DOT,getName,LPAREN,RPAREN,RPAREN,DOT,log,LPAREN,Level,DOT,SEVERE,COMMA,null,COMMA,ex,RPAREN,SEMI,RBRACE,RETURN,model,SEMI,RBRACE","    public ComboBoxModel getComboModel(String tipus, boolean admin, byte mode) {
,        DefaultComboBoxModel model = new DefaultComboBoxModel();
,        
,        String SQL1 = """";
,        if(mode==ALL) {
,            SQL1 = ""SELECT * from tuta_actuacions WHERE tipus='""+tipus+""'"";
,        }
,        else if(mode==PENDENTS) {
,            SQL1 = ""SELECT * from tuta_actuacions WHERE tipus='""+tipus+""' AND simbol!='' and threshold<MASK>0"";
,        }
,        else {
,            return model;
,        }
,        try {
,            Statement st = client.getMysql().createStatement();
,            ResultSet rs1 = client.getMysql().getResultSet(SQL1,st); 
,            while (rs1 != null && rs1.next()) {
,                int id = rs1.getInt(""id"");
,                String action = rs1.getString(""actuacio"");
,                boolean oa = rs1.getInt(""nomesAdmin"")>0;
,                String forRoles = rs1.getString(""roles""); 
,                ArrayList listRoles = StringUtils.parseStringToArray(forRoles, "","", StringUtils.CASE_UPPER);
,             
,                if(admin || ((!admin && !oa) && 
,                        (listRoles.contains(client.getUserInfo().getRole()) ||  
,                         listRoles.contains(""*""))   ) )
,                {
,                    model.addElement(action+ ""  [""+id+""]"");       
,                }
,            }
,
,        if(rs1!=null) {
,                rs1.close();
,                st.close();
,            }
,        } catch (SQLException ex) {
,            Logger.getLogger(FactoryRules.class.getName()).log(Level.SEVERE, null, ex);
,        }
,        
,        return model;
,    }
"
113c5414-6c55-466b-b879-a350ab6e0ca2,dc9c2652-bc1d-454e-9ed8-47e54f859151,EQ,"PUBLIC,void,setFuturesightCounter,LPAREN,int,futuresightCounter,RPAREN,LBRACE,this,DOT,futuresightCounter,<MASK>,futuresightCounter,SEMI,RBRACE","	public void setFuturesightCounter(int futuresightCounter) {
,		this.futuresightCounter <MASK> futuresightCounter;
,	}
"
789d219f-7383-4fa6-b72d-81f8985229f6,0a5f03be-1e1d-4823-9495-ee6a292ec24c,EQEQ,"PRIVATE,void,takeTurn,LPAREN,JTable,table,RPAREN,LBRACE,String,playersMarker,SEMI,int,selectedRow,EQ,table,DOT,getSelectedRow,LPAREN,RPAREN,SEMI,int,selectedColumn,EQ,table,DOT,getSelectedColumn,LPAREN,RPAREN,SEMI,Point,selectedLocation,EQ,NEW,Point,LPAREN,selectedRow,COMMA,selectedColumn,RPAREN,SEMI,Player,currentPlayer,EQ,this,DOT,game,DOT,getCurrentPlayer,LPAREN,RPAREN,SEMI,Player,otherPlayer,EQ,this,DOT,game,DOT,getOtherPlayer,LPAREN,RPAREN,SEMI,TRY,LBRACE,IF,LPAREN,this,DOT,game,DOT,getGameType,LPAREN,RPAREN,<MASK>,GameType,DOT,ONE_PLAYER,RPAREN,LBRACE,Point,locationMarkerPlaced,EQ,this,DOT,gameCommands,DOT,playerTakesTurn,LPAREN,currentPlayer,COMMA,selectedLocation,RPAREN,SEMI,playersMarker,EQ,currentPlayer,DOT,getMarker,LPAREN,RPAREN,SEMI,table,DOT,getModel,LPAREN,RPAREN,DOT,setValueAt,LPAREN,playersMarker,COMMA,locationMarkerPlaced,DOT,x,COMMA,locationMarkerPlaced,DOT,y,RPAREN,SEMI,IF,LPAREN,this,DOT,gameOver,LPAREN,RPAREN,RPAREN,LBRACE,RETURN,SEMI,RBRACE,table,DOT,setCellSelectionEnabled,LPAREN,false,RPAREN,SEMI,ListSelectionModel,selectionModel,EQ,table,DOT,getSelectionModel,LPAREN,RPAREN,SEMI,selectionModel,DOT,clearSelection,LPAREN,RPAREN,SEMI,locationMarkerPlaced,EQ,this,DOT,gameCommands,DOT,playerTakesTurn,LPAREN,otherPlayer,COMMA,null,RPAREN,SEMI,playersMarker,EQ,otherPlayer,DOT,getMarker,LPAREN,RPAREN,SEMI,table,DOT,getModel,LPAREN,RPAREN,DOT,setValueAt,LPAREN,playersMarker,COMMA,locationMarkerPlaced,DOT,x,COMMA,locationMarkerPlaced,DOT,y,RPAREN,SEMI,IF,LPAREN,this,DOT,gameOver,LPAREN,RPAREN,RPAREN,LBRACE,RETURN,SEMI,RBRACE,RBRACE,ELSE,LBRACE,Point,locationMarkerPlaced,EQ,this,DOT,gameCommands,DOT,playerTakesTurn,LPAREN,this,DOT,game,DOT,getCurrentPlayer,LPAREN,RPAREN,COMMA,selectedLocation,RPAREN,SEMI,playersMarker,EQ,currentPlayer,DOT,getMarker,LPAREN,RPAREN,SEMI,table,DOT,getModel,LPAREN,RPAREN,DOT,setValueAt,LPAREN,playersMarker,COMMA,locationMarkerPlaced,DOT,x,COMMA,selectedColumn,RPAREN,SEMI,IF,LPAREN,this,DOT,gameOver,LPAREN,RPAREN,RPAREN,LBRACE,RETURN,SEMI,RBRACE,table,DOT,setCellSelectionEnabled,LPAREN,false,RPAREN,SEMI,ListSelectionModel,selectionModel,EQ,table,DOT,getSelectionModel,LPAREN,RPAREN,SEMI,selectionModel,DOT,clearSelection,LPAREN,RPAREN,SEMI,RBRACE,IF,LPAREN,this,DOT,gameOver,LPAREN,RPAREN,RPAREN,LBRACE,RETURN,SEMI,RBRACE,String,promptNextPlayer,EQ,getNextPlayerMessage,LPAREN,this,DOT,game,DOT,getCurrentPlayer,LPAREN,RPAREN,RPAREN,SEMI,this,DOT,jtMessageArea,DOT,setText,LPAREN,promptNextPlayer,RPAREN,SEMI,RBRACE,CATCH,LPAREN,GameException,BAR,Connect4Exception,gex,RPAREN,LBRACE,this,DOT,jtMessageArea,DOT,setText,LPAREN,gex,DOT,getMessage,LPAREN,RPAREN,RPAREN,SEMI,ListSelectionModel,selectionModel,EQ,table,DOT,getSelectionModel,LPAREN,RPAREN,SEMI,selectionModel,DOT,clearSelection,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,Exception,ex,RPAREN,LBRACE,this,DOT,jtMessageArea,DOT,setText,LPAREN,ex,DOT,getMessage,LPAREN,RPAREN,RPAREN,SEMI,ex,DOT,printStackTrace,LPAREN,RPAREN,SEMI,this,DOT,dispose,LPAREN,RPAREN,SEMI,RBRACE,RBRACE","    private void takeTurn(JTable table) {
,        String playersMarker;
,        int selectedRow = table.getSelectedRow();
,        int selectedColumn = table.getSelectedColumn();
,        Point selectedLocation = new Point(selectedRow, selectedColumn);
,
,        Player currentPlayer = this.game.getCurrentPlayer();
,        Player otherPlayer = this.game.getOtherPlayer();
,
,        try {
,
,            if (this.game.getGameType() <MASK> GameType.ONE_PLAYER) {
,                // regular players turn
,                Point locationMarkerPlaced = 
,                this.gameCommands.playerTakesTurn(currentPlayer, selectedLocation);
,                playersMarker = currentPlayer.getMarker();
,                table.getModel().setValueAt(playersMarker, locationMarkerPlaced.x, locationMarkerPlaced.y);
,                if (this.gameOver()) { 
,                    return;
,                }
,              
,                table.setCellSelectionEnabled(false);
,                ListSelectionModel selectionModel = table.getSelectionModel();
,                selectionModel.clearSelection();
,                
,
,                // computers turn
,                locationMarkerPlaced = this.gameCommands.playerTakesTurn(otherPlayer, null);
,                playersMarker = otherPlayer.getMarker();
,                table.getModel().setValueAt(playersMarker, locationMarkerPlaced.x, locationMarkerPlaced.y);
,
,                if (this.gameOver()) { // game won or tied?
,                    return;
,                }
,                
,            } else { 
,                               
,                Point locationMarkerPlaced = this.gameCommands.playerTakesTurn(this.game.getCurrentPlayer(), selectedLocation);
,                playersMarker = currentPlayer.getMarker();
,                table.getModel().setValueAt(playersMarker, locationMarkerPlaced.x, selectedColumn);
,                if (this.gameOver()) { // game won or tied?
,                    return;
,                }
,                
,                table.setCellSelectionEnabled(false);
,                ListSelectionModel selectionModel = table.getSelectionModel();
,                selectionModel.clearSelection();
,            }
,
,            if (this.gameOver()) { // game won or tied?
,                return;
,            }
,
,            String promptNextPlayer = getNextPlayerMessage(this.game.getCurrentPlayer());
,            this.jtMessageArea.setText(promptNextPlayer);
,
,        } catch (GameException | Connect4Exception gex) {
,            this.jtMessageArea.setText(gex.getMessage());
,            ListSelectionModel selectionModel = table.getSelectionModel();
,            selectionModel.clearSelection();
,        } catch (Exception ex) {
,            this.jtMessageArea.setText(ex.getMessage());
,            ex.printStackTrace();
,            this.dispose();
,        }
,    }
"
7bd76208-9b34-4151-9ec4-57c6c52e0fcf,6bc378fc-b98e-402d-9c35-d8890e3240cc,STAR,"void,read_string,LPAREN,int,del,COMMA,Token,token,RPAREN,LBRACE,save_and_next,LPAREN,RPAREN,SEMI,WHILE,LPAREN,current,BANGEQ,del,RPAREN,LBRACE,SWITCH,LPAREN,current,RPAREN,LBRACE,CASE,EOZ,COLON,lexerror,LPAREN,""unfinished string"",COMMA,TK_EOS,RPAREN,SEMI,CONTINUE,SEMI,CASE,
,COLON,CASE,
,COLON,lexerror,LPAREN,""unfinished string"",COMMA,TK_STRING,RPAREN,SEMI,CONTINUE,SEMI,CASE,\,COLON,LBRACE,int,c,SEMI,nextChar,LPAREN,RPAREN,SEMI,SWITCH,LPAREN,current,RPAREN,LBRACE,CASE,a,COLON,c,EQ,,SEMI,BREAK,SEMI,CASE,b,COLON,c,EQ,,SEMI,BREAK,SEMI,CASE,f,COLON,c,EQ,,SEMI,BREAK,SEMI,CASE,n,COLON,c,EQ,
,SEMI,BREAK,SEMI,CASE,r,COLON,c,EQ,
,SEMI,BREAK,SEMI,CASE,t,COLON,c,EQ,	,SEMI,BREAK,SEMI,CASE,v,COLON,c,EQ,,SEMI,BREAK,SEMI,CASE,
,COLON,CASE,
,COLON,save,LPAREN,
,RPAREN,SEMI,inclinenumber,LPAREN,RPAREN,SEMI,CONTINUE,SEMI,CASE,EOZ,COLON,CONTINUE,SEMI,DEFAULT,COLON,LBRACE,IF,LPAREN,BANG,isdigit,LPAREN,current,RPAREN,RPAREN,save_and_next,LPAREN,RPAREN,SEMI,ELSE,LBRACE,int,i,EQ,0,SEMI,c,EQ,0,SEMI,DO,LBRACE,c,EQ,10,<MASK>,c,PLUS,LPAREN,current,SUB,0,RPAREN,SEMI,nextChar,LPAREN,RPAREN,SEMI,RBRACE,WHILE,LPAREN,PLUSPLUS,i,LT,3,AMPAMP,isdigit,LPAREN,current,RPAREN,RPAREN,SEMI,IF,LPAREN,c,GT,UCHAR_MAX,RPAREN,lexerror,LPAREN,""escape sequence too large"",COMMA,TK_STRING,RPAREN,SEMI,save,LPAREN,c,RPAREN,SEMI,RBRACE,CONTINUE,SEMI,RBRACE,RBRACE,save,LPAREN,c,RPAREN,SEMI,nextChar,LPAREN,RPAREN,SEMI,CONTINUE,SEMI,RBRACE,DEFAULT,COLON,save_and_next,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,save_and_next,LPAREN,RPAREN,SEMI,token,DOT,ts,EQ,newstring,LPAREN,buff,COMMA,1,COMMA,nbuff,SUB,2,RPAREN,SEMI,RBRACE","	void read_string(int del, Token token) {
,		save_and_next();
,		while (current != del) {
,			switch (current) {
,			case EOZ:
,				lexerror(""unfinished string"", TK_EOS);
,				continue; /<MASK> to avoid warnings */
,			case '\n':
,			case '\r':
,				lexerror(""unfinished string"", TK_STRING);
,				continue; /* to avoid warnings */
,			case '\\': {
,				int c;
,				nextChar(); /* do not save the `\' */
,				switch (current) {
,				case 'a': /* bell */
,					c = '\u0007';
,					break;
,				case 'b': /* backspace */
,					c = '\b';
,					break;
,				case 'f': /* form feed */
,					c = '\f';
,					break;
,				case 'n': /* newline */
,					c = '\n';
,					break;
,				case 'r': /* carriage return */
,					c = '\r';
,					break;
,				case 't': /* tab */
,					c = '\t';
,					break;
,				case 'v': /* vertical tab */
,					c = '\u000B';
,					break;
,				case '\n': /* go through */
,				case '\r':
,					save('\n');
,					inclinenumber();
,					continue;
,				case EOZ:
,					continue; /* will raise an error next loop */
,				default: {
,					if (!isdigit(current))
,						save_and_next(); /* handles \\, \"", \', and \? */
,					else { /* \xxx */
,						int i = 0;
,						c = 0;
,						do {
,							c = 10 * c + (current - '0');
,							nextChar();
,						} while (++i < 3 && isdigit(current));
,						if (c > UCHAR_MAX)
,							lexerror(""escape sequence too large"", TK_STRING);
,						save(c);
,					}
,					continue;
,				}
,				}
,				save(c);
,				nextChar();
,				continue;
,			}
,			default:
,				save_and_next();
,			}
,		}
,		save_and_next(); /* skip delimiter */
,		token.ts = newstring(buff, 1, nbuff - 2);
,	}
"
e51e2b7d-9086-4673-95b0-e99ccc97151f,c2ece243-a615-4d59-9c1f-b42a57751a2b,SUB,"STATIC,void,copyStreamToStream,LPAREN,InputStream,is,COMMA,OutputStream,os,RPAREN,THROWS,IOException,LBRACE,byte,LBRACKET,RBRACKET,buffer,EQ,NEW,byte,LBRACKET,4096,RBRACKET,SEMI,FOR,LPAREN,int,read,EQ,is,DOT,read,LPAREN,buffer,RPAREN,SEMI,read,BANGEQ,<MASK>,1,SEMI,read,EQ,is,DOT,read,LPAREN,buffer,RPAREN,RPAREN,LBRACE,os,DOT,write,LPAREN,buffer,COMMA,0,COMMA,read,RPAREN,SEMI,RBRACE,os,DOT,flush,LPAREN,RPAREN,SEMI,RBRACE","    static void copyStreamToStream(InputStream is, OutputStream os) 
,            throws IOException {
,        byte[] buffer = new byte[4096];
,        for (int read = is.read(buffer); read != <MASK>1; read = is.read(buffer)) {
,            os.write(buffer, 0, read);
,        }
,        os.flush();
,    }
"
789d219f-7383-4fa6-b72d-81f8985229f6,c4f32de7-fa1a-48f1-b2cb-0f2e7d186054,EQEQ,"PUBLIC,void,initializeForm,LPAREN,RPAREN,LBRACE,IF,LPAREN,this,DOT,game,DOT,getGameType,LPAREN,RPAREN,<MASK>,GameType,DOT,ONE_PLAYER,RPAREN,LBRACE,this,DOT,jLabel2,DOT,setEnabled,LPAREN,false,RPAREN,SEMI,this,DOT,jtPlayer2Name,DOT,setEnabled,LPAREN,false,RPAREN,SEMI,this,DOT,jtPlayer2Name,DOT,setText,LPAREN,""Computer"",RPAREN,SEMI,RBRACE,RBRACE","    public void initializeForm() {
,        if (this.game.getGameType() <MASK> GameType.ONE_PLAYER) {
,            this.jLabel2.setEnabled(false);
,            this.jtPlayer2Name.setEnabled(false);
,            this.jtPlayer2Name.setText(""Computer"");
,        }
,
,    }
"
a4c68a60-241d-4ccc-bb34-58eb273247fe,23f6344e-877e-4d64-9970-dbfda3202fd3,PLUS,"PRIVATE,STATIC,VcsChange,DOT,Type,parseChangeType,LPAREN,String,s,RPAREN,LBRACE,char,added,EQ,A,SEMI,char,copied,EQ,C,SEMI,char,modified,EQ,M,SEMI,char,typeChanged,EQ,T,SEMI,char,unmerged,EQ,U,SEMI,char,unknown,EQ,X,SEMI,char,deleted,EQ,D,SEMI,char,renamed,EQ,R,SEMI,char,c,EQ,s,DOT,charAt,LPAREN,0,RPAREN,SEMI,IF,LPAREN,c,EQEQ,added,BARBAR,c,EQEQ,copied,RPAREN,LBRACE,RETURN,Added,SEMI,RBRACE,ELSE,IF,LPAREN,c,EQEQ,modified,BARBAR,c,EQEQ,typeChanged,BARBAR,c,EQEQ,unmerged,BARBAR,c,EQEQ,unknown,RPAREN,LBRACE,RETURN,Modified,SEMI,RBRACE,ELSE,IF,LPAREN,c,EQEQ,deleted,RPAREN,LBRACE,RETURN,Deleted,SEMI,RBRACE,ELSE,IF,LPAREN,c,EQEQ,renamed,RPAREN,LBRACE,RETURN,Moved,SEMI,RBRACE,ELSE,LBRACE,THROW,NEW,IllegalStateException,LPAREN,""Unknown git change type: "",<MASK>,s,RPAREN,SEMI,RBRACE,RBRACE","	private static VcsChange.Type parseChangeType(String s) {
,		// see ""--diff-filter"" at https://www.kernel.org/pub/software/scm/git/docs/git-log.html
,		char added = 'A';
,		char copied = 'C';
,		char modified = 'M';
,		char typeChanged = 'T';
,		char unmerged = 'U';
,		char unknown = 'X';
,		char deleted = 'D';
,		char renamed = 'R';
,
,		char c = s.charAt(0);
,		if (c == added || c == copied) {
,			return Added;
,		} else if (c == modified || c == typeChanged || c == unmerged || c == unknown) {
,			return Modified;
,		} else if (c == deleted) {
,			return Deleted;
,		} else if (c == renamed) {
,			return Moved;
,		} else {
,			throw new IllegalStateException(""Unknown git change type: "" <MASK> s);
,		}
,	}
"
7bd76208-9b34-4151-9ec4-57c6c52e0fcf,fe047f3f-0f34-439b-a302-fd190b9173e1,GTEQ,"int,singlevaraux,LPAREN,String,n,COMMA,ExpDesc,var,COMMA,int,base,RPAREN,LBRACE,int,v,EQ,searchvar,LPAREN,n,RPAREN,SEMI,IF,LPAREN,v,<MASK>,0,RPAREN,LBRACE,var,DOT,init,LPAREN,LexState,DOT,VLOCAL,COMMA,v,RPAREN,SEMI,IF,LPAREN,base,EQEQ,0,RPAREN,markupval,LPAREN,v,RPAREN,SEMI,RETURN,LexState,DOT,VLOCAL,SEMI,RBRACE,ELSE,LBRACE,IF,LPAREN,prev,EQEQ,null,RPAREN,LBRACE,var,DOT,init,LPAREN,LexState,DOT,VGLOBAL,COMMA,NO_REG,RPAREN,SEMI,RETURN,LexState,DOT,VGLOBAL,SEMI,RBRACE,IF,LPAREN,prev,DOT,singlevaraux,LPAREN,n,COMMA,var,COMMA,0,RPAREN,EQEQ,LexState,DOT,VGLOBAL,RPAREN,RETURN,LexState,DOT,VGLOBAL,SEMI,var,DOT,info,EQ,indexupvalue,LPAREN,n,COMMA,var,RPAREN,SEMI,var,DOT,k,EQ,LexState,DOT,VUPVAL,SEMI,RETURN,LexState,DOT,VUPVAL,SEMI,RBRACE,RBRACE","	int singlevaraux(String n, ExpDesc var, int base) {
,		int v = searchvar(n); /* look up at current level */
,		if (v <MASK> 0) {
,			var.init(LexState.VLOCAL, v);
,			if (base == 0)
,				markupval(v); /* local will be used as an upval */
,			return LexState.VLOCAL;
,		} else { /* not found at current level; try upper one */
,			if (prev == null) { /* no more levels? */
,				/* default is global variable */
,				var.init(LexState.VGLOBAL, NO_REG); 
,				return LexState.VGLOBAL;
,			}
,			if (prev.singlevaraux(n, var, 0) == LexState.VGLOBAL)
,				return LexState.VGLOBAL;
,			var.info = indexupvalue(n, var); /* else was LOCAL or UPVAL */
,			var.k = LexState.VUPVAL; /* upvalue in this level */
,			return LexState.VUPVAL;
,		}
,	}
"
8817b45c-c104-442a-8047-a39e95fe55f2,2a6f2794-727f-427f-acfb-0d508fb68da2,BANGEQ,"MONKEYS_AT,Override,PROTECTED,void,initComponents,LPAREN,RPAREN,LBRACE,GroupLayout,layout,EQ,NEW,GroupLayout,LPAREN,this,RPAREN,SEMI,setLayout,LPAREN,layout,RPAREN,SEMI,ParallelGroup,horizontalParallelGroup,EQ,layout,DOT,createParallelGroup,LPAREN,LEADING,RPAREN,SEMI,SequentialGroup,horizontalSequentialGroup,EQ,layout,DOT,createSequentialGroup,LPAREN,RPAREN,DOT,addGap,LPAREN,gapMinimumSize,COMMA,gapPreferedSize,COMMA,gapMaximumSize,RPAREN,SEMI,ParallelGroup,horizontalParallelGroup2,EQ,layout,DOT,createParallelGroup,LPAREN,LEADING,RPAREN,SEMI,ParallelGroup,verticalParallelGroup,EQ,layout,DOT,createParallelGroup,LPAREN,LEADING,RPAREN,SEMI,SequentialGroup,verticalSequentialGroup,EQ,layout,DOT,createSequentialGroup,LPAREN,RPAREN,DOT,addGap,LPAREN,gapMinimumSize,COMMA,gapPreferedSize,COMMA,gapMaximumSize,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,days,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,SequentialGroup,horizontalLocalSequentialGroup,EQ,layout,DOT,createSequentialGroup,LPAREN,RPAREN,SEMI,ParallelGroup,verticalLocalParallelGroup,EQ,layout,DOT,createParallelGroup,LPAREN,BASELINE,RPAREN,SEMI,days,LBRACKET,i,RBRACKET,EQ,NEW,NotebookDayButton,LBRACKET,7,RBRACKET,SEMI,FOR,LPAREN,int,j,EQ,0,SEMI,j,LT,days,LBRACKET,i,RBRACKET,DOT,length,SEMI,j,PLUSPLUS,RPAREN,LBRACE,days,LBRACKET,i,RBRACKET,LBRACKET,j,RBRACKET,EQ,controller,DOT,getModel,LPAREN,RPAREN,DOT,getDayButton,LPAREN,i,COMMA,j,RPAREN,SEMI,days,LBRACKET,i,RBRACKET,LBRACKET,j,RBRACKET,DOT,setMinimumSize,LPAREN,NEW,Dimension,LPAREN,buttonMinimumHeight,COMMA,buttonMinimumWidth,RPAREN,RPAREN,SEMI,days,LBRACKET,i,RBRACKET,LBRACKET,j,RBRACKET,DOT,setPreferredSize,LPAREN,NEW,Dimension,LPAREN,buttonMinimumHeight,COMMA,buttonMinimumWidth,RPAREN,RPAREN,SEMI,days,LBRACKET,i,RBRACKET,LBRACKET,j,RBRACKET,DOT,setHorizontalAlignment,LPAREN,CENTER,RPAREN,SEMI,days,LBRACKET,i,RBRACKET,LBRACKET,j,RBRACKET,DOT,setVerticalAlignment,LPAREN,CENTER,RPAREN,SEMI,days,LBRACKET,i,RBRACKET,LBRACKET,j,RBRACKET,DOT,addActionListener,LPAREN,NEW,DayPanelButtonActionListener,LPAREN,getLogger,LPAREN,RPAREN,COMMA,days,LBRACKET,i,RBRACKET,LBRACKET,j,RBRACKET,RPAREN,RPAREN,SEMI,horizontalLocalSequentialGroup,DOT,addComponent,LPAREN,days,LBRACKET,i,RBRACKET,LBRACKET,j,RBRACKET,COMMA,DEFAULT_SIZE,COMMA,DEFAULT_SIZE,COMMA,Short,DOT,MAX_VALUE,RPAREN,SEMI,IF,LPAREN,j,<MASK>,days,LBRACKET,i,RBRACKET,DOT,length,RPAREN,horizontalLocalSequentialGroup,DOT,addGap,LPAREN,gapMinimumSize,COMMA,gapPreferedSize,COMMA,gapMaximumSize,RPAREN,SEMI,verticalLocalParallelGroup,DOT,addComponent,LPAREN,days,LBRACKET,i,RBRACKET,LBRACKET,j,RBRACKET,COMMA,DEFAULT_SIZE,COMMA,DEFAULT_SIZE,COMMA,Short,DOT,MAX_VALUE,RPAREN,SEMI,RBRACE,horizontalParallelGroup2,DOT,addGroup,LPAREN,horizontalLocalSequentialGroup,RPAREN,SEMI,verticalSequentialGroup,DOT,addGroup,LPAREN,verticalLocalParallelGroup,RPAREN,SEMI,verticalSequentialGroup,DOT,addGap,LPAREN,gapMinimumSize,COMMA,gapPreferedSize,COMMA,gapMaximumSize,RPAREN,SEMI,RBRACE,horizontalSequentialGroup,DOT,addGroup,LPAREN,horizontalParallelGroup2,RPAREN,SEMI,horizontalSequentialGroup,DOT,addGap,LPAREN,gapMinimumSize,COMMA,gapPreferedSize,COMMA,gapMaximumSize,RPAREN,SEMI,horizontalParallelGroup,DOT,addGroup,LPAREN,horizontalSequentialGroup,RPAREN,SEMI,layout,DOT,setHorizontalGroup,LPAREN,horizontalParallelGroup,RPAREN,SEMI,verticalParallelGroup,DOT,addGroup,LPAREN,verticalSequentialGroup,RPAREN,SEMI,layout,DOT,setVerticalGroup,LPAREN,verticalParallelGroup,RPAREN,SEMI,RBRACE","    @Override
,    protected void initComponents() {
,    
,        GroupLayout layout = new GroupLayout(this);
,        setLayout(layout);
,        
,        ParallelGroup horizontalParallelGroup = layout.createParallelGroup(LEADING);
,        SequentialGroup horizontalSequentialGroup = layout.createSequentialGroup().addGap(gapMinimumSize, gapPreferedSize, gapMaximumSize);
,        ParallelGroup horizontalParallelGroup2 = layout.createParallelGroup(LEADING);
,        
,        ParallelGroup verticalParallelGroup = layout.createParallelGroup(LEADING);
,        SequentialGroup verticalSequentialGroup = layout.createSequentialGroup().addGap(gapMinimumSize, gapPreferedSize, gapMaximumSize);
,        
,        for (int i = 0; i < days.length; i++) {
,            SequentialGroup horizontalLocalSequentialGroup = layout.createSequentialGroup();
,            ParallelGroup verticalLocalParallelGroup = layout.createParallelGroup(BASELINE);
,            days[i] = new NotebookDayButton[7];
,            for (int j = 0; j < days[i].length; j++) {
,                days[i][j] = controller.getModel().getDayButton(i, j);
,                days[i][j].setMinimumSize(new Dimension(buttonMinimumHeight, buttonMinimumWidth));
,                days[i][j].setPreferredSize(new Dimension(buttonMinimumHeight, buttonMinimumWidth));
,                days[i][j].setHorizontalAlignment(CENTER);
,                days[i][j].setVerticalAlignment(CENTER);
,                days[i][j].addActionListener(new DayPanelButtonActionListener(getLogger(), days[i][j]));
,                
,                horizontalLocalSequentialGroup.addComponent(days[i][j], DEFAULT_SIZE, DEFAULT_SIZE, Short.MAX_VALUE);
,                if (j <MASK> days[i].length)
,                    horizontalLocalSequentialGroup.addGap(gapMinimumSize, gapPreferedSize, gapMaximumSize);
,                
,                verticalLocalParallelGroup.addComponent(days[i][j], DEFAULT_SIZE, DEFAULT_SIZE, Short.MAX_VALUE);
,            }
,            
,            horizontalParallelGroup2.addGroup(horizontalLocalSequentialGroup);
,            
,            verticalSequentialGroup.addGroup(verticalLocalParallelGroup);
,            verticalSequentialGroup.addGap(gapMinimumSize, gapPreferedSize, gapMaximumSize);
,        }
,        
,        horizontalSequentialGroup.addGroup(horizontalParallelGroup2);
,        horizontalSequentialGroup.addGap(gapMinimumSize, gapPreferedSize, gapMaximumSize);
,        horizontalParallelGroup.addGroup(horizontalSequentialGroup);
,        layout.setHorizontalGroup(horizontalParallelGroup);
,        
,        verticalParallelGroup.addGroup(verticalSequentialGroup);
,        layout.setVerticalGroup(verticalParallelGroup);
,    }
"
9b07119d-5d87-44cb-94ac-77a9d4fc6019,9156a165-e26e-4b35-a3d1-6cb5532d5d70,LTEQ,"PUBLIC,void,save,LPAREN,RPAREN,LBRACE,IF,LPAREN,this,DOT,idAval,<MASK>,0,RPAREN,LBRACE,String,SQL0,EQ,""INSERT INTO avaluacions SET ensenyament=?, estudis=?"",SEMI,this,DOT,idAval,EQ,client,DOT,getMysql,LPAREN,RPAREN,DOT,preparedUpdateID,LPAREN,SQL0,COMMA,NEW,Object,LBRACKET,RBRACKET,LBRACE,ensenyament,COMMA,estudis,RBRACE,RPAREN,SEMI,RBRACE,ELSE,LBRACE,String,SQL0,EQ,""UPDATE avaluacions SET ensenyament=?, estudis=? WHERE id="",PLUS,idAval,SEMI,client,DOT,getMysql,LPAREN,RPAREN,DOT,preparedUpdate,LPAREN,SQL0,COMMA,NEW,Object,LBRACKET,RBRACKET,LBRACE,ensenyament,COMMA,estudis,RBRACE,RPAREN,SEMI,RBRACE,FOR,LPAREN,String,naval,COLON,getIds,LPAREN,RPAREN,DOT,keySet,LPAREN,RPAREN,RPAREN,LBRACE,IF,LPAREN,getIds,LPAREN,RPAREN,DOT,get,LPAREN,naval,RPAREN,GT,0,RPAREN,LBRACE,update,LPAREN,naval,RPAREN,SEMI,RBRACE,ELSE,LBRACE,insert,LPAREN,naval,RPAREN,SEMI,RBRACE,RBRACE,RBRACE","    public void save() {
,        
,        if(this.idAval<MASK>0)
,        {            
,            String SQL0 = ""INSERT INTO avaluacions SET ensenyament=?, estudis=?"";
,            this.idAval = client.getMysql().preparedUpdateID(SQL0, new Object[]{ensenyament,estudis});
,        }
,        else
,        {
,            String SQL0 = ""UPDATE avaluacions SET ensenyament=?, estudis=? WHERE id=""+idAval;
,            client.getMysql().preparedUpdate(SQL0, new Object[]{ensenyament,estudis});
,        }
,        
,        for(String naval: getIds().keySet())
,        {
,            if(getIds().get(naval)>0)
,            {
,                update(naval);
,            }
,            else
,            {
,                insert(naval);
,            }
,        }
,    }
"
113c5414-6c55-466b-b879-a350ab6e0ca2,ddac55ee-f816-4ba8-a417-ed041f6de2d8,EQ,"PROTECTED,void,setImage,LPAREN,ImageIcon,img,RPAREN,LBRACE,this,DOT,img,<MASK>,img,SEMI,RBRACE","	protected void setImage(ImageIcon img){
,		this.img <MASK> img;
,	}
"
820f9299-0bb8-49c1-976d-16294f96bf51,1844fb00-287a-4d0b-960a-c8426e23a939,GT,"PUBLIC,void,setWidth,LPAREN,int,width,RPAREN,LBRACE,IF,LPAREN,width,<MASK>,0,AMPAMP,width,BANGEQ,this,DOT,width,RPAREN,LBRACE,this,DOT,width,EQ,width,SEMI,RBRACE,RBRACE","    public void setWidth(int width)
,    {
,        
,        if (width <MASK> 0 && width != this.width)
,        {
,            this.width = width;
,            
,        
,        }
,    }
"
63ee1274-7add-4bc5-a057-e2079298f295,617986eb-cc0c-4941-b943-87195677108f,SUB,"PRIVATE,STATIC,void,test9,LPAREN,RPAREN,THROWS,FileNotFoundException,LBRACE,String,input,EQ,""new\n"",PLUS,""pick up key\n"",PLUS,""wait\n"",PLUS,""unlock door with key\n"",PLUS,""wait\n"",PLUS,""go through cell door\n"",PLUS,""quit\n"",PLUS,""y\n"",SEMI,HashMap,LT,Integer,COMMA,String,GT,output,EQ,NEW,HashMap,LT,Integer,COMMA,String,GT,LPAREN,RPAREN,SEMI,boolean,passed,EQ,true,SEMI,TRY,LBRACE,in,EQ,NEW,ByteArrayInputStream,LPAREN,input,DOT,getBytes,LPAREN,RPAREN,RPAREN,SEMI,System,DOT,setIn,LPAREN,in,RPAREN,SEMI,out,EQ,NEW,PrintStream,LPAREN,""testing.txt"",RPAREN,SEMI,System,DOT,setOut,LPAREN,out,RPAREN,SEMI,Game,DOT,main,LPAREN,null,RPAREN,SEMI,RBRACE,CATCH,LPAREN,ExitException,se,RPAREN,LBRACE,RBRACE,CATCH,LPAREN,Exception,e,RPAREN,LBRACE,System,DOT,setOut,LPAREN,stdout,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""Error: "",RPAREN,SEMI,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,passed,EQ,false,SEMI,RBRACE,FINALLY,LBRACE,System,DOT,setOut,LPAREN,stdout,RPAREN,SEMI,MONKEYS_AT,SuppressWarnings,LPAREN,""resource"",RPAREN,Scanner,sc,EQ,NEW,Scanner,LPAREN,NEW,File,LPAREN,""testing.txt"",RPAREN,RPAREN,SEMI,ArrayList,LT,String,GT,testOutput,EQ,NEW,ArrayList,LT,String,GT,LPAREN,RPAREN,SEMI,WHILE,LPAREN,sc,DOT,hasNextLine,LPAREN,RPAREN,RPAREN,LBRACE,testOutput,DOT,add,LPAREN,sc,DOT,nextLine,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,output,DOT,put,LPAREN,13,COMMA,""The guard walks toward your cell."",RPAREN,SEMI,output,DOT,put,LPAREN,14,COMMA,"">> Some time goes by."",RPAREN,SEMI,output,DOT,put,LPAREN,15,COMMA,""The guard peers into the cell, checking that the door is secured, then continues on."",RPAREN,SEMI,output,DOT,put,LPAREN,18,COMMA,"">> Some time goes by."",RPAREN,SEMI,output,DOT,put,LPAREN,20,COMMA,"">> You walk through the cell door."",RPAREN,SEMI,output,DOT,put,LPAREN,23,COMMA,""The guard turns around."",RPAREN,SEMI,output,DOT,put,LPAREN,24,COMMA,""You step out of your cell in full view of the guard."",RPAREN,SEMI,output,DOT,put,LPAREN,25,COMMA,""You have been caught."",RPAREN,SEMI,output,DOT,put,LPAREN,26,COMMA,""YOU LOSE!"",RPAREN,SEMI,output,DOT,put,LPAREN,testOutput,DOT,size,LPAREN,RPAREN,<MASK>,1,COMMA,"">>"",RPAREN,SEMI,IF,LPAREN,passed,RPAREN,LBRACE,FOR,LPAREN,Map,DOT,Entry,LT,Integer,COMMA,String,GT,entry,COLON,output,DOT,entrySet,LPAREN,RPAREN,RPAREN,LBRACE,IF,LPAREN,BANG,testOutput,DOT,get,LPAREN,entry,DOT,getKey,LPAREN,RPAREN,RPAREN,DOT,equals,LPAREN,entry,DOT,getValue,LPAREN,RPAREN,RPAREN,RPAREN,LBRACE,passed,EQ,false,SEMI,System,DOT,out,DOT,println,LPAREN,""test9 failed: Line "",PLUS,entry,DOT,getKey,LPAREN,RPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""\tExpected: "",PLUS,entry,DOT,getValue,LPAREN,RPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""\tReceived: "",PLUS,testOutput,DOT,get,LPAREN,entry,DOT,getKey,LPAREN,RPAREN,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,IF,LPAREN,passed,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""test9 passed"",RPAREN,SEMI,RBRACE,RBRACE,ELSE,LBRACE,System,DOT,out,DOT,println,LPAREN,""test9 failed: error"",RPAREN,SEMI,RBRACE,RBRACE,RBRACE","	private static void test9() throws FileNotFoundException {
,		//Test losing by exiting the cell and being spotted
,		String input = ""new\n"" + ""pick up key\n"" + ""wait\n""
,				+ ""unlock door with key\n"" + ""wait\n"" + ""go through cell door\n"" + ""quit\n"" + ""y\n"";
,
,		HashMap<Integer, String> output = new HashMap<Integer, String>();
,
,		boolean passed = true;
,		try {
,			in = new ByteArrayInputStream(input.getBytes());
,			System.setIn(in);
,			out = new PrintStream(""testing.txt"");
,			System.setOut(out);
,			Game.main(null);
,		} catch (ExitException se) {
,
,		} catch (Exception e) {
,			System.setOut(stdout);
,			System.out.println(""Error: "");
,			e.printStackTrace();
,			passed = false;
,		} finally {
,			System.setOut(stdout);
,			@SuppressWarnings(""resource"")
,			Scanner sc = new Scanner(new File(""testing.txt""));
,			ArrayList<String> testOutput = new ArrayList<String>();
,			while (sc.hasNextLine()) {
,				testOutput.add(sc.nextLine());
,			}
,			
,			//The expected output for specific lines
,			output.put(13,""The guard walks toward your cell."");
,			output.put(14,"">> Some time goes by."");
,			output.put(15,""The guard peers into the cell, checking that the door is secured, then continues on."");
,			output.put(18,"">> Some time goes by."");
,			output.put(20,"">> You walk through the cell door."");
,			output.put(23,""The guard turns around."");
,			output.put(24,""You step out of your cell in full view of the guard."");
,			output.put(25,""You have been caught."");
,			output.put(26,""YOU LOSE!"");
,			output.put(testOutput.size() <MASK> 1, "">>"");
,
,			if (passed) {
,				for (Map.Entry<Integer, String> entry : output.entrySet()) {
,					if (!testOutput.get(entry.getKey())
,							.equals(entry.getValue())) {
,						passed = false;
,						System.out.println(""test9 failed: Line ""
,								+ entry.getKey());
,						System.out.println(""\tExpected: "" + entry.getValue());
,						System.out.println(""\tReceived: ""
,								+ testOutput.get(entry.getKey()));
,					}
,				}
,				if (passed) {
,					System.out.println(""test9 passed"");
,				}
,			} else {
,				System.out.println(""test9 failed: error"");
,			}
,		}
,	}
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,8361692e-0f74-4110-ab4b-8badf48c8b1b,BANGEQ,"MONKEYS_AT,Override,PUBLIC,void,run,LPAREN,RPAREN,LBRACE,TRY,LBRACE,socket,EQ,NEW,ServerSocket,LPAREN,listeningPort,RPAREN,SEMI,RBRACE,CATCH,LPAREN,IOException,e,RPAREN,LBRACE,System,DOT,err,DOT,println,LPAREN,""Could not listen on port: "",PLUS,listeningPort,PLUS,"" (maybe busy)"",RPAREN,SEMI,RETURN,SEMI,RBRACE,System,DOT,err,DOT,println,LPAREN,""Listening to port "",PLUS,listeningPort,RPAREN,SEMI,System,DOT,err,DOT,flush,LPAREN,RPAREN,SEMI,mainThreadRunning,EQ,true,SEMI,WHILE,LPAREN,mainThreadRunning,RPAREN,LBRACE,Socket,clientSocket,SEMI,TRY,LBRACE,clientSocket,EQ,socket,DOT,accept,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,IOException,e,RPAREN,LBRACE,System,DOT,err,DOT,println,LPAREN,""Server has stopped listening to new Client connections"",RPAREN,SEMI,mainThreadRunning,EQ,false,SEMI,RETURN,SEMI,RBRACE,IF,LPAREN,clientSocket,<MASK>,null,RPAREN,LBRACE,IF,LPAREN,acceptClient,LPAREN,clientSocket,RPAREN,RPAREN,LBRACE,INDIClient,client,EQ,NEW,INDIClient,LPAREN,clientSocket,COMMA,this,RPAREN,SEMI,clients,DOT,add,LPAREN,client,RPAREN,SEMI,connectionWithClientEstablished,LPAREN,client,RPAREN,SEMI,RBRACE,ELSE,LBRACE,TRY,LBRACE,clientSocket,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,IOException,e,RPAREN,LBRACE,RBRACE,RBRACE,RBRACE,RBRACE,RBRACE","  @Override
,  public void run() {
,    try {
,      socket = new ServerSocket(listeningPort);
,    } catch (IOException e) {
,      System.err.println(""Could not listen on port: "" + listeningPort + "" (maybe busy)"");
,      return; // The thread will stop
,    }
,
,    System.err.println(""Listening to port "" + listeningPort);
,    System.err.flush();
,
,    mainThreadRunning = true;
,
,    while (mainThreadRunning) {
,      Socket clientSocket;
,
,      try {
,        clientSocket = socket.accept();
,      } catch (IOException e) {
,//   This is usually the escape point of the thread when the server is stopped.
,        System.err.println(""Server has stopped listening to new Client connections"");
,        mainThreadRunning = false;
,        return; // The thread will stop
,      }
,
,      if (clientSocket <MASK> null) {
,        if (acceptClient(clientSocket)) {
,          INDIClient client = new INDIClient(clientSocket, this);
,
,          clients.add(client);
,
,          connectionWithClientEstablished(client);
,        } else {
,          try {
,            clientSocket.close();
,          } catch (IOException e) {
,          }
,
,          // System.err.println(""Client "" + clientSocket.getInetAddress() + "" rejected"");
,        }
,      }
,    }
,  }
"
e03d1a2f-9ec0-4127-b57f-aac96a5f146a,dbdb2f98-a988-46b1-ac51-fc75225b8c6b,STAR,"PUBLIC,int,toMega,LPAREN,double,GB,RPAREN,LBRACE,RETURN,LPAREN,int,RPAREN,Math,DOT,round,LPAREN,LPAREN,Math,DOT,pow,LPAREN,2,COMMA,10,RPAREN,<MASK>,GB,RPAREN,RPAREN,SEMI,RBRACE","    public int toMega ( double GB )
,    {
,
,        return ( int ) Math.round( ( Math.pow( 2, 10 ) <MASK> GB ) );
,    }
"
31865c5a-965e-4d07-af21-44a51a00ba58,e1ab68f5-170f-48cc-9a98-1d024db05f09,GT,"PUBLIC,int,compare,LPAREN,RiskResult,rr1,COMMA,RiskResult,rr2,RPAREN,LBRACE,IF,LPAREN,rr1,DOT,getBinaryCounter,LPAREN,RPAREN,EQEQ,rr2,DOT,getBinaryCounter,LPAREN,RPAREN,RPAREN,LBRACE,RETURN,0,SEMI,RBRACE,ELSE,IF,LPAREN,rr1,DOT,getBinaryCounter,LPAREN,RPAREN,<MASK>,rr2,DOT,getBinaryCounter,LPAREN,RPAREN,RPAREN,LBRACE,RETURN,1,SEMI,RBRACE,ELSE,LBRACE,RETURN,SUB,1,SEMI,RBRACE,RBRACE","			public int compare(RiskResult rr1, RiskResult rr2) {
,				if (rr1.getBinaryCounter() == rr2.getBinaryCounter()) {
,					return 0;
,				} else if (rr1.getBinaryCounter() <MASK> rr2.getBinaryCounter()) {
,					return 1;
,				} else {
,					return -1;
,				}
,			}
"
113c5414-6c55-466b-b879-a350ab6e0ca2,e580cba0-a277-45f8-ad36-2ad12a35008f,EQ,"PUBLIC,void,setWizardUsed,LPAREN,boolean,used,RPAREN,LBRACE,wizardUsed,<MASK>,used,SEMI,RBRACE","	public void setWizardUsed(boolean used) {
,		wizardUsed <MASK> used;
,	}
"
eac7db55-f1c9-4e74-95f6-9c62d4d48b4c,2b80f8d7-49c0-4296-a775-2fd912eddec4,PLUS,"void,draw_point,LPAREN,point,p,RPAREN,LBRACE,Color,c,EQ,colors,LBRACKET,p,DOT,value,<MASK>,3,RBRACKET,SEMI,Graphics,window_gc,EQ,getGraphics,LPAREN,RPAREN,SEMI,buffer_gc,DOT,setColor,LPAREN,c,RPAREN,SEMI,buffer_gc,DOT,fillRect,LPAREN,LPAREN,int,RPAREN,LPAREN,p,DOT,x,STAR,XLEN,RPAREN,COMMA,LPAREN,int,RPAREN,LPAREN,p,DOT,y,STAR,YLEN,RPAREN,COMMA,4,COMMA,4,RPAREN,SEMI,window_gc,DOT,setColor,LPAREN,c,RPAREN,SEMI,window_gc,DOT,fillRect,LPAREN,LPAREN,int,RPAREN,LPAREN,p,DOT,x,STAR,XLEN,RPAREN,COMMA,LPAREN,int,RPAREN,LPAREN,p,DOT,y,STAR,YLEN,RPAREN,COMMA,4,COMMA,4,RPAREN,SEMI,RBRACE","	void draw_point(point p)
,	{
,		Color c = colors[p.value<MASK>3];
,
,		Graphics window_gc = getGraphics();
,		buffer_gc.setColor(c);
,		buffer_gc.fillRect((int)(p.x*XLEN),(int)(p.y*YLEN),4,4);
,		window_gc.setColor(c);
,		window_gc.fillRect((int)(p.x*XLEN),(int)(p.y*YLEN),4,4);
,	}
"
e64c1d9d-97c7-42df-873b-ba28e2c45ccc,71cd8a3e-2783-4686-acc8-586e9469424c,GTEQ,"PUBLIC,ArrayList,LT,Integer,GT,getRow,LPAREN,int,rowIndex,RPAREN,LBRACE,int,i,COMMA,j,COMMA,k,SEMI,int,left,COMMA,right,SEMI,ArrayList,LT,Integer,GT,ret,EQ,NEW,ArrayList,LT,Integer,GT,LPAREN,RPAREN,SEMI,ret,DOT,add,LPAREN,1,RPAREN,SEMI,IF,LPAREN,rowIndex,EQEQ,0,RPAREN,RETURN,ret,SEMI,ret,DOT,add,LPAREN,1,RPAREN,SEMI,FOR,LPAREN,i,EQ,1,SEMI,i,LT,rowIndex,SEMI,i,PLUSPLUS,RPAREN,LBRACE,FOR,LPAREN,j,EQ,ret,DOT,size,LPAREN,RPAREN,SUB,1,SEMI,j,<MASK>,0,SEMI,j,SUBSUB,RPAREN,LBRACE,IF,LPAREN,j,EQEQ,ret,DOT,size,LPAREN,RPAREN,SUB,1,RPAREN,LBRACE,ret,DOT,add,LPAREN,1,RPAREN,SEMI,ret,DOT,set,LPAREN,j,COMMA,ret,DOT,get,LPAREN,j,RPAREN,PLUS,ret,DOT,get,LPAREN,j,SUB,1,RPAREN,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,j,EQEQ,0,RPAREN,LBRACE,ret,DOT,set,LPAREN,0,COMMA,1,RPAREN,SEMI,RBRACE,ELSE,LBRACE,ret,DOT,set,LPAREN,j,COMMA,ret,DOT,get,LPAREN,j,RPAREN,PLUS,ret,DOT,get,LPAREN,j,SUB,1,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,RETURN,ret,SEMI,RBRACE","	public ArrayList<Integer> getRow(int rowIndex) {
,        int i,j,k;
,        int left,right;
,        ArrayList<Integer> ret = new ArrayList<Integer>();
,        ret.add(1);
,        if(rowIndex==0)	return ret;
,        ret.add(1);
,        for(i=1;i<rowIndex;i++)
,        {
,            for(j=ret.size()-1;j<MASK>0;j--)
,            {
,                if(j==ret.size()-1)
,                {
,                	ret.add(1);
,                	ret.set(j,ret.get(j)+ret.get(j-1));
,                }
,                else if(j==0)
,                {
,                	ret.set(0,1);
,                }
,                else
,                {
,                	ret.set(j,ret.get(j)+ret.get(j-1));
,                }
,            }
,            //System.out.println(ret);
,        }
,        return ret;
,    }
"
5883a93b-9479-4dd3-81f5-15604dababbe,96f28623-ca61-4460-a03d-0cc51c3e8856,SLASH,"MONKEYS_AT,Override,PUBLIC,NumberDouble,div,LPAREN,NumberDouble,b,RPAREN,THROWS,AbstractException,LBRACE,RETURN,NEW,NumberDouble,LPAREN,val,<MASK>,b,DOT,val,RPAREN,SEMI,RBRACE","    @Override
,    public NumberDouble div(NumberDouble b) throws AbstractException {
,        return new NumberDouble(val <MASK> b.val);
,    }
"
62a978c0-a836-480d-8f9b-c958fbbc7ff5,330d2a57-f5dc-40f2-9123-2e50563d3f05,SLASH,"PRIVATE,FINAL,void,isaac,LPAREN,RPAREN,LBRACE,int,i,COMMA,x,COMMA,y,SEMI,b,PLUSEQ,PLUSPLUS,c,SEMI,FOR,LPAREN,i,EQ,0,SEMI,i,LT,SIZE,SEMI,PLUSPLUS,i,RPAREN,LBRACE,x,EQ,mem,LBRACKET,i,RBRACKET,SEMI,SWITCH,LPAREN,i,AMP,3,RPAREN,LBRACE,CASE,0,COLON,a,CARETEQ,a,LTLT,13,SEMI,BREAK,SEMI,CASE,1,COLON,a,CARETEQ,a,GTGTGT,6,SEMI,BREAK,SEMI,CASE,2,COLON,a,CARETEQ,a,LTLT,2,SEMI,BREAK,SEMI,CASE,3,COLON,a,CARETEQ,a,GTGTGT,16,SEMI,BREAK,SEMI,RBRACE,a,PLUSEQ,mem,LBRACKET,LPAREN,i,PLUS,SIZE,<MASK>,2,RPAREN,AMP,LPAREN,SIZE,SUB,1,RPAREN,RBRACKET,SEMI,mem,LBRACKET,i,RBRACKET,EQ,y,EQ,mem,LBRACKET,LPAREN,LPAREN,x,RPAREN,AMP,MASK,RPAREN,GTGT,2,RBRACKET,PLUS,a,PLUS,b,SEMI,rsl,LBRACKET,i,RBRACKET,EQ,b,EQ,mem,LBRACKET,LPAREN,LPAREN,y,GTGT,SIZEL,RPAREN,AMP,MASK,RPAREN,GTGT,2,RBRACKET,PLUS,x,SEMI,RBRACE,RBRACE","	private final void isaac () {
,		int i, x, y;
,
,		b += ++c;
,		for (i = 0; i < SIZE; ++i) {
,			x = mem[i];
,			switch (i & 3) {
,			case 0: a ^= a <<  13; break;
,			case 1: a ^= a >>>  6; break;
,			case 2: a ^= a <<   2; break;
,			case 3: a ^= a >>> 16; break;
,			}
,			a += mem[(i + SIZE <MASK> 2) & (SIZE - 1)];
,			mem[i] = y = mem[((x         ) & MASK) >> 2] + a + b;
,			rsl[i] = b = mem[((y >> SIZEL) & MASK) >> 2] + x;
,		}
,	}
"
8ec044ff-9e5c-46c4-ad39-ccc8ad42dd87,7965d533-1bfd-41b1-9400-2772c2d699b7,GT,"PUBLIC,boolean,transListExists,LPAREN,String,date,RPAREN,LBRACE,IF,LPAREN,dates,DOT,indexOf,LPAREN,date,RPAREN,<MASK>,SUB,1,RPAREN,LBRACE,RETURN,true,SEMI,RBRACE,RETURN,false,SEMI,RBRACE","		public boolean transListExists(String date)
,		{
,			if(dates.indexOf(date)<MASK>-1)
,			{
,				return true;
,			}
,			return false;
,		}
"
5ee16f26-d690-4884-9baa-b57e0c8c43d6,2f5ef2af-46f8-4bf7-9af1-c024ab6b6f37,STAR,"PUBLIC,Matrix,multiply,LPAREN,double,lambda,RPAREN,LBRACE,Matrix,result,EQ,NEW,Matrix,LPAREN,height,COMMA,width,RPAREN,SEMI,FOR,LPAREN,int,y,EQ,0,SEMI,y,LT,result,DOT,getHeight,LPAREN,RPAREN,SEMI,y,PLUSPLUS,RPAREN,LBRACE,FOR,LPAREN,int,x,EQ,0,SEMI,x,LT,result,DOT,getWidth,LPAREN,RPAREN,SEMI,x,PLUSPLUS,RPAREN,LBRACE,result,DOT,setValue,LPAREN,x,COMMA,y,COMMA,getValue,LPAREN,x,COMMA,y,RPAREN,<MASK>,lambda,RPAREN,SEMI,RBRACE,RBRACE,RETURN,result,SEMI,RBRACE","	public Matrix multiply(double lambda)
,	{
,		Matrix result = new Matrix(height, width);
,
,		for (int y = 0; y < result.getHeight(); y++) {
,			for (int x = 0; x < result.getWidth(); x++) {
,				result.setValue(x, y, getValue(x, y) <MASK> lambda);
,			}
,		}
,
,		return result;
,
,	}
"
a64abb7e-1e48-4f96-a7b5-816a0922e0f3,6f74dfb2-01ce-4850-a356-0b7ba8847685,LTEQ,"MONKEYS_AT,Override,PUBLIC,MultiLabelOutput,inferenceProcedure,LPAREN,Instance,instance,RPAREN,THROWS,Exception,LBRACE,Instance,tempInstance,EQ,DataUtils,DOT,createInstance,LPAREN,instance,COMMA,instance,DOT,weight,LPAREN,RPAREN,COMMA,instance,DOT,toDoubleArray,LPAREN,RPAREN,RPAREN,SEMI,Comparator,LT,LabelCombinationExtended,GT,probabilityComparator,EQ,NEW,Comparator,LT,LabelCombinationExtended,GT,LPAREN,RPAREN,LBRACE,PUBLIC,int,compare,LPAREN,LabelCombinationExtended,left,COMMA,LabelCombinationExtended,right,RPAREN,LBRACE,double,probabilityLeft,EQ,left,DOT,getP,LPAREN,RPAREN,SEMI,double,probabilityRight,EQ,right,DOT,getP,LPAREN,RPAREN,SEMI,IF,LPAREN,probabilityLeft,GT,probabilityRight,RPAREN,LBRACE,RETURN,SUB,1,SEMI,RBRACE,ELSE,IF,LPAREN,probabilityRight,GT,probabilityLeft,RPAREN,LBRACE,RETURN,PLUS,1,SEMI,RBRACE,ELSE,LBRACE,RETURN,0,SEMI,RBRACE,RBRACE,RBRACE,SEMI,PriorityQueue,LT,LabelCombinationExtended,GT,queue,EQ,NEW,PriorityQueue,LT,LabelCombinationExtended,GT,LPAREN,this,DOT,numLabels,COMMA,probabilityComparator,RPAREN,SEMI,queue,DOT,add,LPAREN,NEW,LabelCombinationExtended,LPAREN,this,DOT,numLabels,COMMA,tempInstance,COMMA,this,RPAREN,RPAREN,SEMI,PriorityQueue,LT,LabelCombinationExtended,GT,unsurvived,EQ,NEW,PriorityQueue,LT,LabelCombinationExtended,GT,LPAREN,this,DOT,numLabels,COMMA,probabilityComparator,RPAREN,SEMI,LabelCombinationExtended,best,EQ,null,SEMI,WHILE,LPAREN,BANG,queue,DOT,isEmpty,LPAREN,RPAREN,RPAREN,LBRACE,LabelCombinationExtended,current,EQ,queue,DOT,poll,LPAREN,RPAREN,SEMI,best,EQ,current,SEMI,IF,LPAREN,best,DOT,getCurrentLabel,LPAREN,RPAREN,EQEQ,this,DOT,numLabels,RPAREN,LBRACE,unsurvived,DOT,clear,LPAREN,RPAREN,SEMI,BREAK,SEMI,RBRACE,Instance,currentInstance,EQ,current,DOT,getInstance,LPAREN,RPAREN,SEMI,int,i,EQ,current,DOT,getCurrentLabel,LPAREN,RPAREN,SEMI,double,p,EQ,this,DOT,ensemble,LBRACKET,i,RBRACKET,DOT,distributionForInstance,LPAREN,currentInstance,RPAREN,LBRACKET,1,RBRACKET,SEMI,LabelCombinationExtended,left,EQ,NEW,LabelCombinationExtended,LPAREN,current,RPAREN,SEMI,left,DOT,setNextLabel,LPAREN,0,COMMA,1,SUB,p,RPAREN,SEMI,boolean,leftAdded,EQ,addToQueue,LPAREN,queue,COMMA,left,RPAREN,SEMI,LabelCombinationExtended,right,EQ,NEW,LabelCombinationExtended,LPAREN,current,RPAREN,SEMI,right,DOT,setNextLabel,LPAREN,1,COMMA,p,RPAREN,SEMI,boolean,rightAdded,EQ,addToQueue,LPAREN,queue,COMMA,right,RPAREN,SEMI,IF,LPAREN,BANG,leftAdded,AMPAMP,BANG,rightAdded,RPAREN,LBRACE,unsurvived,DOT,add,LPAREN,current,RPAREN,SEMI,RBRACE,RBRACE,this,DOT,max,EQ,0.0,SEMI,WHILE,LPAREN,BANG,unsurvived,DOT,isEmpty,LPAREN,RPAREN,RPAREN,LBRACE,LabelCombinationExtended,greedy,EQ,unsurvived,DOT,poll,LPAREN,RPAREN,SEMI,IF,LPAREN,greedy,DOT,getP,LPAREN,RPAREN,<MASK>,this,DOT,max,RPAREN,BREAK,SEMI,greedy,EQ,greedyApproximation,LPAREN,greedy,COMMA,this,DOT,max,RPAREN,SEMI,IF,LPAREN,greedy,DOT,getP,LPAREN,RPAREN,GT,this,DOT,max,RPAREN,LBRACE,best,EQ,greedy,SEMI,max,EQ,best,DOT,getP,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,MultiLabelOutput,result,EQ,NEW,MultiLabelOutput,LPAREN,booleansFromDoubles,LPAREN,best,DOT,getCombination,LPAREN,RPAREN,RPAREN,RPAREN,SEMI,RETURN,result,SEMI,RBRACE","	@Override
,	public MultiLabelOutput inferenceProcedure(Instance instance)
,			throws Exception {
,
,		Instance tempInstance = DataUtils.createInstance(instance,
,				instance.weight(), instance.toDoubleArray());
,		
,		Comparator<LabelCombinationExtended> probabilityComparator = new Comparator<LabelCombinationExtended>() {
,
,			public int compare(LabelCombinationExtended left, LabelCombinationExtended right) {
,				double probabilityLeft = left.getP();
,				double probabilityRight = right.getP();
,
,				if (probabilityLeft > probabilityRight) {
,					return -1;
,				} else if (probabilityRight > probabilityLeft) {
,					return +1;
,				} else { // equal
,					return 0;
,				}
,
,			}
,		};
,
,		PriorityQueue<LabelCombinationExtended> queue = new PriorityQueue<LabelCombinationExtended>(
,				this.numLabels, probabilityComparator);
,		queue.add(new LabelCombinationExtended(this.numLabels, tempInstance, this));
,
,		PriorityQueue<LabelCombinationExtended> unsurvived = new PriorityQueue<LabelCombinationExtended>(
,				this.numLabels, probabilityComparator);
,
,		// double max = minMode;
,		LabelCombinationExtended best = null;
,
,		while (!queue.isEmpty()) {
,
,			LabelCombinationExtended current = queue.poll();
,
,			best = current;
,			if (best.getCurrentLabel() == this.numLabels) {
,				unsurvived.clear(); // the optimal solution has been found
,				break;
,			}
,
,			Instance currentInstance = current.getInstance();
,			
,			int i = current.getCurrentLabel();
,			
,			double p = this.ensemble[i].distributionForInstance(currentInstance)[1];
,
,			LabelCombinationExtended left = new LabelCombinationExtended(current);
,			left.setNextLabel(0, 1 - p);
,			boolean leftAdded = addToQueue(queue, left);
,
,			LabelCombinationExtended right = new LabelCombinationExtended(current);
,			right.setNextLabel(1, p);
,			boolean rightAdded = addToQueue(queue, right);
,
,			if (!leftAdded && !rightAdded) {
,				unsurvived.add(current);
,			}
,		}
,
,		this.max = 0.0;
,		
,		while (!unsurvived.isEmpty()) { // search for approximate solution
,			LabelCombinationExtended greedy = unsurvived.poll();
,			if (greedy.getP() <MASK> this.max)
,				break;
,			greedy = greedyApproximation(greedy, this.max);
,			if (greedy.getP() > this.max) {
,				best = greedy;
,				max = best.getP();
,			}
,		}
,
,		MultiLabelOutput result = new MultiLabelOutput(
,				booleansFromDoubles(best.getCombination())); 
,
,		return result;
,	}
"
bbbc2c49-08b6-473f-979f-87460edf9df9,56f06c7b-0641-483e-b333-902af49c0174,GT,"MONKEYS_AT,Override,PROTECTED,boolean,handleOutgoingEvent,LPAREN,ChannelEvent,oEvent,RPAREN,THROWS,Exception,LBRACE,IF,LPAREN,super,DOT,handleOutgoingEvent,LPAREN,oEvent,RPAREN,RPAREN,RETURN,true,SEMI,IF,LPAREN,BANG,LPAREN,oEvent,INSTANCEOF,ChannelMessageEvent,RPAREN,RPAREN,RETURN,false,SEMI,ChannelMessageEvent,event,EQ,LPAREN,ChannelMessageEvent,RPAREN,oEvent,SEMI,IF,LPAREN,BANG,LPAREN,event,DOT,getMessage,LPAREN,RPAREN,INSTANCEOF,IOBuffer,RPAREN,RPAREN,THROW,NEW,IllegalStateException,LPAREN,""get an unexpected message type"",RPAREN,SEMI,IOBuffer,buffer,EQ,LPAREN,IOBuffer,RPAREN,event,DOT,getMessage,LPAREN,RPAREN,SEMI,ByteBuffer,byteBuffer,EQ,dispatcher,DOT,pollByteBuffer,LPAREN,RPAREN,SEMI,TRY,LBRACE,int,writtenBytes,EQ,buffer,DOT,read,LPAREN,LPAREN,WritableByteChannel,RPAREN,nioChannel,COMMA,byteBuffer,RPAREN,SEMI,IF,LPAREN,writtenBytes,<MASK>,0,RPAREN,fireIncomingEvent,LPAREN,NEW,ChannelBytesWrittenEvent,LPAREN,this,COMMA,writtenBytes,RPAREN,RPAREN,SEMI,RBRACE,FINALLY,LBRACE,dispatcher,DOT,offerByteBuffer,LPAREN,byteBuffer,RPAREN,SEMI,RBRACE,IF,LPAREN,BANG,buffer,DOT,hasReadableBytes,LPAREN,RPAREN,RPAREN,buffer,DOT,free,LPAREN,RPAREN,SEMI,RETURN,BANG,buffer,DOT,hasReadableBytes,LPAREN,RPAREN,SEMI,RBRACE","	@Override
,	protected boolean handleOutgoingEvent(ChannelEvent oEvent) throws Exception
,	{
,		if( super.handleOutgoingEvent(oEvent) )
,			return true;
,
,		if( !(oEvent instanceof ChannelMessageEvent) )
,			return false;
,
,		ChannelMessageEvent event = (ChannelMessageEvent) oEvent;
,
,		if( !(event.getMessage() instanceof IOBuffer) )
,			throw new IllegalStateException(""get an unexpected message type"");
,
,		IOBuffer buffer = (IOBuffer) event.getMessage();
,
,		ByteBuffer byteBuffer = dispatcher.pollByteBuffer();
,		try
,		{
,			int writtenBytes = buffer.read(	(WritableByteChannel) nioChannel,
,														byteBuffer);
,
,			if( writtenBytes <MASK> 0 )
,				fireIncomingEvent(new ChannelBytesWrittenEvent(this, writtenBytes));
,		}
,		finally
,		{
,			dispatcher.offerByteBuffer(byteBuffer);
,		}
,
,		if( !buffer.hasReadableBytes() )
,			buffer.free();
,
,		return !buffer.hasReadableBytes();
,	}
"
2c256aad-07f6-40b2-9094-75e0a779805c,f21cb258-8df8-469c-ac90-18cacae333b1,PERCENT,"PRIVATE,STATIC,List,LT,Player,GT,createListOfPlayers,LPAREN,GameState,gameState,COMMA,StrategicRoundState,strategicRoundState,COMMA,Tuple,LT,Suit,COMMA,Integer,GT,bestTuple,RPAREN,LBRACE,List,LT,Player,GT,players,EQ,NEW,ArrayList,LT,Player,GT,LPAREN,RPAREN,SEMI,Player,me,EQ,NEW,StrategicPlayer,LPAREN,""me"",COMMA,gameState,DOT,numPlayers,COMMA,gameState,DOT,ruleSet,COMMA,bestTuple,RPAREN,SEMI,Hand,LT,Card,GT,myHand,EQ,strategicRoundState,DOT,getMyHand,LPAREN,RPAREN,SEMI,int,myHandLength,EQ,myHand,DOT,size,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,myHandLength,SEMI,i,PLUSPLUS,RPAREN,LBRACE,me,DOT,addCardToHand,LPAREN,myHand,DOT,get,LPAREN,i,RPAREN,RPAREN,SEMI,RBRACE,players,DOT,add,LPAREN,me,RPAREN,SEMI,Hand,LT,Card,GT,otherHands,EQ,strategicRoundState,DOT,getOtherHands,LPAREN,RPAREN,SEMI,int,numCardsPerPlayer,EQ,otherHands,DOT,size,LPAREN,RPAREN,SLASH,LPAREN,gameState,DOT,numPlayers,SUB,1,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,1,SEMI,i,LT,gameState,DOT,numPlayers,SEMI,i,PLUSPLUS,RPAREN,LBRACE,Player,p,EQ,NEW,StrategicPlayer,LPAREN,""P"",PLUS,i,COMMA,gameState,DOT,numPlayers,COMMA,gameState,DOT,ruleSet,COMMA,bestTuple,RPAREN,SEMI,FOR,LPAREN,int,j,EQ,0,SEMI,j,LT,numCardsPerPlayer,SEMI,j,PLUSPLUS,RPAREN,LBRACE,int,cardToRemove,EQ,LPAREN,int,RPAREN,LPAREN,Math,DOT,random,LPAREN,RPAREN,STAR,otherHands,DOT,size,LPAREN,RPAREN,RPAREN,SEMI,p,DOT,addCardToHand,LPAREN,otherHands,DOT,remove,LPAREN,cardToRemove,RPAREN,RPAREN,SEMI,RBRACE,players,DOT,add,LPAREN,p,RPAREN,SEMI,RBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,players,DOT,size,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,players,DOT,get,LPAREN,i,RPAREN,DOT,setLeftPlayer,LPAREN,players,DOT,get,LPAREN,LPAREN,i,PLUS,1,RPAREN,<MASK>,players,DOT,size,LPAREN,RPAREN,RPAREN,DOT,getId,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,RETURN,players,SEMI,RBRACE","	private static List<Player> createListOfPlayers(GameState gameState, StrategicRoundState strategicRoundState, Tuple<Suit, Integer> bestTuple) {
,		
,		List<Player> players = new ArrayList<Player>();
,		
,		Player me = new StrategicPlayer(""me"", gameState.numPlayers, gameState.ruleSet, bestTuple);
,		
,		
,		Hand<Card> myHand = strategicRoundState.getMyHand();
,		
,		int myHandLength = myHand.size();
,		
,		for (int i = 0; i < myHandLength; i++) {
,			me.addCardToHand(myHand.get(i));
,		}
,		
,		players.add(me);
,		
,		Hand<Card> otherHands = strategicRoundState.getOtherHands();
,		
,		int numCardsPerPlayer = otherHands.size()/(gameState.numPlayers-1);
,		
,		for (int i = 1; i < gameState.numPlayers; i++) {
,			
,			Player p = new StrategicPlayer(""P"" + i, gameState.numPlayers, gameState.ruleSet, bestTuple);
,			
,			for (int j = 0; j < numCardsPerPlayer; j++) {
,				int cardToRemove =  (int) (Math.random() * otherHands.size());
,				p.addCardToHand(otherHands.remove(cardToRemove));
,			}
,			
,			players.add(p);
,			
,		}
,	
,		for (int i = 0; i < players.size(); i++) {
,			players.get(i).setLeftPlayer(players.get((i+1) <MASK> players.size()).getId());
,		}
,		
,		return players;
,		
,	}
"
0a4ca423-774e-4648-9a00-98a0346992be,cc7e49af-c865-4946-9801-6739cb038a52,EQEQ,"PUBLIC,STATIC,LT,K,COMMA,V,GT,OrderedMap,LT,K,COMMA,V,GT,sort,LPAREN,FINAL,Map,LT,K,COMMA,V,GT,map,COMMA,FINAL,Comparator,LT,Map,DOT,Entry,LT,K,COMMA,V,GTGT,comparator,RPAREN,LBRACE,IF,LPAREN,map,<MASK>,null,RPAREN,RETURN,NEW,OrderedMap,LT,GT,LPAREN,RPAREN,SEMI,FINAL,List,LT,Map,DOT,Entry,LT,K,COMMA,V,GTGT,listEntries,EQ,NEW,LinkedList,LT,Map,DOT,Entry,LT,K,COMMA,V,GTGT,LPAREN,map,DOT,entrySet,LPAREN,RPAREN,RPAREN,SEMI,IF,LPAREN,comparator,BANGEQ,null,RPAREN,Collections,DOT,sort,LPAREN,listEntries,COMMA,comparator,RPAREN,SEMI,FINAL,OrderedMap,LT,K,COMMA,V,GT,newOrderedMap,EQ,NEW,OrderedMap,LT,K,COMMA,V,GT,LPAREN,RPAREN,SEMI,FOR,LPAREN,FINAL,Map,DOT,Entry,LT,K,COMMA,V,GT,entry,COLON,listEntries,RPAREN,newOrderedMap,DOT,put,LPAREN,entry,DOT,getKey,LPAREN,RPAREN,COMMA,entry,DOT,getValue,LPAREN,RPAREN,RPAREN,SEMI,RETURN,newOrderedMap,SEMI,RBRACE","	public static <K, V> OrderedMap<K, V> sort(final Map<K, V> map, final Comparator<Map.Entry<K, V>> comparator) {
,		if (map <MASK> null) return new OrderedMap<>();
,
,		final List<Map.Entry<K, V>> listEntries = new LinkedList<Map.Entry<K, V>>(map.entrySet());
,
,		if (comparator != null) Collections.sort(listEntries, comparator);
,
,		final OrderedMap<K, V> newOrderedMap = new OrderedMap<K, V>();
,		for (final Map.Entry<K, V> entry : listEntries)
,			newOrderedMap.put(entry.getKey(), entry.getValue());
,
,		return newOrderedMap;
,	}
"
3913c395-db09-4ac4-8282-49a81b6a21f4,c8413a33-3c62-4fc3-a2a0-ea3da5dd6e73,LT,"PUBLIC,void,paint,LPAREN,Graphics2D,g,RPAREN,LBRACE,TRY,LBRACE,gm,DOT,getGameLock,LPAREN,RPAREN,DOT,acquire,LPAREN,RPAREN,SEMI,evBus,DOT,post,LPAREN,NEW,RenderEvent,LPAREN,ticks,PLUSPLUS,RPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,components,DOT,size,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,components,DOT,get,LPAREN,i,RPAREN,DOT,render,LPAREN,g,RPAREN,SEMI,RBRACE,gm,DOT,getGameLock,LPAREN,RPAREN,DOT,release,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,Exception,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,RBRACE","	public void paint(Graphics2D g) {
,		try {
,			gm.getGameLock().acquire();
,			evBus.post(new RenderEvent(ticks++));
,			for (int i = 0; i <MASK> components.size(); i++) {
,				components.get(i).render(g);
,			}
,			gm.getGameLock().release();
,		} catch (Exception e) {
,			e.printStackTrace();
,		}
,	}
"
113c5414-6c55-466b-b879-a350ab6e0ca2,19d0f3fc-496f-4b2f-a217-d8ac63302b07,EQ,"PUBLIC,void,setImgUp,LPAREN,boolean,b,RPAREN,LBRACE,imgUp,<MASK>,b,SEMI,RBRACE","	public void setImgUp(boolean b){
,		imgUp <MASK> b;
,	}
"
a5ecb7e9-82a6-472c-bd23-3a7d67c2868a,66359dbd-c58d-4db5-8bf5-43e9095023bf,PLUS,"MONKEYS_AT,Override,PUBLIC,void,atualizar,LPAREN,Sirene,s,RPAREN,LBRACE,IF,LPAREN,s,EQEQ,objObservado,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""[INFO] A sirene mudou seu estado para: "",<MASK>,objObservado,DOT,getAlerta,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,RBRACE","    @Override
,    public void atualizar(Sirene s) {
,        if (s == objObservado) {
,            System.out.println(""[INFO] A sirene mudou seu estado para: "" <MASK> objObservado.getAlerta());
,        }
,    }
"
ad0a2aad-9ad8-443c-832f-88b9f64460ed,1ecfc463-1a0f-47b4-b2c0-ad43adc35920,EQ,"PUBLIC,void,setLow,LPAREN,RPAREN,LBRACE,solenoid,DOT,set,LPAREN,DoubleSolenoid,DOT,Value,DOT,kForward,RPAREN,SEMI,CommandBase,DOT,driveTrain,DOT,highGear,<MASK>,false,SEMI,RBRACE","    public void setLow() {
,        solenoid.set(DoubleSolenoid.Value.kForward);
,        CommandBase.driveTrain.highGear <MASK> false;
,    }
"
13ade84f-7d2c-4f3f-a13f-aa7abf8a58a5,fb56c8a1-7247-4bc4-9357-49e6152d1bf7,LT,"PUBLIC,boolean,isPalindromeII,LPAREN,String,s,RPAREN,LBRACE,IF,LPAREN,s,EQEQ,null,RPAREN,RETURN,false,SEMI,int,i,EQ,0,SEMI,int,j,EQ,s,DOT,length,LPAREN,RPAREN,SUB,1,SEMI,WHILE,LPAREN,i,<MASK>,j,RPAREN,LBRACE,IF,LPAREN,BANG,Character,DOT,isLetterOrDigit,LPAREN,s,DOT,charAt,LPAREN,i,RPAREN,RPAREN,RPAREN,LBRACE,i,PLUSPLUS,SEMI,CONTINUE,SEMI,RBRACE,IF,LPAREN,BANG,Character,DOT,isLetterOrDigit,LPAREN,s,DOT,charAt,LPAREN,j,RPAREN,RPAREN,RPAREN,LBRACE,j,SUBSUB,SEMI,CONTINUE,SEMI,RBRACE,IF,LPAREN,Character,DOT,toLowerCase,LPAREN,s,DOT,charAt,LPAREN,i,PLUSPLUS,RPAREN,RPAREN,BANGEQ,Character,DOT,toLowerCase,LPAREN,s,DOT,charAt,LPAREN,j,SUBSUB,RPAREN,RPAREN,RPAREN,RETURN,false,SEMI,RBRACE,RETURN,true,SEMI,RBRACE","	public boolean isPalindromeII(String s) {
,		if (s == null)
,			return false;
,
,		int i = 0;
,		int j = s.length() - 1;
,		while (i <MASK> j) {
,			if (!Character.isLetterOrDigit(s.charAt(i))) {
,				i++;
,				continue;
,			}
,			if (!Character.isLetterOrDigit(s.charAt(j))) {
,				j--;
,				continue;
,			}
,			if (Character.toLowerCase(s.charAt(i++)) != Character.toLowerCase(s.charAt(j--)))
,				return false;
,		}
,		return true;
,	}
"
3913c395-db09-4ac4-8282-49a81b6a21f4,4cf9db43-043d-4943-8ed1-47a0e5086f6d,LT,"MONKEYS_AT,Override,PUBLIC,void,update,LPAREN,double,dt,RPAREN,LBRACE,TRY,LBRACE,integrate,LPAREN,dt,RPAREN,SEMI,IF,LPAREN,isNavigating,LPAREN,RPAREN,RPAREN,LBRACE,IF,LPAREN,Point,DOT,distance,LPAREN,x,COMMA,y,COMMA,waypointW,DOT,getX,LPAREN,RPAREN,COMMA,waypointW,DOT,getY,LPAREN,RPAREN,RPAREN,<MASK>,dt,STAR,max_speed,RPAREN,LBRACE,nextWaypoint,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,CATCH,LPAREN,Exception,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,RBRACE","	@Override
,	public void update(double dt) {
,		try {
,			// Integrate movement equations.
,			integrate(dt);
,			
,			// Update waypoint.
,			if (isNavigating()) {
,				if (Point.distance(x, y, waypointW.getX(), waypointW.getY()) <MASK> dt*max_speed) {
,					nextWaypoint();
,				}
,			}
,		} catch (Exception e) {
,			e.printStackTrace();
,		}
,	}
"
38ed5e2e-bfac-4cc9-94e0-5ee38dabb0ca,049e8715-2eea-4edf-acd7-c088f17fbabe,EQEQ,"PUBLIC,Val,get,LPAREN,Object,key,RPAREN,LBRACE,Object,val,EQ,get,LPAREN,tree,COMMA,key,COMMA,hashCode,LPAREN,key,RPAREN,RPAREN,SEMI,IF,LPAREN,val,<MASK>,NO_ELEMENT,RPAREN,RETURN,dflt,SEMI,ELSE,RETURN,LPAREN,Val,RPAREN,val,SEMI,RBRACE","    public Val get(Object key) {
,	Object val = get(tree, key, hashCode(key));
,	if (val <MASK> NO_ELEMENT) return dflt;
,	else return (Val)val;
,    }
"
46553d6c-dc87-4edc-9d46-5b7555c514e8,7dda0103-41d9-418c-885e-31d26ab26e9e,PERCENT,"PUBLIC,STATIC,String,show,LPAREN,int,i,COMMA,FINAL,int,num_bits,RPAREN,LBRACE,int,num_chars,EQ,32,SLASH,num_bits,SEMI,IF,LPAREN,32,<MASK>,num_bits,EQEQ,0,RPAREN,LBRACE,SUBSUB,num_chars,SEMI,RBRACE,FINAL,char,LBRACKET,RBRACKET,buf,EQ,NEW,char,LBRACKET,num_chars,PLUS,1,RBRACKET,SEMI,FINAL,int,radix,EQ,1,LTLT,num_bits,SEMI,FINAL,long,mask,EQ,radix,SUB,1,SEMI,FOR,LPAREN,int,charPos,EQ,num_chars,SEMI,charPos,GTEQ,0,SEMI,SUBSUB,charPos,RPAREN,LBRACE,buf,LBRACKET,charPos,RBRACKET,EQ,ByteUtil,DOT,digits,LBRACKET,LPAREN,int,RPAREN,LPAREN,i,AMP,mask,RPAREN,RBRACKET,SEMI,i,GTGTGTEQ,num_bits,SEMI,RBRACE,RETURN,NEW,String,LPAREN,buf,RPAREN,SEMI,RBRACE","  public static String show( int i, final int num_bits ) {
,    int num_chars = 32 / num_bits;
,
,    if ( 32 <MASK> num_bits == 0 ) {
,      --num_chars;
,    }
,
,    final char[] buf = new char[num_chars + 1];
,    final int radix = 1 << num_bits;
,    final long mask = radix - 1;
,
,    for ( int charPos = num_chars; charPos >= 0; --charPos ) {
,      buf[charPos] = ByteUtil.digits[(int)( i & mask )];
,      i >>>= num_bits;
,    }
,
,    return new String( buf );
,  }
"
13ade84f-7d2c-4f3f-a13f-aa7abf8a58a5,8aae5b1e-38dc-4c41-ac3a-abbdde8a5e90,BANGEQ,"MONKEYS_AT,Override,PUBLIC,String,toString,LPAREN,RPAREN,LBRACE,StringBuilder,sb,EQ,NEW,StringBuilder,LPAREN,RPAREN,SEMI,sb,DOT,append,LPAREN,""{"",RPAREN,SEMI,UndirectedGraphNode,node,EQ,this,SEMI,List,LT,UndirectedGraphNode,GT,set,EQ,NEW,ArrayList,LT,GT,LPAREN,RPAREN,SEMI,LinkedList,LT,UndirectedGraphNode,GT,unvisited,EQ,NEW,LinkedList,LT,GT,LPAREN,RPAREN,SEMI,unvisited,DOT,add,LPAREN,node,RPAREN,SEMI,WHILE,LPAREN,BANG,unvisited,DOT,isEmpty,LPAREN,RPAREN,RPAREN,LBRACE,UndirectedGraphNode,current,EQ,unvisited,DOT,pop,LPAREN,RPAREN,SEMI,set,DOT,add,LPAREN,current,RPAREN,SEMI,FOR,LPAREN,UndirectedGraphNode,n,COLON,current,DOT,neighbors,RPAREN,LBRACE,IF,LPAREN,n,<MASK>,null,AMPAMP,BANG,set,DOT,contains,LPAREN,n,RPAREN,RPAREN,LBRACE,unvisited,DOT,add,LPAREN,n,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,Collections,DOT,sort,LPAREN,set,COMMA,NEW,Comparator,LT,UndirectedGraphNode,GT,LPAREN,RPAREN,LBRACE,MONKEYS_AT,Override,PUBLIC,int,compare,LPAREN,UndirectedGraphNode,o1,COMMA,UndirectedGraphNode,o2,RPAREN,LBRACE,RETURN,o1,DOT,label,SUB,o2,DOT,label,SEMI,RBRACE,RBRACE,RPAREN,SEMI,FOR,LPAREN,UndirectedGraphNode,n,COLON,set,RPAREN,LBRACE,sb,DOT,append,LPAREN,n,DOT,label,RPAREN,DOT,append,LPAREN,"":"",RPAREN,SEMI,FOR,LPAREN,UndirectedGraphNode,neighbor,COLON,n,DOT,neighbors,RPAREN,LBRACE,sb,DOT,append,LPAREN,neighbor,DOT,label,RPAREN,DOT,append,LPAREN,"","",RPAREN,SEMI,RBRACE,sb,DOT,deleteCharAt,LPAREN,sb,DOT,length,LPAREN,RPAREN,SUB,1,RPAREN,SEMI,sb,DOT,append,LPAREN,""#"",RPAREN,SEMI,RBRACE,sb,DOT,deleteCharAt,LPAREN,sb,DOT,length,LPAREN,RPAREN,SUB,1,RPAREN,SEMI,sb,DOT,append,LPAREN,""}"",RPAREN,SEMI,RETURN,sb,DOT,toString,LPAREN,RPAREN,SEMI,RBRACE","	@Override
,	public String toString() {
,		StringBuilder sb = new StringBuilder();
,		sb.append(""{"");
,		UndirectedGraphNode node = this;
,
,		List<UndirectedGraphNode> set = new ArrayList<>();
,		LinkedList<UndirectedGraphNode> unvisited = new LinkedList<>();
,		unvisited.add(node);
,
,		while (!unvisited.isEmpty()) {
,			UndirectedGraphNode current = unvisited.pop();
,			set.add(current);
,			for (UndirectedGraphNode n : current.neighbors) {
,				if (n <MASK> null && !set.contains(n)) {
,					unvisited.add(n);
,				}
,			}
,		}
,
,		Collections.sort(set, new Comparator<UndirectedGraphNode>() {
,			@Override
,			public int compare(UndirectedGraphNode o1, UndirectedGraphNode o2) {
,				return o1.label - o2.label;
,			}
,		});
,
,		for (UndirectedGraphNode n : set) {
,			sb.append(n.label).append("":"");
,			for (UndirectedGraphNode neighbor : n.neighbors) {
,				sb.append(neighbor.label).append("","");
,			}
,			sb.deleteCharAt(sb.length() - 1);
,			sb.append(""#"");
,		}
,		sb.deleteCharAt(sb.length() - 1);
,		sb.append(""}"");
,		return sb.toString();
,	}
"
b792a0be-4219-4d3e-95ef-36bcf8d3d523,3edb3d41-24b7-4870-9170-5736db42c9a6,GTEQ,"MONKEYS_AT,Override,PUBLIC,boolean,hasNext,LPAREN,RPAREN,LBRACE,IF,LPAREN,position,<MASK>,buttonLinkCommands,DOT,size,LPAREN,RPAREN,BARBAR,buttonLinkCommands,EQEQ,null,RPAREN,LBRACE,RETURN,false,SEMI,RBRACE,ELSE,LBRACE,RETURN,true,SEMI,RBRACE,RBRACE","	@Override
,	public boolean hasNext() 
,	{
,		if (position <MASK> buttonLinkCommands.size() || buttonLinkCommands == null) {
,			return false;
,		} else {
,			return true;
,		}
,	}
"
875ed1bc-1c92-4cd5-aec8-a5e68ef60cdc,f39fd9a4-5e06-41bf-8e1c-a722e71a68ad,STAR,"MONKEYS_AT,Override,PUBLIC,int,hashCode,LPAREN,RPAREN,LBRACE,int,hash,EQ,7,SEMI,hash,EQ,59,<MASK>,hash,PLUS,LPAREN,this,DOT,value,BANGEQ,null,QUES,this,DOT,value,DOT,hashCode,LPAREN,RPAREN,COLON,0,RPAREN,SEMI,RETURN,hash,SEMI,RBRACE","    @Override
,    public int hashCode() {
,        int hash = 7;
,        hash = 59 <MASK> hash + (this.value != null ? this.value.hashCode() : 0);
,        return hash;
,    }
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,15a57c92-13f4-43fd-808d-1ca8c9ddcdd9,BANGEQ,"PUBLIC,STATIC,String,encodeBytes,LPAREN,byte,LBRACKET,RBRACKET,source,COMMA,int,off,COMMA,int,len,RPAREN,LBRACE,String,encoded,EQ,null,SEMI,TRY,LBRACE,encoded,EQ,encodeBytes,LPAREN,source,COMMA,off,COMMA,len,COMMA,NO_OPTIONS,RPAREN,SEMI,RBRACE,CATCH,LPAREN,java,DOT,io,DOT,IOException,ex,RPAREN,LBRACE,assert,false,COLON,ex,DOT,getMessage,LPAREN,RPAREN,SEMI,RBRACE,assert,encoded,<MASK>,null,SEMI,RETURN,encoded,SEMI,RBRACE","  public static String encodeBytes(byte[] source, int off, int len) {
,    // Since we're not going to have the GZIP encoding turned on,
,    // we're not going to have an java.io.IOException thrown, so
,    // we should not force the user to have to catch it.
,    String encoded = null;
,    try {
,      encoded = encodeBytes(source, off, len, NO_OPTIONS);
,    } catch (java.io.IOException ex) {
,      assert false : ex.getMessage();
,    }   // end catch
,    assert encoded <MASK> null;
,    return encoded;
,  }   // end encodeBytes
"
b5ee7e5e-a7bf-41d4-8880-3ac95d2f8822,28d8a90e-0f60-4d39-b997-e47a9900dee1,PLUS,"PUBLIC,void,clean,LPAREN,RPAREN,LBRACE,TRY,LBRACE,DatabaseMetaData,md,EQ,conn,DOT,getMetaData,LPAREN,RPAREN,SEMI,ResultSet,rs,EQ,md,DOT,getTables,LPAREN,null,COMMA,null,COMMA,""%"",COMMA,null,RPAREN,SEMI,stmt,EQ,conn,DOT,createStatement,LPAREN,RPAREN,SEMI,WHILE,LPAREN,rs,DOT,next,LPAREN,RPAREN,RPAREN,LBRACE,String,name,EQ,rs,DOT,getString,LPAREN,3,RPAREN,SEMI,IF,LPAREN,name,DOT,contains,LPAREN,""T1564915759"",RPAREN,BARBAR,name,DOT,contains,LPAREN,""T2003359763"",RPAREN,BARBAR,name,DOT,contains,LPAREN,""T2078457880"",RPAREN,BARBAR,name,DOT,contains,LPAREN,""T225294351"",RPAREN,BARBAR,name,DOT,contains,LPAREN,""T300392468"",RPAREN,BARBAR,name,DOT,contains,LPAREN,""T375490585"",RPAREN,BARBAR,name,DOT,contains,LPAREN,""T450588702"",RPAREN,BARBAR,name,DOT,contains,LPAREN,""T525686819"",RPAREN,BARBAR,name,DOT,contains,LPAREN,""T600784936"",RPAREN,BARBAR,name,DOT,contains,LPAREN,""T675883053"",RPAREN,BARBAR,name,DOT,contains,LPAREN,""T75098117"",RPAREN,BARBAR,name,DOT,contains,LPAREN,""T826079287"",RPAREN,BARBAR,name,DOT,contains,LPAREN,""T964130823"",RPAREN,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,name,RPAREN,SEMI,stmt,DOT,executeUpdate,LPAREN,""DROP TABLE "",<MASK>,name,RPAREN,SEMI,RBRACE,RBRACE,stmt,DOT,close,LPAREN,RPAREN,SEMI,conn,DOT,commit,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,SQLException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,RBRACE","	public void clean() {
,		try {
,			DatabaseMetaData md = conn.getMetaData();
,			ResultSet rs = md.getTables(null, null, ""%"", null);
,			stmt = conn.createStatement();
,			while (rs.next()) {
,				String name = rs.getString(3);
,				if (name.contains(""T1564915759"")
,						|| name.contains(""T2003359763"")
,						|| name.contains(""T2078457880"")
,						|| name.contains(""T225294351"")
,						|| name.contains(""T300392468"")
,						|| name.contains(""T375490585"")
,						|| name.contains(""T450588702"")
,						|| name.contains(""T525686819"")
,						|| name.contains(""T600784936"")
,						|| name.contains(""T675883053"")
,						|| name.contains(""T75098117"")
,						|| name.contains(""T826079287"")
,						|| name.contains(""T964130823"")) {
,					System.out.println(name);
,					stmt.executeUpdate(""DROP TABLE "" <MASK> name);
,				}
,			}
,			stmt.close();
,			conn.commit();
,
,		} catch (SQLException e) {
,			e.printStackTrace();
,		}
,	}
"
113c5414-6c55-466b-b879-a350ab6e0ca2,b600465e-9a07-4b9f-8132-ec77c94c05a4,EQ,"PUBLIC,void,setPlayerSpawn,LPAREN,Point,spawn,RPAREN,LBRACE,this,DOT,spawn,<MASK>,spawn,SEMI,RBRACE","	public void setPlayerSpawn(Point spawn) {
,		this.spawn <MASK> spawn;
,	}
"
5ee16f26-d690-4884-9baa-b57e0c8c43d6,3b0ec6e0-e9d4-4655-b37b-7e5172a56bb4,STAR,"PUBLIC,FrechetDialog2,LPAREN,FINAL,Content,content,RPAREN,LBRACE,List,LT,Editable,GT,lines,EQ,content,DOT,getLines,LPAREN,RPAREN,SEMI,IF,LPAREN,lines,DOT,size,LPAREN,RPAREN,LT,2,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""not enough lines"",RPAREN,SEMI,RETURN,SEMI,RBRACE,System,DOT,out,DOT,println,LPAREN,""showing frechet diagram"",RPAREN,SEMI,line1,EQ,lines,DOT,get,LPAREN,0,RPAREN,SEMI,line2,EQ,lines,DOT,get,LPAREN,1,RPAREN,SEMI,int,maxEpsilon,EQ,300,SEMI,FINAL,JSlider,slider,EQ,NEW,JSlider,LPAREN,0,COMMA,maxEpsilon,RPAREN,SEMI,slider,DOT,setPaintLabels,LPAREN,true,RPAREN,SEMI,slider,DOT,setPaintTicks,LPAREN,true,RPAREN,SEMI,slider,DOT,setMajorTickSpacing,LPAREN,10,RPAREN,SEMI,slider,DOT,setValue,LPAREN,epsilon,RPAREN,SEMI,slider,DOT,setBorder,LPAREN,NEW,TitledBorder,LPAREN,""epsilon"",RPAREN,RPAREN,SEMI,diagram,EQ,NEW,FrechetDiagram,LPAREN,epsilon,COMMA,line1,COMMA,line2,RPAREN,SEMI,diagram,DOT,setBorder,LPAREN,NEW,TitledBorder,LPAREN,""Free space"",RPAREN,RPAREN,SEMI,lineView,EQ,NEW,LineView,LPAREN,epsilon,COMMA,line1,COMMA,line2,COMMA,true,COMMA,false,COMMA,true,COMMA,false,RPAREN,SEMI,ControlledLineView,controlledLineView,EQ,NEW,ControlledLineView,LPAREN,lineView,RPAREN,SEMI,controlledLineView,DOT,setBorder,LPAREN,NEW,TitledBorder,LPAREN,""Curves"",RPAREN,RPAREN,SEMI,GridBagConstraints,c,EQ,NEW,GridBagConstraints,LPAREN,RPAREN,SEMI,c,DOT,fill,EQ,GridBagConstraints,DOT,BOTH,SEMI,c,DOT,weightx,EQ,c,DOT,weighty,EQ,1.0,SEMI,JPanel,panel,EQ,NEW,JPanel,LPAREN,NEW,GridBagLayout,LPAREN,RPAREN,RPAREN,SEMI,c,DOT,weighty,EQ,0.0,SEMI,c,DOT,gridx,EQ,0,SEMI,c,DOT,gridy,EQ,0,SEMI,c,DOT,gridwidth,EQ,2,SEMI,panel,DOT,add,LPAREN,slider,COMMA,c,RPAREN,SEMI,c,DOT,weighty,EQ,1.0,SEMI,c,DOT,gridwidth,EQ,1,SEMI,c,DOT,gridy,EQ,1,SEMI,c,DOT,gridx,EQ,0,SEMI,panel,DOT,add,LPAREN,diagram,COMMA,c,RPAREN,SEMI,c,DOT,weightx,EQ,0.0,SEMI,c,DOT,gridx,EQ,1,SEMI,panel,DOT,add,LPAREN,controlledLineView,COMMA,c,RPAREN,SEMI,FINAL,JDialog,dialog,EQ,NEW,JDialog,LPAREN,LPAREN,JFrame,RPAREN,null,COMMA,""Fr\u00E9chet distance"",RPAREN,SEMI,dialog,DOT,setContentPane,LPAREN,panel,RPAREN,SEMI,dialog,DOT,setSize,LPAREN,850,COMMA,450,RPAREN,SEMI,dialog,DOT,setVisible,LPAREN,true,RPAREN,SEMI,slider,DOT,addChangeListener,LPAREN,NEW,EpsilonChangedListener,LPAREN,diagram,RPAREN,RPAREN,SEMI,slider,DOT,addChangeListener,LPAREN,NEW,EpsilonChangedListener,LPAREN,lineView,RPAREN,RPAREN,SEMI,content,DOT,addContentChangedListener,LPAREN,this,RPAREN,SEMI,dialog,DOT,addWindowListener,LPAREN,NEW,WindowAdapter,LPAREN,RPAREN,LBRACE,PUBLIC,void,windowClosing,LPAREN,WindowEvent,e,RPAREN,LBRACE,content,DOT,removeContentChangedListener,LPAREN,FrechetDialog2,DOT,this,RPAREN,SEMI,RBRACE,RBRACE,RPAREN,SEMI,Toolkit,DOT,getDefaultToolkit,LPAREN,RPAREN,DOT,addAWTEventListener,LPAREN,NEW,AWTEventListener,LPAREN,RPAREN,LBRACE,MONKEYS_AT,Override,PUBLIC,void,eventDispatched,LPAREN,AWTEvent,e,RPAREN,LBRACE,IF,LPAREN,e,DOT,getSource,LPAREN,RPAREN,BANGEQ,dialog,RPAREN,LBRACE,RETURN,SEMI,RBRACE,SEMI,MouseWheelEvent,event,EQ,LPAREN,MouseWheelEvent,RPAREN,e,SEMI,int,modifiers,EQ,event,DOT,getModifiers,LPAREN,RPAREN,SEMI,boolean,big,EQ,LPAREN,modifiers,AMP,InputEvent,DOT,CTRL_MASK,RPAREN,BANGEQ,0,SEMI,int,rotation,EQ,event,DOT,getWheelRotation,LPAREN,RPAREN,SEMI,int,value,EQ,slider,DOT,getValue,LPAREN,RPAREN,SEMI,int,newValue,EQ,value,PLUS,rotation,<MASK>,LPAREN,big,QUES,STEP_SIZE_BIG,COLON,STEP_SIZE,RPAREN,SEMI,slider,DOT,setValue,LPAREN,newValue,RPAREN,SEMI,RBRACE,RBRACE,COMMA,AWTEvent,DOT,MOUSE_WHEEL_EVENT_MASK,RPAREN,SEMI,RBRACE","	public FrechetDialog2(final Content content) {
,		List<Editable> lines = content.getLines();
,		if (lines.size() < 2) {
,			System.out.println(""not enough lines"");
,			return;
,		}
,		System.out.println(""showing frechet diagram"");
,
,		line1 = lines.get(0);
,		line2 = lines.get(1);
,
,		int maxEpsilon = 300;
,		final JSlider slider = new JSlider(0, maxEpsilon);
,		slider.setPaintLabels(true);
,		slider.setPaintTicks(true);
,		slider.setMajorTickSpacing(10);
,		slider.setValue(epsilon);
,		slider.setBorder(new TitledBorder(""epsilon""));
,
,		diagram = new FrechetDiagram(epsilon, line1, line2);
,		diagram.setBorder(new TitledBorder(""Free space""));
,		lineView = new LineView(epsilon, line1, line2, true, false, true, false);
,		ControlledLineView controlledLineView = new ControlledLineView(lineView);
,		controlledLineView.setBorder(new TitledBorder(""Curves""));
,
,		GridBagConstraints c = new GridBagConstraints();
,		c.fill = GridBagConstraints.BOTH;
,		c.weightx = c.weighty = 1.0;
,		JPanel panel = new JPanel(new GridBagLayout());
,		c.weighty = 0.0;
,		c.gridx = 0;
,		c.gridy = 0;
,		c.gridwidth = 2;
,		panel.add(slider, c);
,
,		c.weighty = 1.0;
,		c.gridwidth = 1;
,		c.gridy = 1;
,		c.gridx = 0;
,		panel.add(diagram, c);
,		c.weightx = 0.0;
,		c.gridx = 1;
,		panel.add(controlledLineView, c);
,
,		final JDialog dialog = new JDialog((JFrame) null, ""Fréchet distance"");
,		dialog.setContentPane(panel);
,//		dialog.setSize(900, 600);
,		dialog.setSize(850, 450);
,		dialog.setVisible(true);
,
,		slider.addChangeListener(new EpsilonChangedListener(diagram));
,		slider.addChangeListener(new EpsilonChangedListener(lineView));
,
,		content.addContentChangedListener(this);
,
,		dialog.addWindowListener(new WindowAdapter() {
,			public void windowClosing(WindowEvent e) {
,				content.removeContentChangedListener(FrechetDialog2.this);
,			}
,		});
,
,		Toolkit.getDefaultToolkit().addAWTEventListener(new AWTEventListener() {
,
,			@Override
,			public void eventDispatched(AWTEvent e) {
,				if (e.getSource() != dialog) {
,					return;
,				};
,				MouseWheelEvent event = (MouseWheelEvent) e;
,
,				int modifiers = event.getModifiers();
,				boolean big = (modifiers & InputEvent.CTRL_MASK) != 0;
,
,				int rotation = event.getWheelRotation();
,				int value = slider.getValue();
,				int newValue = value + rotation
,						<MASK> (big ? STEP_SIZE_BIG : STEP_SIZE);
,				slider.setValue(newValue);
,			}
,		}, AWTEvent.MOUSE_WHEEL_EVENT_MASK);
,	}
"
9b07119d-5d87-44cb-94ac-77a9d4fc6019,7ba7484b-1a3b-4e96-b374-1aa9f133da1c,LTEQ,"PUBLIC,int,saveBeanMissatge,LPAREN,FINAL,BeanMissatge,bean,RPAREN,LBRACE,IF,LPAREN,bean,DOT,getId,LPAREN,RPAREN,<MASK>,0,RPAREN,LBRACE,RETURN,insert,LPAREN,bean,RPAREN,SEMI,RBRACE,ELSE,LBRACE,RETURN,update,LPAREN,bean,RPAREN,SEMI,RBRACE,RBRACE","    public int saveBeanMissatge(final BeanMissatge bean) {
,        if(bean.getId()<MASK>0)
,        {
,            return insert(bean);
,        }
,        else
,        {
,            return update(bean);
,        }
,    }
"
e886a2e2-7806-4078-b494-41956d9dc64b,b9f3056a-3fdf-4b51-9fc4-afd00d488c14,PLUS,"MONKEYS_AT,Override,PUBLIC,void,stateChanged,LPAREN,ChangeEvent,e,RPAREN,LBRACE,JSlider,source,EQ,LPAREN,JSlider,RPAREN,e,DOT,getSource,LPAREN,RPAREN,SEMI,int,val,EQ,source,DOT,getValue,LPAREN,RPAREN,SEMI,lb2,DOT,setText,LPAREN,"""",<MASK>,val,RPAREN,SEMI,RBRACE","			@Override
,			public void stateChanged(ChangeEvent e) {
,				JSlider source = (JSlider) e.getSource();
,				int val = source.getValue();
,				lb2.setText("""" <MASK> val);
,			}
"
aed9046f-504a-49f9-b9ef-f36cca22ba93,3b0517fb-2d9a-42ae-9b3e-b4212f0689de,SLASH,"MONKEYS_AT,Override,PUBLIC,float,getUnits,LPAREN,RPAREN,LBRACE,IF,LPAREN,this,DOT,smsContent,DOT,length,LPAREN,RPAREN,EQEQ,0,RPAREN,RETURN,1,SEMI,RETURN,LPAREN,float,RPAREN,Math,DOT,ceil,LPAREN,this,DOT,smsContent,DOT,length,LPAREN,RPAREN,<MASK>,smsSize,RPAREN,SEMI,RBRACE","	@Override
,	public float getUnits() {
,		<MASK>/ TODO Auto-generated method stub
,		
,		if(this.smsContent.length() == 0)
,			return 1;
,		
,		return (float) Math.ceil(this.smsContent.length() / smsSize);
,	}
"
ee6285e4-70fb-4aa1-99e0-6f8cd1871b27,20376543-5f74-47d4-ae34-512f632fc73d,LTEQ,"PUBLIC,STATIC,void,main,LPAREN,String,args,LBRACKET,RBRACKET,RPAREN,LBRACE,int,total,EQ,338614,SEMI,int,limit,EQ,22574,SEMI,long,begin,EQ,System,DOT,currentTimeMillis,LPAREN,RPAREN,SEMI,ExecutorService,executorService,EQ,Executors,DOT,newFixedThreadPool,LPAREN,total,SLASH,limit,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,total,SLASH,limit,SEMI,i,PLUSPLUS,RPAREN,LBRACE,SetAuthoRelation_Out,test,EQ,NEW,SetAuthoRelation_Out,LPAREN,i,STAR,limit,COMMA,limit,COMMA,""T"",PLUS,i,RPAREN,SEMI,executorService,DOT,execute,LPAREN,test,RPAREN,SEMI,RBRACE,executorService,DOT,shutdown,LPAREN,RPAREN,SEMI,WHILE,LPAREN,BANG,executorService,DOT,isTerminated,LPAREN,RPAREN,RPAREN,LBRACE,RBRACE,long,end,EQ,System,DOT,currentTimeMillis,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""total time: "",PLUS,LPAREN,end,SUB,begin,RPAREN,SLASH,1000,RPAREN,SEMI,RBRACE","	public static void main(String args[]) {
,		int total = 338614;
,		int limit = 22574;
,		long begin = System.currentTimeMillis();
,		ExecutorService executorService = Executors.newFixedThreadPool(total
,				/ limit);
,		for (int i = 0; i <MASK> total / limit; i++) {
,			SetAuthoRelation_Out test = new SetAuthoRelation_Out(i * limit,
,					limit, ""T"" + i);
,			executorService.execute(test);
,		}
,		executorService.shutdown();
,		while (!executorService.isTerminated()) {}
,		long end = System.currentTimeMillis();
,		System.out.println(""total time: "" + (end - begin) / 1000);
,	}
"
a4c68a60-241d-4ccc-bb34-58eb273247fe,8db2292f-1523-495f-ab20-091b6392aa6e,PLUS,"STATIC,CommandLine,hgLogFileContent,LPAREN,String,pathToHg,COMMA,String,folder,COMMA,String,filePath,COMMA,String,revision,COMMA,Charset,charset,RPAREN,LBRACE,CommandLine,commandLine,EQ,NEW,CommandLine,LPAREN,pathToHg,COMMA,""cat"",COMMA,""-r "",<MASK>,revision,COMMA,filePath,RPAREN,SEMI,RETURN,commandLine,DOT,workingDir,LPAREN,folder,RPAREN,DOT,outputCharset,LPAREN,charset,RPAREN,DOT,charsetAutoDetect,LPAREN,true,RPAREN,SEMI,RBRACE","	static CommandLine hgLogFileContent(String pathToHg, String folder, String filePath, String revision, Charset charset) {
,		CommandLine commandLine = new CommandLine(pathToHg, ""cat"", ""-r "" <MASK> revision, filePath);
,		return commandLine.workingDir(folder).outputCharset(charset).charsetAutoDetect(true);
,	}
"
62a978c0-a836-480d-8f9b-c958fbbc7ff5,9bbcc4f4-1e58-4da3-8d9f-af91eb31298e,SLASH,"MONKEYS_AT,Override,PUBLIC,void,run,LPAREN,RPAREN,LBRACE,long,lastCycle,EQ,0,SEMI,long,systemTime,SEMI,WHILE,LPAREN,isRunning,LPAREN,RPAREN,RPAREN,LBRACE,systemTime,EQ,System,DOT,currentTimeMillis,LPAREN,RPAREN,SEMI,IF,LPAREN,LPAREN,systemTime,SUB,lastCycle,RPAREN,GT,cycleLength,RPAREN,LBRACE,IF,LPAREN,getTasks,LPAREN,RPAREN,DOT,size,LPAREN,RPAREN,GT,0,RPAREN,LBRACE,Iterator,LT,ITask,GT,it,EQ,getTasks,LPAREN,RPAREN,DOT,iterator,LPAREN,RPAREN,SEMI,WHILE,LPAREN,it,DOT,hasNext,LPAREN,RPAREN,RPAREN,LBRACE,IF,LPAREN,BANG,it,DOT,next,LPAREN,RPAREN,DOT,run,LPAREN,RPAREN,RPAREN,it,DOT,remove,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,long,timeTaken,EQ,System,DOT,currentTimeMillis,LPAREN,RPAREN,SUB,systemTime,SEMI,IF,LPAREN,timeTaken,GT,cycleLength,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""Engine overloaded by "",PLUS,LPAREN,LPAREN,timeTaken,<MASK>,cycleLength,RPAREN,STAR,100,RPAREN,PLUS,""%"",RPAREN,SEMI,RBRACE,ELSE,LBRACE,TRY,LBRACE,sleep,LPAREN,cycleLength,SUB,timeTaken,RPAREN,SEMI,RBRACE,CATCH,LPAREN,InterruptedException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,RBRACE,RBRACE","	@Override
,	public void run() {
,		long lastCycle = 0;
,		long systemTime;
,
,		while (isRunning()) {
,			systemTime = System.currentTimeMillis();
,			if ((systemTime - lastCycle) > cycleLength) {
,				if (getTasks().size() > 0) {
,					Iterator<ITask> it = getTasks().iterator();
,					while (it.hasNext()) {
,						if (!it.next().run())
,							it.remove();
,					}
,				}
,				long timeTaken = System.currentTimeMillis() - systemTime;
,				if (timeTaken > cycleLength) {
,					System.out.println(""Engine overloaded by "" + ((timeTaken <MASK> cycleLength) * 100) + ""%"");
,				} else {
,					try {
,						sleep(cycleLength - timeTaken);
,					} catch (InterruptedException e) {
,						e.printStackTrace();
,					}
,				}
,			}
,		}
,	}
"
d71e9d90-d7d7-40b1-b4fa-c5316adcd69a,4421003a-8ad4-488e-b40a-5abf37f83014,GT,"PUBLIC,int,maxSequenceLength,LPAREN,RPAREN,LBRACE,int,max,EQ,0,SEMI,FOR,LPAREN,Sample,s,COLON,this,RPAREN,LBRACE,FINAL,int,length,EQ,Math,DOT,max,LPAREN,s,DOT,getInputLength,LPAREN,RPAREN,COMMA,s,DOT,getTargetLength,LPAREN,RPAREN,RPAREN,SEMI,IF,LPAREN,length,<MASK>,max,RPAREN,LBRACE,max,EQ,length,SEMI,RBRACE,RBRACE,RETURN,max,SEMI,RBRACE","    public int maxSequenceLength() {
,        int max = 0;
,        for (Sample s : this) {
,            final int length = Math.max(
,                s.getInputLength(), s.getTargetLength()
,            );
,            if (length <MASK> max) {
,                max = length;
,            }
,        }
,        return max;
,    }
"
08b41d00-9e8d-4e48-94b9-945bef00d612,b60c3110-711a-42f8-a2ac-bcbb97ab6cc5,LTEQ,"PUBLIC,STATIC,void,main,LPAREN,String,LBRACKET,RBRACKET,args,RPAREN,LBRACE,int,i,EQ,1,COMMA,score,SEMI,Scanner,scan,EQ,NEW,Scanner,LPAREN,System,DOT,in,RPAREN,SEMI,WHILE,LPAREN,i,<MASK>,5,RPAREN,LBRACE,System,DOT,out,DOT,print,LPAREN,""\u0E1B\u0E49\u0E2D\u0E19\u0E02\u0E49\u0E2D\u0E21\u0E39\u0E25\u0E04\u0E30\u0E41\u0E19\u0E19\u0E19\u0E34\u0E2A\u0E34\u0E15\u0E04\u0E19\u0E17\u0E35\u0E48 "",PLUS,i,PLUS,"" >>> "",RPAREN,SEMI,score,EQ,scan,DOT,nextInt,LPAREN,RPAREN,SEMI,IF,LPAREN,score,LT,0,BARBAR,score,GT,100,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,score,PLUS,"" \u0E40\u0E1B\u0E47\u0E19\u0E02\u0E49\u0E2D\u0E21\u0E39\u0E25\u0E04\u0E30\u0E41\u0E19\u0E19\u0E17\u0E35\u0E48\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07"",RPAREN,SEMI,CONTINUE,SEMI,RBRACE,System,DOT,out,DOT,println,LPAREN,score,PLUS,"" \u0E40\u0E1B\u0E47\u0E19\u0E02\u0E49\u0E2D\u0E21\u0E39\u0E25\u0E04\u0E30\u0E41\u0E19\u0E19\u0E17\u0E35\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07"",RPAREN,SEMI,i,EQ,i,PLUS,1,SEMI,RBRACE,RBRACE","    public static void main(String[] args) {
,        int i = 1, score;
,        Scanner scan = new Scanner(System.in);
,        while (i <MASK> 5) {
,            System.out.print(""ป้อนข้อมูลคะแนนนิสิตคนที่ "" + i + "" >>> "");
,            score = scan.nextInt();
,            if (score < 0 || score > 100) {
,                System.out.println(score + "" เป็นข้อมูลคะแนนที่ไม่ถูกต้อง"");
,                continue;
,            }
,            System.out.println(score + "" เป็นข้อมูลคะแนนที่ถูกต้อง"");
,            i = i + 1;
,        }
,    }
"
7bd76208-9b34-4151-9ec4-57c6c52e0fcf,7741147a-59a7-498a-a364-8923ad09291a,GTEQ,"PUBLIC,String,getSourceLocation,LPAREN,RPAREN,LBRACE,IF,LPAREN,closure,BANGEQ,null,RPAREN,LBRACE,int,lines,LBRACKET,RBRACKET,EQ,closure,DOT,proto,DOT,lines,SEMI,IF,LPAREN,lines,BANGEQ,null,RPAREN,LBRACE,int,index,EQ,pc,SUB,1,SEMI,IF,LPAREN,index,<MASK>,0,AMPAMP,index,LT,lines,DOT,length,RPAREN,RETURN,closure,DOT,proto,DOT,source,PLUS,"":"",PLUS,lines,LBRACKET,index,RBRACKET,SEMI,RBRACE,ELSE,LBRACE,RETURN,closure,DOT,proto,DOT,source,PLUS,"":-1"",SEMI,RBRACE,RBRACE,RETURN,""[J]:"",PLUS,function,SEMI,RBRACE","	public String getSourceLocation(){
,		if ( closure != null ){
,			int lines[] = closure.proto.lines;
,			
,			if ( lines != null ){
,				int index = pc -1;
,				
,				if ( index <MASK> 0 && index < lines.length )
,					return closure.proto.source + "":"" + lines[index];
,			
,			} else {
,				return closure.proto.source + "":-1"";
,			}
,		}
,		
,		return ""[J]:"" + function;
,	}
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,9d41a60c-d097-4992-b2a8-784c0daaa71c,SUB,"PRIVATE,STATIC,BufferedImage,extractNumber,LPAREN,BufferedImage,image,RPAREN,LBRACE,int,mask,LBRACKET,RBRACKET,LBRACKET,RBRACKET,EQ,NEW,int,LBRACKET,image,DOT,getHeight,LPAREN,RPAREN,RBRACKET,LBRACKET,image,DOT,getWidth,LPAREN,RPAREN,RBRACKET,SEMI,FOR,LPAREN,int,y,EQ,0,SEMI,y,LT,image,DOT,getHeight,LPAREN,RPAREN,SEMI,y,PLUSPLUS,RPAREN,LBRACE,FOR,LPAREN,int,x,EQ,0,SEMI,x,LT,image,DOT,getWidth,LPAREN,RPAREN,SEMI,x,PLUSPLUS,RPAREN,LBRACE,FINAL,int,colour,EQ,image,DOT,getRGB,LPAREN,x,COMMA,y,RPAREN,SEMI,mask,LBRACKET,y,RBRACKET,LBRACKET,x,RBRACKET,EQ,LPAREN,LPAREN,LPAREN,colour,AMP,00ff0000,RPAREN,GTGT,16,RPAREN,GT,192,RPAREN,QUES,1,COLON,<MASK>,1,SEMI,RBRACE,RBRACE,BufferedImage,numberImage,EQ,VisionUtils,DOT,int2image,LPAREN,mask,RPAREN,SEMI,mask,EQ,VisionUtils,DOT,findConnectedComponents,LPAREN,mask,RPAREN,SEMI,Rectangle,number,LBRACKET,RBRACKET,EQ,VisionUtils,DOT,findBoundingBoxes,LPAREN,mask,RPAREN,SEMI,RETURN,numberImage,DOT,getSubimage,LPAREN,number,LBRACKET,0,RBRACKET,DOT,x,COMMA,number,LBRACKET,0,RBRACKET,DOT,y,COMMA,number,LBRACKET,0,RBRACKET,DOT,width,COMMA,number,LBRACKET,0,RBRACKET,DOT,height,RPAREN,SEMI,RBRACE","	private static BufferedImage extractNumber(BufferedImage image) {
,
,		int mask[][] = new int[image.getHeight()][image.getWidth()];
,		for (int y = 0; y < image.getHeight(); y++) {
,			for (int x = 0; x < image.getWidth(); x++) {
,				final int colour = image.getRGB(x, y);
,				mask[y][x] = (((colour & 0x00ff0000) >> 16) > 192) ? 1 : <MASK>1;
,			}
,		}
,		
,		BufferedImage numberImage = VisionUtils.int2image(mask);
,		mask = VisionUtils.findConnectedComponents(mask);
,        Rectangle number[] = VisionUtils.findBoundingBoxes(mask);
,        
,		return numberImage.getSubimage(number[0].x, number[0].y, number[0].width, number[0].height);
,	}
"
113c5414-6c55-466b-b879-a350ab6e0ca2,73f114d4-94c5-4fff-9669-272bf99e745d,EQ,"PUBLIC,void,setLocation,LPAREN,Tile,location,RPAREN,LBRACE,this,DOT,location,<MASK>,location,SEMI,RBRACE","	public void setLocation(Tile location) {
,		this.location <MASK> location;
,	}
"
113c5414-6c55-466b-b879-a350ab6e0ca2,ade9ae40-ff58-4dad-b975-96f1ab1e05ba,EQ,"void,setNutrition,LPAREN,int,nutrition,RPAREN,LBRACE,this,DOT,nutrition,<MASK>,nutrition,SEMI,RBRACE","	void setNutrition(int nutrition) {
,		this.nutrition <MASK> nutrition;
,	}
"
ee6285e4-70fb-4aa1-99e0-6f8cd1871b27,5bb2e865-1351-40cf-bc7b-846af784a992,LTEQ,"PUBLIC,STATIC,void,main,LPAREN,String,args,LBRACKET,RBRACKET,RPAREN,LBRACE,long,begin,EQ,System,DOT,currentTimeMillis,LPAREN,RPAREN,SEMI,int,total,EQ,1632442,SEMI,int,limit,EQ,108829,SEMI,ExecutorService,executorService,EQ,Executors,DOT,newFixedThreadPool,LPAREN,total,SLASH,limit,RPAREN,SEMI,String,name,EQ,"""",SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,total,SLASH,limit,SEMI,i,PLUSPLUS,RPAREN,LBRACE,name,EQ,""T"",PLUS,i,SEMI,executorService,DOT,execute,LPAREN,NEW,SetPaperAuthorList,LPAREN,i,STAR,limit,COMMA,limit,COMMA,name,RPAREN,RPAREN,SEMI,RBRACE,executorService,DOT,shutdown,LPAREN,RPAREN,SEMI,WHILE,LPAREN,BANG,executorService,DOT,isTerminated,LPAREN,RPAREN,RPAREN,LBRACE,RBRACE,long,end,EQ,System,DOT,currentTimeMillis,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""total time: "",PLUS,LPAREN,end,SUB,begin,RPAREN,SLASH,1000,PLUS,"" seconds."",RPAREN,SEMI,RBRACE","	public static void main(String args[])
,	{
,		long begin=System.currentTimeMillis();
,		int total=1632442;
,		int limit=108829;
,		ExecutorService executorService=Executors.newFixedThreadPool(total/limit);
,		String name="""";
,		for(int i=0;i<MASK>total/limit;i++)
,		{
,			name=""T""+i;
,			executorService.execute(new SetPaperAuthorList(i*limit, limit,name));
,		}
,		executorService.shutdown();
,		while(!executorService.isTerminated()){}
,		long end=System.currentTimeMillis();
,		System.out.println(""total time: ""+(end-begin)/1000+"" seconds."");
,	}
"
bc5a6e89-7851-455f-9293-6a299f252d97,208edabb-7c94-474e-90a5-f54783c04707,STAR,"PUBLIC,STATIC,void,searchHosts,LPAREN,FINAL,int,port,COMMA,FINAL,ProgressListener,listener,RPAREN,LBRACE,NEW,Thread,LPAREN,RPAREN,LBRACE,MONKEYS_AT,Override,PUBLIC,void,run,LPAREN,RPAREN,LBRACE,boolean,cancel,EQ,false,SEMI,TRY,LBRACE,String,baseHost,EQ,Network,DOT,getAddress,LPAREN,RPAREN,DOT,substring,LPAREN,0,COMMA,Network,DOT,getAddress,LPAREN,RPAREN,DOT,lastIndexOf,LPAREN,""."",RPAREN,PLUS,1,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,1,SEMI,i,LT,254,AMPAMP,BANG,cancel,SEMI,i,PLUSPLUS,RPAREN,LBRACE,int,p,EQ,LPAREN,int,RPAREN,LPAREN,LPAREN,i,SLASH,254.0,RPAREN,<MASK>,100,RPAREN,SEMI,IF,LPAREN,InetAddress,DOT,getByName,LPAREN,baseHost,PLUS,i,RPAREN,DOT,isReachable,LPAREN,1500,RPAREN,RPAREN,LBRACE,IF,LPAREN,BANG,listener,DOT,percentChanged,LPAREN,p,COMMA,baseHost,PLUS,i,RPAREN,RPAREN,cancel,EQ,true,SEMI,RBRACE,ELSE,LBRACE,IF,LPAREN,BANG,listener,DOT,percentChanged,LPAREN,p,RPAREN,RPAREN,cancel,EQ,true,SEMI,RBRACE,RBRACE,RBRACE,CATCH,LPAREN,Exception,e,RPAREN,LBRACE,Logger,DOT,get,LPAREN,RPAREN,DOT,err,LPAREN,e,COMMA,this,RPAREN,SEMI,RBRACE,FINALLY,LBRACE,listener,DOT,progressDone,LPAREN,BANG,cancel,COMMA,this,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,DOT,start,LPAREN,RPAREN,SEMI,RBRACE","	public static void searchHosts(final int port, final ProgressListener listener) {
,		new Thread() {
,			
,			@Override
,			public void run() {
,				
,				boolean cancel = false;
,				
,				try {
,					String baseHost = Network.getAddress().substring(0, Network.getAddress().lastIndexOf(""."")+1);
,					
,					for(int i = 1; i < 254 && !cancel; i++) {
,						
,						int p = (int)((i / 254.0) <MASK> 100);
,						
,						if(InetAddress.getByName(baseHost + i).isReachable(1500)) {
,							if(!listener.percentChanged(p, baseHost + i))
,								cancel = true;
,						} else {
,							if(!listener.percentChanged(p))
,								cancel = true;
,						}
,						
,						
,						
,					}
,					
,				} catch(Exception e) {
,					Logger.get().err(e, this);
,				} finally {
,					listener.progressDone(!cancel, this);
,				}
,				
,			}
,			
,		}.start();
,	}
"
8830017b-dcb2-4301-89b3-826724c1fc62,b92d4d95-32f1-4291-89bb-2795b6ea97b8,LTEQ,"PUBLIC,STATIC,int,num,LPAREN,int,start,COMMA,int,end,RPAREN,LBRACE,IF,LPAREN,start,GTEQ,end,RPAREN,LBRACE,RETURN,1,SEMI,RBRACE,int,num,EQ,0,SEMI,FOR,LPAREN,int,i,EQ,start,SEMI,i,<MASK>,end,SEMI,i,PLUSPLUS,RPAREN,LBRACE,num,EQ,num,PLUS,num,LPAREN,start,COMMA,i,SUB,1,RPAREN,STAR,num,LPAREN,i,PLUS,1,COMMA,end,RPAREN,SEMI,RBRACE,RETURN,num,SEMI,RBRACE","	public static int num(int start, int end) {
,		if (start >= end) {
,			return 1;
,		}
,		int num = 0;
,		for (int i = start; i <MASK> end; i++) {
,			num = num + num(start, i - 1) * num(i + 1, end);
,		}
,		return num;
,	}
"
9c253d2b-e626-4f21-a850-dfb022369350,d2ee42cd-0d3a-48e2-8d11-571d0a892350,GT,"PUBLIC,FINAL,STATIC,double,LBRACKET,RBRACKET,resize,LPAREN,double,LBRACKET,RBRACKET,v,COMMA,FINAL,int,newn,RPAREN,LBRACE,int,nn,EQ,v,DOT,length,SEMI,IF,LPAREN,newn,BANGEQ,nn,RPAREN,LBRACE,nn,EQ,newn,SEMI,v,EQ,nn,<MASK>,0,QUES,NEW,double,LBRACKET,nn,RBRACKET,COLON,null,SEMI,RBRACE,RETURN,v,SEMI,RBRACE","  public final static double[] resize(double[] v, final int newn) {
,    int nn = v.length;
,    if (newn != nn) {
,      nn = newn;
,      v = nn <MASK> 0 ? new double[nn] : null;
,    }
,    return v;
,  }
"
73f99f48-ab14-4590-9781-8e43c05bc3ab,bec0be69-541e-4b4d-a5ac-525bbb98775f,LTEQ,"PUBLIC,STATIC,double,critchi,LPAREN,double,p,COMMA,int,df,RPAREN,LBRACE,IF,LPAREN,p,<MASK>,0.0,RPAREN,LBRACE,RETURN,CHI_MAX,SEMI,RBRACE,ELSE,LBRACE,IF,LPAREN,p,GTEQ,1.0,RPAREN,LBRACE,RETURN,0.0,SEMI,RBRACE,RBRACE,double,h,EQ,LPAREN,df,SUB,0.7,RPAREN,SLASH,Math,DOT,sqrt,LPAREN,p,RPAREN,SEMI,double,c1,EQ,h,COMMA,d1,EQ,pochisq,LPAREN,c1,COMMA,df,RPAREN,SUB,p,SEMI,double,c2,EQ,0.0,COMMA,d2,EQ,pochisq,LPAREN,c2,COMMA,df,RPAREN,SUB,p,SEMI,int,l,EQ,0,SEMI,WHILE,LPAREN,Math,DOT,abs,LPAREN,c1,SUB,c2,RPAREN,GT,CHI_EPSILON,RPAREN,LBRACE,double,c,EQ,LPAREN,d1,STAR,c2,SUB,d2,STAR,c1,RPAREN,SLASH,LPAREN,d1,SUB,d2,RPAREN,SEMI,double,d,EQ,pochisq,LPAREN,c,COMMA,df,RPAREN,SUB,p,SEMI,IF,LPAREN,d,STAR,d1,LT,0.0,RPAREN,LBRACE,c2,EQ,c,SEMI,d2,EQ,d,SEMI,IF,LPAREN,l,EQEQ,1,RPAREN,d1,SLASHEQ,2.0,SEMI,ELSE,l,EQ,1,SEMI,RBRACE,ELSE,LBRACE,c1,EQ,c,SEMI,d1,EQ,d,SEMI,IF,LPAREN,l,EQEQ,2,RPAREN,d2,SLASHEQ,2.0,SEMI,ELSE,l,EQ,2,SEMI,RBRACE,RBRACE,RETURN,0.5,STAR,LPAREN,c1,PLUS,c2,RPAREN,SEMI,RBRACE","    public static double critchi(double p, int df)
,    {
,        if (p <MASK> 0.0) {
,            return CHI_MAX;
,        } else {
,            if (p >= 1.0) {
,                return 0.0;
,            }
,        }
,        
,        /*
,        double chisqval = 0.5 * df / Math.sqrt(p);    // fair first value 
,        double minchisq = 0.0;
,        double maxchisq = CHI_MAX;
,        while ((maxchisq - minchisq) > CHI_EPSILON) {
,System.out.println("" ** ""+chisqval);          
,            if (pochisq(chisqval, df) < p) {
,                maxchisq = chisqval;
,            } else {
,                minchisq = chisqval;
,            }
,            chisqval = 0.5 * (maxchisq + minchisq);
,        }
,        */
,        double h = (df - 0.7)/Math.sqrt(p);
,        double c1 =   h, d1 = pochisq(c1, df) - p;
,        double c2 = 0.0, d2 = pochisq(c2, df) - p;
,        int l = 0;
,        while ( Math.abs(c1 - c2) > CHI_EPSILON ) {
,            double c = (d1 * c2 - d2 * c1)/(d1 - d2);
,            double d = pochisq(c, df) - p;
,// System.out.println("" ** ""+c1+"" ""+c2+"" ""+d1+"" ""+d2+"" || ""+c+"" ""+d);          
,            if ( d * d1 < 0.0 ) {
,                c2 = c; d2 = d;
,                if ( l == 1 ) d1 /= 2.0; else l = 1;
,            } else {
,                c1 = c; d1 = d;
,                if ( l == 2 ) d2 /= 2.0; else l = 2;
,            }
,        }
,        return 0.5*(c1+c2);
,    }
"
f944102f-332a-448e-b1a9-6a4145ca980d,7e50b5b7-3f14-4701-b35a-17eda8348362,LTEQ,"PUBLIC,STATIC,void,main,LPAREN,String,LBRACKET,RBRACKET,args,RPAREN,LBRACE,int,base,EQ,0,SEMI,int,exp,EQ,0,SEMI,int,potencia,EQ,1,SEMI,base,EQ,Integer,DOT,parseInt,LPAREN,JOptionPane,DOT,showInputDialog,LPAREN,""Base"",RPAREN,RPAREN,SEMI,exp,EQ,Integer,DOT,parseInt,LPAREN,JOptionPane,DOT,showInputDialog,LPAREN,""Expoente"",RPAREN,RPAREN,SEMI,IF,LPAREN,exp,<MASK>,0,RPAREN,LBRACE,JOptionPane,DOT,showMessageDialog,LPAREN,null,COMMA,""Somente n\u00FAmeros positivos e maiores que 0, por favor"",RPAREN,SEMI,System,DOT,exit,LPAREN,0,RPAREN,SEMI,RBRACE,int,counter,EQ,0,SEMI,WHILE,LPAREN,counter,PLUSPLUS,LT,exp,RPAREN,LBRACE,potencia,EQ,potencia,STAR,base,SEMI,RBRACE,JOptionPane,DOT,showMessageDialog,LPAREN,null,COMMA,base,PLUS,"" elevado a "",PLUS,exp,PLUS,"" \u00E9 igual a "",PLUS,potencia,RPAREN,SEMI,RBRACE","    public static void main(String[] args) {
,        int base = 0;
,        int exp = 0;
,        int potencia = 1;
,
,// Obter entrada do usuário para base e expoente
,        base = Integer.parseInt(JOptionPane.showInputDialog(""Base""));
,        exp = Integer.parseInt(JOptionPane.showInputDialog(""Expoente""));
,// Limitar variável exp a somente número positivos e maiores que 0
,        if (exp <MASK> 0) {
,            JOptionPane.showMessageDialog(null,
,                    ""Somente números positivos e maiores que 0, por favor"");
,            System.exit(0);
,        }
,
,// Declaração while para calcular a potência
,        int counter = 0;
,        while (counter++ < exp) {
,            potencia = potencia * base;
,        }
,
,// Mostrar o resultado
,        JOptionPane.showMessageDialog(null,
,                base + "" elevado a "" + exp + "" é igual a "" + potencia);
,    }
"
7b10f06b-338c-44c3-8e01-b40eb98395b8,afe8e45e-4a97-4c03-b0e0-e5ba1fd3696c,EQEQ,"MONKEYS_AT,Override,PUBLIC,ExactCover,read,LPAREN,InputStream,input,RPAREN,LBRACE,TRY,LPAREN,Scanner,sc,EQ,NEW,Scanner,LPAREN,input,RPAREN,RPAREN,LBRACE,int,rows,EQ,sc,DOT,nextInt,LPAREN,RPAREN,SEMI,int,cols,EQ,sc,DOT,nextInt,LPAREN,RPAREN,SEMI,boolean,LBRACKET,RBRACKET,LBRACKET,RBRACKET,matrix,EQ,NEW,boolean,LBRACKET,rows,RBRACKET,LBRACKET,cols,RBRACKET,SEMI,FOR,LPAREN,int,row,EQ,0,SEMI,row,LT,rows,SEMI,PLUSPLUS,row,RPAREN,LBRACE,FOR,LPAREN,int,col,EQ,0,SEMI,col,LT,cols,SEMI,PLUSPLUS,col,RPAREN,LBRACE,int,has,EQ,sc,DOT,nextInt,LPAREN,RPAREN,SEMI,IF,LPAREN,has,<MASK>,1,RPAREN,LBRACE,matrix,LBRACKET,row,RBRACKET,LBRACKET,col,RBRACKET,EQ,true,SEMI,RBRACE,RBRACE,RBRACE,RETURN,NEW,ExactCover,LPAREN,matrix,RPAREN,SEMI,RBRACE,RBRACE","	@Override
,	public ExactCover read(InputStream input) {
,		try (Scanner sc = new Scanner(input)) {
,			int rows = sc.nextInt();
,			int cols = sc.nextInt();
,			boolean[][] matrix = new boolean[rows][cols];
,			for (int row = 0; row < rows; ++row) {
,				for (int col = 0; col < cols; ++col) {
,					int has = sc.nextInt();
,					if (has <MASK> 1) {
,						matrix[row][col] = true;
,					}
,				}
,			}
,			return new ExactCover(matrix);
,		}
,	}
"
bc5a6e89-7851-455f-9293-6a299f252d97,d02df5dc-127d-42c6-9763-e5de01ee6d3d,STAR,"MONKEYS_AT,Override,PUBLIC,void,run,LPAREN,RPAREN,LBRACE,boolean,cancel,EQ,false,SEMI,TRY,LBRACE,String,baseHost,EQ,Network,DOT,getAddress,LPAREN,RPAREN,DOT,substring,LPAREN,0,COMMA,Network,DOT,getAddress,LPAREN,RPAREN,DOT,lastIndexOf,LPAREN,""."",RPAREN,PLUS,1,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,1,SEMI,i,LT,254,AMPAMP,BANG,cancel,SEMI,i,PLUSPLUS,RPAREN,LBRACE,int,p,EQ,LPAREN,int,RPAREN,LPAREN,LPAREN,i,SLASH,254.0,RPAREN,<MASK>,100,RPAREN,SEMI,IF,LPAREN,InetAddress,DOT,getByName,LPAREN,baseHost,PLUS,i,RPAREN,DOT,isReachable,LPAREN,1500,RPAREN,RPAREN,LBRACE,IF,LPAREN,BANG,listener,DOT,percentChanged,LPAREN,p,COMMA,baseHost,PLUS,i,RPAREN,RPAREN,cancel,EQ,true,SEMI,RBRACE,ELSE,LBRACE,IF,LPAREN,BANG,listener,DOT,percentChanged,LPAREN,p,RPAREN,RPAREN,cancel,EQ,true,SEMI,RBRACE,RBRACE,RBRACE,CATCH,LPAREN,Exception,e,RPAREN,LBRACE,Logger,DOT,get,LPAREN,RPAREN,DOT,err,LPAREN,e,COMMA,this,RPAREN,SEMI,RBRACE,FINALLY,LBRACE,listener,DOT,progressDone,LPAREN,BANG,cancel,COMMA,this,RPAREN,SEMI,RBRACE,RBRACE","			@Override
,			public void run() {
,				
,				boolean cancel = false;
,				
,				try {
,					String baseHost = Network.getAddress().substring(0, Network.getAddress().lastIndexOf(""."")+1);
,					
,					for(int i = 1; i < 254 && !cancel; i++) {
,						
,						int p = (int)((i / 254.0) <MASK> 100);
,						
,						if(InetAddress.getByName(baseHost + i).isReachable(1500)) {
,							if(!listener.percentChanged(p, baseHost + i))
,								cancel = true;
,						} else {
,							if(!listener.percentChanged(p))
,								cancel = true;
,						}
,						
,						
,						
,					}
,					
,				} catch(Exception e) {
,					Logger.get().err(e, this);
,				} finally {
,					listener.progressDone(!cancel, this);
,				}
,				
,			}
"
9dc56b97-3fea-407c-9846-6a4e260a6d89,d6bac3a6-33c9-489b-a89b-70a1764d306e,STAR,"PRIVATE,STATIC,short,encodeSequenceNumber,LPAREN,int,sequenceNumber,RPAREN,THROWS,SequenceNumberOutOfRangeException,LBRACE,IF,LPAREN,sequenceNumber,BANGEQ,Packet,DOT,SEQUENCE_NUMBER_NOT_APPLICABLE,AMPAMP,LPAREN,sequenceNumber,LT,Packet,DOT,MINIMUM_SEQUENCE_NUMBER,BARBAR,sequenceNumber,GT,Packet,DOT,MAXIMUM_SEQUENCE_NUMBER,RPAREN,RPAREN,THROW,NEW,SequenceNumberOutOfRangeException,LPAREN,sequenceNumber,RPAREN,SEMI,RETURN,LPAREN,short,RPAREN,LPAREN,sequenceNumber,GT,Short,DOT,MAX_VALUE,QUES,sequenceNumber,PLUS,2,<MASK>,Short,DOT,MIN_VALUE,COLON,sequenceNumber,RPAREN,SEMI,RBRACE","	private static short encodeSequenceNumber(int sequenceNumber) throws SequenceNumberOutOfRangeException {
,		if(sequenceNumber != Packet.SEQUENCE_NUMBER_NOT_APPLICABLE && (sequenceNumber < Packet.MINIMUM_SEQUENCE_NUMBER || sequenceNumber > Packet.MAXIMUM_SEQUENCE_NUMBER))
,			throw new SequenceNumberOutOfRangeException(sequenceNumber);
,		return (short) (sequenceNumber > Short.MAX_VALUE ? sequenceNumber + 2<MASK>Short.MIN_VALUE : sequenceNumber);
,	}
"
b6d08fd3-a673-4a77-8d9f-bf9a01922a85,82ec618e-4931-496a-bb8f-da0c939bc93b,SLASH,"void,loadStorm,LPAREN,int,tile,RPAREN,LBRACE,ThermalTrigger,trigger,SEMI,int,y0,EQ,tile,STAR,TILE_WIDTH,SEMI,trigger,EQ,NEW,ThermalTrigger,LPAREN,app,COMMA,SUB,4,COMMA,y0,PLUS,TILE_WIDTH,<MASK>,4,COMMA,2,COMMA,LPAREN,float,RPAREN,0.3,COMMA,3,RPAREN,SEMI,tiles,LBRACKET,tile,RBRACKET,DOT,triggers,DOT,addElement,LPAREN,trigger,RPAREN,SEMI,RBRACE","    void loadStorm(int tile) {
,        ThermalTrigger trigger;
,        int y0 = tile * TILE_WIDTH;
,
,        <MASK>/trigger with half the cycle length and 3 times the cloud duration
,        trigger = new ThermalTrigger(app, -4, y0 + TILE_WIDTH / 4, 2, (float) 0.3, 3);
,        tiles[tile].triggers.addElement(trigger);
,    }
"
d71e9d90-d7d7-40b1-b4fa-c5316adcd69a,88f5bfdd-1348-413c-b6c5-662b0e22e3e2,LTEQ,"PRIVATE,void,adjustWeights,LPAREN,RPAREN,LBRACE,FOR,LPAREN,int,i,EQ,1,SEMI,i,<MASK>,this,DOT,weightsnum,SEMI,i,PLUSPLUS,RPAREN,LBRACE,this,DOT,weights,LBRACKET,i,RBRACKET,PLUSEQ,this,DOT,dweights,LBRACKET,i,RBRACKET,SEMI,RBRACE,RBRACE","    private void adjustWeights() {
,        //
,        for (int i = 1; i <MASK> this.weightsnum; i++) {
,            //
,            this.weights[i] += this.dweights[i];
,            /*
,            // # DEBUG #
,            this.weightsdbg[i] += Math.abs(this.dweights[i]);
,            // #
,            */
,        }
,        
,    }
"
9b580ee6-153a-476e-abc4-93585610f66b,f9e1edc2-035b-456d-b68a-7873f7156625,STAR,"PUBLIC,void,transform,LPAREN,String,originalFile,COMMA,String,thumbnailFile,COMMA,int,thumbWidth,COMMA,int,thumbHeight,COMMA,int,quality,RPAREN,THROWS,Exception,LBRACE,Image,image,EQ,javax,DOT,imageio,DOT,ImageIO,DOT,read,LPAREN,NEW,File,LPAREN,originalFile,RPAREN,RPAREN,SEMI,double,thumbRatio,EQ,LPAREN,double,RPAREN,thumbWidth,SLASH,LPAREN,double,RPAREN,thumbHeight,SEMI,int,imageWidth,EQ,image,DOT,getWidth,LPAREN,null,RPAREN,SEMI,int,imageHeight,EQ,image,DOT,getHeight,LPAREN,null,RPAREN,SEMI,double,imageRatio,EQ,LPAREN,double,RPAREN,imageWidth,SLASH,LPAREN,double,RPAREN,imageHeight,SEMI,IF,LPAREN,thumbRatio,LT,imageRatio,RPAREN,LBRACE,thumbHeight,EQ,LPAREN,int,RPAREN,LPAREN,thumbWidth,SLASH,imageRatio,RPAREN,SEMI,RBRACE,ELSE,LBRACE,thumbWidth,EQ,LPAREN,int,RPAREN,LPAREN,thumbHeight,<MASK>,imageRatio,RPAREN,SEMI,RBRACE,IF,LPAREN,imageWidth,LT,thumbWidth,AMPAMP,imageHeight,LT,thumbHeight,RPAREN,LBRACE,thumbWidth,EQ,imageWidth,SEMI,thumbHeight,EQ,imageHeight,SEMI,RBRACE,ELSE,IF,LPAREN,imageWidth,LT,thumbWidth,RPAREN,thumbWidth,EQ,imageWidth,SEMI,ELSE,IF,LPAREN,imageHeight,LT,thumbHeight,RPAREN,thumbHeight,EQ,imageHeight,SEMI,BufferedImage,thumbImage,EQ,NEW,BufferedImage,LPAREN,thumbWidth,COMMA,thumbHeight,COMMA,BufferedImage,DOT,TYPE_INT_RGB,RPAREN,SEMI,Graphics2D,graphics2D,EQ,thumbImage,DOT,createGraphics,LPAREN,RPAREN,SEMI,graphics2D,DOT,setBackground,LPAREN,Color,DOT,WHITE,RPAREN,SEMI,graphics2D,DOT,setPaint,LPAREN,Color,DOT,WHITE,RPAREN,SEMI,graphics2D,DOT,fillRect,LPAREN,0,COMMA,0,COMMA,thumbWidth,COMMA,thumbHeight,RPAREN,SEMI,graphics2D,DOT,setRenderingHint,LPAREN,RenderingHints,DOT,KEY_INTERPOLATION,COMMA,RenderingHints,DOT,VALUE_INTERPOLATION_BILINEAR,RPAREN,SEMI,graphics2D,DOT,drawImage,LPAREN,image,COMMA,0,COMMA,0,COMMA,thumbWidth,COMMA,thumbHeight,COMMA,null,RPAREN,SEMI,javax,DOT,imageio,DOT,ImageIO,DOT,write,LPAREN,thumbImage,COMMA,""JPG"",COMMA,NEW,File,LPAREN,thumbnailFile,RPAREN,RPAREN,SEMI,RBRACE"," public void transform(String originalFile, String thumbnailFile, int thumbWidth, int thumbHeight, int quality) throws Exception 
, {
,   Image image = javax.imageio.ImageIO.read(new File(originalFile));
,     
,     double thumbRatio = (double)thumbWidth / (double)thumbHeight;
,     int imageWidth    = image.getWidth(null);
,     int imageHeight   = image.getHeight(null);
,     double imageRatio = (double)imageWidth / (double)imageHeight;
,     if (thumbRatio < imageRatio) 
,     {
,       thumbHeight = (int)(thumbWidth / imageRatio);
,     } 
,     else 
,     {
,         thumbWidth = (int)(thumbHeight <MASK> imageRatio);
,     }
,     
,   if(imageWidth < thumbWidth && imageHeight < thumbHeight)
,   {
,     thumbWidth = imageWidth;
,     thumbHeight = imageHeight;
,   }
,   else if(imageWidth < thumbWidth)
,     thumbWidth = imageWidth;
,   else if(imageHeight < thumbHeight)
,     thumbHeight = imageHeight;
,
,     BufferedImage thumbImage = new BufferedImage(thumbWidth, thumbHeight, BufferedImage.TYPE_INT_RGB);
,     Graphics2D graphics2D = thumbImage.createGraphics();
,     graphics2D.setBackground(Color.WHITE);
,     graphics2D.setPaint(Color.WHITE); 
,     graphics2D.fillRect(0, 0, thumbWidth, thumbHeight);
,     graphics2D.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
,     graphics2D.drawImage(image, 0, 0, thumbWidth, thumbHeight, null);
,     
,   javax.imageio.ImageIO.write(thumbImage, ""JPG"", new File(thumbnailFile));
, }
"
a976df20-c97b-4d57-87ae-cd8f116ed755,71d3fb3d-2c58-44b1-b19f-717ae79eb2cd,PLUS,"PRIVATE,int,getSlope,LPAREN,FINAL,int,start,COMMA,FINAL,int,end,RPAREN,LBRACE,IF,LPAREN,end,GT,start,RPAREN,RETURN,<MASK>,1,SEMI,ELSE,IF,LPAREN,start,GT,end,RPAREN,RETURN,SUB,1,SEMI,ELSE,RETURN,0,SEMI,RBRACE","	private int getSlope( final int start, final int end ) {
,		if( end > start ) return <MASK>1;
,		else if( start > end ) return -1;
,		else return 0;
,	}
"
a4c68a60-241d-4ccc-bb34-58eb273247fe,662b62a8-5ad5-41a7-bc60-9ae0f484f66d,PLUS,"PRIVATE,STATIC,SvnChangeType,asChangeType,LPAREN,String,action,RPAREN,LBRACE,IF,LPAREN,action,DOT,equals,LPAREN,""A"",RPAREN,RPAREN,RETURN,SvnChangeType,DOT,Added,SEMI,ELSE,IF,LPAREN,action,DOT,equals,LPAREN,""D"",RPAREN,RPAREN,RETURN,SvnChangeType,DOT,Delete,SEMI,ELSE,IF,LPAREN,action,DOT,equals,LPAREN,""M"",RPAREN,RPAREN,RETURN,SvnChangeType,DOT,Modified,SEMI,ELSE,IF,LPAREN,action,DOT,equals,LPAREN,""R"",RPAREN,RPAREN,RETURN,SvnChangeType,DOT,Replaced,SEMI,ELSE,THROW,NEW,IllegalStateException,LPAREN,""Unknown svn action: "",<MASK>,action,RPAREN,SEMI,RBRACE","		private static SvnChangeType asChangeType(String action) {
,			if (action.equals(""A"")) return SvnChangeType.Added;
,			else if (action.equals(""D"")) return SvnChangeType.Delete;
,			else if (action.equals(""M"")) return SvnChangeType.Modified;
,			else if (action.equals(""R"")) return SvnChangeType.Replaced;
,			else throw new IllegalStateException(""Unknown svn action: "" <MASK> action);
,		}
"
3913c395-db09-4ac4-8282-49a81b6a21f4,66734176-e8f0-4aab-ad62-56a0221e65c6,BANGEQ,"PRIVATE,void,renderSelection,LPAREN,Graphics2D,g,RPAREN,LBRACE,IF,LPAREN,selection,<MASK>,null,RPAREN,LBRACE,g,DOT,setStroke,LPAREN,NEW,BasicStroke,LPAREN,1.0f,RPAREN,RPAREN,SEMI,g,DOT,setColor,LPAREN,Color,DOT,blue,RPAREN,SEMI,g,DOT,drawRect,LPAREN,selection,DOT,x,COMMA,selection,DOT,y,COMMA,selection,DOT,width,COMMA,selection,DOT,height,RPAREN,SEMI,RBRACE,RBRACE","	private void renderSelection(Graphics2D g) {
,		if (selection <MASK> null) {
,			g.setStroke(new BasicStroke(1.0f));
,			g.setColor(Color.blue);
,			g.drawRect(selection.x, selection.y, selection.width, selection.height);
,		}
,	}
"
113c5414-6c55-466b-b879-a350ab6e0ca2,3ee5748c-779a-4abf-922d-b0c6a92e0ee3,EQ,"PUBLIC,void,setDifficulty,LPAREN,int,difficulty,RPAREN,LBRACE,this,DOT,difficulty,<MASK>,difficulty,SEMI,RBRACE","	public void setDifficulty(int difficulty) {
,		this.difficulty <MASK> difficulty;
,	}
"
3913c395-db09-4ac4-8282-49a81b6a21f4,eb361910-bd4e-47ad-8537-b89cab2da91b,BANGEQ,"PUBLIC,void,add,LPAREN,ImageResource,img,COMMA,int,id,RPAREN,LBRACE,assert,img,<MASK>,null,SEMI,add,LPAREN,NEW,TileData,LPAREN,img,RPAREN,COMMA,id,RPAREN,SEMI,RBRACE","	public void add(ImageResource img, int id) {
,		assert img <MASK> null;
,		add(new TileData(img), id);
,	}
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,d8cdf1ac-857e-40f0-9668-d9c38bf57ee0,LT,"MONKEYS_AT,Override,PROTECTED,String,LBRACKET,RBRACKET,getNames,LPAREN,RPAREN,LBRACE,String,LBRACKET,RBRACKET,ns,EQ,NEW,String,LBRACKET,names,DOT,size,LPAREN,RPAREN,RBRACKET,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,ns,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,ns,LBRACKET,i,RBRACKET,EQ,names,DOT,get,LPAREN,i,RPAREN,SEMI,RBRACE,RETURN,ns,SEMI,RBRACE","  @Override
,  protected String[] getNames() {
,    String[] ns = new String[names.size()];
,
,    for (int i = 0 ; i <MASK> ns.length ; i++) {
,      ns[i] = names.get(i);
,    }
,
,    return ns;
,  }
"
0a4ca423-774e-4648-9a00-98a0346992be,b83d5893-ad1f-4059-90a5-a217398d38d5,EQEQ,"PUBLIC,STATIC,OrderedProperties,sortProperties,LPAREN,FINAL,Map,LT,String,COMMA,String,GT,map,COMMA,FINAL,Comparator,LT,Map,DOT,Entry,LT,String,COMMA,String,GTGT,comparator,RPAREN,LBRACE,IF,LPAREN,map,<MASK>,null,RPAREN,RETURN,NEW,OrderedProperties,LPAREN,RPAREN,SEMI,FINAL,OrderedProperties,orderedProperties,EQ,NEW,OrderedProperties,LPAREN,RPAREN,SEMI,orderedProperties,DOT,putAll,LPAREN,Maps,DOT,sort,LPAREN,map,COMMA,comparator,RPAREN,RPAREN,SEMI,RETURN,orderedProperties,SEMI,RBRACE","	public static OrderedProperties sortProperties(final Map<String, String> map, final Comparator<Map.Entry<String, String>> comparator) {
,		if (map <MASK> null) return new OrderedProperties();
,		final OrderedProperties orderedProperties = new OrderedProperties();
,		orderedProperties.putAll(Maps.sort(map, comparator));
,		return orderedProperties;
,	}
"
e03d1a2f-9ec0-4127-b57f-aac96a5f146a,902768f0-35ca-4855-b7a6-1a6ccf343c79,GTEQ,"PUBLIC,void,run,LPAREN,RPAREN,LBRACE,InputStream,instr,EQ,tc,DOT,getInputStream,LPAREN,RPAREN,SEMI,TRY,LBRACE,byte,LBRACKET,RBRACKET,buff,EQ,NEW,byte,LBRACKET,1024,RBRACKET,SEMI,int,ret_read,EQ,0,SEMI,DO,LBRACE,ret_read,EQ,instr,DOT,read,LPAREN,buff,RPAREN,SEMI,IF,LPAREN,ret_read,GT,0,RPAREN,LBRACE,System,DOT,out,DOT,print,LPAREN,NEW,String,LPAREN,buff,COMMA,0,COMMA,ret_read,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,WHILE,LPAREN,ret_read,<MASK>,0,RPAREN,SEMI,RBRACE,CATCH,LPAREN,IOException,e,RPAREN,LBRACE,System,DOT,err,DOT,println,LPAREN,""Exception while reading socket:"",PLUS,e,DOT,getMessage,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,TRY,LBRACE,tc,DOT,disconnect,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,IOException,e,RPAREN,LBRACE,System,DOT,err,DOT,println,LPAREN,""Exception while closing telnet:"",PLUS,e,DOT,getMessage,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,RBRACE","    public void run()
,    {
,        InputStream instr = tc.getInputStream();
,
,        try
,        {
,            byte[] buff = new byte[1024];
,            int ret_read = 0;
,
,            do
,            {
,                ret_read = instr.read(buff);
,                if(ret_read > 0)
,                {
,                    System.out.print(new String(buff, 0, ret_read));
,                }
,            }
,            while (ret_read <MASK> 0);
,        }
,        catch (IOException e)
,        {
,            System.err.println(""Exception while reading socket:"" + e.getMessage());
,        }
,
,        try
,        {
,            tc.disconnect();
,        }
,        catch (IOException e)
,        {
,            System.err.println(""Exception while closing telnet:"" + e.getMessage());
,        }
,    }
"
5ee16f26-d690-4884-9baa-b57e0c8c43d6,11a6d58a-dcc7-4380-a713-c6f6f6910178,STAR,"PUBLIC,STATIC,void,runProgrammatically,LPAREN,boolean,exitOnClose,RPAREN,LBRACE,BasicConfigurator,DOT,configure,LPAREN,RPAREN,SEMI,FINAL,JFrame,frame,EQ,NEW,JFrame,LPAREN,RPAREN,SEMI,frame,DOT,setSize,LPAREN,1200,COMMA,440,RPAREN,SEMI,IF,LPAREN,exitOnClose,RPAREN,LBRACE,frame,DOT,setDefaultCloseOperation,LPAREN,JFrame,DOT,EXIT_ON_CLOSE,RPAREN,SEMI,RBRACE,frame,DOT,setTitle,LPAREN,""Line Editor. red - start, blue - end"",RPAREN,SEMI,int,size,EQ,200,SEMI,Menu,menu,EQ,NEW,Menu,LPAREN,RPAREN,SEMI,frame,DOT,setJMenuBar,LPAREN,menu,RPAREN,SEMI,Editable,line1,EQ,NEW,Editable,LPAREN,RPAREN,SEMI,Editable,line2,EQ,NEW,Editable,LPAREN,RPAREN,SEMI,int,epsilon,EQ,100,SEMI,line1,DOT,addPoint,LPAREN,NEW,Coordinate,LPAREN,0,COMMA,200,RPAREN,RPAREN,SEMI,line1,DOT,addPoint,LPAREN,NEW,Coordinate,LPAREN,200,COMMA,0,RPAREN,RPAREN,SEMI,line2,DOT,addPoint,LPAREN,NEW,Coordinate,LPAREN,0,COMMA,100,RPAREN,RPAREN,SEMI,line2,DOT,addPoint,LPAREN,NEW,Coordinate,LPAREN,200,COMMA,100,RPAREN,RPAREN,SEMI,FINAL,DualLineEditor,lineEditor,EQ,NEW,DualLineEditor,LPAREN,size,COMMA,size,COMMA,line1,COMMA,line2,COMMA,epsilon,RPAREN,SEMI,GridBagConstraints,c,EQ,NEW,GridBagConstraints,LPAREN,RPAREN,SEMI,JPanel,mainPanel,EQ,NEW,JPanel,LPAREN,NEW,GridBagLayout,LPAREN,RPAREN,RPAREN,SEMI,frame,DOT,setContentPane,LPAREN,mainPanel,RPAREN,SEMI,c,DOT,weightx,EQ,1.0,SEMI,c,DOT,fill,EQ,GridBagConstraints,DOT,BOTH,SEMI,c,DOT,gridy,EQ,1,SEMI,c,DOT,weighty,EQ,1.0,SEMI,mainPanel,DOT,add,LPAREN,lineEditor,COMMA,c,RPAREN,SEMI,frame,DOT,setVisible,LPAREN,true,RPAREN,SEMI,Toolkit,DOT,getDefaultToolkit,LPAREN,RPAREN,DOT,addAWTEventListener,LPAREN,NEW,AWTEventListener,LPAREN,RPAREN,LBRACE,MONKEYS_AT,Override,PUBLIC,void,eventDispatched,LPAREN,AWTEvent,e,RPAREN,LBRACE,IF,LPAREN,e,DOT,getSource,LPAREN,RPAREN,BANGEQ,frame,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,e,DOT,getSource,LPAREN,RPAREN,RPAREN,SEMI,RETURN,SEMI,RBRACE,SEMI,MouseWheelEvent,event,EQ,LPAREN,MouseWheelEvent,RPAREN,e,SEMI,int,modifiers,EQ,event,DOT,getModifiers,LPAREN,RPAREN,SEMI,boolean,big,EQ,LPAREN,modifiers,AMP,InputEvent,DOT,CTRL_MASK,RPAREN,BANGEQ,0,SEMI,int,rotation,EQ,event,DOT,getWheelRotation,LPAREN,RPAREN,SEMI,int,value,EQ,lineEditor,DOT,getSlider,LPAREN,RPAREN,DOT,getValue,LPAREN,RPAREN,SEMI,int,newValue,EQ,value,PLUS,rotation,<MASK>,LPAREN,big,QUES,STEP_SIZE_BIG,COLON,STEP_SIZE,RPAREN,SEMI,lineEditor,DOT,getSlider,LPAREN,RPAREN,DOT,setValue,LPAREN,newValue,RPAREN,SEMI,RBRACE,RBRACE,COMMA,AWTEvent,DOT,MOUSE_WHEEL_EVENT_MASK,RPAREN,SEMI,RBRACE","	public static void runProgrammatically(boolean exitOnClose) {
,		BasicConfigurator.configure();
,
,		final JFrame frame = new JFrame();
,		frame.setSize(1200, 440);
,		if (exitOnClose) {
,			frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
,		}
,
,		frame.setTitle(""Line Editor. red - start, blue - end"");
,
,		int size = 200;
,
,		Menu menu = new Menu();
,		frame.setJMenuBar(menu);
,
,		Editable line1 = new Editable();
,		Editable line2 = new Editable();
,
,		// line1.addPoint(new Coordinate(20, 50));
,		// line1.addPoint(new Coordinate(170, 150));
,		//
,		// line2.addPoint(new Coordinate(30, 150));
,		// line2.addPoint(new Coordinate(140, 50));
,
,		// int epsilon = 50;
,
,		// line1.addPoint(new Coordinate(0, 100));
,		// line1.addPoint(new Coordinate(100, 0));
,		//
,		// line2.addPoint(new Coordinate(0, 50));
,		// line2.addPoint(new Coordinate(100, 50));
,
,		int epsilon = 100;
,
,		line1.addPoint(new Coordinate(0, 200));
,		line1.addPoint(new Coordinate(200, 0));
,
,		line2.addPoint(new Coordinate(0, 100));
,		line2.addPoint(new Coordinate(200, 100));
,
,		// line2.addPoint(new Coordinate(0, 200));
,		// line2.addPoint(new Coordinate(200, 0));
,
,		final DualLineEditor lineEditor = new DualLineEditor(size, size, line1,
,				line2, epsilon);
,
,		GridBagConstraints c = new GridBagConstraints();
,
,		JPanel mainPanel = new JPanel(new GridBagLayout());
,		frame.setContentPane(mainPanel);
,
,		c.weightx = 1.0;
,		c.fill = GridBagConstraints.BOTH;
,
,		c.gridy = 1;
,		c.weighty = 1.0;
,		mainPanel.add(lineEditor, c);
,
,		frame.setVisible(true);
,
,		Toolkit.getDefaultToolkit().addAWTEventListener(new AWTEventListener() {
,
,			@Override
,			public void eventDispatched(AWTEvent e) {
,				if (e.getSource() != frame) {
,					System.out.println(e.getSource());
,					return;
,				}
,				;
,				MouseWheelEvent event = (MouseWheelEvent) e;
,
,				int modifiers = event.getModifiers();
,				boolean big = (modifiers & InputEvent.CTRL_MASK) != 0;
,
,				int rotation = event.getWheelRotation();
,				int value = lineEditor.getSlider().getValue();
,				int newValue = value + rotation
,						<MASK> (big ? STEP_SIZE_BIG : STEP_SIZE);
,				lineEditor.getSlider().setValue(newValue);
,			}
,		}, AWTEvent.MOUSE_WHEEL_EVENT_MASK);
,	}
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,290b2b7f-e767-4822-9c9e-119e6d893517,SUB,"PUBLIC,int,compare,LPAREN,Rectangle,rA,COMMA,Rectangle,rB,RPAREN,LBRACE,RETURN,LPAREN,rA,DOT,x,<MASK>,rB,DOT,x,RPAREN,SEMI,RBRACE","		public int compare(Rectangle rA, Rectangle rB) {
,			return (rA.x <MASK> rB.x);
,		}
"
927eecd3-2471-4c84-a24b-658b6fdb3a9f,3e9f23b6-3e15-496d-9082-20a9d5192609,GTEQ,"PUBLIC,Chemins,LT,C,COMMA,A,COMMA,N,COMMA,E,GT,djikstra,LPAREN,N,origine,COMMA,N,destination,RPAREN,LBRACE,HashMap,LT,N,COMMA,Double,GT,distance_connue,EQ,NEW,HashMap,LT,N,COMMA,Double,GT,LPAREN,RPAREN,SEMI,HashMap,LT,N,COMMA,Double,GT,distance_provisoire,EQ,NEW,HashMap,LT,N,COMMA,Double,GT,LPAREN,RPAREN,SEMI,Chemins,LT,C,COMMA,A,COMMA,N,COMMA,E,GT,plus_courts,EQ,NEW,Chemins,LT,C,COMMA,A,COMMA,N,COMMA,E,GT,LPAREN,this,DOT,classeChemin,RPAREN,SEMI,C,chemin_trivial,EQ,null,SEMI,C,chemin_courant,EQ,null,SEMI,PriorityQueue,LT,C,GT,a_traiter,EQ,NEW,PriorityQueue,LT,C,GT,LPAREN,1,COMMA,NEW,DestinationFirst,LPAREN,destination,RPAREN,RPAREN,SEMI,TRY,LBRACE,chemin_trivial,EQ,this,DOT,classeChemin,DOT,newInstance,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""Cr\u00E9ation chemin trivial"",RPAREN,SEMI,A,arete_triviale,EQ,this,DOT,classeArete,DOT,getDeclaredConstructor,LPAREN,NEW,Class,LBRACKET,RBRACKET,LBRACE,this,DOT,classeNoeud,COMMA,this,DOT,classeNoeud,COMMA,Double,DOT,CLASS,RBRACE,RPAREN,DOT,newInstance,LPAREN,origine,COMMA,origine,COMMA,0.0,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""Arete cr\u00E9\u00E9e"",RPAREN,SEMI,chemin_trivial,DOT,add,LPAREN,arete_triviale,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""Arete ajout\u00E9e"",RPAREN,SEMI,chemin_courant,EQ,this,DOT,classeChemin,DOT,newInstance,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""Chemin cr\u00E9\u00E9"",RPAREN,SEMI,RBRACE,CATCH,LPAREN,Exception,e,RPAREN,LBRACE,System,DOT,err,DOT,println,LPAREN,""Arete triviale non cr\u00E9\u00E9e"",RPAREN,SEMI,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,a_traiter,DOT,add,LPAREN,chemin_trivial,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""Debut algo"",RPAREN,SEMI,WHILE,LPAREN,BANG,a_traiter,DOT,isEmpty,LPAREN,RPAREN,RPAREN,LBRACE,WHILE,LPAREN,LPAREN,BANG,a_traiter,DOT,isEmpty,LPAREN,RPAREN,RPAREN,AMPAMP,LPAREN,chemin_courant,EQ,a_traiter,DOT,remove,LPAREN,RPAREN,RPAREN,DOT,last,LPAREN,RPAREN,DOT,getContent,LPAREN,RPAREN,EQEQ,destination,DOT,getContent,LPAREN,RPAREN,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""plus court trouv\u00E9"",RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,chemin_courant,RPAREN,SEMI,IF,LPAREN,BANG,chemin_courant,DOT,isTrivial,LPAREN,RPAREN,RPAREN,chemin_courant,DOT,untrivial,LPAREN,RPAREN,SEMI,plus_courts,DOT,add,LPAREN,chemin_courant,RPAREN,SEMI,RBRACE,IF,LPAREN,BANG,plus_courts,DOT,isEmpty,LPAREN,RPAREN,RPAREN,RETURN,plus_courts,SEMI,distance_connue,DOT,put,LPAREN,chemin_courant,DOT,last,LPAREN,RPAREN,COMMA,chemin_courant,DOT,getLength,LPAREN,RPAREN,RPAREN,SEMI,IF,LPAREN,BANG,distance_provisoire,DOT,containsKey,LPAREN,chemin_courant,DOT,last,LPAREN,RPAREN,RPAREN,BARBAR,distance_provisoire,DOT,get,LPAREN,chemin_courant,DOT,last,LPAREN,RPAREN,RPAREN,<MASK>,chemin_courant,DOT,getLength,LPAREN,RPAREN,RPAREN,LBRACE,distance_provisoire,DOT,put,LPAREN,chemin_courant,DOT,last,LPAREN,RPAREN,COMMA,chemin_courant,DOT,getLength,LPAREN,RPAREN,RPAREN,SEMI,FOR,LPAREN,C,nouveau,COLON,chemin_courant,DOT,successeurs,LPAREN,RPAREN,RPAREN,IF,LPAREN,BANG,distance_connue,DOT,containsKey,LPAREN,nouveau,DOT,last,LPAREN,RPAREN,RPAREN,RPAREN,LBRACE,a_traiter,DOT,add,LPAREN,nouveau,RPAREN,SEMI,distance_provisoire,DOT,put,LPAREN,nouveau,DOT,last,LPAREN,RPAREN,COMMA,nouveau,DOT,getLength,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,ELSE,LBRACE,RBRACE,RBRACE,RBRACE,RETURN,plus_courts,SEMI,RBRACE","	public Chemins<C,A,N,E> djikstra( N origine , N destination) {
,
,		HashMap<N,Double> distance_connue = new HashMap<N,Double>() ;
,		HashMap<N,Double> distance_provisoire = new HashMap<N,Double>() ;
,		Chemins<C,A,N,E> plus_courts = new Chemins<C,A,N,E>( this.classeChemin) ;
,		
,		//Chemin<C,A,N,E> chemin_trivial = new Chemin<C,A,N,E>( this.classeChemin ) ;
,		C chemin_trivial = null ;
,		C chemin_courant = null ;
,		// Initialisation de la Queue de priorite
,		PriorityQueue<C> a_traiter = new PriorityQueue<C>( 1 , new DestinationFirst( destination ) ) ;
,		
,		
,		try {
,			
,			chemin_trivial = this.classeChemin.newInstance() ;
,			System.out.println( ""Création chemin trivial"" );
,			A arete_triviale = this.classeArete.getDeclaredConstructor(
,						new Class[] { this.classeNoeud , this.classeNoeud , Double.class }
,					).newInstance( origine , origine , 0.0 ) ;
,			System.out.println( ""Arete créée"" ) ;
,			chemin_trivial.add( arete_triviale ) ;
,			System.out.println( ""Arete ajoutée"" ) ;
,			chemin_courant = this.classeChemin.newInstance() ;
,			System.out.println( ""Chemin créé"" ) ;
,		
,		} catch( Exception e) {
,			System.err.println( ""Arete triviale non créée"" ) ;
,			e.printStackTrace();
,		}
,		
,		
,		
,		a_traiter.add( chemin_trivial ) ;
,
,		
,		
,		System.out.println( ""Debut algo"" ) ;
,		
,		while ( ! a_traiter.isEmpty() )
,		{	
,			//System.out.println( ""Entrée dans la boucle|A_triater:"" + a_traiter.size() + ""|Connue:"" + distance_connue.size() ) ;
,			
,			// On commence par récupérer ceux allant à la destination parmi les sous-chemins les plus courts
,			while( (! a_traiter.isEmpty() ) && (chemin_courant = a_traiter.remove()).last().getContent() == destination.getContent() )
,			{	
,				System.out.println( ""plus court trouvé"" ) ;
,				System.out.println( chemin_courant );
,				
,				if ( ! chemin_courant.isTrivial() )
,					chemin_courant.untrivial();
,				
,				plus_courts.add( chemin_courant ) ;
,			}
,			
,			//System.out.println( chemin_courant.last().getContent() ) ;
,			
,			// S'il y en a, le traitement est fini
,			if( ! plus_courts.isEmpty() )
,				return plus_courts ;
,	
,			// Sinon, on itere
,			distance_connue.put( chemin_courant.last() , chemin_courant.getLength() ) ;				
,			
,			
,			
,			if( ! distance_provisoire.containsKey( chemin_courant.last() )
,					|| 
,				distance_provisoire.get( chemin_courant.last() ) <MASK> chemin_courant.getLength() 
,					)
,			{
,				distance_provisoire.put( chemin_courant.last() , chemin_courant.getLength() ) ;				
,				//System.out.println( ""Mise à jour distance provisoire"" );
,				//System.out.println( ""Last"" + chemin_courant.last().getContent() ) ;
, 
,				for( C nouveau : chemin_courant.successeurs() )
,					if( ! distance_connue.containsKey( nouveau.last() ) )
,					{	
,						a_traiter.add( nouveau ) ;
,						distance_provisoire.put( nouveau.last() , nouveau.getLength() ) ;				
,						//System.out.println( ""Ajout de:"" + nouveau.last().getContent() );
,					} else {
,						//System.out.println( ""Element deja présent"" + nouveau.last().getContent() );
,					}
,			}
,			
,		} 
,		
,		return plus_courts ;
,	}
"
5735492c-ae75-4373-9d1e-6986d063d859,1554c61b-1c3d-46aa-af15-7f0447778f59,LT,"PUBLIC,SYNCHRONIZED,void,runThread,LPAREN,RPAREN,LBRACE,TRY,LBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,20,SEMI,i,PLUSPLUS,RPAREN,LBRACE,instanceInt,PLUSPLUS,SEMI,IF,LPAREN,instanceInt,EQEQ,10,RPAREN,LBRACE,Thread,DOT,sleep,LPAREN,5000,RPAREN,SEMI,RBRACE,System,DOT,err,DOT,println,LPAREN,""["",PLUS,Thread,DOT,currentThread,LPAREN,RPAREN,DOT,getId,LPAREN,RPAREN,PLUS,""]\u5F53i="",PLUS,i,PLUS,""\u83B7\u53D6staticInt \u7684\u503C:"",PLUS,instanceInt,RPAREN,SEMI,RBRACE,RBRACE,CATCH,LPAREN,InterruptedException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,RBRACE","	public synchronized void runThread() {
,		try {
,			for (int i = 0; i <MASK> 20; i++) {
,				instanceInt++;
,				// 时刻修改着静态变量instanceInt的值，第二个线程进来，instanceInt就为10了
,				if (instanceInt == 10) {
,					Thread.sleep(5000);
,				}
,				System.err.println(""["" + Thread.currentThread().getId() + ""]当i="" + i + ""获取staticInt 的值:"" + instanceInt);
,			}
,		} catch (InterruptedException e) {
,			e.printStackTrace();
,		}
,	}
"
b792a0be-4219-4d3e-95ef-36bcf8d3d523,56c7a98c-0763-42d1-ad08-ee064162ae85,GTEQ,"MONKEYS_AT,Override,PUBLIC,boolean,hasNext,LPAREN,RPAREN,LBRACE,IF,LPAREN,position,<MASK>,addMaterialCommands,DOT,size,LPAREN,RPAREN,BARBAR,addMaterialCommands,EQEQ,null,RPAREN,LBRACE,RETURN,false,SEMI,RBRACE,ELSE,LBRACE,RETURN,true,SEMI,RBRACE,RBRACE","		@Override
,		public boolean hasNext() 
,		{
,			if (position <MASK> addMaterialCommands.size() || addMaterialCommands == null) {
,				return false;
,			} else {
,				return true;
,			}
,		}
"
16b5ef65-203e-4695-8e23-658cc558b525,d57fa585-8e0a-4409-8a3f-8aa2be89fc13,PERCENT,"MONKEYS_AT,Override,PUBLIC,void,notifySignal,LPAREN,int,ELLIPSIS,sig,RPAREN,LBRACE,j,PLUSPLUS,SEMI,SWITCH,LPAREN,mode,RPAREN,LBRACE,CASE,TRAINING,COLON,CASE,IDLE,COLON,IF,LPAREN,j,<MASK>,5,EQEQ,0,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""sig1 \t"",PLUS,sig,LBRACKET,0,RBRACKET,PLUS,""\t"",PLUS,sig,LBRACKET,1,RBRACKET,PLUS,""\t"",PLUS,sig,LBRACKET,2,RBRACKET,RPAREN,SEMI,RBRACE,CASE,CLASSIFYING,COLON,sampleRecog,DOT,recognizeSample,LPAREN,sig,RPAREN,SEMI,BREAK,SEMI,CASE,RECORDING,COLON,IF,LPAREN,recording,RPAREN,LBRACE,SignalEntry,se,EQ,null,SEMI,IF,LPAREN,isNextSignalOnset,RPAREN,LBRACE,se,EQ,NEW,SignalEntry,LPAREN,true,COMMA,gui,DOT,getCurrentGesture,LPAREN,RPAREN,COMMA,sig,RPAREN,SEMI,isNextSignalOnset,EQ,false,SEMI,RBRACE,ELSE,LBRACE,se,EQ,NEW,SignalEntry,LPAREN,false,COMMA,Gesture,DOT,UNDEFINED,COMMA,sig,RPAREN,SEMI,RBRACE,record,DOT,add,LPAREN,se,RPAREN,SEMI,RBRACE,BREAK,SEMI,DEFAULT,COLON,BREAK,SEMI,RBRACE,RBRACE","	@Override
,	public void notifySignal(int... sig) {
,		j++;
,
,		// notify gui
,
,		// gui.notify(new Signal(sig[0]), new Signal(sig[1]), new
,		// Signal(sig[2]));
,
,		switch (mode) {
,
,		case TRAINING:
,		case IDLE:
,			if (j <MASK> 5 == 0) {
,				System.out.println(""sig1 \t"" + sig[0] + ""\t"" + sig[1] + ""\t"" + sig[2]);
,//				System.out.println(""sig2 "" + sig[1]);
,//				System.out.println(""sig3 "" + sig[2]);
,
,			}
,		case CLASSIFYING:
,			// forward Signals to SampleRecognizer
,			sampleRecog.recognizeSample(sig);
,			break;
,		case RECORDING:
,			if (recording) {
,
,				// if (waitForOnset) {
,				//
,				// for (int i : sig) {
,				//
,				// if (i >= simpleOnsetThreshold) {
,				//
,				// isNextSignalOnset = true;
,				// waitForOnset = false;
,				// break;
,				//
,				// }
,				//
,				// }
,				//
,				//
,				// }
,
,				SignalEntry se = null;
,				if (isNextSignalOnset) {
,
,					se = new SignalEntry(true, gui.getCurrentGesture(), sig);
,					isNextSignalOnset = false;
,
,				} else {
,
,					se = new SignalEntry(false, Gesture.UNDEFINED, sig);
,
,				}
,				record.add(se);
,			}
,			break;
,
,		default:
,			break;
,		}
,
,	}
"
1b82c97a-fe19-4584-bdbc-4f13bb123c10,d206e55b-9f58-448f-9ca9-a137d0fd2b03,GTEQ,"MONKEYS_AT,Override,PUBLIC,void,$_,LPAREN,int,n,COMMA,double,v,RPAREN,THROWS,NRException,LBRACE,IF,LPAREN,off,PLUS,n,<MASK>,arr,DOT,length,BARBAR,off,PLUS,n,LT,0,RPAREN,THROW,NEW,NRException,LPAREN,""out of range offset used for offset $double"",RPAREN,SEMI,arr,LBRACKET,off,PLUS,n,RBRACKET,EQ,v,SEMI,RBRACE","        @Override
,        public void $_(int n, double v) throws NRException {
,            if (off + n <MASK> arr.length || off + n < 0)
,                throw new NRException(""out of range offset used for offset $double"");
,            arr[off+n] = v;
,        }
"
ad0a2aad-9ad8-443c-832f-88b9f64460ed,4e9d6863-02f2-433d-bf71-3242941c78db,EQ,"PUBLIC,Feeder,LPAREN,RPAREN,LBRACE,motor,<MASK>,NEW,Victor,LPAREN,RobotMap,DOT,feederMotorPort,RPAREN,SEMI,RBRACE","    public Feeder() {
,        motor <MASK> new Victor(RobotMap.feederMotorPort);
,    }
"
a12f1b40-1037-49ca-8a3a-6cc46fb26c88,c7c3bf4e-69d0-40e4-8ab6-49b0fd38e802,SLASH,"double,bagi,LPAREN,RPAREN,LBRACE,RETURN,op1,<MASK>,op2,SEMI,RBRACE","	double bagi() { return op1 <MASK> op2; }
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,3fb29f13-c9aa-49d7-a8fa-e57d2a68e014,LT,"PRIVATE,SYNCHRONIZED,void,handleConnectionProperty,LPAREN,INDISwitchElementAndValue,LBRACKET,RBRACKET,newEvs,COMMA,Date,timestamp,RPAREN,LBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,newEvs,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,INDISwitchElement,el,EQ,newEvs,LBRACKET,i,RBRACKET,DOT,getElement,LPAREN,RPAREN,SEMI,SwitchStatus,s,EQ,newEvs,LBRACKET,i,RBRACKET,DOT,getValue,LPAREN,RPAREN,SEMI,IF,LPAREN,el,EQEQ,connectedE,RPAREN,LBRACE,IF,LPAREN,s,EQEQ,SwitchStatus,DOT,ON,RPAREN,LBRACE,IF,LPAREN,connectedE,DOT,getValue,LPAREN,RPAREN,BANGEQ,SwitchStatus,DOT,ON,RPAREN,LBRACE,TRY,LBRACE,LPAREN,LPAREN,INDIConnectionHandler,RPAREN,this,RPAREN,DOT,driverConnect,LPAREN,timestamp,RPAREN,SEMI,setConnectionProperty,LPAREN,true,RPAREN,SEMI,RBRACE,CATCH,LPAREN,INDIException,e,RPAREN,LBRACE,setConnectionProperty,LPAREN,false,COMMA,e,DOT,getMessage,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,ELSE,LBRACE,setConnectionProperty,LPAREN,true,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,ELSE,IF,LPAREN,el,EQEQ,disconnectedE,RPAREN,LBRACE,IF,LPAREN,s,EQEQ,SwitchStatus,DOT,ON,RPAREN,LBRACE,IF,LPAREN,disconnectedE,DOT,getValue,LPAREN,RPAREN,BANGEQ,SwitchStatus,DOT,ON,RPAREN,LBRACE,TRY,LBRACE,LPAREN,LPAREN,INDIConnectionHandler,RPAREN,this,RPAREN,DOT,driverDisconnect,LPAREN,timestamp,RPAREN,SEMI,setConnectionProperty,LPAREN,false,RPAREN,SEMI,RBRACE,CATCH,LPAREN,INDIException,e,RPAREN,LBRACE,setConnectionProperty,LPAREN,true,COMMA,e,DOT,getMessage,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,ELSE,LBRACE,setConnectionProperty,LPAREN,false,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,RBRACE,RBRACE","  private synchronized void handleConnectionProperty(INDISwitchElementAndValue[] newEvs, Date timestamp) {
,    for (int i = 0 ; i <MASK> newEvs.length ; i++) {
,      INDISwitchElement el = newEvs[i].getElement();
,      SwitchStatus s = newEvs[i].getValue();
,
,      if (el == connectedE) {
,        if (s == SwitchStatus.ON) {
,          if (connectedE.getValue() != SwitchStatus.ON) {
,            try {
,              ((INDIConnectionHandler)this).driverConnect(timestamp);
,
,              setConnectionProperty(true);
,            } catch (INDIException e) {
,              setConnectionProperty(false, e.getMessage());
,            }
,          } else {
,            setConnectionProperty(true);
,          }
,        }
,      } else if (el == disconnectedE) {
,        if (s == SwitchStatus.ON) {
,          if (disconnectedE.getValue() != SwitchStatus.ON) {
,            try {
,              ((INDIConnectionHandler)this).driverDisconnect(timestamp);
,
,              setConnectionProperty(false);
,            } catch (INDIException e) {
,              setConnectionProperty(true, e.getMessage());
,            }
,          } else {
,            setConnectionProperty(false);
,          }
,        }
,      }
,    }
,  }
"
a4c68a60-241d-4ccc-bb34-58eb273247fe,7eff30a2-6656-4aa0-a3aa-1225f76a9bfb,PLUS,"MONKEYS_AT,Override,PUBLIC,int,hashCode,LPAREN,RPAREN,LBRACE,int,result,EQ,gitPath,BANGEQ,null,QUES,gitPath,DOT,hashCode,LPAREN,RPAREN,COLON,0,SEMI,result,EQ,31,STAR,result,<MASK>,LPAREN,folder,BANGEQ,null,QUES,folder,DOT,hashCode,LPAREN,RPAREN,COLON,0,RPAREN,SEMI,RETURN,result,SEMI,RBRACE","	@Override public int hashCode() {
,		int result = gitPath != null ? gitPath.hashCode() : 0;
,		result = 31 * result <MASK> (folder != null ? folder.hashCode() : 0);
,		return result;
,	}
"
46553d6c-dc87-4edc-9d46-5b7555c514e8,84e35eb2-10e3-499d-a705-f01c24cefbb6,PERCENT,"PUBLIC,STATIC,String,show,LPAREN,long,i,COMMA,FINAL,int,num_bits,RPAREN,LBRACE,int,num_chars,EQ,64,SLASH,num_bits,SEMI,IF,LPAREN,64,<MASK>,num_bits,EQEQ,0,RPAREN,LBRACE,SUBSUB,num_chars,SEMI,RBRACE,FINAL,char,LBRACKET,RBRACKET,buf,EQ,NEW,char,LBRACKET,num_chars,PLUS,1,RBRACKET,SEMI,FINAL,int,radix,EQ,1,LTLT,num_bits,SEMI,FINAL,long,mask,EQ,radix,SUB,1,SEMI,FOR,LPAREN,int,charPos,EQ,num_chars,SEMI,charPos,GTEQ,0,SEMI,SUBSUB,charPos,RPAREN,LBRACE,buf,LBRACKET,charPos,RBRACKET,EQ,ByteUtil,DOT,digits,LBRACKET,LPAREN,int,RPAREN,LPAREN,i,AMP,mask,RPAREN,RBRACKET,SEMI,i,GTGTGTEQ,num_bits,SEMI,RBRACE,RETURN,NEW,String,LPAREN,buf,RPAREN,SEMI,RBRACE","  public static String show( long i, final int num_bits ) {
,    int num_chars = 64 / num_bits;
,
,    if ( 64 <MASK> num_bits == 0 ) {
,      --num_chars;
,    }
,
,    final char[] buf = new char[num_chars + 1];
,    final int radix = 1 << num_bits;
,    final long mask = radix - 1;
,
,    for ( int charPos = num_chars; charPos >= 0; --charPos ) {
,      buf[charPos] = ByteUtil.digits[(int)( i & mask )];
,      i >>>= num_bits;
,    }
,
,    return new String( buf );
,  }
"
ce409cfa-d5ce-4a2d-98f1-b91cf6798c84,4704c7d3-10cd-4d9f-b4f7-d29864ad3f96,GT,"MONKEYS_AT,Override,PUBLIC,void,render,LPAREN,float,delta,RPAREN,LBRACE,timeElapsed,PLUSEQ,delta,SEMI,IF,LPAREN,Gdx,DOT,input,DOT,isTouched,LPAREN,RPAREN,BARBAR,Gdx,DOT,input,DOT,isKeyPressed,LPAREN,Keys,DOT,BACK,RPAREN,AMPAMP,timeElapsed,<MASK>,3,RPAREN,LBRACE,this,DOT,game,DOT,setScreen,LPAREN,NEW,TitleScreen,LPAREN,game,RPAREN,RPAREN,SEMI,RBRACE,creditsView,DOT,render,LPAREN,delta,RPAREN,SEMI,RBRACE","	@Override
,	public void render(float delta) {
,		timeElapsed += delta;
,
,		if (Gdx.input.isTouched() || Gdx.input.isKeyPressed(Keys.BACK) && timeElapsed <MASK> 3) {
,			this.game.setScreen(new TitleScreen(game));
,		}
,		creditsView.render(delta);
,	}
"
46d8f694-b1f9-40ac-a94e-e9d7b8a315c4,7ee03bb5-a103-4291-b3ff-c7dcf7913fbb,LTEQ,"PUBLIC,STATIC,void,permuteString,LPAREN,String,beginningString,COMMA,String,endingString,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""Processing BS:"",PLUS,beginningString,PLUS,"" ES: "",PLUS,endingString,RPAREN,SEMI,IF,LPAREN,endingString,DOT,length,LPAREN,RPAREN,<MASK>,1,RPAREN,System,DOT,out,DOT,println,LPAREN,beginningString,PLUS,endingString,RPAREN,SEMI,ELSE,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,endingString,DOT,length,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,TRY,LBRACE,String,part1,EQ,endingString,DOT,substring,LPAREN,0,COMMA,i,RPAREN,SEMI,String,part2,EQ,endingString,DOT,substring,LPAREN,i,PLUS,1,RPAREN,SEMI,String,newEndString,EQ,part1,PLUS,part2,SEMI,System,DOT,out,DOT,println,LPAREN,""i="",PLUS,i,PLUS,""->"",PLUS,part1,PLUS,""+"",PLUS,part2,PLUS,""="",PLUS,newEndString,RPAREN,SEMI,String,newBeginningString,EQ,beginningString,PLUS,endingString,DOT,charAt,LPAREN,i,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""Permute:"",PLUS,newBeginningString,PLUS,"","",PLUS,newEndString,RPAREN,SEMI,permuteString,LPAREN,newBeginningString,COMMA,newEndString,RPAREN,SEMI,RBRACE,CATCH,LPAREN,StringIndexOutOfBoundsException,exception,RPAREN,LBRACE,exception,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,RBRACE","	  public static void permuteString(String beginningString, String endingString) {
,		  System.out.println(""Processing BS:""+beginningString+"" ES: ""+endingString);
,	    if (endingString.length() <MASK> 1)
,	      System.out.println(beginningString + endingString);
,	    else
,	      for (int i = 0; i < endingString.length(); i++) {
,	        try {
,	          String part1 =  endingString.substring(0, i);
,	          String part2=   endingString.substring(i + 1);
,	          String newEndString = part1 + part2;
,	          System.out.println(""i=""+i+""->""+part1+""+""+part2+""=""+newEndString);
,	          String newBeginningString = beginningString + endingString.charAt(i);
,	          System.out.println(""Permute:""+newBeginningString+"",""+newEndString);
,	          permuteString(newBeginningString, newEndString);
,	        } catch (StringIndexOutOfBoundsException exception) {
,	          exception.printStackTrace();
,	        }
,	      }
,	  }
"
b792a0be-4219-4d3e-95ef-36bcf8d3d523,204f9d04-b7af-4126-96a7-98b6cc91570b,GTEQ,"MONKEYS_AT,Override,PUBLIC,void,open,LPAREN,RPAREN,LBRACE,Uiswt,uiswt,EQ,Uiswt,DOT,getInstance,LPAREN,RPAREN,SEMI,uiswt,DOT,openMessageBox,LPAREN,""\u5F00\u59CB\u8425\u4E1A"",RPAREN,SEMI,MessageQueue,DOT,getInstance,LPAREN,RPAREN,DOT,addMessage,LPAREN,""\u5F00\u59CB\u8425\u4E1A\u4E86"",RPAREN,SEMI,IF,LPAREN,Storage,DOT,getInstance,LPAREN,RPAREN,DOT,getRevenue,LPAREN,RPAREN,LT,10000.0,RPAREN,LBRACE,restaurant,DOT,setState,LPAREN,restaurant,DOT,getBadstate,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,Storage,DOT,getInstance,LPAREN,RPAREN,DOT,getRevenue,LPAREN,RPAREN,<MASK>,10000.0,AMPAMP,Storage,DOT,getInstance,LPAREN,RPAREN,DOT,getRevenue,LPAREN,RPAREN,LT,20000.0,RPAREN,LBRACE,restaurant,DOT,setState,LPAREN,restaurant,DOT,getNormalstate,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,ELSE,LBRACE,restaurant,DOT,setState,LPAREN,restaurant,DOT,getGoodstate,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,RBRACE","	@Override
,	public void open() 
,	{
,		Uiswt uiswt = Uiswt.getInstance();
,		uiswt.openMessageBox(""开始营业"");
,		MessageQueue.getInstance().addMessage(""开始营业了"");
,		if(Storage.getInstance().getRevenue() < 10000.0)
,		{
,			restaurant.setState(restaurant.getBadstate());
,		}else if(Storage.getInstance().getRevenue() <MASK> 10000.0 && Storage.getInstance().getRevenue() < 20000.0)
,		{
,			restaurant.setState(restaurant.getNormalstate());
,		}
,		else
,		{
,			restaurant.setState(restaurant.getGoodstate());
,		}
,	}
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,88599629-003b-4315-9d57-baab5b62eb25,BANGEQ,"PRIVATE,STATIC,Constructor,getSuitableConstructor,LPAREN,Constructor,LBRACKET,RBRACKET,constructors,COMMA,Object,LBRACKET,RBRACKET,arguments,RPAREN,THROWS,INDIException,LBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,constructors,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,Constructor,c,EQ,constructors,LBRACKET,i,RBRACKET,SEMI,Class,LBRACKET,RBRACKET,cClassParam,EQ,c,DOT,getParameterTypes,LPAREN,RPAREN,SEMI,boolean,match,EQ,true,SEMI,IF,LPAREN,cClassParam,DOT,length,<MASK>,arguments,DOT,length,RPAREN,LBRACE,match,EQ,false,SEMI,RBRACE,FOR,LPAREN,int,h,EQ,0,SEMI,h,LT,arguments,DOT,length,SEMI,h,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,BANG,cClassParam,LBRACKET,h,RBRACKET,DOT,isInstance,LPAREN,arguments,LBRACKET,h,RBRACKET,RPAREN,RPAREN,LBRACE,match,EQ,false,SEMI,RBRACE,RBRACE,IF,LPAREN,match,RPAREN,LBRACE,RETURN,c,SEMI,RBRACE,RBRACE,THROW,NEW,INDIException,LPAREN,""No suitable class to instantiate. Probably some libraries are missing in the classpath."",RPAREN,SEMI,RBRACE","  private static Constructor getSuitableConstructor(Constructor[] constructors, Object[] arguments) throws INDIException {
,    for (int i = 0 ; i < constructors.length ; i++) {
,      Constructor c = constructors[i];
,
,      Class[] cClassParam = c.getParameterTypes();
,      boolean match = true;
,      if (cClassParam.length <MASK> arguments.length) {
,        match = false;
,      }
,      for (int h = 0 ; h < arguments.length ; h++) {
,        if (!cClassParam[h].isInstance(arguments[h])) {
,          match = false;
,        }
,      }
,
,      if (match) {
,        return c;
,      }
,    }
,
,    throw new INDIException(""No suitable class to instantiate. Probably some libraries are missing in the classpath."");
,  }
"
35ade180-d88e-4313-85ee-c83da04287fd,2b798a2b-ae5f-4a03-873f-849e50c5a491,BANGEQ,"PRIVATE,STATIC,boolean,arePermutations,LPAREN,int,LBRACKET,RBRACKET,v1,COMMA,int,LBRACKET,RBRACKET,v2,RPAREN,LBRACE,IF,LPAREN,v1,DOT,length,<MASK>,v2,DOT,length,RPAREN,LBRACE,RETURN,false,SEMI,RBRACE,int,count,EQ,0,SEMI,HashMap,LT,Integer,COMMA,Integer,GT,terms,EQ,NEW,HashMap,LT,Integer,COMMA,Integer,GT,LPAREN,v1,DOT,length,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,v1,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,terms,DOT,put,LPAREN,v1,LBRACKET,i,RBRACKET,COMMA,i,RPAREN,SEMI,IF,LPAREN,v1,LBRACKET,i,RBRACKET,EQEQ,v2,LBRACKET,i,RBRACKET,RPAREN,LBRACE,count,PLUSPLUS,SEMI,RBRACE,RBRACE,IF,LPAREN,count,EQEQ,v1,DOT,length,RPAREN,LBRACE,RETURN,false,SEMI,RBRACE,boolean,result,EQ,true,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,v2,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,BANG,terms,DOT,containsKey,LPAREN,v2,LBRACKET,i,RBRACKET,RPAREN,RPAREN,LBRACE,result,EQ,false,SEMI,BREAK,SEMI,RBRACE,RBRACE,terms,DOT,clear,LPAREN,RPAREN,SEMI,terms,EQ,null,SEMI,RETURN,result,SEMI,RBRACE","    private static boolean arePermutations(int[] v1, int[] v2) {
,        if (v1.length <MASK> v2.length) {
,            return false;
,        }
,        int count = 0;
,        HashMap<Integer, Integer> terms = new HashMap<Integer, Integer>(v1.length);
,        for (int i = 0; i < v1.length; i++) {
,            terms.put(v1[i], i);
,            if (v1[i] == v2[i]) {
,                count++;
,            }
,        }
,        if (count == v1.length) {
,            return false; // all terms the same
,        }
,        boolean result = true;
,        for (int i = 0; i < v2.length; i++) {
,            if (!terms.containsKey(v2[i])) {
,                result = false;
,                break;
,            }
,        }
,        terms.clear();
,        terms = null;
,        return result;
,    }
"
7a6d4ee7-a11c-445d-8f58-7963e611bee0,5cd7def1-bfba-4314-b96b-afb79f572216,LT,"PRIVATE,int,getRightAnswer,LPAREN,Answer,LBRACKET,RBRACKET,answers,RPAREN,LBRACE,FOR,LPAREN,int,id,EQ,0,SEMI,id,<MASK>,answers,DOT,length,SEMI,id,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,answers,LBRACKET,id,RBRACKET,DOT,isRight,LPAREN,RPAREN,RPAREN,LBRACE,RETURN,id,SEMI,RBRACE,RBRACE,RETURN,SUB,1,SEMI,RBRACE","	private int getRightAnswer(Answer[] answers)
,	{
,		for(int id = 0; id <MASK> answers.length; id++)
,		{
,			if(answers[id].isRight())
,			{
,				return id;
,			}
,		}
,		return -1;
,	}
"
35ade180-d88e-4313-85ee-c83da04287fd,359750ba-585f-4da6-a983-11d8da624e17,BANGEQ,"PUBLIC,STATIC,void,main,LPAREN,String,LBRACKET,RBRACKET,args,RPAREN,LBRACE,FINAL,int,max,EQ,1000000,SEMI,FINAL,HashMap,LT,Integer,COMMA,Integer,GT,primes,EQ,NEW,HashMap,LT,Integer,COMMA,Integer,GT,LPAREN,RPAREN,SEMI,FINAL,SieveOfAtkin,sieve,EQ,NEW,SieveOfAtkin,LPAREN,max,RPAREN,SEMI,FINAL,ArrayList,LT,Integer,GT,list,EQ,sieve,DOT,run,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,prime,COLON,list,RPAREN,LBRACE,primes,DOT,put,LPAREN,prime,COMMA,primes,DOT,size,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,list,DOT,clear,LPAREN,RPAREN,SEMI,FINAL,int,LBRACKET,RBRACKET,digits,EQ,Functions,DOT,getDigits,LPAREN,56113,RPAREN,SEMI,FINAL,DigitSwapper,swapper,EQ,NEW,DigitSwapper,LPAREN,2,COMMA,digits,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,Arrays,DOT,toString,LPAREN,digits,RPAREN,RPAREN,SEMI,int,LBRACKET,RBRACKET,swapped,EQ,null,SEMI,WHILE,LPAREN,LPAREN,swapped,EQ,swapper,DOT,next,LPAREN,RPAREN,RPAREN,<MASK>,null,RPAREN,LBRACE,IF,LPAREN,swapped,LBRACKET,0,RBRACKET,EQEQ,5,AMPAMP,swapped,LBRACKET,1,RBRACKET,EQEQ,6,AMPAMP,swapped,LBRACKET,4,RBRACKET,EQEQ,3,RPAREN,LBRACE,FINAL,int,number,EQ,Functions,DOT,getInt,LPAREN,swapped,RPAREN,SEMI,IF,LPAREN,primes,DOT,containsKey,LPAREN,number,RPAREN,RPAREN,LBRACE,list,DOT,add,LPAREN,number,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,FOR,LPAREN,int,item,COLON,list,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,item,RPAREN,SEMI,RBRACE,RBRACE","    public static void main(String[] args) {
,        final int max = 1000000;
,        final HashMap<Integer, Integer> primes = new HashMap<Integer, Integer>();
,        final SieveOfAtkin sieve = new SieveOfAtkin(max);
,        final ArrayList<Integer> list = sieve.run();
,        for (int prime : list) {
,            primes.put(prime, primes.size());
,        }
,
,        list.clear();
,        final int[] digits = Functions.getDigits(56113);
,        final DigitSwapper swapper = new DigitSwapper(2, digits);
,        System.out.println(Arrays.toString(digits));
,        int[] swapped = null;
,        while ((swapped = swapper.next()) <MASK> null) {
,            if (swapped[0] == 5 && swapped[1] == 6 && swapped[4] == 3) {
,//                System.out.println(Arrays.toString(swapped));
,                final int number = Functions.getInt(swapped);
,                if (primes.containsKey(number)) {
,                    list.add(number);
,//                    System.out.println(""# prime "" + number);
,                }
,//            System.out.println(Arrays.toString(swapped));
,            }
,        }
,
,        for (int item : list) {
,            System.out.println(item);
,        }
,    }
"
b792a0be-4219-4d3e-95ef-36bcf8d3d523,3a2fe800-48db-4b36-95ce-3d1f6111c0e7,GTEQ,"MONKEYS_AT,Override,PUBLIC,void,buy,LPAREN,Command,cmd,RPAREN,LBRACE,cmd,DOT,execute,LPAREN,RPAREN,SEMI,IF,LPAREN,Storage,DOT,getInstance,LPAREN,RPAREN,DOT,getRevenue,LPAREN,RPAREN,LT,10000.0,RPAREN,LBRACE,restaurant,DOT,setState,LPAREN,restaurant,DOT,getBadstate,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,Storage,DOT,getInstance,LPAREN,RPAREN,DOT,getRevenue,LPAREN,RPAREN,<MASK>,10000.0,AMPAMP,Storage,DOT,getInstance,LPAREN,RPAREN,DOT,getRevenue,LPAREN,RPAREN,LT,20000.0,RPAREN,LBRACE,restaurant,DOT,setState,LPAREN,restaurant,DOT,getNormalstate,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,ELSE,LBRACE,restaurant,DOT,setState,LPAREN,restaurant,DOT,getGoodstate,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,RBRACE","	@Override
,	public void buy(Command cmd)
,	{
,		cmd.execute();
,		if(Storage.getInstance().getRevenue() < 10000.0)
,		{
,			restaurant.setState(restaurant.getBadstate());
,		}else if(Storage.getInstance().getRevenue() <MASK> 10000.0 && Storage.getInstance().getRevenue() < 20000.0)
,		{
,			restaurant.setState(restaurant.getNormalstate());
,		}
,		else
,		{
,			restaurant.setState(restaurant.getGoodstate());
,		}
,	}
"
46d8f694-b1f9-40ac-a94e-e9d7b8a315c4,63a8e695-a6d6-490f-9ca1-d4486c02a2a8,LTEQ,"PUBLIC,STATIC,void,main,LPAREN,String,LBRACKET,RBRACKET,args,RPAREN,LBRACE,LoggingThreadWaitNotify,lt,EQ,NEW,LoggingThreadWaitNotify,LPAREN,RPAREN,SEMI,lt,DOT,start,LPAREN,RPAREN,SEMI,int,count,EQ,0,SEMI,WHILE,LPAREN,count,<MASK>,3,RPAREN,LBRACE,lt,DOT,log,LPAREN,""Msg "",PLUS,count,RPAREN,SEMI,TRY,LBRACE,Thread,DOT,sleep,LPAREN,2000,RPAREN,SEMI,RBRACE,CATCH,LPAREN,InterruptedException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,count,PLUSPLUS,SEMI,RBRACE,RBRACE","	public static void main(String[] args) {
,		LoggingThreadWaitNotify lt = new LoggingThreadWaitNotify();
,		lt.start();
,		int count = 0;
,		
,		while(count <MASK> 3){
,			lt.log(""Msg ""+count);
,			try {
,				Thread.sleep(2000);
,			} catch (InterruptedException e) {
,				// TODO Auto-generated catch block
,				e.printStackTrace();
,			}
,			count++;
,		}
,		
,		
,	}
"
789d219f-7383-4fa6-b72d-81f8985229f6,1d324faa-e16f-495c-84c8-53dd85bf025d,EQEQ,"PUBLIC,void,recordWinner,LPAREN,RPAREN,LBRACE,IF,LPAREN,this,DOT,currentPlayer,<MASK>,this,DOT,player1,RPAREN,LBRACE,this,DOT,winner,EQ,this,DOT,player1,SEMI,this,DOT,loser,EQ,this,DOT,player2,SEMI,RBRACE,ELSE,LBRACE,this,DOT,winner,EQ,this,DOT,player2,SEMI,this,DOT,loser,EQ,this,DOT,player1,SEMI,RBRACE,long,noWins,EQ,this,DOT,winner,DOT,getWins,LPAREN,RPAREN,SEMI,noWins,PLUSPLUS,SEMI,this,DOT,winner,DOT,setWins,LPAREN,noWins,RPAREN,SEMI,long,noLosses,EQ,this,DOT,loser,DOT,getLosses,LPAREN,RPAREN,SEMI,noLosses,PLUSPLUS,SEMI,this,DOT,loser,DOT,setLosses,LPAREN,noLosses,RPAREN,SEMI,this,DOT,setStatus,LPAREN,Game,DOT,WINNER,RPAREN,SEMI,RBRACE","    public void recordWinner() {
,        if (this.currentPlayer <MASK> this.player1) {
,            this.winner = this.player1;
,            this.loser = this.player2;
,        }
,        else {
,            this.winner = this.player2;
,            this.loser = this.player1;
,        }
,        long noWins = this.winner.getWins();
,        noWins++;
,        this.winner.setWins(noWins);
,        long noLosses = this.loser.getLosses();
,        noLosses++;
,        this.loser.setLosses(noLosses);
,        
,        this.setStatus(Game.WINNER);
,    }
"
ab6b11e7-9e21-4611-901d-21ca99a5907d,e5ca3bc2-2fc4-4d58-bcaf-05efd4889c83,SLASH,"PROTECTED,FINAL,boolean,isNorthPoleCollision,LPAREN,RPAREN,LBRACE,RETURN,LPAREN,decUser,PLUS,sizeArray,LBRACKET,1,RBRACKET,<MASK>,2.0,GTEQ,SimpleSpectralAccessProtocolLibrary,DOT,MAX_VALUE_FOR_DECLINATION,RPAREN,QUES,true,COLON,false,SEMI,RBRACE","  protected final boolean isNorthPoleCollision() {
,    return (decUser + sizeArray[1] <MASK> 2.0 >= SimpleSpectralAccessProtocolLibrary.MAX_VALUE_FOR_DECLINATION) ? true : false;
,  }
"
56952896-479b-43e9-a9cf-c3f3bb9afc0e,24f90ed7-ca6e-4d3f-963f-ad0aa27266e4,SUB,"PUBLIC,OrderItemDAO,LPAREN,RPAREN,THROWS,NamingException,COMMA,SQLException,LBRACE,lastOrderItemAutoKey,EQ,<MASK>,1,SEMI,Context,cxt,EQ,NEW,InitialContext,LPAREN,RPAREN,SEMI,DataSource,ds,EQ,LPAREN,DataSource,RPAREN,cxt,DOT,lookup,LPAREN,""java:/comp/env/jdbc/CartDB"",RPAREN,SEMI,con,EQ,ds,DOT,getConnection,LPAREN,RPAREN,SEMI,RBRACE","    public OrderItemDAO() throws NamingException, SQLException {
,
,        // initialize lastAutoKeys here
,        lastOrderItemAutoKey = <MASK>1;
,
,        Context cxt = new InitialContext();
,        DataSource ds = (DataSource) cxt.lookup(""java:/comp/env/jdbc/CartDB"");
,
,        con = ds.getConnection();
,    }
"
2d8ea22f-74cb-4224-a3bf-081c952c9729,5c75ea30-863b-400e-af9a-205acb7a8a3e,STAR,"void,createImage,LPAREN,RPAREN,LBRACE,String,message,SEMI,SplashScreen,splashscreen,EQ,SplashScreen,DOT,getSplashScreen,LPAREN,RPAREN,SEMI,IF,LPAREN,splashscreen,BANGEQ,null,RPAREN,LBRACE,Graphics2D,g,EQ,LPAREN,Graphics2D,RPAREN,splashscreen,DOT,createGraphics,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,20,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,i,PERCENT,3,EQEQ,0,RPAREN,LBRACE,message,EQ,""Loading."",SEMI,RBRACE,ELSE,IF,LPAREN,i,PERCENT,3,EQEQ,1,RPAREN,LBRACE,message,EQ,""Loading.."",SEMI,RBRACE,ELSE,LBRACE,message,EQ,""Loading..."",SEMI,RBRACE,g,DOT,setComposite,LPAREN,AlphaComposite,DOT,Clear,RPAREN,SEMI,g,DOT,fillRect,LPAREN,20,COMMA,545,COMMA,80,COMMA,10,RPAREN,SEMI,g,DOT,setPaintMode,LPAREN,RPAREN,SEMI,g,DOT,setColor,LPAREN,NEW,Color,LPAREN,0,COMMA,0,COMMA,0,RPAREN,RPAREN,SEMI,g,DOT,drawString,LPAREN,message,COMMA,100,COMMA,360,RPAREN,SEMI,g,DOT,setColor,LPAREN,NEW,Color,LPAREN,0,COMMA,0,COMMA,0,RPAREN,RPAREN,SEMI,g,DOT,fillRect,LPAREN,95,COMMA,365,COMMA,i,<MASK>,18,COMMA,13,RPAREN,SEMI,splashscreen,DOT,update,LPAREN,RPAREN,SEMI,TRY,LBRACE,IF,LPAREN,i,EQEQ,19,RPAREN,LBRACE,Thread,DOT,sleep,LPAREN,500,RPAREN,SEMI,RBRACE,ELSE,LBRACE,Thread,DOT,sleep,LPAREN,200,RPAREN,SEMI,RBRACE,RBRACE,CATCH,LPAREN,InterruptedException,e,RPAREN,LBRACE,RBRACE,RBRACE,RBRACE,JFrame,f,EQ,NEW,Home,LPAREN,RPAREN,SEMI,f,DOT,setBounds,LPAREN,140,COMMA,140,COMMA,800,COMMA,500,RPAREN,SEMI,f,DOT,setVisible,LPAREN,true,RPAREN,SEMI,f,DOT,addWindowListener,LPAREN,NEW,WindowAdapter,LPAREN,RPAREN,LBRACE,PUBLIC,void,windowClosing,LPAREN,WindowEvent,e,RPAREN,LBRACE,System,DOT,exit,LPAREN,0,RPAREN,SEMI,RBRACE,RBRACE,RPAREN,SEMI,RBRACE","    void createImage() {
,        String message;
,        SplashScreen splashscreen = SplashScreen.getSplashScreen();
,        if (splashscreen != null) {
,            Graphics2D g = (Graphics2D) splashscreen.createGraphics();
,            for (int i = 0; i < 20; i++) {
,                if (i % 3 == 0) {
,                    message = ""Loading."";
,
,                } else if (i % 3 == 1) {
,                    message = ""Loading.."";
,
,                } else {
,                    message = ""Loading..."";
,                }
,                g.setComposite(AlphaComposite.Clear);
,                g.fillRect(20, 545, 80, 10);
,                g.setPaintMode();
,                g.setColor(new Color(0, 0, 0));
,                g.drawString(message, 100, 360);
,                 g.setColor(new Color(0, 0, 0));
,                g.fillRect(95, 365, i <MASK> 18, 13);
,
,                splashscreen.update();
,                try {
,                    if (i == 19) {
,
,                        Thread.sleep(500);
,                    } else {
,                        Thread.sleep(200);
,                    }
,                } catch (InterruptedException e) {
,                }
,
,            }
,
,        }
,        JFrame f = new Home();
,        
,        f.setBounds(140, 140, 800, 500);
,        f.setVisible(true);
,        f.addWindowListener(new WindowAdapter() {
,
,            public void windowClosing(WindowEvent e) {
,                System.exit(0);
,            }
,        });
,
,    }
"
73f99f48-ab14-4590-9781-8e43c05bc3ab,c45f21de-cd0e-4340-94ec-570d5655d679,GT,"PUBLIC,boolean,accept,LPAREN,HackResult,hr,RPAREN,LBRACE,RETURN,hr,DOT,timestamp,<MASK>,date,SEMI,RBRACE","        public boolean accept(HackResult hr) { return hr.timestamp <MASK> date; }
"
56952896-479b-43e9-a9cf-c3f3bb9afc0e,e42cd244-e5a6-4864-a4f9-38437675efc5,SUB,"MONKEYS_AT,Test,PUBLIC,void,test_removeProductByProductID,LPAREN,RPAREN,THROWS,Exception,LBRACE,Product,newProd,EQ,NEW,Product,LPAREN,<MASK>,1,COMMA,""tacos"",COMMA,""tacos desc"",COMMA,""mexican food"",COMMA,15.99,COMMA,5,COMMA,10,COMMA,5,COMMA,false,COMMA,""imgpath"",RPAREN,SEMI,int,prodId,EQ,pDAO,DOT,createProduct,LPAREN,newProd,RPAREN,SEMI,Product,testProd,EQ,pDAO,DOT,getProductByProductID,LPAREN,prodId,RPAREN,SEMI,assertTrue,LPAREN,""name did not match"",COMMA,testProd,DOT,getProductName,LPAREN,RPAREN,DOT,equalsIgnoreCase,LPAREN,""tacos"",RPAREN,RPAREN,SEMI,assertTrue,LPAREN,""description did not match"",COMMA,testProd,DOT,getDescription,LPAREN,RPAREN,DOT,equalsIgnoreCase,LPAREN,""tacos desc"",RPAREN,RPAREN,SEMI,assertTrue,LPAREN,""categoryName did not match"",COMMA,testProd,DOT,getCategoryName,LPAREN,RPAREN,DOT,equalsIgnoreCase,LPAREN,""mexican food"",RPAREN,RPAREN,SEMI,assertTrue,LPAREN,""price did not match"",COMMA,testProd,DOT,getUnitPrice,LPAREN,RPAREN,EQEQ,15.99,RPAREN,SEMI,assertTrue,LPAREN,""amt_in_stock did not match"",COMMA,testProd,DOT,getUnitsInStock,LPAREN,RPAREN,EQEQ,5,RPAREN,SEMI,assertTrue,LPAREN,""amt_on_order did not match"",COMMA,testProd,DOT,getUnitsOnOrder,LPAREN,RPAREN,EQEQ,10,RPAREN,SEMI,assertTrue,LPAREN,""threshold did not match"",COMMA,testProd,DOT,getReorderLevel,LPAREN,RPAREN,EQEQ,5,RPAREN,SEMI,assertFalse,LPAREN,""discontinued flag did not match"",COMMA,testProd,DOT,isDiscontinued,LPAREN,RPAREN,RPAREN,SEMI,assertTrue,LPAREN,testProd,DOT,getImagePath,LPAREN,RPAREN,DOT,equalsIgnoreCase,LPAREN,""imgpath"",RPAREN,RPAREN,SEMI,pDAO,DOT,removeProductByProductID,LPAREN,prodId,RPAREN,SEMI,testProd,EQ,pDAO,DOT,getProductByProductID,LPAREN,prodId,RPAREN,SEMI,assertNull,LPAREN,""expected no record to be returned (null)"",COMMA,testProd,RPAREN,SEMI,RBRACE","    @Test
,    public void test_removeProductByProductID() throws Exception {
,        Product newProd = new Product(<MASK>1, ""tacos"", ""tacos desc"",
,                ""mexican food"", 15.99, 5, 10, 5, false, ""imgpath"");
,
,        int prodId = pDAO.createProduct(newProd);
,        Product testProd = pDAO.getProductByProductID(prodId);
,
,        // should exist here
,        assertTrue(""name did not match"", testProd.getProductName()
,                .equalsIgnoreCase(""tacos""));
,        assertTrue(""description did not match"", testProd.getDescription()
,                .equalsIgnoreCase(""tacos desc""));
,        assertTrue(""categoryName did not match"", testProd.getCategoryName()
,                .equalsIgnoreCase(""mexican food""));
,        assertTrue(""price did not match"", testProd.getUnitPrice() == 15.99);
,        assertTrue(""amt_in_stock did not match"",
,                testProd.getUnitsInStock() == 5);
,        assertTrue(""amt_on_order did not match"",
,                testProd.getUnitsOnOrder() == 10);
,        assertTrue(""threshold did not match"", testProd.getReorderLevel() == 5);
,        assertFalse(""discontinued flag did not match"",
,                testProd.isDiscontinued());
,        assertTrue(testProd.getImagePath().equalsIgnoreCase(""imgpath""));
,
,        pDAO.removeProductByProductID(prodId);
,        // but not here
,        testProd = pDAO.getProductByProductID(prodId);
,        assertNull(""expected no record to be returned (null)"", testProd);
,    }
"
ad0a2aad-9ad8-443c-832f-88b9f64460ed,304eada2-ef3c-4ca0-80dd-ae2c02d75d60,EQ,"PROTECTED,void,initialize,LPAREN,RPAREN,LBRACE,feeder,DOT,isIn,<MASK>,true,SEMI,feederSolenoid,DOT,toggle,LPAREN,RPAREN,SEMI,setTimeout,LPAREN,0.5,RPAREN,SEMI,RBRACE","    protected void initialize() {
,        feeder.isIn <MASK> true;
,        feederSolenoid.toggle();
,        setTimeout(0.5);
,    }
"
5ee16f26-d690-4884-9baa-b57e0c8c43d6,5faad0c5-95b2-4d8a-81af-4781f84f51c7,STAR,"PUBLIC,FrechetDialog,LPAREN,FINAL,Content,content,RPAREN,LBRACE,List,LT,Editable,GT,lines,EQ,content,DOT,getLines,LPAREN,RPAREN,SEMI,IF,LPAREN,lines,DOT,size,LPAREN,RPAREN,LT,2,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""not enough lines"",RPAREN,SEMI,RETURN,SEMI,RBRACE,System,DOT,out,DOT,println,LPAREN,""showing frechet diagram"",RPAREN,SEMI,line1,EQ,lines,DOT,get,LPAREN,0,RPAREN,SEMI,line2,EQ,lines,DOT,get,LPAREN,1,RPAREN,SEMI,int,maxEpsilon,EQ,200,SEMI,FINAL,JSlider,slider,EQ,NEW,JSlider,LPAREN,0,COMMA,maxEpsilon,RPAREN,SEMI,slider,DOT,setPaintLabels,LPAREN,true,RPAREN,SEMI,slider,DOT,setPaintTicks,LPAREN,true,RPAREN,SEMI,slider,DOT,setMajorTickSpacing,LPAREN,10,RPAREN,SEMI,slider,DOT,setValue,LPAREN,epsilon,RPAREN,SEMI,slider,DOT,setBorder,LPAREN,NEW,TitledBorder,LPAREN,""epsilon"",RPAREN,RPAREN,SEMI,diagram,EQ,NEW,FrechetDiagram,LPAREN,epsilon,COMMA,line1,COMMA,line2,RPAREN,SEMI,diagram,DOT,setBorder,LPAREN,NEW,TitledBorder,LPAREN,""Free space"",RPAREN,RPAREN,SEMI,GridBagConstraints,c,EQ,NEW,GridBagConstraints,LPAREN,RPAREN,SEMI,c,DOT,fill,EQ,GridBagConstraints,DOT,BOTH,SEMI,c,DOT,weightx,EQ,c,DOT,weighty,EQ,1.0,SEMI,JPanel,panel,EQ,NEW,JPanel,LPAREN,NEW,GridBagLayout,LPAREN,RPAREN,RPAREN,SEMI,c,DOT,gridx,EQ,0,SEMI,c,DOT,gridy,EQ,0,SEMI,c,DOT,weighty,EQ,0.0,SEMI,panel,DOT,add,LPAREN,slider,COMMA,c,RPAREN,SEMI,c,DOT,gridy,EQ,1,SEMI,c,DOT,weighty,EQ,1.0,SEMI,panel,DOT,add,LPAREN,diagram,COMMA,c,RPAREN,SEMI,FINAL,JDialog,dialog,EQ,NEW,JDialog,LPAREN,LPAREN,JFrame,RPAREN,null,COMMA,""Fr\u00E9chet distance"",RPAREN,SEMI,dialog,DOT,setContentPane,LPAREN,panel,RPAREN,SEMI,dialog,DOT,setSize,LPAREN,500,COMMA,600,RPAREN,SEMI,dialog,DOT,setVisible,LPAREN,true,RPAREN,SEMI,slider,DOT,addChangeListener,LPAREN,NEW,EpsilonChangedListener,LPAREN,diagram,RPAREN,RPAREN,SEMI,content,DOT,addContentChangedListener,LPAREN,this,RPAREN,SEMI,dialog,DOT,addWindowListener,LPAREN,NEW,WindowAdapter,LPAREN,RPAREN,LBRACE,PUBLIC,void,windowClosing,LPAREN,WindowEvent,e,RPAREN,LBRACE,content,DOT,removeContentChangedListener,LPAREN,FrechetDialog,DOT,this,RPAREN,SEMI,RBRACE,RBRACE,RPAREN,SEMI,Toolkit,DOT,getDefaultToolkit,LPAREN,RPAREN,DOT,addAWTEventListener,LPAREN,NEW,AWTEventListener,LPAREN,RPAREN,LBRACE,MONKEYS_AT,Override,PUBLIC,void,eventDispatched,LPAREN,AWTEvent,e,RPAREN,LBRACE,IF,LPAREN,e,DOT,getSource,LPAREN,RPAREN,BANGEQ,dialog,RPAREN,LBRACE,RETURN,SEMI,RBRACE,SEMI,MouseWheelEvent,event,EQ,LPAREN,MouseWheelEvent,RPAREN,e,SEMI,int,modifiers,EQ,event,DOT,getModifiers,LPAREN,RPAREN,SEMI,boolean,big,EQ,LPAREN,modifiers,AMP,InputEvent,DOT,CTRL_MASK,RPAREN,BANGEQ,0,SEMI,int,rotation,EQ,event,DOT,getWheelRotation,LPAREN,RPAREN,SEMI,int,value,EQ,slider,DOT,getValue,LPAREN,RPAREN,SEMI,int,newValue,EQ,value,PLUS,rotation,<MASK>,LPAREN,big,QUES,STEP_SIZE_BIG,COLON,STEP_SIZE,RPAREN,SEMI,slider,DOT,setValue,LPAREN,newValue,RPAREN,SEMI,RBRACE,RBRACE,COMMA,AWTEvent,DOT,MOUSE_WHEEL_EVENT_MASK,RPAREN,SEMI,RBRACE","	public FrechetDialog(final Content content) {
,		List<Editable> lines = content.getLines();
,		if (lines.size() < 2) {
,			System.out.println(""not enough lines"");
,			return;
,		}
,		System.out.println(""showing frechet diagram"");
,
,		line1 = lines.get(0);
,		line2 = lines.get(1);
,
,		int maxEpsilon = 200;
,		final JSlider slider = new JSlider(0, maxEpsilon);
,		slider.setPaintLabels(true);
,		slider.setPaintTicks(true);
,		slider.setMajorTickSpacing(10);
,		slider.setValue(epsilon);
,		slider.setBorder(new TitledBorder(""epsilon""));
,
,		diagram = new FrechetDiagram(epsilon, line1, line2);
,		diagram.setBorder(new TitledBorder(""Free space""));
,
,		GridBagConstraints c = new GridBagConstraints();
,		c.fill = GridBagConstraints.BOTH;
,		c.weightx = c.weighty = 1.0;
,		JPanel panel = new JPanel(new GridBagLayout());
,		c.gridx = 0;
,		c.gridy = 0;
,		c.weighty = 0.0;
,		panel.add(slider, c);
,		c.gridy = 1;
,		c.weighty = 1.0;
,		panel.add(diagram, c);
,
,		final JDialog dialog = new JDialog((JFrame) null, ""Fréchet distance"");
,		dialog.setContentPane(panel);
,		dialog.setSize(500, 600);
,		dialog.setVisible(true);
,
,		slider.addChangeListener(new EpsilonChangedListener(diagram));
,
,		content.addContentChangedListener(this);
,
,		dialog.addWindowListener(new WindowAdapter() {
,			public void windowClosing(WindowEvent e) {
,				content.removeContentChangedListener(FrechetDialog.this);
,			}
,		});
,
,		Toolkit.getDefaultToolkit().addAWTEventListener(new AWTEventListener() {
,
,			@Override
,			public void eventDispatched(AWTEvent e) {
,				if (e.getSource() != dialog) {
,					return;
,				}
,				;
,				MouseWheelEvent event = (MouseWheelEvent) e;
,
,				int modifiers = event.getModifiers();
,				boolean big = (modifiers & InputEvent.CTRL_MASK) != 0;
,
,				int rotation = event.getWheelRotation();
,				int value = slider.getValue();
,				int newValue = value + rotation
,						<MASK> (big ? STEP_SIZE_BIG : STEP_SIZE);
,				slider.setValue(newValue);
,			}
,		}, AWTEvent.MOUSE_WHEEL_EVENT_MASK);
,	}
"
3913c395-db09-4ac4-8282-49a81b6a21f4,da8cb9eb-9a9c-4b78-aedc-a3f184a9f0a1,BANGEQ,"PRIVATE,void,selectUnits,LPAREN,Rectangle2D,sel,RPAREN,LBRACE,clearUnitSelection,LPAREN,RPAREN,SEMI,Unit,u,SEMI,FOR,LPAREN,GameEntity,e,COLON,gm,DOT,getGameEntities,LPAREN,RPAREN,RPAREN,LBRACE,IF,LPAREN,BANG,LPAREN,e,INSTANCEOF,Unit,RPAREN,RPAREN,LBRACE,CONTINUE,SEMI,RBRACE,u,EQ,LPAREN,Unit,RPAREN,e,SEMI,IF,LPAREN,sel,DOT,contains,LPAREN,u,DOT,getX,LPAREN,RPAREN,COMMA,u,DOT,getY,LPAREN,RPAREN,RPAREN,RPAREN,LBRACE,entitiesSel,DOT,add,LPAREN,u,RPAREN,SEMI,u,DOT,setSelected,LPAREN,true,RPAREN,SEMI,RBRACE,RBRACE,IF,LPAREN,mouseOver,<MASK>,null,RPAREN,LBRACE,mouseOver,DOT,setSelected,LPAREN,true,RPAREN,SEMI,entitiesSel,DOT,add,LPAREN,mouseOver,RPAREN,SEMI,RBRACE,RBRACE","	private void selectUnits(Rectangle2D sel) {
,		clearUnitSelection();
,		Unit u;
,		for (GameEntity e : gm.getGameEntities()) {
,			if (!(e instanceof Unit)) {
,				continue;
,			}
,			u = (Unit)e;
,			if (sel.contains(u.getX(), u.getY())) {
,				entitiesSel.add(u);
,				u.setSelected(true);
,			}
,		}
,		if (mouseOver <MASK> null) {
,			mouseOver.setSelected(true);
,			entitiesSel.add(mouseOver);
,		}
,	}
"
7bd76208-9b34-4151-9ec4-57c6c52e0fcf,5caba069-de18-452c-a4f6-28ba087c618a,GTEQ,"void,checkstack,LPAREN,int,n,RPAREN,LBRACE,int,newstack,EQ,this,DOT,freereg,PLUS,n,SEMI,IF,LPAREN,newstack,GT,this,DOT,f,DOT,maxStacksize,RPAREN,LBRACE,IF,LPAREN,newstack,<MASK>,MAXSTACK,RPAREN,ls,DOT,syntaxerror,LPAREN,""function or expression too complex"",RPAREN,SEMI,this,DOT,f,DOT,maxStacksize,EQ,newstack,SEMI,RBRACE,RBRACE","	void checkstack(int n) {
,		int newstack = this.freereg + n;
,		if (newstack > this.f.maxStacksize) {
,			if (newstack <MASK> MAXSTACK)
,				ls.syntaxerror(""function or expression too complex"");
,			this.f.maxStacksize = newstack;
,		}
,	}
"
d71e9d90-d7d7-40b1-b4fa-c5316adcd69a,7495b134-0f70-414b-a59a-74d2d1cc6c5c,LTEQ,"MONKEYS_AT,Override,FINAL,PUBLIC,void,computeGradient,LPAREN,RPAREN,LBRACE,FINAL,int,last,EQ,this,DOT,frameidx,SEMI,FOR,LPAREN,int,l,EQ,this,DOT,structure,DOT,layers,DOT,length,SUB,1,SEMI,l,GTEQ,0,SEMI,l,SUBSUB,RPAREN,LBRACE,IF,LPAREN,l,EQEQ,this,DOT,structure,DOT,inputlayer,RPAREN,CONTINUE,SEMI,FINAL,Layer,layer,EQ,this,DOT,structure,DOT,layers,LBRACKET,l,RBRACKET,SEMI,IF,LPAREN,layer,DOT,tag,EQEQ,LayerTag,DOT,REGULAR,RPAREN,LBRACE,this,DOT,setFrameIdx,LPAREN,last,RPAREN,SEMI,FOR,LPAREN,int,t,EQ,last,SEMI,t,GTEQ,0,SEMI,t,SUBSUB,RPAREN,LBRACE,IF,LPAREN,t,LT,last,RPAREN,LBRACE,this,DOT,copyGradOutput,LPAREN,this,DOT,frameidx,PLUS,1,COMMA,this,DOT,frameidx,COMMA,l,RPAREN,SEMI,RBRACE,this,DOT,computeLayerGradients,LPAREN,l,RPAREN,SEMI,this,DOT,decrFrameIdx,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,ELSE,LBRACE,this,DOT,setFrameIdx,LPAREN,0,RPAREN,SEMI,FOR,LPAREN,int,t,EQ,0,SEMI,t,<MASK>,last,SEMI,t,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,t,GT,0,RPAREN,LBRACE,this,DOT,copyGradOutput,LPAREN,this,DOT,frameidx,SUB,1,COMMA,this,DOT,frameidx,COMMA,l,RPAREN,SEMI,RBRACE,this,DOT,computeLayerGradients,LPAREN,l,RPAREN,SEMI,this,DOT,incrFrameIdx,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,this,DOT,setFrameIdx,LPAREN,last,RPAREN,SEMI,RBRACE","    @Override
,    final public void computeGradient() {
,        //
,        final int last = this.frameidx;
,        //
,        // from last to first layer.
,        //
,        for (int l = this.structure.layers.length - 1; l >= 0; l--) {
,            //
,            if (l == this.structure.inputlayer) continue;
,            final Layer layer = this.structure.layers[l];
,            //
,            // regular or reversed layer? 
,            //
,            if (layer.tag == LayerTag.REGULAR) {
,                this.setFrameIdx(last);
,                for (int t = last; t >= 0; t--) {
,                    //
,                    if (t < last) {
,                        this.copyGradOutput(
,                            this.frameidx + 1, this.frameidx, l
,                        );
,                    }
,                    this.computeLayerGradients(l);
,                    //
,                    this.decrFrameIdx();
,                }
,            } else {
,                this.setFrameIdx(0);
,                for (int t = 0; t <MASK> last; t++) {
,                    //
,                    if (t > 0) {
,                        this.copyGradOutput(
,                            this.frameidx - 1, this.frameidx, l
,                        );
,                    }
,                    this.computeLayerGradients(l);
,                    //
,                    this.incrFrameIdx();
,                    
,                }
,
,            }
,        }
,        //
,        this.setFrameIdx(last);
,    }
"
7bd76208-9b34-4151-9ec4-57c6c52e0fcf,eadde3ac-b222-4b60-977a-7ef72efdb62c,GTEQ,"void,inclinenumber,LPAREN,RPAREN,LBRACE,int,old,EQ,current,SEMI,FuncState,DOT,_assert,LPAREN,currIsNewline,LPAREN,RPAREN,RPAREN,SEMI,nextChar,LPAREN,RPAREN,SEMI,IF,LPAREN,currIsNewline,LPAREN,RPAREN,AMPAMP,current,BANGEQ,old,RPAREN,nextChar,LPAREN,RPAREN,SEMI,IF,LPAREN,PLUSPLUS,linenumber,<MASK>,MAX_INT,RPAREN,syntaxerror,LPAREN,""chunk has too many lines"",RPAREN,SEMI,RBRACE","	void inclinenumber() {
,		int old = current;
,		FuncState._assert( currIsNewline() );
,		nextChar(); /* skip '\n' or '\r' */
,		if ( currIsNewline() && current != old )
,			nextChar(); /* skip '\n\r' or '\r\n' */
,		if ( ++linenumber <MASK> MAX_INT )
,			syntaxerror(""chunk has too many lines"");
,	}
"
96ad2b1f-2213-467d-9114-99ed9ca40d4d,f5c0eeb3-ca4f-477c-914d-2f1922031bf4,PERCENT,"PRIVATE,FileBlock,LBRACKET,RBRACKET,getFileAllocation,LPAREN,String,DFSFileName,COMMA,int,no_of_blocks,RPAREN,LBRACE,Logger,DOT,log,LPAREN,""no of blocks:"",PLUS,no_of_blocks,RPAREN,SEMI,Collections,DOT,sort,LPAREN,dataNodeList,RPAREN,SEMI,Logger,DOT,log,LPAREN,""Nodes after sorting: "",RPAREN,SEMI,FOR,LPAREN,DataNodeInfo,s,COLON,dataNodeList,RPAREN,Logger,DOT,log,LPAREN,s,DOT,getId,LPAREN,RPAREN,PLUS,"" | Stores: "",PLUS,s,DOT,getsizeOfStoredFiles,LPAREN,RPAREN,PLUS,"" | FREE: "",PLUS,s,DOT,getFreeSpace,LPAREN,RPAREN,RPAREN,SEMI,FileBlock,LBRACKET,RBRACKET,allocation,EQ,NEW,FileBlock,LBRACKET,no_of_blocks,RBRACKET,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,no_of_blocks,SEMI,i,PLUSPLUS,RPAREN,LBRACE,allocation,LBRACKET,i,RBRACKET,EQ,NEW,FileBlock,LPAREN,""FILE"",PLUS,LPAREN,currentBlockNumber,PLUSPLUS,RPAREN,RPAREN,SEMI,RBRACE,TRY,LBRACE,Iterator,LT,DataNodeInfo,GT,iter,EQ,dataNodeList,DOT,iterator,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,Constants,DOT,REPLICATION_FACTOR,STAR,no_of_blocks,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,BANG,iter,DOT,hasNext,LPAREN,RPAREN,RPAREN,iter,EQ,dataNodeList,DOT,iterator,LPAREN,RPAREN,SEMI,allocation,LBRACKET,LPAREN,i,SLASH,Constants,DOT,REPLICATION_FACTOR,RPAREN,<MASK>,no_of_blocks,RBRACKET,DOT,addNodeLocation,LPAREN,iter,DOT,next,LPAREN,RPAREN,DOT,getId,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,CATCH,LPAREN,Exception,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,no_of_blocks,SEMI,i,PLUSPLUS,RPAREN,LBRACE,Logger,DOT,log,LPAREN,i,PLUS,"": "",PLUS,allocation,LBRACKET,i,RBRACKET,DOT,getNodeLocations,LPAREN,RPAREN,LBRACKET,0,RBRACKET,PLUS,allocation,LBRACKET,i,RBRACKET,DOT,getNodeLocations,LPAREN,RPAREN,LBRACKET,1,RBRACKET,PLUS,allocation,LBRACKET,i,RBRACKET,DOT,getNodeLocations,LPAREN,RPAREN,LBRACKET,2,RBRACKET,RPAREN,SEMI,RBRACE,RETURN,allocation,SEMI,RBRACE","	private FileBlock[] getFileAllocation(String DFSFileName, int no_of_blocks){
,		Logger.log(""no of blocks:"" + no_of_blocks);
,
,		Collections.sort(dataNodeList);
,		Logger.log(""Nodes after sorting: "");
,		for(DataNodeInfo s: dataNodeList)
,			Logger.log(s.getId()+ "" | Stores: "" + s.getsizeOfStoredFiles() +"" | FREE: ""+ s.getFreeSpace());
,
,		FileBlock[] allocation = new FileBlock[no_of_blocks];
,
,		//TODO synchronization failure
,		for(int i=0;i<no_of_blocks;i++){
,			allocation[i] = new FileBlock( ""FILE"" + (currentBlockNumber++));
,		}
,
,		try{
,			Iterator<DataNodeInfo> iter = dataNodeList.iterator();
,			//TODO Use a more sophisticated load balancing strategy later
,			for(int i=0;i<Constants.REPLICATION_FACTOR*no_of_blocks;i++){
,				if(!iter.hasNext())
,					iter = dataNodeList.iterator();
,
,				allocation[(i/Constants.REPLICATION_FACTOR)<MASK>no_of_blocks].addNodeLocation(iter.next().getId());
,			}
,			//allocation[0] = new FileBlock(DFSFileName+""_""+NameNode.currentBlockNumber++, allocatedBlocks);
,		}
,		catch(Exception e){
,			e.printStackTrace();
,			//TODO delete
,		}
,
,		for(int i=0;i<no_of_blocks;i++){
,			Logger.log(i+"": ""+ allocation[i].getNodeLocations()[0] + allocation[i].getNodeLocations()[1] + allocation[i].getNodeLocations()[2]);
,
,
,		}
,		return allocation;
,	}
"
4efd15d4-7259-49ef-bb2b-8984a1154bd6,8db69943-63cd-4a5a-b1bd-f84fd2d157a4,BANGEQ,"PUBLIC,WordCloudText,LPAREN,ArrayList,LT,Tfidf,GT,tweets,COMMA,String,LBRACKET,RBRACKET,Keyword,RPAREN,LBRACE,text,EQ,null,SEMI,words,EQ,null,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,tweets,DOT,size,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""twwwwwww   "",PLUS,tweets,DOT,get,LPAREN,i,RPAREN,DOT,getTweet,LPAREN,RPAREN,RPAREN,SEMI,IF,LPAREN,text,<MASK>,null,RPAREN,text,PLUSEQ,tweets,DOT,get,LPAREN,i,RPAREN,DOT,getTweet,LPAREN,RPAREN,PLUS,"" "",SEMI,ELSE,text,EQ,tweets,DOT,get,LPAREN,i,RPAREN,DOT,getTweet,LPAREN,RPAREN,PLUS,"" "",SEMI,System,DOT,out,DOT,println,LPAREN,text,RPAREN,SEMI,FOR,LPAREN,int,u,EQ,0,SEMI,u,LT,Keyword,DOT,length,SEMI,u,PLUSPLUS,RPAREN,text,EQ,text,DOT,replaceAll,LPAREN,Keyword,LBRACKET,u,RBRACKET,COMMA,"""",RPAREN,SEMI,RBRACE,words,EQ,text,DOT,split,LPAREN,""\\s+"",RPAREN,SEMI,RBRACE","  public WordCloudText(ArrayList<Tfidf> tweets, String[] Keyword)
,  { text = null;
,          words=null;
,    // gets user-entered text
,    //text = JOptionPane.showInputDialog(""Please enter text:"");
,    // removes all spaces in the string
,      
,       //words = new String[tweets.size()];
,     for(int i=0;i<tweets.size();i++){
,         
,         System.out.println(""twwwwwww   ""+ tweets.get(i).getTweet());
,                    // words[i] = tweets.get(i).getTweet();
,         
,                    
,             
,         
,                     if(text<MASK>null)
,                         
,                     text += tweets.get(i).getTweet() + "" "";
,                     else
,                         text = tweets.get(i).getTweet() + "" "";
,                    // ,tm.getScore()
,                   //  System.out.println(words[i]);
,                     System.out.println(text);
,                     
,                     
,                       for(int u = 0; u<Keyword.length;u++)
,                    text=text.replaceAll(Keyword[u], """");
,               }
,    
,    words = text.split(""\\s+"");
,  }
"
2bfa31fa-daf7-43ee-b7ee-b5502db2e4fe,290cb8ab-5c11-478f-9bcd-82d59b84ffd6,GTEQ,"PUBLIC,FINAL,AC,noGrid,LPAREN,int,ELLIPSIS,indexes,RPAREN,LBRACE,FOR,LPAREN,int,i,EQ,indexes,DOT,length,SUB,1,SEMI,i,<MASK>,0,SEMI,i,SUBSUB,RPAREN,LBRACE,int,ix,EQ,indexes,LBRACKET,i,RBRACKET,SEMI,makeSize,LPAREN,ix,RPAREN,SEMI,cList,DOT,get,LPAREN,ix,RPAREN,DOT,setNoGrid,LPAREN,true,RPAREN,SEMI,RBRACE,RETURN,this,SEMI,RBRACE","	public final AC noGrid(int... indexes)
,	{
,		for (int i = indexes.length - 1; i <MASK> 0; i--) {
,			int ix = indexes[i];
,			makeSize(ix);
,			cList.get(ix).setNoGrid(true);
,		}
,		return this;
,	}
"
b792a0be-4219-4d3e-95ef-36bcf8d3d523,6961cc1f-628d-4463-a7ed-3cae6594d129,GTEQ,"MONKEYS_AT,Override,PUBLIC,void,buy,LPAREN,Command,cmd,RPAREN,LBRACE,cmd,DOT,execute,LPAREN,RPAREN,SEMI,IF,LPAREN,Storage,DOT,getInstance,LPAREN,RPAREN,DOT,getRevenue,LPAREN,RPAREN,LT,10000.0,RPAREN,LBRACE,restaurant,DOT,setState,LPAREN,restaurant,DOT,getBadstate,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,Storage,DOT,getInstance,LPAREN,RPAREN,DOT,getRevenue,LPAREN,RPAREN,<MASK>,10000.0,AMPAMP,Storage,DOT,getInstance,LPAREN,RPAREN,DOT,getRevenue,LPAREN,RPAREN,LT,20000.0,RPAREN,LBRACE,restaurant,DOT,setState,LPAREN,restaurant,DOT,getNormalstate,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,ELSE,LBRACE,restaurant,DOT,setState,LPAREN,restaurant,DOT,getGoodstate,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,RBRACE","	@Override
,	public void buy(Command cmd)
,	{
,		cmd.execute();
,		if(Storage.getInstance().getRevenue() < 10000.0)
,		{
,			restaurant.setState(restaurant.getBadstate());
,		}else if(Storage.getInstance().getRevenue() <MASK> 10000.0 && Storage.getInstance().getRevenue() < 20000.0)
,		{
,			restaurant.setState(restaurant.getNormalstate());
,		}
,		else
,		{
,			restaurant.setState(restaurant.getGoodstate());
,		}
,	}
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,ccf6e0b6-d429-4241-bf32-7799873351e4,LT,"PUBLIC,void,setStatus,LPAREN,INDISwitchElementAndValue,LBRACKET,RBRACKET,ev,RPAREN,LBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,ev,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,ev,LBRACKET,i,RBRACKET,DOT,getElement,LPAREN,RPAREN,EQEQ,option,RPAREN,LBRACE,option,DOT,setValue,LPAREN,ev,LBRACKET,i,RBRACKET,DOT,getValue,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,RBRACE","  public void setStatus(INDISwitchElementAndValue[] ev) {
,    for (int i = 0 ; i <MASK> ev.length ; i++) {
,      if (ev[i].getElement() == option) {
,        option.setValue(ev[i].getValue());
,      }
,    }
,  }
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,563984b3-a53b-42b1-99c5-d2d82fe3cb5d,LT,"PUBLIC,boolean,restartLevel,LPAREN,RPAREN,LBRACE,GameState,state,EQ,StateUtil,DOT,getGameState,LPAREN,proxy,RPAREN,SEMI,IF,LPAREN,state,EQEQ,GameState,DOT,WON,BARBAR,state,EQEQ,GameState,DOT,LOST,RPAREN,LBRACE,proxy,DOT,send,LPAREN,NEW,ProxyClickMessage,LPAREN,420,COMMA,380,RPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,"" restart the level "",RPAREN,SEMI,TRY,LBRACE,Thread,DOT,sleep,LPAREN,2000,RPAREN,SEMI,RBRACE,CATCH,LPAREN,InterruptedException,e1,RPAREN,LBRACE,e1,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,ELSE,IF,LPAREN,state,EQEQ,GameState,DOT,PLAYING,RPAREN,LBRACE,proxy,DOT,send,LPAREN,NEW,ProxyClickMessage,LPAREN,100,COMMA,39,RPAREN,RPAREN,SEMI,TRY,LBRACE,Thread,DOT,sleep,LPAREN,1000,RPAREN,SEMI,RBRACE,CATCH,LPAREN,InterruptedException,e1,RPAREN,LBRACE,e1,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,TRY,LBRACE,Thread,DOT,sleep,LPAREN,4000,RPAREN,SEMI,RBRACE,CATCH,LPAREN,InterruptedException,e1,RPAREN,LBRACE,e1,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,System,DOT,out,DOT,println,LPAREN,""Zooming out"",RPAREN,SEMI,FOR,LPAREN,int,k,EQ,0,SEMI,k,<MASK>,15,SEMI,k,PLUSPLUS,RPAREN,LBRACE,proxy,DOT,send,LPAREN,NEW,ProxyMouseWheelMessage,LPAREN,SUB,1,RPAREN,RPAREN,SEMI,RBRACE,TRY,LBRACE,Thread,DOT,sleep,LPAREN,2000,RPAREN,SEMI,RBRACE,CATCH,LPAREN,InterruptedException,e1,RPAREN,LBRACE,e1,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,RETURN,true,SEMI,RBRACE","public boolean restartLevel()
,{
,	GameState state = StateUtil.getGameState(proxy);
,	
,	if(state == GameState.WON || state == GameState.LOST)
,	{
,		proxy.send( new ProxyClickMessage(420,380));//Click the left most button at the end page
,		System.out.println("" restart the level "");
,		  try {
,				Thread.sleep(2000);
,			} catch (InterruptedException e1) {
,				e1.printStackTrace();
,			}
,	}
,	else if(state == GameState.PLAYING)
,		{
,			proxy.send(new ProxyClickMessage(100,39));
,			  try {
,					Thread.sleep(1000);
,				} catch (InterruptedException e1) {
,					e1.printStackTrace();
,				}
,		}
,
,	  //Wait 4000 seconds for loading the level
,	   try {
,			Thread.sleep(4000);
,		} catch (InterruptedException e1) {
,		
,			e1.printStackTrace();
,		}
,	   //Zooming out
,	   System.out.println(""Zooming out"");
,	   for (int k = 0; k <MASK> 15; k++) 
,	   {
,		   proxy.send(new ProxyMouseWheelMessage(-1));
,	   }
,	   try {
,			Thread.sleep(2000);
,		} catch (InterruptedException e1) {
,	
,			e1.printStackTrace();
,		}
,
,	   return true;
,
,}
"
33a4da69-3c87-4617-ac37-92c20f86f62c,a7ed0b53-a60c-4afc-9144-83b3bf3a0086,PLUS,"PRIVATE,void,changeTitle,LPAREN,String,t,RPAREN,LBRACE,setTitle,LPAREN,""InputStub Editor: "",<MASK>,t,RPAREN,SEMI,RBRACE","	private void changeTitle(String t) {
,		setTitle(""InputStub Editor: "" <MASK> t);
,	}
"
56952896-479b-43e9-a9cf-c3f3bb9afc0e,adca26a0-6ab4-46c8-abfe-a0a19fad5617,LT,"PRIVATE,SYNCHRONIZED,void,Reconcile,LPAREN,int,cartQuantity,RPAREN,THROWS,InventoryConsistancyException,COMMA,InventoryUpdateException,LBRACE,IF,LPAREN,LPAREN,this,DOT,getCount,LPAREN,RPAREN,PLUS,cartQuantity,RPAREN,<MASK>,cartQuantity,RPAREN,LBRACE,THROW,NEW,InventoryConsistancyException,LPAREN,RPAREN,SEMI,RBRACE,TRY,LBRACE,this,DOT,updateInventory,LPAREN,getInventory,LPAREN,RPAREN,SUB,cartQuantity,RPAREN,SEMI,RBRACE,CATCH,LPAREN,SQLException,e,RPAREN,LBRACE,THROW,NEW,InventoryUpdateException,LPAREN,""No changes made to Inventory or Reservations [PID:"",PLUS,this,DOT,productId,PLUS,""]"",RPAREN,SEMI,RBRACE,this,DOT,reservations,SUBEQ,cartQuantity,SEMI,RBRACE","	private synchronized void Reconcile(int cartQuantity) throws InventoryConsistancyException, InventoryUpdateException{
,		if((this.getCount()+cartQuantity) <MASK> cartQuantity){
,			throw new InventoryConsistancyException();
,		}
,		try {
,			this.updateInventory(getInventory()-cartQuantity);
,		} catch (SQLException e) {
,			throw new InventoryUpdateException(""No changes made to Inventory or Reservations [PID:""+this.productId+""]"");
,		}
,		this.reservations -= cartQuantity;
,	}
"
41539c05-83ff-49b8-a839-9292483dddc3,8800cff0-6e7f-4002-bdab-fb43f70edbc8,PERCENT,"PUBLIC,void,defineLevel,LPAREN,RPAREN,LBRACE,bossAlreadyCreated,EQ,false,SEMI,removeObjects,LPAREN,null,COMMA,24,RPAREN,SEMI,initNewLife,LPAREN,RPAREN,SEMI,setBGImage,LPAREN,""empty_"",PLUS,LPAREN,stage,<MASK>,3,RPAREN,RPAREN,SEMI,fillBG,LPAREN,"""",RPAREN,SEMI,defineRockObstacles,LPAREN,RPAREN,SEMI,RBRACE","	public void defineLevel() {
,		bossAlreadyCreated = false;
,		removeObjects(null, 24);
,		initNewLife();
,		setBGImage(""empty_"" + (stage <MASK> 3)); // changing background image
,		fillBG("""");
,		defineRockObstacles();
,	}
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,6b9423ab-971f-42fe-a8a8-8578683e68a6,LT,"PUBLIC,double,FindShelValueByObject,LPAREN,ABObject,obs,RPAREN,LBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,shelters,DOT,size,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,ABObject,o,EQ,shelters,DOT,get,LPAREN,i,RPAREN,SEMI,IF,LPAREN,o,DOT,getLocation,LPAREN,RPAREN,EQEQ,obs,DOT,getLocation,LPAREN,RPAREN,RPAREN,RETURN,o,DOT,getSheltersValue,LPAREN,RPAREN,SEMI,RBRACE,RETURN,0,SEMI,RBRACE","	public double FindShelValueByObject (ABObject obs)
,	{
,		for (int i = 0; i <MASK> shelters.size(); i++)
,		{
,			ABObject o = shelters.get(i);
,			if (o.getLocation() == obs.getLocation())
,				return o.getSheltersValue();
,		}
,		return 0;
,	}
"
ab518c05-62c4-49ea-9eaa-d418788693b1,be06f847-47f4-4904-ae51-cfcee59cf88d,PLUS,"MONKEYS_AT,Override,PROTECTED,long,evalGame,LPAREN,char,playerColour,COMMA,char,enemyColour,COMMA,Game,game,RPAREN,LBRACE,RETURN,LPAREN,LPAREN,LPAREN,LPAREN,LPAREN,1,GTEQ,0,QUES,3,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,4,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,3,COLON,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,STAR,0,RPAREN,RPAREN,GTEQ,0,QUES,3,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,3,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,COLON,1,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,4,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,3,COLON,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,STAR,0,RPAREN,RPAREN,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,LPAREN,LPAREN,LPAREN,1,GTEQ,0,QUES,3,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,4,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,SUB,3,GTEQ,0,QUES,3,COLON,3,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,3,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,LPAREN,0,GTEQ,0,QUES,3,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,COLON,1,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,0,GTEQ,0,QUES,0,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,1,GTEQ,0,QUES,3,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,4,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,0,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,SUB,2,COLON,3,RPAREN,RPAREN,COLON,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,LPAREN,SUB,2,GTEQ,0,QUES,SUB,5,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,4,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,0,COLON,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,4,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,3,COLON,LPAREN,SUB,5,GTEQ,0,QUES,LPAREN,LPAREN,LPAREN,1,GTEQ,0,QUES,3,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,4,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,LPAREN,1,GTEQ,0,QUES,3,COLON,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,STAR,LPAREN,LPAREN,3,GTEQ,0,QUES,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,4,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,1,GTEQ,0,QUES,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,COLON,1,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,SUB,5,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,GTEQ,0,QUES,SUB,5,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,4,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,4,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,4,COMMA,4,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,GTEQ,0,QUES,SUB,5,COLON,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,3,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,4,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,COLON,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,SUB,5,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,RPAREN,COLON,3,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,SUB,5,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,3,RPAREN,COLON,SUB,5,RPAREN,RPAREN,RPAREN,GTEQ,0,QUES,3,COLON,3,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,3,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,4,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,3,COLON,LPAREN,LPAREN,3,GTEQ,0,QUES,3,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,0,COLON,LPAREN,1,GTEQ,0,QUES,LPAREN,LPAREN,LPAREN,SUB,5,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,LPAREN,1,GTEQ,0,QUES,3,COLON,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,STAR,LPAREN,LPAREN,3,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,4,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,1,GTEQ,0,QUES,LPAREN,SUB,2,GTEQ,0,QUES,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,SUB,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,SUB,5,GTEQ,0,QUES,LPAREN,LPAREN,LPAREN,1,GTEQ,0,QUES,3,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,4,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,3,COLON,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,STAR,LPAREN,LPAREN,3,GTEQ,0,QUES,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,4,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,SUB,5,SUB,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,SUB,5,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,RPAREN,COLON,3,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,SUB,5,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,3,RPAREN,COLON,SUB,5,RPAREN,RPAREN,RPAREN,GTEQ,0,QUES,3,COLON,3,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,3,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,4,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,3,COLON,SUB,5,RPAREN,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,RPAREN,COLON,3,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,SUB,5,SUB,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,SUB,5,RPAREN,RPAREN,RPAREN,GTEQ,0,QUES,3,COLON,3,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,4,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,COLON,0,RPAREN,COLON,LPAREN,LPAREN,LPAREN,1,GTEQ,0,QUES,LPAREN,SUB,5,SUB,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,3,COLON,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,STAR,0,RPAREN,RPAREN,GTEQ,0,QUES,3,COLON,3,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,3,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,COLON,SUB,2,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,SUB,1,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,COLON,SUB,5,RPAREN,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,0,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,1,RPAREN,COLON,LPAREN,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,3,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,4,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,3,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,4,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,1,GTEQ,0,QUES,LPAREN,SUB,2,GTEQ,0,QUES,LPAREN,SUB,5,SUB,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,LPAREN,LPAREN,LPAREN,LPAREN,0,GTEQ,0,QUES,LPAREN,2,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,4,RPAREN,QUES,1,COLON,0,RPAREN,COLON,2,RPAREN,GTEQ,0,QUES,LPAREN,SUB,1,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,COLON,SUB,2,RPAREN,COLON,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,4,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,<MASK>,LPAREN,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,COLON,1,RPAREN,GTEQ,0,QUES,LPAREN,SUB,4,GTEQ,0,QUES,SUB,3,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,4,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,RPAREN,COLON,3,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,LPAREN,SUB,2,GTEQ,0,QUES,SUB,5,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,SUB,5,SUB,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,SUB,5,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,SUB,5,RPAREN,GTEQ,0,QUES,LPAREN,2,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,LPAREN,LPAREN,3,GTEQ,0,QUES,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,4,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,0,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,0,COLON,LPAREN,1,GTEQ,0,QUES,LPAREN,LPAREN,LPAREN,SUB,5,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,SUB,1,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,COLON,0,RPAREN,COLON,LPAREN,LPAREN,LPAREN,1,GTEQ,0,QUES,3,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,4,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,3,COLON,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,STAR,0,RPAREN,RPAREN,GTEQ,0,QUES,3,COLON,3,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,3,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,4,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,LPAREN,3,GTEQ,0,QUES,0,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,0,COLON,LPAREN,1,GTEQ,0,QUES,3,COLON,3,RPAREN,RPAREN,COLON,3,RPAREN,RPAREN,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,0,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,0,COLON,SUB,5,RPAREN,COLON,1,RPAREN,COLON,LPAREN,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,3,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,4,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,3,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,4,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,1,GTEQ,0,QUES,LPAREN,SUB,2,GTEQ,0,QUES,LPAREN,SUB,5,SUB,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,SUB,5,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,RPAREN,COLON,3,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,LPAREN,SUB,2,GTEQ,0,QUES,SUB,5,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,SUB,5,SUB,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,SUB,5,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,3,RPAREN,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,SUB,3,RPAREN,GTEQ,0,QUES,LPAREN,2,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,RPAREN,COLON,SUB,5,RPAREN,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,LPAREN,SUB,2,GTEQ,0,QUES,SUB,5,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,4,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,0,COLON,LPAREN,LPAREN,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,SUB,5,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,SUB,5,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,STAR,LPAREN,LPAREN,3,GTEQ,0,QUES,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,1,GTEQ,0,QUES,LPAREN,LPAREN,3,GTEQ,0,QUES,3,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,0,COLON,LPAREN,1,GTEQ,0,QUES,LPAREN,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,COLON,0,RPAREN,COLON,LPAREN,LPAREN,LPAREN,1,GTEQ,0,QUES,LPAREN,SUB,5,SUB,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,0,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,3,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,0,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,0,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,1,RPAREN,COLON,LPAREN,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,3,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,4,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,3,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,4,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,1,GTEQ,0,QUES,LPAREN,SUB,2,GTEQ,0,QUES,LPAREN,SUB,5,SUB,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,LPAREN,LPAREN,LPAREN,SUB,4,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,4,RPAREN,QUES,1,COLON,0,RPAREN,COLON,2,RPAREN,GTEQ,0,QUES,LPAREN,SUB,1,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,SUB,2,RPAREN,COLON,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,4,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,4,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,0,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,4,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,SUB,1,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,SUB,4,RPAREN,RPAREN,COLON,LPAREN,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,COLON,1,RPAREN,GTEQ,0,QUES,LPAREN,SUB,4,GTEQ,0,QUES,SUB,3,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,4,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,RPAREN,COLON,3,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,LPAREN,SUB,2,GTEQ,0,QUES,SUB,5,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,SUB,5,SUB,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,4,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,3,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,3,COLON,3,RPAREN,RPAREN,COLON,SUB,5,RPAREN,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,LPAREN,SUB,2,GTEQ,0,QUES,SUB,5,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,4,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,0,COLON,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,4,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,3,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,RPAREN,COLON,3,RPAREN,RPAREN,COLON,3,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,4,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,SUB,5,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,3,RPAREN,COLON,SUB,5,RPAREN,RPAREN,COLON,LPAREN,LPAREN,SUB,2,GTEQ,0,QUES,SUB,5,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,4,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,3,GTEQ,0,QUES,LPAREN,LPAREN,SUB,3,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,4,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,COLON,SUB,1,RPAREN,GTEQ,0,QUES,LPAREN,SUB,5,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,COLON,SUB,3,RPAREN,COLON,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,COLON,SUB,5,RPAREN,RPAREN,COLON,LPAREN,LPAREN,SUB,3,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,4,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,4,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,4,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,RPAREN,GTEQ,0,QUES,0,COLON,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,4,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,SUB,5,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,GTEQ,0,QUES,3,COLON,3,RPAREN,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,RPAREN,COLON,3,RPAREN,RPAREN,COLON,3,RPAREN,RPAREN,COLON,LPAREN,1,GTEQ,0,QUES,LPAREN,LPAREN,SUB,2,GTEQ,0,QUES,SUB,5,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,SUB,5,SUB,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,SUB,5,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,SUB,5,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,RPAREN,COLON,3,RPAREN,RPAREN,BANGEQ,0,QUES,LPAREN,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,STAR,0,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,1,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,4,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,COLON,SUB,5,RPAREN,COLON,1,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,LPAREN,3,GTEQ,0,QUES,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,4,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,SUB,5,SUB,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,SUB,5,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,RPAREN,COLON,3,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,SUB,5,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,3,RPAREN,COLON,SUB,5,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,SUB,3,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,SLASH,LPAREN,3,GTEQ,0,QUES,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,4,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,0,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,0,COLON,LPAREN,1,GTEQ,0,QUES,LPAREN,LPAREN,LPAREN,SUB,5,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,SUB,1,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,COLON,0,RPAREN,COLON,LPAREN,LPAREN,LPAREN,1,GTEQ,0,QUES,3,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,4,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,3,COLON,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,STAR,0,RPAREN,RPAREN,GTEQ,0,QUES,3,COLON,3,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,3,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,4,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,LPAREN,3,GTEQ,0,QUES,0,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,0,COLON,LPAREN,1,GTEQ,0,QUES,3,COLON,3,RPAREN,RPAREN,COLON,3,RPAREN,RPAREN,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,0,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,0,COLON,SUB,5,RPAREN,COLON,1,RPAREN,COLON,LPAREN,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,3,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,4,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,3,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,4,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,1,GTEQ,0,QUES,LPAREN,SUB,2,GTEQ,0,QUES,LPAREN,SUB,5,SUB,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,SUB,5,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,RPAREN,COLON,3,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,LPAREN,SUB,2,GTEQ,0,QUES,SUB,5,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,SUB,5,SUB,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,SUB,5,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,3,RPAREN,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,SUB,3,RPAREN,GTEQ,0,QUES,LPAREN,2,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,RPAREN,COLON,SUB,5,RPAREN,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,LPAREN,SUB,2,GTEQ,0,QUES,SUB,5,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,4,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,0,COLON,LPAREN,LPAREN,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,SUB,5,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,SUB,5,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,STAR,LPAREN,LPAREN,3,GTEQ,0,QUES,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,1,GTEQ,0,QUES,LPAREN,LPAREN,3,GTEQ,0,QUES,3,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,0,COLON,LPAREN,1,GTEQ,0,QUES,LPAREN,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,COLON,0,RPAREN,COLON,LPAREN,LPAREN,LPAREN,1,GTEQ,0,QUES,LPAREN,SUB,5,SUB,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,0,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,3,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,0,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,0,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,1,RPAREN,COLON,LPAREN,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,3,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,4,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,3,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,4,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,1,GTEQ,0,QUES,LPAREN,SUB,2,GTEQ,0,QUES,LPAREN,SUB,5,SUB,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,LPAREN,LPAREN,LPAREN,SUB,4,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,4,RPAREN,QUES,1,COLON,0,RPAREN,COLON,2,RPAREN,GTEQ,0,QUES,LPAREN,SUB,1,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,SUB,2,RPAREN,COLON,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,4,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,4,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,0,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,4,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,SUB,1,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,SUB,4,RPAREN,RPAREN,COLON,LPAREN,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,COLON,1,RPAREN,GTEQ,0,QUES,LPAREN,SUB,4,GTEQ,0,QUES,SUB,3,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,4,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,RPAREN,COLON,3,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,LPAREN,SUB,2,GTEQ,0,QUES,SUB,5,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,SUB,5,SUB,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,4,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,3,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,3,COLON,3,RPAREN,RPAREN,COLON,SUB,5,RPAREN,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,LPAREN,SUB,2,GTEQ,0,QUES,SUB,5,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,4,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,0,COLON,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,4,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,3,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,RPAREN,COLON,3,RPAREN,RPAREN,COLON,3,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,4,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,SUB,5,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,3,RPAREN,COLON,SUB,5,RPAREN,RPAREN,COLON,LPAREN,LPAREN,SUB,2,GTEQ,0,QUES,SUB,5,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,4,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,3,GTEQ,0,QUES,LPAREN,LPAREN,SUB,3,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,4,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,COLON,SUB,1,RPAREN,GTEQ,0,QUES,LPAREN,SUB,5,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,COLON,SUB,3,RPAREN,COLON,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,COLON,SUB,5,RPAREN,RPAREN,COLON,LPAREN,LPAREN,SUB,3,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,4,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,4,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,4,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,RPAREN,GTEQ,0,QUES,0,COLON,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,4,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,SUB,5,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,GTEQ,0,QUES,3,COLON,3,RPAREN,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,RPAREN,COLON,3,RPAREN,RPAREN,COLON,3,RPAREN,RPAREN,COLON,LPAREN,1,GTEQ,0,QUES,LPAREN,LPAREN,SUB,2,GTEQ,0,QUES,SUB,5,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,SUB,5,SUB,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,SUB,5,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,SUB,5,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,RPAREN,COLON,3,RPAREN,RPAREN,COLON,1,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,RPAREN,COLON,SUB,5,RPAREN,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,LPAREN,SUB,2,GTEQ,0,QUES,SUB,5,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,4,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,0,GTEQ,0,QUES,SUB,2,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,RPAREN,COLON,3,RPAREN,RPAREN,COLON,3,RPAREN,RPAREN,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,RPAREN,GTEQ,0,QUES,0,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,0,GTEQ,0,QUES,3,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,RPAREN,SUB,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,SEMI,RBRACE","    @Override
,    protected long evalGame(char playerColour, char enemyColour, Game game) {
,        return (((((1 >= 0 ? 3 : (enemyColour == game.getColourOfStone(1, 4) ? 1 : 0)) >= 0 ? ((((playerColour == game.getColourOfStone(6, 3) ? 1 : 0) >= 0 ? 3 : ((enemyColour == game.getColourOfStone(1, 1) ? 1 : 0) * 0)) >= 0 ? 3 : (playerColour == game.getColourOfStone(6, 2) ? 1 : 0)) >= 0 ? (enemyColour == game.getColourOfStone(5, 0) ? 1 : 0) : (enemyColour == game.getColourOfStone(1, 1) ? 1 : 0)) : 3) >= 0 ? (enemyColour == game.getColourOfStone(5, 0) ? 1 : 0) : 1) >= 0 ? (playerColour == game.getColourOfStone(3, 4) ? 1 : 0) : (((enemyColour == game.getColourOfStone(3, 2) ? 1 : 0) >= 0 ? ((playerColour == game.getColourOfStone(6, 3) ? 1 : 0) >= 0 ? 3 : ((enemyColour == game.getColourOfStone(1, 1) ? 1 : 0) * 0)) : (playerColour == game.getColourOfStone(3, 2) ? 1 : 0)) >= 0 ? (((((1 >= 0 ? 3 : (enemyColour == game.getColourOfStone(1, 4) ? 1 : 0)) >= 0 ? ((-3 >= 0 ? 3 : 3) >= 0 ? (enemyColour == game.getColourOfStone(5, 0) ? 1 : 0) : (enemyColour == game.getColourOfStone(1, 1) ? 1 : 0)) : 3) >= 0 ? (((0 >= 0 ? 3 : (enemyColour == game.getColourOfStone(3, 3) ? 1 : 0)) >= 0 ? (enemyColour == game.getColourOfStone(3, 3) ? 1 : 0) : 1) >= 0 ? (enemyColour == game.getColourOfStone(5, 0) ? 1 : 0) : (enemyColour == game.getColourOfStone(1, 1) ? 1 : 0)) : (0 >= 0 ? 0 : (playerColour == game.getColourOfStone(6, 0) ? 1 : 0))) >= 0 ? (((enemyColour == game.getColourOfStone(3, 2) ? 1 : 0) >= 0 ? (1 >= 0 ? 3 : (enemyColour == game.getColourOfStone(1, 4) ? 1 : 0)) : (playerColour == game.getColourOfStone(3, 2) ? 1 : 0)) >= 0 ? ((enemyColour == game.getColourOfStone(2, 3) ? 1 : 0) >= 0 ? 0 : (playerColour == game.getColourOfStone(3, 2) ? 1 : 0)) : ((enemyColour == game.getColourOfStone(3, 3) ? 1 : 0) >= 0 ? -2 : 3)) : ((enemyColour == game.getColourOfStone(3, 2) ? 1 : 0) >= 0 ? ((enemyColour == game.getColourOfStone(6, 5) ? 1 : 0) >= 0 ? (playerColour == game.getColourOfStone(0, 2) ? 1 : 0) : (playerColour == game.getColourOfStone(6, 3) ? 1 : 0)) : ((-2 >= 0 ? -5 : (playerColour == game.getColourOfStone(3, 4) ? 1 : 0)) >= 0 ? ((enemyColour == game.getColourOfStone(1, 1) ? 1 : 0) >= 0 ? 0 : ((playerColour == game.getColourOfStone(4, 2) ? 1 : 0) >= 0 ? 3 : (-5 >= 0 ? (((1 >= 0 ? 3 : (enemyColour == game.getColourOfStone(1, 4) ? 1 : 0)) >= 0 ? (((1 >= 0 ? 3 : ((enemyColour == game.getColourOfStone(1, 1) ? 1 : 0) * ((3 >= 0 ? ((enemyColour == game.getColourOfStone(1, 1) ? 1 : 0) >= 0 ? (playerColour == game.getColourOfStone(0, 5) ? 1 : 0) : (enemyColour == game.getColourOfStone(4, 5) ? 1 : 0)) : (1 >= 0 ? ((playerColour == game.getColourOfStone(6, 0) ? 1 : 0) >= 0 ? ((((enemyColour == game.getColourOfStone(5, 2) ? 1 : 0) >= 0 ? (playerColour == game.getColourOfStone(3, 3) ? 1 : 0) : 1) >= 0 ? (((enemyColour == game.getColourOfStone(6, 0) ? 1 : 0) >= 0 ? (playerColour == game.getColourOfStone(0, 3) ? 1 : 0) : (-5 >= 0 ? (playerColour == game.getColourOfStone(0, 5) ? 1 : 0) : (enemyColour == game.getColourOfStone(6, 5) ? 1 : 0))) >= 0 ? -5 : (enemyColour == game.getColourOfStone(0, 4) ? 1 : 0)) : ((enemyColour == game.getColourOfStone(4, 2) ? 1 : 0) >= 0 ? (enemyColour == game.getColourOfStone(2, 2) ? 1 : 0) : (enemyColour == game.getColourOfStone(4, 4) ? 1 : 0))) >= 0 ? -5 : ((enemyColour == game.getColourOfStone(3, 5) ? 1 : 0) >= 0 ? 3 : (enemyColour == game.getColourOfStone(4, 5) ? 1 : 0))) : ((playerColour == game.getColourOfStone(6, 0) ? 1 : 0) >= 0 ? (playerColour == game.getColourOfStone(0, 3) ? 1 : 0) : (-5 >= 0 ? (playerColour == game.getColourOfStone(0, 5) ? 1 : 0) : (enemyColour == game.getColourOfStone(6, 5) ? 1 : 0)))) : 3)) >= 0 ? (-5 >= 0 ? (playerColour == game.getColourOfStone(0, 5) ? 1 : 0) : 3) : -5))) >= 0 ? 3 : 3) >= 0 ? (enemyColour == game.getColourOfStone(5, 0) ? 1 : 0) : (enemyColour == game.getColourOfStone(1, 1) ? 1 : 0)) : 3) >= 0 ? (enemyColour == game.getColourOfStone(5, 0) ? 1 : 0) : ((playerColour == game.getColourOfStone(3, 4) ? 1 : 0) >= 0 ? 3 : ((3 >= 0 ? 3 : (enemyColour == game.getColourOfStone(2, 3) ? 1 : 0)) >= 0 ? ((enemyColour == game.getColourOfStone(1, 1) ? 1 : 0) >= 0 ? 0 : (1 >= 0 ? (((-5 >= 0 ? (enemyColour == game.getColourOfStone(3, 2) ? 1 : 0) : ((enemyColour == game.getColourOfStone(2, 3) ? 1 : 0) >= 0 ? (((1 >= 0 ? 3 : ((enemyColour == game.getColourOfStone(1, 1) ? 1 : 0) * ((3 >= 0 ? (playerColour == game.getColourOfStone(4, 2) ? 1 : 0) : (1 >= 0 ? (-2 >= 0 ? ((enemyColour == game.getColourOfStone(6, 5) ? 1 : 0) - (enemyColour == game.getColourOfStone(5, 0) ? 1 : 0)) : ((enemyColour == game.getColourOfStone(6, 0) ? 1 : 0) >= 0 ? (playerColour == game.getColourOfStone(0, 3) ? 1 : 0) : (-5 >= 0 ? (((1 >= 0 ? 3 : (enemyColour == game.getColourOfStone(1, 4) ? 1 : 0)) >= 0 ? ((((playerColour == game.getColourOfStone(2, 5) ? 1 : 0) >= 0 ? 3 : ((enemyColour == game.getColourOfStone(1, 1) ? 1 : 0) * ((3 >= 0 ? ((enemyColour == game.getColourOfStone(1, 1) ? 1 : 0) >= 0 ? (playerColour == game.getColourOfStone(0, 5) ? 1 : 0) : (enemyColour == game.getColourOfStone(4, 5) ? 1 : 0)) : ((enemyColour == game.getColourOfStone(6, 0) ? 1 : 0) >= 0 ? ((playerColour == game.getColourOfStone(6, 0) ? 1 : 0) >= 0 ? (-5 - (enemyColour == game.getColourOfStone(5, 0) ? 1 : 0)) : ((enemyColour == game.getColourOfStone(6, 0) ? 1 : 0) >= 0 ? (playerColour == game.getColourOfStone(0, 3) ? 1 : 0) : (-5 >= 0 ? (playerColour == game.getColourOfStone(0, 5) ? 1 : 0) : (enemyColour == game.getColourOfStone(6, 5) ? 1 : 0)))) : 3)) >= 0 ? (-5 >= 0 ? (playerColour == game.getColourOfStone(0, 5) ? 1 : 0) : 3) : -5))) >= 0 ? 3 : 3) >= 0 ? (enemyColour == game.getColourOfStone(5, 0) ? 1 : 0) : (enemyColour == game.getColourOfStone(1, 1) ? 1 : 0)) : 3) >= 0 ? (enemyColour == game.getColourOfStone(5, 0) ? 1 : 0) : ((enemyColour == game.getColourOfStone(4, 0) ? 1 : 0) >= 0 ? 3 : -5)) : (enemyColour == game.getColourOfStone(6, 5) ? 1 : 0)))) : 3)) >= 0 ? (-5 - (enemyColour == game.getColourOfStone(5, 0) ? 1 : 0)) : -5))) >= 0 ? 3 : 3) >= 0 ? (enemyColour == game.getColourOfStone(5, 0) ? 1 : 0) : (enemyColour == game.getColourOfStone(4, 5) ? 1 : 0)) : (playerColour == game.getColourOfStone(3, 2) ? 1 : 0))) >= 0 ? ((playerColour == game.getColourOfStone(0, 2) ? 1 : 0) >= 0 ? (enemyColour == game.getColourOfStone(2, 1) ? 1 : 0) : 0) : (((1 >= 0 ? (-5 - (enemyColour == game.getColourOfStone(5, 0) ? 1 : 0)) : (playerColour == game.getColourOfStone(2, 5) ? 1 : 0)) >= 0 ? ((((enemyColour == game.getColourOfStone(3, 5) ? 1 : 0) >= 0 ? 3 : ((enemyColour == game.getColourOfStone(1, 1) ? 1 : 0) * 0)) >= 0 ? 3 : 3) >= 0 ? (enemyColour == game.getColourOfStone(5, 0) ? 1 : 0) : (enemyColour == game.getColourOfStone(1, 1) ? 1 : 0)) : 3) >= 0 ? (enemyColour == game.getColourOfStone(5, 0) ? 1 : 0) : -2)) >= 0 ? (((enemyColour == game.getColourOfStone(3, 2) ? 1 : 0) >= 0 ? (-1 >= 0 ? (playerColour == game.getColourOfStone(6, 2) ? 1 : 0) : -5) : (playerColour == game.getColourOfStone(3, 2) ? 1 : 0)) >= 0 ? ((enemyColour == game.getColourOfStone(2, 3) ? 1 : 0) >= 0 ? 0 : (playerColour == game.getColourOfStone(3, 2) ? 1 : 0)) : 1) : (((enemyColour == game.getColourOfStone(3, 5) ? 1 : 0) >= 0 ? 3 : (enemyColour == game.getColourOfStone(4, 5) ? 1 : 0)) >= 0 ? ((enemyColour == game.getColourOfStone(6, 5) ? 1 : 0) >= 0 ? ((3 >= 0 ? (playerColour == game.getColourOfStone(4, 2) ? 1 : 0) : (1 >= 0 ? (-2 >= 0 ? (-5 - (enemyColour == game.getColourOfStone(5, 0) ? 1 : 0)) : ((enemyColour == game.getColourOfStone(6, 0) ? 1 : 0) >= 0 ? (playerColour == game.getColourOfStone(0, 3) ? 1 : 0) : (((((0 >= 0 ? (2 >= 0 ? (enemyColour == game.getColourOfStone(0, 5) ? 1 : 0) : (playerColour == game.getColourOfStone(3, 3) ? 1 : 0)) : ((playerColour == game.getColourOfStone(6, 0) ? 1 : 0) >= 0 ? (playerColour == game.getColourOfStone(5, 5) ? 1 : 0) : (enemyColour == game.getColourOfStone(0, 2) ? 1 : 0))) >= 0 ? (playerColour == game.getColourOfStone(0, 4) ? 1 : 0) : 2) >= 0 ? (-1 >= 0 ? (enemyColour == game.getColourOfStone(3, 2) ? 1 : 0) : -2) : ((playerColour == game.getColourOfStone(2, 1) ? 1 : 0) >= 0 ? (enemyColour == game.getColourOfStone(5, 5) ? 1 : 0) : (playerColour == game.getColourOfStone(0, 4) ? 1 : 0))) <MASK> (((enemyColour == game.getColourOfStone(0, 0) ? 1 : 0) >= 0 ? (enemyColour == game.getColourOfStone(1, 0) ? 1 : 0) : 1) >= 0 ? (-4 >= 0 ? -3 : (enemyColour == game.getColourOfStone(2, 2) ? 1 : 0)) : ((playerColour == game.getColourOfStone(3, 1) ? 1 : 0) >= 0 ? (enemyColour == game.getColourOfStone(3, 0) ? 1 : 0) : (playerColour == game.getColourOfStone(1, 4) ? 1 : 0)))) >= 0 ? (playerColour == game.getColourOfStone(0, 5) ? 1 : 0) : (enemyColour == game.getColourOfStone(6, 5) ? 1 : 0)))) : 3)) >= 0 ? (((-2 >= 0 ? -5 : 0) >= 0 ? (-5 - (enemyColour == game.getColourOfStone(6, 0) ? 1 : 0)) : ((enemyColour == game.getColourOfStone(6, 0) ? 1 : 0) >= 0 ? ((playerColour == game.getColourOfStone(2, 5) ? 1 : 0) >= 0 ? (enemyColour == game.getColourOfStone(3, 2) ? 1 : 0) : (enemyColour == game.getColourOfStone(1, 3) ? 1 : 0)) : (-5 >= 0 ? (playerColour == game.getColourOfStone(0, 5) ? 1 : 0) : (enemyColour == game.getColourOfStone(6, 5) ? 1 : 0)))) >= 0 ? (playerColour == game.getColourOfStone(0, 5) ? 1 : 0) : (((playerColour == game.getColourOfStone(1, 5) ? 1 : 0) >= 0 ? (playerColour == game.getColourOfStone(1, 5) ? 1 : 0) : -5) >= 0 ? (2 >= 0 ? (enemyColour == game.getColourOfStone(0, 5) ? 1 : 0) : (playerColour == game.getColourOfStone(3, 3) ? 1 : 0)) : (((3 >= 0 ? ((enemyColour == game.getColourOfStone(4, 0) ? 1 : 0) >= 0 ? (playerColour == game.getColourOfStone(0, 5) ? 1 : 0) : (((enemyColour == game.getColourOfStone(0, 5) ? 1 : 0) >= 0 ? 0 : (enemyColour == game.getColourOfStone(2, 3) ? 1 : 0)) >= 0 ? ((enemyColour == game.getColourOfStone(1, 1) ? 1 : 0) >= 0 ? 0 : (1 >= 0 ? (((-5 >= 0 ? (enemyColour == game.getColourOfStone(3, 2) ? 1 : 0) : ((enemyColour == game.getColourOfStone(2, 3) ? 1 : 0) >= 0 ? -1 : (playerColour == game.getColourOfStone(3, 2) ? 1 : 0))) >= 0 ? ((playerColour == game.getColourOfStone(0, 2) ? 1 : 0) >= 0 ? (enemyColour == game.getColourOfStone(2, 1) ? 1 : 0) : 0) : (((1 >= 0 ? 3 : (enemyColour == game.getColourOfStone(1, 4) ? 1 : 0)) >= 0 ? ((((enemyColour == game.getColourOfStone(3, 5) ? 1 : 0) >= 0 ? 3 : ((enemyColour == game.getColourOfStone(1, 1) ? 1 : 0) * 0)) >= 0 ? 3 : 3) >= 0 ? (enemyColour == game.getColourOfStone(5, 0) ? 1 : 0) : (enemyColour == game.getColourOfStone(1, 1) ? 1 : 0)) : 3) >= 0 ? (enemyColour == game.getColourOfStone(5, 0) ? 1 : 0) : ((enemyColour == game.getColourOfStone(4, 0) ? 1 : 0) >= 0 ? (playerColour == game.getColourOfStone(0, 5) ? 1 : 0) : ((3 >= 0 ? 0 : (enemyColour == game.getColourOfStone(2, 3) ? 1 : 0)) >= 0 ? ((enemyColour == game.getColourOfStone(1, 1) ? 1 : 0) >= 0 ? 0 : (1 >= 0 ? 3 : 3)) : 3)))) >= 0 ? (((enemyColour == game.getColourOfStone(3, 2) ? 1 : 0) >= 0 ? 0 : (playerColour == game.getColourOfStone(3, 2) ? 1 : 0)) >= 0 ? ((enemyColour == game.getColourOfStone(2, 3) ? 1 : 0) >= 0 ? 0 : -5) : 1) : (((enemyColour == game.getColourOfStone(3, 5) ? 1 : 0) >= 0 ? 3 : (enemyColour == game.getColourOfStone(4, 5) ? 1 : 0)) >= 0 ? ((enemyColour == game.getColourOfStone(6, 5) ? 1 : 0) >= 0 ? ((3 >= 0 ? (playerColour == game.getColourOfStone(4, 2) ? 1 : 0) : (1 >= 0 ? (-2 >= 0 ? (-5 - (enemyColour == game.getColourOfStone(5, 0) ? 1 : 0)) : ((enemyColour == game.getColourOfStone(6, 0) ? 1 : 0) >= 0 ? (playerColour == game.getColourOfStone(0, 3) ? 1 : 0) : (-5 >= 0 ? (playerColour == game.getColourOfStone(0, 5) ? 1 : 0) : (enemyColour == game.getColourOfStone(6, 5) ? 1 : 0)))) : 3)) >= 0 ? (((-2 >= 0 ? -5 : 0) >= 0 ? (-5 - (enemyColour == game.getColourOfStone(6, 0) ? 1 : 0)) : ((enemyColour == game.getColourOfStone(6, 0) ? 1 : 0) >= 0 ? ((playerColour == game.getColourOfStone(2, 5) ? 1 : 0) >= 0 ? (enemyColour == game.getColourOfStone(3, 2) ? 1 : 0) : (enemyColour == game.getColourOfStone(1, 3) ? 1 : 0)) : (-5 >= 0 ? (playerColour == game.getColourOfStone(0, 5) ? 1 : 0) : 3))) >= 0 ? (playerColour == game.getColourOfStone(0, 5) ? 1 : 0) : (((playerColour == game.getColourOfStone(1, 5) ? 1 : 0) >= 0 ? (playerColour == game.getColourOfStone(1, 5) ? 1 : 0) : -3) >= 0 ? (2 >= 0 ? (enemyColour == game.getColourOfStone(0, 5) ? 1 : 0) : (playerColour == game.getColourOfStone(3, 3) ? 1 : 0)) : ((playerColour == game.getColourOfStone(6, 0) ? 1 : 0) >= 0 ? (playerColour == game.getColourOfStone(5, 5) ? 1 : 0) : (enemyColour == game.getColourOfStone(0, 2) ? 1 : 0)))) : -5) : (playerColour == game.getColourOfStone(6, 3) ? 1 : 0)) : ((-2 >= 0 ? -5 : (playerColour == game.getColourOfStone(3, 4) ? 1 : 0)) >= 0 ? ((enemyColour == game.getColourOfStone(1, 1) ? 1 : 0) >= 0 ? 0 : ((((playerColour == game.getColourOfStone(6, 0) ? 1 : 0) >= 0 ? (-5 >= 0 ? (playerColour == game.getColourOfStone(0, 5) ? 1 : 0) : (enemyColour == game.getColourOfStone(6, 5) ? 1 : 0)) : ((enemyColour == game.getColourOfStone(6, 0) ? 1 : 0) >= 0 ? (playerColour == game.getColourOfStone(0, 3) ? 1 : 0) : (-5 >= 0 ? (playerColour == game.getColourOfStone(0, 5) ? 1 : 0) : (enemyColour == game.getColourOfStone(1, 3) ? 1 : 0)))) >= 0 ? ((enemyColour == game.getColourOfStone(1, 1) ? 1 : 0) * ((3 >= 0 ? ((enemyColour == game.getColourOfStone(1, 1) ? 1 : 0) >= 0 ? (playerColour == game.getColourOfStone(0, 5) ? 1 : 0) : (enemyColour == game.getColourOfStone(5, 0) ? 1 : 0)) : (1 >= 0 ? ((3 >= 0 ? 3 : (enemyColour == game.getColourOfStone(2, 3) ? 1 : 0)) >= 0 ? ((enemyColour == game.getColourOfStone(1, 1) ? 1 : 0) >= 0 ? 0 : (1 >= 0 ? (((playerColour == game.getColourOfStone(0, 5) ? 1 : 0) >= 0 ? ((playerColour == game.getColourOfStone(0, 2) ? 1 : 0) >= 0 ? (enemyColour == game.getColourOfStone(2, 1) ? 1 : 0) : 0) : (((1 >= 0 ? (-5 - (enemyColour == game.getColourOfStone(5, 0) ? 1 : 0)) : (playerColour == game.getColourOfStone(2, 5) ? 1 : 0)) >= 0 ? (((enemyColour == game.getColourOfStone(2, 3) ? 1 : 0) >= 0 ? 0 : (playerColour == game.getColourOfStone(3, 2) ? 1 : 0)) >= 0 ? (enemyColour == game.getColourOfStone(5, 0) ? 1 : 0) : (enemyColour == game.getColourOfStone(1, 1) ? 1 : 0)) : 3) >= 0 ? (enemyColour == game.getColourOfStone(5, 0) ? 1 : 0) : 0)) >= 0 ? (((enemyColour == game.getColourOfStone(3, 2) ? 1 : 0) >= 0 ? 0 : (playerColour == game.getColourOfStone(3, 2) ? 1 : 0)) >= 0 ? ((enemyColour == game.getColourOfStone(2, 3) ? 1 : 0) >= 0 ? 0 : (playerColour == game.getColourOfStone(3, 2) ? 1 : 0)) : 1) : (((enemyColour == game.getColourOfStone(3, 5) ? 1 : 0) >= 0 ? 3 : (enemyColour == game.getColourOfStone(4, 5) ? 1 : 0)) >= 0 ? ((enemyColour == game.getColourOfStone(6, 5) ? 1 : 0) >= 0 ? ((3 >= 0 ? (playerColour == game.getColourOfStone(4, 2) ? 1 : 0) : (1 >= 0 ? (-2 >= 0 ? (-5 - (enemyColour == game.getColourOfStone(5, 0) ? 1 : 0)) : ((enemyColour == game.getColourOfStone(6, 0) ? 1 : 0) >= 0 ? (playerColour == game.getColourOfStone(0, 3) ? 1 : 0) : ((((-4 >= 0 ? (playerColour == game.getColourOfStone(0, 4) ? 1 : 0) : 2) >= 0 ? (-1 >= 0 ? (playerColour == game.getColourOfStone(2, 5) ? 1 : 0) : -2) : ((playerColour == game.getColourOfStone(2, 1) ? 1 : 0) >= 0 ? (enemyColour == game.getColourOfStone(5, 5) ? 1 : 0) : (playerColour == game.getColourOfStone(0, 4) ? 1 : 0))) >= 0 ? (((enemyColour == game.getColourOfStone(3, 4) ? 1 : 0) >= 0 ? 0 : (playerColour == game.getColourOfStone(2, 2) ? 1 : 0)) >= 0 ? ((playerColour == game.getColourOfStone(4, 0) ? 1 : 0) >= 0 ? -1 : (enemyColour == game.getColourOfStone(6, 3) ? 1 : 0)) : ((playerColour == game.getColourOfStone(6, 5) ? 1 : 0) >= 0 ? ((enemyColour == game.getColourOfStone(3, 0) ? 1 : 0) >= 0 ? (playerColour == game.getColourOfStone(2, 1) ? 1 : 0) : (playerColour == game.getColourOfStone(1, 1) ? 1 : 0)) : -4)) : (((enemyColour == game.getColourOfStone(0, 0) ? 1 : 0) >= 0 ? (enemyColour == game.getColourOfStone(1, 0) ? 1 : 0) : 1) >= 0 ? (-4 >= 0 ? -3 : (enemyColour == game.getColourOfStone(2, 2) ? 1 : 0)) : ((playerColour == game.getColourOfStone(3, 1) ? 1 : 0) >= 0 ? (enemyColour == game.getColourOfStone(3, 0) ? 1 : 0) : (playerColour == game.getColourOfStone(1, 4) ? 1 : 0)))) >= 0 ? (playerColour == game.getColourOfStone(0, 5) ? 1 : 0) : (enemyColour == game.getColourOfStone(6, 5) ? 1 : 0)))) : 3)) >= 0 ? (((-2 >= 0 ? -5 : 0) >= 0 ? (-5 - (enemyColour == game.getColourOfStone(6, 0) ? 1 : 0)) : ((enemyColour == game.getColourOfStone(6, 0) ? 1 : 0) >= 0 ? ((playerColour == game.getColourOfStone(2, 5) ? 1 : 0) >= 0 ? (enemyColour == game.getColourOfStone(3, 2) ? 1 : 0) : (enemyColour == game.getColourOfStone(1, 3) ? 1 : 0)) : ((enemyColour == game.getColourOfStone(1, 4) ? 1 : 0) >= 0 ? (playerColour == game.getColourOfStone(0, 5) ? 1 : 0) : (enemyColour == game.getColourOfStone(6, 5) ? 1 : 0)))) >= 0 ? (playerColour == game.getColourOfStone(0, 5) ? 1 : 0) : (((playerColour == game.getColourOfStone(6, 3) ? 1 : 0) >= 0 ? 3 : (enemyColour == game.getColourOfStone(6, 0) ? 1 : 0)) >= 0 ? 3 : 3)) : -5) : (playerColour == game.getColourOfStone(6, 3) ? 1 : 0)) : ((-2 >= 0 ? -5 : (playerColour == game.getColourOfStone(3, 4) ? 1 : 0)) >= 0 ? ((enemyColour == game.getColourOfStone(1, 1) ? 1 : 0) >= 0 ? 0 : ((playerColour == game.getColourOfStone(4, 2) ? 1 : 0) >= 0 ? 3 : (enemyColour == game.getColourOfStone(3, 5) ? 1 : 0))) : (enemyColour == game.getColourOfStone(3, 3) ? 1 : 0)))) : 3)) : 3) : (enemyColour == game.getColourOfStone(4, 5) ? 1 : 0))) >= 0 ? (-5 >= 0 ? (playerColour == game.getColourOfStone(0, 5) ? 1 : 0) : 3) : -5)) : ((-2 >= 0 ? -5 : (playerColour == game.getColourOfStone(3, 4) ? 1 : 0)) >= 0 ? ((3 >= 0 ? ((-3 >= 0 ? (enemyColour == game.getColourOfStone(4, 2) ? 1 : 0) : -1) >= 0 ? (-5 >= 0 ? (enemyColour == game.getColourOfStone(6, 3) ? 1 : 0) : -3) : ((enemyColour == game.getColourOfStone(0, 5) ? 1 : 0) >= 0 ? (enemyColour == game.getColourOfStone(5, 1) ? 1 : 0) : -5)) : ((-3 >= 0 ? (playerColour == game.getColourOfStone(4, 2) ? 1 : 0) : (playerColour == game.getColourOfStone(0, 1) ? 1 : 0)) >= 0 ? ((playerColour == game.getColourOfStone(1, 1) ? 1 : 0) >= 0 ? (playerColour == game.getColourOfStone(1, 4) ? 1 : 0) : (playerColour == game.getColourOfStone(1, 0) ? 1 : 0)) : ((playerColour == game.getColourOfStone(2, 4) ? 1 : 0) >= 0 ? ((enemyColour == game.getColourOfStone(6, 5) ? 1 : 0) >= 0 ? (playerColour == game.getColourOfStone(0, 2) ? 1 : 0) : 0) : (enemyColour == game.getColourOfStone(1, 1) ? 1 : 0)))) >= 0 ? 0 : ((playerColour == game.getColourOfStone(4, 2) ? 1 : 0) >= 0 ? -5 : (enemyColour == game.getColourOfStone(3, 5) ? 1 : 0))) : (enemyColour == game.getColourOfStone(3, 3) ? 1 : 0))) >= 0 ? 3 : 3)) : (enemyColour == game.getColourOfStone(3, 3) ? 1 : 0)))) : 3)) : 3)) : (1 >= 0 ? ((-2 >= 0 ? -5 : 0) >= 0 ? (-5 - (enemyColour == game.getColourOfStone(6, 0) ? 1 : 0)) : ((playerColour == game.getColourOfStone(6, 0) ? 1 : 0) >= 0 ? (((playerColour == game.getColourOfStone(6, 0) ? 1 : 0) >= 0 ? (playerColour == game.getColourOfStone(5, 5) ? 1 : 0) : -5) >= 0 ? (enemyColour == game.getColourOfStone(3, 2) ? 1 : 0) : (enemyColour == game.getColourOfStone(1, 3) ? 1 : 0)) : (-5 >= 0 ? (playerColour == game.getColourOfStone(0, 5) ? 1 : 0) : (enemyColour == game.getColourOfStone(6, 5) ? 1 : 0)))) : 3)) != 0 ? (((enemyColour == game.getColourOfStone(2, 1) ? 1 : 0) >= 0 ? ((((enemyColour == game.getColourOfStone(1, 1) ? 1 : 0) * 0) >= 0 ? ((enemyColour == game.getColourOfStone(1, 1) ? 1 : 0) >= 0 ? (playerColour == game.getColourOfStone(0, 5) ? 1 : 0) : (enemyColour == game.getColourOfStone(5, 0) ? 1 : 0)) : (1 >= 0 ? (playerColour == game.getColourOfStone(2, 5) ? 1 : 0) : (enemyColour == game.getColourOfStone(4, 5) ? 1 : 0))) >= 0 ? (playerColour == game.getColourOfStone(6, 2) ? 1 : 0) : -5) : 1) >= 0 ? (((3 >= 0 ? ((enemyColour == game.getColourOfStone(1, 1) ? 1 : 0) >= 0 ? (playerColour == game.getColourOfStone(0, 5) ? 1 : 0) : (enemyColour == game.getColourOfStone(4, 5) ? 1 : 0)) : ((enemyColour == game.getColourOfStone(6, 0) ? 1 : 0) >= 0 ? ((playerColour == game.getColourOfStone(6, 0) ? 1 : 0) >= 0 ? (-5 - (enemyColour == game.getColourOfStone(5, 0) ? 1 : 0)) : ((enemyColour == game.getColourOfStone(6, 0) ? 1 : 0) >= 0 ? (playerColour == game.getColourOfStone(0, 3) ? 1 : 0) : (-5 >= 0 ? (playerColour == game.getColourOfStone(0, 5) ? 1 : 0) : (enemyColour == game.getColourOfStone(6, 5) ? 1 : 0)))) : 3)) >= 0 ? (-5 >= 0 ? (playerColour == game.getColourOfStone(0, 5) ? 1 : 0) : 3) : -5) >= 0 ? (playerColour == game.getColourOfStone(5, 0) ? 1 : 0) : (enemyColour == game.getColourOfStone(1, 1) ? 1 : 0)) : (-3 >= 0 ? (enemyColour == game.getColourOfStone(0, 5) ? 1 : 0) : (enemyColour == game.getColourOfStone(6, 2) ? 1 : 0))) / (3 >= 0 ? ((enemyColour == game.getColourOfStone(4, 0) ? 1 : 0) >= 0 ? (playerColour == game.getColourOfStone(0, 5) ? 1 : 0) : (((enemyColour == game.getColourOfStone(0, 5) ? 1 : 0) >= 0 ? 0 : (enemyColour == game.getColourOfStone(2, 3) ? 1 : 0)) >= 0 ? ((enemyColour == game.getColourOfStone(1, 1) ? 1 : 0) >= 0 ? 0 : (1 >= 0 ? (((-5 >= 0 ? (enemyColour == game.getColourOfStone(3, 2) ? 1 : 0) : ((enemyColour == game.getColourOfStone(2, 3) ? 1 : 0) >= 0 ? -1 : (playerColour == game.getColourOfStone(3, 2) ? 1 : 0))) >= 0 ? ((playerColour == game.getColourOfStone(0, 2) ? 1 : 0) >= 0 ? (enemyColour == game.getColourOfStone(2, 1) ? 1 : 0) : 0) : (((1 >= 0 ? 3 : (enemyColour == game.getColourOfStone(1, 4) ? 1 : 0)) >= 0 ? ((((enemyColour == game.getColourOfStone(3, 5) ? 1 : 0) >= 0 ? 3 : ((enemyColour == game.getColourOfStone(1, 1) ? 1 : 0) * 0)) >= 0 ? 3 : 3) >= 0 ? (enemyColour == game.getColourOfStone(5, 0) ? 1 : 0) : (enemyColour == game.getColourOfStone(1, 1) ? 1 : 0)) : 3) >= 0 ? (enemyColour == game.getColourOfStone(5, 0) ? 1 : 0) : ((enemyColour == game.getColourOfStone(4, 0) ? 1 : 0) >= 0 ? (playerColour == game.getColourOfStone(0, 5) ? 1 : 0) : ((3 >= 0 ? 0 : (enemyColour == game.getColourOfStone(2, 3) ? 1 : 0)) >= 0 ? ((enemyColour == game.getColourOfStone(1, 1) ? 1 : 0) >= 0 ? 0 : (1 >= 0 ? 3 : 3)) : 3)))) >= 0 ? (((enemyColour == game.getColourOfStone(3, 2) ? 1 : 0) >= 0 ? 0 : (playerColour == game.getColourOfStone(3, 2) ? 1 : 0)) >= 0 ? ((enemyColour == game.getColourOfStone(2, 3) ? 1 : 0) >= 0 ? 0 : -5) : 1) : (((enemyColour == game.getColourOfStone(3, 5) ? 1 : 0) >= 0 ? 3 : (enemyColour == game.getColourOfStone(4, 5) ? 1 : 0)) >= 0 ? ((enemyColour == game.getColourOfStone(6, 5) ? 1 : 0) >= 0 ? ((3 >= 0 ? (playerColour == game.getColourOfStone(4, 2) ? 1 : 0) : (1 >= 0 ? (-2 >= 0 ? (-5 - (enemyColour == game.getColourOfStone(5, 0) ? 1 : 0)) : ((enemyColour == game.getColourOfStone(6, 0) ? 1 : 0) >= 0 ? (playerColour == game.getColourOfStone(0, 3) ? 1 : 0) : (-5 >= 0 ? (playerColour == game.getColourOfStone(0, 5) ? 1 : 0) : (enemyColour == game.getColourOfStone(6, 5) ? 1 : 0)))) : 3)) >= 0 ? (((-2 >= 0 ? -5 : 0) >= 0 ? (-5 - (enemyColour == game.getColourOfStone(6, 0) ? 1 : 0)) : ((enemyColour == game.getColourOfStone(6, 0) ? 1 : 0) >= 0 ? ((playerColour == game.getColourOfStone(2, 5) ? 1 : 0) >= 0 ? (enemyColour == game.getColourOfStone(3, 2) ? 1 : 0) : (enemyColour == game.getColourOfStone(1, 3) ? 1 : 0)) : (-5 >= 0 ? (playerColour == game.getColourOfStone(0, 5) ? 1 : 0) : 3))) >= 0 ? (playerColour == game.getColourOfStone(0, 5) ? 1 : 0) : (((playerColour == game.getColourOfStone(1, 5) ? 1 : 0) >= 0 ? (playerColour == game.getColourOfStone(1, 5) ? 1 : 0) : -3) >= 0 ? (2 >= 0 ? (enemyColour == game.getColourOfStone(0, 5) ? 1 : 0) : (playerColour == game.getColourOfStone(3, 3) ? 1 : 0)) : ((playerColour == game.getColourOfStone(6, 0) ? 1 : 0) >= 0 ? (playerColour == game.getColourOfStone(5, 5) ? 1 : 0) : (enemyColour == game.getColourOfStone(0, 2) ? 1 : 0)))) : -5) : (playerColour == game.getColourOfStone(6, 3) ? 1 : 0)) : ((-2 >= 0 ? -5 : (playerColour == game.getColourOfStone(3, 4) ? 1 : 0)) >= 0 ? ((enemyColour == game.getColourOfStone(1, 1) ? 1 : 0) >= 0 ? 0 : ((((playerColour == game.getColourOfStone(6, 0) ? 1 : 0) >= 0 ? (-5 >= 0 ? (playerColour == game.getColourOfStone(0, 5) ? 1 : 0) : (enemyColour == game.getColourOfStone(6, 5) ? 1 : 0)) : ((enemyColour == game.getColourOfStone(6, 0) ? 1 : 0) >= 0 ? (playerColour == game.getColourOfStone(0, 3) ? 1 : 0) : (-5 >= 0 ? (playerColour == game.getColourOfStone(0, 5) ? 1 : 0) : (enemyColour == game.getColourOfStone(1, 3) ? 1 : 0)))) >= 0 ? ((enemyColour == game.getColourOfStone(1, 1) ? 1 : 0) * ((3 >= 0 ? ((enemyColour == game.getColourOfStone(1, 1) ? 1 : 0) >= 0 ? (playerColour == game.getColourOfStone(0, 5) ? 1 : 0) : (enemyColour == game.getColourOfStone(5, 0) ? 1 : 0)) : (1 >= 0 ? ((3 >= 0 ? 3 : (enemyColour == game.getColourOfStone(2, 3) ? 1 : 0)) >= 0 ? ((enemyColour == game.getColourOfStone(1, 1) ? 1 : 0) >= 0 ? 0 : (1 >= 0 ? (((playerColour == game.getColourOfStone(0, 5) ? 1 : 0) >= 0 ? ((playerColour == game.getColourOfStone(0, 2) ? 1 : 0) >= 0 ? (enemyColour == game.getColourOfStone(2, 1) ? 1 : 0) : 0) : (((1 >= 0 ? (-5 - (enemyColour == game.getColourOfStone(5, 0) ? 1 : 0)) : (playerColour == game.getColourOfStone(2, 5) ? 1 : 0)) >= 0 ? (((enemyColour == game.getColourOfStone(2, 3) ? 1 : 0) >= 0 ? 0 : (playerColour == game.getColourOfStone(3, 2) ? 1 : 0)) >= 0 ? (enemyColour == game.getColourOfStone(5, 0) ? 1 : 0) : (enemyColour == game.getColourOfStone(1, 1) ? 1 : 0)) : 3) >= 0 ? (enemyColour == game.getColourOfStone(5, 0) ? 1 : 0) : 0)) >= 0 ? (((enemyColour == game.getColourOfStone(3, 2) ? 1 : 0) >= 0 ? 0 : (playerColour == game.getColourOfStone(3, 2) ? 1 : 0)) >= 0 ? ((enemyColour == game.getColourOfStone(2, 3) ? 1 : 0) >= 0 ? 0 : (playerColour == game.getColourOfStone(3, 2) ? 1 : 0)) : 1) : (((enemyColour == game.getColourOfStone(3, 5) ? 1 : 0) >= 0 ? 3 : (enemyColour == game.getColourOfStone(4, 5) ? 1 : 0)) >= 0 ? ((enemyColour == game.getColourOfStone(6, 5) ? 1 : 0) >= 0 ? ((3 >= 0 ? (playerColour == game.getColourOfStone(4, 2) ? 1 : 0) : (1 >= 0 ? (-2 >= 0 ? (-5 - (enemyColour == game.getColourOfStone(5, 0) ? 1 : 0)) : ((enemyColour == game.getColourOfStone(6, 0) ? 1 : 0) >= 0 ? (playerColour == game.getColourOfStone(0, 3) ? 1 : 0) : ((((-4 >= 0 ? (playerColour == game.getColourOfStone(0, 4) ? 1 : 0) : 2) >= 0 ? (-1 >= 0 ? (playerColour == game.getColourOfStone(2, 5) ? 1 : 0) : -2) : ((playerColour == game.getColourOfStone(2, 1) ? 1 : 0) >= 0 ? (enemyColour == game.getColourOfStone(5, 5) ? 1 : 0) : (playerColour == game.getColourOfStone(0, 4) ? 1 : 0))) >= 0 ? (((enemyColour == game.getColourOfStone(3, 4) ? 1 : 0) >= 0 ? 0 : (playerColour == game.getColourOfStone(2, 2) ? 1 : 0)) >= 0 ? ((playerColour == game.getColourOfStone(4, 0) ? 1 : 0) >= 0 ? -1 : (enemyColour == game.getColourOfStone(6, 3) ? 1 : 0)) : ((playerColour == game.getColourOfStone(6, 5) ? 1 : 0) >= 0 ? ((enemyColour == game.getColourOfStone(3, 0) ? 1 : 0) >= 0 ? (playerColour == game.getColourOfStone(2, 1) ? 1 : 0) : (playerColour == game.getColourOfStone(1, 1) ? 1 : 0)) : -4)) : (((enemyColour == game.getColourOfStone(0, 0) ? 1 : 0) >= 0 ? (enemyColour == game.getColourOfStone(1, 0) ? 1 : 0) : 1) >= 0 ? (-4 >= 0 ? -3 : (enemyColour == game.getColourOfStone(2, 2) ? 1 : 0)) : ((playerColour == game.getColourOfStone(3, 1) ? 1 : 0) >= 0 ? (enemyColour == game.getColourOfStone(3, 0) ? 1 : 0) : (playerColour == game.getColourOfStone(1, 4) ? 1 : 0)))) >= 0 ? (playerColour == game.getColourOfStone(0, 5) ? 1 : 0) : (enemyColour == game.getColourOfStone(6, 5) ? 1 : 0)))) : 3)) >= 0 ? (((-2 >= 0 ? -5 : 0) >= 0 ? (-5 - (enemyColour == game.getColourOfStone(6, 0) ? 1 : 0)) : ((enemyColour == game.getColourOfStone(6, 0) ? 1 : 0) >= 0 ? ((playerColour == game.getColourOfStone(2, 5) ? 1 : 0) >= 0 ? (enemyColour == game.getColourOfStone(3, 2) ? 1 : 0) : (enemyColour == game.getColourOfStone(1, 3) ? 1 : 0)) : ((enemyColour == game.getColourOfStone(1, 4) ? 1 : 0) >= 0 ? (playerColour == game.getColourOfStone(0, 5) ? 1 : 0) : (enemyColour == game.getColourOfStone(6, 5) ? 1 : 0)))) >= 0 ? (playerColour == game.getColourOfStone(0, 5) ? 1 : 0) : (((playerColour == game.getColourOfStone(6, 3) ? 1 : 0) >= 0 ? 3 : (enemyColour == game.getColourOfStone(6, 0) ? 1 : 0)) >= 0 ? 3 : 3)) : -5) : (playerColour == game.getColourOfStone(6, 3) ? 1 : 0)) : ((-2 >= 0 ? -5 : (playerColour == game.getColourOfStone(3, 4) ? 1 : 0)) >= 0 ? ((enemyColour == game.getColourOfStone(1, 1) ? 1 : 0) >= 0 ? 0 : ((playerColour == game.getColourOfStone(4, 2) ? 1 : 0) >= 0 ? 3 : (enemyColour == game.getColourOfStone(3, 5) ? 1 : 0))) : (enemyColour == game.getColourOfStone(3, 3) ? 1 : 0)))) : 3)) : 3) : (enemyColour == game.getColourOfStone(4, 5) ? 1 : 0))) >= 0 ? (-5 >= 0 ? (playerColour == game.getColourOfStone(0, 5) ? 1 : 0) : 3) : -5)) : ((-2 >= 0 ? -5 : (playerColour == game.getColourOfStone(3, 4) ? 1 : 0)) >= 0 ? ((3 >= 0 ? ((-3 >= 0 ? (enemyColour == game.getColourOfStone(4, 2) ? 1 : 0) : -1) >= 0 ? (-5 >= 0 ? (enemyColour == game.getColourOfStone(6, 3) ? 1 : 0) : -3) : ((enemyColour == game.getColourOfStone(0, 5) ? 1 : 0) >= 0 ? (enemyColour == game.getColourOfStone(5, 1) ? 1 : 0) : -5)) : ((-3 >= 0 ? (playerColour == game.getColourOfStone(4, 2) ? 1 : 0) : (playerColour == game.getColourOfStone(0, 1) ? 1 : 0)) >= 0 ? ((playerColour == game.getColourOfStone(1, 1) ? 1 : 0) >= 0 ? (playerColour == game.getColourOfStone(1, 4) ? 1 : 0) : (playerColour == game.getColourOfStone(1, 0) ? 1 : 0)) : ((playerColour == game.getColourOfStone(2, 4) ? 1 : 0) >= 0 ? ((enemyColour == game.getColourOfStone(6, 5) ? 1 : 0) >= 0 ? (playerColour == game.getColourOfStone(0, 2) ? 1 : 0) : 0) : (enemyColour == game.getColourOfStone(1, 1) ? 1 : 0)))) >= 0 ? 0 : ((playerColour == game.getColourOfStone(4, 2) ? 1 : 0) >= 0 ? -5 : (enemyColour == game.getColourOfStone(3, 5) ? 1 : 0))) : (enemyColour == game.getColourOfStone(3, 3) ? 1 : 0))) >= 0 ? 3 : 3)) : (enemyColour == game.getColourOfStone(3, 3) ? 1 : 0)))) : 3)) : 3)) : (1 >= 0 ? ((-2 >= 0 ? -5 : 0) >= 0 ? (-5 - (enemyColour == game.getColourOfStone(6, 0) ? 1 : 0)) : ((playerColour == game.getColourOfStone(6, 0) ? 1 : 0) >= 0 ? (((playerColour == game.getColourOfStone(6, 0) ? 1 : 0) >= 0 ? (playerColour == game.getColourOfStone(5, 5) ? 1 : 0) : -5) >= 0 ? (enemyColour == game.getColourOfStone(3, 2) ? 1 : 0) : (enemyColour == game.getColourOfStone(1, 3) ? 1 : 0)) : (-5 >= 0 ? (playerColour == game.getColourOfStone(0, 5) ? 1 : 0) : (enemyColour == game.getColourOfStone(6, 5) ? 1 : 0)))) : 3)) : 1) >= 0 ? (playerColour == game.getColourOfStone(5, 5) ? 1 : 0) : (enemyColour == game.getColourOfStone(0, 2) ? 1 : 0)))) : -5) : (playerColour == game.getColourOfStone(6, 3) ? 1 : 0)) : ((-2 >= 0 ? -5 : (playerColour == game.getColourOfStone(3, 4) ? 1 : 0)) >= 0 ? (0 >= 0 ? -2 : (enemyColour == game.getColourOfStone(5, 3) ? 1 : 0)) : (enemyColour == game.getColourOfStone(3, 3) ? 1 : 0)))) : 3)) : 3))) : (enemyColour == game.getColourOfStone(6, 5) ? 1 : 0)))) : (enemyColour == game.getColourOfStone(3, 3) ? 1 : 0)))) >= 0 ? 0 : (enemyColour == game.getColourOfStone(1, 1) ? 1 : 0)) : (0 >= 0 ? 3 : (enemyColour == game.getColourOfStone(3, 3) ? 1 : 0)))) - (playerColour == game.getColourOfStone(5, 0) ? 1 : 0));
,    }
"
a12f1b40-1037-49ca-8a3a-6cc46fb26c88,4d5dd35a-0966-4747-9d44-a8f2e25c901d,SLASH,"PUBLIC,STATIC,void,main,LPAREN,String,LBRACKET,RBRACKET,args,RPAREN,LBRACE,int,LBRACKET,RBRACKET,data,EQ,LBRACE,5,COMMA,9,COMMA,13,COMMA,21,COMMA,4,RBRACE,SEMI,double,total,EQ,0,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,data,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,total,PLUSEQ,data,LBRACKET,i,RBRACKET,SEMI,System,DOT,out,DOT,println,LPAREN,data,LBRACKET,i,RBRACKET,RPAREN,SEMI,RBRACE,System,DOT,out,DOT,println,LPAREN,""Total: "",PLUS,total,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""Banyak Data: "",PLUS,data,DOT,length,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""Rataan: "",PLUS,total,<MASK>,data,DOT,length,RPAREN,SEMI,RBRACE","	public static void main(String[] args) {
,		int[] data = {5,9,13,21,4};
,		double total = 0;
,		
,		for (int i = 0; i < data.length; i++) {
,			total += data[i];
,			System.out.println(data[i]);
,		}
,		
,		System.out.println(""Total: "" + total);
,		System.out.println(""Banyak Data: "" + data.length);
,		System.out.println(""Rataan: "" + total<MASK>data.length);
,	}
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,8e7fb59e-eb37-45d2-b864-109d12f65c83,LT,"PUBLIC,void,setTimeout,LPAREN,int,newTimeout,RPAREN,THROWS,IllegalArgumentException,LBRACE,IF,LPAREN,timeout,<MASK>,0,RPAREN,LBRACE,THROW,NEW,IllegalArgumentException,LPAREN,""Illegal timeout for the Property"",RPAREN,SEMI,RBRACE,this,DOT,timeout,EQ,newTimeout,SEMI,RBRACE","  public void setTimeout(int newTimeout) throws IllegalArgumentException {
,    if (timeout <MASK> 0) {
,      throw new IllegalArgumentException(""Illegal timeout for the Property"");
,    }
,
,    this.timeout = newTimeout;
,  }
"
113c5414-6c55-466b-b879-a350ab6e0ca2,3c44c41a-0421-472c-a785-07f8b1580e30,EQ,"PUBLIC,void,setDiscovered,LPAREN,boolean,discovered,RPAREN,LBRACE,this,DOT,discovered,<MASK>,discovered,SEMI,RBRACE","	public void setDiscovered(boolean discovered) {
,		this.discovered <MASK> discovered;
,	}
"
ad0a2aad-9ad8-443c-832f-88b9f64460ed,49c16190-546e-4a3c-bf6c-c5d7eef1b4f1,EQ,"PUBLIC,STATIC,SYNCHRONIZED,void,setReport,LPAREN,boolean,report,RPAREN,LBRACE,m_report,<MASK>,report,SEMI,SmartDashboard,DOT,putBoolean,LPAREN,""PiReport"",COMMA,m_report,RPAREN,SEMI,RBRACE","        public static synchronized void setReport(boolean report) {
,            m_report <MASK> report;
,            SmartDashboard.putBoolean(""PiReport"", m_report);
,        }
"
c694737b-29b6-48d5-90c3-b6e0b6d64d88,09679027-70c9-47e3-9bd1-99c4d07a43d6,PERCENT,"PROTECTED,int,getIndexFromWhack,LPAREN,int,whack,COMMA,int,row,RPAREN,LBRACE,int,centerRow,EQ,getCenterRow,LPAREN,RPAREN,SEMI,int,adjustment,EQ,centerRow,<MASK>,2,SEMI,int,col,EQ,whack,SUB,LPAREN,row,PLUS,adjustment,RPAREN,SLASH,2,SEMI,RETURN,getIndex,LPAREN,row,COMMA,col,RPAREN,SEMI,RBRACE","    protected int getIndexFromWhack(int whack, int row) {
,        int centerRow = getCenterRow();
,        int adjustment = centerRow <MASK> 2;
,        int col = whack - (row + adjustment) / 2;
,        return getIndex(row, col);
,    }
"
09478113-8f39-4146-870b-8037a6932443,bd1686a2-36ec-4a1c-9244-42b18ef41369,EQEQ,"PRIVATE,void,OP_ORA,LPAREN,RPAREN,LBRACE,int,iMem,EQ,readOperand,LPAREN,RPAREN,SEMI,int,iVal,EQ,getA,LPAREN,RPAREN,BAR,iMem,SEMI,setNFlag,LPAREN,getBit,LPAREN,iVal,COMMA,7,RPAREN,RPAREN,SEMI,setZFlag,LPAREN,iVal,<MASK>,0,RPAREN,SEMI,setA,LPAREN,iVal,RPAREN,SEMI,RBRACE","    private void OP_ORA()
,    {
,        int iMem = readOperand();
,        int iVal = getA() | iMem;
,
,        setNFlag(getBit(iVal, 7));
,        setZFlag(iVal <MASK> 0);
,
,        setA(iVal);
,    }
"
ac91e7bc-1829-49d0-be4e-557b7225bd1c,dfe584cf-4169-4958-a52b-ebb794b96a51,SLASH,"PUBLIC,STATIC,int,calculatePossibleDataSpace,LPAREN,BufferedImage,bi,COMMA,String,key,RPAREN,LBRACE,int,h,EQ,bi,DOT,getHeight,LPAREN,RPAREN,SEMI,int,w,EQ,bi,DOT,getWidth,LPAREN,RPAREN,SEMI,RETURN,LPAREN,w,STAR,h,STAR,3,RPAREN,<MASK>,8,SEMI,RBRACE","    public static int calculatePossibleDataSpace(BufferedImage bi, String key) {
,        int h = bi.getHeight();
,        int w = bi.getWidth();
,
,        <MASK>/ In each pixel we have 3 bytes (R, G and B) in which we can store one bit of useful data at LSB
,        // So we can store w * h * 3 / 8 bytes.
,        return (w * h * 3) / 8;      
,    }
"
92951106-a87f-4e0c-9019-4852bf22d1be,8231729b-1f58-4f17-a34e-15589c038523,PLUS,"PRIVATE,boolean,isMaxHeap,LPAREN,int,k,RPAREN,LBRACE,IF,LPAREN,k,GT,size,RPAREN,RETURN,true,SEMI,int,left,EQ,2,STAR,k,COMMA,right,EQ,2,STAR,k,<MASK>,1,SEMI,IF,LPAREN,left,LTEQ,size,AMPAMP,less,LPAREN,k,COMMA,left,RPAREN,RPAREN,RETURN,false,SEMI,IF,LPAREN,right,LTEQ,size,AMPAMP,less,LPAREN,k,COMMA,right,RPAREN,RPAREN,RETURN,false,SEMI,RETURN,isMaxHeap,LPAREN,left,RPAREN,AMPAMP,isMaxHeap,LPAREN,right,RPAREN,SEMI,RBRACE","    private boolean isMaxHeap(int k) {
,        if (k > size) return true;
,        int left = 2*k, right = 2*k <MASK> 1;
,        if (left  <= size && less(k, left))  return false;
,        if (right <= size && less(k, right)) return false;
,        return isMaxHeap(left) && isMaxHeap(right);
,    }
"
79c4654b-aafa-4bb5-8623-742a2af23063,1b4916c1-7fbf-424b-88a5-029d3837aa34,PERCENT,"PUBLIC,int,LBRACKET,RBRACKET,toBinaryArray,LPAREN,int,combination,RPAREN,LBRACE,int,LBRACKET,RBRACKET,bitArray,EQ,NEW,int,LBRACKET,periodCount,RBRACKET,SEMI,FOR,LPAREN,int,i,EQ,periodCount,SUB,1,SEMI,i,GTEQ,0,SEMI,i,SUBSUB,RPAREN,LBRACE,bitArray,LBRACKET,i,RBRACKET,EQ,combination,<MASK>,2,SEMI,combination,SLASHEQ,2,SEMI,RBRACE,RETURN,bitArray,SEMI,RBRACE","	public int[] toBinaryArray(int combination)
,	{
,		int[] bitArray = new int[periodCount];
,		
,		for(int i=periodCount-1;i>=0;i--)
,		{
,			bitArray[i] = combination<MASK>2;
,			combination/=2;
,		}
,		return bitArray;
,		//return  Arrays.toString(bitArray);
,		
,		/*StringBuilder bitString = new StringBuilder(Integer.toBinaryString(combination)); 
,		
,		while(bitString.length()<periodCount)
,		{
,			bitString = new StringBuilder(""0"").append(bitString);
,		}
,		
,		return bitString.toString();*/
,	}
"
57cc1a58-8f23-49b4-bcf8-6b2866c3102b,ee9191df-45e8-4b13-afc7-8d4c06881761,GT,"PUBLIC,void,reverseInfo,LPAREN,String,track_ID,RPAREN,LBRACE,TRY,LBRACE,connection,EQ,NEW,DatabaseConnection,LPAREN,RPAREN,DOT,getConnection,LPAREN,RPAREN,SEMI,String,artistId_query,EQ,""SELECT artistid FROM trackinfo WHERE trackid = ?"",SEMI,PreparedStatement,prepareStatement,EQ,connection,DOT,prepareStatement,LPAREN,artistId_query,RPAREN,SEMI,prepareStatement,DOT,setString,LPAREN,1,COMMA,track_ID,RPAREN,SEMI,ResultSet,executeQuery,EQ,prepareStatement,DOT,executeQuery,LPAREN,RPAREN,SEMI,IF,LPAREN,executeQuery,DOT,next,LPAREN,RPAREN,RPAREN,LBRACE,String,artist_Id,EQ,executeQuery,DOT,getString,LPAREN,""artistid"",RPAREN,SEMI,String,artist_Query,EQ,""DELETE FROM artistinfo WHERE artistid = ?"",SEMI,PreparedStatement,prepareStatement1,EQ,connection,DOT,prepareStatement,LPAREN,artist_Query,RPAREN,SEMI,prepareStatement1,DOT,setString,LPAREN,1,COMMA,artist_Id,RPAREN,SEMI,int,executeUpdate,EQ,prepareStatement1,DOT,executeUpdate,LPAREN,RPAREN,SEMI,IF,LPAREN,executeUpdate,<MASK>,0,RPAREN,LBRACE,String,reverse_Query,EQ,""DELETE FROM trackinfo WHERE trackid = ?"",SEMI,PreparedStatement,prepareStatement2,EQ,connection,DOT,prepareStatement,LPAREN,reverse_Query,RPAREN,SEMI,prepareStatement2,DOT,setString,LPAREN,1,COMMA,track_ID,RPAREN,SEMI,prepareStatement2,DOT,executeUpdate,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,CATCH,LPAREN,SQLException,ex,RPAREN,LBRACE,Logger,DOT,getLogger,LPAREN,TrackInfo,DOT,CLASS,DOT,getName,LPAREN,RPAREN,RPAREN,DOT,log,LPAREN,Level,DOT,SEVERE,COMMA,null,COMMA,ex,RPAREN,SEMI,RBRACE,RBRACE","    public void reverseInfo(String track_ID) {
,        try {
,            connection = new DatabaseConnection().getConnection();
,            String artistId_query = ""SELECT artistid FROM trackinfo WHERE trackid = ?"";
,            PreparedStatement prepareStatement = connection.prepareStatement(artistId_query);
,            prepareStatement.setString(1, track_ID);
,            ResultSet executeQuery = prepareStatement.executeQuery();
,            if (executeQuery.next()) {
,                String artist_Id = executeQuery.getString(""artistid"");
,                String artist_Query = ""DELETE FROM artistinfo WHERE artistid = ?"";
,                PreparedStatement prepareStatement1 = connection.prepareStatement(artist_Query);
,                prepareStatement1.setString(1, artist_Id);
,                int executeUpdate = prepareStatement1.executeUpdate();
,                if (executeUpdate <MASK> 0) {
,                    String reverse_Query = ""DELETE FROM trackinfo WHERE trackid = ?"";
,                    PreparedStatement prepareStatement2 = connection.prepareStatement(reverse_Query);
,                    prepareStatement2.setString(1, track_ID);
,                    prepareStatement2.executeUpdate();
,                }
,            }
,        } catch (SQLException ex) {
,            Logger.getLogger(TrackInfo.class.getName()).log(Level.SEVERE, null, ex);
,        }
,
,
,    }
"
79c4654b-aafa-4bb5-8623-742a2af23063,1597a706-ecba-4164-a934-bc8a64537fd3,PERCENT,"PUBLIC,void,solve,LPAREN,RPAREN,LBRACE,long,start,COMMA,end,SEMI,start,EQ,System,DOT,currentTimeMillis,LPAREN,RPAREN,SEMI,writeToExcel,EQ,singleRun,SEMI,outputToFile,EQ,singleRun,SEMI,generateAggregatedReport,EQ,BANG,singleRun,SEMI,IF,LPAREN,generateAggregatedReport,RPAREN,generateAggregatedReport,LPAREN,RPAREN,SEMI,IF,LPAREN,writeToExcel,RPAREN,LBRACE,ProblemInstance,problemInstance,EQ,createProblemInstance,LPAREN,singleInputFileName,COMMA,singleOutputFileName,RPAREN,SEMI,IF,LPAREN,printProblemInstance,RPAREN,problemInstance,DOT,print,LPAREN,RPAREN,SEMI,IF,LPAREN,showViz,RPAREN,visualiser,EQ,NEW,Visualiser,LPAREN,""original/"",PLUS,singleInputFileName,DOT,substring,LPAREN,0,COMMA,singleInputFileName,DOT,length,LPAREN,RPAREN,SUB,4,RPAREN,COMMA,problemInstance,RPAREN,SEMI,GeneticAlgorithm,ga,SEMI,IF,LPAREN,BANG,onTest,RPAREN,ga,EQ,NEW,Scheme6,LPAREN,problemInstance,RPAREN,SEMI,ELSE,ga,EQ,NEW,MutationTest,LPAREN,problemInstance,RPAREN,SEMI,Solver,DOT,exportToCsv,DOT,init,LPAREN,ga,DOT,getNumberOfGeeration,LPAREN,RPAREN,PLUS,1,RPAREN,SEMI,ga,DOT,run,LPAREN,RPAREN,SEMI,exportToCsv,DOT,createCSV,LPAREN,RPAREN,SEMI,RBRACE,output,DOT,close,LPAREN,RPAREN,SEMI,end,EQ,System,DOT,currentTimeMillis,LPAREN,RPAREN,SEMI,long,duration,EQ,LPAREN,end,SUB,start,RPAREN,SLASH,1000,SEMI,long,minute,EQ,duration,SLASH,60,SEMI,long,seconds,EQ,duration,<MASK>,60,SEMI,System,DOT,out,DOT,println,LPAREN,""ELAPSED TIME : "",PLUS,minute,PLUS,"" minutes "",PLUS,seconds,PLUS,"" seconds"",RPAREN,SEMI,RBRACE","	public void solve() 
,	{
,		// singlerun = true when excel needs to be generated or output checked for testing
,		// sigleRun = false when aggregated report is to be generated
,		
,		
,		long start,end;
,		
,		start = System.currentTimeMillis();
,		
,		writeToExcel = singleRun;
,		outputToFile = singleRun;
,		generateAggregatedReport = !singleRun;
,		
,		
,		if(generateAggregatedReport)
,			generateAggregatedReport();
,		
,		//single run
,		if(writeToExcel) 
,		{
,			ProblemInstance problemInstance = createProblemInstance(singleInputFileName,singleOutputFileName);
,
,			if(printProblemInstance)
,				problemInstance.print();
,			
,			if(showViz)
,				visualiser = new Visualiser(""original/""+singleInputFileName.substring(0, singleInputFileName.length()-4),problemInstance);
,
,			GeneticAlgorithm ga;
,			if(!onTest)
,				ga = new Scheme6(problemInstance);		
,			else
,				ga = new MutationTest(problemInstance);
,			Solver.exportToCsv.init(ga.getNumberOfGeeration()+1);	
,			ga.run();
,			exportToCsv.createCSV();
,		}
,		
,		//System.out.println(""mutateTwoDifferentRouteBySwapping Failed : ""+mutateRouteOfTwoDiefferentFailed);
,		output.close();
,		
,		end= System.currentTimeMillis();
,		
,		long duration = (end-start) / 1000;
,		long minute =  duration/ 60;
,		long seconds = duration <MASK> 60;
,		System.out.println(""ELAPSED TIME : "" + minute+ "" minutes ""+seconds+"" seconds"");
,	}
"
7fe8faa8-6d71-4d77-acc6-fe9b7d23dda6,aa697148-fa65-4b98-af3b-81d86d5ac821,GT,"PRIVATE,STATIC,BigInteger,getFactorial,LPAREN,int,n,RPAREN,LBRACE,BigInteger,fact,EQ,BigInteger,DOT,ONE,SEMI,FOR,LPAREN,int,i,EQ,n,SEMI,i,<MASK>,1,SEMI,i,SUBSUB,RPAREN,LBRACE,fact,EQ,fact,DOT,multiply,LPAREN,NEW,BigInteger,LPAREN,Integer,DOT,toString,LPAREN,i,RPAREN,RPAREN,RPAREN,SEMI,RBRACE,RETURN,fact,SEMI,RBRACE","  private static BigInteger getFactorial (int n) {
,    BigInteger fact = BigInteger.ONE;
,    for (int i = n; i <MASK> 1; i--) {
,      fact = fact.multiply (new BigInteger (Integer.toString (i)));
,    }
,    return fact;
,  }
"
3913c395-db09-4ac4-8282-49a81b6a21f4,9ac42f08-0d89-4d11-8be7-00c76c239fe0,BANGEQ,"PROTECTED,void,navigateTo,LPAREN,double,targetX,COMMA,double,targetY,RPAREN,LBRACE,TRY,LBRACE,int,tarX,EQ,LPAREN,int,RPAREN,targetX,SLASH,32,SEMI,int,tarY,EQ,LPAREN,int,RPAREN,targetY,SLASH,32,SEMI,rpath,EQ,pathfinder,DOT,findPath,LPAREN,NEW,Point,LPAREN,tileX,COMMA,tileY,RPAREN,COMMA,NEW,Point,LPAREN,tarX,COMMA,tarY,RPAREN,RPAREN,SEMI,IF,LPAREN,rpath,<MASK>,null,RPAREN,LBRACE,dest,EQ,NEW,Point2D,DOT,Double,LPAREN,targetX,COMMA,targetY,RPAREN,SEMI,path,EQ,preparePath,LPAREN,rpath,COMMA,dest,RPAREN,SEMI,state,EQ,NAVIGATING,SEMI,nextWaypoint,LPAREN,RPAREN,SEMI,RBRACE,ELSE,LBRACE,state,EQ,IDLE,SEMI,dest,EQ,null,SEMI,RBRACE,RBRACE,CATCH,LPAREN,Exception,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,RBRACE","	protected void navigateTo(double targetX, double targetY) {
,		try {
,			int tarX = (int)targetX/32;
,			int tarY = (int)targetY/32;
,			
,			rpath = pathfinder.findPath(new Point(tileX, tileY), new Point(tarX, tarY));
,			
,			if (rpath <MASK> null) {
,				dest = new Point2D.Double(targetX, targetY);
,				path = preparePath(rpath, dest);
,				state = NAVIGATING;
,				nextWaypoint();
,			} else {
,				state = IDLE;
,				dest = null;
,			}
,		} catch (Exception e) {
,			e.printStackTrace();
,		}
,	}
"
2576a407-9fd6-4f86-aee0-46707642b564,2e236c61-be93-4f20-b961-e8c1cb91df97,GT,"PROTECTED,void,deletarCrlv,LPAREN,RPAREN,THROWS,ClassNotFoundException,COMMA,SQLException,LBRACE,int,index,EQ,gCrlv,DOT,getTableGerenciarCrlvs,LPAREN,RPAREN,DOT,getSelectionModel,LPAREN,RPAREN,DOT,getLeadSelectionIndex,LPAREN,RPAREN,SEMI,IF,LPAREN,index,<MASK>,SUB,1,RPAREN,LBRACE,int,resp,EQ,JOptionPane,DOT,showConfirmDialog,LPAREN,mw,COMMA,""Deseja realmente excluir o documento selecionado?"",RPAREN,SEMI,IF,LPAREN,resp,EQEQ,0,RPAREN,LBRACE,ModelCRLV,tempCrlv,EQ,gCrlv,DOT,getCrlv,LPAREN,RPAREN,DOT,get,LPAREN,index,RPAREN,SEMI,DAOCrlv,daoCrlv,EQ,NEW,DAOCrlv,LPAREN,RPAREN,SEMI,int,result,EQ,daoCrlv,DOT,destroy,LPAREN,tempCrlv,DOT,getIdCrlv,LPAREN,RPAREN,RPAREN,SEMI,IF,LPAREN,result,EQEQ,1,RPAREN,LBRACE,JOptionPane,DOT,showMessageDialog,LPAREN,mw,COMMA,""Registro excluido com sucesso!"",RPAREN,SEMI,gCrlv,DOT,getCrlv,LPAREN,RPAREN,DOT,remove,LPAREN,tempCrlv,RPAREN,SEMI,RBRACE,ELSE,LBRACE,JOptionPane,DOT,showMessageDialog,LPAREN,mw,COMMA,""Erro ao excluir registro!"",RPAREN,SEMI,RBRACE,RBRACE,RBRACE,ELSE,LBRACE,JOptionPane,DOT,showMessageDialog,LPAREN,mw,COMMA,""Selecione um documento para ser excluido!"",RPAREN,SEMI,RBRACE,RBRACE","    protected void deletarCrlv() throws ClassNotFoundException, SQLException{
,        int index = gCrlv.getTableGerenciarCrlvs().getSelectionModel().getLeadSelectionIndex();
,        if(index <MASK> -1){
,            int resp = JOptionPane.showConfirmDialog(mw, ""Deseja realmente excluir o documento selecionado?"");
,            if(resp == 0){
,                ModelCRLV tempCrlv = gCrlv.getCrlv().get(index);
,                DAOCrlv daoCrlv = new DAOCrlv();
,                int result = daoCrlv.destroy(tempCrlv.getIdCrlv());
,                
,                if(result == 1){
,                    JOptionPane.showMessageDialog(mw, ""Registro excluido com sucesso!"");
,                    gCrlv.getCrlv().remove(tempCrlv);
,                }
,                else {
,                    JOptionPane.showMessageDialog(mw, ""Erro ao excluir registro!"");
,                }
,            }
,        }
,        else{
,            JOptionPane.showMessageDialog(mw, ""Selecione um documento para ser excluido!"");
,        }
,    }
"
41539c05-83ff-49b8-a839-9292483dddc3,bc0e2c28-aa18-487f-812a-eab260ad12f1,PERCENT,"PUBLIC,void,paintFrameEndLevel,LPAREN,RPAREN,LBRACE,displayScore,LPAREN,RPAREN,SEMI,drawString,LPAREN,""Stage complete!"",COMMA,pfWidth,LPAREN,RPAREN,SLASH,2,COMMA,pfHeight,LPAREN,RPAREN,SLASH,3,COMMA,0,RPAREN,SEMI,IF,LPAREN,stage,<MASK>,2,EQEQ,1,AMPAMP,stage,LT,10,RPAREN,LBRACE,drawString,LPAREN,guns,LBRACKET,LPAREN,stage,PLUS,1,RPAREN,SLASH,2,RBRACKET,DOT,toUpperCase,LPAREN,RPAREN,PLUS,"" Unlocked!"",COMMA,pfWidth,LPAREN,RPAREN,SLASH,2,COMMA,pfHeight,LPAREN,RPAREN,SLASH,2,COMMA,0,RPAREN,SEMI,RBRACE,RBRACE","	public void paintFrameEndLevel() {
,		displayScore();
,		drawString(""Stage complete!"", pfWidth() / 2, pfHeight() / 3, 0);
,		if (stage <MASK> 2 == 1 && stage < 10) {
,			drawString(guns[(stage + 1) / 2].toUpperCase() + "" Unlocked!"",
,					pfWidth() / 2, pfHeight() / 2, 0);
,		}
,	}
"
ad0a2aad-9ad8-443c-832f-88b9f64460ed,de3dd6fb-509f-4506-a490-37efe2a1663c,EQ,"PUBLIC,void,setHigh,LPAREN,RPAREN,LBRACE,solenoid,DOT,set,LPAREN,DoubleSolenoid,DOT,Value,DOT,kReverse,RPAREN,SEMI,CommandBase,DOT,driveTrain,DOT,highGear,<MASK>,true,SEMI,RBRACE","    public void setHigh() {
,        solenoid.set(DoubleSolenoid.Value.kReverse);
,        CommandBase.driveTrain.highGear <MASK> true;
,    }
"
a976df20-c97b-4d57-87ae-cd8f116ed755,88748e4b-1fd7-4c50-98a6-8fc3541f2ade,PLUS,"PUBLIC,int,captureCount,LPAREN,RPAREN,LBRACE,RETURN,LPAREN,int,RPAREN,sqrt,LPAREN,pow,LPAREN,rowEnd,SUB,rowStart,COMMA,2,RPAREN,<MASK>,pow,LPAREN,columnEnd,SUB,columnStart,COMMA,2,RPAREN,RPAREN,SEMI,RBRACE","	public int captureCount() {
,		return (int)sqrt( pow( rowEnd - rowStart, 2 ) <MASK> pow( columnEnd - columnStart, 2 ) );
,	}
"
46d8f694-b1f9-40ac-a94e-e9d7b8a315c4,cf5cafb1-0a09-4f07-b67b-f8b3dee6177d,GT,"PUBLIC,int,height,LPAREN,Node,node,RPAREN,LBRACE,IF,LPAREN,node,EQEQ,null,RPAREN,RETURN,0,SEMI,int,hLeft,EQ,height,LPAREN,node,DOT,left,RPAREN,SEMI,int,hRight,EQ,height,LPAREN,node,DOT,right,RPAREN,SEMI,RETURN,LPAREN,hLeft,<MASK>,hRight,RPAREN,QUES,LPAREN,hLeft,PLUS,1,RPAREN,COLON,LPAREN,hRight,PLUS,1,RPAREN,SEMI,RBRACE","	public int height(Node node){
,		if(node == null)
,			return 0;
,		
,		int hLeft = height(node.left);
,		int hRight = height(node.right);
,		return (hLeft <MASK> hRight) ? (hLeft + 1) : (hRight + 1);
,	}
"
e64c1d9d-97c7-42df-873b-ba28e2c45ccc,c63f7b45-cc36-46db-b62f-2338c264648a,GTEQ,"PUBLIC,ArrayList,LT,String,GT,print,LPAREN,String,s,COMMA,boolean,LBRACKET,RBRACKET,dp,COMMA,Set,LT,String,GT,dict,RPAREN,LBRACE,ArrayList,LT,String,GT,re,EQ,NEW,ArrayList,LT,String,GT,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,s,DOT,length,LPAREN,RPAREN,SUB,1,SEMI,i,<MASK>,0,SEMI,i,SUBSUB,RPAREN,LBRACE,IF,LPAREN,dp,LBRACKET,i,RBRACKET,EQEQ,true,AMPAMP,dict,DOT,contains,LPAREN,s,DOT,substring,LPAREN,i,COMMA,s,DOT,length,LPAREN,RPAREN,RPAREN,RPAREN,RPAREN,LBRACE,IF,LPAREN,i,EQEQ,0,RPAREN,re,DOT,add,LPAREN,s,DOT,substring,LPAREN,i,COMMA,s,DOT,length,LPAREN,RPAREN,RPAREN,RPAREN,SEMI,FOR,LPAREN,String,rs,COLON,print,LPAREN,s,DOT,substring,LPAREN,0,COMMA,i,RPAREN,COMMA,dp,COMMA,dict,RPAREN,RPAREN,LBRACE,rs,EQ,rs,PLUS,"" "",PLUS,s,DOT,substring,LPAREN,i,COMMA,s,DOT,length,LPAREN,RPAREN,RPAREN,SEMI,re,DOT,add,LPAREN,rs,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,RETURN,re,SEMI,RBRACE","    public ArrayList<String> print(String s, boolean[] dp,Set<String> dict)
,    {
,        
,        ArrayList<String> re = new ArrayList<String>();
,        //if(s.length()==0)   return null;
,        for(int i = s.length()-1;i<MASK>0;i--)
,        {
,            if(dp[i]==true&&dict.contains(s.substring(i,s.length())))
,            {
,            	if(i==0)	re.add(s.substring(i,s.length()));
,                for(String rs : print(s.substring(0,i),dp,dict))
,                {
,                    rs = rs+"" ""+s.substring(i,s.length());
,                    re.add(rs);
,                }
,            }
,        }
,        return re;
,    }
"
2170437a-9f53-47a2-b3cb-257eca2eb4ab,292a2ef8-3b13-4e44-b792-72b4e0f5ec2a,EQEQ,"PUBLIC,boolean,deleteTask,LPAREN,Task,currentTask,RPAREN,LBRACE,String,values,SEMI,boolean,result,EQ,false,SEMI,TRY,LBRACE,values,EQ,currentTask,DOT,getTaskID,LPAREN,RPAREN,PLUS,"""",SEMI,cmdString,EQ,""Delete from Tasks where TaskID="",PLUS,values,SEMI,countUpdate,EQ,statement2,DOT,executeUpdate,LPAREN,cmdString,RPAREN,SEMI,result,EQ,LPAREN,checkWarning,LPAREN,statement2,COMMA,countUpdate,RPAREN,<MASK>,null,RPAREN,SEMI,RBRACE,CATCH,LPAREN,Exception,e,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,processSQLError,LPAREN,e,RPAREN,RPAREN,SEMI,RBRACE,RETURN,result,SEMI,RBRACE","	public boolean deleteTask(Task currentTask)
,	{
,		String values;
,		boolean result = false;
,		try
,		{
,			values = currentTask.getTaskID() + """";
,			cmdString = ""Delete from Tasks where TaskID="" + values;
,			countUpdate = statement2.executeUpdate(cmdString);
,			result = (checkWarning(statement2, countUpdate) <MASK> null);
,		}
,		catch (Exception e)
,		{
,			System.out.println(processSQLError(e));
,		}
,		
,		return result;
,	}
"
4efd15d4-7259-49ef-bb2b-8984a1154bd6,a25ad10f-e15c-404e-9c5c-0fd36158e5b9,LT,"PUBLIC,STATIC,void,removeOutliers,LPAREN,RPAREN,LBRACE,double,trim,EQ,ngramlist,DOT,size,LPAREN,RPAREN,STAR,0.20,SEMI,System,DOT,out,DOT,print,LPAREN,""********************trim**** "",PLUS,trim,RPAREN,SEMI,FOR,LPAREN,int,top,EQ,0,SEMI,top,<MASK>,trim,SEMI,top,PLUSPLUS,RPAREN,LBRACE,ngramlist,DOT,remove,LPAREN,ngramlist,DOT,get,LPAREN,top,RPAREN,RPAREN,SEMI,ngramlist,DOT,remove,LPAREN,ngramlist,DOT,get,LPAREN,ngramlist,DOT,size,LPAREN,RPAREN,SUB,1,SUB,top,RPAREN,RPAREN,SEMI,RBRACE,RBRACE","   public static void removeOutliers(){
,        double trim = ngramlist.size() * 0.20;
,        System.out.print(""********************trim**** "" + trim);
,        for(int top = 0; top <MASK> trim; top++){
,            ngramlist.remove(ngramlist.get(top));
,            ngramlist.remove(ngramlist.get(ngramlist.size()-1-top));
,        }
,   }
"
113c5414-6c55-466b-b879-a350ab6e0ca2,cf7503f3-85fe-41eb-8bae-3397f2d6c20f,EQ,"PUBLIC,void,setColumn,LPAREN,int,c,RPAREN,LBRACE,column,<MASK>,c,SEMI,RBRACE","	public void setColumn(int c) {
,		column <MASK> c;
,	}
"
09478113-8f39-4146-870b-8037a6932443,2367a931-57fc-468b-a8da-2e25f0105c1a,EQEQ,"PRIVATE,void,OP_ROR,LPAREN,RPAREN,LBRACE,int,iMem,EQ,readOperand,LPAREN,RPAREN,SEMI,int,iVal,EQ,int8,LPAREN,LPAREN,iMem,GTGT,1,RPAREN,BAR,LPAREN,getCFlag,LPAREN,RPAREN,QUES,01,COLON,00,RPAREN,RPAREN,SEMI,setCFlag,LPAREN,getBit,LPAREN,iMem,COMMA,0,RPAREN,RPAREN,SEMI,setNFlag,LPAREN,getBit,LPAREN,iVal,COMMA,7,RPAREN,RPAREN,SEMI,setZFlag,LPAREN,iVal,<MASK>,0,RPAREN,SEMI,writeOperand,LPAREN,iVal,RPAREN,SEMI,RBRACE","    private void OP_ROR()
,    {
,        int iMem = readOperand();
,        int iVal = int8((iMem >> 1) | (getCFlag() ? 0x01 : 0x00)); // changed getBit(iMem, 0) to mC, because he
,                                                             // checks with the old value of carry (carry isn't)
,                                                             // set yet
,
,        setCFlag(getBit(iMem, 0));
,        setNFlag(getBit(iVal, 7));
,        setZFlag(iVal <MASK> 0);
,
,        writeOperand(iVal);
,    }
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,32108b1e-17fc-473c-85c0-002fb4078a0a,LT,"PUBLIC,SwitchStatus,getStatus,LPAREN,INDISwitchElementAndValue,LBRACKET,RBRACKET,ev,RPAREN,LBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,ev,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,ev,LBRACKET,i,RBRACKET,DOT,getElement,LPAREN,RPAREN,EQEQ,option,RPAREN,LBRACE,RETURN,ev,LBRACKET,i,RBRACKET,DOT,getValue,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,RETURN,SwitchStatus,DOT,OFF,SEMI,RBRACE","  public SwitchStatus getStatus(INDISwitchElementAndValue[] ev) {
,    for (int i = 0 ; i <MASK> ev.length ; i++) {
,      if (ev[i].getElement() == option) {
,        return ev[i].getValue();
,      }
,    }
,
,    return SwitchStatus.OFF;
,  }
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,5e9ae624-087e-4fb9-beb3-8c321f395f3e,BANGEQ,"PUBLIC,STATIC,String,encodeBytes,LPAREN,byte,LBRACKET,RBRACKET,source,RPAREN,LBRACE,String,encoded,EQ,null,SEMI,TRY,LBRACE,encoded,EQ,encodeBytes,LPAREN,source,COMMA,0,COMMA,source,DOT,length,COMMA,NO_OPTIONS,RPAREN,SEMI,RBRACE,CATCH,LPAREN,java,DOT,io,DOT,IOException,ex,RPAREN,LBRACE,assert,false,COLON,ex,DOT,getMessage,LPAREN,RPAREN,SEMI,RBRACE,assert,encoded,<MASK>,null,SEMI,RETURN,encoded,SEMI,RBRACE","  public static String encodeBytes(byte[] source) {
,    // Since we're not going to have the GZIP encoding turned on,
,    // we're not going to have an java.io.IOException thrown, so
,    // we should not force the user to have to catch it.
,    String encoded = null;
,    try {
,      encoded = encodeBytes(source, 0, source.length, NO_OPTIONS);
,    } catch (java.io.IOException ex) {
,      assert false : ex.getMessage();
,    }   // end catch
,    assert encoded <MASK> null;
,    return encoded;
,  }   // end encodeBytes
"
1b82c97a-fe19-4584-bdbc-4f13bb123c10,96f2edd6-d031-4db5-bc16-f8016f4e66c9,GTEQ,"PUBLIC,Chromosome,LPAREN,RPAREN,LBRACE,fitness,EQ,0.0,SEMI,fitness_err,EQ,0.0,SEMI,encodedFeature,EQ,NEW,BitSet,LPAREN,78,RPAREN,SEMI,Random,r,EQ,NEW,Random,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,78,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,r,DOT,nextDouble,LPAREN,RPAREN,<MASK>,0.5,RPAREN,LBRACE,encodedFeature,DOT,set,LPAREN,i,COMMA,true,RPAREN,SEMI,RBRACE,ELSE,LBRACE,encodedFeature,DOT,set,LPAREN,i,COMMA,false,RPAREN,SEMI,RBRACE,RBRACE,RBRACE","    public Chromosome(){
,        fitness=0.0;
,        fitness_err=0.0;
,        encodedFeature= new BitSet(78);
,        Random r= new Random();
,        for (int i = 0; i < 78; i++) {
,            if (r.nextDouble()<MASK>0.5)
,            {
,                encodedFeature.set(i, true);
,            } 
,            else
,            {
,                encodedFeature.set(i, false);
,            }
,        }
,    }
"
b26a115c-a6c3-429f-8830-0c850eb09895,0044bf47-82c9-4f65-92a7-f7d208f9ae46,GT,"MONKEYS_AT,Override,PUBLIC,void,sendImage,LPAREN,String,from,COMMA,String,to,COMMA,String,image,RPAREN,LBRACE,Member,member,EQ,LPAREN,Member,RPAREN,members,DOT,get,LPAREN,to,RPAREN,SEMI,IF,LPAREN,image,DOT,length,LPAREN,RPAREN,<MASK>,10,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""\u56FE\u7247\u592A\u5927\uFF0C\u53D1\u9001\u5931\u8D25\uFF01"",RPAREN,SEMI,RBRACE,ELSE,LBRACE,member,DOT,receiveImage,LPAREN,from,COMMA,image,RPAREN,SEMI,RBRACE,RBRACE","	@Override
,	public void sendImage(String from, String to, String image) {
,		Member member = (Member) members.get(to);
,		//模拟判断图片大小
,		if(image.length()<MASK>10){
,	   	  	  System.out.println(""图片太大，发送失败！"");
,		}else{
,			member.receiveImage(from, image);
,		}
,	}
"
33a4da69-3c87-4617-ac37-92c20f86f62c,0fc46cc2-d145-4803-bd5c-27c43aa5987a,PLUS,"MONKEYS_AT,Override,PUBLIC,void,actionPerformed,LPAREN,ActionEvent,e,RPAREN,LBRACE,setTitle,LPAREN,""SubEditor - "",<MASK>,nameField,DOT,getText,LPAREN,RPAREN,RPAREN,SEMI,RBRACE","	@Override
,	public void actionPerformed(ActionEvent e) {
,		setTitle(""SubEditor - "" <MASK> nameField.getText());
,	}
"
ea91ca9d-c4a2-44a2-9a1f-e35ca896736e,9b0c7ee7-7056-4969-8db1-aeee75c64b8e,LTEQ,"PUBLIC,int,characterAt,LPAREN,int,at,RPAREN,THROWS,JSONException,LBRACE,int,c,EQ,get,LPAREN,at,RPAREN,SEMI,IF,LPAREN,LPAREN,c,AMP,80,RPAREN,EQEQ,0,RPAREN,LBRACE,RETURN,c,SEMI,RBRACE,int,character,SEMI,int,c1,EQ,get,LPAREN,at,PLUS,1,RPAREN,SEMI,IF,LPAREN,LPAREN,c1,AMP,80,RPAREN,EQEQ,0,RPAREN,LBRACE,character,EQ,LPAREN,LPAREN,c,AMP,7F,RPAREN,LTLT,7,RPAREN,BAR,c1,SEMI,IF,LPAREN,character,GT,7F,RPAREN,LBRACE,RETURN,character,SEMI,RBRACE,RBRACE,ELSE,LBRACE,int,c2,EQ,get,LPAREN,at,PLUS,2,RPAREN,SEMI,character,EQ,LPAREN,LPAREN,c,AMP,7F,RPAREN,LTLT,14,RPAREN,BAR,LPAREN,LPAREN,c1,AMP,7F,RPAREN,LTLT,7,RPAREN,BAR,c2,SEMI,IF,LPAREN,LPAREN,c2,AMP,80,RPAREN,EQEQ,0,AMPAMP,character,GT,3FFF,AMPAMP,character,<MASK>,10FFFF,AMPAMP,LPAREN,character,LT,D800,BARBAR,character,GT,DFFF,RPAREN,RPAREN,LBRACE,RETURN,character,SEMI,RBRACE,RBRACE,THROW,NEW,JSONException,LPAREN,""Bad character at "",PLUS,at,RPAREN,SEMI,RBRACE","    public int characterAt(int at) throws JSONException {
,        int c = get(at);
,        if ((c & 0x80) == 0) {
,            return c;
,        }
,        int character;
,        int c1 = get(at + 1);
,        if ((c1 & 0x80) == 0) {
,            character = ((c & 0x7F) << 7) | c1;
,            if (character > 0x7F) {
,                return character;
,            }
,        } else {
,            int c2 = get(at + 2);
,            character = ((c & 0x7F) << 14) | ((c1 & 0x7F) << 7) | c2;
,            if ((c2 & 0x80) == 0 && character > 0x3FFF && character <MASK> 0x10FFFF
,                    && (character < 0xD800 || character > 0xDFFF)) {
,                return character;
,            }
,        }
,        throw new JSONException(""Bad character at "" + at);
,    }
"
41539c05-83ff-49b8-a839-9292483dddc3,f0edd094-ae96-45d4-9bf4-d348e33fae0f,PERCENT,"PUBLIC,boolean,checkTime,LPAREN,int,increment,RPAREN,LBRACE,RETURN,LPAREN,LPAREN,gametime,SUB,1,RPAREN,<MASK>,increment,RPAREN,LT,getGameSpeed,LPAREN,RPAREN,SEMI,RBRACE","	public boolean checkTime(int increment) {
,		return ((gametime-1)<MASK>increment)<getGameSpeed();
,	}
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,480009cb-ef92-4ba7-a93b-4b3784bb6a28,SUB,"PUBLIC,double,getpWidth,LPAREN,RPAREN,LBRACE,IF,LPAREN,pwidth,BANGEQ,<MASK>,1,RPAREN,RETURN,pwidth,SEMI,RETURN,width,SEMI,RBRACE","    public double getpWidth()
,    {
,	   	 if(pwidth != <MASK>1)
,	   		 return pwidth;
,	   	 return width;
,    }
"
2170437a-9f53-47a2-b3cb-257eca2eb4ab,a9d5ae2f-3575-4a9f-bf04-bfb09cfa00db,EQEQ,"PUBLIC,List,LT,Task,GT,getTasks,LPAREN,RPAREN,LBRACE,IF,LPAREN,tasks,<MASK>,null,RPAREN,LBRACE,tasks,EQ,dataAccess,DOT,getTasksSequential,LPAREN,RPAREN,SEMI,RBRACE,RETURN,tasks,SEMI,RBRACE","	public List<Task> getTasks()
,	{
,		if (tasks <MASK> null)
,		{
,			tasks = dataAccess.getTasksSequential();
,		}
,		
,		return tasks;
,	}
"
33a4da69-3c87-4617-ac37-92c20f86f62c,38216e53-d205-4350-93ab-edc9727191fa,PLUS,"MONKEYS_AT,Override,PUBLIC,void,setDim,LPAREN,int,dim,RPAREN,THROWS,ConnectException,LBRACE,this,DOT,dim,EQ,dim,SEMI,makeDynaSys,LPAREN,RPAREN,SEMI,outputY,DOT,setDim,LPAREN,dim,STAR,LPAREN,order,<MASK>,1,RPAREN,RPAREN,SEMI,RBRACE","	@Override
,	public void setDim(int dim) throws ConnectException {
,		this.dim = dim;
,		makeDynaSys();
,		outputY.setDim(dim * (order <MASK> 1));
,	}
"
65bbdf26-4bb0-4d1d-b8be-f9564513b40d,722250a0-3a9a-422e-b827-d75afd18c810,GT,"PUBLIC,STATIC,int,getRandomElement,LPAREN,int,LBRACKET,RBRACKET,arr,COMMA,RandomDataGenerator,random,RPAREN,LBRACE,int,e,EQ,arr,LBRACKET,0,RBRACKET,SEMI,IF,LPAREN,arr,DOT,length,<MASK>,1,RPAREN,LBRACE,int,rand,EQ,random,DOT,nextInt,LPAREN,0,COMMA,arr,DOT,length,SUB,1,RPAREN,SEMI,e,EQ,arr,LBRACKET,rand,RBRACKET,SEMI,RBRACE,RETURN,e,SEMI,RBRACE","	public static int getRandomElement(int[] arr, RandomDataGenerator random) {
,		int e = arr[0];
,		if (arr.length <MASK> 1) {
,			int rand = random.nextInt(0, arr.length - 1);
,			e = arr[rand];
,		}
,		return e;
,	}
"
56952896-479b-43e9-a9cf-c3f3bb9afc0e,a78e7894-e1c2-4457-9947-824f7731cd9e,LT,"PRIVATE,SYNCHRONIZED,void,Reserve,LPAREN,int,quantity,RPAREN,THROWS,InsufficientInventoryException,LBRACE,IF,LPAREN,this,DOT,getCount,LPAREN,RPAREN,<MASK>,quantity,RPAREN,LBRACE,THROW,NEW,InsufficientInventoryException,LPAREN,""Cannot reserve itemID["",PLUS,this,DOT,productId,PLUS,""] for quantity["",PLUS,quantity,PLUS,""]"",RPAREN,SEMI,RBRACE,this,DOT,reservations,PLUSEQ,quantity,SEMI,RBRACE","	private synchronized void Reserve(int quantity) throws InsufficientInventoryException{
,		//no other action allowed on this instance while reserving
,		if(this.getCount() <MASK> quantity){
,			throw new InsufficientInventoryException(""Cannot reserve itemID[""+this.productId+""] for quantity[""+quantity+""]"");
,		}
,		this.reservations += quantity;
,	}
"
a4c68a60-241d-4ccc-bb34-58eb273247fe,ce83739b-9b35-4d1c-9e4f-0d1e25e3f53b,PLUS,"PUBLIC,STATIC,File,deleteOnShutdown,LPAREN,File,file,RPAREN,LBRACE,boolean,enabled,EQ,Boolean,DOT,parseBoolean,LPAREN,System,DOT,getProperty,LPAREN,""vcsreader.test.deleteFilesOnShutdown"",COMMA,""true"",RPAREN,RPAREN,SEMI,IF,LPAREN,BANG,enabled,RPAREN,RETURN,file,SEMI,Runtime,DOT,getRuntime,LPAREN,RPAREN,DOT,addShutdownHook,LPAREN,NEW,Thread,LPAREN,LPAREN,RPAREN,ARROW,LBRACE,TRY,LBRACE,IF,LPAREN,BANG,file,DOT,exists,LPAREN,RPAREN,RPAREN,RETURN,SEMI,boolean,wasDeleted,EQ,doDelete,LPAREN,file,RPAREN,SEMI,IF,LPAREN,BANG,wasDeleted,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""Failed to delete file on shutdown: "",<MASK>,file,DOT,getAbsolutePath,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,CATCH,LPAREN,Exception,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,RPAREN,RPAREN,SEMI,RETURN,file,SEMI,RBRACE","	public static File deleteOnShutdown(File file) {
,		boolean enabled = Boolean.parseBoolean(System.getProperty(""vcsreader.test.deleteFilesOnShutdown"", ""true""));
,		if (!enabled) return file;
,
,		Runtime.getRuntime().addShutdownHook(new Thread(() -> {
,			try {
,				if (!file.exists()) return;
,				boolean wasDeleted = doDelete(file);
,				if (!wasDeleted) {
,					System.out.println(""Failed to delete file on shutdown: "" <MASK> file.getAbsolutePath());
,				}
,			} catch (Exception e) {
,				e.printStackTrace();
,			}
,		}));
,		return file;
,	}
"
b1d29837-1f95-40a2-98dc-d3762b71a15d,c192950b-ae7e-4a47-afb2-17528611f6bb,GT,"PUBLIC,STATIC,Version,parse,LPAREN,String,s,RPAREN,THROWS,VersionFormatException,LBRACE,IF,LPAREN,s,EQEQ,null,RPAREN,LBRACE,THROW,NEW,NullPointerException,LPAREN,s,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,s,DOT,equals,LPAREN,""*"",RPAREN,RPAREN,LBRACE,RETURN,ALL,SEMI,RBRACE,ELSE,LBRACE,TRY,LBRACE,Modifier,m,EQ,Modifier,DOT,Release,SEMI,FINAL,int,i,EQ,s,DOT,indexOf,LPAREN,-,RPAREN,SEMI,IF,LPAREN,i,<MASK>,0,RPAREN,LBRACE,m,EQ,Modifier,DOT,parse,LPAREN,s,DOT,substring,LPAREN,i,PLUS,1,RPAREN,RPAREN,SEMI,s,EQ,s,DOT,substring,LPAREN,0,COMMA,i,RPAREN,SEMI,RBRACE,FINAL,String,LBRACKET,RBRACKET,parts,EQ,s,DOT,split,LPAREN,""[.]"",RPAREN,SEMI,FINAL,int,revision,EQ,parts,DOT,length,EQEQ,3,QUES,Integer,DOT,parseInt,LPAREN,parts,LBRACKET,2,RBRACKET,RPAREN,COLON,0,SEMI,RETURN,NEW,Version,LPAREN,Integer,DOT,parseInt,LPAREN,parts,LBRACKET,0,RBRACKET,RPAREN,COMMA,Integer,DOT,parseInt,LPAREN,parts,LBRACKET,1,RBRACKET,RPAREN,COMMA,revision,COMMA,m,RPAREN,SEMI,RBRACE,CATCH,LPAREN,FINAL,Exception,e,RPAREN,LBRACE,THROW,VersionFormatException,DOT,forInputString,LPAREN,s,RPAREN,SEMI,RBRACE,RBRACE,RBRACE","	public static Version parse(String s) throws VersionFormatException {
,		if (s == null) {
,			throw new NullPointerException(s);
,		} else if (s.equals(""*"")) {
,			return ALL;
,		} else {
,			try {
,				Modifier m = Modifier.Release;
,				final int i = s.indexOf('-');
,				if (i <MASK> 0) {
,					m = Modifier.parse(s.substring(i + 1));
,					s = s.substring(0, i);
,				}
,				final String[] parts = s.split(""[.]"");
,				final int revision = parts.length == 3 ? Integer
,						.parseInt(parts[2]) : 0;
,				return new Version(Integer.parseInt(parts[0]),
,						Integer.parseInt(parts[1]), revision, m);
,			} catch (final Exception e) {
,				throw VersionFormatException.forInputString(s);
,			}
,		}
,	}
"
9c253d2b-e626-4f21-a850-dfb022369350,d8fb23d6-c973-4a93-aa9f-eeebaf518de1,LTEQ,"PUBLIC,Cholesky,LPAREN,FINAL,double,LBRACKET,RBRACKET,LBRACKET,RBRACKET,a,RPAREN,LBRACE,n,EQ,a,DOT,length,SEMI,el,EQ,buildMatrix,LPAREN,a,RPAREN,SEMI,int,i,COMMA,j,COMMA,k,SEMI,double,sum,SEMI,IF,LPAREN,el,LBRACKET,0,RBRACKET,DOT,length,BANGEQ,n,RPAREN,THROW,NEW,IllegalArgumentException,LPAREN,""need square matrix"",RPAREN,SEMI,FOR,LPAREN,i,EQ,0,SEMI,i,LT,n,SEMI,i,PLUSPLUS,RPAREN,LBRACE,FOR,LPAREN,j,EQ,i,SEMI,j,LT,n,SEMI,j,PLUSPLUS,RPAREN,LBRACE,FOR,LPAREN,sum,EQ,el,LBRACKET,i,RBRACKET,LBRACKET,j,RBRACKET,COMMA,k,EQ,i,SUB,1,SEMI,k,GTEQ,0,SEMI,k,SUBSUB,RPAREN,sum,SUBEQ,el,LBRACKET,i,RBRACKET,LBRACKET,k,RBRACKET,STAR,el,LBRACKET,j,RBRACKET,LBRACKET,k,RBRACKET,SEMI,IF,LPAREN,i,EQEQ,j,RPAREN,LBRACE,IF,LPAREN,sum,<MASK>,0.0,RPAREN,THROW,NEW,IllegalArgumentException,LPAREN,""Cholesky failed"",RPAREN,SEMI,el,LBRACKET,i,RBRACKET,LBRACKET,i,RBRACKET,EQ,sqrt,LPAREN,sum,RPAREN,SEMI,RBRACE,ELSE,el,LBRACKET,j,RBRACKET,LBRACKET,i,RBRACKET,EQ,sum,SLASH,el,LBRACKET,i,RBRACKET,LBRACKET,i,RBRACKET,SEMI,RBRACE,RBRACE,FOR,LPAREN,i,EQ,0,SEMI,i,LT,n,SEMI,i,PLUSPLUS,RPAREN,FOR,LPAREN,j,EQ,0,SEMI,j,LT,i,SEMI,j,PLUSPLUS,RPAREN,el,LBRACKET,j,RBRACKET,LBRACKET,i,RBRACKET,EQ,0.,SEMI,RBRACE","  public Cholesky(final double[][] a) {
,    n = a.length;
,    el = buildMatrix(a);
,    
,    int i,j,k;
,    double sum;
,    if (el[0].length != n) throw new IllegalArgumentException(""need square matrix"");
,    for (i=0;i<n;i++) {
,      for (j=i;j<n;j++) {
,        for (sum=el[i][j],k=i-1;k>=0;k--) sum -= el[i][k]*el[j][k];
,        if (i == j) {
,          if (sum <MASK> 0.0)
,            throw new IllegalArgumentException(""Cholesky failed"");
,          el[i][i]=sqrt(sum);
,        } else el[j][i]=sum/el[i][i];
,      }
,    }
,    for (i=0;i<n;i++) for (j=0;j<i;j++) el[j][i] = 0.;
,  }
"
7bd76208-9b34-4151-9ec4-57c6c52e0fcf,be0630be-b9f6-4681-a6ff-310071fa4faf,GTEQ,"int,searchvar,LPAREN,String,n,RPAREN,LBRACE,int,i,SEMI,FOR,LPAREN,i,EQ,nactvar,SUB,1,SEMI,i,<MASK>,0,SEMI,i,SUBSUB,RPAREN,LBRACE,IF,LPAREN,n,DOT,equals,LPAREN,getlocvar,LPAREN,i,RPAREN,DOT,name,RPAREN,RPAREN,RETURN,i,SEMI,RBRACE,RETURN,SUB,1,SEMI,RBRACE","	int searchvar(String n) {
,		int i;
,		for (i = nactvar - 1; i <MASK> 0; i--) {
,			if (n.equals(getlocvar(i).name))
,				return i;
,		}
,		return -1; /* not found */
,	}
"
dd0b8baf-c022-4efa-99dd-425e9c39b04c,93696c9a-67e3-4286-a109-a9c03117d560,SLASH,"PUBLIC,STATIC,double,lerp,LPAREN,double,origin,COMMA,double,target,COMMA,int,steps,COMMA,int,maxSteps,RPAREN,LBRACE,RETURN,origin,PLUS,LPAREN,target,SUB,origin,RPAREN,STAR,LPAREN,double,RPAREN,steps,<MASK>,LPAREN,double,RPAREN,maxSteps,SEMI,RBRACE","    public static double lerp(double origin, double target, int steps, int maxSteps) {
,        return origin + (target - origin) * (double) steps <MASK> (double) maxSteps;
,    }
"
cc1c4187-1182-4cd3-a559-9895584ed311,c1e29220-5245-4f1a-9f15-859c1fa7cd16,GTEQ,"PUBLIC,int,missing,LPAREN,int,LBRACKET,RBRACKET,square,RPAREN,LBRACE,int,LBRACKET,RBRACKET,missing,EQ,NEW,int,LBRACKET,2,RBRACKET,SEMI,int,magicNum,EQ,0,SEMI,FOR,LPAREN,int,j,EQ,0,COMMA,k,EQ,0,SEMI,j,LT,square,DOT,length,SEMI,j,PLUSEQ,3,COMMA,k,PLUSPLUS,RPAREN,LBRACE,int,sum,EQ,0,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,3,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,square,LBRACKET,j,PLUS,i,RBRACKET,EQEQ,SUB,1,RPAREN,LBRACE,missing,LBRACKET,0,RBRACKET,EQ,j,SEMI,missing,LBRACKET,1,RBRACKET,EQ,i,SEMI,RBRACE,sum,PLUSEQ,square,LBRACKET,i,PLUS,j,RBRACKET,SEMI,RBRACE,IF,LPAREN,sum,<MASK>,magicNum,RPAREN,magicNum,EQ,sum,SEMI,RBRACE,magicNum,SUBEQ,square,LBRACKET,LPAREN,missing,LBRACKET,0,RBRACKET,PLUS,missing,LBRACKET,1,RBRACKET,PLUS,1,RPAREN,PERCENT,3,PLUS,missing,LBRACKET,0,RBRACKET,RBRACKET,SEMI,magicNum,SUBEQ,square,LBRACKET,LPAREN,missing,LBRACKET,0,RBRACKET,PLUS,missing,LBRACKET,1,RBRACKET,PLUS,2,RPAREN,PERCENT,3,PLUS,missing,LBRACKET,0,RBRACKET,RBRACKET,SEMI,RETURN,magicNum,SEMI,RBRACE","	public int missing(int[] square) {
,		int[] missing=new int[2];
,		int magicNum = 0;
,		for (int j = 0,k=0; j < square.length; j += 3,k++) {
,			int sum=0;
,			for (int i = 0; i < 3; i++) {
,				if (square[j+i] == -1){
,					missing[0] = j;
,					missing[1]=i;
,				}	
,				sum += square[i+j];
,			}
,			if(sum<MASK>magicNum)magicNum=sum;
,		}
,		
,		magicNum-=square[(missing[0]+missing[1]+1)%3+missing[0]];
,		
,		magicNum-=square[(missing[0]+missing[1]+2)%3+missing[0]];
,		
,		return magicNum;
,	}
"
5735492c-ae75-4373-9d1e-6986d063d859,bc6874e4-154f-4039-ad86-2423a28c7454,LT,"MONKEYS_AT,Override,PUBLIC,void,run,LPAREN,RPAREN,LBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,500,SEMI,i,PLUSPLUS,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""RunnableObj......: "",PLUS,i,RPAREN,SEMI,RBRACE,RBRACE","	@Override
,	public void run() {
,		for (int i = 0; i <MASK> 500; i++) {
,			System.out.println(""RunnableObj......: "" + i);
,		}
,	}
"
0a4ca423-774e-4648-9a00-98a0346992be,13ebb654-8983-43ce-94c0-c96aa57562bd,EQEQ,"PUBLIC,STATIC,FINAL,Country,getByAlpha2,LPAREN,FINAL,String,alpha2,RPAREN,LBRACE,IF,LPAREN,alpha2,<MASK>,null,RPAREN,RETURN,null,SEMI,TRY,LBRACE,RETURN,Enum,DOT,valueOf,LPAREN,Country,DOT,CLASS,COMMA,alpha2,RPAREN,SEMI,RBRACE,CATCH,LPAREN,FINAL,IllegalArgumentException,e,RPAREN,LBRACE,RETURN,null,SEMI,RBRACE,RBRACE","		public static final Country getByAlpha2(final String alpha2) {
,			if (alpha2 <MASK> null) return null;
,			try {
,				return Enum.valueOf(Country.class, alpha2);
,			} catch (final IllegalArgumentException e) {
,				return null;
,			}
,		}
"
01c59a48-47c5-47fe-9d56-82849516c5e7,c2fd6172-cef9-4629-9c00-53cd95e60f8b,GTEQ,"PUBLIC,String,LBRACKET,RBRACKET,getHourlyPastTemp,LPAREN,RPAREN,THROWS,Exception,LBRACE,String,LBRACKET,RBRACKET,tempsPast,EQ,NEW,String,LBRACKET,pastTimes,DOT,length,RBRACKET,SEMI,TRY,LBRACE,layers,PLUSPLUS,SEMI,BufferedReader,br,EQ,NEW,BufferedReader,LPAREN,NEW,InputStreamReader,LPAREN,NEW,URL,LPAREN,MakeURL,DOT,pastHourlyURL,LPAREN,zip,RPAREN,RPAREN,DOT,openStream,LPAREN,RPAREN,RPAREN,RPAREN,SEMI,String,line,EQ,br,DOT,readLine,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,pastTimes,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,tempsPast,LBRACKET,i,RBRACKET,EQ,"""",SEMI,RBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,pastTimes,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,int,index,EQ,0,SEMI,TRY,LBRACE,IF,LPAREN,pastTimes,DOT,length,SUB,1,SUB,i,<MASK>,2,RPAREN,LBRACE,WHILE,LPAREN,BANG,line,DOT,contains,LPAREN,""<b>"",PLUS,pastTimes,LBRACKET,i,RBRACKET,PLUS,"":"",RPAREN,AMPAMP,BANG,line,DOT,contains,LPAREN,""<b>"",PLUS,pastTimes,LBRACKET,i,PLUS,1,RBRACKET,PLUS,"":"",RPAREN,AMPAMP,BANG,line,DOT,contains,LPAREN,""<b>"",PLUS,pastTimes,LBRACKET,i,PLUS,2,RBRACKET,PLUS,"":"",RPAREN,RPAREN,LBRACE,line,EQ,br,DOT,readLine,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,ELSE,IF,LPAREN,pastTimes,DOT,length,SUB,1,SUB,i,EQEQ,1,RPAREN,LBRACE,WHILE,LPAREN,BANG,line,DOT,contains,LPAREN,""<b>"",PLUS,pastTimes,LBRACKET,i,RBRACKET,PLUS,"":"",RPAREN,AMPAMP,BANG,line,DOT,contains,LPAREN,""<b>"",PLUS,pastTimes,LBRACKET,i,PLUS,1,RBRACKET,PLUS,"":"",RPAREN,RPAREN,LBRACE,line,EQ,br,DOT,readLine,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,ELSE,IF,LPAREN,pastTimes,DOT,length,SUB,1,SUB,i,EQEQ,0,RPAREN,LBRACE,WHILE,LPAREN,BANG,line,DOT,contains,LPAREN,""<b>"",PLUS,pastTimes,LBRACKET,i,RBRACKET,PLUS,"":"",RPAREN,RPAREN,LBRACE,line,EQ,br,DOT,readLine,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,IF,LPAREN,line,DOT,contains,LPAREN,""<b>"",PLUS,pastTimes,LBRACKET,i,PLUS,1,RBRACKET,PLUS,"":"",RPAREN,RPAREN,LBRACE,i,PLUSPLUS,SEMI,RBRACE,ELSE,IF,LPAREN,line,DOT,contains,LPAREN,""<b>"",PLUS,pastTimes,LBRACKET,i,PLUS,2,RBRACKET,PLUS,"":"",RPAREN,RPAREN,LBRACE,i,PLUSEQ,2,SEMI,RBRACE,WHILE,LPAREN,BANG,line,DOT,contains,LPAREN,""&deg;F"",RPAREN,RPAREN,LBRACE,line,EQ,br,DOT,readLine,LPAREN,RPAREN,SEMI,RBRACE,index,EQ,line,DOT,indexOf,LPAREN,""<b>"",RPAREN,PLUS,3,SEMI,WHILE,LPAREN,Character,DOT,isDigit,LPAREN,line,DOT,charAt,LPAREN,index,RPAREN,RPAREN,BAR,line,DOT,charAt,LPAREN,index,RPAREN,EQEQ,-,RPAREN,LBRACE,tempsPast,LBRACKET,i,RBRACKET,EQ,tempsPast,LBRACKET,i,RBRACKET,PLUS,line,DOT,charAt,LPAREN,index,RPAREN,SEMI,index,PLUSPLUS,SEMI,RBRACE,RBRACE,CATCH,LPAREN,Exception,e,RPAREN,LBRACE,RETURN,tempsPast,SEMI,RBRACE,RBRACE,RBRACE,CATCH,LPAREN,Exception,e,RPAREN,LBRACE,IF,LPAREN,layers,GT,5,RPAREN,LBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,wundergroundHours,SEMI,i,PLUSPLUS,RPAREN,LBRACE,tempsPast,LBRACKET,i,RBRACKET,EQ,"""",SEMI,RBRACE,WeatherRecorder,DOT,printError,LPAREN,e,COMMA,zip,RPAREN,SEMI,layers,EQ,0,SEMI,RETURN,tempsPast,SEMI,RBRACE,ELSE,LBRACE,Thread,DOT,sleep,LPAREN,2000,RPAREN,SEMI,RETURN,getHourlyForecastTemps,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,layers,EQ,0,SEMI,RETURN,tempsPast,SEMI,RBRACE","	public String[] getHourlyPastTemp() throws Exception {
,		String[] tempsPast = new String[pastTimes.length];
,		try {
,			layers++;
,			BufferedReader br = new BufferedReader(new InputStreamReader(
,					new URL(MakeURL.pastHourlyURL(zip)).openStream()));
,
,			// FileWriter fileWriter = new FileWriter(""test.html"", false);
,			// PrintWriter out = new PrintWriter(fileWriter, true);
,			// out.println(MakeURL.pastHourlyURL(zip));
,
,			String line = br.readLine();
,			// out.println(line);
,			// System.out.println(line);
,
,			for (int i = 0; i < pastTimes.length; i++) {
,				tempsPast[i] = """";
,			}
,
,			for (int i = 0; i < pastTimes.length; i++) {
,				int index = 0;
,				try {
,					if (pastTimes.length - 1 - i <MASK> 2) {
,						while (!line.contains(""<b>"" + pastTimes[i] + "":"")
,								&& !line.contains(""<b>"" + pastTimes[i + 1]
,										+ "":"")
,								&& !line.contains(""<b>"" + pastTimes[i + 2]
,										+ "":"")) {
,							line = br.readLine();
,							// out.println(out);
,						}
,					} else if (pastTimes.length - 1 - i == 1) {
,						while (!line.contains(""<b>"" + pastTimes[i] + "":"")
,								&& !line.contains(""<b>"" + pastTimes[i + 1]
,										+ "":"")) {
,							line = br.readLine();
,							// out.println(out);
,						}
,					} else if (pastTimes.length - 1 - i == 0) {
,						while (!line.contains(""<b>"" + pastTimes[i] + "":"")) {
,							line = br.readLine();
,							// out.println(out);
,						}
,					}
,
,					if (line.contains(""<b>"" + pastTimes[i + 1] + "":"")) {
,						i++;
,					} else if (line.contains(""<b>"" + pastTimes[i + 2] + "":"")) {
,						i += 2;
,					}
,
,					while (!line.contains(""&deg;F"")) {
,						line = br.readLine();
,						// out.println(line);
,					}
,					index = line.indexOf(""<b>"") + 3;
,					while (Character.isDigit(line.charAt(index))
,							| line.charAt(index) == '-') {
,						tempsPast[i] = tempsPast[i] + line.charAt(index);
,						index++;
,					}
,				} catch (Exception e) {
,					// out.close();
,					// fileWriter.close();
,					return tempsPast;
,				}
,			}
,			// out.close();
,			// fileWriter.close();
,		} catch (Exception e) {
,			if (layers > 5) {
,				for (int i = 0; i < wundergroundHours; i++) {
,					tempsPast[i] = """";
,				}
,				WeatherRecorder.printError(e, zip);
,				layers = 0;
,				return tempsPast;
,			} else {
,				Thread.sleep(2000);
,				return getHourlyForecastTemps();
,			}
,		}
,		layers = 0;
,		return tempsPast;
,	}
"
5ee16f26-d690-4884-9baa-b57e0c8c43d6,10251da9-f832-4515-a6fe-096831da5e5e,STAR,"PUBLIC,DualLineEditor,LPAREN,int,width,COMMA,int,height,COMMA,Editable,line1,COMMA,Editable,line2,COMMA,int,epsilon,RPAREN,LBRACE,editor1,EQ,NEW,LineEditor,LPAREN,width,COMMA,height,COMMA,line1,RPAREN,SEMI,editor2,EQ,NEW,LineEditor,LPAREN,width,COMMA,height,COMMA,line2,RPAREN,SEMI,segmentPane,EQ,NEW,LineEditorSegmentPane,LPAREN,editor1,COMMA,editor2,COMMA,epsilon,RPAREN,SEMI,segmentPane,DOT,update,LPAREN,RPAREN,SEMI,editor1,DOT,setBorder,LPAREN,NEW,TitledBorder,LPAREN,""Segment P"",RPAREN,RPAREN,SEMI,editor2,DOT,setBorder,LPAREN,NEW,TitledBorder,LPAREN,""Segment Q"",RPAREN,RPAREN,SEMI,JPanel,segmentPaneContainer,EQ,NEW,JPanel,LPAREN,NEW,GridBagLayout,LPAREN,RPAREN,RPAREN,SEMI,GridBagConstraints,c,EQ,NEW,GridBagConstraints,LPAREN,RPAREN,SEMI,c,DOT,fill,EQ,GridBagConstraints,DOT,BOTH,SEMI,c,DOT,weightx,EQ,c,DOT,weighty,EQ,1.0,SEMI,segmentPaneContainer,DOT,add,LPAREN,segmentPane,COMMA,c,RPAREN,SEMI,segmentPaneContainer,DOT,setBorder,LPAREN,NEW,TitledBorder,LPAREN,""Free space"",RPAREN,RPAREN,SEMI,int,maxEpsilon,EQ,LPAREN,int,RPAREN,LPAREN,width,<MASK>,1.5,RPAREN,SEMI,slider,EQ,NEW,JSlider,LPAREN,0,COMMA,maxEpsilon,RPAREN,SEMI,slider,DOT,setPaintLabels,LPAREN,true,RPAREN,SEMI,slider,DOT,setPaintTicks,LPAREN,true,RPAREN,SEMI,slider,DOT,setMajorTickSpacing,LPAREN,10,RPAREN,SEMI,slider,DOT,setValue,LPAREN,epsilon,RPAREN,SEMI,slider,DOT,setBorder,LPAREN,NEW,TitledBorder,LPAREN,""epsilon"",RPAREN,RPAREN,SEMI,slider,DOT,addChangeListener,LPAREN,NEW,EpsilonChangedListener,LPAREN,segmentPane,RPAREN,RPAREN,SEMI,setLayout,LPAREN,NEW,GridBagLayout,LPAREN,RPAREN,RPAREN,SEMI,c,EQ,NEW,GridBagConstraints,LPAREN,RPAREN,SEMI,c,DOT,fill,EQ,GridBagConstraints,DOT,BOTH,SEMI,c,DOT,gridwidth,EQ,3,SEMI,c,DOT,gridx,EQ,0,SEMI,c,DOT,gridy,EQ,0,SEMI,add,LPAREN,slider,COMMA,c,RPAREN,SEMI,c,DOT,gridwidth,EQ,1,SEMI,c,DOT,weightx,EQ,1.0,SEMI,c,DOT,weighty,EQ,1.0,SEMI,c,DOT,gridx,EQ,0,SEMI,c,DOT,gridy,EQ,1,SEMI,add,LPAREN,editor1,COMMA,c,RPAREN,SEMI,c,DOT,gridx,EQ,1,SEMI,add,LPAREN,editor2,COMMA,c,RPAREN,SEMI,c,DOT,gridx,EQ,2,SEMI,add,LPAREN,segmentPaneContainer,COMMA,c,RPAREN,SEMI,RBRACE","	public DualLineEditor(int width, int height, Editable line1,
,			Editable line2, int epsilon)
,	{
,		editor1 = new LineEditor(width, height, line1);
,		editor2 = new LineEditor(width, height, line2);
,		segmentPane = new LineEditorSegmentPane(editor1, editor2, epsilon);
,		
,		segmentPane.update();
,		
,		editor1.setBorder(new TitledBorder(""Segment P""));
,		editor2.setBorder(new TitledBorder(""Segment Q""));
,		
,		JPanel segmentPaneContainer = new JPanel(new GridBagLayout());
,		GridBagConstraints c = new GridBagConstraints();
,		c.fill = GridBagConstraints.BOTH;
,		c.weightx = c.weighty = 1.0;
,		segmentPaneContainer.add(segmentPane, c);
,		segmentPaneContainer.setBorder(new TitledBorder(""Free space""));
,
,		int maxEpsilon = (int) (width <MASK> 1.5);
,		slider = new JSlider(0, maxEpsilon);
,		slider.setPaintLabels(true);
,		slider.setPaintTicks(true);
,		slider.setMajorTickSpacing(10);
,		slider.setValue(epsilon);
,		slider.setBorder(new TitledBorder(""epsilon""));
,
,		slider.addChangeListener(new EpsilonChangedListener(segmentPane));
,
,		setLayout(new GridBagLayout());
,
,		c = new GridBagConstraints();
,
,		c.fill = GridBagConstraints.BOTH;
,
,		c.gridwidth = 3;
,		c.gridx = 0;
,		c.gridy = 0;
,		add(slider, c);
,
,		c.gridwidth = 1;
,		c.weightx = 1.0;
,		c.weighty = 1.0;
,
,		c.gridx = 0;
,		c.gridy = 1;
,		add(editor1, c);
,
,		c.gridx = 1;
,		add(editor2, c);
,
,		c.gridx = 2;
,		add(segmentPaneContainer, c);
,	}
"
c694737b-29b6-48d5-90c3-b6e0b6d64d88,3dba496f-533c-4601-9efd-abdfedc0fd29,PERCENT,"PROTECTED,int,getMinRowOfSlash,LPAREN,int,slash,RPAREN,LBRACE,IF,LPAREN,slash,GTEQ,0,RPAREN,LBRACE,RETURN,0,SEMI,RBRACE,int,centerRow,EQ,getCenterRow,LPAREN,RPAREN,SEMI,int,adjustment,EQ,LPAREN,centerRow,PLUS,1,RPAREN,<MASK>,2,SEMI,RETURN,SUB,2,STAR,slash,SUB,adjustment,SEMI,RBRACE","    protected int getMinRowOfSlash(int slash) {
,        if (slash >= 0) {
,            return 0;
,        }
,        int centerRow = getCenterRow();
,        int adjustment = (centerRow + 1) <MASK> 2;
,        return -2 * slash - adjustment;
,    }
"
9c253d2b-e626-4f21-a850-dfb022369350,2370c298-4489-4091-89ef-441d55514499,LTEQ,"PUBLIC,double,interp,LPAREN,FINAL,double,LBRACKET,RBRACKET,xstar,RPAREN,LBRACE,int,i,SEMI,FOR,LPAREN,i,EQ,0,SEMI,i,LT,npt,SEMI,i,PLUSPLUS,RPAREN,vstar,LBRACKET,i,RBRACKET,EQ,vgram,DOT,funk,LPAREN,rdist,LPAREN,xstar,COMMA,x,LBRACKET,i,RBRACKET,RPAREN,RPAREN,SEMI,vstar,LBRACKET,npt,RBRACKET,EQ,1.,SEMI,lastval,EQ,0.,SEMI,FOR,LPAREN,i,EQ,0,SEMI,i,<MASK>,npt,SEMI,i,PLUSPLUS,RPAREN,lastval,PLUSEQ,yvi,LBRACKET,i,RBRACKET,STAR,vstar,LBRACKET,i,RBRACKET,SEMI,RETURN,lastval,SEMI,RBRACE","  public double interp(final double[] xstar) {
,    int i;
,    for (i=0;i<npt;i++) vstar[i] = vgram.funk(rdist(xstar,x[i]));
,    vstar[npt] = 1.;
,    lastval = 0.;
,    for (i=0;i<MASK>npt;i++) lastval += yvi[i]*vstar[i];
,    return lastval;
,  }
"
7971058a-e841-46db-9101-7cb4dcf540a9,25ac4efa-b0a2-41b1-a790-3daf0fccb9d7,GTEQ,"PUBLIC,void,removeTo,LPAREN,FlowChartSymbol,to,RPAREN,LBRACE,int,i,EQ,this,DOT,to,DOT,indexOf,LPAREN,to,RPAREN,SEMI,IF,LPAREN,i,<MASK>,0,RPAREN,this,DOT,to,DOT,set,LPAREN,i,COMMA,null,RPAREN,SEMI,RBRACE","	public void removeTo(FlowChartSymbol to) {
,
,		int i = this.to.indexOf(to);
,
,		if (i <MASK> 0)
,			this.to.set(i, null);
,	}
"
33a4da69-3c87-4617-ac37-92c20f86f62c,954214a2-3dd2-4a1d-bf29-a7ed7befe262,PLUS,"PUBLIC,SubEditor,LPAREN,SubSystem,sub,RPAREN,LBRACE,this,DOT,setTitle,LPAREN,""SubEditor - "",<MASK>,sub,DOT,getName,LPAREN,RPAREN,RPAREN,SEMI,nameField,DOT,setText,LPAREN,sub,DOT,getName,LPAREN,RPAREN,RPAREN,SEMI,this,DOT,setModal,LPAREN,true,RPAREN,SEMI,JPanel,np,EQ,NEW,JPanel,LPAREN,RPAREN,SEMI,np,DOT,setLayout,LPAREN,NEW,FlowLayout,LPAREN,FlowLayout,DOT,LEADING,RPAREN,RPAREN,SEMI,np,DOT,add,LPAREN,NEW,JLabel,LPAREN,""name:"",RPAREN,RPAREN,SEMI,np,DOT,add,LPAREN,nameField,RPAREN,SEMI,add,LPAREN,np,COMMA,BorderLayout,DOT,NORTH,RPAREN,SEMI,nameField,DOT,addActionListener,LPAREN,this,RPAREN,SEMI,panel,EQ,sub,DOT,getSubPanel,LPAREN,RPAREN,SEMI,addParamMenu,LPAREN,RPAREN,SEMI,addHelpMenu,LPAREN,RPAREN,SEMI,this,DOT,makeComponentTB,LPAREN,RPAREN,SEMI,panelJSP,EQ,NEW,JScrollPane,LPAREN,panel,RPAREN,SEMI,panelJSP,DOT,setHorizontalScrollBarPolicy,LPAREN,JScrollPane,DOT,HORIZONTAL_SCROLLBAR_AS_NEEDED,RPAREN,SEMI,panelJSP,DOT,setVerticalScrollBarPolicy,LPAREN,JScrollPane,DOT,VERTICAL_SCROLLBAR_AS_NEEDED,RPAREN,SEMI,add,LPAREN,panelJSP,RPAREN,SEMI,add,LPAREN,componentTB,COMMA,BorderLayout,DOT,WEST,RPAREN,SEMI,this,DOT,setDefaultCloseOperation,LPAREN,JFrame,DOT,HIDE_ON_CLOSE,RPAREN,SEMI,this,DOT,setSize,LPAREN,800,COMMA,600,RPAREN,SEMI,this,DOT,setLocationRelativeTo,LPAREN,null,RPAREN,SEMI,RBRACE","	public SubEditor(SubSystem sub) {
,		this.setTitle(""SubEditor - "" <MASK> sub.getName());
,		nameField.setText(sub.getName());
,		this.setModal(true);
,
,		JPanel np = new JPanel();
,		np.setLayout(new FlowLayout(FlowLayout.LEADING));
,		np.add(new JLabel(""name:""));
,		np.add(nameField);
,
,		add(np, BorderLayout.NORTH);
,
,		nameField.addActionListener(this);
,
,		panel = sub.getSubPanel();
,		// panel = new ElementPanel();
,		// panel.setElements(sub.getElements());
,
,		// addFileMenu();
,		// addComponentMenu();
,		addParamMenu();
,		addHelpMenu();
,
,		this.makeComponentTB();
,
,		panelJSP = new JScrollPane(panel);
,		panelJSP
,				.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
,		panelJSP
,				.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
,
,		add(panelJSP);
,
,		add(componentTB, BorderLayout.WEST);
,
,		this.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
,		this.setSize(800, 600);
,		this.setLocationRelativeTo(null);
,	}
"
c694737b-29b6-48d5-90c3-b6e0b6d64d88,be8e5e87-96f1-4541-a1fe-0a41f979f3c6,PERCENT,"int,getColumn,LPAREN,int,index,RPAREN,LBRACE,RETURN,index,<MASK>,numColumns,SEMI,RBRACE","    int getColumn(int index) {
,        return index <MASK> numColumns;
,    }
"
3913c395-db09-4ac4-8282-49a81b6a21f4,08786fe4-f9e6-4073-ac7a-824f5ff7fc24,LT,"MONKEYS_AT,Subscribe,PUBLIC,void,unitIsReady,LPAREN,UnitCreationEvent,u,RPAREN,LBRACE,IF,LPAREN,System,DOT,currentTimeMillis,LPAREN,RPAREN,SUB,lastReadySnd,<MASK>,READY_SND_DELAY,RPAREN,LBRACE,RETURN,SEMI,RBRACE,int,snd,EQ,LPAREN,int,RPAREN,LPAREN,Math,DOT,random,LPAREN,RPAREN,STAR,2,RPAREN,SEMI,playSound,LPAREN,""ready"",PLUS,snd,PLUS,"".wav"",COMMA,0.8f,RPAREN,SEMI,lastReadySnd,EQ,System,DOT,currentTimeMillis,LPAREN,RPAREN,SEMI,RBRACE","	@Subscribe
,	public void unitIsReady(UnitCreationEvent u) {
,		if (System.currentTimeMillis() - lastReadySnd <MASK> READY_SND_DELAY) {
,			return;
,		}
,		int snd = (int)(Math.random()*2);
,		playSound(""ready"" + snd + "".wav"", 0.8f);
,		lastReadySnd = System.currentTimeMillis(); 
,	}
"
9dc56b97-3fea-407c-9846-6a4e260a6d89,95dff202-e6c3-497a-a53d-a2942b830b1a,STAR,"PUBLIC,void,setMoveSpeed,LPAREN,float,tilesPerSecond,RPAREN,LBRACE,moveSpeedTilesPerSecond,EQ,tilesPerSecond,SEMI,timeNeededToCompleteMove,EQ,LPAREN,int,RPAREN,LPAREN,500,SLASH,tilesPerSecond,RPAREN,SEMI,timeNeededToCommitMove,EQ,timeNeededToCompleteMove,SEMI,timeNeededToCancelMove,EQ,2,<MASK>,timeNeededToCommitMove,SEMI,RBRACE","	public void setMoveSpeed(float tilesPerSecond) {
,		moveSpeedTilesPerSecond = tilesPerSecond;
,		timeNeededToCompleteMove = (int) (500 / tilesPerSecond);
,		timeNeededToCommitMove = timeNeededToCompleteMove;
,		timeNeededToCancelMove = 2 <MASK> timeNeededToCommitMove;
,	}
"
4a247308-1941-42bf-b8c1-203a89952252,4333ac8b-ef7d-4829-850a-f4f6e9633bab,LT,"PUBLIC,boolean,checkDuplicateUsingSet,LPAREN,String,LBRACKET,RBRACKET,input,RPAREN,LBRACE,List,inputList,EQ,Arrays,DOT,asList,LPAREN,input,RPAREN,SEMI,Set,inputSet,EQ,NEW,HashSet,LPAREN,inputList,RPAREN,SEMI,IF,LPAREN,inputSet,DOT,size,LPAREN,RPAREN,<MASK>,inputList,DOT,size,LPAREN,RPAREN,RPAREN,LBRACE,RETURN,true,SEMI,RBRACE,RETURN,false,SEMI,RBRACE","	public boolean checkDuplicateUsingSet(String[] input){
,        List inputList = Arrays.asList(input);
,        Set inputSet = new HashSet(inputList);
,        if(inputSet.size()<MASK> inputList.size()) { 
,            return true;
,        }
,        return false;
,    }
"
7bd76208-9b34-4151-9ec4-57c6c52e0fcf,b2c236b2-cf2c-4b1e-ba87-05dfb7cba97e,STAR,"int,indexupvalue,LPAREN,String,name,COMMA,ExpDesc,v,RPAREN,LBRACE,int,i,SEMI,FOR,LPAREN,i,EQ,0,SEMI,i,LT,f,DOT,numUpvalues,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,upvalues_k,LBRACKET,i,RBRACKET,EQEQ,v,DOT,k,AMPAMP,upvalues_info,LBRACKET,i,RBRACKET,EQEQ,v,DOT,info,RPAREN,LBRACE,_assert,LPAREN,f,DOT,upvalues,LBRACKET,i,RBRACKET,DOT,equals,LPAREN,name,RPAREN,RPAREN,SEMI,RETURN,i,SEMI,RBRACE,RBRACE,checklimit,LPAREN,f,DOT,numUpvalues,PLUS,1,COMMA,LUAI_MAXUPVALUES,COMMA,""upvalues"",RPAREN,SEMI,IF,LPAREN,f,DOT,upvalues,EQEQ,null,BARBAR,f,DOT,numUpvalues,PLUS,1,GT,f,DOT,upvalues,DOT,length,RPAREN,f,DOT,upvalues,EQ,realloc,LPAREN,f,DOT,upvalues,COMMA,f,DOT,numUpvalues,<MASK>,2,PLUS,1,RPAREN,SEMI,_assert,LPAREN,v,DOT,k,EQEQ,LexState,DOT,VLOCAL,BARBAR,v,DOT,k,EQEQ,LexState,DOT,VUPVAL,RPAREN,SEMI,int,numUpvalues,EQ,f,DOT,numUpvalues,SEMI,f,DOT,numUpvalues,PLUSPLUS,SEMI,f,DOT,upvalues,LBRACKET,numUpvalues,RBRACKET,EQ,name,SEMI,upvalues_k,LBRACKET,numUpvalues,RBRACKET,EQ,v,DOT,k,SEMI,upvalues_info,LBRACKET,numUpvalues,RBRACKET,EQ,v,DOT,info,SEMI,RETURN,numUpvalues,SEMI,RBRACE","	int indexupvalue(String name, ExpDesc v) {
,		int i;
,		for (i = 0; i < f.numUpvalues; i++) {
,			if (upvalues_k[i] == v.k && upvalues_info[i] == v.info) {
,				_assert(f.upvalues[i].equals(name));
,				return i;
,			}
,		}
,		/<MASK> new one */
,		checklimit(f.numUpvalues + 1, LUAI_MAXUPVALUES, ""upvalues"");
,		if ( f.upvalues == null || f.numUpvalues + 1 > f.upvalues.length)
,			 f.upvalues = realloc( f.upvalues, f.numUpvalues*2+1 );
,		_assert (v.k == LexState.VLOCAL || v.k == LexState.VUPVAL);
,		
,		int numUpvalues = f.numUpvalues;
,		f.numUpvalues++;
,		f.upvalues[numUpvalues] = name;
,		upvalues_k[numUpvalues] = v.k;
,		upvalues_info[numUpvalues] = v.info;
,		return numUpvalues;
,	}
"
9971c369-1cd4-431b-bab2-7edb0b3b68d5,6ba7d93d-6a72-45c5-83ef-89cef70d1245,PLUS,"MONKEYS_AT,Override,PUBLIC,Object,invoke,LPAREN,Object,proxy,COMMA,Method,method,COMMA,Object,LBRACKET,RBRACKET,args,RPAREN,THROWS,Throwable,LBRACE,System,DOT,out,DOT,println,LPAREN,""Vehicle Handler: Invoking "",<MASK>,method,DOT,getName,LPAREN,RPAREN,RPAREN,SEMI,RETURN,method,DOT,invoke,LPAREN,v,COMMA,args,RPAREN,SEMI,RBRACE","	@Override
,	public Object invoke(Object proxy, Method method, Object[] args)
,			throws Throwable {
,		System.out.println(""Vehicle Handler: Invoking "" <MASK> 
,							method.getName());
,		return method.invoke(v, args);
,	}
"
9dc56b97-3fea-407c-9846-6a4e260a6d89,fbbd5efd-7771-4c3a-97fd-438242fbb1a9,STAR,"MONKEYS_AT,Override,PUBLIC,void,update,LPAREN,int,delta,RPAREN,LBRACE,super,DOT,update,LPAREN,delta,RPAREN,SEMI,IF,LPAREN,BANG,isMoving,LPAREN,RPAREN,RPAREN,LBRACE,delayBeforeDecidingBehavior,SUBEQ,delta,SEMI,IF,LPAREN,delayBeforeDecidingBehavior,LT,0,RPAREN,LBRACE,double,r,EQ,Math,DOT,random,LPAREN,RPAREN,SEMI,IF,LPAREN,r,LT,0.25,RPAREN,move,LPAREN,Direction,DOT,NORTH,RPAREN,SEMI,ELSE,IF,LPAREN,r,LT,0.50,RPAREN,move,LPAREN,Direction,DOT,SOUTH,RPAREN,SEMI,ELSE,IF,LPAREN,r,LT,0.75,RPAREN,move,LPAREN,Direction,DOT,EAST,RPAREN,SEMI,ELSE,move,LPAREN,Direction,DOT,WEST,RPAREN,SEMI,delayBeforeDecidingBehavior,EQ,LPAREN,int,RPAREN,LPAREN,50,PLUS,250,<MASK>,Math,DOT,random,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,RBRACE","		@Override
,		public void update(int delta) {
,			super.update(delta);
,			if(!isMoving()) {
,				delayBeforeDecidingBehavior -= delta;
,				if(delayBeforeDecidingBehavior < 0) {
,					double r = Math.random();
,					if(r < 0.25)
,						move(Direction.NORTH);
,					else if(r < 0.50)
,						move(Direction.SOUTH);
,					else if(r < 0.75)
,						move(Direction.EAST);
,					else
,						move(Direction.WEST);
,					delayBeforeDecidingBehavior = (int) (50 + 250 <MASK> Math.random());
,				}
,			}
,		}
"
9c253d2b-e626-4f21-a850-dfb022369350,f9e09128-39fa-4766-b8d6-c0c02d7b55b5,GT,"PRIVATE,double,pythag,LPAREN,FINAL,double,a,COMMA,FINAL,double,b,RPAREN,LBRACE,double,absa,EQ,abs,LPAREN,a,RPAREN,COMMA,absb,EQ,abs,LPAREN,b,RPAREN,SEMI,RETURN,LPAREN,absa,<MASK>,absb,QUES,absa,STAR,sqrt,LPAREN,1.0,PLUS,SQR,LPAREN,absb,SLASH,absa,RPAREN,RPAREN,COLON,LPAREN,absb,EQEQ,0.0,QUES,0.0,COLON,absb,STAR,sqrt,LPAREN,1.0,PLUS,SQR,LPAREN,absa,SLASH,absb,RPAREN,RPAREN,RPAREN,RPAREN,SEMI,RBRACE","  private double pythag(final double a, final double b) {
,    double absa=abs(a), absb=abs(b);
,    return (absa <MASK> absb ? absa*sqrt(1.0+SQR(absb/absa)) :
,      (absb == 0.0 ? 0.0 : absb*sqrt(1.0+SQR(absa/absb))));
,  }
"
62a978c0-a836-480d-8f9b-c958fbbc7ff5,e7f985ce-b38c-4f59-9f23-d581c1bd7f1d,SLASH,"PUBLIC,void,writeBits,LPAREN,int,numBits,COMMA,int,value,RPAREN,LBRACE,int,bytePos,EQ,bitPosition,GTGT,3,SEMI,int,bitOffset,EQ,8,SUB,LPAREN,bitPosition,AMP,7,RPAREN,SEMI,bitPosition,PLUSEQ,numBits,SEMI,position,EQ,LPAREN,bitPosition,PLUS,7,RPAREN,<MASK>,8,SEMI,FOR,LPAREN,SEMI,numBits,GT,bitOffset,SEMI,bitOffset,EQ,8,RPAREN,LBRACE,expand,LPAREN,1,RPAREN,SEMI,data,LBRACKET,bytePos,RBRACKET,AMPEQ,TILDE,BITMASKS,LBRACKET,bitOffset,RBRACKET,SEMI,data,LBRACKET,bytePos,PLUSPLUS,RBRACKET,BAREQ,value,GTGT,numBits,SUB,bitOffset,AMP,BITMASKS,LBRACKET,bitOffset,RBRACKET,SEMI,numBits,SUBEQ,bitOffset,SEMI,RBRACE,IF,LPAREN,numBits,EQEQ,bitOffset,RPAREN,LBRACE,data,LBRACKET,bytePos,RBRACKET,AMPEQ,TILDE,BITMASKS,LBRACKET,bitOffset,RBRACKET,SEMI,data,LBRACKET,bytePos,RBRACKET,BAREQ,value,AMP,BITMASKS,LBRACKET,bitOffset,RBRACKET,SEMI,RBRACE,ELSE,LBRACE,data,LBRACKET,bytePos,RBRACKET,AMPEQ,TILDE,LPAREN,BITMASKS,LBRACKET,numBits,RBRACKET,LTLT,bitOffset,SUB,numBits,RPAREN,SEMI,data,LBRACKET,bytePos,RBRACKET,BAREQ,LPAREN,value,AMP,BITMASKS,LBRACKET,numBits,RBRACKET,RPAREN,LTLT,bitOffset,SUB,numBits,SEMI,RBRACE,RBRACE","	public void writeBits(int numBits, int value) {
,		int bytePos = bitPosition >> 3;
,		int bitOffset = 8 - (bitPosition & 7);
,		bitPosition += numBits;
,		position = (bitPosition + 7) <MASK> 8;
,		for (; numBits > bitOffset; bitOffset = 8) {
,			expand(1);
,			data[bytePos] &= ~ BITMASKS[bitOffset];	 // mask out the desired area
,			data[bytePos++] |= value >> numBits - bitOffset & BITMASKS[bitOffset];
,
,			numBits -= bitOffset;
,		}
,		if (numBits == bitOffset) {
,			data[bytePos] &= ~ BITMASKS[bitOffset];
,			data[bytePos] |= value & BITMASKS[bitOffset];
,		} else {
,			data[bytePos] &= ~ (BITMASKS[numBits] << bitOffset - numBits);
,			data[bytePos] |= (value & BITMASKS[numBits]) << bitOffset - numBits;
,		}
,	}
"
0a4ca423-774e-4648-9a00-98a0346992be,2e2fad71-5f6c-46ec-9cf3-f40a971eb8d1,EQEQ,"PUBLIC,STATIC,FINAL,String,defaultHash,LPAREN,FINAL,String,text,RPAREN,LBRACE,IF,LPAREN,text,BANGEQ,null,RPAREN,LBRACE,TRY,LBRACE,IF,LPAREN,hashFunction,<MASK>,null,RPAREN,hashFunction,EQ,MessageDigest,DOT,getInstance,LPAREN,DEFAULT_ALGORITHM,RPAREN,SEMI,FINAL,byte,LBRACKET,RBRACKET,hexBytes,EQ,hashFunction,DOT,digest,LPAREN,text,DOT,getBytes,LPAREN,StandardCharsets,DOT,UTF_8,DOT,toString,LPAREN,RPAREN,RPAREN,RPAREN,SEMI,RETURN,NumberSystem,DOT,toHexadecimal,LPAREN,hexBytes,RPAREN,SEMI,RBRACE,CATCH,LPAREN,FINAL,NoSuchAlgorithmException,BAR,UnsupportedEncodingException,e,RPAREN,LBRACE,RBRACE,RBRACE,RETURN,text,SEMI,RBRACE","	public static final String defaultHash(final String text) {
,		if (text != null) {
,			try {
,				if (hashFunction <MASK> null)
,					hashFunction = MessageDigest.getInstance(DEFAULT_ALGORITHM);
,				final byte[] hexBytes = hashFunction.digest(text.getBytes(StandardCharsets.UTF_8.toString()));
,				return NumberSystem.toHexadecimal(hexBytes);
,			} catch (final NoSuchAlgorithmException | UnsupportedEncodingException e) {}
,		}
,		return text;
,	}
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,fd4a37fd-d5ba-4bbf-8246-9185aebe9ca0,SUB,"PUBLIC,STATIC,byte,LBRACKET,RBRACKET,mergeArray,LPAREN,FINAL,byte,LBRACKET,RBRACKET,ELLIPSIS,arrays,RPAREN,LBRACE,int,size,EQ,0,SEMI,FOR,LPAREN,byte,LBRACKET,RBRACKET,a,COLON,arrays,RPAREN,LBRACE,size,PLUSEQ,a,DOT,length,SEMI,RBRACE,byte,LBRACKET,RBRACKET,res,EQ,NEW,byte,LBRACKET,size,RBRACKET,SEMI,int,destPos,EQ,0,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,arrays,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,i,GT,0,RPAREN,destPos,PLUSEQ,arrays,LBRACKET,i,<MASK>,1,RBRACKET,DOT,length,SEMI,int,length,EQ,arrays,LBRACKET,i,RBRACKET,DOT,length,SEMI,System,DOT,arraycopy,LPAREN,arrays,LBRACKET,i,RBRACKET,COMMA,0,COMMA,res,COMMA,destPos,COMMA,length,RPAREN,SEMI,RBRACE,RETURN,res,SEMI,RBRACE","	public static byte[] mergeArray(final byte[]... arrays) {
,		int size = 0;
,		for (byte[] a : arrays) {
,			size += a.length;
,		}
,		byte[] res = new byte[size];
,
,		int destPos = 0;
,		for (int i = 0; i < arrays.length; i++) {
,			if (i > 0)
,				destPos += arrays[i <MASK> 1].length;
,			int length = arrays[i].length;
,			System.arraycopy(arrays[i], 0, res, destPos, length);
,		}
,		return res;
,	}
"
7adec7d8-cee7-4225-a9f6-43a8dd4e76a6,d2ac3239-1cf5-49ba-9c75-112c57c06cfe,STAR,"PRIVATE,int,getUnit,LPAREN,String,product,COMMA,double,entryPrice,COMMA,double,stopPrice,RPAREN,LBRACE,double,r,EQ,Math,DOT,abs,LPAREN,entryPrice,SUB,stopPrice,RPAREN,SEMI,double,point,EQ,CurrencyTable,DOT,getPoint,LPAREN,product,RPAREN,SEMI,double,valuePerPoint,EQ,CurrencyTable,DOT,getValuePerPoint,LPAREN,product,RPAREN,SEMI,double,balance,EQ,order,DOT,getAccount,LPAREN,RPAREN,DOT,getBalance,LPAREN,RPAREN,SEMI,int,unit,EQ,LPAREN,int,RPAREN,LPAREN,0.01,<MASK>,balance,SLASH,valuePerPoint,SLASH,LPAREN,r,SLASH,point,RPAREN,RPAREN,SEMI,RETURN,unit,SEMI,RBRACE","    private int getUnit(String product, double entryPrice, double stopPrice) {
,        double r = Math.abs(entryPrice - stopPrice);
,        double point = CurrencyTable.getPoint(product);
,        double valuePerPoint = CurrencyTable.getValuePerPoint(product);
,        double balance = order.getAccount().getBalance();
,        int unit = (int) (0.01 <MASK> balance / valuePerPoint / (r/point));
,        return unit;
,    }
"
b5ee7e5e-a7bf-41d4-8880-3ac95d2f8822,7616e924-6c18-4652-9b9e-9a3af4f15f67,BANGEQ,"PUBLIC,STATIC,void,main,LPAREN,String,LBRACKET,RBRACKET,args,RPAREN,LBRACE,Restart2DB,rsd,EQ,NEW,Restart2DB,LPAREN,RPAREN,SEMI,rsd,DOT,connect,LPAREN,RPAREN,SEMI,File,file,EQ,NEW,File,LPAREN,""restartFile"",RPAREN,SEMI,TRY,LPAREN,BufferedReader,br,EQ,NEW,BufferedReader,LPAREN,NEW,FileReader,LPAREN,file,RPAREN,RPAREN,RPAREN,LBRACE,String,ln,EQ,br,DOT,readLine,LPAREN,RPAREN,SEMI,WHILE,LPAREN,ln,<MASK>,null,RPAREN,LBRACE,StringTokenizer,stk,EQ,NEW,StringTokenizer,LPAREN,ln,RPAREN,SEMI,String,fname,EQ,stk,DOT,nextToken,LPAREN,RPAREN,SEMI,rsd,DOT,procFile,LPAREN,fname,COMMA,stk,DOT,nextToken,LPAREN,RPAREN,RPAREN,SEMI,ln,EQ,br,DOT,readLine,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,fname,PLUS,""processed.  "",PLUS,rsd,DOT,sdf,DOT,format,LPAREN,NEW,Date,LPAREN,System,DOT,currentTimeMillis,LPAREN,RPAREN,RPAREN,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,CATCH,LPAREN,FileNotFoundException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,IOException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,RBRACE","	public static void main(String[] args) {
,		Restart2DB rsd = new Restart2DB();
,		rsd.connect();
,		File file = new File(""restartFile"");
,		try (BufferedReader br = new BufferedReader(new FileReader(file))) {
,			String ln = br.readLine();
,			while(ln<MASK>null){
,				StringTokenizer stk = new StringTokenizer(ln);
,				String fname = stk.nextToken();
,				rsd.procFile(fname,stk.nextToken());
,				ln = br.readLine();
,				System.out.println(fname + ""processed.  "" + rsd.sdf.format(new Date(System.currentTimeMillis())));
,			}
,			
,		} catch (FileNotFoundException e) {
,			e.printStackTrace();
,		} catch (IOException e) {
,			e.printStackTrace();
,		}
,	}
"
8b2adeae-3ab1-4202-93a8-e72e530dbe7c,3ca3cc75-8aae-4f17-95de-fce79e8608fb,PERCENT,"PUBLIC,STATIC,void,drawHex,LPAREN,int,i,COMMA,int,j,COMMA,Graphics2D,g2,RPAREN,LBRACE,g2,DOT,setStroke,LPAREN,NEW,BasicStroke,LPAREN,2,RPAREN,RPAREN,SEMI,int,x,EQ,LPAREN,i,SUB,corner,DOT,x,RPAREN,STAR,LPAREN,s,PLUS,t,RPAREN,SEMI,int,y,EQ,LPAREN,j,SUB,corner,DOT,y,RPAREN,STAR,h,PLUS,LPAREN,i,<MASK>,2,RPAREN,STAR,h,SLASH,2,SEMI,Polygon,poly,EQ,hex,LPAREN,LPAREN,i,RPAREN,COMMA,LPAREN,j,RPAREN,RPAREN,SEMI,g2,DOT,setColor,LPAREN,LocationManager,DOT,getLoc,LPAREN,i,COMMA,j,RPAREN,DOT,getColor,LPAREN,RPAREN,RPAREN,SEMI,g2,DOT,fillPolygon,LPAREN,poly,RPAREN,SEMI,g2,DOT,setColor,LPAREN,Color,DOT,black,RPAREN,SEMI,g2,DOT,drawPolygon,LPAREN,poly,RPAREN,SEMI,IF,LPAREN,LocationManager,DOT,getLoc,LPAREN,i,COMMA,j,RPAREN,INSTANCEOF,Factory,RPAREN,LBRACE,g2,DOT,drawImage,LPAREN,ModelManager,DOT,getModel,LPAREN,""Factory"",RPAREN,DOT,getImage,LPAREN,RPAREN,COMMA,x,PLUS,LPAREN,s,PLUS,t,PLUS,t,SUB,32,RPAREN,SLASH,2,SUB,5,COMMA,y,PLUS,LPAREN,h,SUB,32,RPAREN,SLASH,2,COMMA,null,RPAREN,SEMI,RBRACE,IF,LPAREN,LocationManager,DOT,getLoc,LPAREN,i,COMMA,j,RPAREN,INSTANCEOF,Base,RPAREN,LBRACE,boolean,team,EQ,LPAREN,LPAREN,Base,RPAREN,LocationManager,DOT,getLoc,LPAREN,i,COMMA,j,RPAREN,RPAREN,DOT,getTeam,LPAREN,RPAREN,SEMI,g2,DOT,drawImage,LPAREN,ModelManager,DOT,getModel,LPAREN,LPAREN,team,QUES,""BlueBase"",COLON,""RedBase"",RPAREN,RPAREN,DOT,getImage,LPAREN,RPAREN,COMMA,x,PLUS,LPAREN,s,PLUS,t,PLUS,t,SUB,32,RPAREN,SLASH,2,SUB,5,COMMA,y,PLUS,LPAREN,h,SUB,32,RPAREN,SLASH,2,COMMA,null,RPAREN,SEMI,RBRACE,IF,LPAREN,BANG,LocationManager,DOT,getLoc,LPAREN,i,COMMA,j,RPAREN,DOT,isEmpty,LPAREN,RPAREN,RPAREN,LBRACE,Unit,u,EQ,LocationManager,DOT,getLoc,LPAREN,i,COMMA,j,RPAREN,DOT,getUnit,LPAREN,RPAREN,SEMI,IF,LPAREN,u,DOT,isAttackDone,LPAREN,RPAREN,AMPAMP,u,DOT,isShiftDone,LPAREN,RPAREN,RPAREN,LBRACE,g2,DOT,drawImage,LPAREN,ModelManager,DOT,getModel,LPAREN,u,DOT,getName,LPAREN,RPAREN,RPAREN,DOT,getGreyImage,LPAREN,u,DOT,getTeam,LPAREN,RPAREN,RPAREN,COMMA,x,PLUS,LPAREN,s,PLUS,t,PLUS,t,SUB,32,RPAREN,SLASH,2,COMMA,y,PLUS,LPAREN,h,SUB,32,RPAREN,SLASH,2,COMMA,null,RPAREN,SEMI,RBRACE,ELSE,LBRACE,g2,DOT,drawImage,LPAREN,ModelManager,DOT,getModel,LPAREN,u,DOT,getName,LPAREN,RPAREN,RPAREN,DOT,getImage,LPAREN,u,DOT,getTeam,LPAREN,RPAREN,RPAREN,COMMA,x,PLUS,LPAREN,s,PLUS,t,PLUS,t,SUB,32,RPAREN,SLASH,2,COMMA,y,PLUS,LPAREN,h,SUB,32,RPAREN,SLASH,2,COMMA,null,RPAREN,SEMI,RBRACE,RBRACE,RBRACE","    public static void drawHex(int i, int j, Graphics2D g2) {
,        g2.setStroke(new BasicStroke(2));
,        int x = (i-corner.x) * (s + t);
,        int y = (j-corner.y) * h + (i <MASK> 2) * h / 2;
,        Polygon poly = hex((i), (j));
,        g2.setColor(LocationManager.getLoc(i, j).getColor());
,        g2.fillPolygon(poly);
,        g2.setColor(Color.black);
,        g2.drawPolygon(poly);
,        
,        if(LocationManager.getLoc(i, j) instanceof Factory){
,            g2.drawImage(ModelManager.getModel(""Factory"").getImage(), 
,                    x + (s + t + t - 32) / 2-5, y + (h - 32) / 2, null);
,        }
,        
,        if(LocationManager.getLoc(i, j) instanceof Base){
,            boolean team = ((Base)LocationManager.getLoc(i, j)).getTeam();
,            g2.drawImage(ModelManager.getModel((team ? ""BlueBase"": ""RedBase"")).getImage(), 
,                    x + (s + t + t - 32) / 2-5, y + (h - 32) / 2, null);
,        }
,        if (!LocationManager.getLoc(i, j).isEmpty()) {
,            Unit u = LocationManager.getLoc(i, j).getUnit();
,            if (u.isAttackDone() && u.isShiftDone()) {
,                g2.drawImage(ModelManager.getModel(u.getName()).getGreyImage(u.getTeam()),
,                        x + (s + t + t - 32) / 2, y + (h - 32) / 2, null);
,            } else {
,                g2.drawImage(ModelManager.getModel(u.getName()).getImage(u.getTeam()),
,                        x + (s + t + t - 32) / 2, y + (h - 32) / 2, null);
,            }
,        }
,    }
"
b26a115c-a6c3-429f-8830-0c850eb09895,4ee72ede-0ec2-4a5d-9576-594c46fb91f4,LTEQ,"MONKEYS_AT,Override,PUBLIC,void,checkState,LPAREN,int,score,RPAREN,LBRACE,IF,LPAREN,point,GTEQ,1000,RPAREN,LBRACE,account,DOT,setState,LPAREN,NEW,HighState,LPAREN,this,RPAREN,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,point,LT,0,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""\u4F59\u989D\u4E0D\u8DB3\uFF0C\u6587\u4EF6\u4E0B\u8F7D\u5931\u8D25\uFF01"",RPAREN,SEMI,this,DOT,point,PLUSEQ,score,SEMI,RBRACE,ELSE,IF,LPAREN,point,<MASK>,100,RPAREN,LBRACE,account,DOT,setState,LPAREN,NEW,PrimaryState,LPAREN,this,RPAREN,RPAREN,SEMI,RBRACE,RBRACE","	@Override
,	public void checkState(int score) {
,
,		if(point>=1000)
,		{
,			account.setState(new HighState(this));
,		}
,		else if(point<0)
,		{
,			System.out.println(""余额不足，文件下载失败！"");
,			this.point+=score;
,		}
,		else if(point<MASK>100)
,		{
,			account.setState(new PrimaryState(this));
,		}
,		
,	}
"
0954f048-d73a-4a4b-b43c-366136d8df6b,5c423833-ed06-4bc6-8478-f1912caad458,SLASH,"PRIVATE,double,increment,LPAREN,RPAREN,LBRACE,RETURN,LPAREN,spawnInterval,<MASK>,NANO,RPAREN,STAR,.90,SEMI,RBRACE","	private double increment() {
,		<MASK>/ spawn time reduced by 10% every level
,		return (spawnInterval / NANO) * .90;
,	}
"
b61d6017-337e-4ccd-b964-a6b5e3d0cb20,94ca6d7c-5657-4ced-9a11-6b93b8da5b4e,EQEQ,"MONKEYS_AT,Override,PUBLIC,Menu,select,LPAREN,Menu,menu,COMMA,int,index,RPAREN,LBRACE,FOR,LPAREN,Selection,s,COLON,menu,DOT,_selectionList,RPAREN,LBRACE,IF,LPAREN,s,DOT,_index,<MASK>,index,RPAREN,LBRACE,IF,LPAREN,menu,DOT,_text,DOT,equals,LPAREN,""Produce"",RPAREN,RPAREN,LBRACE,ProductionBuilding,building,EQ,LPAREN,ProductionBuilding,RPAREN,menu,DOT,_pieces,DOT,get,LPAREN,0,RPAREN,SEMI,String,unitName,EQ,LPAREN,String,RPAREN,menu,DOT,_options,DOT,get,LPAREN,index,SUB,1,RPAREN,SEMI,building,DOT,produceUnit,LPAREN,unitName,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,menu,DOT,_text,DOT,equals,LPAREN,""Move"",RPAREN,RPAREN,LBRACE,Unit,unit,EQ,LPAREN,Unit,RPAREN,menu,DOT,_pieces,DOT,get,LPAREN,0,RPAREN,SEMI,Position,position,EQ,LPAREN,Position,RPAREN,menu,DOT,_options,DOT,get,LPAREN,index,SUB,1,RPAREN,SEMI,unit,DOT,move,LPAREN,position,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,menu,DOT,_text,DOT,equals,LPAREN,""Attack"",RPAREN,RPAREN,LBRACE,AttackingUnit,unit,EQ,LPAREN,AttackingUnit,RPAREN,menu,DOT,_pieces,DOT,get,LPAREN,0,RPAREN,SEMI,Unit,enemyUnit,EQ,LPAREN,Unit,RPAREN,menu,DOT,_options,DOT,get,LPAREN,index,SUB,1,RPAREN,SEMI,unit,DOT,attack,LPAREN,enemyUnit,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,RETURN,menu,DOT,_parent,SEMI,RBRACE","        @Override
,        public Menu select(Menu menu, int index) {
,            for (Selection s : menu._selectionList) {
,                if (s._index <MASK> index) {
,                    if (menu._text.equals(""Produce"")) {
,                        ProductionBuilding building = (ProductionBuilding) menu._pieces
,                            .get(0);
,                        String unitName = (String) menu._options.get(index - 1);
,                        building.produceUnit(unitName);
,                    } else if (menu._text.equals(""Move"")) {
,                        Unit unit = (Unit) menu._pieces.get(0);
,                        Position position = (Position) menu._options
,                            .get(index - 1);
,                        unit.move(position);
,                    } else if (menu._text.equals(""Attack"")) {
,                        AttackingUnit unit = (AttackingUnit) menu._pieces
,                            .get(0);
,                        Unit enemyUnit = (Unit) menu._options.get(index - 1);
,                        unit.attack(enemyUnit);
,                    }
,                }
,            }
,
,            return menu._parent;
,        }
"
9b07119d-5d87-44cb-94ac-77a9d4fc6019,3614ea03-b303-4410-a09f-751bbd4f60aa,LTEQ,"PUBLIC,boolean,exists,LPAREN,RPAREN,LBRACE,IF,LPAREN,this,DOT,id_actuacio,<MASK>,0,RPAREN,LBRACE,RETURN,false,SEMI,RBRACE,RETURN,true,SEMI,RBRACE","    public boolean exists() {
,        if (this.id_actuacio <MASK> 0) {
,            return false;
,        }
,        return true;
,
,    }
"
bdd57b74-b6eb-44ce-a3b5-6aef0fec0007,890123ef-58b1-4697-b9a1-fd5c1506e9d0,SLASH,"PUBLIC,int,getAverageHits,LPAREN,RPAREN,LBRACE,long,lSum,EQ,0,SEMI,FINAL,int,iCount,EQ,m_listHits,DOT,size,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,iCount,SEMI,i,PLUSPLUS,RPAREN,LBRACE,lSum,PLUSEQ,m_listHits,DOT,get,LPAREN,i,RPAREN,SEMI,RBRACE,RETURN,LPAREN,int,RPAREN,LPAREN,iCount,GT,0,QUES,LPAREN,lSum,<MASK>,iCount,RPAREN,COLON,SUB,1,RPAREN,SEMI,RBRACE","		public int getAverageHits() {
,			long lSum = 0;
,			final int iCount = m_listHits.size();
,
,			for (int i = 0; i < iCount; i++) {
,				lSum += m_listHits.get(i);
,			}
,
,			return (int)(iCount > 0 ? (lSum <MASK> iCount) : -1);
,		}
"
e804bdf1-7a07-4e36-aee6-aba6a427cf38,c78c94e6-278e-45a5-906a-8c3576c3869e,GTEQ,"PUBLIC,void,initialize,LPAREN,Graph,LT,QUES,EXTENDS,Edge,GT,g,COMMA,int,u,COMMA,List,lengthDist,COMMA,PriorityQueue,q,RPAREN,THROWS,IllegalArgumentException,LBRACE,EtS,EQ,NEW,Hashtable,LPAREN,lengthDist,DOT,size,LPAREN,RPAREN,STAR,2,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,lengthDist,DOT,size,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,int,keyweights,EQ,LPAREN,Integer,RPAREN,lengthDist,DOT,get,LPAREN,i,RPAREN,SEMI,ArrayList,edges,EQ,NEW,ArrayList,LPAREN,RPAREN,SEMI,EtS,DOT,put,LPAREN,keyweights,COMMA,edges,RPAREN,SEMI,RBRACE,IF,LPAREN,g,EQEQ,null,RPAREN,LBRACE,String,errorMessage,EQ,""The passed graph musn't be null."",SEMI,THROW,NEW,IllegalArgumentException,LPAREN,errorMessage,RPAREN,SEMI,RBRACE,IF,LPAREN,u,LT,0,BARBAR,u,<MASK>,g,DOT,getNumberOfVertices,LPAREN,RPAREN,RPAREN,LBRACE,String,errorMessage,EQ,""The vertex with index "",PLUS,u,PLUS,"" is not within the passed graph."",SEMI,THROW,NEW,IllegalArgumentException,LPAREN,errorMessage,RPAREN,SEMI,RBRACE,int,n,EQ,g,DOT,getNumberOfVertices,LPAREN,RPAREN,SEMI,int,blackV,EQ,0,SEMI,colors,EQ,NEW,int,LBRACKET,n,RBRACKET,SEMI,predecessors,EQ,NEW,int,LBRACKET,n,RBRACKET,SEMI,distances,EQ,NEW,int,LBRACKET,n,RBRACKET,SEMI,items,EQ,NEW,PriorityQueueItem,LBRACKET,n,RBRACKET,SEMI,int,white,EQ,0,SEMI,int,gray,EQ,1,SEMI,int,black,EQ,2,SEMI,FOR,LPAREN,int,v,EQ,0,SEMI,v,LT,n,SEMI,v,PLUSPLUS,RPAREN,LBRACE,colors,LBRACKET,v,RBRACKET,EQ,white,SEMI,predecessors,LBRACKET,v,RBRACKET,EQ,SUB,1,SEMI,distances,LBRACKET,v,RBRACKET,EQ,SUB,1,SEMI,RBRACE,colors,LBRACKET,u,RBRACKET,EQ,black,SEMI,blackV,PLUSPLUS,SEMI,distances,LBRACKET,u,RBRACKET,EQ,0,SEMI,int,LBRACKET,RBRACKET,ne,EQ,g,DOT,getArrayOfAdjacentVertices,LPAREN,u,RPAREN,SEMI,int,LBRACKET,RBRACKET,we,EQ,g,DOT,getArrayOfIncidentEdgeWeights,LPAREN,u,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,ne,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,int,neighbor,EQ,ne,LBRACKET,i,RBRACKET,SEMI,int,weights,EQ,we,LBRACKET,i,RBRACKET,SEMI,ArrayList,edges,EQ,LPAREN,ArrayList,RPAREN,EtS,DOT,get,LPAREN,weights,RPAREN,SEMI,edges,DOT,add,LPAREN,NEW,WeightedEdge,LPAREN,u,COMMA,neighbor,COMMA,weights,RPAREN,RPAREN,SEMI,EtS,DOT,put,LPAREN,weights,COMMA,edges,RPAREN,SEMI,RBRACE,items,EQ,NEW,PriorityQueueItem,LBRACKET,lengthDist,DOT,size,LPAREN,RPAREN,RBRACKET,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,lengthDist,DOT,size,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,int,keyweights,EQ,LPAREN,Integer,RPAREN,lengthDist,DOT,get,LPAREN,i,RPAREN,SEMI,PriorityQueueItem,LT,Integer,GT,item,EQ,q,DOT,insert,LPAREN,keyweights,COMMA,Integer,DOT,MAX_VALUE,RPAREN,SEMI,items,LBRACKET,i,RBRACKET,EQ,item,SEMI,update,LPAREN,i,COMMA,keyweights,COMMA,lengthDist,COMMA,q,RPAREN,SEMI,RBRACE,WHILE,LPAREN,blackV,LT,n,RPAREN,LBRACE,PriorityQueueItem,ft,EQ,q,DOT,findMin,LPAREN,RPAREN,SEMI,int,r,EQ,LPAREN,Integer,RPAREN,ft,DOT,getItem,LPAREN,RPAREN,SEMI,ArrayList,edges,EQ,LPAREN,ArrayList,RPAREN,EtS,DOT,get,LPAREN,r,RPAREN,SEMI,WeightedEdge,edge,EQ,LPAREN,WeightedEdge,RPAREN,edges,DOT,get,LPAREN,0,RPAREN,SEMI,int,i,EQ,edge,DOT,getSource,LPAREN,RPAREN,SEMI,int,j,EQ,edge,DOT,getTarget,LPAREN,RPAREN,SEMI,distances,LBRACKET,j,RBRACKET,EQ,distances,LBRACKET,i,RBRACKET,PLUS,r,SEMI,predecessors,LBRACKET,j,RBRACKET,EQ,i,SEMI,colors,LBRACKET,j,RBRACKET,EQ,2,SEMI,blackV,PLUSPLUS,SEMI,ne,EQ,g,DOT,getArrayOfAdjacentVertices,LPAREN,j,RPAREN,SEMI,we,EQ,g,DOT,getArrayOfIncidentEdgeWeights,LPAREN,j,RPAREN,SEMI,FOR,LPAREN,int,nei,EQ,0,SEMI,nei,LT,ne,DOT,length,SEMI,nei,PLUSPLUS,RPAREN,LBRACE,int,neighbor,EQ,ne,LBRACKET,nei,RBRACKET,SEMI,IF,LPAREN,colors,LBRACKET,neighbor,RBRACKET,BANGEQ,2,RPAREN,LBRACE,int,weights,EQ,we,LBRACKET,nei,RBRACKET,SEMI,ArrayList,Nedges,EQ,LPAREN,ArrayList,RPAREN,EtS,DOT,get,LPAREN,weights,RPAREN,SEMI,Nedges,DOT,add,LPAREN,NEW,WeightedEdge,LPAREN,j,COMMA,neighbor,COMMA,weights,RPAREN,RPAREN,SEMI,EtS,DOT,put,LPAREN,weights,COMMA,Nedges,RPAREN,SEMI,RBRACE,RBRACE,q,EQ,NEW,ArrayPriorityQueue,LT,Integer,GT,LPAREN,n,RPAREN,SEMI,FOR,LPAREN,int,t,EQ,0,SEMI,t,LT,lengthDist,DOT,size,LPAREN,RPAREN,SEMI,t,PLUSPLUS,RPAREN,LBRACE,int,keyweights,EQ,LPAREN,Integer,RPAREN,lengthDist,DOT,get,LPAREN,t,RPAREN,SEMI,update,LPAREN,t,COMMA,keyweights,COMMA,lengthDist,COMMA,q,RPAREN,SEMI,RBRACE,RBRACE,RBRACE","	public void initialize(Graph<? extends Edge> g, int u,  
,			 List lengthDist, PriorityQueue q) throws IllegalArgumentException {
,		
,		//Create tables to store distinct edges(EtS) and CurrentEdges
,				EtS = new Hashtable(lengthDist.size()*2);
,			//	CEt = new Hashtable(lengthDist.size()*2);
,				
,				
,				for(int i=0; i<lengthDist.size(); i++){
,					int keyweights = (Integer) lengthDist.get(i);
,					ArrayList edges = new ArrayList();
,					EtS.put(keyweights, edges);
,					//CEt.put(keyweights, edges);
,				}
,		// check arguments
,				if (g == null) {
,					String errorMessage = ""The passed graph musn't be null."";
,					
,					throw new IllegalArgumentException(errorMessage);
,				}
,				
,				if (u < 0 || u <MASK> g.getNumberOfVertices()){
,					String errorMessage = ""The vertex with index "" + u +
,						"" is not within the passed graph."";
,					throw new IllegalArgumentException(errorMessage);
,				}
,				
,				
,				// get the number of vertices of the passed graph
,				int n = g.getNumberOfVertices();
,				int blackV = 0;
,				// initialize help arrays
,				colors = new int[n];
,				predecessors = new int[n];
,				distances = new int[n];
,				//Create priority queue for vertices
,				items = new PriorityQueueItem[n];
,				
,				int white = 0;//unvisited
,				int gray = 1; //visited, tentative distance.
,				int black = 2;//visited, distance confirmed.
,				
,				for (int v = 0; v < n; v++) {
,					colors[v] = white;
,					predecessors[v] = -1;
,					distances[v] = -1;
,				}
,				
,				// mark the start vertex as visited
,				colors[u] = black;
,				blackV++;
,				distances[u] = 0;
,				//Get neighbors
,				int[] ne = g.getArrayOfAdjacentVertices(u);
,				int[] we = g.getArrayOfIncidentEdgeWeights(u);
,			
,				for (int i = 0; i < ne.length; i++) {
,					//get neighbor
,					int neighbor =  ne[i];
,					int weights = we[i];
,					ArrayList edges = (ArrayList) EtS.get(weights);
,					edges.add(new WeightedEdge(u,neighbor,weights));
,					EtS.put(weights, edges);
,					/*
,					ArrayList CEtedges = (ArrayList) CEt.get(weights);
,					if(CEtedges.isEmpty()){
,						CEtedges.add(new WeightedEdge(u,neighbor,weights));
,						CEt.put(weights, CEtedges);
,					}*/
,				}
,				
,				items = new PriorityQueueItem[lengthDist.size()];
,				
,				
,				for(int i=0; i<lengthDist.size(); i++){
,					int keyweights = (Integer) lengthDist.get(i);
,					PriorityQueueItem<Integer> item = q.insert(keyweights, Integer.MAX_VALUE);
,					items[i] = item;
,					update(i, keyweights, lengthDist, q);
,				}
,				
,				
,				//New-Dijkstra
,				while (blackV<n){
,					//System.out.println(blackV);
,					PriorityQueueItem ft = q.findMin();
,					int r = (Integer) ft.getItem();
,					ArrayList edges = (ArrayList) EtS.get(r);
,					WeightedEdge edge = (WeightedEdge) edges.get(0);
,					int i = edge.getSource();
,					int j = edge.getTarget();
,					distances[j] = distances[i] + r;
,					predecessors[j] = i;
,					colors[j] = 2;
,					blackV++;
,					
,					ne = g.getArrayOfAdjacentVertices(j);
,					we = g.getArrayOfIncidentEdgeWeights(j);
,				
,					for (int nei = 0; nei < ne.length; nei++) {
,						//get neighbor
,						int neighbor =  ne[nei];
,						if(colors[neighbor]!=2){
,							int weights = we[nei];
,							ArrayList Nedges = (ArrayList) EtS.get(weights);
,							Nedges.add(new WeightedEdge(j,neighbor,weights));
,							EtS.put(weights, Nedges);
,						}
,					}
,					q = new ArrayPriorityQueue<Integer>(n);
,					for(int t=0; t<lengthDist.size(); t++){
,						int keyweights = (Integer) lengthDist.get(t);
,						//PriorityQueueItem<Integer> item = q.insert(keyweights, Integer.MAX_VALUE);
,						//items[t] = item;
,						update(t, keyweights, lengthDist, q);
,					}
,				}
,				
,				
,	}
"
55d71573-7c47-4448-8260-a2ed2cb04e4d,1b9f6221-64ac-4983-8573-789ab868da66,GT,"PUBLIC,void,print,LPAREN,String,padding,RPAREN,LBRACE,IF,LPAREN,tamanio,<MASK>,0,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,padding,PLUS,""array"",RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,padding,PLUS,""\t"",PLUS,tipo,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,padding,PLUS,""\t"",PLUS,id,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,padding,PLUS,""\t"",PLUS,tamanio,RPAREN,SEMI,RBRACE,ELSE,LBRACE,System,DOT,out,DOT,println,LPAREN,padding,PLUS,""var"",RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,padding,PLUS,""\t"",PLUS,tipo,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,padding,PLUS,""\t"",PLUS,id,RPAREN,SEMI,RBRACE,RBRACE","	public void print(String padding){
,		if (tamanio<MASK>0){
,			System.out.println(padding + ""array"");
,			System.out.println(padding + ""\t"" + tipo);
,			System.out.println(padding + ""\t"" + id);
,			System.out.println(padding + ""\t"" + tamanio);
,		}else{
,			System.out.println(padding + ""var"");
,			System.out.println(padding + ""\t"" + tipo);
,			System.out.println(padding + ""\t"" + id);
,		}
,	}
"
5735492c-ae75-4373-9d1e-6986d063d859,c147f61f-b684-42a4-ad57-9af87c9d8b40,LT,"PUBLIC,void,runThread,LPAREN,RPAREN,LBRACE,TRY,LBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,20,SEMI,i,PLUSPLUS,RPAREN,LBRACE,instanceInt,PLUSPLUS,SEMI,IF,LPAREN,instanceInt,EQEQ,10,RPAREN,LBRACE,Thread,DOT,sleep,LPAREN,5000,RPAREN,SEMI,RBRACE,System,DOT,err,DOT,println,LPAREN,""["",PLUS,Thread,DOT,currentThread,LPAREN,RPAREN,DOT,getId,LPAREN,RPAREN,PLUS,""]\u5F53i="",PLUS,i,PLUS,""\u83B7\u53D6staticInt \u7684\u503C:"",PLUS,instanceInt,RPAREN,SEMI,RBRACE,RBRACE,CATCH,LPAREN,InterruptedException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,RBRACE","	public void runThread() {
,		try {
,			for (int i = 0; i <MASK> 20; i++) {
,				instanceInt++;
,				// 时刻修改着静态变量instanceInt的值，第二个线程进来，instanceInt就为10了
,				if (instanceInt == 10) {
,					Thread.sleep(5000);
,				}
,				System.err.println(""["" + Thread.currentThread().getId() + ""]当i="" + i + ""获取staticInt 的值:"" + instanceInt);
,			}
,		} catch (InterruptedException e) {
,			e.printStackTrace();
,		}
,	}
"
a01c84a3-b602-47b9-879e-2c3f4cb148f7,f5ce7102-9a9c-49bd-9b8b-db20bf2ad5e9,PERCENT,"MONKEYS_AT,Override,PROTECTED,AbstractHashTableMap,DOT,HashEntryPosition,findEntry,LPAREN,K,key,RPAREN,THROWS,InvalidKeyException,LBRACE,int,avail,EQ,SUB,1,SEMI,checkKey,LPAREN,key,RPAREN,SEMI,int,i,EQ,hashValue,LPAREN,key,RPAREN,SEMI,FINAL,int,j,EQ,i,SEMI,int,k,EQ,0,SEMI,FINAL,int,aux,EQ,auxiliarHashValue,LPAREN,key,RPAREN,SEMI,DO,LBRACE,Entry,LT,K,COMMA,V,GT,e,EQ,bucket,LBRACKET,i,RBRACKET,SEMI,IF,LPAREN,e,EQEQ,null,RPAREN,LBRACE,IF,LPAREN,avail,LT,0,RPAREN,LBRACE,avail,EQ,i,SEMI,RBRACE,BREAK,SEMI,RBRACE,ELSE,IF,LPAREN,key,DOT,equals,LPAREN,e,DOT,getKey,LPAREN,RPAREN,RPAREN,RPAREN,LBRACE,RETURN,NEW,AbstractHashTableMap,DOT,HashEntryPosition,LPAREN,i,COMMA,AbstractHashTableMap,DOT,OperationType,DOT,found,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,e,EQEQ,AVAILABLE,RPAREN,LBRACE,IF,LPAREN,avail,LT,0,RPAREN,LBRACE,avail,EQ,i,SEMI,RBRACE,RBRACE,k,PLUSPLUS,SEMI,i,EQ,LPAREN,j,PLUS,k,STAR,aux,RPAREN,<MASK>,capacity,SEMI,RBRACE,WHILE,LPAREN,i,BANGEQ,j,RPAREN,SEMI,RETURN,NEW,AbstractHashTableMap,DOT,HashEntryPosition,LPAREN,avail,COMMA,AbstractHashTableMap,DOT,OperationType,DOT,notFound,RPAREN,SEMI,RBRACE","    @Override
,     protected AbstractHashTableMap.HashEntryPosition findEntry(K key) throws InvalidKeyException {
,
,        /**
,         * Los problemas comentados para prueba cuadrática también se pueden dar
,         * para este caso, pero con mucha menos probabilidad.
,         */
,        
,        int avail = -1;
,        checkKey(key);
,        int i = hashValue(key);
,        final int j = i;
,        int k = 0; //probe number
,        final int aux = auxiliarHashValue(key);
,        do {
,            Entry<K, V> e = bucket[i];
,            if (e == null) {
,                if (avail < 0) {
,                    avail = i; // key is not in table
,                }
,                break;
,            } else if (key.equals(e.getKey())) // we have found our key
,            {
,                return new AbstractHashTableMap.HashEntryPosition(i, AbstractHashTableMap.OperationType.found); // key found
,            } else if (e == AVAILABLE) { // bucket is deactivated
,                if (avail < 0) {
,                    avail = i; // remember that this slot is available
,                }    
,            }
,            k++;
,            i = (j + k*aux) <MASK> capacity; // keep looking
,        } while (i != j);
,        return new AbstractHashTableMap.HashEntryPosition(avail, AbstractHashTableMap.OperationType.notFound); // first empty or available slot
,    }
"
ab518c05-62c4-49ea-9eaa-d418788693b1,08692a0b-743b-4379-832f-befe6c248cba,PLUS,"MONKEYS_AT,Override,PROTECTED,long,evalGame,LPAREN,char,playerColour,COMMA,char,enemyColour,COMMA,Game,game,RPAREN,LBRACE,RETURN,LPAREN,LPAREN,LPAREN,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,COLON,enemyCanWinInTwoRounds,LPAREN,playerColour,COMMA,enemyColour,COMMA,game,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,COLON,enemyCanWinInTwoRounds,LPAREN,playerColour,COMMA,enemyColour,COMMA,game,RPAREN,RPAREN,COLON,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,playerCanWinInTwoRounds,LPAREN,playerColour,COMMA,enemyColour,COMMA,game,RPAREN,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,playerCanWinInTwoRounds,LPAREN,playerColour,COMMA,enemyColour,COMMA,game,RPAREN,GTEQ,0,QUES,LPAREN,enemyCanWinInTwoRounds,LPAREN,playerColour,COMMA,enemyColour,COMMA,game,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,4,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,LPAREN,2,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,4,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,playerCanWinInTwoRounds,LPAREN,playerColour,COMMA,enemyColour,COMMA,game,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,COLON,playerCanWinInTwoRounds,LPAREN,playerColour,COMMA,enemyColour,COMMA,game,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,enemyCanWinInTwoRounds,LPAREN,playerColour,COMMA,enemyColour,COMMA,game,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,COLON,enemyCanWinInTwoRounds,LPAREN,playerColour,COMMA,enemyColour,COMMA,game,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,playerCanWinInTwoRounds,LPAREN,playerColour,COMMA,enemyColour,COMMA,game,RPAREN,GTEQ,0,QUES,enemyCanWinInTwoRounds,LPAREN,playerColour,COMMA,enemyColour,COMMA,game,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,enemyCanWinInTwoRounds,LPAREN,playerColour,COMMA,enemyColour,COMMA,game,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,COLON,SUB,2,RPAREN,RPAREN,STAR,LPAREN,LPAREN,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,enemyCanWinInTwoRounds,LPAREN,playerColour,COMMA,enemyColour,COMMA,game,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,5,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,4,RPAREN,QUES,1,COLON,0,RPAREN,COLON,3,RPAREN,COLON,LPAREN,playerCanWinInTwoRounds,LPAREN,playerColour,COMMA,enemyColour,COMMA,game,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,RPAREN,COLON,enemyCanWinInTwoRounds,LPAREN,playerColour,COMMA,enemyColour,COMMA,game,RPAREN,RPAREN,COLON,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,5,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,BANGEQ,0,QUES,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,enemyCanWinInTwoRounds,LPAREN,playerColour,COMMA,enemyColour,COMMA,game,RPAREN,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,SLASH,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,COLON,1,RPAREN,RPAREN,RPAREN,COLON,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,playerCanWinInTwoRounds,LPAREN,playerColour,COMMA,enemyColour,COMMA,game,RPAREN,BANGEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,SLASH,playerCanWinInTwoRounds,LPAREN,playerColour,COMMA,enemyColour,COMMA,game,RPAREN,COLON,1,RPAREN,COLON,LPAREN,SUB,1,GTEQ,0,QUES,LPAREN,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,SUB,1,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,4,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,playerCanWinInTwoRounds,LPAREN,playerColour,COMMA,enemyColour,COMMA,game,RPAREN,COLON,LPAREN,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,enemyCanWinInTwoRounds,LPAREN,playerColour,COMMA,enemyColour,COMMA,game,RPAREN,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,SUB,5,GTEQ,0,QUES,LPAREN,playerCanWinInTwoRounds,LPAREN,playerColour,COMMA,enemyColour,COMMA,game,RPAREN,<MASK>,playerCanWinInTwoRounds,LPAREN,playerColour,COMMA,enemyColour,COMMA,game,RPAREN,RPAREN,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,4,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,playerCanWinInTwoRounds,LPAREN,playerColour,COMMA,enemyColour,COMMA,game,RPAREN,RPAREN,RPAREN,RPAREN,COLON,LPAREN,SUB,2,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,3,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,playerCanWinInTwoRounds,LPAREN,playerColour,COMMA,enemyColour,COMMA,game,RPAREN,COLON,LPAREN,LPAREN,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,COLON,enemyCanWinInTwoRounds,LPAREN,playerColour,COMMA,enemyColour,COMMA,game,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,COLON,enemyCanWinInTwoRounds,LPAREN,playerColour,COMMA,enemyColour,COMMA,game,RPAREN,RPAREN,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,SUB,1,COLON,enemyCanWinInTwoRounds,LPAREN,playerColour,COMMA,enemyColour,COMMA,game,RPAREN,RPAREN,RPAREN,RPAREN,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,COLON,SUB,2,RPAREN,GTEQ,0,QUES,playerCanWinInTwoRounds,LPAREN,playerColour,COMMA,enemyColour,COMMA,game,RPAREN,COLON,LPAREN,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,enemyCanWinInTwoRounds,LPAREN,playerColour,COMMA,enemyColour,COMMA,game,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,1,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,4,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,COLON,playerCanWinInTwoRounds,LPAREN,playerColour,COMMA,enemyColour,COMMA,game,RPAREN,RPAREN,RPAREN,RPAREN,COLON,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,0,GTEQ,0,QUES,enemyCanWinInTwoRounds,LPAREN,playerColour,COMMA,enemyColour,COMMA,game,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,LPAREN,LPAREN,enemyCanWinInTwoRounds,LPAREN,playerColour,COMMA,enemyColour,COMMA,game,RPAREN,GTEQ,0,QUES,1,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,enemyCanWinInTwoRounds,LPAREN,playerColour,COMMA,enemyColour,COMMA,game,RPAREN,COLON,enemyCanWinInTwoRounds,LPAREN,playerColour,COMMA,enemyColour,COMMA,game,RPAREN,RPAREN,COLON,LPAREN,playerCanWinInTwoRounds,LPAREN,playerColour,COMMA,enemyColour,COMMA,game,RPAREN,GTEQ,0,QUES,playerCanWinInTwoRounds,LPAREN,playerColour,COMMA,enemyColour,COMMA,game,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,STAR,LPAREN,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,enemyCanWinInTwoRounds,LPAREN,playerColour,COMMA,enemyColour,COMMA,game,RPAREN,COLON,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,RPAREN,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,6,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,COLON,LPAREN,LPAREN,LPAREN,enemyColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,GTEQ,0,QUES,enemyCanWinInTwoRounds,LPAREN,playerColour,COMMA,enemyColour,COMMA,game,RPAREN,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,0,COMMA,0,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,4,COMMA,4,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,3,GTEQ,0,QUES,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,2,COMMA,2,RPAREN,QUES,1,COLON,0,RPAREN,COLON,LPAREN,playerColour,EQEQ,game,DOT,getColourOfStone,LPAREN,3,COMMA,1,RPAREN,QUES,1,COLON,0,RPAREN,RPAREN,RPAREN,RPAREN,RPAREN,SEMI,RBRACE","    @Override
,    protected long evalGame(char playerColour, char enemyColour, Game game) {
,        return (((((playerColour == game.getColourOfStone(0, 0) ? 1 : 0) >= 0 ? (playerColour == game.getColourOfStone(0, 2) ? 1 : 0) :  enemyCanWinInTwoRounds( playerColour, enemyColour, game) ) >= 0 ? ((enemyColour == game.getColourOfStone(0, 0) ? 1 : 0) >= 0 ? (enemyColour == game.getColourOfStone(0, 0) ? 1 : 0) :  enemyCanWinInTwoRounds( playerColour, enemyColour, game) ) : ((playerColour == game.getColourOfStone(0, 0) ? 1 : 0) >= 0 ?  playerCanWinInTwoRounds( playerColour, enemyColour, game)  : (playerColour == game.getColourOfStone(0, 0) ? 1 : 0))) >= 0 ? (( playerCanWinInTwoRounds( playerColour, enemyColour, game)  >= 0 ? ( enemyCanWinInTwoRounds( playerColour, enemyColour, game)  >= 0 ? (enemyColour == game.getColourOfStone(3, 4) ? 1 : 0) : ((2 >= 0 ? (playerColour == game.getColourOfStone(2, 4) ? 1 : 0) : (enemyColour == game.getColourOfStone(0, 0) ? 1 : 0)) >= 0 ? ( playerCanWinInTwoRounds( playerColour, enemyColour, game)  >= 0 ? (enemyColour == game.getColourOfStone(1, 0) ? 1 : 0) : (enemyColour == game.getColourOfStone(5, 1) ? 1 : 0)) : (playerColour == game.getColourOfStone(0, 0) ? 1 : 0))) :  playerCanWinInTwoRounds( playerColour, enemyColour, game) ) >= 0 ? ( enemyCanWinInTwoRounds( playerColour, enemyColour, game)  >= 0 ? ((((playerColour == game.getColourOfStone(0, 0) ? 1 : 0) >= 0 ? (playerColour == game.getColourOfStone(2, 3) ? 1 : 0) :  enemyCanWinInTwoRounds( playerColour, enemyColour, game) ) >= 0 ? ( playerCanWinInTwoRounds( playerColour, enemyColour, game)  >= 0 ?  enemyCanWinInTwoRounds( playerColour, enemyColour, game)  : (enemyColour == game.getColourOfStone(0, 0) ? 1 : 0)) : ( enemyCanWinInTwoRounds( playerColour, enemyColour, game)  >= 0 ? (playerColour == game.getColourOfStone(6, 1) ? 1 : 0) : -2)) * ((((playerColour == game.getColourOfStone(0, 0) ? 1 : 0) >= 0 ?  enemyCanWinInTwoRounds( playerColour, enemyColour, game)  : (enemyColour == game.getColourOfStone(0, 0) ? 1 : 0)) >= 0 ? (enemyColour == game.getColourOfStone(0, 5) ? 1 : 0) : (playerColour == game.getColourOfStone(0, 0) ? 1 : 0)) >= 0 ? ((enemyColour == game.getColourOfStone(0, 0) ? 1 : 0) >= 0 ? (enemyColour == game.getColourOfStone(1, 4) ? 1 : 0) : 3) : ( playerCanWinInTwoRounds( playerColour, enemyColour, game)  >= 0 ? (playerColour == game.getColourOfStone(2, 2) ? 1 : 0) : (playerColour == game.getColourOfStone(3, 1) ? 1 : 0)))) :  enemyCanWinInTwoRounds( playerColour, enemyColour, game) ) : ((playerColour == game.getColourOfStone(5, 2) ? 1 : 0) >= 0 ? (enemyColour == game.getColourOfStone(0, 0) ? 1 : 0) : ((enemyColour == game.getColourOfStone(0, 0) ? 1 : 0) != 0 ? ((enemyColour == game.getColourOfStone(0, 0) ? 1 : 0) >= 0 ?  enemyCanWinInTwoRounds( playerColour, enemyColour, game)  : (playerColour == game.getColourOfStone(0, 0) ? 1 : 0)) / (enemyColour == game.getColourOfStone(0, 0) ? 1 : 0) : 1))) : ((playerColour == game.getColourOfStone(0, 0) ? 1 : 0) >= 0 ? ( playerCanWinInTwoRounds( playerColour, enemyColour, game)  != 0 ? (enemyColour == game.getColourOfStone(0, 0) ? 1 : 0) /  playerCanWinInTwoRounds( playerColour, enemyColour, game)  : 1) : (-1 >= 0 ? (((enemyColour == game.getColourOfStone(0, 0) ? 1 : 0) >= 0 ? (playerColour == game.getColourOfStone(0, 0) ? 1 : 0) : (playerColour == game.getColourOfStone(2, 2) ? 1 : 0)) >= 0 ? (((playerColour == game.getColourOfStone(0, 0) ? 1 : 0) >= 0 ? (playerColour == game.getColourOfStone(6, 1) ? 1 : 0) : (enemyColour == game.getColourOfStone(6, 2) ? 1 : 0)) >= 0 ? (-1 >= 0 ? (enemyColour == game.getColourOfStone(1, 4) ? 1 : 0) : ((enemyColour == game.getColourOfStone(0, 0) ? 1 : 0) >= 0 ?  playerCanWinInTwoRounds( playerColour, enemyColour, game)  : (((enemyColour == game.getColourOfStone(0, 0) ? 1 : 0) >= 0 ?  enemyCanWinInTwoRounds( playerColour, enemyColour, game)  : (playerColour == game.getColourOfStone(0, 0) ? 1 : 0)) >= 0 ? (-5 >= 0 ? ( playerCanWinInTwoRounds( playerColour, enemyColour, game)  <MASK>  playerCanWinInTwoRounds( playerColour, enemyColour, game) ) : (playerColour == game.getColourOfStone(2, 4) ? 1 : 0)) :  playerCanWinInTwoRounds( playerColour, enemyColour, game) ))) : (-2 >= 0 ? (enemyColour == game.getColourOfStone(6, 0) ? 1 : 0) : (enemyColour == game.getColourOfStone(6, 3) ? 1 : 0))) : (enemyColour == game.getColourOfStone(0, 0) ? 1 : 0)) : ((enemyColour == game.getColourOfStone(0, 0) ? 1 : 0) >= 0 ?  playerCanWinInTwoRounds( playerColour, enemyColour, game)  : ((((playerColour == game.getColourOfStone(0, 0) ? 1 : 0) >= 0 ? (playerColour == game.getColourOfStone(0, 2) ? 1 : 0) :  enemyCanWinInTwoRounds( playerColour, enemyColour, game) ) >= 0 ? ((enemyColour == game.getColourOfStone(0, 0) ? 1 : 0) >= 0 ? (enemyColour == game.getColourOfStone(0, 0) ? 1 : 0) :  enemyCanWinInTwoRounds( playerColour, enemyColour, game) ) : (playerColour == game.getColourOfStone(0, 0) ? 1 : 0)) >= 0 ? -1 :  enemyCanWinInTwoRounds( playerColour, enemyColour, game) ))))) >= 0 ? (((enemyColour == game.getColourOfStone(0, 0) ? 1 : 0) >= 0 ? (playerColour == game.getColourOfStone(0, 0) ? 1 : 0) : -2) >= 0 ?  playerCanWinInTwoRounds( playerColour, enemyColour, game)  : (((playerColour == game.getColourOfStone(0, 0) ? 1 : 0) >= 0 ? (playerColour == game.getColourOfStone(0, 0) ? 1 : 0) : (enemyColour == game.getColourOfStone(0, 0) ? 1 : 0)) >= 0 ? ( enemyCanWinInTwoRounds( playerColour, enemyColour, game)  >= 0 ? (enemyColour == game.getColourOfStone(0, 0) ? 1 : 0) : (enemyColour == game.getColourOfStone(0, 0) ? 1 : 0)) : ((playerColour == game.getColourOfStone(1, 2) ? 1 : 0) >= 0 ? (enemyColour == game.getColourOfStone(4, 1) ? 1 : 0) :  playerCanWinInTwoRounds( playerColour, enemyColour, game) ))) : ((enemyColour == game.getColourOfStone(0, 0) ? 1 : 0) >= 0 ? ((0 >= 0 ?  enemyCanWinInTwoRounds( playerColour, enemyColour, game)  : (enemyColour == game.getColourOfStone(2, 2) ? 1 : 0)) >= 0 ? ((enemyColour == game.getColourOfStone(0, 0) ? 1 : 0) >= 0 ? (playerColour == game.getColourOfStone(0, 0) ? 1 : 0) : ((( enemyCanWinInTwoRounds( playerColour, enemyColour, game)  >= 0 ? 1 : (enemyColour == game.getColourOfStone(0, 0) ? 1 : 0)) >= 0 ? ((enemyColour == game.getColourOfStone(2, 2) ? 1 : 0) >= 0 ?  enemyCanWinInTwoRounds( playerColour, enemyColour, game)  :  enemyCanWinInTwoRounds( playerColour, enemyColour, game) ) : ( playerCanWinInTwoRounds( playerColour, enemyColour, game)  >= 0 ?  playerCanWinInTwoRounds( playerColour, enemyColour, game)  : (enemyColour == game.getColourOfStone(0, 0) ? 1 : 0))) * ((playerColour == game.getColourOfStone(0, 0) ? 1 : 0) >= 0 ?  enemyCanWinInTwoRounds( playerColour, enemyColour, game)  : (enemyColour == game.getColourOfStone(0, 0) ? 1 : 0)))) : (playerColour == game.getColourOfStone(6, 1) ? 1 : 0)) : (((enemyColour == game.getColourOfStone(0, 0) ? 1 : 0) >= 0 ?  enemyCanWinInTwoRounds( playerColour, enemyColour, game)  : (playerColour == game.getColourOfStone(0, 0) ? 1 : 0)) >= 0 ? (playerColour == game.getColourOfStone(4, 4) ? 1 : 0) : (3 >= 0 ? (playerColour == game.getColourOfStone(2, 2) ? 1 : 0) : (playerColour == game.getColourOfStone(3, 1) ? 1 : 0)))));
,    }
"
08b41d00-9e8d-4e48-94b9-945bef00d612,8afc6a6b-d946-4d6c-b20f-6750210adf7b,LTEQ,"PUBLIC,STATIC,void,main,LPAREN,String,LBRACKET,RBRACKET,args,RPAREN,LBRACE,int,count,EQ,1,COMMA,sum,EQ,0,SEMI,WHILE,LPAREN,count,<MASK>,20,RPAREN,LBRACE,sum,PLUSEQ,count,SEMI,count,PLUSPLUS,SEMI,RBRACE,System,DOT,out,DOT,println,LPAREN,""Sumation of 1 to 20 = "",PLUS,sum,RPAREN,SEMI,RBRACE","    public static void main(String[] args) {
,        int count = 1, sum = 0;
,        while (count <MASK> 20) {
,            sum += count;
,            count++;
,        }
,        System.out.println(""Sumation of 1 to 20 = "" + sum);
,    }
"
113c5414-6c55-466b-b879-a350ab6e0ca2,4dd39984-f76f-4f1d-8c86-5b8277a59a4f,EQ,"PUBLIC,Holdable,removeItem,LPAREN,Character,itemID,RPAREN,THROWS,InvalidKeyException,LBRACE,Holdable,item,<MASK>,getInventory,LPAREN,RPAREN,DOT,removeItem,LPAREN,itemID,RPAREN,SEMI,RETURN,item,SEMI,RBRACE","	public Holdable removeItem(Character itemID) throws InvalidKeyException {
,		Holdable item <MASK> getInventory().removeItem(itemID);
,		return item;
,	}
"
789d219f-7383-4fa6-b72d-81f8985229f6,52740258-cb5a-4506-a7b0-27c7be69c55b,EQEQ,"PRIVATE,void,bContinueKeyPressed,LPAREN,java,DOT,awt,DOT,event,DOT,KeyEvent,evt,RPAREN,LBRACE,int,key,EQ,evt,DOT,getKeyCode,LPAREN,RPAREN,SEMI,IF,LPAREN,key,<MASK>,10,RPAREN,LBRACE,this,DOT,continueToGame,LPAREN,RPAREN,SEMI,RBRACE,SEMI,RBRACE","    private void bContinueKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bContinueKeyPressed
,        int key = evt.getKeyCode();
,        if (key <MASK> 10) {
,            this.continueToGame();
,        };
,    }//GEN-LAST:event_bContinueKeyPressed
"
113c5414-6c55-466b-b879-a350ab6e0ca2,1a11fe58-77c2-4c99-a4c4-3f0eaa0de2c6,EQ,"PUBLIC,void,setPowered,LPAREN,boolean,powered,RPAREN,LBRACE,this,DOT,powered,<MASK>,powered,SEMI,RBRACE","	public void setPowered(boolean powered) {
,		this.powered <MASK> powered;
,	}
"
aed9046f-504a-49f9-b9ef-f36cca22ba93,9e2bb3ed-356d-4dfa-8407-845f5267352e,SLASH,"PUBLIC,STATIC,void,main,LPAREN,String,LBRACKET,RBRACKET,args,RPAREN,LBRACE,ArrayList,LT,String,GT,outPut,EQ,NEW,ArrayList,LT,String,GT,LPAREN,RPAREN,SEMI,TRY,LBRACE,InputStreamReader,isr,EQ,NEW,InputStreamReader,LPAREN,System,DOT,in,RPAREN,SEMI,BufferedReader,br,EQ,NEW,BufferedReader,LPAREN,isr,RPAREN,SEMI,System,DOT,out,DOT,print,LPAREN,""Podaj kwot\u00C4\u2122 dochodu: "",RPAREN,SEMI,podstawa,EQ,Double,DOT,parseDouble,LPAREN,br,DOT,readLine,LPAREN,RPAREN,RPAREN,SEMI,System,DOT,out,DOT,print,LPAREN,""Typ umowy: (P)raca, (Z)lecenie: "",RPAREN,SEMI,umowa,EQ,br,DOT,readLine,LPAREN,RPAREN,DOT,charAt,LPAREN,0,RPAREN,SEMI,RBRACE,CATCH,LPAREN,Exception,ex,RPAREN,LBRACE,outPut,DOT,add,LPAREN,""B\u0139\u201A\u00C4\u2122dna kwota"",RPAREN,SEMI,System,DOT,err,DOT,println,LPAREN,ex,RPAREN,SEMI,RETURN,SEMI,RBRACE,DecimalFormat,df00,EQ,NEW,DecimalFormat,LPAREN,""#.00"",RPAREN,SEMI,DecimalFormat,df,EQ,NEW,DecimalFormat,LPAREN,""#"",RPAREN,SEMI,IF,LPAREN,umowa,EQEQ,P,RPAREN,LBRACE,outPut,DOT,add,LPAREN,""UMOWA O PRAC\u00C4\uFFFD"",RPAREN,SEMI,outPut,DOT,add,LPAREN,""Podstawa wymiaru sk\u0139\u201Aadek "",PLUS,podstawa,RPAREN,SEMI,double,oPodstawa,EQ,obliczonaPodstawa,LPAREN,podstawa,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Sk\u0139\u201Aadka na ubezpieczenie emerytalne "",PLUS,df00,DOT,format,LPAREN,s_emerytalna,RPAREN,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Sk\u0139\u201Aadka na ubezpieczenie rentowe    "",PLUS,df00,DOT,format,LPAREN,s_rentowa,RPAREN,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Sk\u0139\u201Aadka na ubezpieczenie chorobowe  "",PLUS,df00,DOT,format,LPAREN,u_chorobowe,RPAREN,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Podstawa wymiaru sk\u0139\u201Aadki na ubezpieczenie zdrowotne: "",PLUS,oPodstawa,RPAREN,SEMI,obliczUbezpieczenia,LPAREN,oPodstawa,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Sk\u0139\u201Aadka na ubezpieczenie zdrowotne: 9% = "",PLUS,df00,DOT,format,LPAREN,s_zdrow1,RPAREN,PLUS,"" 7,75% = "",PLUS,df00,DOT,format,LPAREN,s_zdrow2,RPAREN,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Koszty uzyskania przychodu w sta\u0139\u201Aej wysoko\u0139\u203Aci "",PLUS,kosztyUzyskania,RPAREN,SEMI,double,podstawaOpodat,EQ,oPodstawa,SUB,kosztyUzyskania,SEMI,double,podstawaOpodat0,EQ,Double,DOT,parseDouble,LPAREN,df,DOT,format,LPAREN,podstawaOpodat,RPAREN,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Podstawa opodatkowania "",PLUS,podstawaOpodat,PLUS,"" zaokr\u00C4\u2026glona "",PLUS,df,DOT,format,LPAREN,podstawaOpodat0,RPAREN,RPAREN,SEMI,obliczPodatek,LPAREN,podstawaOpodat0,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Zaliczka na podatek dochodowy 18 % = "",PLUS,zaliczkaNaPod,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Kwota wolna od podatku = "",PLUS,kwotaZmiejsz,RPAREN,SEMI,double,podatekPotracony,EQ,zaliczkaNaPod,SUB,kwotaZmiejsz,SEMI,outPut,DOT,add,LPAREN,""Podatek potr\u00C4\u2026cony = "",PLUS,df00,DOT,format,LPAREN,podatekPotracony,RPAREN,RPAREN,SEMI,obliczZaliczke,LPAREN,RPAREN,SEMI,zaliczkaUS0,EQ,Double,DOT,parseDouble,LPAREN,df,DOT,format,LPAREN,zaliczkaUS,RPAREN,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Zaliczka do urz\u00C4\u2122du skarbowego = "",PLUS,df00,DOT,format,LPAREN,zaliczkaUS,RPAREN,PLUS,"" po zaokr\u00C4\u2026gleniu = "",PLUS,df,DOT,format,LPAREN,zaliczkaUS0,RPAREN,RPAREN,SEMI,double,wynagrodzenie,EQ,podstawa,SUB,LPAREN,LPAREN,s_emerytalna,PLUS,s_rentowa,PLUS,u_chorobowe,RPAREN,PLUS,s_zdrow1,PLUS,zaliczkaUS0,RPAREN,SEMI,outPut,DOT,add,LPAREN,""\n"",RPAREN,SEMI,outPut,DOT,add,LPAREN,""Pracownik otrzyma wynagrodzenie netto w wysoko\u0139\u203Aci = "",PLUS,df00,DOT,format,LPAREN,wynagrodzenie,RPAREN,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,umowa,EQEQ,Z,RPAREN,LBRACE,outPut,DOT,add,LPAREN,""UMOWA-ZLECENIE"",RPAREN,SEMI,outPut,DOT,add,LPAREN,""Podstawa wymiaru sk\u0139\u201Aadek "",PLUS,podstawa,RPAREN,SEMI,double,oPodstawa,EQ,obliczonaPodstawa,LPAREN,podstawa,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Sk\u0139\u201Aadka na ubezpieczenie emerytalne "",PLUS,df00,DOT,format,LPAREN,s_emerytalna,RPAREN,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Sk\u0139\u201Aadka na ubezpieczenie rentowe    "",PLUS,df00,DOT,format,LPAREN,s_rentowa,RPAREN,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Sk\u0139\u201Aadka na ubezpieczenie chorobowe  "",PLUS,df00,DOT,format,LPAREN,u_chorobowe,RPAREN,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Podstawa wymiaru sk\u0139\u201Aadki na ubezpieczenie zdrowotne: "",PLUS,oPodstawa,RPAREN,SEMI,obliczUbezpieczenia,LPAREN,oPodstawa,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Sk\u0139\u201Aadka na ubezpieczenie zdrowotne: 9% = "",PLUS,df00,DOT,format,LPAREN,s_zdrow1,RPAREN,PLUS,"" 7,75% = "",PLUS,df00,DOT,format,LPAREN,s_zdrow2,RPAREN,RPAREN,SEMI,kwotaZmiejsz,EQ,0,SEMI,kosztyUzyskania,EQ,LPAREN,oPodstawa,STAR,20,RPAREN,<MASK>,100,SEMI,outPut,DOT,add,LPAREN,""Koszty uzyskania przychodu (sta\u0139\u201Ae) "",PLUS,kosztyUzyskania,RPAREN,SEMI,double,podstawaOpodat,EQ,oPodstawa,SUB,kosztyUzyskania,SEMI,double,podstawaOpodat0,EQ,Double,DOT,parseDouble,LPAREN,df,DOT,format,LPAREN,podstawaOpodat,RPAREN,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Podstawa opodatkowania "",PLUS,podstawaOpodat,PLUS,"" zaokr\u00C4\u2026glona "",PLUS,df,DOT,format,LPAREN,podstawaOpodat0,RPAREN,RPAREN,SEMI,obliczPodatek,LPAREN,podstawaOpodat0,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Zaliczka na podatek dochodowy 18 % = "",PLUS,zaliczkaNaPod,RPAREN,SEMI,double,podatekPotracony,EQ,zaliczkaNaPod,SEMI,outPut,DOT,add,LPAREN,""Podatek potr\u00C4\u2026cony = "",PLUS,df00,DOT,format,LPAREN,podatekPotracony,RPAREN,RPAREN,SEMI,obliczZaliczke,LPAREN,RPAREN,SEMI,zaliczkaUS0,EQ,Double,DOT,parseDouble,LPAREN,df,DOT,format,LPAREN,zaliczkaUS,RPAREN,RPAREN,SEMI,outPut,DOT,add,LPAREN,""Zaliczka do urz\u00C4\u2122du skarbowego = "",PLUS,df00,DOT,format,LPAREN,zaliczkaUS,RPAREN,PLUS,"" po zaokr\u00C4\u2026gleniu = "",PLUS,df,DOT,format,LPAREN,zaliczkaUS0,RPAREN,RPAREN,SEMI,double,wynagrodzenie,EQ,podstawa,SUB,LPAREN,LPAREN,s_emerytalna,PLUS,s_rentowa,PLUS,u_chorobowe,RPAREN,PLUS,s_zdrow1,PLUS,zaliczkaUS0,RPAREN,SEMI,outPut,DOT,add,LPAREN,""\n"",RPAREN,SEMI,outPut,DOT,add,LPAREN,""Pracownik otrzyma wynagrodzenie netto w wysoko\u0139\u203Aci = "",PLUS,df00,DOT,format,LPAREN,wynagrodzenie,RPAREN,RPAREN,SEMI,RBRACE,ELSE,LBRACE,outPut,DOT,add,LPAREN,""Nieznany typ umowy!"",RPAREN,SEMI,RBRACE,FOR,LPAREN,String,string,COLON,outPut,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,string,RPAREN,SEMI,RBRACE,RBRACE","	public static void main(String[] args) {
,		
,		ArrayList<String> outPut = new ArrayList<String>();
,		
,		try {
,			InputStreamReader isr = new InputStreamReader(System.in);
,			BufferedReader br = new BufferedReader(isr);
,			
,			System.out.print(""Podaj kwotÄ™ dochodu: "");	
,			podstawa = Double.parseDouble(br.readLine());
,			
,			System.out.print(""Typ umowy: (P)raca, (Z)lecenie: "");
,			umowa = br.readLine().charAt(0);
,			
,		} catch (Exception ex) {
,			outPut.add(""BĹ‚Ä™dna kwota"");
,			System.err.println(ex);
,			return;
,		}
,		
,		DecimalFormat df00 = new DecimalFormat(""#.00"");
,		DecimalFormat df = new DecimalFormat(""#"");
,		
,		
,		if (umowa == 'P') {
,			outPut.add(""UMOWA O PRACÄ�"");
,			outPut.add(""Podstawa wymiaru skĹ‚adek "" + podstawa);
,			double oPodstawa = obliczonaPodstawa(podstawa);
,			outPut.add(""SkĹ‚adka na ubezpieczenie emerytalne ""
,					+ df00.format(s_emerytalna));
,			outPut.add(""SkĹ‚adka na ubezpieczenie rentowe    ""
,					+ df00.format(s_rentowa));
,			outPut.add(""SkĹ‚adka na ubezpieczenie chorobowe  ""
,					+ df00.format(u_chorobowe));
,			outPut.add(""Podstawa wymiaru skĹ‚adki na ubezpieczenie zdrowotne: ""
,							+ oPodstawa);
,			obliczUbezpieczenia(oPodstawa);
,			outPut.add(""SkĹ‚adka na ubezpieczenie zdrowotne: 9% = ""
,					+ df00.format(s_zdrow1) + "" 7,75% = "" + df00.format(s_zdrow2));
,<MASK>/////////////////////////////////////////////////////
,			outPut.add( ""Koszty uzyskania przychodu w staĹ‚ej wysokoĹ›ci ""
,					+ kosztyUzyskania);
,			double podstawaOpodat = oPodstawa - kosztyUzyskania;
,			double podstawaOpodat0 = Double
,					.parseDouble(df.format(podstawaOpodat));
,			outPut.add(""Podstawa opodatkowania "" + podstawaOpodat
,					+ "" zaokrÄ…glona "" + df.format(podstawaOpodat0));
,			obliczPodatek(podstawaOpodat0);
,			outPut.add(""Zaliczka na podatek dochodowy 18 % = ""
,					+ zaliczkaNaPod);
,			outPut.add(""Kwota wolna od podatku = "" + kwotaZmiejsz);
,			double podatekPotracony = zaliczkaNaPod - kwotaZmiejsz;
,			outPut.add(""Podatek potrÄ…cony = ""
,					+ df00.format(podatekPotracony));
,			obliczZaliczke();
,			zaliczkaUS0 = Double.parseDouble(df.format(zaliczkaUS));
,			outPut.add(""Zaliczka do urzÄ™du skarbowego = ""
,					+ df00.format(zaliczkaUS) + "" po zaokrÄ…gleniu = ""
,					+ df.format(zaliczkaUS0));
,			double wynagrodzenie = podstawa
,					- ((s_emerytalna + s_rentowa + u_chorobowe) + s_zdrow1 + zaliczkaUS0);
,			outPut.add(""\n"");
,			outPut.add(""Pracownik otrzyma wynagrodzenie netto w wysokoĹ›ci = ""
,							+ df00.format(wynagrodzenie));
,		} else if (umowa == 'Z') {
,			outPut.add(""UMOWA-ZLECENIE"");
,			outPut.add(""Podstawa wymiaru skĹ‚adek "" + podstawa);
,			double oPodstawa = obliczonaPodstawa(podstawa);
,			outPut.add(""SkĹ‚adka na ubezpieczenie emerytalne ""
,					+ df00.format(s_emerytalna));
,			outPut.add(""SkĹ‚adka na ubezpieczenie rentowe    ""
,					+ df00.format(s_rentowa));
,			outPut.add(""SkĹ‚adka na ubezpieczenie chorobowe  ""
,					+ df00.format(u_chorobowe));
,			outPut.add(""Podstawa wymiaru skĹ‚adki na ubezpieczenie zdrowotne: ""
,							+ oPodstawa);
,			obliczUbezpieczenia(oPodstawa);
,			outPut.add(""SkĹ‚adka na ubezpieczenie zdrowotne: 9% = ""
,					+ df00.format(s_zdrow1) + "" 7,75% = "" + df00.format(s_zdrow2));
,			//////////////////////////////////////////////////////
,			kwotaZmiejsz = 0;
,			kosztyUzyskania = (oPodstawa * 20) / 100;
,			outPut.add(""Koszty uzyskania przychodu (staĹ‚e) ""
,					+ kosztyUzyskania);
,			double podstawaOpodat = oPodstawa - kosztyUzyskania;
,			double podstawaOpodat0 = Double.parseDouble(df.format(podstawaOpodat));
,			outPut.add(""Podstawa opodatkowania "" + podstawaOpodat
,					+ "" zaokrÄ…glona "" + df.format(podstawaOpodat0));
,			obliczPodatek(podstawaOpodat0);
,			outPut.add(""Zaliczka na podatek dochodowy 18 % = ""
,					+ zaliczkaNaPod);
,			double podatekPotracony = zaliczkaNaPod;
,			outPut.add(""Podatek potrÄ…cony = ""
,					+ df00.format(podatekPotracony));
,			obliczZaliczke();
,			zaliczkaUS0 = Double.parseDouble(df.format(zaliczkaUS));
,			outPut.add(""Zaliczka do urzÄ™du skarbowego = ""
,					+ df00.format(zaliczkaUS) + "" po zaokrÄ…gleniu = ""
,					+ df.format(zaliczkaUS0));
,			double wynagrodzenie = podstawa
,					- ((s_emerytalna + s_rentowa + u_chorobowe) + s_zdrow1 + zaliczkaUS0);
,			outPut.add(""\n"");
,			outPut.add(""Pracownik otrzyma wynagrodzenie netto w wysokoĹ›ci = ""
,							+ df00.format(wynagrodzenie));
,			
,		} else {
,			outPut.add(""Nieznany typ umowy!"");
,		}
,		
,		for (String string : outPut) {
,			System.out.println(string);
,		}
,	}
"
a4c68a60-241d-4ccc-bb34-58eb273247fe,9e43a65a-0aa5-4de0-9b25-3dd6d94ab47a,PLUS,"PUBLIC,STATIC,List,LT,String,GT,split,LPAREN,String,s,COMMA,String,separator,RPAREN,LBRACE,List,LT,String,GT,result,EQ,NEW,ArrayList,LT,GT,LPAREN,RPAREN,SEMI,int,lastIndex,EQ,0,SEMI,int,index,EQ,s,DOT,indexOf,LPAREN,separator,RPAREN,SEMI,WHILE,LPAREN,index,BANGEQ,SUB,1,RPAREN,LBRACE,String,substring,EQ,s,DOT,substring,LPAREN,lastIndex,COMMA,index,RPAREN,SEMI,IF,LPAREN,BANG,substring,DOT,equals,LPAREN,separator,RPAREN,AMPAMP,index,GT,0,RPAREN,result,DOT,add,LPAREN,substring,RPAREN,SEMI,lastIndex,EQ,index,<MASK>,separator,DOT,length,LPAREN,RPAREN,SEMI,index,EQ,s,DOT,indexOf,LPAREN,separator,COMMA,lastIndex,RPAREN,SEMI,RBRACE,IF,LPAREN,lastIndex,LT,s,DOT,length,LPAREN,RPAREN,RPAREN,result,DOT,add,LPAREN,s,DOT,substring,LPAREN,lastIndex,COMMA,s,DOT,length,LPAREN,RPAREN,RPAREN,RPAREN,SEMI,RETURN,result,SEMI,RBRACE","	public static List<String> split(String s, String separator) {
,		List<String> result = new ArrayList<>();
,		int lastIndex = 0;
,		int index = s.indexOf(separator);
,
,		while (index != -1) {
,			String substring = s.substring(lastIndex, index);
,			if (!substring.equals(separator) && index > 0)
,				result.add(substring);
,
,			lastIndex = index <MASK> separator.length();
,			index = s.indexOf(separator, lastIndex);
,		}
,		if (lastIndex < s.length())
,			result.add(s.substring(lastIndex, s.length()));
,
,		return result;
,	}
"
113c5414-6c55-466b-b879-a350ab6e0ca2,a6e9cff0-5ac3-4fce-ae43-5d599f4e18e2,EQ,"PUBLIC,FinalMap,LPAREN,ImageRegistry,skin,RPAREN,LBRACE,super,LPAREN,WIDTH,COMMA,HEIGHT,RPAREN,SEMI,this,DOT,skin,<MASK>,skin,SEMI,generateMap,LPAREN,RPAREN,SEMI,RBRACE","	public FinalMap(ImageRegistry skin) {
,		super(WIDTH, HEIGHT);
,		this.skin <MASK> skin;
,		generateMap();
,
,	}
"
9971c369-1cd4-431b-bab2-7edb0b3b68d5,29e3ffea-627a-4374-afdd-ebb6b6beef33,PLUS,"PUBLIC,LT,Company,COMMA,Dept,COMMA,SubUnit,COMMA,Employee,COMMA,Person,COMMA,Salary,GT,Person,accept,LPAREN,SybAlg,LT,Company,COMMA,Dept,COMMA,SubUnit,COMMA,Employee,COMMA,Person,COMMA,Salary,GT,alg,RPAREN,LBRACE,RETURN,alg,DOT,P,LPAREN,""_"",<MASK>,name,COMMA,address,RPAREN,SEMI,RBRACE","			public <Company, Dept, SubUnit, Employee, Person, Salary> Person accept(
,					SybAlg<Company, Dept, SubUnit, Employee, Person, Salary> alg) {
,				return alg.P(""_"" <MASK> name, address);
,			}
"
ea91ca9d-c4a2-44a2-9a1f-e35ca896736e,21e921d4-1d4f-441f-85ef-48c4775a7003,GT,"PUBLIC,char,nextClean,LPAREN,RPAREN,THROWS,JSONException,LBRACE,FOR,LPAREN,SEMI,SEMI,RPAREN,LBRACE,char,c,EQ,this,DOT,next,LPAREN,RPAREN,SEMI,IF,LPAREN,c,EQEQ,0,BARBAR,c,<MASK>, ,RPAREN,LBRACE,RETURN,c,SEMI,RBRACE,RBRACE,RBRACE","    public char nextClean() throws JSONException {
,        for (;;) {
,            char c = this.next();
,            if (c == 0 || c <MASK> ' ') {
,                return c;
,            }
,        }
,    }
"
ad0a2aad-9ad8-443c-832f-88b9f64460ed,d8618228-12e5-4a6b-abf0-ab6f62cffc8b,EQ,"PROTECTED,void,end,LPAREN,RPAREN,LBRACE,IF,LPAREN,BANG,feederSolenoid,DOT,isSetIn,LPAREN,RPAREN,RPAREN,LBRACE,feeder,DOT,isIn,<MASK>,false,SEMI,RBRACE,SmartDashboard,DOT,putBoolean,LPAREN,""ShooterIsIn"",COMMA,feeder,DOT,isIn,RPAREN,SEMI,RBRACE","    protected void end() {
,        if(!feederSolenoid.isSetIn()) {
,            feeder.isIn <MASK> false;
,        }
,        SmartDashboard.putBoolean(""ShooterIsIn"", feeder.isIn);
,    }
"
85e73bf4-198d-4e97-95ec-bfad228c11ea,681d9247-735a-46fe-b9ca-fd582618a4ef,STAR,"PUBLIC,STATIC,String,foldToASCII,LPAREN,String,string,RPAREN,LBRACE,char,LBRACKET,RBRACKET,input,EQ,string,DOT,toCharArray,LPAREN,RPAREN,SEMI,int,length,EQ,string,DOT,length,LPAREN,RPAREN,SEMI,int,outputPos,SEMI,FINAL,int,maxSizeNeeded,EQ,4,<MASK>,length,SEMI,char,LBRACKET,RBRACKET,output,EQ,NEW,char,LBRACKET,maxSizeNeeded,RBRACKET,SEMI,outputPos,EQ,0,SEMI,FOR,LPAREN,int,pos,EQ,0,SEMI,pos,LT,length,SEMI,PLUSPLUS,pos,RPAREN,LBRACE,FINAL,char,c,EQ,input,LBRACKET,pos,RBRACKET,SEMI,IF,LPAREN,c,LT,,RPAREN,LBRACE,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,c,SEMI,RBRACE,ELSE,LBRACE,SWITCH,LPAREN,c,RPAREN,LBRACE,CASE,À,COLON,CASE,Á,COLON,CASE,Â,COLON,CASE,Ã,COLON,CASE,Ä,COLON,CASE,Å,COLON,CASE,Ā,COLON,CASE,Ă,COLON,CASE,Ą,COLON,CASE,Ə,COLON,CASE,Ǎ,COLON,CASE,Ǟ,COLON,CASE,Ǡ,COLON,CASE,Ǻ,COLON,CASE,Ȁ,COLON,CASE,Ȃ,COLON,CASE,Ȧ,COLON,CASE,Ⱥ,COLON,CASE,ᴀ,COLON,CASE,Ḁ,COLON,CASE,Ạ,COLON,CASE,Ả,COLON,CASE,Ấ,COLON,CASE,Ầ,COLON,CASE,Ẩ,COLON,CASE,Ẫ,COLON,CASE,Ậ,COLON,CASE,Ắ,COLON,CASE,Ằ,COLON,CASE,Ẳ,COLON,CASE,Ẵ,COLON,CASE,Ặ,COLON,CASE,Ⓐ,COLON,CASE,Ａ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,A,SEMI,BREAK,SEMI,CASE,à,COLON,CASE,á,COLON,CASE,â,COLON,CASE,ã,COLON,CASE,ä,COLON,CASE,å,COLON,CASE,ā,COLON,CASE,ă,COLON,CASE,ą,COLON,CASE,ǎ,COLON,CASE,ǟ,COLON,CASE,ǡ,COLON,CASE,ǻ,COLON,CASE,ȁ,COLON,CASE,ȃ,COLON,CASE,ȧ,COLON,CASE,ɐ,COLON,CASE,ə,COLON,CASE,ɚ,COLON,CASE,ᶏ,COLON,CASE,ᶕ,COLON,CASE,ḁ,COLON,CASE,ẚ,COLON,CASE,ạ,COLON,CASE,ả,COLON,CASE,ấ,COLON,CASE,ầ,COLON,CASE,ẩ,COLON,CASE,ẫ,COLON,CASE,ậ,COLON,CASE,ắ,COLON,CASE,ằ,COLON,CASE,ẳ,COLON,CASE,ẵ,COLON,CASE,ặ,COLON,CASE,ₐ,COLON,CASE,ₔ,COLON,CASE,ⓐ,COLON,CASE,ⱥ,COLON,CASE,Ɐ,COLON,CASE,ａ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,a,SEMI,BREAK,SEMI,CASE,Ꜳ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,A,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,A,SEMI,BREAK,SEMI,CASE,Æ,COLON,CASE,Ǣ,COLON,CASE,Ǽ,COLON,CASE,ᴁ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,A,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,E,SEMI,BREAK,SEMI,CASE,Ꜵ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,A,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,O,SEMI,BREAK,SEMI,CASE,Ꜷ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,A,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,U,SEMI,BREAK,SEMI,CASE,Ꜹ,COLON,CASE,Ꜻ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,A,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,V,SEMI,BREAK,SEMI,CASE,Ꜽ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,A,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,Y,SEMI,BREAK,SEMI,CASE,⒜,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,(,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,a,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,),SEMI,BREAK,SEMI,CASE,ꜳ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,a,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,a,SEMI,BREAK,SEMI,CASE,æ,COLON,CASE,ǣ,COLON,CASE,ǽ,COLON,CASE,ᴂ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,a,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,e,SEMI,BREAK,SEMI,CASE,ꜵ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,a,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,o,SEMI,BREAK,SEMI,CASE,ꜷ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,a,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,u,SEMI,BREAK,SEMI,CASE,ꜹ,COLON,CASE,ꜻ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,a,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,v,SEMI,BREAK,SEMI,CASE,ꜽ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,a,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,y,SEMI,BREAK,SEMI,CASE,Ɓ,COLON,CASE,Ƃ,COLON,CASE,Ƀ,COLON,CASE,ʙ,COLON,CASE,ᴃ,COLON,CASE,Ḃ,COLON,CASE,Ḅ,COLON,CASE,Ḇ,COLON,CASE,Ⓑ,COLON,CASE,Ｂ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,B,SEMI,BREAK,SEMI,CASE,ƀ,COLON,CASE,ƃ,COLON,CASE,ɓ,COLON,CASE,ᵬ,COLON,CASE,ᶀ,COLON,CASE,ḃ,COLON,CASE,ḅ,COLON,CASE,ḇ,COLON,CASE,ⓑ,COLON,CASE,ｂ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,b,SEMI,BREAK,SEMI,CASE,⒝,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,(,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,b,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,),SEMI,BREAK,SEMI,CASE,Ç,COLON,CASE,Ć,COLON,CASE,Ĉ,COLON,CASE,Ċ,COLON,CASE,Č,COLON,CASE,Ƈ,COLON,CASE,Ȼ,COLON,CASE,ʗ,COLON,CASE,ᴄ,COLON,CASE,Ḉ,COLON,CASE,Ⓒ,COLON,CASE,Ｃ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,C,SEMI,BREAK,SEMI,CASE,ç,COLON,CASE,ć,COLON,CASE,ĉ,COLON,CASE,ċ,COLON,CASE,č,COLON,CASE,ƈ,COLON,CASE,ȼ,COLON,CASE,ɕ,COLON,CASE,ḉ,COLON,CASE,ↄ,COLON,CASE,ⓒ,COLON,CASE,Ꜿ,COLON,CASE,ꜿ,COLON,CASE,ｃ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,c,SEMI,BREAK,SEMI,CASE,⒞,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,(,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,c,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,),SEMI,BREAK,SEMI,CASE,Ð,COLON,CASE,Ď,COLON,CASE,Đ,COLON,CASE,Ɖ,COLON,CASE,Ɗ,COLON,CASE,Ƌ,COLON,CASE,ᴅ,COLON,CASE,ᴆ,COLON,CASE,Ḋ,COLON,CASE,Ḍ,COLON,CASE,Ḏ,COLON,CASE,Ḑ,COLON,CASE,Ḓ,COLON,CASE,Ⓓ,COLON,CASE,Ꝺ,COLON,CASE,Ｄ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,D,SEMI,BREAK,SEMI,CASE,ð,COLON,CASE,ď,COLON,CASE,đ,COLON,CASE,ƌ,COLON,CASE,ȡ,COLON,CASE,ɖ,COLON,CASE,ɗ,COLON,CASE,ᵭ,COLON,CASE,ᶁ,COLON,CASE,ᶑ,COLON,CASE,ḋ,COLON,CASE,ḍ,COLON,CASE,ḏ,COLON,CASE,ḑ,COLON,CASE,ḓ,COLON,CASE,ⓓ,COLON,CASE,ꝺ,COLON,CASE,ｄ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,d,SEMI,BREAK,SEMI,CASE,Ǆ,COLON,CASE,Ǳ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,D,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,Z,SEMI,BREAK,SEMI,CASE,ǅ,COLON,CASE,ǲ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,D,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,z,SEMI,BREAK,SEMI,CASE,⒟,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,(,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,d,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,),SEMI,BREAK,SEMI,CASE,ȸ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,d,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,b,SEMI,BREAK,SEMI,CASE,ǆ,COLON,CASE,ǳ,COLON,CASE,ʣ,COLON,CASE,ʥ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,d,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,z,SEMI,BREAK,SEMI,CASE,È,COLON,CASE,É,COLON,CASE,Ê,COLON,CASE,Ë,COLON,CASE,Ē,COLON,CASE,Ĕ,COLON,CASE,Ė,COLON,CASE,Ę,COLON,CASE,Ě,COLON,CASE,Ǝ,COLON,CASE,Ɛ,COLON,CASE,Ȅ,COLON,CASE,Ȇ,COLON,CASE,Ȩ,COLON,CASE,Ɇ,COLON,CASE,ᴇ,COLON,CASE,Ḕ,COLON,CASE,Ḗ,COLON,CASE,Ḙ,COLON,CASE,Ḛ,COLON,CASE,Ḝ,COLON,CASE,Ẹ,COLON,CASE,Ẻ,COLON,CASE,Ẽ,COLON,CASE,Ế,COLON,CASE,Ề,COLON,CASE,Ể,COLON,CASE,Ễ,COLON,CASE,Ệ,COLON,CASE,Ⓔ,COLON,CASE,ⱻ,COLON,CASE,Ｅ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,E,SEMI,BREAK,SEMI,CASE,è,COLON,CASE,é,COLON,CASE,ê,COLON,CASE,ë,COLON,CASE,ē,COLON,CASE,ĕ,COLON,CASE,ė,COLON,CASE,ę,COLON,CASE,ě,COLON,CASE,ǝ,COLON,CASE,ȅ,COLON,CASE,ȇ,COLON,CASE,ȩ,COLON,CASE,ɇ,COLON,CASE,ɘ,COLON,CASE,ɛ,COLON,CASE,ɜ,COLON,CASE,ɝ,COLON,CASE,ɞ,COLON,CASE,ʚ,COLON,CASE,ᴈ,COLON,CASE,ᶒ,COLON,CASE,ᶓ,COLON,CASE,ᶔ,COLON,CASE,ḕ,COLON,CASE,ḗ,COLON,CASE,ḙ,COLON,CASE,ḛ,COLON,CASE,ḝ,COLON,CASE,ẹ,COLON,CASE,ẻ,COLON,CASE,ẽ,COLON,CASE,ế,COLON,CASE,ề,COLON,CASE,ể,COLON,CASE,ễ,COLON,CASE,ệ,COLON,CASE,ₑ,COLON,CASE,ⓔ,COLON,CASE,ⱸ,COLON,CASE,ｅ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,e,SEMI,BREAK,SEMI,CASE,⒠,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,(,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,e,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,),SEMI,BREAK,SEMI,CASE,Ƒ,COLON,CASE,Ḟ,COLON,CASE,Ⓕ,COLON,CASE,ꜰ,COLON,CASE,Ꝼ,COLON,CASE,ꟻ,COLON,CASE,Ｆ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,F,SEMI,BREAK,SEMI,CASE,ƒ,COLON,CASE,ᵮ,COLON,CASE,ᶂ,COLON,CASE,ḟ,COLON,CASE,ẛ,COLON,CASE,ⓕ,COLON,CASE,ꝼ,COLON,CASE,ｆ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,f,SEMI,BREAK,SEMI,CASE,⒡,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,(,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,f,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,),SEMI,BREAK,SEMI,CASE,ﬀ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,f,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,f,SEMI,BREAK,SEMI,CASE,ﬃ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,f,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,f,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,i,SEMI,BREAK,SEMI,CASE,ﬄ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,f,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,f,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,l,SEMI,BREAK,SEMI,CASE,ﬁ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,f,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,i,SEMI,BREAK,SEMI,CASE,ﬂ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,f,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,l,SEMI,BREAK,SEMI,CASE,Ĝ,COLON,CASE,Ğ,COLON,CASE,Ġ,COLON,CASE,Ģ,COLON,CASE,Ɠ,COLON,CASE,Ǥ,COLON,CASE,ǥ,COLON,CASE,Ǧ,COLON,CASE,ǧ,COLON,CASE,Ǵ,COLON,CASE,ɢ,COLON,CASE,ʛ,COLON,CASE,Ḡ,COLON,CASE,Ⓖ,COLON,CASE,Ᵹ,COLON,CASE,Ꝿ,COLON,CASE,Ｇ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,G,SEMI,BREAK,SEMI,CASE,ĝ,COLON,CASE,ğ,COLON,CASE,ġ,COLON,CASE,ģ,COLON,CASE,ǵ,COLON,CASE,ɠ,COLON,CASE,ɡ,COLON,CASE,ᵷ,COLON,CASE,ᵹ,COLON,CASE,ᶃ,COLON,CASE,ḡ,COLON,CASE,ⓖ,COLON,CASE,ꝿ,COLON,CASE,ｇ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,g,SEMI,BREAK,SEMI,CASE,⒢,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,(,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,g,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,),SEMI,BREAK,SEMI,CASE,Ĥ,COLON,CASE,Ħ,COLON,CASE,Ȟ,COLON,CASE,ʜ,COLON,CASE,Ḣ,COLON,CASE,Ḥ,COLON,CASE,Ḧ,COLON,CASE,Ḩ,COLON,CASE,Ḫ,COLON,CASE,Ⓗ,COLON,CASE,Ⱨ,COLON,CASE,Ⱶ,COLON,CASE,Ｈ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,H,SEMI,BREAK,SEMI,CASE,ĥ,COLON,CASE,ħ,COLON,CASE,ȟ,COLON,CASE,ɥ,COLON,CASE,ɦ,COLON,CASE,ʮ,COLON,CASE,ʯ,COLON,CASE,ḣ,COLON,CASE,ḥ,COLON,CASE,ḧ,COLON,CASE,ḩ,COLON,CASE,ḫ,COLON,CASE,ẖ,COLON,CASE,ⓗ,COLON,CASE,ⱨ,COLON,CASE,ⱶ,COLON,CASE,ｈ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,h,SEMI,BREAK,SEMI,CASE,Ƕ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,H,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,V,SEMI,BREAK,SEMI,CASE,⒣,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,(,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,h,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,),SEMI,BREAK,SEMI,CASE,ƕ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,h,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,v,SEMI,BREAK,SEMI,CASE,Ì,COLON,CASE,Í,COLON,CASE,Î,COLON,CASE,Ï,COLON,CASE,Ĩ,COLON,CASE,Ī,COLON,CASE,Ĭ,COLON,CASE,Į,COLON,CASE,İ,COLON,CASE,Ɩ,COLON,CASE,Ɨ,COLON,CASE,Ǐ,COLON,CASE,Ȉ,COLON,CASE,Ȋ,COLON,CASE,ɪ,COLON,CASE,ᵻ,COLON,CASE,Ḭ,COLON,CASE,Ḯ,COLON,CASE,Ỉ,COLON,CASE,Ị,COLON,CASE,Ⓘ,COLON,CASE,ꟾ,COLON,CASE,Ｉ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,I,SEMI,BREAK,SEMI,CASE,ì,COLON,CASE,í,COLON,CASE,î,COLON,CASE,ï,COLON,CASE,ĩ,COLON,CASE,ī,COLON,CASE,ĭ,COLON,CASE,į,COLON,CASE,ı,COLON,CASE,ǐ,COLON,CASE,ȉ,COLON,CASE,ȋ,COLON,CASE,ɨ,COLON,CASE,ᴉ,COLON,CASE,ᵢ,COLON,CASE,ᵼ,COLON,CASE,ᶖ,COLON,CASE,ḭ,COLON,CASE,ḯ,COLON,CASE,ỉ,COLON,CASE,ị,COLON,CASE,ⁱ,COLON,CASE,ⓘ,COLON,CASE,ｉ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,i,SEMI,BREAK,SEMI,CASE,Ĳ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,I,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,J,SEMI,BREAK,SEMI,CASE,⒤,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,(,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,i,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,),SEMI,BREAK,SEMI,CASE,ĳ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,i,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,j,SEMI,BREAK,SEMI,CASE,Ĵ,COLON,CASE,Ɉ,COLON,CASE,ᴊ,COLON,CASE,Ⓙ,COLON,CASE,Ｊ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,J,SEMI,BREAK,SEMI,CASE,ĵ,COLON,CASE,ǰ,COLON,CASE,ȷ,COLON,CASE,ɉ,COLON,CASE,ɟ,COLON,CASE,ʄ,COLON,CASE,ʝ,COLON,CASE,ⓙ,COLON,CASE,ⱼ,COLON,CASE,ｊ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,j,SEMI,BREAK,SEMI,CASE,⒥,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,(,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,j,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,),SEMI,BREAK,SEMI,CASE,Ķ,COLON,CASE,Ƙ,COLON,CASE,Ǩ,COLON,CASE,ᴋ,COLON,CASE,Ḱ,COLON,CASE,Ḳ,COLON,CASE,Ḵ,COLON,CASE,Ⓚ,COLON,CASE,Ⱪ,COLON,CASE,Ꝁ,COLON,CASE,Ꝃ,COLON,CASE,Ꝅ,COLON,CASE,Ｋ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,K,SEMI,BREAK,SEMI,CASE,ķ,COLON,CASE,ƙ,COLON,CASE,ǩ,COLON,CASE,ʞ,COLON,CASE,ᶄ,COLON,CASE,ḱ,COLON,CASE,ḳ,COLON,CASE,ḵ,COLON,CASE,ⓚ,COLON,CASE,ⱪ,COLON,CASE,ꝁ,COLON,CASE,ꝃ,COLON,CASE,ꝅ,COLON,CASE,ｋ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,k,SEMI,BREAK,SEMI,CASE,⒦,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,(,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,k,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,),SEMI,BREAK,SEMI,CASE,Ĺ,COLON,CASE,Ļ,COLON,CASE,Ľ,COLON,CASE,Ŀ,COLON,CASE,Ł,COLON,CASE,Ƚ,COLON,CASE,ʟ,COLON,CASE,ᴌ,COLON,CASE,Ḷ,COLON,CASE,Ḹ,COLON,CASE,Ḻ,COLON,CASE,Ḽ,COLON,CASE,Ⓛ,COLON,CASE,Ⱡ,COLON,CASE,Ɫ,COLON,CASE,Ꝇ,COLON,CASE,Ꝉ,COLON,CASE,Ꞁ,COLON,CASE,Ｌ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,L,SEMI,BREAK,SEMI,CASE,ĺ,COLON,CASE,ļ,COLON,CASE,ľ,COLON,CASE,ŀ,COLON,CASE,ł,COLON,CASE,ƚ,COLON,CASE,ȴ,COLON,CASE,ɫ,COLON,CASE,ɬ,COLON,CASE,ɭ,COLON,CASE,ᶅ,COLON,CASE,ḷ,COLON,CASE,ḹ,COLON,CASE,ḻ,COLON,CASE,ḽ,COLON,CASE,ⓛ,COLON,CASE,ⱡ,COLON,CASE,ꝇ,COLON,CASE,ꝉ,COLON,CASE,ꞁ,COLON,CASE,ｌ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,l,SEMI,BREAK,SEMI,CASE,Ǉ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,L,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,J,SEMI,BREAK,SEMI,CASE,Ỻ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,L,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,L,SEMI,BREAK,SEMI,CASE,ǈ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,L,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,j,SEMI,BREAK,SEMI,CASE,⒧,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,(,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,l,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,),SEMI,BREAK,SEMI,CASE,ǉ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,l,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,j,SEMI,BREAK,SEMI,CASE,ỻ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,l,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,l,SEMI,BREAK,SEMI,CASE,ʪ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,l,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,s,SEMI,BREAK,SEMI,CASE,ʫ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,l,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,z,SEMI,BREAK,SEMI,CASE,Ɯ,COLON,CASE,ᴍ,COLON,CASE,Ḿ,COLON,CASE,Ṁ,COLON,CASE,Ṃ,COLON,CASE,Ⓜ,COLON,CASE,Ɱ,COLON,CASE,ꟽ,COLON,CASE,ꟿ,COLON,CASE,Ｍ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,M,SEMI,BREAK,SEMI,CASE,ɯ,COLON,CASE,ɰ,COLON,CASE,ɱ,COLON,CASE,ᵯ,COLON,CASE,ᶆ,COLON,CASE,ḿ,COLON,CASE,ṁ,COLON,CASE,ṃ,COLON,CASE,ⓜ,COLON,CASE,ｍ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,m,SEMI,BREAK,SEMI,CASE,⒨,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,(,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,m,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,),SEMI,BREAK,SEMI,CASE,Ñ,COLON,CASE,Ń,COLON,CASE,Ņ,COLON,CASE,Ň,COLON,CASE,Ŋ,COLON,CASE,Ɲ,COLON,CASE,Ǹ,COLON,CASE,Ƞ,COLON,CASE,ɴ,COLON,CASE,ᴎ,COLON,CASE,Ṅ,COLON,CASE,Ṇ,COLON,CASE,Ṉ,COLON,CASE,Ṋ,COLON,CASE,Ⓝ,COLON,CASE,Ｎ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,N,SEMI,BREAK,SEMI,CASE,ñ,COLON,CASE,ń,COLON,CASE,ņ,COLON,CASE,ň,COLON,CASE,ŉ,COLON,CASE,ŋ,COLON,CASE,ƞ,COLON,CASE,ǹ,COLON,CASE,ȵ,COLON,CASE,ɲ,COLON,CASE,ɳ,COLON,CASE,ᵰ,COLON,CASE,ᶇ,COLON,CASE,ṅ,COLON,CASE,ṇ,COLON,CASE,ṉ,COLON,CASE,ṋ,COLON,CASE,ⁿ,COLON,CASE,ⓝ,COLON,CASE,ｎ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,n,SEMI,BREAK,SEMI,CASE,Ǌ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,N,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,J,SEMI,BREAK,SEMI,CASE,ǋ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,N,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,j,SEMI,BREAK,SEMI,CASE,⒩,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,(,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,n,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,),SEMI,BREAK,SEMI,CASE,ǌ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,n,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,j,SEMI,BREAK,SEMI,CASE,Ò,COLON,CASE,Ó,COLON,CASE,Ô,COLON,CASE,Õ,COLON,CASE,Ö,COLON,CASE,Ø,COLON,CASE,Ō,COLON,CASE,Ŏ,COLON,CASE,Ő,COLON,CASE,Ɔ,COLON,CASE,Ɵ,COLON,CASE,Ơ,COLON,CASE,Ǒ,COLON,CASE,Ǫ,COLON,CASE,Ǭ,COLON,CASE,Ǿ,COLON,CASE,Ȍ,COLON,CASE,Ȏ,COLON,CASE,Ȫ,COLON,CASE,Ȭ,COLON,CASE,Ȯ,COLON,CASE,Ȱ,COLON,CASE,ᴏ,COLON,CASE,ᴐ,COLON,CASE,Ṍ,COLON,CASE,Ṏ,COLON,CASE,Ṑ,COLON,CASE,Ṓ,COLON,CASE,Ọ,COLON,CASE,Ỏ,COLON,CASE,Ố,COLON,CASE,Ồ,COLON,CASE,Ổ,COLON,CASE,Ỗ,COLON,CASE,Ộ,COLON,CASE,Ớ,COLON,CASE,Ờ,COLON,CASE,Ở,COLON,CASE,Ỡ,COLON,CASE,Ợ,COLON,CASE,Ⓞ,COLON,CASE,Ꝋ,COLON,CASE,Ꝍ,COLON,CASE,Ｏ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,O,SEMI,BREAK,SEMI,CASE,ò,COLON,CASE,ó,COLON,CASE,ô,COLON,CASE,õ,COLON,CASE,ö,COLON,CASE,ø,COLON,CASE,ō,COLON,CASE,ŏ,COLON,CASE,ő,COLON,CASE,ơ,COLON,CASE,ǒ,COLON,CASE,ǫ,COLON,CASE,ǭ,COLON,CASE,ǿ,COLON,CASE,ȍ,COLON,CASE,ȏ,COLON,CASE,ȫ,COLON,CASE,ȭ,COLON,CASE,ȯ,COLON,CASE,ȱ,COLON,CASE,ɔ,COLON,CASE,ɵ,COLON,CASE,ᴖ,COLON,CASE,ᴗ,COLON,CASE,ᶗ,COLON,CASE,ṍ,COLON,CASE,ṏ,COLON,CASE,ṑ,COLON,CASE,ṓ,COLON,CASE,ọ,COLON,CASE,ỏ,COLON,CASE,ố,COLON,CASE,ồ,COLON,CASE,ổ,COLON,CASE,ỗ,COLON,CASE,ộ,COLON,CASE,ớ,COLON,CASE,ờ,COLON,CASE,ở,COLON,CASE,ỡ,COLON,CASE,ợ,COLON,CASE,ₒ,COLON,CASE,ⓞ,COLON,CASE,ⱺ,COLON,CASE,ꝋ,COLON,CASE,ꝍ,COLON,CASE,ｏ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,o,SEMI,BREAK,SEMI,CASE,Œ,COLON,CASE,ɶ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,O,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,E,SEMI,BREAK,SEMI,CASE,Ꝏ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,O,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,O,SEMI,BREAK,SEMI,CASE,Ȣ,COLON,CASE,ᴕ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,O,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,U,SEMI,BREAK,SEMI,CASE,⒪,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,(,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,o,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,),SEMI,BREAK,SEMI,CASE,œ,COLON,CASE,ᴔ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,o,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,e,SEMI,BREAK,SEMI,CASE,ꝏ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,o,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,o,SEMI,BREAK,SEMI,CASE,ȣ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,o,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,u,SEMI,BREAK,SEMI,CASE,Ƥ,COLON,CASE,ᴘ,COLON,CASE,Ṕ,COLON,CASE,Ṗ,COLON,CASE,Ⓟ,COLON,CASE,Ᵽ,COLON,CASE,Ꝑ,COLON,CASE,Ꝓ,COLON,CASE,Ꝕ,COLON,CASE,Ｐ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,P,SEMI,BREAK,SEMI,CASE,ƥ,COLON,CASE,ᵱ,COLON,CASE,ᵽ,COLON,CASE,ᶈ,COLON,CASE,ṕ,COLON,CASE,ṗ,COLON,CASE,ⓟ,COLON,CASE,ꝑ,COLON,CASE,ꝓ,COLON,CASE,ꝕ,COLON,CASE,ꟼ,COLON,CASE,ｐ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,p,SEMI,BREAK,SEMI,CASE,⒫,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,(,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,p,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,),SEMI,BREAK,SEMI,CASE,Ɋ,COLON,CASE,Ⓠ,COLON,CASE,Ꝗ,COLON,CASE,Ꝙ,COLON,CASE,Ｑ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,Q,SEMI,BREAK,SEMI,CASE,ĸ,COLON,CASE,ɋ,COLON,CASE,ʠ,COLON,CASE,ⓠ,COLON,CASE,ꝗ,COLON,CASE,ꝙ,COLON,CASE,ｑ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,q,SEMI,BREAK,SEMI,CASE,⒬,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,(,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,q,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,),SEMI,BREAK,SEMI,CASE,ȹ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,q,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,p,SEMI,BREAK,SEMI,CASE,Ŕ,COLON,CASE,Ŗ,COLON,CASE,Ř,COLON,CASE,Ȑ,COLON,CASE,Ȓ,COLON,CASE,Ɍ,COLON,CASE,ʀ,COLON,CASE,ʁ,COLON,CASE,ᴙ,COLON,CASE,ᴚ,COLON,CASE,Ṙ,COLON,CASE,Ṛ,COLON,CASE,Ṝ,COLON,CASE,Ṟ,COLON,CASE,Ⓡ,COLON,CASE,Ɽ,COLON,CASE,Ꝛ,COLON,CASE,Ꞃ,COLON,CASE,Ｒ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,R,SEMI,BREAK,SEMI,CASE,ŕ,COLON,CASE,ŗ,COLON,CASE,ř,COLON,CASE,ȑ,COLON,CASE,ȓ,COLON,CASE,ɍ,COLON,CASE,ɼ,COLON,CASE,ɽ,COLON,CASE,ɾ,COLON,CASE,ɿ,COLON,CASE,ᵣ,COLON,CASE,ᵲ,COLON,CASE,ᵳ,COLON,CASE,ᶉ,COLON,CASE,ṙ,COLON,CASE,ṛ,COLON,CASE,ṝ,COLON,CASE,ṟ,COLON,CASE,ⓡ,COLON,CASE,ꝛ,COLON,CASE,ꞃ,COLON,CASE,ｒ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,r,SEMI,BREAK,SEMI,CASE,⒭,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,(,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,r,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,),SEMI,BREAK,SEMI,CASE,Ś,COLON,CASE,Ŝ,COLON,CASE,Ş,COLON,CASE,Š,COLON,CASE,Ș,COLON,CASE,Ṡ,COLON,CASE,Ṣ,COLON,CASE,Ṥ,COLON,CASE,Ṧ,COLON,CASE,Ṩ,COLON,CASE,Ⓢ,COLON,CASE,ꜱ,COLON,CASE,ꞅ,COLON,CASE,Ｓ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,S,SEMI,BREAK,SEMI,CASE,ś,COLON,CASE,ŝ,COLON,CASE,ş,COLON,CASE,š,COLON,CASE,ſ,COLON,CASE,ș,COLON,CASE,ȿ,COLON,CASE,ʂ,COLON,CASE,ᵴ,COLON,CASE,ᶊ,COLON,CASE,ṡ,COLON,CASE,ṣ,COLON,CASE,ṥ,COLON,CASE,ṧ,COLON,CASE,ṩ,COLON,CASE,ẜ,COLON,CASE,ẝ,COLON,CASE,ⓢ,COLON,CASE,Ꞅ,COLON,CASE,ｓ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,s,SEMI,BREAK,SEMI,CASE,ẞ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,S,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,S,SEMI,BREAK,SEMI,CASE,⒮,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,(,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,s,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,),SEMI,BREAK,SEMI,CASE,ß,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,s,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,s,SEMI,BREAK,SEMI,CASE,ﬆ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,s,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,t,SEMI,BREAK,SEMI,CASE,Ţ,COLON,CASE,Ť,COLON,CASE,Ŧ,COLON,CASE,Ƭ,COLON,CASE,Ʈ,COLON,CASE,Ț,COLON,CASE,Ⱦ,COLON,CASE,ᴛ,COLON,CASE,Ṫ,COLON,CASE,Ṭ,COLON,CASE,Ṯ,COLON,CASE,Ṱ,COLON,CASE,Ⓣ,COLON,CASE,Ꞇ,COLON,CASE,Ｔ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,T,SEMI,BREAK,SEMI,CASE,ţ,COLON,CASE,ť,COLON,CASE,ŧ,COLON,CASE,ƫ,COLON,CASE,ƭ,COLON,CASE,ț,COLON,CASE,ȶ,COLON,CASE,ʇ,COLON,CASE,ʈ,COLON,CASE,ᵵ,COLON,CASE,ṫ,COLON,CASE,ṭ,COLON,CASE,ṯ,COLON,CASE,ṱ,COLON,CASE,ẗ,COLON,CASE,ⓣ,COLON,CASE,ⱦ,COLON,CASE,ｔ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,t,SEMI,BREAK,SEMI,CASE,Þ,COLON,CASE,Ꝧ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,T,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,H,SEMI,BREAK,SEMI,CASE,Ꜩ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,T,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,Z,SEMI,BREAK,SEMI,CASE,⒯,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,(,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,t,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,),SEMI,BREAK,SEMI,CASE,ʨ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,t,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,c,SEMI,BREAK,SEMI,CASE,þ,COLON,CASE,ᵺ,COLON,CASE,ꝧ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,t,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,h,SEMI,BREAK,SEMI,CASE,ʦ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,t,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,s,SEMI,BREAK,SEMI,CASE,ꜩ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,t,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,z,SEMI,BREAK,SEMI,CASE,Ù,COLON,CASE,Ú,COLON,CASE,Û,COLON,CASE,Ü,COLON,CASE,Ũ,COLON,CASE,Ū,COLON,CASE,Ŭ,COLON,CASE,Ů,COLON,CASE,Ű,COLON,CASE,Ų,COLON,CASE,Ư,COLON,CASE,Ǔ,COLON,CASE,Ǖ,COLON,CASE,Ǘ,COLON,CASE,Ǚ,COLON,CASE,Ǜ,COLON,CASE,Ȕ,COLON,CASE,Ȗ,COLON,CASE,Ʉ,COLON,CASE,ᴜ,COLON,CASE,ᵾ,COLON,CASE,Ṳ,COLON,CASE,Ṵ,COLON,CASE,Ṷ,COLON,CASE,Ṹ,COLON,CASE,Ṻ,COLON,CASE,Ụ,COLON,CASE,Ủ,COLON,CASE,Ứ,COLON,CASE,Ừ,COLON,CASE,Ử,COLON,CASE,Ữ,COLON,CASE,Ự,COLON,CASE,Ⓤ,COLON,CASE,Ｕ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,U,SEMI,BREAK,SEMI,CASE,ù,COLON,CASE,ú,COLON,CASE,û,COLON,CASE,ü,COLON,CASE,ũ,COLON,CASE,ū,COLON,CASE,ŭ,COLON,CASE,ů,COLON,CASE,ű,COLON,CASE,ų,COLON,CASE,ư,COLON,CASE,ǔ,COLON,CASE,ǖ,COLON,CASE,ǘ,COLON,CASE,ǚ,COLON,CASE,ǜ,COLON,CASE,ȕ,COLON,CASE,ȗ,COLON,CASE,ʉ,COLON,CASE,ᵤ,COLON,CASE,ᶙ,COLON,CASE,ṳ,COLON,CASE,ṵ,COLON,CASE,ṷ,COLON,CASE,ṹ,COLON,CASE,ṻ,COLON,CASE,ụ,COLON,CASE,ủ,COLON,CASE,ứ,COLON,CASE,ừ,COLON,CASE,ử,COLON,CASE,ữ,COLON,CASE,ự,COLON,CASE,ⓤ,COLON,CASE,ｕ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,u,SEMI,BREAK,SEMI,CASE,⒰,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,(,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,u,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,),SEMI,BREAK,SEMI,CASE,ᵫ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,u,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,e,SEMI,BREAK,SEMI,CASE,Ʋ,COLON,CASE,Ʌ,COLON,CASE,ᴠ,COLON,CASE,Ṽ,COLON,CASE,Ṿ,COLON,CASE,Ỽ,COLON,CASE,Ⓥ,COLON,CASE,Ꝟ,COLON,CASE,Ꝩ,COLON,CASE,Ｖ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,V,SEMI,BREAK,SEMI,CASE,ʋ,COLON,CASE,ʌ,COLON,CASE,ᵥ,COLON,CASE,ᶌ,COLON,CASE,ṽ,COLON,CASE,ṿ,COLON,CASE,ⓥ,COLON,CASE,ⱱ,COLON,CASE,ⱴ,COLON,CASE,ꝟ,COLON,CASE,ｖ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,v,SEMI,BREAK,SEMI,CASE,Ꝡ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,V,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,Y,SEMI,BREAK,SEMI,CASE,⒱,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,(,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,v,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,),SEMI,BREAK,SEMI,CASE,ꝡ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,v,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,y,SEMI,BREAK,SEMI,CASE,Ŵ,COLON,CASE,Ƿ,COLON,CASE,ᴡ,COLON,CASE,Ẁ,COLON,CASE,Ẃ,COLON,CASE,Ẅ,COLON,CASE,Ẇ,COLON,CASE,Ẉ,COLON,CASE,Ⓦ,COLON,CASE,Ⱳ,COLON,CASE,Ｗ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,W,SEMI,BREAK,SEMI,CASE,ŵ,COLON,CASE,ƿ,COLON,CASE,ʍ,COLON,CASE,ẁ,COLON,CASE,ẃ,COLON,CASE,ẅ,COLON,CASE,ẇ,COLON,CASE,ẉ,COLON,CASE,ẘ,COLON,CASE,ⓦ,COLON,CASE,ⱳ,COLON,CASE,ｗ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,w,SEMI,BREAK,SEMI,CASE,⒲,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,(,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,w,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,),SEMI,BREAK,SEMI,CASE,Ẋ,COLON,CASE,Ẍ,COLON,CASE,Ⓧ,COLON,CASE,Ｘ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,X,SEMI,BREAK,SEMI,CASE,ᶍ,COLON,CASE,ẋ,COLON,CASE,ẍ,COLON,CASE,ₓ,COLON,CASE,ⓧ,COLON,CASE,ｘ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,x,SEMI,BREAK,SEMI,CASE,⒳,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,(,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,x,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,),SEMI,BREAK,SEMI,CASE,Ý,COLON,CASE,Ŷ,COLON,CASE,Ÿ,COLON,CASE,Ƴ,COLON,CASE,Ȳ,COLON,CASE,Ɏ,COLON,CASE,ʏ,COLON,CASE,Ẏ,COLON,CASE,Ỳ,COLON,CASE,Ỵ,COLON,CASE,Ỷ,COLON,CASE,Ỹ,COLON,CASE,Ỿ,COLON,CASE,Ⓨ,COLON,CASE,Ｙ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,Y,SEMI,BREAK,SEMI,CASE,ý,COLON,CASE,ÿ,COLON,CASE,ŷ,COLON,CASE,ƴ,COLON,CASE,ȳ,COLON,CASE,ɏ,COLON,CASE,ʎ,COLON,CASE,ẏ,COLON,CASE,ẙ,COLON,CASE,ỳ,COLON,CASE,ỵ,COLON,CASE,ỷ,COLON,CASE,ỹ,COLON,CASE,ỿ,COLON,CASE,ⓨ,COLON,CASE,ｙ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,y,SEMI,BREAK,SEMI,CASE,⒴,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,(,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,y,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,),SEMI,BREAK,SEMI,CASE,Ź,COLON,CASE,Ż,COLON,CASE,Ž,COLON,CASE,Ƶ,COLON,CASE,Ȝ,COLON,CASE,Ȥ,COLON,CASE,ᴢ,COLON,CASE,Ẑ,COLON,CASE,Ẓ,COLON,CASE,Ẕ,COLON,CASE,Ⓩ,COLON,CASE,Ⱬ,COLON,CASE,Ꝣ,COLON,CASE,Ｚ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,Z,SEMI,BREAK,SEMI,CASE,ź,COLON,CASE,ż,COLON,CASE,ž,COLON,CASE,ƶ,COLON,CASE,ȝ,COLON,CASE,ȥ,COLON,CASE,ɀ,COLON,CASE,ʐ,COLON,CASE,ʑ,COLON,CASE,ᵶ,COLON,CASE,ᶎ,COLON,CASE,ẑ,COLON,CASE,ẓ,COLON,CASE,ẕ,COLON,CASE,ⓩ,COLON,CASE,ⱬ,COLON,CASE,ꝣ,COLON,CASE,ｚ,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,z,SEMI,BREAK,SEMI,CASE,⒵,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,(,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,z,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,),SEMI,BREAK,SEMI,CASE,⁰,COLON,CASE,₀,COLON,CASE,⓪,COLON,CASE,⓿,COLON,CASE,０,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,0,SEMI,BREAK,SEMI,CASE,¹,COLON,CASE,₁,COLON,CASE,①,COLON,CASE,⓵,COLON,CASE,❶,COLON,CASE,➀,COLON,CASE,➊,COLON,CASE,１,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,1,SEMI,BREAK,SEMI,CASE,⒈,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,1,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,.,SEMI,BREAK,SEMI,CASE,⑴,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,(,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,1,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,),SEMI,BREAK,SEMI,CASE,²,COLON,CASE,₂,COLON,CASE,②,COLON,CASE,⓶,COLON,CASE,❷,COLON,CASE,➁,COLON,CASE,➋,COLON,CASE,２,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,2,SEMI,BREAK,SEMI,CASE,⒉,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,2,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,.,SEMI,BREAK,SEMI,CASE,⑵,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,(,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,2,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,),SEMI,BREAK,SEMI,CASE,³,COLON,CASE,₃,COLON,CASE,③,COLON,CASE,⓷,COLON,CASE,❸,COLON,CASE,➂,COLON,CASE,➌,COLON,CASE,３,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,3,SEMI,BREAK,SEMI,CASE,⒊,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,3,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,.,SEMI,BREAK,SEMI,CASE,⑶,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,(,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,3,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,),SEMI,BREAK,SEMI,CASE,⁴,COLON,CASE,₄,COLON,CASE,④,COLON,CASE,⓸,COLON,CASE,❹,COLON,CASE,➃,COLON,CASE,➍,COLON,CASE,４,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,4,SEMI,BREAK,SEMI,CASE,⒋,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,4,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,.,SEMI,BREAK,SEMI,CASE,⑷,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,(,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,4,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,),SEMI,BREAK,SEMI,CASE,⁵,COLON,CASE,₅,COLON,CASE,⑤,COLON,CASE,⓹,COLON,CASE,❺,COLON,CASE,➄,COLON,CASE,➎,COLON,CASE,５,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,5,SEMI,BREAK,SEMI,CASE,⒌,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,5,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,.,SEMI,BREAK,SEMI,CASE,⑸,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,(,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,5,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,),SEMI,BREAK,SEMI,CASE,⁶,COLON,CASE,₆,COLON,CASE,⑥,COLON,CASE,⓺,COLON,CASE,❻,COLON,CASE,➅,COLON,CASE,➏,COLON,CASE,６,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,6,SEMI,BREAK,SEMI,CASE,⒍,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,6,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,.,SEMI,BREAK,SEMI,CASE,⑹,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,(,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,6,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,),SEMI,BREAK,SEMI,CASE,⁷,COLON,CASE,₇,COLON,CASE,⑦,COLON,CASE,⓻,COLON,CASE,❼,COLON,CASE,➆,COLON,CASE,➐,COLON,CASE,７,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,7,SEMI,BREAK,SEMI,CASE,⒎,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,7,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,.,SEMI,BREAK,SEMI,CASE,⑺,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,(,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,7,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,),SEMI,BREAK,SEMI,CASE,⁸,COLON,CASE,₈,COLON,CASE,⑧,COLON,CASE,⓼,COLON,CASE,❽,COLON,CASE,➇,COLON,CASE,➑,COLON,CASE,８,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,8,SEMI,BREAK,SEMI,CASE,⒏,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,8,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,.,SEMI,BREAK,SEMI,CASE,⑻,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,(,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,8,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,),SEMI,BREAK,SEMI,CASE,⁹,COLON,CASE,₉,COLON,CASE,⑨,COLON,CASE,⓽,COLON,CASE,❾,COLON,CASE,➈,COLON,CASE,➒,COLON,CASE,９,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,9,SEMI,BREAK,SEMI,CASE,⒐,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,9,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,.,SEMI,BREAK,SEMI,CASE,⑼,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,(,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,9,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,),SEMI,BREAK,SEMI,CASE,⑩,COLON,CASE,⓾,COLON,CASE,❿,COLON,CASE,➉,COLON,CASE,➓,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,1,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,0,SEMI,BREAK,SEMI,CASE,⒑,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,1,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,0,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,.,SEMI,BREAK,SEMI,CASE,⑽,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,(,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,1,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,0,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,),SEMI,BREAK,SEMI,CASE,⑪,COLON,CASE,⓫,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,1,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,1,SEMI,BREAK,SEMI,CASE,⒒,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,1,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,1,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,.,SEMI,BREAK,SEMI,CASE,⑾,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,(,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,1,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,1,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,),SEMI,BREAK,SEMI,CASE,⑫,COLON,CASE,⓬,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,1,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,2,SEMI,BREAK,SEMI,CASE,⒓,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,1,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,2,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,.,SEMI,BREAK,SEMI,CASE,⑿,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,(,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,1,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,2,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,),SEMI,BREAK,SEMI,CASE,⑬,COLON,CASE,⓭,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,1,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,3,SEMI,BREAK,SEMI,CASE,⒔,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,1,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,3,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,.,SEMI,BREAK,SEMI,CASE,⒀,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,(,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,1,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,3,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,),SEMI,BREAK,SEMI,CASE,⑭,COLON,CASE,⓮,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,1,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,4,SEMI,BREAK,SEMI,CASE,⒕,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,1,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,4,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,.,SEMI,BREAK,SEMI,CASE,⒁,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,(,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,1,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,4,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,),SEMI,BREAK,SEMI,CASE,⑮,COLON,CASE,⓯,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,1,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,5,SEMI,BREAK,SEMI,CASE,⒖,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,1,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,5,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,.,SEMI,BREAK,SEMI,CASE,⒂,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,(,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,1,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,5,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,),SEMI,BREAK,SEMI,CASE,⑯,COLON,CASE,⓰,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,1,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,6,SEMI,BREAK,SEMI,CASE,⒗,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,1,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,6,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,.,SEMI,BREAK,SEMI,CASE,⒃,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,(,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,1,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,6,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,),SEMI,BREAK,SEMI,CASE,⑰,COLON,CASE,⓱,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,1,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,7,SEMI,BREAK,SEMI,CASE,⒘,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,1,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,7,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,.,SEMI,BREAK,SEMI,CASE,⒄,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,(,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,1,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,7,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,),SEMI,BREAK,SEMI,CASE,⑱,COLON,CASE,⓲,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,1,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,8,SEMI,BREAK,SEMI,CASE,⒙,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,1,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,8,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,.,SEMI,BREAK,SEMI,CASE,⒅,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,(,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,1,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,8,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,),SEMI,BREAK,SEMI,CASE,⑲,COLON,CASE,⓳,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,1,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,9,SEMI,BREAK,SEMI,CASE,⒚,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,1,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,9,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,.,SEMI,BREAK,SEMI,CASE,⒆,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,(,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,1,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,9,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,),SEMI,BREAK,SEMI,CASE,⑳,COLON,CASE,⓴,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,2,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,0,SEMI,BREAK,SEMI,CASE,⒛,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,2,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,0,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,.,SEMI,BREAK,SEMI,CASE,⒇,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,(,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,2,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,0,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,),SEMI,BREAK,SEMI,CASE,«,COLON,CASE,»,COLON,CASE,“,COLON,CASE,”,COLON,CASE,„,COLON,CASE,″,COLON,CASE,‶,COLON,CASE,❝,COLON,CASE,❞,COLON,CASE,❮,COLON,CASE,❯,COLON,CASE,＂,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,"",SEMI,BREAK,SEMI,CASE,‘,COLON,CASE,’,COLON,CASE,‚,COLON,CASE,‛,COLON,CASE,′,COLON,CASE,‵,COLON,CASE,‹,COLON,CASE,›,COLON,CASE,❛,COLON,CASE,❜,COLON,CASE,＇,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,',SEMI,BREAK,SEMI,CASE,‐,COLON,CASE,‑,COLON,CASE,‒,COLON,CASE,–,COLON,CASE,—,COLON,CASE,⁻,COLON,CASE,₋,COLON,CASE,－,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,-,SEMI,BREAK,SEMI,CASE,⁅,COLON,CASE,❲,COLON,CASE,［,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,[,SEMI,BREAK,SEMI,CASE,⁆,COLON,CASE,❳,COLON,CASE,］,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,],SEMI,BREAK,SEMI,CASE,⁽,COLON,CASE,₍,COLON,CASE,❨,COLON,CASE,❪,COLON,CASE,（,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,(,SEMI,BREAK,SEMI,CASE,⸨,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,(,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,(,SEMI,BREAK,SEMI,CASE,⁾,COLON,CASE,₎,COLON,CASE,❩,COLON,CASE,❫,COLON,CASE,）,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,),SEMI,BREAK,SEMI,CASE,⸩,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,),SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,),SEMI,BREAK,SEMI,CASE,❬,COLON,CASE,❰,COLON,CASE,＜,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,<,SEMI,BREAK,SEMI,CASE,❭,COLON,CASE,❱,COLON,CASE,＞,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,>,SEMI,BREAK,SEMI,CASE,❴,COLON,CASE,｛,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,{,SEMI,BREAK,SEMI,CASE,❵,COLON,CASE,｝,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,},SEMI,BREAK,SEMI,CASE,⁺,COLON,CASE,₊,COLON,CASE,＋,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,+,SEMI,BREAK,SEMI,CASE,⁼,COLON,CASE,₌,COLON,CASE,＝,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,=,SEMI,BREAK,SEMI,CASE,！,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,!,SEMI,BREAK,SEMI,CASE,‼,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,!,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,!,SEMI,BREAK,SEMI,CASE,⁉,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,!,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,?,SEMI,BREAK,SEMI,CASE,＃,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,#,SEMI,BREAK,SEMI,CASE,＄,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,$,SEMI,BREAK,SEMI,CASE,⁒,COLON,CASE,％,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,%,SEMI,BREAK,SEMI,CASE,＆,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,&,SEMI,BREAK,SEMI,CASE,⁎,COLON,CASE,＊,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,*,SEMI,BREAK,SEMI,CASE,，,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,,,SEMI,BREAK,SEMI,CASE,．,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,.,SEMI,BREAK,SEMI,CASE,⁄,COLON,CASE,／,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,/,SEMI,BREAK,SEMI,CASE,：,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,:,SEMI,BREAK,SEMI,CASE,⁏,COLON,CASE,；,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,;,SEMI,BREAK,SEMI,CASE,？,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,?,SEMI,BREAK,SEMI,CASE,⁇,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,?,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,?,SEMI,BREAK,SEMI,CASE,⁈,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,?,SEMI,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,!,SEMI,BREAK,SEMI,CASE,＠,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,@,SEMI,BREAK,SEMI,CASE,＼,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,\,SEMI,BREAK,SEMI,CASE,‸,COLON,CASE,＾,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,^,SEMI,BREAK,SEMI,CASE,＿,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,_,SEMI,BREAK,SEMI,CASE,⁓,COLON,CASE,～,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,~,SEMI,BREAK,SEMI,DEFAULT,COLON,output,LBRACKET,outputPos,PLUSPLUS,RBRACKET,EQ,c,SEMI,BREAK,SEMI,RBRACE,RBRACE,RBRACE,RETURN,NEW,String,LPAREN,output,COMMA,0,COMMA,outputPos,RPAREN,SEMI,RBRACE","  public static String foldToASCII(String string)
,  {
,    char[] input = string.toCharArray();
,    int length = string.length();
,    int outputPos;
,
,    // Worst-case length required:
,    final int maxSizeNeeded = 4 <MASK> length;
,    char[] output = new char[maxSizeNeeded];
,
,    outputPos = 0;
,
,    for (int pos = 0 ; pos < length ; ++pos) {
,      final char c = input[pos];
,
,      // Quick test: if it's not in range then just keep current character
,      if (c < '\u0080') {
,        output[outputPos++] = c;
,      } else {
,        switch (c) {
,          case '\u00C0': // À  [LATIN CAPITAL LETTER A WITH GRAVE]
,          case '\u00C1': // Á  [LATIN CAPITAL LETTER A WITH ACUTE]
,          case '\u00C2': // Â  [LATIN CAPITAL LETTER A WITH CIRCUMFLEX]
,          case '\u00C3': // Ã  [LATIN CAPITAL LETTER A WITH TILDE]
,          case '\u00C4': // Ä  [LATIN CAPITAL LETTER A WITH DIAERESIS]
,          case '\u00C5': // Å  [LATIN CAPITAL LETTER A WITH RING ABOVE]
,          case '\u0100': // Ā  [LATIN CAPITAL LETTER A WITH MACRON]
,          case '\u0102': // Ă  [LATIN CAPITAL LETTER A WITH BREVE]
,          case '\u0104': // Ą  [LATIN CAPITAL LETTER A WITH OGONEK]
,          case '\u018F': // Ə  http://en.wikipedia.org/wiki/Schwa  [LATIN CAPITAL LETTER SCHWA]
,          case '\u01CD': // Ǎ  [LATIN CAPITAL LETTER A WITH CARON]
,          case '\u01DE': // Ǟ  [LATIN CAPITAL LETTER A WITH DIAERESIS AND MACRON]
,          case '\u01E0': // Ǡ  [LATIN CAPITAL LETTER A WITH DOT ABOVE AND MACRON]
,          case '\u01FA': // Ǻ  [LATIN CAPITAL LETTER A WITH RING ABOVE AND ACUTE]
,          case '\u0200': // Ȁ  [LATIN CAPITAL LETTER A WITH DOUBLE GRAVE]
,          case '\u0202': // Ȃ  [LATIN CAPITAL LETTER A WITH INVERTED BREVE]
,          case '\u0226': // Ȧ  [LATIN CAPITAL LETTER A WITH DOT ABOVE]
,          case '\u023A': // Ⱥ  [LATIN CAPITAL LETTER A WITH STROKE]
,          case '\u1D00': // ᴀ  [LATIN LETTER SMALL CAPITAL A]
,          case '\u1E00': // Ḁ  [LATIN CAPITAL LETTER A WITH RING BELOW]
,          case '\u1EA0': // Ạ  [LATIN CAPITAL LETTER A WITH DOT BELOW]
,          case '\u1EA2': // Ả  [LATIN CAPITAL LETTER A WITH HOOK ABOVE]
,          case '\u1EA4': // Ấ  [LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND ACUTE]
,          case '\u1EA6': // Ầ  [LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND GRAVE]
,          case '\u1EA8': // Ẩ  [LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND HOOK ABOVE]
,          case '\u1EAA': // Ẫ  [LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND TILDE]
,          case '\u1EAC': // Ậ  [LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND DOT BELOW]
,          case '\u1EAE': // Ắ  [LATIN CAPITAL LETTER A WITH BREVE AND ACUTE]
,          case '\u1EB0': // Ằ  [LATIN CAPITAL LETTER A WITH BREVE AND GRAVE]
,          case '\u1EB2': // Ẳ  [LATIN CAPITAL LETTER A WITH BREVE AND HOOK ABOVE]
,          case '\u1EB4': // Ẵ  [LATIN CAPITAL LETTER A WITH BREVE AND TILDE]
,          case '\u1EB6': // Ặ  [LATIN CAPITAL LETTER A WITH BREVE AND DOT BELOW]
,          case '\u24B6': // Ⓐ  [CIRCLED LATIN CAPITAL LETTER A]
,          case '\uFF21': // Ａ  [FULLWIDTH LATIN CAPITAL LETTER A]
,            output[outputPos++] = 'A';
,            break;
,          case '\u00E0': // à  [LATIN SMALL LETTER A WITH GRAVE]
,          case '\u00E1': // á  [LATIN SMALL LETTER A WITH ACUTE]
,          case '\u00E2': // â  [LATIN SMALL LETTER A WITH CIRCUMFLEX]
,          case '\u00E3': // ã  [LATIN SMALL LETTER A WITH TILDE]
,          case '\u00E4': // ä  [LATIN SMALL LETTER A WITH DIAERESIS]
,          case '\u00E5': // å  [LATIN SMALL LETTER A WITH RING ABOVE]
,          case '\u0101': // ā  [LATIN SMALL LETTER A WITH MACRON]
,          case '\u0103': // ă  [LATIN SMALL LETTER A WITH BREVE]
,          case '\u0105': // ą  [LATIN SMALL LETTER A WITH OGONEK]
,          case '\u01CE': // ǎ  [LATIN SMALL LETTER A WITH CARON]
,          case '\u01DF': // ǟ  [LATIN SMALL LETTER A WITH DIAERESIS AND MACRON]
,          case '\u01E1': // ǡ  [LATIN SMALL LETTER A WITH DOT ABOVE AND MACRON]
,          case '\u01FB': // ǻ  [LATIN SMALL LETTER A WITH RING ABOVE AND ACUTE]
,          case '\u0201': // ȁ  [LATIN SMALL LETTER A WITH DOUBLE GRAVE]
,          case '\u0203': // ȃ  [LATIN SMALL LETTER A WITH INVERTED BREVE]
,          case '\u0227': // ȧ  [LATIN SMALL LETTER A WITH DOT ABOVE]
,          case '\u0250': // ɐ  [LATIN SMALL LETTER TURNED A]
,          case '\u0259': // ə  [LATIN SMALL LETTER SCHWA]
,          case '\u025A': // ɚ  [LATIN SMALL LETTER SCHWA WITH HOOK]
,          case '\u1D8F': // ᶏ  [LATIN SMALL LETTER A WITH RETROFLEX HOOK]
,          case '\u1D95': // ᶕ  [LATIN SMALL LETTER SCHWA WITH RETROFLEX HOOK]
,          case '\u1E01': // ạ  [LATIN SMALL LETTER A WITH RING BELOW]
,          case '\u1E9A': // ả  [LATIN SMALL LETTER A WITH RIGHT HALF RING]
,          case '\u1EA1': // ạ  [LATIN SMALL LETTER A WITH DOT BELOW]
,          case '\u1EA3': // ả  [LATIN SMALL LETTER A WITH HOOK ABOVE]
,          case '\u1EA5': // ấ  [LATIN SMALL LETTER A WITH CIRCUMFLEX AND ACUTE]
,          case '\u1EA7': // ầ  [LATIN SMALL LETTER A WITH CIRCUMFLEX AND GRAVE]
,          case '\u1EA9': // ẩ  [LATIN SMALL LETTER A WITH CIRCUMFLEX AND HOOK ABOVE]
,          case '\u1EAB': // ẫ  [LATIN SMALL LETTER A WITH CIRCUMFLEX AND TILDE]
,          case '\u1EAD': // ậ  [LATIN SMALL LETTER A WITH CIRCUMFLEX AND DOT BELOW]
,          case '\u1EAF': // ắ  [LATIN SMALL LETTER A WITH BREVE AND ACUTE]
,          case '\u1EB1': // ằ  [LATIN SMALL LETTER A WITH BREVE AND GRAVE]
,          case '\u1EB3': // ẳ  [LATIN SMALL LETTER A WITH BREVE AND HOOK ABOVE]
,          case '\u1EB5': // ẵ  [LATIN SMALL LETTER A WITH BREVE AND TILDE]
,          case '\u1EB7': // ặ  [LATIN SMALL LETTER A WITH BREVE AND DOT BELOW]
,          case '\u2090': // ₐ  [LATIN SUBSCRIPT SMALL LETTER A]
,          case '\u2094': // ₔ  [LATIN SUBSCRIPT SMALL LETTER SCHWA]
,          case '\u24D0': // ⓐ  [CIRCLED LATIN SMALL LETTER A]
,          case '\u2C65': // ⱥ  [LATIN SMALL LETTER A WITH STROKE]
,          case '\u2C6F': // Ɐ  [LATIN CAPITAL LETTER TURNED A]
,          case '\uFF41': // ａ  [FULLWIDTH LATIN SMALL LETTER A]
,            output[outputPos++] = 'a';
,            break;
,          case '\uA732': // Ꜳ  [LATIN CAPITAL LETTER AA]
,            output[outputPos++] = 'A';
,            output[outputPos++] = 'A';
,            break;
,          case '\u00C6': // Æ  [LATIN CAPITAL LETTER AE]
,          case '\u01E2': // Ǣ  [LATIN CAPITAL LETTER AE WITH MACRON]
,          case '\u01FC': // Ǽ  [LATIN CAPITAL LETTER AE WITH ACUTE]
,          case '\u1D01': // ᴁ  [LATIN LETTER SMALL CAPITAL AE]
,            output[outputPos++] = 'A';
,            output[outputPos++] = 'E';
,            break;
,          case '\uA734': // Ꜵ  [LATIN CAPITAL LETTER AO]
,            output[outputPos++] = 'A';                    
,            output[outputPos++] = 'O';
,            break;
,          case '\uA736': // Ꜷ  [LATIN CAPITAL LETTER AU]
,            output[outputPos++] = 'A';
,            output[outputPos++] = 'U';
,            break;
,          case '\uA738': // Ꜹ  [LATIN CAPITAL LETTER AV]
,          case '\uA73A': // Ꜻ  [LATIN CAPITAL LETTER AV WITH HORIZONTAL BAR]
,            output[outputPos++] = 'A';
,            output[outputPos++] = 'V';
,            break;
,          case '\uA73C': // Ꜽ  [LATIN CAPITAL LETTER AY]
,            output[outputPos++] = 'A';
,            output[outputPos++] = 'Y';
,            break;
,          case '\u249C': // ⒜  [PARENTHESIZED LATIN SMALL LETTER A]
,            output[outputPos++] = '(';
,            output[outputPos++] = 'a';
,            output[outputPos++] = ')';
,            break;
,          case '\uA733': // ꜳ  [LATIN SMALL LETTER AA]
,            output[outputPos++] = 'a';
,            output[outputPos++] = 'a';
,            break;
,          case '\u00E6': // æ  [LATIN SMALL LETTER AE]
,          case '\u01E3': // ǣ  [LATIN SMALL LETTER AE WITH MACRON]
,          case '\u01FD': // ǽ  [LATIN SMALL LETTER AE WITH ACUTE]
,          case '\u1D02': // ᴂ  [LATIN SMALL LETTER TURNED AE]
,            output[outputPos++] = 'a';
,            output[outputPos++] = 'e';
,            break;
,          case '\uA735': // ꜵ  [LATIN SMALL LETTER AO]
,            output[outputPos++] = 'a';
,            output[outputPos++] = 'o';
,            break;
,          case '\uA737': // ꜷ  [LATIN SMALL LETTER AU]
,            output[outputPos++] = 'a';
,            output[outputPos++] = 'u';
,            break;
,          case '\uA739': // ꜹ  [LATIN SMALL LETTER AV]
,          case '\uA73B': // ꜻ  [LATIN SMALL LETTER AV WITH HORIZONTAL BAR]
,            output[outputPos++] = 'a';
,            output[outputPos++] = 'v';
,            break;
,          case '\uA73D': // ꜽ  [LATIN SMALL LETTER AY]
,            output[outputPos++] = 'a';
,            output[outputPos++] = 'y';
,            break;
,          case '\u0181': // Ɓ  [LATIN CAPITAL LETTER B WITH HOOK]
,          case '\u0182': // Ƃ  [LATIN CAPITAL LETTER B WITH TOPBAR]
,          case '\u0243': // Ƀ  [LATIN CAPITAL LETTER B WITH STROKE]
,          case '\u0299': // ʙ  [LATIN LETTER SMALL CAPITAL B]
,          case '\u1D03': // ᴃ  [LATIN LETTER SMALL CAPITAL BARRED B]
,          case '\u1E02': // Ḃ  [LATIN CAPITAL LETTER B WITH DOT ABOVE]
,          case '\u1E04': // Ḅ  [LATIN CAPITAL LETTER B WITH DOT BELOW]
,          case '\u1E06': // Ḇ  [LATIN CAPITAL LETTER B WITH LINE BELOW]
,          case '\u24B7': // Ⓑ  [CIRCLED LATIN CAPITAL LETTER B]
,          case '\uFF22': // Ｂ  [FULLWIDTH LATIN CAPITAL LETTER B]
,            output[outputPos++] = 'B';
,            break;
,          case '\u0180': // ƀ  [LATIN SMALL LETTER B WITH STROKE]
,          case '\u0183': // ƃ  [LATIN SMALL LETTER B WITH TOPBAR]
,          case '\u0253': // ɓ  [LATIN SMALL LETTER B WITH HOOK]
,          case '\u1D6C': // ᵬ  [LATIN SMALL LETTER B WITH MIDDLE TILDE]
,          case '\u1D80': // ᶀ  [LATIN SMALL LETTER B WITH PALATAL HOOK]
,          case '\u1E03': // ḃ  [LATIN SMALL LETTER B WITH DOT ABOVE]
,          case '\u1E05': // ḅ  [LATIN SMALL LETTER B WITH DOT BELOW]
,          case '\u1E07': // ḇ  [LATIN SMALL LETTER B WITH LINE BELOW]
,          case '\u24D1': // ⓑ  [CIRCLED LATIN SMALL LETTER B]
,          case '\uFF42': // ｂ  [FULLWIDTH LATIN SMALL LETTER B]
,            output[outputPos++] = 'b';
,            break;
,          case '\u249D': // ⒝  [PARENTHESIZED LATIN SMALL LETTER B]
,            output[outputPos++] = '(';                    
,            output[outputPos++] = 'b';
,            output[outputPos++] = ')';
,            break;
,          case '\u00C7': // Ç  [LATIN CAPITAL LETTER C WITH CEDILLA]
,          case '\u0106': // Ć  [LATIN CAPITAL LETTER C WITH ACUTE]
,          case '\u0108': // Ĉ  [LATIN CAPITAL LETTER C WITH CIRCUMFLEX]
,          case '\u010A': // Ċ  [LATIN CAPITAL LETTER C WITH DOT ABOVE]
,          case '\u010C': // Č  [LATIN CAPITAL LETTER C WITH CARON]
,          case '\u0187': // Ƈ  [LATIN CAPITAL LETTER C WITH HOOK]
,          case '\u023B': // Ȼ  [LATIN CAPITAL LETTER C WITH STROKE]
,          case '\u0297': // ʗ  [LATIN LETTER STRETCHED C]
,          case '\u1D04': // ᴄ  [LATIN LETTER SMALL CAPITAL C]
,          case '\u1E08': // Ḉ  [LATIN CAPITAL LETTER C WITH CEDILLA AND ACUTE]
,          case '\u24B8': // Ⓒ  [CIRCLED LATIN CAPITAL LETTER C]
,          case '\uFF23': // Ｃ  [FULLWIDTH LATIN CAPITAL LETTER C]
,            output[outputPos++] = 'C';
,            break;
,          case '\u00E7': // ç  [LATIN SMALL LETTER C WITH CEDILLA]
,          case '\u0107': // ć  [LATIN SMALL LETTER C WITH ACUTE]
,          case '\u0109': // ĉ  [LATIN SMALL LETTER C WITH CIRCUMFLEX]
,          case '\u010B': // ċ  [LATIN SMALL LETTER C WITH DOT ABOVE]
,          case '\u010D': // č  [LATIN SMALL LETTER C WITH CARON]
,          case '\u0188': // ƈ  [LATIN SMALL LETTER C WITH HOOK]
,          case '\u023C': // ȼ  [LATIN SMALL LETTER C WITH STROKE]
,          case '\u0255': // ɕ  [LATIN SMALL LETTER C WITH CURL]
,          case '\u1E09': // ḉ  [LATIN SMALL LETTER C WITH CEDILLA AND ACUTE]
,          case '\u2184': // ↄ  [LATIN SMALL LETTER REVERSED C]
,          case '\u24D2': // ⓒ  [CIRCLED LATIN SMALL LETTER C]
,          case '\uA73E': // Ꜿ  [LATIN CAPITAL LETTER REVERSED C WITH DOT]
,          case '\uA73F': // ꜿ  [LATIN SMALL LETTER REVERSED C WITH DOT]
,          case '\uFF43': // ｃ  [FULLWIDTH LATIN SMALL LETTER C]
,            output[outputPos++] = 'c';
,            break;
,          case '\u249E': // ⒞  [PARENTHESIZED LATIN SMALL LETTER C]
,            output[outputPos++] = '(';
,            output[outputPos++] = 'c';
,            output[outputPos++] = ')';
,            break;
,          case '\u00D0': // Ð  [LATIN CAPITAL LETTER ETH]
,          case '\u010E': // Ď  [LATIN CAPITAL LETTER D WITH CARON]
,          case '\u0110': // Đ  [LATIN CAPITAL LETTER D WITH STROKE]
,          case '\u0189': // Ɖ  [LATIN CAPITAL LETTER AFRICAN D]
,          case '\u018A': // Ɗ  [LATIN CAPITAL LETTER D WITH HOOK]
,          case '\u018B': // Ƌ  [LATIN CAPITAL LETTER D WITH TOPBAR]
,          case '\u1D05': // ᴅ  [LATIN LETTER SMALL CAPITAL D]
,          case '\u1D06': // ᴆ  [LATIN LETTER SMALL CAPITAL ETH]
,          case '\u1E0A': // Ḋ  [LATIN CAPITAL LETTER D WITH DOT ABOVE]
,          case '\u1E0C': // Ḍ  [LATIN CAPITAL LETTER D WITH DOT BELOW]
,          case '\u1E0E': // Ḏ  [LATIN CAPITAL LETTER D WITH LINE BELOW]
,          case '\u1E10': // Ḑ  [LATIN CAPITAL LETTER D WITH CEDILLA]
,          case '\u1E12': // Ḓ  [LATIN CAPITAL LETTER D WITH CIRCUMFLEX BELOW]
,          case '\u24B9': // Ⓓ  [CIRCLED LATIN CAPITAL LETTER D]
,          case '\uA779': // Ꝺ  [LATIN CAPITAL LETTER INSULAR D]
,          case '\uFF24': // Ｄ  [FULLWIDTH LATIN CAPITAL LETTER D]
,            output[outputPos++] = 'D';
,            break;
,          case '\u00F0': // ð  [LATIN SMALL LETTER ETH]
,          case '\u010F': // ď  [LATIN SMALL LETTER D WITH CARON]
,          case '\u0111': // đ  [LATIN SMALL LETTER D WITH STROKE]
,          case '\u018C': // ƌ  [LATIN SMALL LETTER D WITH TOPBAR]
,          case '\u0221': // ȡ  [LATIN SMALL LETTER D WITH CURL]
,          case '\u0256': // ɖ  [LATIN SMALL LETTER D WITH TAIL]
,          case '\u0257': // ɗ  [LATIN SMALL LETTER D WITH HOOK]
,          case '\u1D6D': // ᵭ  [LATIN SMALL LETTER D WITH MIDDLE TILDE]
,          case '\u1D81': // ᶁ  [LATIN SMALL LETTER D WITH PALATAL HOOK]
,          case '\u1D91': // ᶑ  [LATIN SMALL LETTER D WITH HOOK AND TAIL]
,          case '\u1E0B': // ḋ  [LATIN SMALL LETTER D WITH DOT ABOVE]
,          case '\u1E0D': // ḍ  [LATIN SMALL LETTER D WITH DOT BELOW]
,          case '\u1E0F': // ḏ  [LATIN SMALL LETTER D WITH LINE BELOW]
,          case '\u1E11': // ḑ  [LATIN SMALL LETTER D WITH CEDILLA]
,          case '\u1E13': // ḓ  [LATIN SMALL LETTER D WITH CIRCUMFLEX BELOW]
,          case '\u24D3': // ⓓ  [CIRCLED LATIN SMALL LETTER D]
,          case '\uA77A': // ꝺ  [LATIN SMALL LETTER INSULAR D]
,          case '\uFF44': // ｄ  [FULLWIDTH LATIN SMALL LETTER D]
,            output[outputPos++] = 'd';
,            break;
,          case '\u01C4': // Ǆ  [LATIN CAPITAL LETTER DZ WITH CARON]
,          case '\u01F1': // Ǳ  [LATIN CAPITAL LETTER DZ]
,            output[outputPos++] = 'D';
,            output[outputPos++] = 'Z';
,            break;
,          case '\u01C5': // ǅ  [LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON]
,          case '\u01F2': // ǲ  [LATIN CAPITAL LETTER D WITH SMALL LETTER Z]
,            output[outputPos++] = 'D';
,            output[outputPos++] = 'z';
,            break;
,          case '\u249F': // ⒟  [PARENTHESIZED LATIN SMALL LETTER D]
,            output[outputPos++] = '(';
,            output[outputPos++] = 'd';
,            output[outputPos++] = ')';
,            break;
,          case '\u0238': // ȸ  [LATIN SMALL LETTER DB DIGRAPH]
,            output[outputPos++] = 'd';
,            output[outputPos++] = 'b';
,            break;
,          case '\u01C6': // ǆ  [LATIN SMALL LETTER DZ WITH CARON]
,          case '\u01F3': // ǳ  [LATIN SMALL LETTER DZ]
,          case '\u02A3': // ʣ  [LATIN SMALL LETTER DZ DIGRAPH]
,          case '\u02A5': // ʥ  [LATIN SMALL LETTER DZ DIGRAPH WITH CURL]
,            output[outputPos++] = 'd';
,            output[outputPos++] = 'z';
,            break;
,          case '\u00C8': // È  [LATIN CAPITAL LETTER E WITH GRAVE]
,          case '\u00C9': // É  [LATIN CAPITAL LETTER E WITH ACUTE]
,          case '\u00CA': // Ê  [LATIN CAPITAL LETTER E WITH CIRCUMFLEX]
,          case '\u00CB': // Ë  [LATIN CAPITAL LETTER E WITH DIAERESIS]
,          case '\u0112': // Ē  [LATIN CAPITAL LETTER E WITH MACRON]
,          case '\u0114': // Ĕ  [LATIN CAPITAL LETTER E WITH BREVE]
,          case '\u0116': // Ė  [LATIN CAPITAL LETTER E WITH DOT ABOVE]
,          case '\u0118': // Ę  [LATIN CAPITAL LETTER E WITH OGONEK]
,          case '\u011A': // Ě  [LATIN CAPITAL LETTER E WITH CARON]
,          case '\u018E': // Ǝ  [LATIN CAPITAL LETTER REVERSED E]
,          case '\u0190': // Ɛ  [LATIN CAPITAL LETTER OPEN E]
,          case '\u0204': // Ȅ  [LATIN CAPITAL LETTER E WITH DOUBLE GRAVE]
,          case '\u0206': // Ȇ  [LATIN CAPITAL LETTER E WITH INVERTED BREVE]
,          case '\u0228': // Ȩ  [LATIN CAPITAL LETTER E WITH CEDILLA]
,          case '\u0246': // Ɇ  [LATIN CAPITAL LETTER E WITH STROKE]
,          case '\u1D07': // ᴇ  [LATIN LETTER SMALL CAPITAL E]
,          case '\u1E14': // Ḕ  [LATIN CAPITAL LETTER E WITH MACRON AND GRAVE]
,          case '\u1E16': // Ḗ  [LATIN CAPITAL LETTER E WITH MACRON AND ACUTE]
,          case '\u1E18': // Ḙ  [LATIN CAPITAL LETTER E WITH CIRCUMFLEX BELOW]
,          case '\u1E1A': // Ḛ  [LATIN CAPITAL LETTER E WITH TILDE BELOW]
,          case '\u1E1C': // Ḝ  [LATIN CAPITAL LETTER E WITH CEDILLA AND BREVE]
,          case '\u1EB8': // Ẹ  [LATIN CAPITAL LETTER E WITH DOT BELOW]
,          case '\u1EBA': // Ẻ  [LATIN CAPITAL LETTER E WITH HOOK ABOVE]
,          case '\u1EBC': // Ẽ  [LATIN CAPITAL LETTER E WITH TILDE]
,          case '\u1EBE': // Ế  [LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND ACUTE]
,          case '\u1EC0': // Ề  [LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND GRAVE]
,          case '\u1EC2': // Ể  [LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND HOOK ABOVE]
,          case '\u1EC4': // Ễ  [LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND TILDE]
,          case '\u1EC6': // Ệ  [LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND DOT BELOW]
,          case '\u24BA': // Ⓔ  [CIRCLED LATIN CAPITAL LETTER E]
,          case '\u2C7B': // ⱻ  [LATIN LETTER SMALL CAPITAL TURNED E]
,          case '\uFF25': // Ｅ  [FULLWIDTH LATIN CAPITAL LETTER E]
,            output[outputPos++] = 'E';
,            break;
,          case '\u00E8': // è  [LATIN SMALL LETTER E WITH GRAVE]
,          case '\u00E9': // é  [LATIN SMALL LETTER E WITH ACUTE]
,          case '\u00EA': // ê  [LATIN SMALL LETTER E WITH CIRCUMFLEX]
,          case '\u00EB': // ë  [LATIN SMALL LETTER E WITH DIAERESIS]
,          case '\u0113': // ē  [LATIN SMALL LETTER E WITH MACRON]
,          case '\u0115': // ĕ  [LATIN SMALL LETTER E WITH BREVE]
,          case '\u0117': // ė  [LATIN SMALL LETTER E WITH DOT ABOVE]
,          case '\u0119': // ę  [LATIN SMALL LETTER E WITH OGONEK]
,          case '\u011B': // ě  [LATIN SMALL LETTER E WITH CARON]
,          case '\u01DD': // ǝ  [LATIN SMALL LETTER TURNED E]
,          case '\u0205': // ȅ  [LATIN SMALL LETTER E WITH DOUBLE GRAVE]
,          case '\u0207': // ȇ  [LATIN SMALL LETTER E WITH INVERTED BREVE]
,          case '\u0229': // ȩ  [LATIN SMALL LETTER E WITH CEDILLA]
,          case '\u0247': // ɇ  [LATIN SMALL LETTER E WITH STROKE]
,          case '\u0258': // ɘ  [LATIN SMALL LETTER REVERSED E]
,          case '\u025B': // ɛ  [LATIN SMALL LETTER OPEN E]
,          case '\u025C': // ɜ  [LATIN SMALL LETTER REVERSED OPEN E]
,          case '\u025D': // ɝ  [LATIN SMALL LETTER REVERSED OPEN E WITH HOOK]
,          case '\u025E': // ɞ  [LATIN SMALL LETTER CLOSED REVERSED OPEN E]
,          case '\u029A': // ʚ  [LATIN SMALL LETTER CLOSED OPEN E]
,          case '\u1D08': // ᴈ  [LATIN SMALL LETTER TURNED OPEN E]
,          case '\u1D92': // ᶒ  [LATIN SMALL LETTER E WITH RETROFLEX HOOK]
,          case '\u1D93': // ᶓ  [LATIN SMALL LETTER OPEN E WITH RETROFLEX HOOK]
,          case '\u1D94': // ᶔ  [LATIN SMALL LETTER REVERSED OPEN E WITH RETROFLEX HOOK]
,          case '\u1E15': // ḕ  [LATIN SMALL LETTER E WITH MACRON AND GRAVE]
,          case '\u1E17': // ḗ  [LATIN SMALL LETTER E WITH MACRON AND ACUTE]
,          case '\u1E19': // ḙ  [LATIN SMALL LETTER E WITH CIRCUMFLEX BELOW]
,          case '\u1E1B': // ḛ  [LATIN SMALL LETTER E WITH TILDE BELOW]
,          case '\u1E1D': // ḝ  [LATIN SMALL LETTER E WITH CEDILLA AND BREVE]
,          case '\u1EB9': // ẹ  [LATIN SMALL LETTER E WITH DOT BELOW]
,          case '\u1EBB': // ẻ  [LATIN SMALL LETTER E WITH HOOK ABOVE]
,          case '\u1EBD': // ẽ  [LATIN SMALL LETTER E WITH TILDE]
,          case '\u1EBF': // ế  [LATIN SMALL LETTER E WITH CIRCUMFLEX AND ACUTE]
,          case '\u1EC1': // ề  [LATIN SMALL LETTER E WITH CIRCUMFLEX AND GRAVE]
,          case '\u1EC3': // ể  [LATIN SMALL LETTER E WITH CIRCUMFLEX AND HOOK ABOVE]
,          case '\u1EC5': // ễ  [LATIN SMALL LETTER E WITH CIRCUMFLEX AND TILDE]
,          case '\u1EC7': // ệ  [LATIN SMALL LETTER E WITH CIRCUMFLEX AND DOT BELOW]
,          case '\u2091': // ₑ  [LATIN SUBSCRIPT SMALL LETTER E]
,          case '\u24D4': // ⓔ  [CIRCLED LATIN SMALL LETTER E]
,          case '\u2C78': // ⱸ  [LATIN SMALL LETTER E WITH NOTCH]
,          case '\uFF45': // ｅ  [FULLWIDTH LATIN SMALL LETTER E]
,            output[outputPos++] = 'e';
,            break;
,          case '\u24A0': // ⒠  [PARENTHESIZED LATIN SMALL LETTER E]
,            output[outputPos++] = '(';
,            output[outputPos++] = 'e';
,            output[outputPos++] = ')';
,            break;
,          case '\u0191': // Ƒ  [LATIN CAPITAL LETTER F WITH HOOK]
,          case '\u1E1E': // Ḟ  [LATIN CAPITAL LETTER F WITH DOT ABOVE]
,          case '\u24BB': // Ⓕ  [CIRCLED LATIN CAPITAL LETTER F]
,          case '\uA730': // ꜰ  [LATIN LETTER SMALL CAPITAL F]
,          case '\uA77B': // Ꝼ  [LATIN CAPITAL LETTER INSULAR F]
,          case '\uA7FB': // ꟻ  [LATIN EPIGRAPHIC LETTER REVERSED F]
,          case '\uFF26': // Ｆ  [FULLWIDTH LATIN CAPITAL LETTER F]
,            output[outputPos++] = 'F';
,            break;
,          case '\u0192': // ƒ  [LATIN SMALL LETTER F WITH HOOK]
,          case '\u1D6E': // ᵮ  [LATIN SMALL LETTER F WITH MIDDLE TILDE]
,          case '\u1D82': // ᶂ  [LATIN SMALL LETTER F WITH PALATAL HOOK]
,          case '\u1E1F': // ḟ  [LATIN SMALL LETTER F WITH DOT ABOVE]
,          case '\u1E9B': // ẛ  [LATIN SMALL LETTER LONG S WITH DOT ABOVE]
,          case '\u24D5': // ⓕ  [CIRCLED LATIN SMALL LETTER F]
,          case '\uA77C': // ꝼ  [LATIN SMALL LETTER INSULAR F]
,          case '\uFF46': // ｆ  [FULLWIDTH LATIN SMALL LETTER F]
,            output[outputPos++] = 'f';
,            break;
,          case '\u24A1': // ⒡  [PARENTHESIZED LATIN SMALL LETTER F]
,            output[outputPos++] = '(';
,            output[outputPos++] = 'f';
,            output[outputPos++] = ')';
,            break;
,          case '\uFB00': // ﬀ  [LATIN SMALL LIGATURE FF]
,            output[outputPos++] = 'f';
,            output[outputPos++] = 'f';
,            break;
,          case '\uFB03': // ﬃ  [LATIN SMALL LIGATURE FFI]
,            output[outputPos++] = 'f';
,            output[outputPos++] = 'f';
,            output[outputPos++] = 'i';
,            break;
,          case '\uFB04': // ﬄ  [LATIN SMALL LIGATURE FFL]
,            output[outputPos++] = 'f';
,            output[outputPos++] = 'f';
,            output[outputPos++] = 'l';
,            break;
,          case '\uFB01': // ﬁ  [LATIN SMALL LIGATURE FI]
,            output[outputPos++] = 'f';
,            output[outputPos++] = 'i';
,            break;
,          case '\uFB02': // ﬂ  [LATIN SMALL LIGATURE FL]
,            output[outputPos++] = 'f';
,            output[outputPos++] = 'l';
,            break;
,          case '\u011C': // Ĝ  [LATIN CAPITAL LETTER G WITH CIRCUMFLEX]
,          case '\u011E': // Ğ  [LATIN CAPITAL LETTER G WITH BREVE]
,          case '\u0120': // Ġ  [LATIN CAPITAL LETTER G WITH DOT ABOVE]
,          case '\u0122': // Ģ  [LATIN CAPITAL LETTER G WITH CEDILLA]
,          case '\u0193': // Ɠ  [LATIN CAPITAL LETTER G WITH HOOK]
,          case '\u01E4': // Ǥ  [LATIN CAPITAL LETTER G WITH STROKE]
,          case '\u01E5': // ǥ  [LATIN SMALL LETTER G WITH STROKE]
,          case '\u01E6': // Ǧ  [LATIN CAPITAL LETTER G WITH CARON]
,          case '\u01E7': // ǧ  [LATIN SMALL LETTER G WITH CARON]
,          case '\u01F4': // Ǵ  [LATIN CAPITAL LETTER G WITH ACUTE]
,          case '\u0262': // ɢ  [LATIN LETTER SMALL CAPITAL G]
,          case '\u029B': // ʛ  [LATIN LETTER SMALL CAPITAL G WITH HOOK]
,          case '\u1E20': // Ḡ  [LATIN CAPITAL LETTER G WITH MACRON]
,          case '\u24BC': // Ⓖ  [CIRCLED LATIN CAPITAL LETTER G]
,          case '\uA77D': // Ᵹ  [LATIN CAPITAL LETTER INSULAR G]
,          case '\uA77E': // Ꝿ  [LATIN CAPITAL LETTER TURNED INSULAR G]
,          case '\uFF27': // Ｇ  [FULLWIDTH LATIN CAPITAL LETTER G]
,            output[outputPos++] = 'G';
,            break;
,          case '\u011D': // ĝ  [LATIN SMALL LETTER G WITH CIRCUMFLEX]
,          case '\u011F': // ğ  [LATIN SMALL LETTER G WITH BREVE]
,          case '\u0121': // ġ  [LATIN SMALL LETTER G WITH DOT ABOVE]
,          case '\u0123': // ģ  [LATIN SMALL LETTER G WITH CEDILLA]
,          case '\u01F5': // ǵ  [LATIN SMALL LETTER G WITH ACUTE]
,          case '\u0260': // ɠ  [LATIN SMALL LETTER G WITH HOOK]
,          case '\u0261': // ɡ  [LATIN SMALL LETTER SCRIPT G]
,          case '\u1D77': // ᵷ  [LATIN SMALL LETTER TURNED G]
,          case '\u1D79': // ᵹ  [LATIN SMALL LETTER INSULAR G]
,          case '\u1D83': // ᶃ  [LATIN SMALL LETTER G WITH PALATAL HOOK]
,          case '\u1E21': // ḡ  [LATIN SMALL LETTER G WITH MACRON]
,          case '\u24D6': // ⓖ  [CIRCLED LATIN SMALL LETTER G]
,          case '\uA77F': // ꝿ  [LATIN SMALL LETTER TURNED INSULAR G]
,          case '\uFF47': // ｇ  [FULLWIDTH LATIN SMALL LETTER G]
,            output[outputPos++] = 'g';
,            break;
,          case '\u24A2': // ⒢  [PARENTHESIZED LATIN SMALL LETTER G]
,            output[outputPos++] = '(';
,            output[outputPos++] = 'g';
,            output[outputPos++] = ')';
,            break;
,          case '\u0124': // Ĥ  [LATIN CAPITAL LETTER H WITH CIRCUMFLEX]
,          case '\u0126': // Ħ  [LATIN CAPITAL LETTER H WITH STROKE]
,          case '\u021E': // Ȟ  [LATIN CAPITAL LETTER H WITH CARON]
,          case '\u029C': // ʜ  [LATIN LETTER SMALL CAPITAL H]
,          case '\u1E22': // Ḣ  [LATIN CAPITAL LETTER H WITH DOT ABOVE]
,          case '\u1E24': // Ḥ  [LATIN CAPITAL LETTER H WITH DOT BELOW]
,          case '\u1E26': // Ḧ  [LATIN CAPITAL LETTER H WITH DIAERESIS]
,          case '\u1E28': // Ḩ  [LATIN CAPITAL LETTER H WITH CEDILLA]
,          case '\u1E2A': // Ḫ  [LATIN CAPITAL LETTER H WITH BREVE BELOW]
,          case '\u24BD': // Ⓗ  [CIRCLED LATIN CAPITAL LETTER H]
,          case '\u2C67': // Ⱨ  [LATIN CAPITAL LETTER H WITH DESCENDER]
,          case '\u2C75': // Ⱶ  [LATIN CAPITAL LETTER HALF H]
,          case '\uFF28': // Ｈ  [FULLWIDTH LATIN CAPITAL LETTER H]
,            output[outputPos++] = 'H';
,            break;
,          case '\u0125': // ĥ  [LATIN SMALL LETTER H WITH CIRCUMFLEX]
,          case '\u0127': // ħ  [LATIN SMALL LETTER H WITH STROKE]
,          case '\u021F': // ȟ  [LATIN SMALL LETTER H WITH CARON]
,          case '\u0265': // ɥ  [LATIN SMALL LETTER TURNED H]
,          case '\u0266': // ɦ  [LATIN SMALL LETTER H WITH HOOK]
,          case '\u02AE': // ʮ  [LATIN SMALL LETTER TURNED H WITH FISHHOOK]
,          case '\u02AF': // ʯ  [LATIN SMALL LETTER TURNED H WITH FISHHOOK AND TAIL]
,          case '\u1E23': // ḣ  [LATIN SMALL LETTER H WITH DOT ABOVE]
,          case '\u1E25': // ḥ  [LATIN SMALL LETTER H WITH DOT BELOW]
,          case '\u1E27': // ḧ  [LATIN SMALL LETTER H WITH DIAERESIS]
,          case '\u1E29': // ḩ  [LATIN SMALL LETTER H WITH CEDILLA]
,          case '\u1E2B': // ḫ  [LATIN SMALL LETTER H WITH BREVE BELOW]
,          case '\u1E96': // ẖ  [LATIN SMALL LETTER H WITH LINE BELOW]
,          case '\u24D7': // ⓗ  [CIRCLED LATIN SMALL LETTER H]
,          case '\u2C68': // ⱨ  [LATIN SMALL LETTER H WITH DESCENDER]
,          case '\u2C76': // ⱶ  [LATIN SMALL LETTER HALF H]
,          case '\uFF48': // ｈ  [FULLWIDTH LATIN SMALL LETTER H]
,            output[outputPos++] = 'h';
,            break;
,          case '\u01F6': // Ƕ  http://en.wikipedia.org/wiki/Hwair  [LATIN CAPITAL LETTER HWAIR]
,            output[outputPos++] = 'H';
,            output[outputPos++] = 'V';
,            break;
,          case '\u24A3': // ⒣  [PARENTHESIZED LATIN SMALL LETTER H]
,            output[outputPos++] = '(';
,            output[outputPos++] = 'h';
,            output[outputPos++] = ')';
,            break;
,          case '\u0195': // ƕ  [LATIN SMALL LETTER HV]
,            output[outputPos++] = 'h';
,            output[outputPos++] = 'v';
,            break;
,          case '\u00CC': // Ì  [LATIN CAPITAL LETTER I WITH GRAVE]
,          case '\u00CD': // Í  [LATIN CAPITAL LETTER I WITH ACUTE]
,          case '\u00CE': // Î  [LATIN CAPITAL LETTER I WITH CIRCUMFLEX]
,          case '\u00CF': // Ï  [LATIN CAPITAL LETTER I WITH DIAERESIS]
,          case '\u0128': // Ĩ  [LATIN CAPITAL LETTER I WITH TILDE]
,          case '\u012A': // Ī  [LATIN CAPITAL LETTER I WITH MACRON]
,          case '\u012C': // Ĭ  [LATIN CAPITAL LETTER I WITH BREVE]
,          case '\u012E': // Į  [LATIN CAPITAL LETTER I WITH OGONEK]
,          case '\u0130': // İ  [LATIN CAPITAL LETTER I WITH DOT ABOVE]
,          case '\u0196': // Ɩ  [LATIN CAPITAL LETTER IOTA]
,          case '\u0197': // Ɨ  [LATIN CAPITAL LETTER I WITH STROKE]
,          case '\u01CF': // Ǐ  [LATIN CAPITAL LETTER I WITH CARON]
,          case '\u0208': // Ȉ  [LATIN CAPITAL LETTER I WITH DOUBLE GRAVE]
,          case '\u020A': // Ȋ  [LATIN CAPITAL LETTER I WITH INVERTED BREVE]
,          case '\u026A': // ɪ  [LATIN LETTER SMALL CAPITAL I]
,          case '\u1D7B': // ᵻ  [LATIN SMALL CAPITAL LETTER I WITH STROKE]
,          case '\u1E2C': // Ḭ  [LATIN CAPITAL LETTER I WITH TILDE BELOW]
,          case '\u1E2E': // Ḯ  [LATIN CAPITAL LETTER I WITH DIAERESIS AND ACUTE]
,          case '\u1EC8': // Ỉ  [LATIN CAPITAL LETTER I WITH HOOK ABOVE]
,          case '\u1ECA': // Ị  [LATIN CAPITAL LETTER I WITH DOT BELOW]
,          case '\u24BE': // Ⓘ  [CIRCLED LATIN CAPITAL LETTER I]
,          case '\uA7FE': // ꟾ  [LATIN EPIGRAPHIC LETTER I LONGA]
,          case '\uFF29': // Ｉ  [FULLWIDTH LATIN CAPITAL LETTER I]
,            output[outputPos++] = 'I';
,            break;
,          case '\u00EC': // ì  [LATIN SMALL LETTER I WITH GRAVE]
,          case '\u00ED': // í  [LATIN SMALL LETTER I WITH ACUTE]
,          case '\u00EE': // î  [LATIN SMALL LETTER I WITH CIRCUMFLEX]
,          case '\u00EF': // ï  [LATIN SMALL LETTER I WITH DIAERESIS]
,          case '\u0129': // ĩ  [LATIN SMALL LETTER I WITH TILDE]
,          case '\u012B': // ī  [LATIN SMALL LETTER I WITH MACRON]
,          case '\u012D': // ĭ  [LATIN SMALL LETTER I WITH BREVE]
,          case '\u012F': // į  [LATIN SMALL LETTER I WITH OGONEK]
,          case '\u0131': // ı  [LATIN SMALL LETTER DOTLESS I]
,          case '\u01D0': // ǐ  [LATIN SMALL LETTER I WITH CARON]
,          case '\u0209': // ȉ  [LATIN SMALL LETTER I WITH DOUBLE GRAVE]
,          case '\u020B': // ȋ  [LATIN SMALL LETTER I WITH INVERTED BREVE]
,          case '\u0268': // ɨ  [LATIN SMALL LETTER I WITH STROKE]
,          case '\u1D09': // ᴉ  [LATIN SMALL LETTER TURNED I]
,          case '\u1D62': // ᵢ  [LATIN SUBSCRIPT SMALL LETTER I]
,          case '\u1D7C': // ᵼ  [LATIN SMALL LETTER IOTA WITH STROKE]
,          case '\u1D96': // ᶖ  [LATIN SMALL LETTER I WITH RETROFLEX HOOK]
,          case '\u1E2D': // ḭ  [LATIN SMALL LETTER I WITH TILDE BELOW]
,          case '\u1E2F': // ḯ  [LATIN SMALL LETTER I WITH DIAERESIS AND ACUTE]
,          case '\u1EC9': // ỉ  [LATIN SMALL LETTER I WITH HOOK ABOVE]
,          case '\u1ECB': // ị  [LATIN SMALL LETTER I WITH DOT BELOW]
,          case '\u2071': // ⁱ  [SUPERSCRIPT LATIN SMALL LETTER I]
,          case '\u24D8': // ⓘ  [CIRCLED LATIN SMALL LETTER I]
,          case '\uFF49': // ｉ  [FULLWIDTH LATIN SMALL LETTER I]
,            output[outputPos++] = 'i';
,            break;
,          case '\u0132': // Ĳ  [LATIN CAPITAL LIGATURE IJ]
,            output[outputPos++] = 'I';
,            output[outputPos++] = 'J';
,            break;
,          case '\u24A4': // ⒤  [PARENTHESIZED LATIN SMALL LETTER I]
,            output[outputPos++] = '(';
,            output[outputPos++] = 'i';
,            output[outputPos++] = ')';
,            break;
,          case '\u0133': // ĳ  [LATIN SMALL LIGATURE IJ]
,            output[outputPos++] = 'i';
,            output[outputPos++] = 'j';
,            break;
,          case '\u0134': // Ĵ  [LATIN CAPITAL LETTER J WITH CIRCUMFLEX]
,          case '\u0248': // Ɉ  [LATIN CAPITAL LETTER J WITH STROKE]
,          case '\u1D0A': // ᴊ  [LATIN LETTER SMALL CAPITAL J]
,          case '\u24BF': // Ⓙ  [CIRCLED LATIN CAPITAL LETTER J]
,          case '\uFF2A': // Ｊ  [FULLWIDTH LATIN CAPITAL LETTER J]
,            output[outputPos++] = 'J';
,            break;
,          case '\u0135': // ĵ  [LATIN SMALL LETTER J WITH CIRCUMFLEX]
,          case '\u01F0': // ǰ  [LATIN SMALL LETTER J WITH CARON]
,          case '\u0237': // ȷ  [LATIN SMALL LETTER DOTLESS J]
,          case '\u0249': // ɉ  [LATIN SMALL LETTER J WITH STROKE]
,          case '\u025F': // ɟ  [LATIN SMALL LETTER DOTLESS J WITH STROKE]
,          case '\u0284': // ʄ  [LATIN SMALL LETTER DOTLESS J WITH STROKE AND HOOK]
,          case '\u029D': // ʝ  [LATIN SMALL LETTER J WITH CROSSED-TAIL]
,          case '\u24D9': // ⓙ  [CIRCLED LATIN SMALL LETTER J]
,          case '\u2C7C': // ⱼ  [LATIN SUBSCRIPT SMALL LETTER J]
,          case '\uFF4A': // ｊ  [FULLWIDTH LATIN SMALL LETTER J]
,            output[outputPos++] = 'j';
,            break;
,          case '\u24A5': // ⒥  [PARENTHESIZED LATIN SMALL LETTER J]
,            output[outputPos++] = '(';
,            output[outputPos++] = 'j';
,            output[outputPos++] = ')';
,            break;
,          case '\u0136': // Ķ  [LATIN CAPITAL LETTER K WITH CEDILLA]
,          case '\u0198': // Ƙ  [LATIN CAPITAL LETTER K WITH HOOK]
,          case '\u01E8': // Ǩ  [LATIN CAPITAL LETTER K WITH CARON]
,          case '\u1D0B': // ᴋ  [LATIN LETTER SMALL CAPITAL K]
,          case '\u1E30': // Ḱ  [LATIN CAPITAL LETTER K WITH ACUTE]
,          case '\u1E32': // Ḳ  [LATIN CAPITAL LETTER K WITH DOT BELOW]
,          case '\u1E34': // Ḵ  [LATIN CAPITAL LETTER K WITH LINE BELOW]
,          case '\u24C0': // Ⓚ  [CIRCLED LATIN CAPITAL LETTER K]
,          case '\u2C69': // Ⱪ  [LATIN CAPITAL LETTER K WITH DESCENDER]
,          case '\uA740': // Ꝁ  [LATIN CAPITAL LETTER K WITH STROKE]
,          case '\uA742': // Ꝃ  [LATIN CAPITAL LETTER K WITH DIAGONAL STROKE]
,          case '\uA744': // Ꝅ  [LATIN CAPITAL LETTER K WITH STROKE AND DIAGONAL STROKE]
,          case '\uFF2B': // Ｋ  [FULLWIDTH LATIN CAPITAL LETTER K]
,            output[outputPos++] = 'K';
,            break;
,          case '\u0137': // ķ  [LATIN SMALL LETTER K WITH CEDILLA]
,          case '\u0199': // ƙ  [LATIN SMALL LETTER K WITH HOOK]
,          case '\u01E9': // ǩ  [LATIN SMALL LETTER K WITH CARON]
,          case '\u029E': // ʞ  [LATIN SMALL LETTER TURNED K]
,          case '\u1D84': // ᶄ  [LATIN SMALL LETTER K WITH PALATAL HOOK]
,          case '\u1E31': // ḱ  [LATIN SMALL LETTER K WITH ACUTE]
,          case '\u1E33': // ḳ  [LATIN SMALL LETTER K WITH DOT BELOW]
,          case '\u1E35': // ḵ  [LATIN SMALL LETTER K WITH LINE BELOW]
,          case '\u24DA': // ⓚ  [CIRCLED LATIN SMALL LETTER K]
,          case '\u2C6A': // ⱪ  [LATIN SMALL LETTER K WITH DESCENDER]
,          case '\uA741': // ꝁ  [LATIN SMALL LETTER K WITH STROKE]
,          case '\uA743': // ꝃ  [LATIN SMALL LETTER K WITH DIAGONAL STROKE]
,          case '\uA745': // ꝅ  [LATIN SMALL LETTER K WITH STROKE AND DIAGONAL STROKE]
,          case '\uFF4B': // ｋ  [FULLWIDTH LATIN SMALL LETTER K]
,            output[outputPos++] = 'k';
,            break;
,          case '\u24A6': // ⒦  [PARENTHESIZED LATIN SMALL LETTER K]
,            output[outputPos++] = '(';
,            output[outputPos++] = 'k';
,            output[outputPos++] = ')';
,            break;
,          case '\u0139': // Ĺ  [LATIN CAPITAL LETTER L WITH ACUTE]
,          case '\u013B': // Ļ  [LATIN CAPITAL LETTER L WITH CEDILLA]
,          case '\u013D': // Ľ  [LATIN CAPITAL LETTER L WITH CARON]
,          case '\u013F': // Ŀ  [LATIN CAPITAL LETTER L WITH MIDDLE DOT]
,          case '\u0141': // Ł  [LATIN CAPITAL LETTER L WITH STROKE]
,          case '\u023D': // Ƚ  [LATIN CAPITAL LETTER L WITH BAR]
,          case '\u029F': // ʟ  [LATIN LETTER SMALL CAPITAL L]
,          case '\u1D0C': // ᴌ  [LATIN LETTER SMALL CAPITAL L WITH STROKE]
,          case '\u1E36': // Ḷ  [LATIN CAPITAL LETTER L WITH DOT BELOW]
,          case '\u1E38': // Ḹ  [LATIN CAPITAL LETTER L WITH DOT BELOW AND MACRON]
,          case '\u1E3A': // Ḻ  [LATIN CAPITAL LETTER L WITH LINE BELOW]
,          case '\u1E3C': // Ḽ  [LATIN CAPITAL LETTER L WITH CIRCUMFLEX BELOW]
,          case '\u24C1': // Ⓛ  [CIRCLED LATIN CAPITAL LETTER L]
,          case '\u2C60': // Ⱡ  [LATIN CAPITAL LETTER L WITH DOUBLE BAR]
,          case '\u2C62': // Ɫ  [LATIN CAPITAL LETTER L WITH MIDDLE TILDE]
,          case '\uA746': // Ꝇ  [LATIN CAPITAL LETTER BROKEN L]
,          case '\uA748': // Ꝉ  [LATIN CAPITAL LETTER L WITH HIGH STROKE]
,          case '\uA780': // Ꞁ  [LATIN CAPITAL LETTER TURNED L]
,          case '\uFF2C': // Ｌ  [FULLWIDTH LATIN CAPITAL LETTER L]
,            output[outputPos++] = 'L';
,            break;
,          case '\u013A': // ĺ  [LATIN SMALL LETTER L WITH ACUTE]
,          case '\u013C': // ļ  [LATIN SMALL LETTER L WITH CEDILLA]
,          case '\u013E': // ľ  [LATIN SMALL LETTER L WITH CARON]
,          case '\u0140': // ŀ  [LATIN SMALL LETTER L WITH MIDDLE DOT]
,          case '\u0142': // ł  [LATIN SMALL LETTER L WITH STROKE]
,          case '\u019A': // ƚ  [LATIN SMALL LETTER L WITH BAR]
,          case '\u0234': // ȴ  [LATIN SMALL LETTER L WITH CURL]
,          case '\u026B': // ɫ  [LATIN SMALL LETTER L WITH MIDDLE TILDE]
,          case '\u026C': // ɬ  [LATIN SMALL LETTER L WITH BELT]
,          case '\u026D': // ɭ  [LATIN SMALL LETTER L WITH RETROFLEX HOOK]
,          case '\u1D85': // ᶅ  [LATIN SMALL LETTER L WITH PALATAL HOOK]
,          case '\u1E37': // ḷ  [LATIN SMALL LETTER L WITH DOT BELOW]
,          case '\u1E39': // ḹ  [LATIN SMALL LETTER L WITH DOT BELOW AND MACRON]
,          case '\u1E3B': // ḻ  [LATIN SMALL LETTER L WITH LINE BELOW]
,          case '\u1E3D': // ḽ  [LATIN SMALL LETTER L WITH CIRCUMFLEX BELOW]
,          case '\u24DB': // ⓛ  [CIRCLED LATIN SMALL LETTER L]
,          case '\u2C61': // ⱡ  [LATIN SMALL LETTER L WITH DOUBLE BAR]
,          case '\uA747': // ꝇ  [LATIN SMALL LETTER BROKEN L]
,          case '\uA749': // ꝉ  [LATIN SMALL LETTER L WITH HIGH STROKE]
,          case '\uA781': // ꞁ  [LATIN SMALL LETTER TURNED L]
,          case '\uFF4C': // ｌ  [FULLWIDTH LATIN SMALL LETTER L]
,            output[outputPos++] = 'l';
,            break;
,          case '\u01C7': // Ǉ  [LATIN CAPITAL LETTER LJ]
,            output[outputPos++] = 'L';
,            output[outputPos++] = 'J';
,            break;
,          case '\u1EFA': // Ỻ  [LATIN CAPITAL LETTER MIDDLE-WELSH LL]
,            output[outputPos++] = 'L';
,            output[outputPos++] = 'L';
,            break;
,          case '\u01C8': // ǈ  [LATIN CAPITAL LETTER L WITH SMALL LETTER J]
,            output[outputPos++] = 'L';
,            output[outputPos++] = 'j';
,            break;
,          case '\u24A7': // ⒧  [PARENTHESIZED LATIN SMALL LETTER L]
,            output[outputPos++] = '(';
,            output[outputPos++] = 'l';
,            output[outputPos++] = ')';
,            break;
,          case '\u01C9': // ǉ  [LATIN SMALL LETTER LJ]
,            output[outputPos++] = 'l';
,            output[outputPos++] = 'j';
,            break;
,          case '\u1EFB': // ỻ  [LATIN SMALL LETTER MIDDLE-WELSH LL]
,            output[outputPos++] = 'l';
,            output[outputPos++] = 'l';
,            break;
,          case '\u02AA': // ʪ  [LATIN SMALL LETTER LS DIGRAPH]
,            output[outputPos++] = 'l';
,            output[outputPos++] = 's';
,            break;
,          case '\u02AB': // ʫ  [LATIN SMALL LETTER LZ DIGRAPH]
,            output[outputPos++] = 'l';
,            output[outputPos++] = 'z';
,            break;
,          case '\u019C': // Ɯ  [LATIN CAPITAL LETTER TURNED M]
,          case '\u1D0D': // ᴍ  [LATIN LETTER SMALL CAPITAL M]
,          case '\u1E3E': // Ḿ  [LATIN CAPITAL LETTER M WITH ACUTE]
,          case '\u1E40': // Ṁ  [LATIN CAPITAL LETTER M WITH DOT ABOVE]
,          case '\u1E42': // Ṃ  [LATIN CAPITAL LETTER M WITH DOT BELOW]
,          case '\u24C2': // Ⓜ  [CIRCLED LATIN CAPITAL LETTER M]
,          case '\u2C6E': // Ɱ  [LATIN CAPITAL LETTER M WITH HOOK]
,          case '\uA7FD': // ꟽ  [LATIN EPIGRAPHIC LETTER INVERTED M]
,          case '\uA7FF': // ꟿ  [LATIN EPIGRAPHIC LETTER ARCHAIC M]
,          case '\uFF2D': // Ｍ  [FULLWIDTH LATIN CAPITAL LETTER M]
,            output[outputPos++] = 'M';
,            break;
,          case '\u026F': // ɯ  [LATIN SMALL LETTER TURNED M]
,          case '\u0270': // ɰ  [LATIN SMALL LETTER TURNED M WITH LONG LEG]
,          case '\u0271': // ɱ  [LATIN SMALL LETTER M WITH HOOK]
,          case '\u1D6F': // ᵯ  [LATIN SMALL LETTER M WITH MIDDLE TILDE]
,          case '\u1D86': // ᶆ  [LATIN SMALL LETTER M WITH PALATAL HOOK]
,          case '\u1E3F': // ḿ  [LATIN SMALL LETTER M WITH ACUTE]
,          case '\u1E41': // ṁ  [LATIN SMALL LETTER M WITH DOT ABOVE]
,          case '\u1E43': // ṃ  [LATIN SMALL LETTER M WITH DOT BELOW]
,          case '\u24DC': // ⓜ  [CIRCLED LATIN SMALL LETTER M]
,          case '\uFF4D': // ｍ  [FULLWIDTH LATIN SMALL LETTER M]
,            output[outputPos++] = 'm';
,            break;
,          case '\u24A8': // ⒨  [PARENTHESIZED LATIN SMALL LETTER M]
,            output[outputPos++] = '(';
,            output[outputPos++] = 'm';
,            output[outputPos++] = ')';
,            break;
,          case '\u00D1': // Ñ  [LATIN CAPITAL LETTER N WITH TILDE]
,          case '\u0143': // Ń  [LATIN CAPITAL LETTER N WITH ACUTE]
,          case '\u0145': // Ņ  [LATIN CAPITAL LETTER N WITH CEDILLA]
,          case '\u0147': // Ň  [LATIN CAPITAL LETTER N WITH CARON]
,          case '\u014A': // Ŋ  http://en.wikipedia.org/wiki/Eng_(letter)  [LATIN CAPITAL LETTER ENG]
,          case '\u019D': // Ɲ  [LATIN CAPITAL LETTER N WITH LEFT HOOK]
,          case '\u01F8': // Ǹ  [LATIN CAPITAL LETTER N WITH GRAVE]
,          case '\u0220': // Ƞ  [LATIN CAPITAL LETTER N WITH LONG RIGHT LEG]
,          case '\u0274': // ɴ  [LATIN LETTER SMALL CAPITAL N]
,          case '\u1D0E': // ᴎ  [LATIN LETTER SMALL CAPITAL REVERSED N]
,          case '\u1E44': // Ṅ  [LATIN CAPITAL LETTER N WITH DOT ABOVE]
,          case '\u1E46': // Ṇ  [LATIN CAPITAL LETTER N WITH DOT BELOW]
,          case '\u1E48': // Ṉ  [LATIN CAPITAL LETTER N WITH LINE BELOW]
,          case '\u1E4A': // Ṋ  [LATIN CAPITAL LETTER N WITH CIRCUMFLEX BELOW]
,          case '\u24C3': // Ⓝ  [CIRCLED LATIN CAPITAL LETTER N]
,          case '\uFF2E': // Ｎ  [FULLWIDTH LATIN CAPITAL LETTER N]
,            output[outputPos++] = 'N';
,            break;
,          case '\u00F1': // ñ  [LATIN SMALL LETTER N WITH TILDE]
,          case '\u0144': // ń  [LATIN SMALL LETTER N WITH ACUTE]
,          case '\u0146': // ņ  [LATIN SMALL LETTER N WITH CEDILLA]
,          case '\u0148': // ň  [LATIN SMALL LETTER N WITH CARON]
,          case '\u0149': // ŉ  [LATIN SMALL LETTER N PRECEDED BY APOSTROPHE]
,          case '\u014B': // ŋ  http://en.wikipedia.org/wiki/Eng_(letter)  [LATIN SMALL LETTER ENG]
,          case '\u019E': // ƞ  [LATIN SMALL LETTER N WITH LONG RIGHT LEG]
,          case '\u01F9': // ǹ  [LATIN SMALL LETTER N WITH GRAVE]
,          case '\u0235': // ȵ  [LATIN SMALL LETTER N WITH CURL]
,          case '\u0272': // ɲ  [LATIN SMALL LETTER N WITH LEFT HOOK]
,          case '\u0273': // ɳ  [LATIN SMALL LETTER N WITH RETROFLEX HOOK]
,          case '\u1D70': // ᵰ  [LATIN SMALL LETTER N WITH MIDDLE TILDE]
,          case '\u1D87': // ᶇ  [LATIN SMALL LETTER N WITH PALATAL HOOK]
,          case '\u1E45': // ṅ  [LATIN SMALL LETTER N WITH DOT ABOVE]
,          case '\u1E47': // ṇ  [LATIN SMALL LETTER N WITH DOT BELOW]
,          case '\u1E49': // ṉ  [LATIN SMALL LETTER N WITH LINE BELOW]
,          case '\u1E4B': // ṋ  [LATIN SMALL LETTER N WITH CIRCUMFLEX BELOW]
,          case '\u207F': // ⁿ  [SUPERSCRIPT LATIN SMALL LETTER N]
,          case '\u24DD': // ⓝ  [CIRCLED LATIN SMALL LETTER N]
,          case '\uFF4E': // ｎ  [FULLWIDTH LATIN SMALL LETTER N]
,            output[outputPos++] = 'n';
,            break;
,          case '\u01CA': // Ǌ  [LATIN CAPITAL LETTER NJ]
,            output[outputPos++] = 'N';
,            output[outputPos++] = 'J';
,            break;
,          case '\u01CB': // ǋ  [LATIN CAPITAL LETTER N WITH SMALL LETTER J]
,            output[outputPos++] = 'N';
,            output[outputPos++] = 'j';
,            break;
,          case '\u24A9': // ⒩  [PARENTHESIZED LATIN SMALL LETTER N]
,            output[outputPos++] = '(';
,            output[outputPos++] = 'n';
,            output[outputPos++] = ')';
,            break;
,          case '\u01CC': // ǌ  [LATIN SMALL LETTER NJ]
,            output[outputPos++] = 'n';
,            output[outputPos++] = 'j';
,            break;
,          case '\u00D2': // Ò  [LATIN CAPITAL LETTER O WITH GRAVE]
,          case '\u00D3': // Ó  [LATIN CAPITAL LETTER O WITH ACUTE]
,          case '\u00D4': // Ô  [LATIN CAPITAL LETTER O WITH CIRCUMFLEX]
,          case '\u00D5': // Õ  [LATIN CAPITAL LETTER O WITH TILDE]
,          case '\u00D6': // Ö  [LATIN CAPITAL LETTER O WITH DIAERESIS]
,          case '\u00D8': // Ø  [LATIN CAPITAL LETTER O WITH STROKE]
,          case '\u014C': // Ō  [LATIN CAPITAL LETTER O WITH MACRON]
,          case '\u014E': // Ŏ  [LATIN CAPITAL LETTER O WITH BREVE]
,          case '\u0150': // Ő  [LATIN CAPITAL LETTER O WITH DOUBLE ACUTE]
,          case '\u0186': // Ɔ  [LATIN CAPITAL LETTER OPEN O]
,          case '\u019F': // Ɵ  [LATIN CAPITAL LETTER O WITH MIDDLE TILDE]
,          case '\u01A0': // Ơ  [LATIN CAPITAL LETTER O WITH HORN]
,          case '\u01D1': // Ǒ  [LATIN CAPITAL LETTER O WITH CARON]
,          case '\u01EA': // Ǫ  [LATIN CAPITAL LETTER O WITH OGONEK]
,          case '\u01EC': // Ǭ  [LATIN CAPITAL LETTER O WITH OGONEK AND MACRON]
,          case '\u01FE': // Ǿ  [LATIN CAPITAL LETTER O WITH STROKE AND ACUTE]
,          case '\u020C': // Ȍ  [LATIN CAPITAL LETTER O WITH DOUBLE GRAVE]
,          case '\u020E': // Ȏ  [LATIN CAPITAL LETTER O WITH INVERTED BREVE]
,          case '\u022A': // Ȫ  [LATIN CAPITAL LETTER O WITH DIAERESIS AND MACRON]
,          case '\u022C': // Ȭ  [LATIN CAPITAL LETTER O WITH TILDE AND MACRON]
,          case '\u022E': // Ȯ  [LATIN CAPITAL LETTER O WITH DOT ABOVE]
,          case '\u0230': // Ȱ  [LATIN CAPITAL LETTER O WITH DOT ABOVE AND MACRON]
,          case '\u1D0F': // ᴏ  [LATIN LETTER SMALL CAPITAL O]
,          case '\u1D10': // ᴐ  [LATIN LETTER SMALL CAPITAL OPEN O]
,          case '\u1E4C': // Ṍ  [LATIN CAPITAL LETTER O WITH TILDE AND ACUTE]
,          case '\u1E4E': // Ṏ  [LATIN CAPITAL LETTER O WITH TILDE AND DIAERESIS]
,          case '\u1E50': // Ṑ  [LATIN CAPITAL LETTER O WITH MACRON AND GRAVE]
,          case '\u1E52': // Ṓ  [LATIN CAPITAL LETTER O WITH MACRON AND ACUTE]
,          case '\u1ECC': // Ọ  [LATIN CAPITAL LETTER O WITH DOT BELOW]
,          case '\u1ECE': // Ỏ  [LATIN CAPITAL LETTER O WITH HOOK ABOVE]
,          case '\u1ED0': // Ố  [LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND ACUTE]
,          case '\u1ED2': // Ồ  [LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND GRAVE]
,          case '\u1ED4': // Ổ  [LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE]
,          case '\u1ED6': // Ỗ  [LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND TILDE]
,          case '\u1ED8': // Ộ  [LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND DOT BELOW]
,          case '\u1EDA': // Ớ  [LATIN CAPITAL LETTER O WITH HORN AND ACUTE]
,          case '\u1EDC': // Ờ  [LATIN CAPITAL LETTER O WITH HORN AND GRAVE]
,          case '\u1EDE': // Ở  [LATIN CAPITAL LETTER O WITH HORN AND HOOK ABOVE]
,          case '\u1EE0': // Ỡ  [LATIN CAPITAL LETTER O WITH HORN AND TILDE]
,          case '\u1EE2': // Ợ  [LATIN CAPITAL LETTER O WITH HORN AND DOT BELOW]
,          case '\u24C4': // Ⓞ  [CIRCLED LATIN CAPITAL LETTER O]
,          case '\uA74A': // Ꝋ  [LATIN CAPITAL LETTER O WITH LONG STROKE OVERLAY]
,          case '\uA74C': // Ꝍ  [LATIN CAPITAL LETTER O WITH LOOP]
,          case '\uFF2F': // Ｏ  [FULLWIDTH LATIN CAPITAL LETTER O]
,            output[outputPos++] = 'O';
,            break;
,          case '\u00F2': // ò  [LATIN SMALL LETTER O WITH GRAVE]
,          case '\u00F3': // ó  [LATIN SMALL LETTER O WITH ACUTE]
,          case '\u00F4': // ô  [LATIN SMALL LETTER O WITH CIRCUMFLEX]
,          case '\u00F5': // õ  [LATIN SMALL LETTER O WITH TILDE]
,          case '\u00F6': // ö  [LATIN SMALL LETTER O WITH DIAERESIS]
,          case '\u00F8': // ø  [LATIN SMALL LETTER O WITH STROKE]
,          case '\u014D': // ō  [LATIN SMALL LETTER O WITH MACRON]
,          case '\u014F': // ŏ  [LATIN SMALL LETTER O WITH BREVE]
,          case '\u0151': // ő  [LATIN SMALL LETTER O WITH DOUBLE ACUTE]
,          case '\u01A1': // ơ  [LATIN SMALL LETTER O WITH HORN]
,          case '\u01D2': // ǒ  [LATIN SMALL LETTER O WITH CARON]
,          case '\u01EB': // ǫ  [LATIN SMALL LETTER O WITH OGONEK]
,          case '\u01ED': // ǭ  [LATIN SMALL LETTER O WITH OGONEK AND MACRON]
,          case '\u01FF': // ǿ  [LATIN SMALL LETTER O WITH STROKE AND ACUTE]
,          case '\u020D': // ȍ  [LATIN SMALL LETTER O WITH DOUBLE GRAVE]
,          case '\u020F': // ȏ  [LATIN SMALL LETTER O WITH INVERTED BREVE]
,          case '\u022B': // ȫ  [LATIN SMALL LETTER O WITH DIAERESIS AND MACRON]
,          case '\u022D': // ȭ  [LATIN SMALL LETTER O WITH TILDE AND MACRON]
,          case '\u022F': // ȯ  [LATIN SMALL LETTER O WITH DOT ABOVE]
,          case '\u0231': // ȱ  [LATIN SMALL LETTER O WITH DOT ABOVE AND MACRON]
,          case '\u0254': // ɔ  [LATIN SMALL LETTER OPEN O]
,          case '\u0275': // ɵ  [LATIN SMALL LETTER BARRED O]
,          case '\u1D16': // ᴖ  [LATIN SMALL LETTER TOP HALF O]
,          case '\u1D17': // ᴗ  [LATIN SMALL LETTER BOTTOM HALF O]
,          case '\u1D97': // ᶗ  [LATIN SMALL LETTER OPEN O WITH RETROFLEX HOOK]
,          case '\u1E4D': // ṍ  [LATIN SMALL LETTER O WITH TILDE AND ACUTE]
,          case '\u1E4F': // ṏ  [LATIN SMALL LETTER O WITH TILDE AND DIAERESIS]
,          case '\u1E51': // ṑ  [LATIN SMALL LETTER O WITH MACRON AND GRAVE]
,          case '\u1E53': // ṓ  [LATIN SMALL LETTER O WITH MACRON AND ACUTE]
,          case '\u1ECD': // ọ  [LATIN SMALL LETTER O WITH DOT BELOW]
,          case '\u1ECF': // ỏ  [LATIN SMALL LETTER O WITH HOOK ABOVE]
,          case '\u1ED1': // ố  [LATIN SMALL LETTER O WITH CIRCUMFLEX AND ACUTE]
,          case '\u1ED3': // ồ  [LATIN SMALL LETTER O WITH CIRCUMFLEX AND GRAVE]
,          case '\u1ED5': // ổ  [LATIN SMALL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE]
,          case '\u1ED7': // ỗ  [LATIN SMALL LETTER O WITH CIRCUMFLEX AND TILDE]
,          case '\u1ED9': // ộ  [LATIN SMALL LETTER O WITH CIRCUMFLEX AND DOT BELOW]
,          case '\u1EDB': // ớ  [LATIN SMALL LETTER O WITH HORN AND ACUTE]
,          case '\u1EDD': // ờ  [LATIN SMALL LETTER O WITH HORN AND GRAVE]
,          case '\u1EDF': // ở  [LATIN SMALL LETTER O WITH HORN AND HOOK ABOVE]
,          case '\u1EE1': // ỡ  [LATIN SMALL LETTER O WITH HORN AND TILDE]
,          case '\u1EE3': // ợ  [LATIN SMALL LETTER O WITH HORN AND DOT BELOW]
,          case '\u2092': // ₒ  [LATIN SUBSCRIPT SMALL LETTER O]
,          case '\u24DE': // ⓞ  [CIRCLED LATIN SMALL LETTER O]
,          case '\u2C7A': // ⱺ  [LATIN SMALL LETTER O WITH LOW RING INSIDE]
,          case '\uA74B': // ꝋ  [LATIN SMALL LETTER O WITH LONG STROKE OVERLAY]
,          case '\uA74D': // ꝍ  [LATIN SMALL LETTER O WITH LOOP]
,          case '\uFF4F': // ｏ  [FULLWIDTH LATIN SMALL LETTER O]
,            output[outputPos++] = 'o';
,            break;
,          case '\u0152': // Œ  [LATIN CAPITAL LIGATURE OE]
,          case '\u0276': // ɶ  [LATIN LETTER SMALL CAPITAL OE]
,            output[outputPos++] = 'O';
,            output[outputPos++] = 'E';
,            break;
,          case '\uA74E': // Ꝏ  [LATIN CAPITAL LETTER OO]
,            output[outputPos++] = 'O';
,            output[outputPos++] = 'O';
,            break;
,          case '\u0222': // Ȣ  http://en.wikipedia.org/wiki/OU  [LATIN CAPITAL LETTER OU]
,          case '\u1D15': // ᴕ  [LATIN LETTER SMALL CAPITAL OU]
,            output[outputPos++] = 'O';
,            output[outputPos++] = 'U';
,            break;
,          case '\u24AA': // ⒪  [PARENTHESIZED LATIN SMALL LETTER O]
,            output[outputPos++] = '(';
,            output[outputPos++] = 'o';
,            output[outputPos++] = ')';
,            break;
,          case '\u0153': // œ  [LATIN SMALL LIGATURE OE]
,          case '\u1D14': // ᴔ  [LATIN SMALL LETTER TURNED OE]
,            output[outputPos++] = 'o';
,            output[outputPos++] = 'e';
,            break;
,          case '\uA74F': // ꝏ  [LATIN SMALL LETTER OO]
,            output[outputPos++] = 'o';
,            output[outputPos++] = 'o';
,            break;
,          case '\u0223': // ȣ  http://en.wikipedia.org/wiki/OU  [LATIN SMALL LETTER OU]
,            output[outputPos++] = 'o';
,            output[outputPos++] = 'u';
,            break;
,          case '\u01A4': // Ƥ  [LATIN CAPITAL LETTER P WITH HOOK]
,          case '\u1D18': // ᴘ  [LATIN LETTER SMALL CAPITAL P]
,          case '\u1E54': // Ṕ  [LATIN CAPITAL LETTER P WITH ACUTE]
,          case '\u1E56': // Ṗ  [LATIN CAPITAL LETTER P WITH DOT ABOVE]
,          case '\u24C5': // Ⓟ  [CIRCLED LATIN CAPITAL LETTER P]
,          case '\u2C63': // Ᵽ  [LATIN CAPITAL LETTER P WITH STROKE]
,          case '\uA750': // Ꝑ  [LATIN CAPITAL LETTER P WITH STROKE THROUGH DESCENDER]
,          case '\uA752': // Ꝓ  [LATIN CAPITAL LETTER P WITH FLOURISH]
,          case '\uA754': // Ꝕ  [LATIN CAPITAL LETTER P WITH SQUIRREL TAIL]
,          case '\uFF30': // Ｐ  [FULLWIDTH LATIN CAPITAL LETTER P]
,            output[outputPos++] = 'P';
,            break;
,          case '\u01A5': // ƥ  [LATIN SMALL LETTER P WITH HOOK]
,          case '\u1D71': // ᵱ  [LATIN SMALL LETTER P WITH MIDDLE TILDE]
,          case '\u1D7D': // ᵽ  [LATIN SMALL LETTER P WITH STROKE]
,          case '\u1D88': // ᶈ  [LATIN SMALL LETTER P WITH PALATAL HOOK]
,          case '\u1E55': // ṕ  [LATIN SMALL LETTER P WITH ACUTE]
,          case '\u1E57': // ṗ  [LATIN SMALL LETTER P WITH DOT ABOVE]
,          case '\u24DF': // ⓟ  [CIRCLED LATIN SMALL LETTER P]
,          case '\uA751': // ꝑ  [LATIN SMALL LETTER P WITH STROKE THROUGH DESCENDER]
,          case '\uA753': // ꝓ  [LATIN SMALL LETTER P WITH FLOURISH]
,          case '\uA755': // ꝕ  [LATIN SMALL LETTER P WITH SQUIRREL TAIL]
,          case '\uA7FC': // ꟼ  [LATIN EPIGRAPHIC LETTER REVERSED P]
,          case '\uFF50': // ｐ  [FULLWIDTH LATIN SMALL LETTER P]
,            output[outputPos++] = 'p';
,            break;
,          case '\u24AB': // ⒫  [PARENTHESIZED LATIN SMALL LETTER P]
,            output[outputPos++] = '(';
,            output[outputPos++] = 'p';
,            output[outputPos++] = ')';
,            break;
,          case '\u024A': // Ɋ  [LATIN CAPITAL LETTER SMALL Q WITH HOOK TAIL]
,          case '\u24C6': // Ⓠ  [CIRCLED LATIN CAPITAL LETTER Q]
,          case '\uA756': // Ꝗ  [LATIN CAPITAL LETTER Q WITH STROKE THROUGH DESCENDER]
,          case '\uA758': // Ꝙ  [LATIN CAPITAL LETTER Q WITH DIAGONAL STROKE]
,          case '\uFF31': // Ｑ  [FULLWIDTH LATIN CAPITAL LETTER Q]
,            output[outputPos++] = 'Q';
,            break;
,          case '\u0138': // ĸ  http://en.wikipedia.org/wiki/Kra_(letter)  [LATIN SMALL LETTER KRA]
,          case '\u024B': // ɋ  [LATIN SMALL LETTER Q WITH HOOK TAIL]
,          case '\u02A0': // ʠ  [LATIN SMALL LETTER Q WITH HOOK]
,          case '\u24E0': // ⓠ  [CIRCLED LATIN SMALL LETTER Q]
,          case '\uA757': // ꝗ  [LATIN SMALL LETTER Q WITH STROKE THROUGH DESCENDER]
,          case '\uA759': // ꝙ  [LATIN SMALL LETTER Q WITH DIAGONAL STROKE]
,          case '\uFF51': // ｑ  [FULLWIDTH LATIN SMALL LETTER Q]
,            output[outputPos++] = 'q';
,            break;
,          case '\u24AC': // ⒬  [PARENTHESIZED LATIN SMALL LETTER Q]
,            output[outputPos++] = '(';
,            output[outputPos++] = 'q';
,            output[outputPos++] = ')';
,            break;
,          case '\u0239': // ȹ  [LATIN SMALL LETTER QP DIGRAPH]
,            output[outputPos++] = 'q';
,            output[outputPos++] = 'p';
,            break;
,          case '\u0154': // Ŕ  [LATIN CAPITAL LETTER R WITH ACUTE]
,          case '\u0156': // Ŗ  [LATIN CAPITAL LETTER R WITH CEDILLA]
,          case '\u0158': // Ř  [LATIN CAPITAL LETTER R WITH CARON]
,          case '\u0210': // Ȓ  [LATIN CAPITAL LETTER R WITH DOUBLE GRAVE]
,          case '\u0212': // Ȓ  [LATIN CAPITAL LETTER R WITH INVERTED BREVE]
,          case '\u024C': // Ɍ  [LATIN CAPITAL LETTER R WITH STROKE]
,          case '\u0280': // ʀ  [LATIN LETTER SMALL CAPITAL R]
,          case '\u0281': // ʁ  [LATIN LETTER SMALL CAPITAL INVERTED R]
,          case '\u1D19': // ᴙ  [LATIN LETTER SMALL CAPITAL REVERSED R]
,          case '\u1D1A': // ᴚ  [LATIN LETTER SMALL CAPITAL TURNED R]
,          case '\u1E58': // Ṙ  [LATIN CAPITAL LETTER R WITH DOT ABOVE]
,          case '\u1E5A': // Ṛ  [LATIN CAPITAL LETTER R WITH DOT BELOW]
,          case '\u1E5C': // Ṝ  [LATIN CAPITAL LETTER R WITH DOT BELOW AND MACRON]
,          case '\u1E5E': // Ṟ  [LATIN CAPITAL LETTER R WITH LINE BELOW]
,          case '\u24C7': // Ⓡ  [CIRCLED LATIN CAPITAL LETTER R]
,          case '\u2C64': // Ɽ  [LATIN CAPITAL LETTER R WITH TAIL]
,          case '\uA75A': // Ꝛ  [LATIN CAPITAL LETTER R ROTUNDA]
,          case '\uA782': // Ꞃ  [LATIN CAPITAL LETTER INSULAR R]
,          case '\uFF32': // Ｒ  [FULLWIDTH LATIN CAPITAL LETTER R]
,            output[outputPos++] = 'R';
,            break;
,          case '\u0155': // ŕ  [LATIN SMALL LETTER R WITH ACUTE]
,          case '\u0157': // ŗ  [LATIN SMALL LETTER R WITH CEDILLA]
,          case '\u0159': // ř  [LATIN SMALL LETTER R WITH CARON]
,          case '\u0211': // ȑ  [LATIN SMALL LETTER R WITH DOUBLE GRAVE]
,          case '\u0213': // ȓ  [LATIN SMALL LETTER R WITH INVERTED BREVE]
,          case '\u024D': // ɍ  [LATIN SMALL LETTER R WITH STROKE]
,          case '\u027C': // ɼ  [LATIN SMALL LETTER R WITH LONG LEG]
,          case '\u027D': // ɽ  [LATIN SMALL LETTER R WITH TAIL]
,          case '\u027E': // ɾ  [LATIN SMALL LETTER R WITH FISHHOOK]
,          case '\u027F': // ɿ  [LATIN SMALL LETTER REVERSED R WITH FISHHOOK]
,          case '\u1D63': // ᵣ  [LATIN SUBSCRIPT SMALL LETTER R]
,          case '\u1D72': // ᵲ  [LATIN SMALL LETTER R WITH MIDDLE TILDE]
,          case '\u1D73': // ᵳ  [LATIN SMALL LETTER R WITH FISHHOOK AND MIDDLE TILDE]
,          case '\u1D89': // ᶉ  [LATIN SMALL LETTER R WITH PALATAL HOOK]
,          case '\u1E59': // ṙ  [LATIN SMALL LETTER R WITH DOT ABOVE]
,          case '\u1E5B': // ṛ  [LATIN SMALL LETTER R WITH DOT BELOW]
,          case '\u1E5D': // ṝ  [LATIN SMALL LETTER R WITH DOT BELOW AND MACRON]
,          case '\u1E5F': // ṟ  [LATIN SMALL LETTER R WITH LINE BELOW]
,          case '\u24E1': // ⓡ  [CIRCLED LATIN SMALL LETTER R]
,          case '\uA75B': // ꝛ  [LATIN SMALL LETTER R ROTUNDA]
,          case '\uA783': // ꞃ  [LATIN SMALL LETTER INSULAR R]
,          case '\uFF52': // ｒ  [FULLWIDTH LATIN SMALL LETTER R]
,            output[outputPos++] = 'r';
,            break;
,          case '\u24AD': // ⒭  [PARENTHESIZED LATIN SMALL LETTER R]
,            output[outputPos++] = '(';
,            output[outputPos++] = 'r';
,            output[outputPos++] = ')';
,            break;
,          case '\u015A': // Ś  [LATIN CAPITAL LETTER S WITH ACUTE]
,          case '\u015C': // Ŝ  [LATIN CAPITAL LETTER S WITH CIRCUMFLEX]
,          case '\u015E': // Ş  [LATIN CAPITAL LETTER S WITH CEDILLA]
,          case '\u0160': // Š  [LATIN CAPITAL LETTER S WITH CARON]
,          case '\u0218': // Ș  [LATIN CAPITAL LETTER S WITH COMMA BELOW]
,          case '\u1E60': // Ṡ  [LATIN CAPITAL LETTER S WITH DOT ABOVE]
,          case '\u1E62': // Ṣ  [LATIN CAPITAL LETTER S WITH DOT BELOW]
,          case '\u1E64': // Ṥ  [LATIN CAPITAL LETTER S WITH ACUTE AND DOT ABOVE]
,          case '\u1E66': // Ṧ  [LATIN CAPITAL LETTER S WITH CARON AND DOT ABOVE]
,          case '\u1E68': // Ṩ  [LATIN CAPITAL LETTER S WITH DOT BELOW AND DOT ABOVE]
,          case '\u24C8': // Ⓢ  [CIRCLED LATIN CAPITAL LETTER S]
,          case '\uA731': // ꜱ  [LATIN LETTER SMALL CAPITAL S]
,          case '\uA785': // ꞅ  [LATIN SMALL LETTER INSULAR S]
,          case '\uFF33': // Ｓ  [FULLWIDTH LATIN CAPITAL LETTER S]
,            output[outputPos++] = 'S';
,            break;
,          case '\u015B': // ś  [LATIN SMALL LETTER S WITH ACUTE]
,          case '\u015D': // ŝ  [LATIN SMALL LETTER S WITH CIRCUMFLEX]
,          case '\u015F': // ş  [LATIN SMALL LETTER S WITH CEDILLA]
,          case '\u0161': // š  [LATIN SMALL LETTER S WITH CARON]
,          case '\u017F': // ſ  http://en.wikipedia.org/wiki/Long_S  [LATIN SMALL LETTER LONG S]
,          case '\u0219': // ș  [LATIN SMALL LETTER S WITH COMMA BELOW]
,          case '\u023F': // ȿ  [LATIN SMALL LETTER S WITH SWASH TAIL]
,          case '\u0282': // ʂ  [LATIN SMALL LETTER S WITH HOOK]
,          case '\u1D74': // ᵴ  [LATIN SMALL LETTER S WITH MIDDLE TILDE]
,          case '\u1D8A': // ᶊ  [LATIN SMALL LETTER S WITH PALATAL HOOK]
,          case '\u1E61': // ṡ  [LATIN SMALL LETTER S WITH DOT ABOVE]
,          case '\u1E63': // ṣ  [LATIN SMALL LETTER S WITH DOT BELOW]
,          case '\u1E65': // ṥ  [LATIN SMALL LETTER S WITH ACUTE AND DOT ABOVE]
,          case '\u1E67': // ṧ  [LATIN SMALL LETTER S WITH CARON AND DOT ABOVE]
,          case '\u1E69': // ṩ  [LATIN SMALL LETTER S WITH DOT BELOW AND DOT ABOVE]
,          case '\u1E9C': // ẜ  [LATIN SMALL LETTER LONG S WITH DIAGONAL STROKE]
,          case '\u1E9D': // ẝ  [LATIN SMALL LETTER LONG S WITH HIGH STROKE]
,          case '\u24E2': // ⓢ  [CIRCLED LATIN SMALL LETTER S]
,          case '\uA784': // Ꞅ  [LATIN CAPITAL LETTER INSULAR S]
,          case '\uFF53': // ｓ  [FULLWIDTH LATIN SMALL LETTER S]
,            output[outputPos++] = 's';
,            break;
,          case '\u1E9E': // ẞ  [LATIN CAPITAL LETTER SHARP S]
,            output[outputPos++] = 'S';
,            output[outputPos++] = 'S';
,            break;
,          case '\u24AE': // ⒮  [PARENTHESIZED LATIN SMALL LETTER S]
,            output[outputPos++] = '(';
,            output[outputPos++] = 's';
,            output[outputPos++] = ')';
,            break;
,          case '\u00DF': // ß  [LATIN SMALL LETTER SHARP S]
,            output[outputPos++] = 's';
,            output[outputPos++] = 's';
,            break;
,          case '\uFB06': // ﬆ  [LATIN SMALL LIGATURE ST]
,            output[outputPos++] = 's';
,            output[outputPos++] = 't';
,            break;
,          case '\u0162': // Ţ  [LATIN CAPITAL LETTER T WITH CEDILLA]
,          case '\u0164': // Ť  [LATIN CAPITAL LETTER T WITH CARON]
,          case '\u0166': // Ŧ  [LATIN CAPITAL LETTER T WITH STROKE]
,          case '\u01AC': // Ƭ  [LATIN CAPITAL LETTER T WITH HOOK]
,          case '\u01AE': // Ʈ  [LATIN CAPITAL LETTER T WITH RETROFLEX HOOK]
,          case '\u021A': // Ț  [LATIN CAPITAL LETTER T WITH COMMA BELOW]
,          case '\u023E': // Ⱦ  [LATIN CAPITAL LETTER T WITH DIAGONAL STROKE]
,          case '\u1D1B': // ᴛ  [LATIN LETTER SMALL CAPITAL T]
,          case '\u1E6A': // Ṫ  [LATIN CAPITAL LETTER T WITH DOT ABOVE]
,          case '\u1E6C': // Ṭ  [LATIN CAPITAL LETTER T WITH DOT BELOW]
,          case '\u1E6E': // Ṯ  [LATIN CAPITAL LETTER T WITH LINE BELOW]
,          case '\u1E70': // Ṱ  [LATIN CAPITAL LETTER T WITH CIRCUMFLEX BELOW]
,          case '\u24C9': // Ⓣ  [CIRCLED LATIN CAPITAL LETTER T]
,          case '\uA786': // Ꞇ  [LATIN CAPITAL LETTER INSULAR T]
,          case '\uFF34': // Ｔ  [FULLWIDTH LATIN CAPITAL LETTER T]
,            output[outputPos++] = 'T';
,            break;
,          case '\u0163': // ţ  [LATIN SMALL LETTER T WITH CEDILLA]
,          case '\u0165': // ť  [LATIN SMALL LETTER T WITH CARON]
,          case '\u0167': // ŧ  [LATIN SMALL LETTER T WITH STROKE]
,          case '\u01AB': // ƫ  [LATIN SMALL LETTER T WITH PALATAL HOOK]
,          case '\u01AD': // ƭ  [LATIN SMALL LETTER T WITH HOOK]
,          case '\u021B': // ț  [LATIN SMALL LETTER T WITH COMMA BELOW]
,          case '\u0236': // ȶ  [LATIN SMALL LETTER T WITH CURL]
,          case '\u0287': // ʇ  [LATIN SMALL LETTER TURNED T]
,          case '\u0288': // ʈ  [LATIN SMALL LETTER T WITH RETROFLEX HOOK]
,          case '\u1D75': // ᵵ  [LATIN SMALL LETTER T WITH MIDDLE TILDE]
,          case '\u1E6B': // ṫ  [LATIN SMALL LETTER T WITH DOT ABOVE]
,          case '\u1E6D': // ṭ  [LATIN SMALL LETTER T WITH DOT BELOW]
,          case '\u1E6F': // ṯ  [LATIN SMALL LETTER T WITH LINE BELOW]
,          case '\u1E71': // ṱ  [LATIN SMALL LETTER T WITH CIRCUMFLEX BELOW]
,          case '\u1E97': // ẗ  [LATIN SMALL LETTER T WITH DIAERESIS]
,          case '\u24E3': // ⓣ  [CIRCLED LATIN SMALL LETTER T]
,          case '\u2C66': // ⱦ  [LATIN SMALL LETTER T WITH DIAGONAL STROKE]
,          case '\uFF54': // ｔ  [FULLWIDTH LATIN SMALL LETTER T]
,            output[outputPos++] = 't';
,            break;
,          case '\u00DE': // Þ  [LATIN CAPITAL LETTER THORN]
,          case '\uA766': // Ꝧ  [LATIN CAPITAL LETTER THORN WITH STROKE THROUGH DESCENDER]
,            output[outputPos++] = 'T';
,            output[outputPos++] = 'H';
,            break;
,          case '\uA728': // Ꜩ  [LATIN CAPITAL LETTER TZ]
,            output[outputPos++] = 'T';
,            output[outputPos++] = 'Z';
,            break;
,          case '\u24AF': // ⒯  [PARENTHESIZED LATIN SMALL LETTER T]
,            output[outputPos++] = '(';
,            output[outputPos++] = 't';
,            output[outputPos++] = ')';
,            break;
,          case '\u02A8': // ʨ  [LATIN SMALL LETTER TC DIGRAPH WITH CURL]
,            output[outputPos++] = 't';
,            output[outputPos++] = 'c';
,            break;
,          case '\u00FE': // þ  [LATIN SMALL LETTER THORN]
,          case '\u1D7A': // ᵺ  [LATIN SMALL LETTER TH WITH STRIKETHROUGH]
,          case '\uA767': // ꝧ  [LATIN SMALL LETTER THORN WITH STROKE THROUGH DESCENDER]
,            output[outputPos++] = 't';
,            output[outputPos++] = 'h';
,            break;
,          case '\u02A6': // ʦ  [LATIN SMALL LETTER TS DIGRAPH]
,            output[outputPos++] = 't';
,            output[outputPos++] = 's';
,            break;
,          case '\uA729': // ꜩ  [LATIN SMALL LETTER TZ]
,            output[outputPos++] = 't';
,            output[outputPos++] = 'z';
,            break;
,          case '\u00D9': // Ù  [LATIN CAPITAL LETTER U WITH GRAVE]
,          case '\u00DA': // Ú  [LATIN CAPITAL LETTER U WITH ACUTE]
,          case '\u00DB': // Û  [LATIN CAPITAL LETTER U WITH CIRCUMFLEX]
,          case '\u00DC': // Ü  [LATIN CAPITAL LETTER U WITH DIAERESIS]
,          case '\u0168': // Ũ  [LATIN CAPITAL LETTER U WITH TILDE]
,          case '\u016A': // Ū  [LATIN CAPITAL LETTER U WITH MACRON]
,          case '\u016C': // Ŭ  [LATIN CAPITAL LETTER U WITH BREVE]
,          case '\u016E': // Ů  [LATIN CAPITAL LETTER U WITH RING ABOVE]
,          case '\u0170': // Ű  [LATIN CAPITAL LETTER U WITH DOUBLE ACUTE]
,          case '\u0172': // Ų  [LATIN CAPITAL LETTER U WITH OGONEK]
,          case '\u01AF': // Ư  [LATIN CAPITAL LETTER U WITH HORN]
,          case '\u01D3': // Ǔ  [LATIN CAPITAL LETTER U WITH CARON]
,          case '\u01D5': // Ǖ  [LATIN CAPITAL LETTER U WITH DIAERESIS AND MACRON]
,          case '\u01D7': // Ǘ  [LATIN CAPITAL LETTER U WITH DIAERESIS AND ACUTE]
,          case '\u01D9': // Ǚ  [LATIN CAPITAL LETTER U WITH DIAERESIS AND CARON]
,          case '\u01DB': // Ǜ  [LATIN CAPITAL LETTER U WITH DIAERESIS AND GRAVE]
,          case '\u0214': // Ȕ  [LATIN CAPITAL LETTER U WITH DOUBLE GRAVE]
,          case '\u0216': // Ȗ  [LATIN CAPITAL LETTER U WITH INVERTED BREVE]
,          case '\u0244': // Ʉ  [LATIN CAPITAL LETTER U BAR]
,          case '\u1D1C': // ᴜ  [LATIN LETTER SMALL CAPITAL U]
,          case '\u1D7E': // ᵾ  [LATIN SMALL CAPITAL LETTER U WITH STROKE]
,          case '\u1E72': // Ṳ  [LATIN CAPITAL LETTER U WITH DIAERESIS BELOW]
,          case '\u1E74': // Ṵ  [LATIN CAPITAL LETTER U WITH TILDE BELOW]
,          case '\u1E76': // Ṷ  [LATIN CAPITAL LETTER U WITH CIRCUMFLEX BELOW]
,          case '\u1E78': // Ṹ  [LATIN CAPITAL LETTER U WITH TILDE AND ACUTE]
,          case '\u1E7A': // Ṻ  [LATIN CAPITAL LETTER U WITH MACRON AND DIAERESIS]
,          case '\u1EE4': // Ụ  [LATIN CAPITAL LETTER U WITH DOT BELOW]
,          case '\u1EE6': // Ủ  [LATIN CAPITAL LETTER U WITH HOOK ABOVE]
,          case '\u1EE8': // Ứ  [LATIN CAPITAL LETTER U WITH HORN AND ACUTE]
,          case '\u1EEA': // Ừ  [LATIN CAPITAL LETTER U WITH HORN AND GRAVE]
,          case '\u1EEC': // Ử  [LATIN CAPITAL LETTER U WITH HORN AND HOOK ABOVE]
,          case '\u1EEE': // Ữ  [LATIN CAPITAL LETTER U WITH HORN AND TILDE]
,          case '\u1EF0': // Ự  [LATIN CAPITAL LETTER U WITH HORN AND DOT BELOW]
,          case '\u24CA': // Ⓤ  [CIRCLED LATIN CAPITAL LETTER U]
,          case '\uFF35': // Ｕ  [FULLWIDTH LATIN CAPITAL LETTER U]
,            output[outputPos++] = 'U';
,            break;
,          case '\u00F9': // ù  [LATIN SMALL LETTER U WITH GRAVE]
,          case '\u00FA': // ú  [LATIN SMALL LETTER U WITH ACUTE]
,          case '\u00FB': // û  [LATIN SMALL LETTER U WITH CIRCUMFLEX]
,          case '\u00FC': // ü  [LATIN SMALL LETTER U WITH DIAERESIS]
,          case '\u0169': // ũ  [LATIN SMALL LETTER U WITH TILDE]
,          case '\u016B': // ū  [LATIN SMALL LETTER U WITH MACRON]
,          case '\u016D': // ŭ  [LATIN SMALL LETTER U WITH BREVE]
,          case '\u016F': // ů  [LATIN SMALL LETTER U WITH RING ABOVE]
,          case '\u0171': // ű  [LATIN SMALL LETTER U WITH DOUBLE ACUTE]
,          case '\u0173': // ų  [LATIN SMALL LETTER U WITH OGONEK]
,          case '\u01B0': // ư  [LATIN SMALL LETTER U WITH HORN]
,          case '\u01D4': // ǔ  [LATIN SMALL LETTER U WITH CARON]
,          case '\u01D6': // ǖ  [LATIN SMALL LETTER U WITH DIAERESIS AND MACRON]
,          case '\u01D8': // ǘ  [LATIN SMALL LETTER U WITH DIAERESIS AND ACUTE]
,          case '\u01DA': // ǚ  [LATIN SMALL LETTER U WITH DIAERESIS AND CARON]
,          case '\u01DC': // ǜ  [LATIN SMALL LETTER U WITH DIAERESIS AND GRAVE]
,          case '\u0215': // ȕ  [LATIN SMALL LETTER U WITH DOUBLE GRAVE]
,          case '\u0217': // ȗ  [LATIN SMALL LETTER U WITH INVERTED BREVE]
,          case '\u0289': // ʉ  [LATIN SMALL LETTER U BAR]
,          case '\u1D64': // ᵤ  [LATIN SUBSCRIPT SMALL LETTER U]
,          case '\u1D99': // ᶙ  [LATIN SMALL LETTER U WITH RETROFLEX HOOK]
,          case '\u1E73': // ṳ  [LATIN SMALL LETTER U WITH DIAERESIS BELOW]
,          case '\u1E75': // ṵ  [LATIN SMALL LETTER U WITH TILDE BELOW]
,          case '\u1E77': // ṷ  [LATIN SMALL LETTER U WITH CIRCUMFLEX BELOW]
,          case '\u1E79': // ṹ  [LATIN SMALL LETTER U WITH TILDE AND ACUTE]
,          case '\u1E7B': // ṻ  [LATIN SMALL LETTER U WITH MACRON AND DIAERESIS]
,          case '\u1EE5': // ụ  [LATIN SMALL LETTER U WITH DOT BELOW]
,          case '\u1EE7': // ủ  [LATIN SMALL LETTER U WITH HOOK ABOVE]
,          case '\u1EE9': // ứ  [LATIN SMALL LETTER U WITH HORN AND ACUTE]
,          case '\u1EEB': // ừ  [LATIN SMALL LETTER U WITH HORN AND GRAVE]
,          case '\u1EED': // ử  [LATIN SMALL LETTER U WITH HORN AND HOOK ABOVE]
,          case '\u1EEF': // ữ  [LATIN SMALL LETTER U WITH HORN AND TILDE]
,          case '\u1EF1': // ự  [LATIN SMALL LETTER U WITH HORN AND DOT BELOW]
,          case '\u24E4': // ⓤ  [CIRCLED LATIN SMALL LETTER U]
,          case '\uFF55': // ｕ  [FULLWIDTH LATIN SMALL LETTER U]
,            output[outputPos++] = 'u';
,            break;
,          case '\u24B0': // ⒰  [PARENTHESIZED LATIN SMALL LETTER U]
,            output[outputPos++] = '(';
,            output[outputPos++] = 'u';
,            output[outputPos++] = ')';
,            break;
,          case '\u1D6B': // ᵫ  [LATIN SMALL LETTER UE]
,            output[outputPos++] = 'u';
,            output[outputPos++] = 'e';
,            break;
,          case '\u01B2': // Ʋ  [LATIN CAPITAL LETTER V WITH HOOK]
,          case '\u0245': // Ʌ  [LATIN CAPITAL LETTER TURNED V]
,          case '\u1D20': // ᴠ  [LATIN LETTER SMALL CAPITAL V]
,          case '\u1E7C': // Ṽ  [LATIN CAPITAL LETTER V WITH TILDE]
,          case '\u1E7E': // Ṿ  [LATIN CAPITAL LETTER V WITH DOT BELOW]
,          case '\u1EFC': // Ỽ  [LATIN CAPITAL LETTER MIDDLE-WELSH V]
,          case '\u24CB': // Ⓥ  [CIRCLED LATIN CAPITAL LETTER V]
,          case '\uA75E': // Ꝟ  [LATIN CAPITAL LETTER V WITH DIAGONAL STROKE]
,          case '\uA768': // Ꝩ  [LATIN CAPITAL LETTER VEND]
,          case '\uFF36': // Ｖ  [FULLWIDTH LATIN CAPITAL LETTER V]
,            output[outputPos++] = 'V';
,            break;
,          case '\u028B': // ʋ  [LATIN SMALL LETTER V WITH HOOK]
,          case '\u028C': // ʌ  [LATIN SMALL LETTER TURNED V]
,          case '\u1D65': // ᵥ  [LATIN SUBSCRIPT SMALL LETTER V]
,          case '\u1D8C': // ᶌ  [LATIN SMALL LETTER V WITH PALATAL HOOK]
,          case '\u1E7D': // ṽ  [LATIN SMALL LETTER V WITH TILDE]
,          case '\u1E7F': // ṿ  [LATIN SMALL LETTER V WITH DOT BELOW]
,          case '\u24E5': // ⓥ  [CIRCLED LATIN SMALL LETTER V]
,          case '\u2C71': // ⱱ  [LATIN SMALL LETTER V WITH RIGHT HOOK]
,          case '\u2C74': // ⱴ  [LATIN SMALL LETTER V WITH CURL]
,          case '\uA75F': // ꝟ  [LATIN SMALL LETTER V WITH DIAGONAL STROKE]
,          case '\uFF56': // ｖ  [FULLWIDTH LATIN SMALL LETTER V]
,            output[outputPos++] = 'v';
,            break;
,          case '\uA760': // Ꝡ  [LATIN CAPITAL LETTER VY]
,            output[outputPos++] = 'V';
,            output[outputPos++] = 'Y';
,            break;
,          case '\u24B1': // ⒱  [PARENTHESIZED LATIN SMALL LETTER V]
,            output[outputPos++] = '(';
,            output[outputPos++] = 'v';
,            output[outputPos++] = ')';
,            break;
,          case '\uA761': // ꝡ  [LATIN SMALL LETTER VY]
,            output[outputPos++] = 'v';
,            output[outputPos++] = 'y';
,            break;
,          case '\u0174': // Ŵ  [LATIN CAPITAL LETTER W WITH CIRCUMFLEX]
,          case '\u01F7': // Ƿ  http://en.wikipedia.org/wiki/Wynn  [LATIN CAPITAL LETTER WYNN]
,          case '\u1D21': // ᴡ  [LATIN LETTER SMALL CAPITAL W]
,          case '\u1E80': // Ẁ  [LATIN CAPITAL LETTER W WITH GRAVE]
,          case '\u1E82': // Ẃ  [LATIN CAPITAL LETTER W WITH ACUTE]
,          case '\u1E84': // Ẅ  [LATIN CAPITAL LETTER W WITH DIAERESIS]
,          case '\u1E86': // Ẇ  [LATIN CAPITAL LETTER W WITH DOT ABOVE]
,          case '\u1E88': // Ẉ  [LATIN CAPITAL LETTER W WITH DOT BELOW]
,          case '\u24CC': // Ⓦ  [CIRCLED LATIN CAPITAL LETTER W]
,          case '\u2C72': // Ⱳ  [LATIN CAPITAL LETTER W WITH HOOK]
,          case '\uFF37': // Ｗ  [FULLWIDTH LATIN CAPITAL LETTER W]
,            output[outputPos++] = 'W';
,            break;
,          case '\u0175': // ŵ  [LATIN SMALL LETTER W WITH CIRCUMFLEX]
,          case '\u01BF': // ƿ  http://en.wikipedia.org/wiki/Wynn  [LATIN LETTER WYNN]
,          case '\u028D': // ʍ  [LATIN SMALL LETTER TURNED W]
,          case '\u1E81': // ẁ  [LATIN SMALL LETTER W WITH GRAVE]
,          case '\u1E83': // ẃ  [LATIN SMALL LETTER W WITH ACUTE]
,          case '\u1E85': // ẅ  [LATIN SMALL LETTER W WITH DIAERESIS]
,          case '\u1E87': // ẇ  [LATIN SMALL LETTER W WITH DOT ABOVE]
,          case '\u1E89': // ẉ  [LATIN SMALL LETTER W WITH DOT BELOW]
,          case '\u1E98': // ẘ  [LATIN SMALL LETTER W WITH RING ABOVE]
,          case '\u24E6': // ⓦ  [CIRCLED LATIN SMALL LETTER W]
,          case '\u2C73': // ⱳ  [LATIN SMALL LETTER W WITH HOOK]
,          case '\uFF57': // ｗ  [FULLWIDTH LATIN SMALL LETTER W]
,            output[outputPos++] = 'w';
,            break;
,          case '\u24B2': // ⒲  [PARENTHESIZED LATIN SMALL LETTER W]
,            output[outputPos++] = '(';
,            output[outputPos++] = 'w';
,            output[outputPos++] = ')';
,            break;
,          case '\u1E8A': // Ẋ  [LATIN CAPITAL LETTER X WITH DOT ABOVE]
,          case '\u1E8C': // Ẍ  [LATIN CAPITAL LETTER X WITH DIAERESIS]
,          case '\u24CD': // Ⓧ  [CIRCLED LATIN CAPITAL LETTER X]
,          case '\uFF38': // Ｘ  [FULLWIDTH LATIN CAPITAL LETTER X]
,            output[outputPos++] = 'X';
,            break;
,          case '\u1D8D': // ᶍ  [LATIN SMALL LETTER X WITH PALATAL HOOK]
,          case '\u1E8B': // ẋ  [LATIN SMALL LETTER X WITH DOT ABOVE]
,          case '\u1E8D': // ẍ  [LATIN SMALL LETTER X WITH DIAERESIS]
,          case '\u2093': // ₓ  [LATIN SUBSCRIPT SMALL LETTER X]
,          case '\u24E7': // ⓧ  [CIRCLED LATIN SMALL LETTER X]
,          case '\uFF58': // ｘ  [FULLWIDTH LATIN SMALL LETTER X]
,            output[outputPos++] = 'x';
,            break;
,          case '\u24B3': // ⒳  [PARENTHESIZED LATIN SMALL LETTER X]
,            output[outputPos++] = '(';
,            output[outputPos++] = 'x';
,            output[outputPos++] = ')';
,            break;
,          case '\u00DD': // Ý  [LATIN CAPITAL LETTER Y WITH ACUTE]
,          case '\u0176': // Ŷ  [LATIN CAPITAL LETTER Y WITH CIRCUMFLEX]
,          case '\u0178': // Ÿ  [LATIN CAPITAL LETTER Y WITH DIAERESIS]
,          case '\u01B3': // Ƴ  [LATIN CAPITAL LETTER Y WITH HOOK]
,          case '\u0232': // Ȳ  [LATIN CAPITAL LETTER Y WITH MACRON]
,          case '\u024E': // Ɏ  [LATIN CAPITAL LETTER Y WITH STROKE]
,          case '\u028F': // ʏ  [LATIN LETTER SMALL CAPITAL Y]
,          case '\u1E8E': // Ẏ  [LATIN CAPITAL LETTER Y WITH DOT ABOVE]
,          case '\u1EF2': // Ỳ  [LATIN CAPITAL LETTER Y WITH GRAVE]
,          case '\u1EF4': // Ỵ  [LATIN CAPITAL LETTER Y WITH DOT BELOW]
,          case '\u1EF6': // Ỷ  [LATIN CAPITAL LETTER Y WITH HOOK ABOVE]
,          case '\u1EF8': // Ỹ  [LATIN CAPITAL LETTER Y WITH TILDE]
,          case '\u1EFE': // Ỿ  [LATIN CAPITAL LETTER Y WITH LOOP]
,          case '\u24CE': // Ⓨ  [CIRCLED LATIN CAPITAL LETTER Y]
,          case '\uFF39': // Ｙ  [FULLWIDTH LATIN CAPITAL LETTER Y]
,            output[outputPos++] = 'Y';
,            break;
,          case '\u00FD': // ý  [LATIN SMALL LETTER Y WITH ACUTE]
,          case '\u00FF': // ÿ  [LATIN SMALL LETTER Y WITH DIAERESIS]
,          case '\u0177': // ŷ  [LATIN SMALL LETTER Y WITH CIRCUMFLEX]
,          case '\u01B4': // ƴ  [LATIN SMALL LETTER Y WITH HOOK]
,          case '\u0233': // ȳ  [LATIN SMALL LETTER Y WITH MACRON]
,          case '\u024F': // ɏ  [LATIN SMALL LETTER Y WITH STROKE]
,          case '\u028E': // ʎ  [LATIN SMALL LETTER TURNED Y]
,          case '\u1E8F': // ẏ  [LATIN SMALL LETTER Y WITH DOT ABOVE]
,          case '\u1E99': // ẙ  [LATIN SMALL LETTER Y WITH RING ABOVE]
,          case '\u1EF3': // ỳ  [LATIN SMALL LETTER Y WITH GRAVE]
,          case '\u1EF5': // ỵ  [LATIN SMALL LETTER Y WITH DOT BELOW]
,          case '\u1EF7': // ỷ  [LATIN SMALL LETTER Y WITH HOOK ABOVE]
,          case '\u1EF9': // ỹ  [LATIN SMALL LETTER Y WITH TILDE]
,          case '\u1EFF': // ỿ  [LATIN SMALL LETTER Y WITH LOOP]
,          case '\u24E8': // ⓨ  [CIRCLED LATIN SMALL LETTER Y]
,          case '\uFF59': // ｙ  [FULLWIDTH LATIN SMALL LETTER Y]
,            output[outputPos++] = 'y';
,            break;
,          case '\u24B4': // ⒴  [PARENTHESIZED LATIN SMALL LETTER Y]
,            output[outputPos++] = '(';
,            output[outputPos++] = 'y';
,            output[outputPos++] = ')';
,            break;
,          case '\u0179': // Ź  [LATIN CAPITAL LETTER Z WITH ACUTE]
,          case '\u017B': // Ż  [LATIN CAPITAL LETTER Z WITH DOT ABOVE]
,          case '\u017D': // Ž  [LATIN CAPITAL LETTER Z WITH CARON]
,          case '\u01B5': // Ƶ  [LATIN CAPITAL LETTER Z WITH STROKE]
,          case '\u021C': // Ȝ  http://en.wikipedia.org/wiki/Yogh  [LATIN CAPITAL LETTER YOGH]
,          case '\u0224': // Ȥ  [LATIN CAPITAL LETTER Z WITH HOOK]
,          case '\u1D22': // ᴢ  [LATIN LETTER SMALL CAPITAL Z]
,          case '\u1E90': // Ẑ  [LATIN CAPITAL LETTER Z WITH CIRCUMFLEX]
,          case '\u1E92': // Ẓ  [LATIN CAPITAL LETTER Z WITH DOT BELOW]
,          case '\u1E94': // Ẕ  [LATIN CAPITAL LETTER Z WITH LINE BELOW]
,          case '\u24CF': // Ⓩ  [CIRCLED LATIN CAPITAL LETTER Z]
,          case '\u2C6B': // Ⱬ  [LATIN CAPITAL LETTER Z WITH DESCENDER]
,          case '\uA762': // Ꝣ  [LATIN CAPITAL LETTER VISIGOTHIC Z]
,          case '\uFF3A': // Ｚ  [FULLWIDTH LATIN CAPITAL LETTER Z]
,            output[outputPos++] = 'Z';
,            break;
,          case '\u017A': // ź  [LATIN SMALL LETTER Z WITH ACUTE]
,          case '\u017C': // ż  [LATIN SMALL LETTER Z WITH DOT ABOVE]
,          case '\u017E': // ž  [LATIN SMALL LETTER Z WITH CARON]
,          case '\u01B6': // ƶ  [LATIN SMALL LETTER Z WITH STROKE]
,          case '\u021D': // ȝ  http://en.wikipedia.org/wiki/Yogh  [LATIN SMALL LETTER YOGH]
,          case '\u0225': // ȥ  [LATIN SMALL LETTER Z WITH HOOK]
,          case '\u0240': // ɀ  [LATIN SMALL LETTER Z WITH SWASH TAIL]
,          case '\u0290': // ʐ  [LATIN SMALL LETTER Z WITH RETROFLEX HOOK]
,          case '\u0291': // ʑ  [LATIN SMALL LETTER Z WITH CURL]
,          case '\u1D76': // ᵶ  [LATIN SMALL LETTER Z WITH MIDDLE TILDE]
,          case '\u1D8E': // ᶎ  [LATIN SMALL LETTER Z WITH PALATAL HOOK]
,          case '\u1E91': // ẑ  [LATIN SMALL LETTER Z WITH CIRCUMFLEX]
,          case '\u1E93': // ẓ  [LATIN SMALL LETTER Z WITH DOT BELOW]
,          case '\u1E95': // ẕ  [LATIN SMALL LETTER Z WITH LINE BELOW]
,          case '\u24E9': // ⓩ  [CIRCLED LATIN SMALL LETTER Z]
,          case '\u2C6C': // ⱬ  [LATIN SMALL LETTER Z WITH DESCENDER]
,          case '\uA763': // ꝣ  [LATIN SMALL LETTER VISIGOTHIC Z]
,          case '\uFF5A': // ｚ  [FULLWIDTH LATIN SMALL LETTER Z]
,            output[outputPos++] = 'z';
,            break;
,          case '\u24B5': // ⒵  [PARENTHESIZED LATIN SMALL LETTER Z]
,            output[outputPos++] = '(';
,            output[outputPos++] = 'z';
,            output[outputPos++] = ')';
,            break;
,          case '\u2070': // ⁰  [SUPERSCRIPT ZERO]
,          case '\u2080': // ₀  [SUBSCRIPT ZERO]
,          case '\u24EA': // ⓪  [CIRCLED DIGIT ZERO]
,          case '\u24FF': // ⓿  [NEGATIVE CIRCLED DIGIT ZERO]
,          case '\uFF10': // ０  [FULLWIDTH DIGIT ZERO]
,            output[outputPos++] = '0';
,            break;
,          case '\u00B9': // ¹  [SUPERSCRIPT ONE]
,          case '\u2081': // ₁  [SUBSCRIPT ONE]
,          case '\u2460': // ①  [CIRCLED DIGIT ONE]
,          case '\u24F5': // ⓵  [DOUBLE CIRCLED DIGIT ONE]
,          case '\u2776': // ❶  [DINGBAT NEGATIVE CIRCLED DIGIT ONE]
,          case '\u2780': // ➀  [DINGBAT CIRCLED SANS-SERIF DIGIT ONE]
,          case '\u278A': // ➊  [DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT ONE]
,          case '\uFF11': // １  [FULLWIDTH DIGIT ONE]
,            output[outputPos++] = '1';
,            break;
,          case '\u2488': // ⒈  [DIGIT ONE FULL STOP]
,            output[outputPos++] = '1';
,            output[outputPos++] = '.';
,            break;
,          case '\u2474': // ⑴  [PARENTHESIZED DIGIT ONE]
,            output[outputPos++] = '(';
,            output[outputPos++] = '1';
,            output[outputPos++] = ')';
,            break;
,          case '\u00B2': // ²  [SUPERSCRIPT TWO]
,          case '\u2082': // ₂  [SUBSCRIPT TWO]
,          case '\u2461': // ②  [CIRCLED DIGIT TWO]
,          case '\u24F6': // ⓶  [DOUBLE CIRCLED DIGIT TWO]
,          case '\u2777': // ❷  [DINGBAT NEGATIVE CIRCLED DIGIT TWO]
,          case '\u2781': // ➁  [DINGBAT CIRCLED SANS-SERIF DIGIT TWO]
,          case '\u278B': // ➋  [DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT TWO]
,          case '\uFF12': // ２  [FULLWIDTH DIGIT TWO]
,            output[outputPos++] = '2';
,            break;
,          case '\u2489': // ⒉  [DIGIT TWO FULL STOP]
,            output[outputPos++] = '2';
,            output[outputPos++] = '.';
,            break;
,          case '\u2475': // ⑵  [PARENTHESIZED DIGIT TWO]
,            output[outputPos++] = '(';
,            output[outputPos++] = '2';
,            output[outputPos++] = ')';
,            break;
,          case '\u00B3': // ³  [SUPERSCRIPT THREE]
,          case '\u2083': // ₃  [SUBSCRIPT THREE]
,          case '\u2462': // ③  [CIRCLED DIGIT THREE]
,          case '\u24F7': // ⓷  [DOUBLE CIRCLED DIGIT THREE]
,          case '\u2778': // ❸  [DINGBAT NEGATIVE CIRCLED DIGIT THREE]
,          case '\u2782': // ➂  [DINGBAT CIRCLED SANS-SERIF DIGIT THREE]
,          case '\u278C': // ➌  [DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT THREE]
,          case '\uFF13': // ３  [FULLWIDTH DIGIT THREE]
,            output[outputPos++] = '3';
,            break;
,          case '\u248A': // ⒊  [DIGIT THREE FULL STOP]
,            output[outputPos++] = '3';
,            output[outputPos++] = '.';
,            break;
,          case '\u2476': // ⑶  [PARENTHESIZED DIGIT THREE]
,            output[outputPos++] = '(';
,            output[outputPos++] = '3';
,            output[outputPos++] = ')';
,            break;
,          case '\u2074': // ⁴  [SUPERSCRIPT FOUR]
,          case '\u2084': // ₄  [SUBSCRIPT FOUR]
,          case '\u2463': // ④  [CIRCLED DIGIT FOUR]
,          case '\u24F8': // ⓸  [DOUBLE CIRCLED DIGIT FOUR]
,          case '\u2779': // ❹  [DINGBAT NEGATIVE CIRCLED DIGIT FOUR]
,          case '\u2783': // ➃  [DINGBAT CIRCLED SANS-SERIF DIGIT FOUR]
,          case '\u278D': // ➍  [DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT FOUR]
,          case '\uFF14': // ４  [FULLWIDTH DIGIT FOUR]
,            output[outputPos++] = '4';
,            break;
,          case '\u248B': // ⒋  [DIGIT FOUR FULL STOP]
,            output[outputPos++] = '4';
,            output[outputPos++] = '.';
,            break;
,          case '\u2477': // ⑷  [PARENTHESIZED DIGIT FOUR]
,            output[outputPos++] = '(';
,            output[outputPos++] = '4';
,            output[outputPos++] = ')';
,            break;
,          case '\u2075': // ⁵  [SUPERSCRIPT FIVE]
,          case '\u2085': // ₅  [SUBSCRIPT FIVE]
,          case '\u2464': // ⑤  [CIRCLED DIGIT FIVE]
,          case '\u24F9': // ⓹  [DOUBLE CIRCLED DIGIT FIVE]
,          case '\u277A': // ❺  [DINGBAT NEGATIVE CIRCLED DIGIT FIVE]
,          case '\u2784': // ➄  [DINGBAT CIRCLED SANS-SERIF DIGIT FIVE]
,          case '\u278E': // ➎  [DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT FIVE]
,          case '\uFF15': // ５  [FULLWIDTH DIGIT FIVE]
,            output[outputPos++] = '5';
,            break;
,          case '\u248C': // ⒌  [DIGIT FIVE FULL STOP]
,            output[outputPos++] = '5';
,            output[outputPos++] = '.';
,            break;
,          case '\u2478': // ⑸  [PARENTHESIZED DIGIT FIVE]
,            output[outputPos++] = '(';
,            output[outputPos++] = '5';
,            output[outputPos++] = ')';
,            break;
,          case '\u2076': // ⁶  [SUPERSCRIPT SIX]
,          case '\u2086': // ₆  [SUBSCRIPT SIX]
,          case '\u2465': // ⑥  [CIRCLED DIGIT SIX]
,          case '\u24FA': // ⓺  [DOUBLE CIRCLED DIGIT SIX]
,          case '\u277B': // ❻  [DINGBAT NEGATIVE CIRCLED DIGIT SIX]
,          case '\u2785': // ➅  [DINGBAT CIRCLED SANS-SERIF DIGIT SIX]
,          case '\u278F': // ➏  [DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT SIX]
,          case '\uFF16': // ６  [FULLWIDTH DIGIT SIX]
,            output[outputPos++] = '6';
,            break;
,          case '\u248D': // ⒍  [DIGIT SIX FULL STOP]
,            output[outputPos++] = '6';
,            output[outputPos++] = '.';
,            break;
,          case '\u2479': // ⑹  [PARENTHESIZED DIGIT SIX]
,            output[outputPos++] = '(';
,            output[outputPos++] = '6';
,            output[outputPos++] = ')';
,            break;
,          case '\u2077': // ⁷  [SUPERSCRIPT SEVEN]
,          case '\u2087': // ₇  [SUBSCRIPT SEVEN]
,          case '\u2466': // ⑦  [CIRCLED DIGIT SEVEN]
,          case '\u24FB': // ⓻  [DOUBLE CIRCLED DIGIT SEVEN]
,          case '\u277C': // ❼  [DINGBAT NEGATIVE CIRCLED DIGIT SEVEN]
,          case '\u2786': // ➆  [DINGBAT CIRCLED SANS-SERIF DIGIT SEVEN]
,          case '\u2790': // ➐  [DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT SEVEN]
,          case '\uFF17': // ７  [FULLWIDTH DIGIT SEVEN]
,            output[outputPos++] = '7';
,            break;
,          case '\u248E': // ⒎  [DIGIT SEVEN FULL STOP]
,            output[outputPos++] = '7';
,            output[outputPos++] = '.';
,            break;
,          case '\u247A': // ⑺  [PARENTHESIZED DIGIT SEVEN]
,            output[outputPos++] = '(';
,            output[outputPos++] = '7';
,            output[outputPos++] = ')';
,            break;
,          case '\u2078': // ⁸  [SUPERSCRIPT EIGHT]
,          case '\u2088': // ₈  [SUBSCRIPT EIGHT]
,          case '\u2467': // ⑧  [CIRCLED DIGIT EIGHT]
,          case '\u24FC': // ⓼  [DOUBLE CIRCLED DIGIT EIGHT]
,          case '\u277D': // ❽  [DINGBAT NEGATIVE CIRCLED DIGIT EIGHT]
,          case '\u2787': // ➇  [DINGBAT CIRCLED SANS-SERIF DIGIT EIGHT]
,          case '\u2791': // ➑  [DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT EIGHT]
,          case '\uFF18': // ８  [FULLWIDTH DIGIT EIGHT]
,            output[outputPos++] = '8';
,            break;
,          case '\u248F': // ⒏  [DIGIT EIGHT FULL STOP]
,            output[outputPos++] = '8';
,            output[outputPos++] = '.';
,            break;
,          case '\u247B': // ⑻  [PARENTHESIZED DIGIT EIGHT]
,            output[outputPos++] = '(';
,            output[outputPos++] = '8';
,            output[outputPos++] = ')';
,            break;
,          case '\u2079': // ⁹  [SUPERSCRIPT NINE]
,          case '\u2089': // ₉  [SUBSCRIPT NINE]
,          case '\u2468': // ⑨  [CIRCLED DIGIT NINE]
,          case '\u24FD': // ⓽  [DOUBLE CIRCLED DIGIT NINE]
,          case '\u277E': // ❾  [DINGBAT NEGATIVE CIRCLED DIGIT NINE]
,          case '\u2788': // ➈  [DINGBAT CIRCLED SANS-SERIF DIGIT NINE]
,          case '\u2792': // ➒  [DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT NINE]
,          case '\uFF19': // ９  [FULLWIDTH DIGIT NINE]
,            output[outputPos++] = '9';
,            break;
,          case '\u2490': // ⒐  [DIGIT NINE FULL STOP]
,            output[outputPos++] = '9';
,            output[outputPos++] = '.';
,            break;
,          case '\u247C': // ⑼  [PARENTHESIZED DIGIT NINE]
,            output[outputPos++] = '(';
,            output[outputPos++] = '9';
,            output[outputPos++] = ')';
,            break;
,          case '\u2469': // ⑩  [CIRCLED NUMBER TEN]
,          case '\u24FE': // ⓾  [DOUBLE CIRCLED NUMBER TEN]
,          case '\u277F': // ❿  [DINGBAT NEGATIVE CIRCLED NUMBER TEN]
,          case '\u2789': // ➉  [DINGBAT CIRCLED SANS-SERIF NUMBER TEN]
,          case '\u2793': // ➓  [DINGBAT NEGATIVE CIRCLED SANS-SERIF NUMBER TEN]
,            output[outputPos++] = '1';
,            output[outputPos++] = '0';
,            break;
,          case '\u2491': // ⒑  [NUMBER TEN FULL STOP]
,            output[outputPos++] = '1';
,            output[outputPos++] = '0';
,            output[outputPos++] = '.';
,            break;
,          case '\u247D': // ⑽  [PARENTHESIZED NUMBER TEN]
,            output[outputPos++] = '(';
,            output[outputPos++] = '1';
,            output[outputPos++] = '0';
,            output[outputPos++] = ')';
,            break;
,          case '\u246A': // ⑪  [CIRCLED NUMBER ELEVEN]
,          case '\u24EB': // ⓫  [NEGATIVE CIRCLED NUMBER ELEVEN]
,            output[outputPos++] = '1';
,            output[outputPos++] = '1';
,            break;
,          case '\u2492': // ⒒  [NUMBER ELEVEN FULL STOP]
,            output[outputPos++] = '1';
,            output[outputPos++] = '1';
,            output[outputPos++] = '.';
,            break;
,          case '\u247E': // ⑾  [PARENTHESIZED NUMBER ELEVEN]
,            output[outputPos++] = '(';
,            output[outputPos++] = '1';
,            output[outputPos++] = '1';
,            output[outputPos++] = ')';
,            break;
,          case '\u246B': // ⑫  [CIRCLED NUMBER TWELVE]
,          case '\u24EC': // ⓬  [NEGATIVE CIRCLED NUMBER TWELVE]
,            output[outputPos++] = '1';
,            output[outputPos++] = '2';
,            break;
,          case '\u2493': // ⒓  [NUMBER TWELVE FULL STOP]
,            output[outputPos++] = '1';
,            output[outputPos++] = '2';
,            output[outputPos++] = '.';
,            break;
,          case '\u247F': // ⑿  [PARENTHESIZED NUMBER TWELVE]
,            output[outputPos++] = '(';
,            output[outputPos++] = '1';
,            output[outputPos++] = '2';
,            output[outputPos++] = ')';
,            break;
,          case '\u246C': // ⑬  [CIRCLED NUMBER THIRTEEN]
,          case '\u24ED': // ⓭  [NEGATIVE CIRCLED NUMBER THIRTEEN]
,            output[outputPos++] = '1';
,            output[outputPos++] = '3';
,            break;
,          case '\u2494': // ⒔  [NUMBER THIRTEEN FULL STOP]
,            output[outputPos++] = '1';
,            output[outputPos++] = '3';
,            output[outputPos++] = '.';
,            break;
,          case '\u2480': // ⒀  [PARENTHESIZED NUMBER THIRTEEN]
,            output[outputPos++] = '(';
,            output[outputPos++] = '1';
,            output[outputPos++] = '3';
,            output[outputPos++] = ')';
,            break;
,          case '\u246D': // ⑭  [CIRCLED NUMBER FOURTEEN]
,          case '\u24EE': // ⓮  [NEGATIVE CIRCLED NUMBER FOURTEEN]
,            output[outputPos++] = '1';
,            output[outputPos++] = '4';
,            break;
,          case '\u2495': // ⒕  [NUMBER FOURTEEN FULL STOP]
,            output[outputPos++] = '1';
,            output[outputPos++] = '4';
,            output[outputPos++] = '.';
,            break;
,          case '\u2481': // ⒁  [PARENTHESIZED NUMBER FOURTEEN]
,            output[outputPos++] = '(';
,            output[outputPos++] = '1';
,            output[outputPos++] = '4';
,            output[outputPos++] = ')';
,            break;
,          case '\u246E': // ⑮  [CIRCLED NUMBER FIFTEEN]
,          case '\u24EF': // ⓯  [NEGATIVE CIRCLED NUMBER FIFTEEN]
,            output[outputPos++] = '1';
,            output[outputPos++] = '5';
,            break;
,          case '\u2496': // ⒖  [NUMBER FIFTEEN FULL STOP]
,            output[outputPos++] = '1';
,            output[outputPos++] = '5';
,            output[outputPos++] = '.';
,            break;
,          case '\u2482': // ⒂  [PARENTHESIZED NUMBER FIFTEEN]
,            output[outputPos++] = '(';
,            output[outputPos++] = '1';
,            output[outputPos++] = '5';
,            output[outputPos++] = ')';
,            break;
,          case '\u246F': // ⑯  [CIRCLED NUMBER SIXTEEN]
,          case '\u24F0': // ⓰  [NEGATIVE CIRCLED NUMBER SIXTEEN]
,            output[outputPos++] = '1';
,            output[outputPos++] = '6';
,            break;
,          case '\u2497': // ⒗  [NUMBER SIXTEEN FULL STOP]
,            output[outputPos++] = '1';
,            output[outputPos++] = '6';
,            output[outputPos++] = '.';
,            break;
,          case '\u2483': // ⒃  [PARENTHESIZED NUMBER SIXTEEN]
,            output[outputPos++] = '(';
,            output[outputPos++] = '1';
,            output[outputPos++] = '6';
,            output[outputPos++] = ')';
,            break;
,          case '\u2470': // ⑰  [CIRCLED NUMBER SEVENTEEN]
,          case '\u24F1': // ⓱  [NEGATIVE CIRCLED NUMBER SEVENTEEN]
,            output[outputPos++] = '1';
,            output[outputPos++] = '7';
,            break;
,          case '\u2498': // ⒘  [NUMBER SEVENTEEN FULL STOP]
,            output[outputPos++] = '1';
,            output[outputPos++] = '7';
,            output[outputPos++] = '.';
,            break;
,          case '\u2484': // ⒄  [PARENTHESIZED NUMBER SEVENTEEN]
,            output[outputPos++] = '(';
,            output[outputPos++] = '1';
,            output[outputPos++] = '7';
,            output[outputPos++] = ')';
,            break;
,          case '\u2471': // ⑱  [CIRCLED NUMBER EIGHTEEN]
,          case '\u24F2': // ⓲  [NEGATIVE CIRCLED NUMBER EIGHTEEN]
,            output[outputPos++] = '1';
,            output[outputPos++] = '8';
,            break;
,          case '\u2499': // ⒙  [NUMBER EIGHTEEN FULL STOP]
,            output[outputPos++] = '1';
,            output[outputPos++] = '8';
,            output[outputPos++] = '.';
,            break;
,          case '\u2485': // ⒅  [PARENTHESIZED NUMBER EIGHTEEN]
,            output[outputPos++] = '(';
,            output[outputPos++] = '1';
,            output[outputPos++] = '8';
,            output[outputPos++] = ')';
,            break;
,          case '\u2472': // ⑲  [CIRCLED NUMBER NINETEEN]
,          case '\u24F3': // ⓳  [NEGATIVE CIRCLED NUMBER NINETEEN]
,            output[outputPos++] = '1';
,            output[outputPos++] = '9';
,            break;
,          case '\u249A': // ⒚  [NUMBER NINETEEN FULL STOP]
,            output[outputPos++] = '1';
,            output[outputPos++] = '9';
,            output[outputPos++] = '.';
,            break;
,          case '\u2486': // ⒆  [PARENTHESIZED NUMBER NINETEEN]
,            output[outputPos++] = '(';
,            output[outputPos++] = '1';
,            output[outputPos++] = '9';
,            output[outputPos++] = ')';
,            break;
,          case '\u2473': // ⑳  [CIRCLED NUMBER TWENTY]
,          case '\u24F4': // ⓴  [NEGATIVE CIRCLED NUMBER TWENTY]
,            output[outputPos++] = '2';
,            output[outputPos++] = '0';
,            break;
,          case '\u249B': // ⒛  [NUMBER TWENTY FULL STOP]
,            output[outputPos++] = '2';
,            output[outputPos++] = '0';
,            output[outputPos++] = '.';
,            break;
,          case '\u2487': // ⒇  [PARENTHESIZED NUMBER TWENTY]
,            output[outputPos++] = '(';
,            output[outputPos++] = '2';
,            output[outputPos++] = '0';
,            output[outputPos++] = ')';
,            break;
,          case '\u00AB': // «  [LEFT-POINTING DOUBLE ANGLE QUOTATION MARK]
,          case '\u00BB': // »  [RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK]
,          case '\u201C': // “  [LEFT DOUBLE QUOTATION MARK]
,          case '\u201D': // ”  [RIGHT DOUBLE QUOTATION MARK]
,          case '\u201E': // „  [DOUBLE LOW-9 QUOTATION MARK]
,          case '\u2033': // ″  [DOUBLE PRIME]
,          case '\u2036': // ‶  [REVERSED DOUBLE PRIME]
,          case '\u275D': // ❝  [HEAVY DOUBLE TURNED COMMA QUOTATION MARK ORNAMENT]
,          case '\u275E': // ❞  [HEAVY DOUBLE COMMA QUOTATION MARK ORNAMENT]
,          case '\u276E': // ❮  [HEAVY LEFT-POINTING ANGLE QUOTATION MARK ORNAMENT]
,          case '\u276F': // ❯  [HEAVY RIGHT-POINTING ANGLE QUOTATION MARK ORNAMENT]
,          case '\uFF02': // ＂  [FULLWIDTH QUOTATION MARK]
,            output[outputPos++] = '""';
,            break;
,          case '\u2018': // ‘  [LEFT SINGLE QUOTATION MARK]
,          case '\u2019': // ’  [RIGHT SINGLE QUOTATION MARK]
,          case '\u201A': // ‚  [SINGLE LOW-9 QUOTATION MARK]
,          case '\u201B': // ‛  [SINGLE HIGH-REVERSED-9 QUOTATION MARK]
,          case '\u2032': // ′  [PRIME]
,          case '\u2035': // ‵  [REVERSED PRIME]
,          case '\u2039': // ‹  [SINGLE LEFT-POINTING ANGLE QUOTATION MARK]
,          case '\u203A': // ›  [SINGLE RIGHT-POINTING ANGLE QUOTATION MARK]
,          case '\u275B': // ❛  [HEAVY SINGLE TURNED COMMA QUOTATION MARK ORNAMENT]
,          case '\u275C': // ❜  [HEAVY SINGLE COMMA QUOTATION MARK ORNAMENT]
,          case '\uFF07': // ＇  [FULLWIDTH APOSTROPHE]
,            output[outputPos++] = '\'';
,            break;
,          case '\u2010': // ‐  [HYPHEN]
,          case '\u2011': // ‑  [NON-BREAKING HYPHEN]
,          case '\u2012': // ‒  [FIGURE DASH]
,          case '\u2013': // –  [EN DASH]
,          case '\u2014': // —  [EM DASH]
,          case '\u207B': // ⁻  [SUPERSCRIPT MINUS]
,          case '\u208B': // ₋  [SUBSCRIPT MINUS]
,          case '\uFF0D': // －  [FULLWIDTH HYPHEN-MINUS]
,            output[outputPos++] = '-';
,            break;
,          case '\u2045': // ⁅  [LEFT SQUARE BRACKET WITH QUILL]
,          case '\u2772': // ❲  [LIGHT LEFT TORTOISE SHELL BRACKET ORNAMENT]
,          case '\uFF3B': // ［  [FULLWIDTH LEFT SQUARE BRACKET]
,            output[outputPos++] = '[';
,            break;
,          case '\u2046': // ⁆  [RIGHT SQUARE BRACKET WITH QUILL]
,          case '\u2773': // ❳  [LIGHT RIGHT TORTOISE SHELL BRACKET ORNAMENT]
,          case '\uFF3D': // ］  [FULLWIDTH RIGHT SQUARE BRACKET]
,            output[outputPos++] = ']';
,            break;
,          case '\u207D': // ⁽  [SUPERSCRIPT LEFT PARENTHESIS]
,          case '\u208D': // ₍  [SUBSCRIPT LEFT PARENTHESIS]
,          case '\u2768': // ❨  [MEDIUM LEFT PARENTHESIS ORNAMENT]
,          case '\u276A': // ❪  [MEDIUM FLATTENED LEFT PARENTHESIS ORNAMENT]
,          case '\uFF08': // （  [FULLWIDTH LEFT PARENTHESIS]
,            output[outputPos++] = '(';
,            break;
,          case '\u2E28': // ⸨  [LEFT DOUBLE PARENTHESIS]
,            output[outputPos++] = '(';
,            output[outputPos++] = '(';
,            break;
,          case '\u207E': // ⁾  [SUPERSCRIPT RIGHT PARENTHESIS]
,          case '\u208E': // ₎  [SUBSCRIPT RIGHT PARENTHESIS]
,          case '\u2769': // ❩  [MEDIUM RIGHT PARENTHESIS ORNAMENT]
,          case '\u276B': // ❫  [MEDIUM FLATTENED RIGHT PARENTHESIS ORNAMENT]
,          case '\uFF09': // ）  [FULLWIDTH RIGHT PARENTHESIS]
,            output[outputPos++] = ')';
,            break;
,          case '\u2E29': // ⸩  [RIGHT DOUBLE PARENTHESIS]
,            output[outputPos++] = ')';
,            output[outputPos++] = ')';
,            break;
,          case '\u276C': // ❬  [MEDIUM LEFT-POINTING ANGLE BRACKET ORNAMENT]
,          case '\u2770': // ❰  [HEAVY LEFT-POINTING ANGLE BRACKET ORNAMENT]
,          case '\uFF1C': // ＜  [FULLWIDTH LESS-THAN SIGN]
,            output[outputPos++] = '<';
,            break;
,          case '\u276D': // ❭  [MEDIUM RIGHT-POINTING ANGLE BRACKET ORNAMENT]
,          case '\u2771': // ❱  [HEAVY RIGHT-POINTING ANGLE BRACKET ORNAMENT]
,          case '\uFF1E': // ＞  [FULLWIDTH GREATER-THAN SIGN]
,            output[outputPos++] = '>';
,            break;
,          case '\u2774': // ❴  [MEDIUM LEFT CURLY BRACKET ORNAMENT]
,          case '\uFF5B': // ｛  [FULLWIDTH LEFT CURLY BRACKET]
,            output[outputPos++] = '{';
,            break;
,          case '\u2775': // ❵  [MEDIUM RIGHT CURLY BRACKET ORNAMENT]
,          case '\uFF5D': // ｝  [FULLWIDTH RIGHT CURLY BRACKET]
,            output[outputPos++] = '}';
,            break;
,          case '\u207A': // ⁺  [SUPERSCRIPT PLUS SIGN]
,          case '\u208A': // ₊  [SUBSCRIPT PLUS SIGN]
,          case '\uFF0B': // ＋  [FULLWIDTH PLUS SIGN]
,            output[outputPos++] = '+';
,            break;
,          case '\u207C': // ⁼  [SUPERSCRIPT EQUALS SIGN]
,          case '\u208C': // ₌  [SUBSCRIPT EQUALS SIGN]
,          case '\uFF1D': // ＝  [FULLWIDTH EQUALS SIGN]
,            output[outputPos++] = '=';
,            break;
,          case '\uFF01': // ！  [FULLWIDTH EXCLAMATION MARK]
,            output[outputPos++] = '!';
,            break;
,          case '\u203C': // ‼  [DOUBLE EXCLAMATION MARK]
,            output[outputPos++] = '!';
,            output[outputPos++] = '!';
,            break;
,          case '\u2049': // ⁉  [EXCLAMATION QUESTION MARK]
,            output[outputPos++] = '!';
,            output[outputPos++] = '?';
,            break;
,          case '\uFF03': // ＃  [FULLWIDTH NUMBER SIGN]
,            output[outputPos++] = '#';
,            break;
,          case '\uFF04': // ＄  [FULLWIDTH DOLLAR SIGN]
,            output[outputPos++] = '$';
,            break;
,          case '\u2052': // ⁒  [COMMERCIAL MINUS SIGN]
,          case '\uFF05': // ％  [FULLWIDTH PERCENT SIGN]
,            output[outputPos++] = '%';
,            break;
,          case '\uFF06': // ＆  [FULLWIDTH AMPERSAND]
,            output[outputPos++] = '&';
,            break;
,          case '\u204E': // ⁎  [LOW ASTERISK]
,          case '\uFF0A': // ＊  [FULLWIDTH ASTERISK]
,            output[outputPos++] = '*';
,            break;
,          case '\uFF0C': // ，  [FULLWIDTH COMMA]
,            output[outputPos++] = ',';
,            break;
,          case '\uFF0E': // ．  [FULLWIDTH FULL STOP]
,            output[outputPos++] = '.';
,            break;
,          case '\u2044': // ⁄  [FRACTION SLASH]
,          case '\uFF0F': // ／  [FULLWIDTH SOLIDUS]
,            output[outputPos++] = '/';
,            break;
,          case '\uFF1A': // ：  [FULLWIDTH COLON]
,            output[outputPos++] = ':';
,            break;
,          case '\u204F': // ⁏  [REVERSED SEMICOLON]
,          case '\uFF1B': // ；  [FULLWIDTH SEMICOLON]
,            output[outputPos++] = ';';
,            break;
,          case '\uFF1F': // ？  [FULLWIDTH QUESTION MARK]
,            output[outputPos++] = '?';
,            break;
,          case '\u2047': // ⁇  [DOUBLE QUESTION MARK]
,            output[outputPos++] = '?';
,            output[outputPos++] = '?';
,            break;
,          case '\u2048': // ⁈  [QUESTION EXCLAMATION MARK]
,            output[outputPos++] = '?';
,            output[outputPos++] = '!';
,            break;
,          case '\uFF20': // ＠  [FULLWIDTH COMMERCIAL AT]
,            output[outputPos++] = '@';
,            break;
,          case '\uFF3C': // ＼  [FULLWIDTH REVERSE SOLIDUS]
,            output[outputPos++] = '\\';
,            break;
,          case '\u2038': // ‸  [CARET]
,          case '\uFF3E': // ＾  [FULLWIDTH CIRCUMFLEX ACCENT]
,            output[outputPos++] = '^';
,            break;
,          case '\uFF3F': // ＿  [FULLWIDTH LOW LINE]
,            output[outputPos++] = '_';
,            break;
,          case '\u2053': // ⁓  [SWUNG DASH]
,          case '\uFF5E': // ～  [FULLWIDTH TILDE]
,            output[outputPos++] = '~';
,            break;
,          default:
,            output[outputPos++] = c;
,            break;
,        }
,      }
,    }
,
,    return new String(output, 0, outputPos);
,  }
"
e804bdf1-7a07-4e36-aee6-aba6a427cf38,ea2dfa0e-c2c7-44c6-822f-36aad2bb42df,GTEQ,"PUBLIC,ArrayList,LT,T,GT,getIncidentEdges,LPAREN,int,v,RPAREN,LBRACE,IF,LPAREN,v,LT,0,BARBAR,v,<MASK>,numberOfVertices,RPAREN,LBRACE,String,errorMessage,EQ,""Allows vertex indizes are 0.."",PLUS,LPAREN,numberOfVertices,SUB,1,RPAREN,PLUS,""."",SEMI,THROW,NEW,IllegalArgumentException,LPAREN,errorMessage,RPAREN,SEMI,RBRACE,RETURN,adjacencyList,LBRACKET,v,RBRACKET,SEMI,RBRACE","	public ArrayList<T> getIncidentEdges(int v) {
,		// check the passed vertex index
,		if (v < 0 || v <MASK> numberOfVertices) {
,			String errorMessage =
,				""Allows vertex indizes are 0..""
,				+ (numberOfVertices - 1) + ""."";
,			
,			throw new IllegalArgumentException(errorMessage);
,		}
,		
,		return adjacencyList[v];
,	}
"
a5ecb7e9-82a6-472c-bd23-3a7d67c2868a,e4b31054-8ef0-49d2-ad81-bc2e839b685b,PLUS,"PUBLIC,STATIC,GuiFactory,createOsSpecificFactory,LPAREN,RPAREN,THROWS,Exception,LBRACE,String,sys,EQ,GetOperatingSystem,DOT,getInstance,LPAREN,RPAREN,DOT,getSo,LPAREN,RPAREN,SEMI,SWITCH,LPAREN,sys,RPAREN,LBRACE,CASE,""win"",COLON,RETURN,NEW,WinFactory,LPAREN,RPAREN,SEMI,CASE,""mac"",COLON,RETURN,NEW,OsxFactory,LPAREN,RPAREN,SEMI,DEFAULT,COLON,THROW,NEW,Exception,LPAREN,""GUI N\u00E3o implementada para o SO: "",<MASK>,sys,RPAREN,SEMI,RBRACE,RBRACE","    public static GuiFactory createOsSpecificFactory() throws Exception{
,        /*
,         * Le um arquivo de configuracao que so e possivel de se sabe em tempo de
,         * execucao
,         *
,         * ps.: Chamada singleton para consultar o S.O.
,         */
,        String sys = GetOperatingSystem.getInstance().getSo();
,        /*
,         * Ele retorna a factory correta que por polimorfismo na execucao da aplicacao
,         * sera instanciado a factory correta
,         */
,        switch (sys) {
,            case ""win"":
,                return new WinFactory();
,            case ""mac"":
,                return new OsxFactory();
,            default:
,                throw new Exception(""GUI Não implementada para o SO: ""<MASK>sys);
,        }
,    }
"
4efd15d4-7259-49ef-bb2b-8984a1154bd6,cccc165c-61a0-471f-ba9c-db7a4bd9621f,SUB,"PUBLIC,LM_DrillDown,LPAREN,LMDrillModel,lmDM,RPAREN,LBRACE,this,DOT,lmDM,EQ,lmDM,SEMI,initComponents,LPAREN,RPAREN,SEMI,IF,LPAREN,LPAREN,JTabbedPane,RPAREN,this,DOT,getParent,LPAREN,RPAREN,BANGEQ,null,RPAREN,LBRACE,JTabbedPane,j,EQ,LPAREN,JTabbedPane,RPAREN,this,DOT,getParent,LPAREN,RPAREN,SEMI,title,EQ,j,DOT,getTitleAt,LPAREN,j,DOT,getSelectedIndex,LPAREN,RPAREN,RPAREN,DOT,substring,LPAREN,j,DOT,getTitleAt,LPAREN,j,DOT,getSelectedIndex,LPAREN,RPAREN,RPAREN,DOT,length,LPAREN,RPAREN,<MASK>,3,COMMA,j,DOT,getTitleAt,LPAREN,j,DOT,getSelectedIndex,LPAREN,RPAREN,RPAREN,DOT,length,LPAREN,RPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""~~~~~ "",PLUS,lmDM,DOT,getTablename,LPAREN,RPAREN,RPAREN,SEMI,IF,LPAREN,title,DOT,equals,LPAREN,""LM"",RPAREN,RPAREN,LBRACE,RBRACE,RBRACE,WordCloud,LPAREN,lmDM,DOT,getTopList,LPAREN,RPAREN,COMMA,lmDM,DOT,getKeywords,LPAREN,RPAREN,RPAREN,SEMI,RBRACE","    public LM_DrillDown(LMDrillModel lmDM) {
,        this.lmDM = lmDM;
,        initComponents();
,//        insertNgram();
,        
,        if((JTabbedPane)this.getParent() != null){
,            JTabbedPane j = (JTabbedPane)this.getParent();
,            title = j.getTitleAt(j.getSelectedIndex()).substring(j.getTitleAt(j.getSelectedIndex()).length()<MASK>3, j.getTitleAt(j.getSelectedIndex()).length());
,            System.out.println(""~~~~~ ""+lmDM.getTablename());
,            if(title.equals(""LM"")){
,             //   rawDataFld.setText(""LANGUAGE MODEL"");
,            }
,        }
,        
,        WordCloud(lmDM.getTopList(), lmDM.getKeywords());
,        
,//        insertTweetsList(TweetCleaner.getTweets());
,//        insertNgram(TweetCleaner.getTfngrams());
,//        WordCloud wc = new WordCloud(TweetCleaner.getTfngrams());
,//        wordcloud.setBackground(Color.white);
,//        WordCloud.display(wordcloud, WordCloud.getFont());
,        
,    }
"
5dc601a4-7cf6-4107-99f0-8942a78affb2,2a9c153e-9f86-420e-8c4f-f296c286f7ce,STAR,"PUBLIC,void,delete,LPAREN,Key,key,RPAREN,LBRACE,int,i,EQ,hash,LPAREN,key,RPAREN,SEMI,IF,LPAREN,st,LBRACKET,i,RBRACKET,DOT,contains,LPAREN,key,RPAREN,RPAREN,LBRACE,N,SUBSUB,SEMI,st,LBRACKET,i,RBRACKET,DOT,delete,LPAREN,key,RPAREN,SEMI,RBRACE,IF,LPAREN,M,GT,INIT_CAPACITY,AMPAMP,N,LT,2,<MASK>,M,RPAREN,LBRACE,resize,LPAREN,M,SLASH,2,RPAREN,SEMI,RBRACE,RBRACE","	public void delete(Key key) {
,		int i = hash(key);
,		if (st[i].contains(key)) {
,			N--;
,			st[i].delete(key);
,		}
,
,		if (M > INIT_CAPACITY && N < 2 <MASK> M) {
,			resize(M / 2);
,		}
,
,	}
"
3913c395-db09-4ac4-8282-49a81b6a21f4,628f5f5f-3040-4549-bc28-51e75eca5b9f,LT,"PUBLIC,CollisionContact,generateContact,LPAREN,GameEntity,a,COMMA,GameEntity,b,RPAREN,LBRACE,IF,LPAREN,BANG,a,DOT,isCollidable,LPAREN,RPAREN,BARBAR,BANG,b,DOT,isCollidable,LPAREN,RPAREN,RPAREN,RETURN,null,SEMI,double,dx,EQ,b,DOT,getX,LPAREN,RPAREN,SUB,a,DOT,getX,LPAREN,RPAREN,SEMI,double,dy,EQ,b,DOT,getY,LPAREN,RPAREN,SUB,a,DOT,getY,LPAREN,RPAREN,SEMI,double,d2,EQ,dx,STAR,dx,PLUS,dy,STAR,dy,SEMI,double,r,EQ,a,DOT,getCollisionRadius,LPAREN,RPAREN,PLUS,b,DOT,getCollisionRadius,LPAREN,RPAREN,SEMI,IF,LPAREN,d2,<MASK>,r,STAR,r,RPAREN,LBRACE,double,d,EQ,Math,DOT,sqrt,LPAREN,d2,RPAREN,SEMI,RETURN,NEW,CollisionContact,LPAREN,CollisionContact,DOT,SPHERICAL,COMMA,a,COMMA,b,COMMA,r,SUB,d,COMMA,dx,SLASH,d,COMMA,dy,SLASH,d,RPAREN,SEMI,RBRACE,ELSE,LBRACE,RETURN,null,SEMI,RBRACE,RBRACE","	public CollisionContact generateContact(GameEntity a, GameEntity b) {
,		if (!a.isCollidable() || !b.isCollidable()) return null;
,		
,		double dx = b.getX()-a.getX();
,		double dy = b.getY()-a.getY();
,		double d2 = dx*dx+dy*dy;
,		double r = a.getCollisionRadius()+b.getCollisionRadius();
,		if (d2 <MASK> r*r) {
,			// Collision
,			double d = Math.sqrt(d2);
,			return new CollisionContact(CollisionContact.SPHERICAL, a, b, r-d, dx/d, dy/d);
,		} else {
,			return null;
,		}
,		
,	}
"
2536becc-3783-4ad0-81a4-cd3040a59419,eca7e0c0-8c30-449c-b37f-c29e1f987b58,GT,"MONKEYS_AT,Override,PUBLIC,V,call,LPAREN,RPAREN,THROWS,Throwable,LBRACE,V,min,EQ,null,SEMI,FOR,LPAREN,T,o,COLON,objects,RPAREN,LBRACE,V,value,EQ,call,DOT,replay,LPAREN,o,RPAREN,SEMI,IF,LPAREN,value,BANGEQ,null,AMPAMP,LPAREN,min,EQEQ,null,BARBAR,min,DOT,compareTo,LPAREN,value,RPAREN,<MASK>,0,RPAREN,RPAREN,LBRACE,min,EQ,value,SEMI,RBRACE,RBRACE,RETURN,min,SEMI,RBRACE","    @Override
,    public V call() throws Throwable {
,        V min = null;
,        for (T o : objects) {
,            V value = call.replay(o);
,            if (value != null && (min == null || min.compareTo(value) <MASK> 0)) {
,                min = value;
,            }
,        }
,        return min;
,    }
"
bb99f4c1-f6e4-4451-9385-5b7ab901572f,7a1ff7f5-1f8f-4a7c-b947-2c24b6ac298a,GTEQ,"PROTECTED,byte,LBRACKET,RBRACKET,readLength,LPAREN,InputStream,in,COMMA,int,length,RPAREN,THROWS,BeanstalkcException,COMMA,IOException,LBRACE,int,byt,EQ,0,SEMI,byte,LBRACKET,RBRACKET,bytes,EQ,NEW,byte,LBRACKET,length,RBRACKET,SEMI,int,offset,EQ,0,SEMI,int,read,EQ,0,SEMI,WHILE,LPAREN,offset,LT,bytes,DOT,length,AMPAMP,LPAREN,read,EQ,in,DOT,read,LPAREN,bytes,COMMA,offset,COMMA,bytes,DOT,length,SUB,offset,RPAREN,RPAREN,<MASK>,0,RPAREN,LBRACE,offset,PLUSEQ,read,SEMI,RBRACE,IF,LPAREN,read,LT,0,RPAREN,LBRACE,THROW,NEW,IOException,LPAREN,""No bytes available to read"",RPAREN,SEMI,RBRACE,IF,LPAREN,CR,BANGEQ,LPAREN,byt,EQ,in,DOT,read,LPAREN,RPAREN,RPAREN,RPAREN,LBRACE,THROW,NEW,InvalidValueException,LPAREN,String,DOT,format,LPAREN,""Expected a Carriage return, got \""%c\"""",COMMA,LPAREN,char,RPAREN,byt,RPAREN,RPAREN,SEMI,RBRACE,IF,LPAREN,LF,BANGEQ,LPAREN,byt,EQ,in,DOT,read,LPAREN,RPAREN,RPAREN,RPAREN,LBRACE,THROW,NEW,InvalidValueException,LPAREN,String,DOT,format,LPAREN,""Expected a line feed, got \""%c\"""",COMMA,LPAREN,char,RPAREN,byt,RPAREN,RPAREN,SEMI,RBRACE,IF,LPAREN,offset,BANGEQ,length,RPAREN,LBRACE,THROW,NEW,InvalidValueException,LPAREN,String,DOT,format,LPAREN,""Expected %d bytes to be read, got %d bytes long"",COMMA,length,COMMA,read,RPAREN,RPAREN,SEMI,RBRACE,RETURN,bytes,SEMI,RBRACE","    protected byte[] readLength(InputStream in, int length) throws BeanstalkcException, IOException
,    {
,        int byt = 0;
,        byte[] bytes = new byte[length];
,        int offset = 0;
,        int read = 0;
,
,        while (offset < bytes.length && (read = in.read(bytes, offset, bytes.length-offset)) <MASK> 0) {
,          offset += read;
,        }
,
,        if (read < 0) {
,            throw new IOException(""No bytes available to read"");
,        }
,
,        // before we validate the length, lets make sure that we get
,        // a CRLF as expected
,        if (CR != (byt = in.read())) {
,            throw new InvalidValueException(String.format(
,                ""Expected a Carriage return, got \""%c\"""",
,                (char)byt // this won't really work all the time...
,            ));
,        }
,
,        if (LF != (byt = in.read())) {
,            throw new InvalidValueException(String.format(
,                ""Expected a line feed, got \""%c\"""",
,                (char)byt
,            ));
,        }
,
,        // make sure we actually go the length we expected
,        if (offset != length) {
,            throw new InvalidValueException(String.format(
,                ""Expected %d bytes to be read, got %d bytes long"",
,                length,
,                read
,            ));
,        }
,
,        return bytes;
,    }
"
2171d474-c7ae-45f9-a2ad-aefcd5d5ec31,c65721ff-6b6f-46ee-aae9-f60ff756f5a3,PERCENT,"PUBLIC,STATIC,BitfieldMessage,parse,LPAREN,ByteBuffer,buffer,COMMA,SharedTorrent,torrent,RPAREN,THROWS,MessageValidationException,LBRACE,BitSet,bitfield,EQ,NEW,BitSet,LPAREN,buffer,DOT,remaining,LPAREN,RPAREN,STAR,8,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,buffer,DOT,remaining,LPAREN,RPAREN,STAR,8,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,LPAREN,buffer,DOT,get,LPAREN,i,SLASH,8,RPAREN,AMP,LPAREN,1,LTLT,LPAREN,7,SUB,LPAREN,i,<MASK>,8,RPAREN,RPAREN,RPAREN,RPAREN,GT,0,RPAREN,LBRACE,bitfield,DOT,set,LPAREN,i,RPAREN,SEMI,RBRACE,RBRACE,RETURN,NEW,BitfieldMessage,LPAREN,buffer,COMMA,bitfield,RPAREN,DOT,validate,LPAREN,torrent,RPAREN,SEMI,RBRACE","		public static BitfieldMessage parse(ByteBuffer buffer,
,				SharedTorrent torrent) throws MessageValidationException {
,			BitSet bitfield = new BitSet(buffer.remaining()*8);
,			for (int i=0; i < buffer.remaining()*8; i++) {
,				if ((buffer.get(i/8) & (1 << (7 -(i <MASK> 8)))) > 0) {
,					bitfield.set(i);
,				}
,			}
,
,			return new BitfieldMessage(buffer, bitfield)
,				.validate(torrent);
,		}
"
045c9602-1af3-497c-b8cd-2e449d2f2915,eb98b6ab-d97a-47a8-aa77-a5d82a5a32f9,PLUS,"MONKEYS_AT,Override,void,prepare,LPAREN,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""Prepareing "",<MASK>,name,RPAREN,SEMI,dough,EQ,inFactory,DOT,createDough,LPAREN,RPAREN,SEMI,sauce,EQ,inFactory,DOT,createSauce,LPAREN,RPAREN,SEMI,cheese,EQ,inFactory,DOT,createCheese,LPAREN,RPAREN,SEMI,veggies,EQ,inFactory,DOT,createVeggies,LPAREN,RPAREN,SEMI,RBRACE","	@Override
,	void prepare() {
,		System.out.println(""Prepareing "" <MASK> name);
,		
,		dough = inFactory.createDough();
,		sauce = inFactory.createSauce();
,		cheese = inFactory.createCheese();
,		veggies = inFactory.createVeggies();
,		
,	}
"
ce409cfa-d5ce-4a2d-98f1-b91cf6798c84,a36df886-b61d-4b74-9f37-8f2521f02dda,GT,"MONKEYS_AT,Override,PUBLIC,void,render,LPAREN,float,delta,RPAREN,LBRACE,highscoreView,DOT,render,LPAREN,delta,RPAREN,SEMI,timeElapsed,PLUSEQ,delta,SEMI,IF,LPAREN,timeElapsed,<MASK>,1,AMPAMP,Gdx,DOT,input,DOT,justTouched,LPAREN,RPAREN,BARBAR,Gdx,DOT,input,DOT,isKeyPressed,LPAREN,Keys,DOT,BACK,RPAREN,RPAREN,LBRACE,this,DOT,game,DOT,setScreen,LPAREN,NEW,TitleScreen,LPAREN,game,RPAREN,RPAREN,SEMI,RBRACE,RBRACE","	@Override
,	public void render(float delta) {
,		highscoreView.render(delta);
,		timeElapsed+=delta;
,		if(timeElapsed<MASK>1 && Gdx.input.justTouched() || Gdx.input.isKeyPressed(Keys.BACK)){
,			this.game.setScreen(new TitleScreen(game));
,		}
,	}
"
f944102f-332a-448e-b1a9-6a4145ca980d,f68ab8f0-abd2-4e14-b757-a032a24a2a3d,LTEQ,"PUBLIC,STATIC,void,main,LPAREN,String,LBRACKET,RBRACKET,args,RPAREN,LBRACE,int,base,EQ,0,SEMI,int,exp,EQ,0,SEMI,int,potencia,EQ,1,SEMI,base,EQ,Integer,DOT,parseInt,LPAREN,JOptionPane,DOT,showInputDialog,LPAREN,""Base"",RPAREN,RPAREN,SEMI,exp,EQ,Integer,DOT,parseInt,LPAREN,JOptionPane,DOT,showInputDialog,LPAREN,""Expoente"",RPAREN,RPAREN,SEMI,IF,LPAREN,exp,<MASK>,0,RPAREN,LBRACE,JOptionPane,DOT,showMessageDialog,LPAREN,null,COMMA,""Somente n\u00FAmeros positivos e maiores que 0, por favor"",RPAREN,SEMI,System,DOT,exit,LPAREN,0,RPAREN,SEMI,RBRACE,FOR,LPAREN,int,counter,EQ,0,SEMI,counter,LT,exp,SEMI,counter,PLUSPLUS,RPAREN,LBRACE,potencia,EQ,potencia,STAR,base,SEMI,RBRACE,JOptionPane,DOT,showMessageDialog,LPAREN,null,COMMA,base,PLUS,"" elevado a "",PLUS,exp,PLUS,"" \u00E9 igual a "",PLUS,potencia,RPAREN,SEMI,RBRACE","    public static void main(String[] args) {
,        int base = 0;
,        int exp = 0;
,        int potencia = 1;
,
,// Obter entrada do usuário para base e expoente
,        base = Integer.parseInt(JOptionPane.showInputDialog(""Base""));
,        exp = Integer.parseInt(JOptionPane.showInputDialog(""Expoente""));
,// Limitar variável exp a somente número positivos e maiores que 0
,        if (exp <MASK> 0) {
,            JOptionPane.showMessageDialog(null,
,                    ""Somente números positivos e maiores que 0, por favor"");
,            System.exit(0);
,        }
,
,// Declaração for para calcular a potência
,        for (int counter = 0; counter < exp; counter++) {
,            potencia = potencia * base;
,        }
,
,// Mostrar o resultado
,        JOptionPane.showMessageDialog(null,
,                base + "" elevado a "" + exp + "" é igual a "" + potencia);
,    }
"
4ea68084-5865-4b62-a71d-3eeac4e10676,3c3e9da4-805a-4e55-b21b-b529cdf58307,SLASH,"PUBLIC,String,toPrettyString,LPAREN,RPAREN,LBRACE,PaddingStringBuilder,output,EQ,NEW,PaddingStringBuilder,LPAREN,RPAREN,SEMI,PaddingStringBuilder,DOT,PaddingSection,settingsSection,EQ,NEW,PaddingStringBuilder,DOT,PaddingSection,LPAREN,true,RPAREN,SEMI,output,DOT,append,LPAREN,"" | "",RPAREN,DOT,append,LPAREN,settingsSection,COMMA,""Score limit: "",RPAREN,DOT,append,LPAREN,scoreLimit,RPAREN,DOT,append,LPAREN,""\n | "",RPAREN,DOT,append,LPAREN,settingsSection,COMMA,""Population size: "",RPAREN,DOT,append,LPAREN,populationSize,RPAREN,DOT,append,LPAREN,""\n | "",RPAREN,DOT,append,LPAREN,settingsSection,COMMA,""Generation limit: "",RPAREN,DOT,append,LPAREN,generationLimit,RPAREN,DOT,append,LPAREN,""\n | "",RPAREN,DOT,append,LPAREN,settingsSection,COMMA,""Execution timeout: "",RPAREN,DOT,append,LPAREN,String,DOT,format,LPAREN,""%,d"",COMMA,executionTimeout,RPAREN,RPAREN,DOT,append,LPAREN,"" (ms)"",RPAREN,DOT,append,LPAREN,""\n | "",RPAREN,DOT,append,LPAREN,settingsSection,COMMA,""Status interval: "",RPAREN,DOT,append,LPAREN,String,DOT,format,LPAREN,""%,d"",COMMA,statusInterval,RPAREN,RPAREN,DOT,append,LPAREN,"" (ms)"",RPAREN,DOT,append,LPAREN,""\n | "",RPAREN,DOT,append,LPAREN,settingsSection,COMMA,""Random seed: "",RPAREN,DOT,append,LPAREN,randomSeed,RPAREN,DOT,append,LPAREN,""\n | "",RPAREN,DOT,append,LPAREN,settingsSection,COMMA,""Project main class: "",RPAREN,DOT,append,LPAREN,projectMain,RPAREN,DOT,append,LPAREN,""\n | "",RPAREN,DOT,append,LPAREN,settingsSection,COMMA,""Project problem class: "",RPAREN,DOT,append,LPAREN,problemClassName,RPAREN,SEMI,DecimalFormat,oneDotTwoFormat,EQ,NEW,DecimalFormat,LPAREN,""0.00"",RPAREN,SEMI,Double,totalWeight,EQ,0D,SEMI,FOR,LPAREN,BreedingOperatorSetup,opSetup,COLON,breedingOperators,RPAREN,LBRACE,totalWeight,PLUSEQ,opSetup,DOT,weight,SEMI,RBRACE,output,DOT,append,LPAREN,""\n | Breeding operators:"",RPAREN,SEMI,PaddingStringBuilder,DOT,PaddingSection,breedOpWeights,EQ,NEW,PaddingStringBuilder,DOT,PaddingSection,LPAREN,false,RPAREN,SEMI,PaddingStringBuilder,DOT,PaddingSection,breedOpPercent,EQ,NEW,PaddingStringBuilder,DOT,PaddingSection,LPAREN,false,RPAREN,SEMI,FOR,LPAREN,BreedingOperatorSetup,opSetup,COLON,breedingOperators,RPAREN,LBRACE,output,DOT,append,LPAREN,""\n | | "",RPAREN,DOT,append,LPAREN,breedOpWeights,COMMA,oneDotTwoFormat,DOT,format,LPAREN,opSetup,DOT,weight,RPAREN,RPAREN,DOT,append,LPAREN,"" -> "",RPAREN,DOT,append,LPAREN,breedOpPercent,COMMA,Math,DOT,round,LPAREN,opSetup,DOT,weight,<MASK>,totalWeight,STAR,100,RPAREN,RPAREN,DOT,append,LPAREN,""%: "",RPAREN,DOT,append,LPAREN,opSetup,DOT,breedingOperator,RPAREN,SEMI,RBRACE,output,DOT,append,LPAREN,""\n | Approved breeding classes:"",RPAREN,SEMI,StringBuilder,classesWith,EQ,NEW,StringBuilder,LPAREN,RPAREN,SEMI,StringBuilder,classesWithout,EQ,NEW,StringBuilder,LPAREN,RPAREN,SEMI,FOR,LPAREN,BreedingClassSetup,classSetup,COLON,breedingClasses,RPAREN,LBRACE,IF,LPAREN,classSetup,DOT,instantiable,RPAREN,LBRACE,classesWith,DOT,append,LPAREN,""\n | | | "",RPAREN,DOT,append,LPAREN,classSetup,DOT,className,RPAREN,SEMI,RBRACE,ELSE,LBRACE,classesWithout,DOT,append,LPAREN,""\n | | | "",RPAREN,DOT,append,LPAREN,classSetup,DOT,className,RPAREN,SEMI,RBRACE,RBRACE,IF,LPAREN,classesWith,DOT,length,LPAREN,RPAREN,GT,0,RPAREN,LBRACE,output,DOT,append,LPAREN,""\n | | With instantiation:"",RPAREN,DOT,append,LPAREN,classesWith,RPAREN,SEMI,RBRACE,IF,LPAREN,classesWithout,DOT,length,LPAREN,RPAREN,GT,0,RPAREN,LBRACE,output,DOT,append,LPAREN,""\n | | Without instantiation:"",RPAREN,DOT,append,LPAREN,classesWithout,RPAREN,SEMI,RBRACE,RETURN,output,DOT,toString,LPAREN,RPAREN,SEMI,RBRACE","	public String toPrettyString()
,	{
,		PaddingStringBuilder output = new PaddingStringBuilder();
,
,		<MASK>/ Settings section
,		PaddingStringBuilder.PaddingSection settingsSection = new PaddingStringBuilder.PaddingSection(true);
,		output
,			.append("" | "").append(settingsSection, ""Score limit: "").append(scoreLimit)
,			.append(""\n | "").append(settingsSection, ""Population size: "").append(populationSize)
,			.append(""\n | "").append(settingsSection, ""Generation limit: "").append(generationLimit)
,			.append(""\n | "").append(settingsSection, ""Execution timeout: "").append(String.format(""%,d"", executionTimeout)).append("" (ms)"")
,			.append(""\n | "").append(settingsSection, ""Status interval: "").append(String.format(""%,d"", statusInterval)).append("" (ms)"")
,			.append(""\n | "").append(settingsSection, ""Random seed: "").append(randomSeed)
,			.append(""\n | "").append(settingsSection, ""Project main class: "").append(projectMain)
,			.append(""\n | "").append(settingsSection, ""Project problem class: "").append(problemClassName);
,
,		// Breeding operators section
,		DecimalFormat oneDotTwoFormat = new DecimalFormat(""0.00"");
,		Double totalWeight = 0D;
,
,		for (BreedingOperatorSetup opSetup : breedingOperators)
,		{
,			totalWeight += opSetup.weight;
,		}
,
,		output.append(""\n | Breeding operators:"");
,		PaddingStringBuilder.PaddingSection breedOpWeights = new PaddingStringBuilder.PaddingSection(false);
,		PaddingStringBuilder.PaddingSection breedOpPercent = new PaddingStringBuilder.PaddingSection(false);
,
,		for (BreedingOperatorSetup opSetup : breedingOperators)
,		{
,			output.append(""\n | | "").append(breedOpWeights, oneDotTwoFormat.format(opSetup.weight)).append("" -> "").append(breedOpPercent, Math.round(opSetup.weight / totalWeight * 100)).append(""%: "").append(opSetup.breedingOperator);
,		}
,
,		// Breeding classes
,		output.append(""\n | Approved breeding classes:"");
,		StringBuilder classesWith = new StringBuilder();
,		StringBuilder classesWithout  = new StringBuilder();
,
,		for (BreedingClassSetup classSetup : breedingClasses)
,		{
,			if (classSetup.instantiable)
,			{
,				classesWith.append(""\n | | | "").append(classSetup.className);
,			}
,			else
,			{
,				classesWithout.append(""\n | | | "").append(classSetup.className);
,			}
,		}
,
,		if (classesWith.length() > 0)
,		{
,			output.append(""\n | | With instantiation:"").append(classesWith);
,		}
,
,		if (classesWithout.length() > 0)
,		{
,			output.append(""\n | | Without instantiation:"").append(classesWithout);
,		}
,
,		return output.toString();
,	}
"
6c241594-f2fc-4996-bfc9-c7ef863c220a,9e97a748-c4fb-45ea-b56d-e9467ab3e46f,LTEQ,"PRIVATE,HubNode,getHubOf,LPAREN,String,type,COMMA,Device,child,RPAREN,THROWS,IOException,LBRACE,IF,LPAREN,isFlatTree,RPAREN,RETURN,this,SEMI,IF,LPAREN,""add"",EQEQ,type,RPAREN,LBRACE,int,ports,EQ,hub,DOT,getNumPorts,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,1,SEMI,i,<MASK>,ports,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,dev,DOT,getChild,LPAREN,i,RPAREN,EQEQ,child,RPAREN,RETURN,this,SEMI,RBRACE,RBRACE,SYNCHRONIZED,LPAREN,children,RPAREN,LBRACE,IF,LPAREN,""remove"",EQEQ,type,RPAREN,LBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,last,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,children,LBRACKET,i,RBRACKET,DOT,dev,EQEQ,child,RPAREN,RETURN,this,SEMI,RBRACE,RBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,last,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,children,LBRACKET,i,RBRACKET,INSTANCEOF,HubNode,RPAREN,LBRACE,HubNode,value,EQ,LPAREN,HubNode,RPAREN,children,LBRACKET,i,RBRACKET,SEMI,IF,LPAREN,LPAREN,value,EQ,value,DOT,getHubOf,LPAREN,type,COMMA,child,RPAREN,RPAREN,BANGEQ,null,RPAREN,RETURN,value,SEMI,RBRACE,RBRACE,RBRACE,RETURN,null,SEMI,RBRACE","    private HubNode getHubOf (String type, Device child)
,    throws IOException
,    {
,	// in flat model, only the root hub calls this
,	if (isFlatTree)
,	    return this;
,	
,	// am I the right hub?
,
,	// on addition, children will not reflect it yet; go direct.
,	if (""add"" == type) {
,	    int ports = hub.getNumPorts ();
,
,	    for (int i = 1; i <MASK> ports; i++) {
,		if (dev.getChild (i) == child)
,		    return this;
,	    }
,	}
,
,	synchronized (children) {
,	    // on removal, search our records for what to purge
,	    if (""remove"" == type) {
,		for (int i = 0; i < last; i++) {
,		    if (children [i].dev == child)
,			return this;
,		}
,	    }
,
,	    // ask the connected hubs (that we know about).
,	    for (int i = 0; i < last; i++) {
,		if (children [i] instanceof HubNode) {
,		    HubNode	value = (HubNode) children [i];
,
,		    if ((value = value.getHubOf (type, child)) != null)
,			return value;
,		}
,	    }
,	}
,	return null;
,    }
"
113c5414-6c55-466b-b879-a350ab6e0ca2,601fb92e-32e6-48be-9eb8-520071b7d534,EQ,"PUBLIC,HoldableDecorator,LPAREN,Holdable,decoratedHoldable,RPAREN,LBRACE,this,DOT,decoratedHoldable,<MASK>,decoratedHoldable,SEMI,this,DOT,setID,LPAREN,decoratedHoldable,DOT,getID,LPAREN,RPAREN,RPAREN,SEMI,this,DOT,setName,LPAREN,decoratedHoldable,DOT,getName,LPAREN,RPAREN,RPAREN,SEMI,this,DOT,setCost,LPAREN,decoratedHoldable,DOT,getCost,LPAREN,RPAREN,RPAREN,SEMI,this,DOT,setWeight,LPAREN,decoratedHoldable,DOT,getWeight,LPAREN,RPAREN,RPAREN,SEMI,RBRACE","	public HoldableDecorator(Holdable decoratedHoldable) {
,		this.decoratedHoldable <MASK> decoratedHoldable;
,		this.setID(decoratedHoldable.getID());
,		this.setName(decoratedHoldable.getName());
,		this.setCost(decoratedHoldable.getCost());
,		this.setWeight(decoratedHoldable.getWeight());
,	}
"
b6d08fd3-a673-4a77-8d9f-bf9a01922a85,af187cb7-298c-411a-a690-6c35562e3258,SLASH,"float,getLift,LPAREN,Vector3d,p,RPAREN,LBRACE,float,lmax,EQ,SUB,3,STAR,Glider,DOT,SINK_RATE,SEMI,float,dh,EQ,LPAREN,float,RPAREN,0.1,SEMI,IF,LPAREN,p,DOT,y,LT,y0,RPAREN,LBRACE,float,z,EQ,getHeight,LPAREN,p,DOT,x,COMMA,p,DOT,y,RPAREN,SEMI,float,h,EQ,p,DOT,z,SUB,z,SEMI,IF,LPAREN,h,LT,dh,RPAREN,LBRACE,RETURN,lmax,SEMI,RBRACE,ELSE,IF,LPAREN,h,LT,LPAREN,float,RPAREN,1,PLUS,dh,RPAREN,LBRACE,float,f,EQ,LPAREN,2,PLUS,dh,SUB,h,RPAREN,<MASK>,2,SEMI,RETURN,LPAREN,f,STAR,f,STAR,f,RPAREN,STAR,lmax,SEMI,RBRACE,ELSE,LBRACE,RETURN,0,SEMI,RBRACE,RBRACE,ELSE,LBRACE,RETURN,0,SEMI,RBRACE,RBRACE","    float getLift(Vector3d p) {
,        float lmax = -3 * Glider.SINK_RATE;
,        float dh = (float) 0.1;
,        <MASK>/if (p.z > maxH + (float) 0.2) return 0;
,        if (p.y < y0) {
,            float z = getHeight(p.x, p.y);
,            float h = p.z - z;
,            //System.out.println(""ground: "" + z);
,            if (h < dh) {
,                return lmax;
,            } else if (h < (float) 1 + dh) {
,                float f = (2 + dh - h) / 2;
,                return (f * f * f) * lmax;
,            } else {
,                return 0;
,            }
,        } else {
,            return 0;
,        }
,    }
"
3913c395-db09-4ac4-8282-49a81b6a21f4,c83429a5-e4f1-44f5-a5e9-803fadb14201,BANGEQ,"PROTECTED,void,generateContacts,LPAREN,RPAREN,LBRACE,CollisionContact,c,SEMI,Movable,a,EQ,null,SEMI,FOR,LPAREN,GameEntity,e,COLON,entities,RPAREN,LBRACE,IF,LPAREN,BANG,LPAREN,e,INSTANCEOF,Movable,RPAREN,RPAREN,CONTINUE,SEMI,a,EQ,LPAREN,Movable,RPAREN,e,SEMI,FOR,LPAREN,GameEntity,b,COLON,a,DOT,neighbours,RPAREN,LBRACE,IF,LPAREN,a,DOT,equals,LPAREN,b,RPAREN,RPAREN,CONTINUE,SEMI,IF,LPAREN,BANG,a,DOT,isEnemy,LPAREN,b,RPAREN,RPAREN,CONTINUE,SEMI,c,EQ,generateContact,LPAREN,a,COMMA,b,RPAREN,SEMI,IF,LPAREN,c,<MASK>,null,RPAREN,LBRACE,contacts,DOT,add,LPAREN,c,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,RBRACE","	protected void generateContacts() {
,		// Generate collision contacts.
,		CollisionContact c;
,		Movable a = null;
,		for (GameEntity e : entities) {
,			if (!(e instanceof Movable)) continue;
,			a = (Movable)e;
,			for (GameEntity b : a.neighbours) {
,				if (a.equals(b)) continue;
,				if (!a.isEnemy(b)) continue; // TODO: Make also friendly units collide
,				c = generateContact(a, b);
,				if (c <MASK> null) {
,					contacts.add(c); // Also avoids adding a contact twice (see CollisionContact.equals).
,				}
,			}
,		}
,	}
"
7adec7d8-cee7-4225-a9f6-43a8dd4e76a6,7821f546-0f86-4934-9862-17ba5d609eb6,STAR,"PRIVATE,int,getUnit,LPAREN,String,product,COMMA,double,entryPrice,COMMA,double,stopPrice,RPAREN,LBRACE,double,r,EQ,Math,DOT,abs,LPAREN,entryPrice,SUB,stopPrice,RPAREN,SEMI,double,point,EQ,CurrencyTable,DOT,getPoint,LPAREN,product,RPAREN,SEMI,double,valuePerPoint,EQ,CurrencyTable,DOT,getValuePerPoint,LPAREN,product,RPAREN,SEMI,double,balance,EQ,order,DOT,getAccount,LPAREN,RPAREN,DOT,getBalance,LPAREN,RPAREN,SEMI,int,unit,EQ,LPAREN,int,RPAREN,LPAREN,0.01,<MASK>,balance,SLASH,valuePerPoint,SLASH,LPAREN,r,SLASH,point,RPAREN,RPAREN,SEMI,RETURN,unit,SEMI,RBRACE","    private int getUnit(String product, double entryPrice, double stopPrice) {
,        double r = Math.abs(entryPrice - stopPrice);
,        double point = CurrencyTable.getPoint(product);
,        double valuePerPoint = CurrencyTable.getValuePerPoint(product);
,        double balance = order.getAccount().getBalance();
,        int unit = (int) (0.01 <MASK> balance / valuePerPoint / (r/point));
,        return unit;
,    }
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,00a193fe-d138-4b2e-80f2-ddae7bbe4ba5,BANGEQ,"PROTECTED,void,disconnect,LPAREN,RPAREN,LBRACE,IF,LPAREN,socket,<MASK>,null,RPAREN,LBRACE,TRY,LBRACE,reader,DOT,setStop,LPAREN,true,RPAREN,SEMI,socket,DOT,shutdownInput,LPAREN,RPAREN,SEMI,socket,DOT,getInputStream,LPAREN,RPAREN,DOT,close,LPAREN,RPAREN,SEMI,socket,DOT,getOutputStream,LPAREN,RPAREN,DOT,close,LPAREN,RPAREN,SEMI,socket,DOT,close,LPAREN,RPAREN,SEMI,socket,EQ,null,SEMI,RBRACE,CATCH,LPAREN,IOException,e,RPAREN,LBRACE,RBRACE,RBRACE,RBRACE","  protected void disconnect() {
,    if (socket <MASK> null) {
,      try {
,        reader.setStop(true);
,
,        socket.shutdownInput();
,        socket.getInputStream().close();
,        socket.getOutputStream().close();
,        socket.close();
,
,        socket = null;
,      } catch (IOException e) {
,      }
,    }
,  }
"
7bd76208-9b34-4151-9ec4-57c6c52e0fcf,f3f50475-bc2e-408d-972b-a0f56138bb44,GTEQ,"void,freereg,LPAREN,int,reg,RPAREN,LBRACE,IF,LPAREN,BANG,ISK,LPAREN,reg,RPAREN,AMPAMP,reg,<MASK>,this,DOT,nactvar,RPAREN,LBRACE,this,DOT,freereg,SUBSUB,SEMI,_assert,LPAREN,reg,EQEQ,this,DOT,freereg,RPAREN,SEMI,RBRACE,RBRACE","	void freereg(int reg) {
,		if (!ISK(reg) && reg <MASK> this.nactvar) {
,			this.freereg--;
,			_assert (reg == this.freereg);
,		}
,	}
"
ee6285e4-70fb-4aa1-99e0-6f8cd1871b27,41aca17f-1aef-4d20-9925-715909cc0d04,LTEQ,"PUBLIC,STATIC,void,main,LPAREN,String,args,LBRACKET,RBRACKET,RPAREN,LBRACE,int,total,EQ,41411,SEMI,int,limit,EQ,2000,SEMI,connection,conn,SEMI,SQLconnection,sqLconnection,SEMI,conn,EQ,NEW,connection,LPAREN,RPAREN,SEMI,sqLconnection,EQ,conn,DOT,conn,LPAREN,RPAREN,SEMI,ExecutorService,executorService,EQ,Executors,DOT,newFixedThreadPool,LPAREN,total,SLASH,limit,RPAREN,SEMI,long,begin,EQ,System,DOT,currentTimeMillis,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,total,SLASH,limit,SEMI,i,PLUSPLUS,RPAREN,LBRACE,String,query,EQ,""select term from term5index limit "",PLUS,LPAREN,i,STAR,limit,RPAREN,PLUS,"","",PLUS,limit,SEMI,ResultSet,rsSet,EQ,null,SEMI,String,name,EQ,""T"",PLUS,i,SEMI,rsSet,EQ,sqLconnection,DOT,Query,LPAREN,query,RPAREN,SEMI,executorService,DOT,execute,LPAREN,NEW,SetTerm_IDList,LPAREN,name,COMMA,rsSet,RPAREN,RPAREN,SEMI,RBRACE,executorService,DOT,shutdown,LPAREN,RPAREN,SEMI,WHILE,LPAREN,BANG,executorService,DOT,isTerminated,LPAREN,RPAREN,RPAREN,LBRACE,RBRACE,long,end,EQ,System,DOT,currentTimeMillis,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""total time of multi thread: "",PLUS,LPAREN,end,SUB,begin,RPAREN,SLASH,1000,RPAREN,SEMI,RBRACE","	public static void main(String args[])
,	{
,		//total count is 41411,each time fetch 2000 records
,		int total=41411;
,		int limit=2000;
,		connection conn;
,		SQLconnection sqLconnection;
,		conn=new connection();
,		sqLconnection=conn.conn();
,		ExecutorService executorService = Executors.newFixedThreadPool(total/limit);
,		long begin=System.currentTimeMillis();
,		for(int i=0;i<MASK>total/limit;i++)
,		{
,			String query=""select term from term5index limit ""+(i*limit)+"",""+limit;
,			ResultSet rsSet=null;
,			String name=""T""+i;
,			rsSet=sqLconnection.Query(query);
,			executorService.execute(new SetTerm_IDList(name,rsSet));
,		}
,
,		executorService.shutdown();
,		while(!executorService.isTerminated())
,		{}
,		long end=System.currentTimeMillis();
,		System.out.println(""total time of multi thread: ""+(end-begin)/1000);
,		
,		/*String query=""select term from term5index limit 41000,1000"";
,		ResultSet rsSet=null;
,		rsSet=sqLconnection.Query(query);
,		ThreadOfTermIDList r1=new ThreadOfTermIDList(""Last"",rsSet);
,		Thread T1=new Thread(r1);
,		T1.start();*/
,	}
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,4f07f953-f2a4-4311-92b8-8025caea5883,LT,"PRIVATE,DevicePropertyBLOBEnableTuple,getBLOBEnableRule,LPAREN,String,deviceName,COMMA,String,propertyName,RPAREN,LBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,BLOBEnableRules,DOT,size,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,DevicePropertyBLOBEnableTuple,aux,EQ,BLOBEnableRules,DOT,get,LPAREN,i,RPAREN,SEMI,IF,LPAREN,aux,DOT,isProperty,LPAREN,deviceName,COMMA,propertyName,RPAREN,RPAREN,LBRACE,RETURN,aux,SEMI,RBRACE,RBRACE,RETURN,null,SEMI,RBRACE","  private DevicePropertyBLOBEnableTuple getBLOBEnableRule(String deviceName, String propertyName) {
,    for (int i = 0 ; i <MASK> BLOBEnableRules.size() ; i++) {
,      DevicePropertyBLOBEnableTuple aux = BLOBEnableRules.get(i);
,
,      if (aux.isProperty(deviceName, propertyName)) {
,        return aux;
,      }
,    }
,
,    return null;
,  }
"
2170437a-9f53-47a2-b3cb-257eca2eb4ab,bfeb9edc-07ad-4c49-8bf3-9d98f57749fa,EQEQ,"PUBLIC,void,setComments,LPAREN,String,comments,RPAREN,LBRACE,IF,LPAREN,comments,<MASK>,null,BARBAR,comments,DOT,length,LPAREN,RPAREN,GT,MAX_TEXT_LENGTH,RPAREN,LBRACE,THROW,NEW,IllegalArgumentException,LPAREN,""Comments cannot be null, or exceed max length!"",RPAREN,SEMI,RBRACE,this,DOT,comments,EQ,comments,SEMI,RBRACE","	public void setComments(String comments)
,	{
,		if (comments <MASK> null || comments.length() > MAX_TEXT_LENGTH)
,		{
,			throw new IllegalArgumentException(
,					""Comments cannot be null, or exceed max length!"");
,		}
,		this.comments = comments;
,	}
"
9c253d2b-e626-4f21-a850-dfb022369350,3bc4aad6-deaa-4864-9894-ea10a53d3c03,LTEQ,"PUBLIC,STATIC,void,cyclic,LPAREN,FINAL,double,LBRACKET,RBRACKET,a,COMMA,FINAL,double,LBRACKET,RBRACKET,b,COMMA,FINAL,double,LBRACKET,RBRACKET,c,COMMA,FINAL,double,alpha,COMMA,FINAL,double,beta,COMMA,FINAL,double,LBRACKET,RBRACKET,r,COMMA,FINAL,double,LBRACKET,RBRACKET,x,RPAREN,LBRACE,int,i,COMMA,n,EQ,a,DOT,length,SEMI,double,fact,COMMA,gamma,SEMI,IF,LPAREN,n,<MASK>,2,RPAREN,THROW,NEW,IllegalArgumentException,LPAREN,""n too small in cyclic"",RPAREN,SEMI,double,LBRACKET,RBRACKET,bb,EQ,NEW,double,LBRACKET,n,RBRACKET,SEMI,double,LBRACKET,RBRACKET,u,EQ,NEW,double,LBRACKET,n,RBRACKET,SEMI,double,LBRACKET,RBRACKET,z,EQ,NEW,double,LBRACKET,n,RBRACKET,SEMI,gamma,EQ,SUB,b,LBRACKET,0,RBRACKET,SEMI,bb,LBRACKET,0,RBRACKET,EQ,b,LBRACKET,0,RBRACKET,SUB,gamma,SEMI,bb,LBRACKET,n,SUB,1,RBRACKET,EQ,b,LBRACKET,n,SUB,1,RBRACKET,SUB,alpha,STAR,beta,SLASH,gamma,SEMI,FOR,LPAREN,i,EQ,1,SEMI,i,LT,n,SUB,1,SEMI,i,PLUSPLUS,RPAREN,bb,LBRACKET,i,RBRACKET,EQ,b,LBRACKET,i,RBRACKET,SEMI,tridag,LPAREN,a,COMMA,bb,COMMA,c,COMMA,r,COMMA,x,RPAREN,SEMI,u,LBRACKET,0,RBRACKET,EQ,gamma,SEMI,u,LBRACKET,n,SUB,1,RBRACKET,EQ,alpha,SEMI,FOR,LPAREN,i,EQ,1,SEMI,i,LT,n,SUB,1,SEMI,i,PLUSPLUS,RPAREN,u,LBRACKET,i,RBRACKET,EQ,0.0,SEMI,tridag,LPAREN,a,COMMA,bb,COMMA,c,COMMA,u,COMMA,z,RPAREN,SEMI,fact,EQ,LPAREN,x,LBRACKET,0,RBRACKET,PLUS,beta,STAR,x,LBRACKET,n,SUB,1,RBRACKET,SLASH,gamma,RPAREN,SLASH,LPAREN,1.0,PLUS,z,LBRACKET,0,RBRACKET,PLUS,beta,STAR,z,LBRACKET,n,SUB,1,RBRACKET,SLASH,gamma,RPAREN,SEMI,FOR,LPAREN,i,EQ,0,SEMI,i,LT,n,SEMI,i,PLUSPLUS,RPAREN,x,LBRACKET,i,RBRACKET,SUBEQ,fact,STAR,z,LBRACKET,i,RBRACKET,SEMI,RBRACE","  public static void cyclic(final double[] a, final double[] b, final double[] c, final double alpha,
,    final double beta, final double[] r, final double[] x) {
,    int i,n=a.length;
,    double fact,gamma;
,    if (n <MASK> 2) throw new IllegalArgumentException(""n too small in cyclic"");
,    double[] bb = new double[n];
,    double[] u = new double[n];
,    double[] z = new double[n];
,    gamma = -b[0];
,    bb[0]=b[0]-gamma;
,    bb[n-1]=b[n-1]-alpha*beta/gamma;
,    for (i=1;i<n-1;i++) bb[i]=b[i];
,    tridag(a,bb,c,r,x);
,    u[0]=gamma;
,    u[n-1]=alpha;
,    for (i=1;i<n-1;i++) u[i]=0.0;
,    tridag(a,bb,c,u,z);
,    fact=(x[0]+beta*x[n-1]/gamma)/
,      (1.0+z[0]+beta*z[n-1]/gamma);
,    for (i=0;i<n;i++) x[i] -= fact*z[i];
,  }
"
e64c1d9d-97c7-42df-873b-ba28e2c45ccc,1a5a5124-764e-4541-9193-df199f1e5a68,GTEQ,"PUBLIC,void,helper,LPAREN,int,count,COMMA,int,LBRACKET,RBRACKET,LBRACKET,RBRACKET,ret,COMMA,int,num,RPAREN,LBRACE,int,len,EQ,ret,DOT,length,SEMI,IF,LPAREN,count,GT,LPAREN,len,SUB,1,RPAREN,SLASH,2,RPAREN,RETURN,SEMI,FOR,LPAREN,int,i,EQ,count,SEMI,i,LT,len,SUB,count,SEMI,i,PLUSPLUS,RPAREN,LBRACE,ret,LBRACKET,count,RBRACKET,LBRACKET,i,RBRACKET,EQ,num,PLUSPLUS,SEMI,RBRACE,FOR,LPAREN,int,i,EQ,count,PLUS,1,SEMI,i,LT,len,SUB,count,SEMI,i,PLUSPLUS,RPAREN,LBRACE,ret,LBRACKET,i,RBRACKET,LBRACKET,len,SUB,count,SUB,1,RBRACKET,EQ,num,PLUSPLUS,SEMI,RBRACE,FOR,LPAREN,int,i,EQ,len,SUB,count,SUB,2,SEMI,i,<MASK>,count,SEMI,i,SUBSUB,RPAREN,LBRACE,ret,LBRACKET,len,SUB,count,SUB,1,RBRACKET,LBRACKET,i,RBRACKET,EQ,num,PLUSPLUS,SEMI,RBRACE,FOR,LPAREN,int,i,EQ,len,SUB,count,SUB,2,SEMI,i,GT,count,SEMI,i,SUBSUB,RPAREN,LBRACE,ret,LBRACKET,i,RBRACKET,LBRACKET,count,RBRACKET,EQ,num,PLUSPLUS,SEMI,RBRACE,helper,LPAREN,count,PLUS,1,COMMA,ret,COMMA,num,RPAREN,SEMI,RBRACE","    public void helper(int count, int[][] ret,int num){
,        int len = ret.length;
,        if(count>(len-1)/2) return;
,        for(int i=count;i<len-count;i++){
,            ret[count][i] = num++;
,        }
,        for(int i=count+1;i<len-count;i++){
,            ret[i][len-count-1] = num++;
,        }
,        for(int i=len-count-2;i<MASK>count;i--){
,            ret[len-count-1][i] = num++;
,        }
,        for(int i=len-count-2;i>count;i--){
,            ret[i][count] = num++;
,        }
,        helper(count+1,ret,num);            
,    }
"
b1d29837-1f95-40a2-98dc-d3762b71a15d,caabc759-5140-4eb8-893b-cd751447cfaf,GT,"MONKEYS_AT,Override,PUBLIC,void,onUninstall,LPAREN,RPAREN,LBRACE,FINAL,ModModel,LBRACKET,RBRACKET,l,EQ,modTable,DOT,getModel,LPAREN,RPAREN,DOT,getSelectedMods,LPAREN,RPAREN,SEMI,IF,LPAREN,l,DOT,length,<MASK>,0,RPAREN,LBRACE,Uninstaller,DOT,open,LPAREN,l,RPAREN,SEMI,synchronizeMods,LPAREN,l,RPAREN,SEMI,RBRACE,RBRACE","	@Override
,	public void onUninstall() {
,		final ModModel[] l = modTable.getModel().getSelectedMods();
,		if (l.length <MASK> 0) {
,			Uninstaller.open(l);
,			synchronizeMods(l);
,		}
,	}
"
4ea68084-5865-4b62-a71d-3eeac4e10676,17665dbf-b4a8-4651-8670-5f9e21e29b6a,SLASH,"PUBLIC,SYNCHRONIZED,Solution,rise,LPAREN,RPAREN,LBRACE,IF,LPAREN,startTime,BANGEQ,null,RPAREN,LBRACE,THROW,NEW,RealmException,LPAREN,""This object is single use only"",RPAREN,SEMI,RBRACE,System,DOT,out,DOT,println,LPAREN,""Dwayna: Starting run with the following settings: "",RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,Settings,DOT,getSettings,LPAREN,RPAREN,DOT,toPrettyString,LPAREN,RPAREN,RPAREN,SEMI,startTime,EQ,System,DOT,currentTimeMillis,LPAREN,RPAREN,SEMI,TRY,LBRACE,WeightedRandomCollection,LT,AbstractBreedingOperator,GT,breedingOperators,EQ,NEW,WeightedRandomCollection,LT,AbstractBreedingOperator,GT,LPAREN,Settings,DOT,getSettings,LPAREN,RPAREN,DOT,getRandomSeed,LPAREN,RPAREN,RPAREN,SEMI,FOR,LPAREN,BreedingOperatorSetup,opSetup,COLON,Settings,DOT,getSettings,LPAREN,RPAREN,DOT,getBreedingOperators,LPAREN,RPAREN,RPAREN,LBRACE,breedingOperators,DOT,add,LPAREN,opSetup,DOT,breedingOperator,COMMA,opSetup,DOT,weight,RPAREN,SEMI,RBRACE,kormir,DOT,reflectProblem,LPAREN,RPAREN,SEMI,WeightedRandomCollection,LT,MortalView,GT,mortals,EQ,NEW,WeightedRandomCollection,LT,MortalView,GT,LPAREN,Settings,DOT,getSettings,LPAREN,RPAREN,DOT,getRandomSeed,LPAREN,RPAREN,RPAREN,SEMI,MortalView,initialMortal,EQ,NEW,Mortal,LPAREN,RPAREN,SEMI,mortals,DOT,add,LPAREN,initialMortal,COMMA,Double,DOT,MIN_VALUE,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""Dwayna: Created initial population of mortal "",PLUS,initialMortal,PLUS,"" with root gene "",PLUS,initialMortal,DOT,getRootGene,LPAREN,RPAREN,PLUS,"" ("",PLUS,initialMortal,DOT,getRootGene,LPAREN,RPAREN,DOT,getClass,LPAREN,RPAREN,DOT,getSimpleName,LPAREN,RPAREN,PLUS,"")."",RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""Dwayna: Evolutionary breeding commenced!"",RPAREN,SEMI,IF,LPAREN,Settings,DOT,getSettings,LPAREN,RPAREN,DOT,getStatusInterval,LPAREN,RPAREN,BANGEQ,null,RPAREN,LBRACE,Lyssa,DOT,dispatch,LPAREN,NEW,Lyssa,LPAREN,this,RPAREN,RPAREN,SEMI,RBRACE,FOR,LPAREN,generation,EQ,1,SEMI,LPAREN,Settings,DOT,getSettings,LPAREN,RPAREN,DOT,getGenerationLimit,LPAREN,RPAREN,EQEQ,null,BARBAR,generation,LTEQ,Settings,DOT,getSettings,LPAREN,RPAREN,DOT,getGenerationLimit,LPAREN,RPAREN,RPAREN,SEMI,generation,PLUSPLUS,RPAREN,LBRACE,WeightedRandomCollection,LT,MortalView,GT,newMortals,EQ,NEW,WeightedRandomCollection,LT,MortalView,GT,LPAREN,Settings,DOT,getSettings,LPAREN,RPAREN,DOT,getRandomSeed,LPAREN,RPAREN,RPAREN,SEMI,long,scoreSum,EQ,0,SEMI,WHILE,LPAREN,newMortals,DOT,size,LPAREN,RPAREN,LT,Settings,DOT,getSettings,LPAREN,RPAREN,DOT,getPopulationSize,LPAREN,RPAREN,RPAREN,LBRACE,AbstractBreedingOperator,oper,EQ,breedingOperators,DOT,getRandom,LPAREN,RPAREN,SEMI,StringBuilder,output,EQ,NEW,StringBuilder,LPAREN,RPAREN,SEMI,TRY,LBRACE,breedCounter,PLUSPLUS,SEMI,Mortal,newMortal,EQ,oper,DOT,breed,LPAREN,mortals,COMMA,abaddon,RPAREN,SEMI,String,mortalSource,EQ,newMortal,DOT,getCode,LPAREN,RPAREN,SEMI,IF,LPAREN,Settings,DOT,getSettings,LPAREN,RPAREN,DOT,getPrintAllIndividuals,LPAREN,RPAREN,RPAREN,LBRACE,output,DOT,append,LPAREN,""Dwayna: "",RPAREN,DOT,append,LPAREN,newMortal,RPAREN,DOT,append,LPAREN,"": "",RPAREN,DOT,append,LPAREN,mortalSource,RPAREN,SEMI,RBRACE,MortalMessage,compiledMortal,EQ,balthazar,DOT,compile,LPAREN,mortalSource,RPAREN,SEMI,mortalCounter,PLUSPLUS,SEMI,long,score,EQ,melandru,DOT,bindMortal,LPAREN,compiledMortal,RPAREN,SEMI,IF,LPAREN,Settings,DOT,getSettings,LPAREN,RPAREN,DOT,getPrintAllIndividuals,LPAREN,RPAREN,RPAREN,LBRACE,output,DOT,append,LPAREN,"" [Score: "",RPAREN,DOT,append,LPAREN,score,RPAREN,DOT,append,LPAREN,""]"",RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,output,RPAREN,SEMI,RBRACE,IF,LPAREN,score,GT,0,AMPAMP,LPAREN,bestMortal,EQEQ,null,BARBAR,score,GT,bestMortal,DOT,getScore,LPAREN,RPAREN,RPAREN,RPAREN,LBRACE,bestMortal,EQ,NEW,Solution,LPAREN,mortalSource,COMMA,compiledMortal,DOT,getMortal,LPAREN,RPAREN,COMMA,score,COMMA,newMortal,DOT,toString,LPAREN,RPAREN,RPAREN,SEMI,IF,LPAREN,Settings,DOT,getSettings,LPAREN,RPAREN,DOT,getScoreLimit,LPAREN,RPAREN,BANGEQ,null,AMPAMP,bestMortal,DOT,getScore,LPAREN,RPAREN,GTEQ,Settings,DOT,getSettings,LPAREN,RPAREN,DOT,getScoreLimit,LPAREN,RPAREN,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""Dwayna: Solution "",PLUS,bestMortal,DOT,getId,LPAREN,RPAREN,PLUS,"" with a score of "",PLUS,bestMortal,DOT,getScore,LPAREN,RPAREN,PLUS,"" found. Bred "",PLUS,mortalCounter,PLUS,"" mortals in "",PLUS,Tools,DOT,formatMilliSeconds,LPAREN,System,DOT,currentTimeMillis,LPAREN,RPAREN,SUB,startTime,RPAREN,PLUS,"". Termination reason: Score limit reached."",RPAREN,SEMI,RETURN,bestMortal,SEMI,RBRACE,RBRACE,IF,LPAREN,score,GT,0,RPAREN,LBRACE,scoreSum,PLUSEQ,score,SEMI,newMortals,DOT,add,LPAREN,newMortal,COMMA,score,RPAREN,SEMI,RBRACE,ELSE,LBRACE,newMortals,DOT,add,LPAREN,newMortal,COMMA,0.1,RPAREN,SEMI,RBRACE,RBRACE,CATCH,LPAREN,GenePoolExhaustedBreedException,ex,RPAREN,LBRACE,RBRACE,CATCH,LPAREN,BreedingException,ex,RPAREN,LBRACE,RBRACE,CATCH,LPAREN,GenejectedExecutionException,ex,RPAREN,LBRACE,IF,LPAREN,Settings,DOT,getSettings,LPAREN,RPAREN,DOT,getPrintAllIndividuals,LPAREN,RPAREN,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,output,PLUS,"" [Execution failure]"",RPAREN,SEMI,RBRACE,RBRACE,RBRACE,lastAverageScore,EQ,scoreSum,<MASK>,Settings,DOT,getSettings,LPAREN,RPAREN,DOT,getPopulationSize,LPAREN,RPAREN,SEMI,mortals,EQ,newMortals,SEMI,RBRACE,IF,LPAREN,bestMortal,EQEQ,null,RPAREN,LBRACE,System,DOT,out,DOT,print,LPAREN,""Dwayna: No solution found."",RPAREN,SEMI,RBRACE,ELSE,LBRACE,System,DOT,out,DOT,print,LPAREN,""Dwayna: Solution "",PLUS,bestMortal,DOT,getId,LPAREN,RPAREN,PLUS,"" with a score of "",PLUS,bestMortal,DOT,getScore,LPAREN,RPAREN,PLUS,"" found."",RPAREN,SEMI,RBRACE,System,DOT,out,DOT,println,LPAREN,"" Bred "",PLUS,mortalCounter,PLUS,"" mortals in "",PLUS,Tools,DOT,formatMilliSeconds,LPAREN,System,DOT,currentTimeMillis,LPAREN,RPAREN,SUB,startTime,RPAREN,PLUS,"". Termination reason: Generation limit reached."",RPAREN,SEMI,RETURN,bestMortal,SEMI,RBRACE,FINALLY,LBRACE,finished,EQ,true,SEMI,RBRACE,RBRACE","	public synchronized Solution rise()
,	{
,		if (startTime != null)
,		{
,			throw new RealmException(""This object is single use only"");
,		}
,
,		<MASK>/ Print settings
,		System.out.println(""Dwayna: Starting run with the following settings: "");
,		System.out.println(Settings.getSettings().toPrettyString());
,
,		startTime = System.currentTimeMillis();
,
,		try
,		{
,			// Setup breeding operators
,			WeightedRandomCollection<AbstractBreedingOperator> breedingOperators = new WeightedRandomCollection<AbstractBreedingOperator>(Settings.getSettings().getRandomSeed());
,
,			for (BreedingOperatorSetup opSetup : Settings.getSettings().getBreedingOperators())
,			{
,				breedingOperators.add(opSetup.breedingOperator, opSetup.weight);
,			}
,
,			// Setup the initial gene pool
,			kormir.reflectProblem();
,
,			// Setup population
,			WeightedRandomCollection<MortalView> mortals = new WeightedRandomCollection<MortalView>(Settings.getSettings().getRandomSeed());
,			MortalView initialMortal = new Mortal(); // Create base mortal as starting point of run
,			mortals.add(initialMortal, Double.MIN_VALUE);
,
,			System.out.println(""Dwayna: Created initial population of mortal "" + initialMortal + "" with root gene "" + initialMortal.getRootGene() + "" ("" + initialMortal.getRootGene().getClass().getSimpleName() + "")."");
,			System.out.println(""Dwayna: Evolutionary breeding commenced!"");
,
,			if (Settings.getSettings().getStatusInterval() != null)
,			{
,				Lyssa.dispatch(new Lyssa(this));
,			}
,
,			// Go! Go! Go!
,			// TODO: Implement stop condition(s). Suggestion: When score doesn't improve for x generations OR it reaches 0.
,			for (generation = 1; (Settings.getSettings().getGenerationLimit() == null || generation <= Settings.getSettings().getGenerationLimit()); generation++)
,			{
,				WeightedRandomCollection<MortalView> newMortals = new WeightedRandomCollection<MortalView>(Settings.getSettings().getRandomSeed());
,				long scoreSum = 0;
,
,				//System.out.println(""Dwayna: Breeding generation "" + generation);
,
,				while (newMortals.size() < Settings.getSettings().getPopulationSize())
,				{
,					// Add another mortal to the new population
,					AbstractBreedingOperator oper = breedingOperators.getRandom();
,					StringBuilder output = new StringBuilder();
,
,					try
,					{
,						breedCounter++;
,						Mortal newMortal = oper.breed(mortals, abaddon);
,
,						// TODO: Streamline this. Might as well score mortals while breeding the rest of the generation?
,						String mortalSource = newMortal.getCode();
,
,						if (Settings.getSettings().getPrintAllIndividuals())
,						{
,							output.append(""Dwayna: "").append(newMortal).append("": "").append(mortalSource);
,						}
,
,						// TODO: Use a compiler pool with each their own thread. This is currently one of the main bottlenecks
,						MortalMessage compiledMortal = balthazar.compile(mortalSource);
,						mortalCounter++;
,
,						long score = melandru.bindMortal(compiledMortal);
,
,						if (Settings.getSettings().getPrintAllIndividuals())
,						{
,							output.append("" [Score: "").append(score).append(""]"");
,							System.out.println(output);
,						}
,
,						// Check if this mortal is better than all we've seen previously
,						if (score > 0 && (bestMortal == null || score > bestMortal.getScore()))
,						{
,							bestMortal = new Solution(mortalSource, compiledMortal.getMortal(), score, newMortal.toString());
,
,							// Check if score limit has been reached
,							if (Settings.getSettings().getScoreLimit() != null && bestMortal.getScore() >= Settings.getSettings().getScoreLimit())
,							{
,								System.out.println(""Dwayna: Solution "" + bestMortal.getId() + "" with a score of "" + bestMortal.getScore() + "" found. Bred "" + mortalCounter + "" mortals in ""+ Tools.formatMilliSeconds(System.currentTimeMillis() - startTime) + "". Termination reason: Score limit reached."");
,								return bestMortal;
,							}
,						}
,
,						if (score > 0)
,						{
,							scoreSum += score;
,							newMortals.add(newMortal, score);
,						}
,						else
,						{
,							// We keep a mortal even if it is useless at the moment.
,							// If there are no usable mortals in the generation at all, something broken is better than nothing at all
,							// If there are usable mortals in the generation this one will be killed by selection pressure soon enough
,							newMortals.add(newMortal, 0.1);
,						}
,					}
,					catch (GenePoolExhaustedBreedException ex)
,					{
,						// Ignore. Will be consolidated by Abaddon and reported at end of run.
,					}
,					catch (BreedingException ex)
,					{
,						// Ignore. Mostly caused by not being able to mutate on empty individuals during the first couple of generations. TODO: Find a way to avoid these failures
,						//System.out.println(""Dwayna: "" + oper + "" failed to breed with a "" + ex.getClass().getSimpleName() + "". Skipping."");
,					}
,					catch (GenejectedExecutionException ex)
,					{
,						// TODO: Logging/stats of how often this happens
,						if (Settings.getSettings().getPrintAllIndividuals())
,						{
,							System.out.println(output + "" [Execution failure]"");
,						}
,					}
,				}
,
,				// TODO: Stop if > x% mortality rate. Something must be wrong then.
,
,				lastAverageScore = scoreSum / Settings.getSettings().getPopulationSize();
,
,				// Make new population current
,				mortals = newMortals;
,			}
,
,			if (bestMortal == null)
,			{
,				System.out.print(""Dwayna: No solution found."");
,			}
,			else
,			{
,				System.out.print(""Dwayna: Solution "" + bestMortal.getId() + "" with a score of "" + bestMortal.getScore() + "" found."");
,			}
,
,			System.out.println("" Bred "" + mortalCounter + "" mortals in "" + Tools.formatMilliSeconds(System.currentTimeMillis() - startTime) + "". Termination reason: Generation limit reached."");
,
,			return bestMortal;
,		}
,		finally
,		{
,			finished = true;
,			//abaddon.reportPoolExhaustions();	// Enable this to report gene pool exhaustions after the run
,		}
,	}
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,a4c5dbcb-5a6e-4e61-a8ab-716d3e99502d,LT,"MONKEYS_AT,Override,PUBLIC,void,parseXML,LPAREN,Document,doc,RPAREN,LBRACE,Element,el,EQ,doc,DOT,getDocumentElement,LPAREN,RPAREN,SEMI,IF,LPAREN,el,DOT,getNodeName,LPAREN,RPAREN,DOT,compareTo,LPAREN,""INDI"",RPAREN,BANGEQ,0,RPAREN,LBRACE,RETURN,SEMI,RBRACE,NodeList,nodes,EQ,el,DOT,getChildNodes,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,nodes,DOT,getLength,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,Node,n,EQ,nodes,DOT,item,LPAREN,i,RPAREN,SEMI,IF,LPAREN,n,INSTANCEOF,Element,RPAREN,LBRACE,Element,child,EQ,LPAREN,Element,RPAREN,n,SEMI,String,nodeName,EQ,child,DOT,getNodeName,LPAREN,RPAREN,SEMI,IF,LPAREN,nodeName,DOT,equals,LPAREN,""getProperties"",RPAREN,RPAREN,LBRACE,processGetProperties,LPAREN,child,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,nodeName,DOT,equals,LPAREN,""defTextVector"",RPAREN,RPAREN,LBRACE,checkName,LPAREN,child,RPAREN,SEMI,processDefXXXVector,LPAREN,child,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,nodeName,DOT,equals,LPAREN,""defNumberVector"",RPAREN,RPAREN,LBRACE,checkName,LPAREN,child,RPAREN,SEMI,processDefXXXVector,LPAREN,child,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,nodeName,DOT,equals,LPAREN,""defSwitchVector"",RPAREN,RPAREN,LBRACE,checkName,LPAREN,child,RPAREN,SEMI,processDefXXXVector,LPAREN,child,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,nodeName,DOT,equals,LPAREN,""defLightVector"",RPAREN,RPAREN,LBRACE,checkName,LPAREN,child,RPAREN,SEMI,processDefXXXVector,LPAREN,child,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,nodeName,DOT,equals,LPAREN,""defBLOBVector"",RPAREN,RPAREN,LBRACE,checkName,LPAREN,child,RPAREN,SEMI,processDefXXXVector,LPAREN,child,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,nodeName,DOT,equals,LPAREN,""setTextVector"",RPAREN,RPAREN,LBRACE,processSetXXXVector,LPAREN,child,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,nodeName,DOT,equals,LPAREN,""setNumberVector"",RPAREN,RPAREN,LBRACE,processSetXXXVector,LPAREN,child,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,nodeName,DOT,equals,LPAREN,""setSwitchVector"",RPAREN,RPAREN,LBRACE,processSetXXXVector,LPAREN,child,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,nodeName,DOT,equals,LPAREN,""setLightVector"",RPAREN,RPAREN,LBRACE,processSetXXXVector,LPAREN,child,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,nodeName,DOT,equals,LPAREN,""setBLOBVector"",RPAREN,RPAREN,LBRACE,processSetXXXVector,LPAREN,child,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,nodeName,DOT,equals,LPAREN,""message"",RPAREN,RPAREN,LBRACE,processMessage,LPAREN,child,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,nodeName,DOT,equals,LPAREN,""delProperty"",RPAREN,RPAREN,LBRACE,processDelProperty,LPAREN,child,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,RBRACE","  @Override
,  public void parseXML(Document doc) {
,    Element el = doc.getDocumentElement();
,
,    if (el.getNodeName().compareTo(""INDI"") != 0) {
,      return;
,    }
,
,    NodeList nodes = el.getChildNodes();
,
,    for (int i = 0; i <MASK> nodes.getLength(); i++) {
,      Node n = nodes.item(i);
,
,      if (n instanceof Element) {
,        Element child = (Element) n;
,
,        String nodeName = child.getNodeName();
,        
,        if (nodeName.equals(""getProperties"")) {
,          processGetProperties(child);
,        } else if (nodeName.equals(""defTextVector"")) {
,          checkName(child);
,          processDefXXXVector(child);
,        } else if (nodeName.equals(""defNumberVector"")) {
,          checkName(child);
,          processDefXXXVector(child);
,        } else if (nodeName.equals(""defSwitchVector"")) {
,          checkName(child);
,          processDefXXXVector(child);
,        } else if (nodeName.equals(""defLightVector"")) {
,          checkName(child);
,          processDefXXXVector(child);
,        } else if (nodeName.equals(""defBLOBVector"")) {
,          checkName(child);
,          processDefXXXVector(child);
,        } else if (nodeName.equals(""setTextVector"")) {
,          processSetXXXVector(child);
,        } else if (nodeName.equals(""setNumberVector"")) {
,          processSetXXXVector(child);
,        } else if (nodeName.equals(""setSwitchVector"")) {
,          processSetXXXVector(child);
,        } else if (nodeName.equals(""setLightVector"")) {
,          processSetXXXVector(child);
,        } else if (nodeName.equals(""setBLOBVector"")) {
,          processSetXXXVector(child);
,        } else if (nodeName.equals(""message"")) {
,          processMessage(child);
,        } else if (nodeName.equals(""delProperty"")) {
,          processDelProperty(child);
,        }
,      }
,    }
,  }
"
09478113-8f39-4146-870b-8037a6932443,0b6bdba5-dde9-4828-8d0d-ffb54e7c2500,EQEQ,"PRIVATE,void,OP_LSR,LPAREN,RPAREN,LBRACE,int,iMem,EQ,readOperand,LPAREN,RPAREN,SEMI,int,iVal,EQ,LPAREN,iMem,GTGT,1,RPAREN,AMP,7F,SEMI,setCFlag,LPAREN,getBit,LPAREN,iMem,COMMA,0,RPAREN,RPAREN,SEMI,setZFlag,LPAREN,iVal,<MASK>,0,RPAREN,SEMI,setNFlag,LPAREN,LPAREN,iVal,AMP,80,RPAREN,BANGEQ,0,RPAREN,SEMI,writeOperand,LPAREN,iVal,RPAREN,SEMI,RBRACE","    private void OP_LSR()
,    {
,        int iMem = readOperand();
,        int iVal = (iMem >> 1) & 0x7F; // oder 0xFF, gibt normal keinen Fehler
,
,        setCFlag(getBit(iMem, 0));
,        setZFlag(iVal <MASK> 0);
,        setNFlag((iVal & 0x80) != 0); // check this
,
,        writeOperand(iVal);
,    }
"
7b10f06b-338c-44c3-8e01-b40eb98395b8,1e264c3b-fd73-482e-b45f-2ab170e1214e,EQEQ,"boolean,isUnit,LPAREN,RPAREN,LBRACE,RETURN,LPAREN,this,<MASK>,right,RPAREN,SEMI,RBRACE","	boolean isUnit() {
,		return (this <MASK> right);
,	}
"
8ec044ff-9e5c-46c4-ad39-ccc8ad42dd87,57ada226-ed23-44b2-a2e8-5d5774930e06,GT,"PUBLIC,void,actionPerformed,LPAREN,ActionEvent,e,RPAREN,LBRACE,int,rec,EQ,Integer,DOT,parseInt,LPAREN,receivField,DOT,getText,LPAREN,RPAREN,RPAREN,SEMI,String,id,EQ,idField,DOT,getText,LPAREN,RPAREN,SEMI,IF,LPAREN,rec,<MASK>,0,AMPAMP,inv,DOT,exists,LPAREN,id,RPAREN,RPAREN,LBRACE,inv,DOT,addQuantity,LPAREN,rec,COMMA,id,RPAREN,SEMI,loaders,DOT,saveInventory,LPAREN,inv,RPAREN,SEMI,oldstockField,DOT,setText,LPAREN,Integer,DOT,toString,LPAREN,inv,DOT,getQuantity,LPAREN,id,RPAREN,RPAREN,RPAREN,SEMI,receivField,DOT,setText,LPAREN,""0"",RPAREN,SEMI,inventoryReport,invRep,EQ,loaders,DOT,loadInventoryReport,LPAREN,RPAREN,SEMI,invRep,DOT,addInvToLog,LPAREN,inv,RPAREN,SEMI,loaders,DOT,saveInventoryReport,LPAREN,invRep,RPAREN,SEMI,RBRACE,RBRACE","			public void actionPerformed(ActionEvent e) {
,				int rec = Integer.parseInt(receivField.getText());
,				String id = idField.getText();
,				if(rec<MASK>0 && inv.exists(id))
,				{
,					inv.addQuantity(rec, id);
,					loaders.saveInventory(inv);
,					oldstockField.setText(Integer.toString(inv.getQuantity(id)));
,					receivField.setText(""0"");
,					
,					//Save to Report
,					inventoryReport invRep = loaders.loadInventoryReport();
,					invRep.addInvToLog(inv);
,					loaders.saveInventoryReport(invRep);
,				}
,			}
"
113c5414-6c55-466b-b879-a350ab6e0ca2,cadb5d2e-5cab-46c7-b40e-b4b49f38bf45,EQ,"PUBLIC,Rectangle,LBRACKET,RBRACKET,getRooms,LPAREN,RPAREN,LBRACE,Rectangle,LBRACKET,RBRACKET,rects,<MASK>,NEW,Rectangle,LBRACKET,rooms,DOT,size,LPAREN,RPAREN,RBRACKET,SEMI,rooms,DOT,toArray,LPAREN,rects,RPAREN,SEMI,RETURN,rects,SEMI,RBRACE","	public Rectangle[] getRooms(){
,		Rectangle[] rects <MASK> new Rectangle[rooms.size()];
,		rooms.toArray(rects);
,		return rects;
,	}
"
2bfa31fa-daf7-43ee-b7ee-b5502db2e4fe,230c0fb6-972d-476a-8ec0-027bdce5460a,GTEQ,"PUBLIC,FINAL,AC,fill,LPAREN,int,ELLIPSIS,indexes,RPAREN,LBRACE,FOR,LPAREN,int,i,EQ,indexes,DOT,length,SUB,1,SEMI,i,<MASK>,0,SEMI,i,SUBSUB,RPAREN,LBRACE,int,ix,EQ,indexes,LBRACKET,i,RBRACKET,SEMI,makeSize,LPAREN,ix,RPAREN,SEMI,cList,DOT,get,LPAREN,ix,RPAREN,DOT,setFill,LPAREN,true,RPAREN,SEMI,RBRACE,RETURN,this,SEMI,RBRACE","	public final AC fill(int... indexes)
,	{
,		for (int i = indexes.length - 1; i <MASK> 0; i--) {
,			int ix = indexes[i];
,			makeSize(ix);
,			cList.get(ix).setFill(true);
,		}
,		return this;
,	}
"
8b02bf36-3970-4fd2-ac11-287131435c5d,db6501d6-5c83-4406-b477-a823eaadfb2b,LTEQ,"PRIVATE,JMenu,makeMeeplesMenu,LPAREN,RPAREN,LBRACE,JMenu,meeplesMenu,EQ,NEW,JMenu,LPAREN,""Meeples"",RPAREN,SEMI,FOR,LPAREN,int,i,EQ,1,SEMI,i,<MASK>,Controller,DOT,MAX_MEEPLES,SEMI,i,PLUSPLUS,RPAREN,LBRACE,JMenuItem,item,EQ,NEW,JMenuItem,LPAREN,Integer,DOT,toString,LPAREN,i,RPAREN,RPAREN,SEMI,item,DOT,addActionListener,LPAREN,NEW,SetMeeplesAction,LPAREN,i,RPAREN,RPAREN,SEMI,item,DOT,setEnabled,LPAREN,true,RPAREN,SEMI,meeplesMenu,DOT,add,LPAREN,item,RPAREN,SEMI,RBRACE,RETURN,meeplesMenu,SEMI,RBRACE","	private JMenu makeMeeplesMenu() {
,		JMenu meeplesMenu = new JMenu(""Meeples"");
,		
,		for (int i = 1; i <MASK> Controller.MAX_MEEPLES; i++) {
,			JMenuItem item = new JMenuItem(Integer.toString(i));
,			item.addActionListener(new SetMeeplesAction(i));
,			item.setEnabled(true);
,			meeplesMenu.add(item);		
,		}
,		return meeplesMenu;
,	}
"
e804bdf1-7a07-4e36-aee6-aba6a427cf38,d93d519f-0a00-4e91-ab53-bb3c8246c08f,GTEQ,"PUBLIC,int,LBRACKET,RBRACKET,getArrayOfIncidentEdgeWeights,LPAREN,int,i,RPAREN,THROWS,IllegalArgumentException,LBRACE,IF,LPAREN,i,LT,0,BARBAR,i,<MASK>,numberOfVertices,RPAREN,LBRACE,String,errorMessage,EQ,""Allows vertex indizes are 0.."",PLUS,LPAREN,numberOfVertices,SUB,1,RPAREN,PLUS,""."",SEMI,THROW,NEW,IllegalArgumentException,LPAREN,errorMessage,RPAREN,SEMI,RBRACE,int,n,EQ,adjacencyList,LBRACKET,i,RBRACKET,DOT,size,LPAREN,RPAREN,SEMI,int,LBRACKET,RBRACKET,edgeWeights,EQ,NEW,int,LBRACKET,n,RBRACKET,SEMI,FOR,LPAREN,int,v,EQ,0,SEMI,v,LT,n,SEMI,v,PLUSPLUS,RPAREN,LBRACE,edgeWeights,LBRACKET,v,RBRACKET,EQ,adjacencyList,LBRACKET,i,RBRACKET,DOT,get,LPAREN,v,RPAREN,DOT,getWeight,LPAREN,RPAREN,SEMI,RBRACE,RETURN,edgeWeights,SEMI,RBRACE","	public int[] getArrayOfIncidentEdgeWeights(int i)
,			throws IllegalArgumentException {
,		
,		// check the passed vertex index
,		if (i < 0 || i <MASK> numberOfVertices) {
,			String errorMessage =
,				""Allows vertex indizes are 0..""
,				+ (numberOfVertices - 1) + ""."";
,			
,			throw new IllegalArgumentException(errorMessage);
,		}
,		
,		// get the number of vertices adjacent to vertex i
,		int n = adjacencyList[i].size();
,		
,		// create new edge weight array and fill with 1s
,		int[] edgeWeights = new int[n];
,		
,		for (int v = 0; v < n; v++) {
,			edgeWeights[v] = adjacencyList[i].get(v).getWeight();
,		}
,		
,		return edgeWeights;
,	}
"
5ee16f26-d690-4884-9baa-b57e0c8c43d6,c0d9aa4f-5a9e-4ca1-bfe1-a7d0559f473f,STAR,"MONKEYS_AT,Override,PUBLIC,void,eventDispatched,LPAREN,AWTEvent,e,RPAREN,LBRACE,IF,LPAREN,e,DOT,getSource,LPAREN,RPAREN,BANGEQ,dialog,RPAREN,LBRACE,RETURN,SEMI,RBRACE,SEMI,MouseWheelEvent,event,EQ,LPAREN,MouseWheelEvent,RPAREN,e,SEMI,int,modifiers,EQ,event,DOT,getModifiers,LPAREN,RPAREN,SEMI,boolean,big,EQ,LPAREN,modifiers,AMP,InputEvent,DOT,CTRL_MASK,RPAREN,BANGEQ,0,SEMI,int,rotation,EQ,event,DOT,getWheelRotation,LPAREN,RPAREN,SEMI,int,value,EQ,slider,DOT,getValue,LPAREN,RPAREN,SEMI,int,newValue,EQ,value,PLUS,rotation,<MASK>,LPAREN,big,QUES,STEP_SIZE_BIG,COLON,STEP_SIZE,RPAREN,SEMI,slider,DOT,setValue,LPAREN,newValue,RPAREN,SEMI,RBRACE","			@Override
,			public void eventDispatched(AWTEvent e) {
,				if (e.getSource() != dialog) {
,					return;
,				}
,				;
,				MouseWheelEvent event = (MouseWheelEvent) e;
,
,				int modifiers = event.getModifiers();
,				boolean big = (modifiers & InputEvent.CTRL_MASK) != 0;
,
,				int rotation = event.getWheelRotation();
,				int value = slider.getValue();
,				int newValue = value + rotation
,						<MASK> (big ? STEP_SIZE_BIG : STEP_SIZE);
,				slider.setValue(newValue);
,			}
"
7c9fa32b-47c1-42b6-86b9-501f085d34e4,b4499735-9c86-4bea-97c6-cb266653ced8,PERCENT,"PROTECTED,STATIC,Float,LBRACKET,RBRACKET,getArbitraryPolygonNormal,LPAREN,List,LT,Float,LBRACKET,RBRACKET,GT,face,RPAREN,LBRACE,Float,LBRACKET,RBRACKET,normal,EQ,NEW,Float,LBRACKET,RBRACKET,LBRACE,0f,COMMA,0f,COMMA,0f,RBRACE,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,face,DOT,size,LPAREN,RPAREN,SEMI,PLUSPLUS,i,RPAREN,LBRACE,Float,LBRACKET,RBRACKET,current,EQ,face,DOT,get,LPAREN,i,RPAREN,SEMI,Float,LBRACKET,RBRACKET,next,EQ,face,DOT,get,LPAREN,LPAREN,i,PLUS,1,RPAREN,<MASK>,face,DOT,size,LPAREN,RPAREN,RPAREN,SEMI,normal,LBRACKET,0,RBRACKET,PLUSEQ,LPAREN,current,LBRACKET,1,RBRACKET,SUB,next,LBRACKET,1,RBRACKET,RPAREN,STAR,LPAREN,current,LBRACKET,2,RBRACKET,PLUS,next,LBRACKET,2,RBRACKET,RPAREN,SEMI,normal,LBRACKET,1,RBRACKET,PLUSEQ,LPAREN,current,LBRACKET,2,RBRACKET,SUB,next,LBRACKET,2,RBRACKET,RPAREN,STAR,LPAREN,current,LBRACKET,0,RBRACKET,PLUS,next,LBRACKET,0,RBRACKET,RPAREN,SEMI,normal,LBRACKET,2,RBRACKET,PLUSEQ,LPAREN,current,LBRACKET,0,RBRACKET,SUB,next,LBRACKET,0,RBRACKET,RPAREN,STAR,LPAREN,current,LBRACKET,1,RBRACKET,PLUS,next,LBRACKET,1,RBRACKET,RPAREN,SEMI,RBRACE,RETURN,normal,SEMI,RBRACE","    protected static Float[] getArbitraryPolygonNormal(List<Float[]> face) {
,	Float[] normal = new Float[] {0f,0f,0f};
,	for(int i = 0; i < face.size(); ++i) {
,	    Float[] current = face.get(i);
,	    Float[] next = face.get((i+1) <MASK> face.size());
,	    normal[0] += (current[1]-next[1])*(current[2]+next[2]);
,	    normal[1] += (current[2]-next[2])*(current[0]+next[0]);
,	    normal[2] += (current[0]-next[0])*(current[1]+next[1]);
,	}
,	return normal;
,    }
"
113c5414-6c55-466b-b879-a350ab6e0ca2,28bc48d5-a3b2-4257-8c79-a6c6f9007b65,EQ,"PUBLIC,void,setEquippedMisc,LPAREN,ArrayList,LT,Holdable,GT,equippedMisc,RPAREN,LBRACE,this,DOT,equippedMisc,<MASK>,equippedMisc,SEMI,RBRACE","	public void setEquippedMisc(ArrayList<Holdable> equippedMisc) {
,		this.equippedMisc <MASK> equippedMisc;
,	}
"
33a4da69-3c87-4617-ac37-92c20f86f62c,4f16acc9-4099-43f7-baba-0f19e8c2bac8,PLUS,"PUBLIC,void,add,LPAREN,Parameter,p,RPAREN,THROWS,Exception,LBRACE,FOR,LPAREN,Parameter,pr,COLON,params,RPAREN,IF,LPAREN,p,DOT,getName,LPAREN,RPAREN,DOT,equals,LPAREN,pr,DOT,getName,LPAREN,RPAREN,RPAREN,RPAREN,THROW,NEW,Exception,LPAREN,p,DOT,getName,LPAREN,RPAREN,<MASK>,"" already defined!"",RPAREN,SEMI,params,DOT,add,LPAREN,p,RPAREN,SEMI,update,LPAREN,RPAREN,SEMI,this,DOT,fireTableRowsInserted,LPAREN,params,DOT,size,LPAREN,RPAREN,SUB,1,COMMA,params,DOT,size,LPAREN,RPAREN,RPAREN,SEMI,RBRACE","	public void add(Parameter p) throws Exception {
,		for (Parameter pr : params)
,			if (p.getName().equals(pr.getName()))
,				throw new Exception(p.getName() <MASK> "" already defined!"");
,		params.add(p);
,		update();
,
,		this.fireTableRowsInserted(params.size() - 1, params.size());
,	}
"
38ed5e2e-bfac-4cc9-94e0-5ee38dabb0ca,aa81957c-101f-4fd7-8eab-a0e446dab7d8,EQEQ,"STATIC,Object,domain,LPAREN,Object,subtree,RPAREN,LBRACE,IF,LPAREN,subtree,<MASK>,null,RPAREN,RETURN,null,SEMI,ELSE,IF,LPAREN,BANG,LPAREN,subtree,INSTANCEOF,Node,RPAREN,RPAREN,LBRACE,Object,LBRACKET,RBRACKET,ary,EQ,LPAREN,Object,LBRACKET,RBRACKET,RPAREN,subtree,SEMI,int,nkeys,EQ,ary,DOT,length,GTGT,1,SEMI,Object,LBRACKET,RBRACKET,dom,EQ,NEW,Object,LBRACKET,nkeys,RBRACKET,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,nkeys,SEMI,PLUSPLUS,i,RPAREN,dom,LBRACKET,i,RBRACKET,EQ,ary,LBRACKET,i,RBRACKET,SEMI,RETURN,dom,SEMI,RBRACE,ELSE,LBRACE,Node,node,EQ,LPAREN,Node,RPAREN,subtree,SEMI,Object,ldom,EQ,domain,LPAREN,node,DOT,left,RPAREN,COMMA,rdom,EQ,domain,LPAREN,node,DOT,right,RPAREN,SEMI,IF,LPAREN,node,DOT,key,INSTANCEOF,EquivalentMap,RPAREN,LBRACE,ArrayList,LT,Entry,GT,al,EQ,LPAREN,LPAREN,EquivalentMap,RPAREN,node,DOT,key,RPAREN,DOT,contents,SEMI,ArrayList,LT,Object,GT,dom,EQ,NEW,ArrayList,LT,Object,GT,LPAREN,al,DOT,size,LPAREN,RPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,al,DOT,size,LPAREN,RPAREN,SEMI,PLUSPLUS,i,RPAREN,dom,DOT,add,LPAREN,al,DOT,get,LPAREN,i,RPAREN,DOT,key,RPAREN,SEMI,RETURN,FHashSet,DOT,makeNode,LPAREN,NEW,FHashSet,DOT,EquivalentSet,LPAREN,dom,RPAREN,COMMA,node,DOT,khash,COMMA,ldom,COMMA,rdom,RPAREN,SEMI,RBRACE,ELSE,RETURN,FHashSet,DOT,makeNode,LPAREN,node,DOT,key,COMMA,node,DOT,khash,COMMA,ldom,COMMA,rdom,RPAREN,SEMI,RBRACE,RBRACE","    /*pkg*/ static Object domain(Object subtree) {
,	if (subtree <MASK> null) return null;
,	else if (!(subtree instanceof Node)) {
,	    Object[] ary = (Object[])subtree;
,	    int nkeys = ary.length >> 1;
,	    Object[] dom = new Object[nkeys];
,	    for (int i = 0; i < nkeys; ++i) dom[i] = ary[i];
,	    return dom;
,	} else {
,	    Node node = (Node)subtree;
,	    Object ldom = domain(node.left), rdom = domain(node.right);
,	    if (node.key instanceof EquivalentMap) {
,		ArrayList<Entry> al = ((EquivalentMap)node.key).contents;
,		ArrayList<Object> dom = new ArrayList<Object>(al.size());
,		for (int i = 0; i < al.size(); ++i) dom.add(al.get(i).key);
,		return FHashSet.makeNode(new FHashSet.EquivalentSet(dom), node.khash, ldom, rdom);
,	    } else return FHashSet.makeNode(node.key, node.khash, ldom, rdom);
,	}
,    }
"
8d8feef4-bad0-4d17-9d56-6d6034e77463,f4b30713-6972-436c-9a38-06f8c1409461,LTEQ,"MONKEYS_AT,Override,PUBLIC,Boolean,isManager,LPAREN,RPAREN,LBRACE,IF,LPAREN,LPAREN,this,DOT,id,GTEQ,24,RPAREN,AMPAMP,LPAREN,this,DOT,id,<MASK>,53,RPAREN,RPAREN,LBRACE,RETURN,true,SEMI,RBRACE,ELSE,LBRACE,RETURN,false,SEMI,RBRACE,RBRACE","    @Override
,    public Boolean isManager() {
,        //TODO hardcoded ID's
,        if ((this.id >= 24) && (this.id <MASK> 53)) {
,            return true;
,        } else {
,            return false;
,        }
,    }
"
113c5414-6c55-466b-b879-a350ab6e0ca2,f0f0e040-853a-4d4e-82b6-074776680aa2,EQ,"PUBLIC,WeaponDecorator,LPAREN,Weapon,w,RPAREN,LBRACE,this,DOT,decoratedWeapon,<MASK>,w,SEMI,this,DOT,setCost,LPAREN,w,DOT,getCost,LPAREN,RPAREN,RPAREN,SEMI,this,DOT,setDamageMsg,LPAREN,w,DOT,getDamageMsg,LPAREN,RPAREN,RPAREN,SEMI,this,DOT,setID,LPAREN,w,DOT,getID,LPAREN,RPAREN,RPAREN,SEMI,this,DOT,setMaxDamage,LPAREN,w,DOT,getMaxDamage,LPAREN,RPAREN,RPAREN,SEMI,this,DOT,setMinDamage,LPAREN,w,DOT,getMinDamage,LPAREN,RPAREN,RPAREN,SEMI,this,DOT,setName,LPAREN,w,DOT,getName,LPAREN,RPAREN,RPAREN,SEMI,this,DOT,setStackable,LPAREN,w,DOT,isStackable,LPAREN,RPAREN,RPAREN,SEMI,this,DOT,setWeight,LPAREN,w,DOT,getWeight,LPAREN,RPAREN,RPAREN,SEMI,RBRACE","	public WeaponDecorator(Weapon w) {
,		this.decoratedWeapon <MASK> w;
,		this.setCost(w.getCost());
,		this.setDamageMsg(w.getDamageMsg());
,		this.setID(w.getID());
,		this.setMaxDamage(w.getMaxDamage());
,		this.setMinDamage(w.getMinDamage());
,		this.setName(w.getName());
,		this.setStackable(w.isStackable());
,		this.setWeight(w.getWeight());
,	}
"
92951106-a87f-4e0c-9019-4852bf22d1be,daf4b00a-3805-40b0-9245-7febce8f91ac,PLUS,"PRIVATE,boolean,isMinHeap,LPAREN,int,k,RPAREN,LBRACE,IF,LPAREN,k,GT,heapSize,RPAREN,RETURN,true,SEMI,int,left,EQ,2,STAR,k,COMMA,right,EQ,2,STAR,k,<MASK>,1,SEMI,IF,LPAREN,left,LTEQ,heapSize,AMPAMP,greater,LPAREN,k,COMMA,left,RPAREN,RPAREN,RETURN,false,SEMI,IF,LPAREN,right,LTEQ,heapSize,AMPAMP,greater,LPAREN,k,COMMA,right,RPAREN,RPAREN,RETURN,false,SEMI,RETURN,isMinHeap,LPAREN,left,RPAREN,AMPAMP,isMinHeap,LPAREN,right,RPAREN,SEMI,RBRACE","    private boolean isMinHeap(int k) {
,        if (k > heapSize) return true;
,        int left = 2*k, right = 2*k <MASK> 1;
,        if (left  <= heapSize && greater(k, left))  return false;
,        if (right <= heapSize && greater(k, right)) return false;
,        return isMinHeap(left) && isMinHeap(right);
,    }
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,4c686dfd-c578-45bb-abdc-6a1bd2b3e139,LT,"MONKEYS_AT,Override,PUBLIC,void,parseXML,LPAREN,Document,doc,RPAREN,LBRACE,Element,el,EQ,doc,DOT,getDocumentElement,LPAREN,RPAREN,SEMI,IF,LPAREN,el,DOT,getNodeName,LPAREN,RPAREN,DOT,compareTo,LPAREN,""INDI"",RPAREN,BANGEQ,0,RPAREN,LBRACE,RETURN,SEMI,RBRACE,NodeList,nodes,EQ,el,DOT,getChildNodes,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,nodes,DOT,getLength,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,Node,n,EQ,nodes,DOT,item,LPAREN,i,RPAREN,SEMI,IF,LPAREN,n,INSTANCEOF,Element,RPAREN,LBRACE,Element,child,EQ,LPAREN,Element,RPAREN,n,SEMI,parseXMLElement,LPAREN,child,RPAREN,SEMI,RBRACE,RBRACE,RBRACE","  @Override
,  public void parseXML(Document doc) {
,    Element el = doc.getDocumentElement();
,
,    if (el.getNodeName().compareTo(""INDI"") != 0) {
,      return;
,    }
,
,    NodeList nodes = el.getChildNodes();
,
,    for (int i = 0 ; i <MASK> nodes.getLength() ; i++) {
,      Node n = nodes.item(i);
,
,      if (n instanceof Element) {
,        Element child = (Element)n;
,
,        parseXMLElement(child);
,      }
,    }
,  }
"
38ed5e2e-bfac-4cc9-94e0-5ee38dabb0ca,a691a44a-b10a-4465-8e55-a0012d2c0a98,EQEQ,"PUBLIC,FHashSet,LT,Elt,GT,union,LPAREN,Collection,LT,QUES,EXTENDS,Elt,GT,coll,RPAREN,LBRACE,IF,LPAREN,coll,<MASK>,this,BARBAR,coll,DOT,isEmpty,LPAREN,RPAREN,RPAREN,RETURN,this,SEMI,ELSE,IF,LPAREN,coll,INSTANCEOF,FHashSet,RPAREN,LBRACE,FHashSet,LT,Elt,GT,fhs,EQ,LPAREN,FHashSet,LT,Elt,GT,RPAREN,coll,SEMI,IF,LPAREN,isEmpty,LPAREN,RPAREN,RPAREN,RETURN,fhs,SEMI,Object,t,EQ,union,LPAREN,tree,COMMA,fhs,DOT,tree,RPAREN,SEMI,RETURN,make,LPAREN,t,RPAREN,SEMI,RBRACE,ELSE,LBRACE,FHashSet,LT,Elt,GT,fhs,EQ,NEW,FHashSet,LT,Elt,GT,LPAREN,coll,RPAREN,SEMI,Object,t,EQ,union,LPAREN,tree,COMMA,fhs,DOT,tree,RPAREN,SEMI,RETURN,make,LPAREN,t,RPAREN,SEMI,RBRACE,RBRACE","    public FHashSet<Elt> union(Collection<? extends Elt> coll) {
,	if (coll <MASK> this || coll.isEmpty()) return this;
,	else if (coll instanceof FHashSet) {
,	    FHashSet<Elt> fhs = (FHashSet<Elt>)coll;
,	    if (isEmpty()) return fhs;
,	    Object t = union(tree, fhs.tree);
,	    return make(t);
,	} else {
,	    FHashSet<Elt> fhs = new FHashSet<Elt>(coll);
,	    Object t = union(tree, fhs.tree);
,	    return make(t);
,	}
,    }
"
2170437a-9f53-47a2-b3cb-257eca2eb4ab,6090a593-10e6-4697-8c26-f6cb3aafaed4,EQEQ,"PUBLIC,void,setDescription,LPAREN,String,description,RPAREN,LBRACE,IF,LPAREN,description,<MASK>,null,BARBAR,description,DOT,length,LPAREN,RPAREN,GT,MAX_TEXT_LENGTH,RPAREN,LBRACE,THROW,NEW,IllegalArgumentException,LPAREN,""Description cannot be null, or exceed max length!"",RPAREN,SEMI,RBRACE,this,DOT,description,EQ,description,SEMI,RBRACE","	public void setDescription(String description)
,	{
,		if (description <MASK> null || description.length() > MAX_TEXT_LENGTH)
,		{
,			throw new IllegalArgumentException(
,					""Description cannot be null, or exceed max length!"");
,		}
,		this.description = description;
,	}
"
35ade180-d88e-4313-85ee-c83da04287fd,5d9c2f5b-310c-46fa-a0fe-ebd9319413e4,BANGEQ,"PRIVATE,STATIC,boolean,isPanDigital,LPAREN,int,number,RPAREN,LBRACE,FINAL,StringBuilder,sb,EQ,NEW,StringBuilder,LPAREN,RPAREN,SEMI,sb,DOT,append,LPAREN,number,RPAREN,SEMI,IF,LPAREN,sb,DOT,length,LPAREN,RPAREN,<MASK>,9,RPAREN,LBRACE,RETURN,false,SEMI,RBRACE,FINAL,int,num,EQ,Integer,DOT,parseInt,LPAREN,sb,DOT,toString,LPAREN,RPAREN,RPAREN,SEMI,IF,LPAREN,num,LT,min,BARBAR,num,GT,max,RPAREN,LBRACE,RETURN,false,SEMI,RBRACE,FINAL,int,LBRACKET,RBRACKET,dst,EQ,NEW,int,LBRACKET,10,RBRACKET,SEMI,FOR,LPAREN,int,n,EQ,0,SEMI,n,LT,sb,DOT,length,LPAREN,RPAREN,SEMI,n,PLUSPLUS,RPAREN,LBRACE,FINAL,String,s,EQ,sb,DOT,substring,LPAREN,n,COMMA,n,PLUS,1,RPAREN,SEMI,FINAL,int,m,EQ,Integer,DOT,parseInt,LPAREN,s,RPAREN,SEMI,dst,LBRACKET,m,RBRACKET,PLUSPLUS,SEMI,IF,LPAREN,dst,LBRACKET,m,RBRACKET,GT,1,RPAREN,LBRACE,RETURN,false,SEMI,RBRACE,RBRACE,RETURN,true,SEMI,RBRACE","    private static boolean isPanDigital(int number) {
,        final StringBuilder sb = new StringBuilder();
,        sb.append(number);
,        if (sb.length() <MASK> 9) {
,            return false;
,        }
,        final int num = Integer.parseInt(sb.toString());
,        if (num < min || num > max) {
,            return false;
,        }
,        final int[] dst = new int[10];
,        for (int n = 0; n < sb.length(); n++) {
,            final String s = sb.substring(n, n + 1);
,            final int m = Integer.parseInt(s);
,            dst[m]++;
,            if (dst[m] > 1) {
,                return false;
,            }
,        }
,        return true;
,    }
"
113c5414-6c55-466b-b879-a350ab6e0ca2,24788e1c-a070-441d-b62b-585042164ac3,EQ,"PUBLIC,STATIC,String,LBRACKET,RBRACKET,csvHeaders,LPAREN,RPAREN,LBRACE,String,LBRACKET,RBRACKET,headers,<MASK>,LBRACE,""Name"",COMMA,""Cost"",COMMA,""Weight"",COMMA,""MinDamage"",COMMA,""MaxDamage"",COMMA,""DamageMsg"",COMMA,""Special"",RBRACE,SEMI,RETURN,headers,SEMI,RBRACE","	public static String[] csvHeaders() {
,		String[] headers <MASK> {""Name"", ""Cost"", ""Weight"", ""MinDamage"", ""MaxDamage"", ""DamageMsg"", ""Special""};
,		return headers;
,	}
"
4efd15d4-7259-49ef-bb2b-8984a1154bd6,09a5ddaf-2156-4c6b-9238-777cf1e9dcd2,BANGEQ,"PRIVATE,void,selectSourceBtnActionPerformed,LPAREN,java,DOT,awt,DOT,event,DOT,ActionEvent,evt,RPAREN,LBRACE,IF,LPAREN,dataGrp,DOT,getSelection,LPAREN,RPAREN,<MASK>,null,RPAREN,LBRACE,filterCriteriaPanel,DOT,setEnabled,LPAREN,true,RPAREN,SEMI,keywordCB,DOT,setEnabled,LPAREN,true,RPAREN,SEMI,dateCB,DOT,setEnabled,LPAREN,true,RPAREN,SEMI,resetCriteriaBtn,DOT,setEnabled,LPAREN,true,RPAREN,SEMI,beginBtn,DOT,setEnabled,LPAREN,true,RPAREN,SEMI,lmRB,DOT,setEnabled,LPAREN,true,RPAREN,SEMI,topicRB,DOT,setEnabled,LPAREN,true,RPAREN,SEMI,fillDateBoxes,LPAREN,RPAREN,SEMI,RBRACE,ELSE,LBRACE,JOptionPane,DOT,showMessageDialog,LPAREN,null,COMMA,""Must select tweet data source."",COMMA,""Tweets Source Requirement"",COMMA,JOptionPane,DOT,ERROR_MESSAGE,RPAREN,SEMI,RBRACE,RBRACE","    private void selectSourceBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectSourceBtnActionPerformed
,        if(dataGrp.getSelection() <MASK> null){
,            filterCriteriaPanel.setEnabled(true);
,        
,            keywordCB.setEnabled(true);
,            dateCB.setEnabled(true);
,            resetCriteriaBtn.setEnabled(true);
,            beginBtn.setEnabled(true);
,            lmRB.setEnabled(true);
,            topicRB.setEnabled(true);
,            fillDateBoxes();
,        }else{
,            JOptionPane.showMessageDialog(null, ""Must select tweet data source."", ""Tweets Source Requirement"", JOptionPane.ERROR_MESSAGE);
,        }
,    }//GEN-LAST:event_selectSourceBtnActionPerformed
"
8d8feef4-bad0-4d17-9d56-6d6034e77463,10fc21af-93d6-4033-b3be-db6e2ea8608f,LTEQ,"MONKEYS_AT,Override,PUBLIC,String,getPageTitle,LPAREN,RPAREN,LBRACE,String,title,EQ,"""",SEMI,IF,LPAREN,LPAREN,this,DOT,id,GTEQ,1,RPAREN,AMPAMP,LPAREN,this,DOT,id,<MASK>,5,RPAREN,RPAREN,LBRACE,title,EQ,"" - partner projektu Bezpe\u010Dn\u00E9 panel\u00E1ky"",SEMI,RBRACE,IF,LPAREN,this,DOT,id,EQEQ,4,RPAREN,LBRACE,title,EQ,"" - elektrik\u00E1r - Bratislava"",SEMI,RBRACE,IF,LPAREN,LPAREN,this,DOT,id,EQEQ,12,RPAREN,BARBAR,LPAREN,this,DOT,id,EQEQ,18,RPAREN,RPAREN,LBRACE,title,EQ,"" - dod\u00E1vate\u013E bleskozvodov - Bezpe\u010Dn\u00E9 panel\u00E1ky"",SEMI,RBRACE,IF,LPAREN,this,DOT,isManager,LPAREN,RPAREN,RPAREN,LBRACE,title,EQ,"" - spr\u00E1va bytov\u00FDch domov - Bezpe\u010Dn\u00E9 panel\u00E1ky"",SEMI,RBRACE,IF,LPAREN,title,DOT,length,LPAREN,RPAREN,EQEQ,0,RPAREN,LBRACE,title,EQ,"" - Bezpe\u010Dn\u00E9 panel\u00E1ky"",SEMI,RBRACE,title,EQ,this,DOT,getName,LPAREN,RPAREN,PLUS,title,SEMI,RETURN,title,SEMI,RBRACE","    @Override
,    public String getPageTitle() {
,        String title = """";
,
,        if ((this.id >= 1) && (this.id <MASK> 5)) {
,            title = "" - partner projektu Bezpečné paneláky"";
,        }
,
,        if (this.id == 4) {
,            title = "" - elektrikár - Bratislava"";
,        }
,
,        if ((this.id == 12) || (this.id == 18)) {
,            title = "" - dodávateľ bleskozvodov - Bezpečné paneláky"";
,        }
,
,        if (this.isManager()) {
,            title = "" - správa bytových domov - Bezpečné paneláky"";
,        }
,
,        if (title.length() == 0) {
,            title = "" - Bezpečné paneláky"";
,        }
,
,        title = this.getName() + title;
,        return title;
,    }
"
2bfa31fa-daf7-43ee-b7ee-b5502db2e4fe,7718f3da-e9bb-49d0-b5ca-f2b8d40a7c0f,STAR,"PUBLIC,FINAL,int,hashCode,LPAREN,RPAREN,LBRACE,RETURN,LPAREN,int,RPAREN,LPAREN,value,<MASK>,12345,RPAREN,PLUS,LPAREN,oper,GTGTGT,5,RPAREN,PLUS,unit,GTGTGT,17,SEMI,RBRACE","	public final int hashCode()
,	{
,		return (int) (value <MASK> 12345) + (oper >>> 5) + unit >>> 17;
,	}
"
b6d08fd3-a673-4a77-8d9f-bf9a01922a85,e19737db-edf2-4656-9958-7ebd86ed1e1c,SLASH,"STATIC,Vector3d,LBRACKET,RBRACKET,circleXZ,LPAREN,int,numPoints,COMMA,float,radius,COMMA,Vector3d,center,RPAREN,LBRACE,float,dtheta,EQ,LPAREN,float,RPAREN,Math,DOT,PI,STAR,2,<MASK>,numPoints,SEMI,Vector3d,LBRACKET,RBRACKET,circle,EQ,NEW,Vector3d,LBRACKET,numPoints,RBRACKET,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,numPoints,SEMI,i,PLUSPLUS,RPAREN,LBRACE,float,theta,EQ,dtheta,STAR,i,SEMI,float,x,EQ,LPAREN,float,RPAREN,Math,DOT,sin,LPAREN,theta,RPAREN,STAR,radius,SEMI,float,z,EQ,LPAREN,float,RPAREN,Math,DOT,cos,LPAREN,theta,RPAREN,STAR,radius,SEMI,circle,LBRACKET,i,RBRACKET,EQ,NEW,Vector3d,LPAREN,x,COMMA,0,COMMA,z,RPAREN,SEMI,circle,LBRACKET,i,RBRACKET,DOT,add,LPAREN,center,RPAREN,SEMI,RBRACE,RETURN,circle,SEMI,RBRACE","    static Vector3d[] circleXZ(int numPoints, float radius, Vector3d center) {
,        float dtheta = (float) Math.PI * 2 <MASK> numPoints;
,        Vector3d[] circle = new Vector3d[numPoints];
,
,        for (int i = 0; i < numPoints; i++) {
,            float theta = dtheta * i;
,            float x = (float) Math.sin(theta) * radius;
,            float z = (float) Math.cos(theta) * radius;
,
,            circle[i] = new Vector3d(x, 0, z);
,            circle[i].add(center);
,        }
,        return circle;
,    }
"
bbbc2c49-08b6-473f-979f-87460edf9df9,ee781b71-b286-4242-bf26-04f085e4188a,LTEQ,"PROTECTED,void,updateReadPosition,LPAREN,RPAREN,LBRACE,boolean,toLow,EQ,false,SEMI,boolean,toHeight,EQ,false,SEMI,IF,LPAREN,lastReadEntry,BANGEQ,null,RPAREN,LBRACE,toLow,EQ,lastReadEntry,DOT,startPos,GT,rPos,SEMI,toHeight,EQ,lastReadEntry,DOT,endPos,<MASK>,rPos,SEMI,IF,LPAREN,BANG,LPAREN,rPos,BANGEQ,lastReadPos,BARBAR,toLow,BARBAR,toHeight,RPAREN,RPAREN,RETURN,SEMI,RBRACE,IF,LPAREN,firstEntry,EQEQ,null,RPAREN,THROW,NEW,IndexOutOfBoundsException,LPAREN,RPAREN,SEMI,BufferEntry,entry,SEMI,IF,LPAREN,toLow,RPAREN,LBRACE,entry,EQ,lastReadEntry,DOT,back,SEMI,WHILE,LPAREN,entry,BANGEQ,null,RPAREN,LBRACE,IF,LPAREN,rPos,GTEQ,entry,DOT,startPos,AMPAMP,rPos,LT,entry,DOT,endPos,RPAREN,LBRACE,updateReadPositionFound,LPAREN,entry,RPAREN,SEMI,RETURN,SEMI,RBRACE,entry,EQ,entry,DOT,back,SEMI,RBRACE,THROW,NEW,IndexOutOfBoundsException,LPAREN,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,toHeight,RPAREN,LBRACE,entry,EQ,lastReadEntry,DOT,next,SEMI,WHILE,LPAREN,entry,BANGEQ,null,RPAREN,LBRACE,IF,LPAREN,rPos,GTEQ,entry,DOT,startPos,AMPAMP,rPos,LT,entry,DOT,endPos,RPAREN,LBRACE,updateReadPositionFound,LPAREN,entry,RPAREN,SEMI,RETURN,SEMI,RBRACE,entry,EQ,entry,DOT,next,SEMI,RBRACE,THROW,NEW,IndexOutOfBoundsException,LPAREN,RPAREN,SEMI,RBRACE,ELSE,LBRACE,IF,LPAREN,lastReadEntry,EQEQ,null,RPAREN,LBRACE,entry,EQ,firstEntry,SEMI,DO,LBRACE,IF,LPAREN,rPos,GTEQ,entry,DOT,startPos,AMPAMP,rPos,LT,entry,DOT,endPos,RPAREN,LBRACE,updateReadPositionFound,LPAREN,entry,RPAREN,SEMI,RETURN,SEMI,RBRACE,entry,EQ,entry,DOT,next,SEMI,RBRACE,WHILE,LPAREN,entry,BANGEQ,null,RPAREN,SEMI,THROW,NEW,IndexOutOfBoundsException,LPAREN,RPAREN,SEMI,RBRACE,ELSE,updateReadPositionFound,LPAREN,lastReadEntry,RPAREN,SEMI,RBRACE,RBRACE","	protected void updateReadPosition()
,	{
,		boolean toLow = false;
,		boolean toHeight = false;
,
,		if( lastReadEntry != null )
,		{
,			toLow = lastReadEntry.startPos > rPos;
,			toHeight = lastReadEntry.endPos <MASK> rPos;
,
,			if( !(rPos != lastReadPos || toLow || toHeight) )
,				return;
,		}
,
,		if( firstEntry == null )
,			throw new IndexOutOfBoundsException();
,
,		BufferEntry entry;
,		if( toLow )
,		{
,			entry = lastReadEntry.back;
,
,			while( entry != null )
,			{
,				if( rPos >= entry.startPos && rPos < entry.endPos )
,				{
,					updateReadPositionFound(entry);
,					return;
,				}
,
,				entry = entry.back;
,			}
,
,			throw new IndexOutOfBoundsException();
,		}
,		else if( toHeight )
,		{
,			entry = lastReadEntry.next;
,
,			while( entry != null )
,			{
,				if( rPos >= entry.startPos && rPos < entry.endPos )
,				{
,					updateReadPositionFound(entry);
,					return;
,				}
,
,				entry = entry.next;
,			}
,
,			throw new IndexOutOfBoundsException();
,		}
,		else
,		{
,			if( lastReadEntry == null )
,			{
,				entry = firstEntry;
,
,				do
,				{
,					if( rPos >= entry.startPos && rPos < entry.endPos )
,					{
,						updateReadPositionFound(entry);
,						return;
,					}
,
,					entry = entry.next;
,				}
,				while( entry != null );
,
,				throw new IndexOutOfBoundsException();
,			}
,			else
,				updateReadPositionFound(lastReadEntry);
,		}
,
,	}
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,14949ea3-26fa-4439-95e0-9644d26df080,BANGEQ,"PRIVATE,INDIProperty,processNewXXXVector,LPAREN,Element,xml,RPAREN,LBRACE,IF,LPAREN,LPAREN,BANG,xml,DOT,hasAttribute,LPAREN,""device"",RPAREN,RPAREN,BARBAR,LPAREN,BANG,xml,DOT,hasAttribute,LPAREN,""name"",RPAREN,RPAREN,RPAREN,LBRACE,RETURN,null,SEMI,RBRACE,String,devName,EQ,xml,DOT,getAttribute,LPAREN,""device"",RPAREN,SEMI,String,propName,EQ,xml,DOT,getAttribute,LPAREN,""name"",RPAREN,SEMI,IF,LPAREN,devName,DOT,compareTo,LPAREN,getName,LPAREN,RPAREN,RPAREN,<MASK>,0,RPAREN,LBRACE,RETURN,null,SEMI,RBRACE,INDIProperty,prop,EQ,getProperty,LPAREN,propName,RPAREN,SEMI,RETURN,prop,SEMI,RBRACE","  private INDIProperty processNewXXXVector(Element xml) {
,    if ((!xml.hasAttribute(""device"")) || (!xml.hasAttribute(""name""))) {
,      return null;
,    }
,
,    String devName = xml.getAttribute(""device"");
,    String propName = xml.getAttribute(""name"");
,
,    if (devName.compareTo(getName()) <MASK> 0) {  // If the message is not for this device
,      return null;
,    }
,
,    INDIProperty prop = getProperty(propName);
,
,    return prop;
,  }
"
7adec7d8-cee7-4225-a9f6-43a8dd4e76a6,586ae180-be66-41d9-a3c5-3d3c2a6abd60,STAR,"PRIVATE,void,OpenSellTransaction,LPAREN,Date,time,COMMA,String,product,COMMA,double,price,COMMA,int,amount,RPAREN,LBRACE,TransactionHistory,th,EQ,NEW,TransactionHistory,LPAREN,this,DOT,account,COMMA,time,COMMA,product,COMMA,price,COMMA,amount,<MASK>,SUB,1,COMMA,0,COMMA,0,RPAREN,SEMI,session,DOT,save,LPAREN,th,RPAREN,SEMI,RBRACE","	private void OpenSellTransaction(Date time, String product, double price, int amount) {
,        TransactionHistory th = new TransactionHistory(this.account, time, product, price, amount<MASK>-1, 0, 0);
,        session.save(th);
,	}
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,fb57211a-5f79-42be-8bca-36fad4fd9742,LT,"PRIVATE,void,shelter_Val,LPAREN,RPAREN,LBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,shelters,DOT,size,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,ABObject,o1,EQ,shelters,DOT,get,LPAREN,i,RPAREN,SEMI,double,nobetween,EQ,1.0,SLASH,LPAREN,double,RPAREN,no_Between,LPAREN,o1,COMMA,target,RPAREN,SEMI,double,dist,EQ,1.0,SLASH,QualitativeRep,DOT,Distance2Objects,LPAREN,o1,COMMA,target,RPAREN,SEMI,double,value,EQ,nobetween,STAR,dist,SEMI,shelters,DOT,get,LPAREN,i,RPAREN,DOT,setSheltersValue,LPAREN,value,RPAREN,SEMI,RBRACE,RBRACE","	private void shelter_Val ()
,	{
,		for (int i = 0; i <MASK> shelters.size(); i++)
,		{
,			ABObject o1 = shelters.get(i);
,			double nobetween = 1.0 / (double) no_Between(o1, target);
,			double dist = 1.0 / QualitativeRep.Distance2Objects(o1, target);
,			double value = nobetween * dist;
,			shelters.get(i).setSheltersValue(value);
,		}
,	}
"
ce409cfa-d5ce-4a2d-98f1-b91cf6798c84,4483267c-ac1c-4b12-83b7-4ec2315edf37,GT,"PUBLIC,void,update,LPAREN,float,delta,RPAREN,LBRACE,this,DOT,round,DOT,getBox2DWorld,LPAREN,RPAREN,DOT,step,LPAREN,1,SLASH,60f,COMMA,6,COMMA,2,RPAREN,SEMI,this,DOT,round,DOT,update,LPAREN,delta,RPAREN,SEMI,Hero,hero,EQ,this,DOT,heroController,DOT,getHero,LPAREN,RPAREN,SEMI,IF,LPAREN,hero,DOT,isOnPlatform,LPAREN,RPAREN,RPAREN,LBRACE,WordChain,word,EQ,hero,DOT,getLettersCollected,LPAREN,RPAREN,SEMI,boolean,matchOccurred,EQ,languageController,DOT,match,LPAREN,word,DOT,convertToString,LPAREN,RPAREN,RPAREN,SEMI,IF,LPAREN,matchOccurred,RPAREN,LBRACE,int,wordScore,EQ,this,DOT,scoreManager,DOT,score,LPAREN,word,RPAREN,SEMI,hero,DOT,addScoreToTotal,LPAREN,wordScore,RPAREN,SEMI,hero,DOT,getLastScoreEarned,LPAREN,RPAREN,DOT,setValue,LPAREN,wordScore,RPAREN,SEMI,hero,DOT,getLastScoreEarned,LPAREN,RPAREN,DOT,setStartTweening,LPAREN,true,RPAREN,SEMI,startTweeningTheScore,LPAREN,hero,DOT,getLastScoreEarned,LPAREN,RPAREN,RPAREN,SEMI,this,DOT,round,DOT,getCheckingPlatform,LPAREN,RPAREN,DOT,setWordMatchFound,LPAREN,true,RPAREN,SEMI,this,DOT,round,DOT,getCheckingPlatform,LPAREN,RPAREN,DOT,setCurrentState,LPAREN,PlatformState,DOT,OK,RPAREN,SEMI,MusicPlayer,DOT,getInstance,LPAREN,RPAREN,DOT,playSoundCorrect,LPAREN,RPAREN,SEMI,RBRACE,ELSE,LBRACE,MusicPlayer,DOT,getInstance,LPAREN,RPAREN,DOT,playSoundWrong,LPAREN,RPAREN,SEMI,this,DOT,round,DOT,getCheckingPlatform,LPAREN,RPAREN,DOT,setWordMatchFound,LPAREN,false,RPAREN,SEMI,this,DOT,round,DOT,getCheckingPlatform,LPAREN,RPAREN,DOT,setCurrentState,LPAREN,PlatformState,DOT,WRONG,RPAREN,SEMI,RBRACE,int,numberOfLettersToAdd,EQ,10,SUB,this,DOT,round,DOT,getLettersOnTheTable,LPAREN,RPAREN,DOT,size,LPAREN,RPAREN,SEMI,IF,LPAREN,numberOfLettersToAdd,<MASK>,0,RPAREN,LBRACE,createLetters,LPAREN,numberOfLettersToAdd,COMMA,true,RPAREN,SEMI,RBRACE,hero,DOT,reset,LPAREN,RPAREN,SEMI,RBRACE,this,DOT,tweenManager,DOT,update,LPAREN,delta,RPAREN,SEMI,RBRACE","	public void update(float delta) {
,		this.round.getBox2DWorld().step(1 / 60f, 6, 2);
,		this.round.update(delta);
,		Hero hero = this.heroController.getHero();
,		if (hero.isOnPlatform()) {
,			WordChain word = hero.getLettersCollected();
,			boolean matchOccurred = languageController.match(word.convertToString());
,			// this.round.getCheckingPlatform().setWordMatchFound(matchOccurred);
,			if (matchOccurred) {
,				int wordScore = this.scoreManager.score(word);
,				hero.addScoreToTotal(wordScore);
,				hero.getLastScoreEarned().setValue(wordScore);
,				hero.getLastScoreEarned().setStartTweening(true);
,				startTweeningTheScore(hero.getLastScoreEarned());
,				this.round.getCheckingPlatform().setWordMatchFound(true);
,				this.round.getCheckingPlatform().setCurrentState(PlatformState.OK);
,				MusicPlayer.getInstance().playSoundCorrect();
,			} else {
,				MusicPlayer.getInstance().playSoundWrong();
,				this.round.getCheckingPlatform().setWordMatchFound(false);
,				this.round.getCheckingPlatform().setCurrentState(PlatformState.WRONG);
,			}
,			int numberOfLettersToAdd = 10 - this.round.getLettersOnTheTable().size();
,			if (numberOfLettersToAdd <MASK> 0) {
,				createLetters(numberOfLettersToAdd, true);
,
,			}
,			hero.reset();
,		}
,		this.tweenManager.update(delta);
,	}
"
2dd830d4-e85f-41ec-b5a4-78a5402d9efb,1392a0d9-b669-4b8a-96ae-566936f0e77f,SUB,"PUBLIC,void,displayWinner,LPAREN,ArrayList,LT,JavaFestivalPlayer,GT,players,COMMA,int,pointsWon,RPAREN,LBRACE,String,names,EQ,players,DOT,get,LPAREN,0,RPAREN,DOT,getName,LPAREN,RPAREN,SEMI,IF,LPAREN,players,DOT,size,LPAREN,RPAREN,GT,1,RPAREN,LBRACE,FOR,LPAREN,int,i,EQ,1,SEMI,i,LT,players,DOT,size,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,i,EQEQ,LPAREN,players,DOT,size,LPAREN,RPAREN,<MASK>,1,RPAREN,RPAREN,LBRACE,names,EQ,names,PLUS,"" and "",PLUS,players,DOT,get,LPAREN,i,RPAREN,DOT,getName,LPAREN,RPAREN,SEMI,RBRACE,ELSE,LBRACE,names,EQ,names,PLUS,"", "",PLUS,players,DOT,get,LPAREN,i,RPAREN,DOT,getName,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,JOptionPane,DOT,showMessageDialog,LPAREN,null,COMMA,""Congrats! Players "",PLUS,names,PLUS,"" have won this festival"",COMMA,""End of Festival"",COMMA,JOptionPane,DOT,INFORMATION_MESSAGE,RPAREN,SEMI,RBRACE,ELSE,LBRACE,JOptionPane,DOT,showMessageDialog,LPAREN,null,COMMA,""Congrats! Player "",PLUS,names,PLUS,"" has won this festival"",COMMA,""End of Festival"",COMMA,JOptionPane,DOT,INFORMATION_MESSAGE,RPAREN,SEMI,RBRACE,RBRACE","	public void displayWinner(ArrayList<JavaFestivalPlayer> players, int pointsWon){
,		String names = players.get(0).getName();
,		if(players.size() > 1){
,			for(int i = 1; i < players.size(); i++){
,				if(i == (players.size()<MASK>1)){
,					names = names+"" and ""+players.get(i).getName();
,				}
,				else{
,					names = names +"", ""+players.get(i).getName();
,				}
,			}
,			JOptionPane.showMessageDialog(null, ""Congrats! Players ""+names+"" have won this festival"", ""End of Festival"", JOptionPane.INFORMATION_MESSAGE);
,
,		}
,		else{
,			JOptionPane.showMessageDialog(null, ""Congrats! Player ""+names+"" has won this festival"", ""End of Festival"", JOptionPane.INFORMATION_MESSAGE);
,		}
,	}
"
2170437a-9f53-47a2-b3cb-257eca2eb4ab,9f473d5f-f878-4ff4-80cc-97624ca5dc75,EQEQ,"PUBLIC,Calendar,getMaxDueDate,LPAREN,RPAREN,LBRACE,Calendar,result,EQ,Calendar,DOT,getInstance,LPAREN,RPAREN,SEMI,Calendar,max,EQ,null,SEMI,Calendar,toCheck,SEMI,IF,LPAREN,tasks,BANGEQ,null,AMPAMP,tasks,DOT,size,LPAREN,RPAREN,GT,0,RPAREN,LBRACE,FOR,LPAREN,Task,t,COLON,tasks,RPAREN,LBRACE,toCheck,EQ,t,DOT,getDueDate,LPAREN,RPAREN,SEMI,IF,LPAREN,max,<MASK>,null,BARBAR,toCheck,DOT,compareTo,LPAREN,max,RPAREN,GT,0,RPAREN,LBRACE,max,EQ,toCheck,SEMI,RBRACE,RBRACE,result,DOT,set,LPAREN,Calendar,DOT,YEAR,COMMA,max,DOT,get,LPAREN,Calendar,DOT,YEAR,RPAREN,RPAREN,SEMI,result,DOT,set,LPAREN,Calendar,DOT,MONTH,COMMA,max,DOT,get,LPAREN,Calendar,DOT,MONTH,RPAREN,RPAREN,SEMI,result,DOT,set,LPAREN,Calendar,DOT,DAY_OF_MONTH,COMMA,max,DOT,get,LPAREN,Calendar,DOT,DAY_OF_MONTH,RPAREN,RPAREN,SEMI,RBRACE,RETURN,result,SEMI,RBRACE","	public Calendar getMaxDueDate()
,	{
,		Calendar result = Calendar.getInstance();
,		Calendar max = null;
,		Calendar toCheck;
,		if (tasks != null && tasks.size() > 0)
,		{
,			for (Task t : tasks)
,			{
,				toCheck = t.getDueDate();
,				if (max <MASK> null || toCheck.compareTo(max) > 0)
,				{
,					max = toCheck;
,				}
,			}
,			result.set(Calendar.YEAR, max.get(Calendar.YEAR));
,			result.set(Calendar.MONTH, max.get(Calendar.MONTH));
,			result.set(Calendar.DAY_OF_MONTH, max.get(Calendar.DAY_OF_MONTH));
,		}
,		return result;
,	}
"
62a978c0-a836-480d-8f9b-c958fbbc7ff5,f74c0bbe-eb37-48c1-a126-095b916b2448,SLASH,"PRIVATE,STATIC,int,LBRACKET,RBRACKET,packToIntArray,LPAREN,FINAL,byte,LBRACKET,RBRACKET,ba,RPAREN,LBRACE,IF,LPAREN,ba,EQEQ,null,RPAREN,RETURN,LPAREN,NEW,int,LBRACKET,0,RBRACKET,RPAREN,SEMI,int,LBRACKET,RBRACKET,ia,EQ,NEW,int,LBRACKET,LPAREN,ba,DOT,length,PLUS,3,RPAREN,<MASK>,4,RBRACKET,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,ia,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,int,restLen,EQ,Math,DOT,min,LPAREN,4,COMMA,ba,DOT,length,SUB,i,STAR,4,RPAREN,SEMI,FOR,LPAREN,int,b,EQ,0,SEMI,b,LT,restLen,SEMI,b,PLUSPLUS,RPAREN,ia,LBRACKET,i,RBRACKET,BAREQ,LPAREN,ba,LBRACKET,b,PLUS,i,STAR,4,RBRACKET,LTLT,LPAREN,LPAREN,restLen,SUB,b,SUB,1,RPAREN,STAR,8,RPAREN,RPAREN,AMP,mask,LBRACKET,b,PLUS,4,SUB,restLen,RBRACKET,SEMI,RBRACE,RETURN,LPAREN,ia,RPAREN,SEMI,RBRACE","	private static int[] packToIntArray (final byte[] ba) {
,		if (ba == null)
,			return (new int[0]);
,
,		int[] ia = new int[(ba.length + 3) <MASK> 4];
,
,		for (int i = 0; i < ia.length; i++) {
,			int restLen = Math.min (4, ba.length - i * 4);
,
,			for (int b = 0; b < restLen; b++)
,				ia[i] |= (ba[b + i * 4] << ((restLen - b - 1) * 8)) & mask[b + 4 - restLen];
,		}
,
,		return (ia);
,	}
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,38fe313f-f89a-441b-80a1-04bd7174a965,BANGEQ,"PUBLIC,STATIC,double,LBRACKET,RBRACKET,LineEquation,LPAREN,int,x1,COMMA,int,y1,COMMA,int,x2,COMMA,int,y2,RPAREN,LBRACE,double,LBRACKET,RBRACKET,arr,EQ,NEW,double,LBRACKET,7,RBRACKET,SEMI,IF,LPAREN,x1,SUB,x2,<MASK>,0,RPAREN,LBRACE,arr,LBRACKET,0,RBRACKET,EQ,LPAREN,double,RPAREN,LPAREN,y1,SUB,y2,RPAREN,SLASH,LPAREN,double,RPAREN,LPAREN,x1,SUB,x2,RPAREN,SEMI,arr,LBRACKET,1,RBRACKET,EQ,LPAREN,double,RPAREN,LPAREN,x1,STAR,y2,SUB,y1,STAR,x2,RPAREN,SLASH,LPAREN,double,RPAREN,LPAREN,x1,SUB,x2,RPAREN,SEMI,arr,LBRACKET,2,RBRACKET,EQ,0,SEMI,RBRACE,ELSE,LBRACE,arr,LBRACKET,0,RBRACKET,EQ,0,SEMI,arr,LBRACKET,1,RBRACKET,EQ,x1,SEMI,arr,LBRACKET,2,RBRACKET,EQ,1,SEMI,RBRACE,IF,LPAREN,x1,LT,x2,RPAREN,LBRACE,arr,LBRACKET,3,RBRACKET,EQ,x1,SEMI,arr,LBRACKET,5,RBRACKET,EQ,x2,SEMI,arr,LBRACKET,4,RBRACKET,EQ,y1,SEMI,arr,LBRACKET,6,RBRACKET,EQ,y2,SEMI,RBRACE,ELSE,IF,LPAREN,x1,GT,x2,RPAREN,LBRACE,arr,LBRACKET,3,RBRACKET,EQ,x2,SEMI,arr,LBRACKET,5,RBRACKET,EQ,x1,SEMI,arr,LBRACKET,4,RBRACKET,EQ,y2,SEMI,arr,LBRACKET,6,RBRACKET,EQ,y1,SEMI,RBRACE,ELSE,IF,LPAREN,x1,EQEQ,x2,RPAREN,LBRACE,IF,LPAREN,y1,LT,y2,RPAREN,LBRACE,arr,LBRACKET,3,RBRACKET,EQ,x1,SEMI,arr,LBRACKET,5,RBRACKET,EQ,x2,SEMI,arr,LBRACKET,4,RBRACKET,EQ,y1,SEMI,arr,LBRACKET,6,RBRACKET,EQ,y2,SEMI,RBRACE,ELSE,LBRACE,arr,LBRACKET,3,RBRACKET,EQ,x2,SEMI,arr,LBRACKET,5,RBRACKET,EQ,x1,SEMI,arr,LBRACKET,4,RBRACKET,EQ,y2,SEMI,arr,LBRACKET,6,RBRACKET,EQ,y1,SEMI,RBRACE,RBRACE,RETURN,arr,SEMI,RBRACE","   public static double[] LineEquation (int x1, int y1, int x2, int y2)
,   {
,	   	double[] arr = new double[7];
,	   	// Cramer's Rule to solve system of equation ( 2 x 2 )
,	   	if (x1 - x2 <MASK> 0)
,	   	{
,	   		// y = ax + b
,		    	arr[0] = (double)(y1 - y2) / (double)(x1 - x2);
,		    	arr[1] = (double)(x1*y2 - y1*x2) / (double)(x1 - x2);
,		    	arr[2] = 0;
,	   	}
,	   	else
,	   	{
,	   		// line equation based on x = ay + b
,	   		arr[0] = 0;
,	   		arr[1] = x1;
,	   		arr[2] = 1;
,	   	}
,	   	if (x1 < x2)
,	   	{
,	   		arr[3] = x1;
,	   		arr[5] = x2;
,	   		arr[4] = y1;
,	   		arr[6] = y2;
,	   	}
,	   	else if (x1 > x2)
,	   	{
,	   		arr[3] = x2;
,	   		arr[5] = x1;
,	   		arr[4] = y2;
,	   		arr[6] = y1;
,	   	}
,	   	else if (x1 == x2)
,	   	{
,	   		if (y1 < y2)
,	   		{
,	   			arr[3] = x1;
,	       		arr[5] = x2;
,	       		arr[4] = y1;
,	       		arr[6] = y2;
,	   		}
,	   		else
,	   		{
,	   			arr[3] = x2;
,	       		arr[5] = x1;
,	       		arr[4] = y2;
,	       		arr[6] = y1;
,	   		}
,	   	}
,	    	return arr;
,   }
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,87daca7b-11a6-42cc-ab57-918611995414,LT,"PUBLIC,STATIC,void,main,LPAREN,String,args,LBRACKET,RBRACKET,RPAREN,LBRACE,long,time,EQ,System,DOT,currentTimeMillis,LPAREN,RPAREN,SEMI,ActionRobot,DOT,doScreenShot,LPAREN,RPAREN,SEMI,time,EQ,System,DOT,currentTimeMillis,LPAREN,RPAREN,SUB,time,SEMI,System,DOT,out,DOT,println,LPAREN,"" cost: "",PLUS,time,RPAREN,SEMI,time,EQ,System,DOT,currentTimeMillis,LPAREN,RPAREN,SEMI,int,count,EQ,0,SEMI,WHILE,LPAREN,count,<MASK>,40,RPAREN,LBRACE,ActionRobot,DOT,doScreenShot,LPAREN,RPAREN,SEMI,count,PLUSPLUS,SEMI,RBRACE,System,DOT,out,DOT,println,LPAREN,"" time to take 40 screenshots"",PLUS,LPAREN,System,DOT,currentTimeMillis,LPAREN,RPAREN,SUB,time,RPAREN,RPAREN,SEMI,System,DOT,exit,LPAREN,0,RPAREN,SEMI,RBRACE","	public static void main(String args[]) {
,
,		long time = System.currentTimeMillis();
,		ActionRobot.doScreenShot();
,		time = System.currentTimeMillis() - time;
,		System.out.println("" cost: "" + time);
,		time = System.currentTimeMillis();
,		int count = 0;
,		while (count <MASK> 40) {
,			ActionRobot.doScreenShot();
,			count++;
,		}
,
,		System.out.println("" time to take 40 screenshots""
,				+ (System.currentTimeMillis() - time));
,		System.exit(0);
,
,	}
"
7b0ae379-c293-480e-8c64-3374a3631947,4ed342ea-fcd8-4773-a897-da165852171c,SUB,"PUBLIC,int,minRange,LPAREN,int,start,COMMA,int,end,RPAREN,LBRACE,RETURN,minRange,LPAREN,start,COMMA,end,COMMA,tree,COMMA,0,COMMA,arrayLength,<MASK>,1,COMMA,0,RPAREN,SEMI,RBRACE","        public int minRange(int start, int end) {
,            return minRange(start, end, tree, 0, arrayLength <MASK> 1, 0);
,        }
"
b5ee7e5e-a7bf-41d4-8880-3ac95d2f8822,db145dad-509a-490e-87c9-95efd74bb735,BANGEQ,"PUBLIC,STATIC,Map,LT,Number,COMMA,Map,LT,Number,COMMA,Number,GTGT,convert,LPAREN,String,filename,RPAREN,THROWS,IOException,LBRACE,Map,LT,Number,COMMA,Map,LT,Number,COMMA,Number,GTGT,map,EQ,NEW,TreeMap,LT,Number,COMMA,Map,LT,Number,COMMA,Number,GTGT,LPAREN,RPAREN,SEMI,FileReader,fr,EQ,NEW,FileReader,LPAREN,filename,RPAREN,SEMI,BufferedReader,br,EQ,NEW,BufferedReader,LPAREN,fr,RPAREN,SEMI,String,ln,EQ,br,DOT,readLine,LPAREN,RPAREN,SEMI,WHILE,LPAREN,ln,<MASK>,null,RPAREN,LBRACE,StringTokenizer,stk,EQ,NEW,StringTokenizer,LPAREN,ln,RPAREN,SEMI,Number,x,EQ,Integer,DOT,parseInt,LPAREN,stk,DOT,nextToken,LPAREN,RPAREN,RPAREN,SEMI,Number,y,EQ,Integer,DOT,parseInt,LPAREN,stk,DOT,nextToken,LPAREN,RPAREN,RPAREN,SEMI,Number,z,EQ,Double,DOT,parseDouble,LPAREN,stk,DOT,nextToken,LPAREN,RPAREN,RPAREN,SEMI,IF,LPAREN,map,DOT,containsKey,LPAREN,x,RPAREN,RPAREN,LBRACE,Map,LT,Number,COMMA,Number,GT,fm,EQ,map,DOT,get,LPAREN,x,RPAREN,SEMI,fm,DOT,put,LPAREN,y,COMMA,z,RPAREN,SEMI,RBRACE,ELSE,LBRACE,Map,LT,Number,COMMA,Number,GT,fm,EQ,NEW,TreeMap,LT,Number,COMMA,Number,GT,LPAREN,RPAREN,SEMI,fm,DOT,put,LPAREN,y,COMMA,z,RPAREN,SEMI,map,DOT,put,LPAREN,x,COMMA,fm,RPAREN,SEMI,RBRACE,ln,EQ,br,DOT,readLine,LPAREN,RPAREN,SEMI,RBRACE,br,DOT,close,LPAREN,RPAREN,SEMI,RETURN,map,SEMI,RBRACE","      public static Map<Number,Map<Number,Number>> convert(String filename) throws IOException{
,            
,            Map<Number,Map<Number,Number>> map = new TreeMap<Number,Map<Number,Number>>();
,            FileReader fr = new FileReader(filename);
,            BufferedReader br = new BufferedReader(fr);
,            
,            String ln = br.readLine();
,            
,            while(ln<MASK>null){
,                  StringTokenizer stk = new StringTokenizer(ln);
,                  Number x = Integer.parseInt(stk.nextToken());
,                  Number y = Integer.parseInt(stk.nextToken());
,                  Number z = Double.parseDouble(stk.nextToken());
,                  
,                  if(map.containsKey(x)){
,                        Map<Number,Number> fm = map.get(x);
,                        fm.put(y, z);
,                  }
,                  else{
,                        Map<Number,Number> fm = new TreeMap<Number,Number>();
,                        fm.put(y, z);
,                        map.put(x, fm);
,                  }
,                  
,                  ln = br.readLine();
,            }
,            
,            br.close();
,            return map;
,      }
"
9ca123d2-8bf1-436e-a0a5-11a67cb2b612,207513ca-4658-46dc-b4a8-f6ce074048c1,LTEQ,"PRIVATE,void,verify,LPAREN,int,integer,RPAREN,THROWS,UtilityException,LBRACE,IF,LPAREN,integer,<MASK>,0,RPAREN,LBRACE,THROW,NEW,UtilityException,LPAREN,""Quantity invalid."",PLUS,integer,RPAREN,SEMI,RBRACE,RBRACE","	private void verify(int integer) throws UtilityException
,	{
,		if (integer <MASK> 0)
,		{
,			throw new UtilityException(""Quantity invalid."" + integer);
,		}
,	}
"
ceb2d628-7548-4a8f-9594-53a373297866,525ae5f5-fce1-44b3-9e9a-ad8f57e7c841,LT,"PUBLIC,boolean,getDPadLeft,LPAREN,RPAREN,LBRACE,double,x,EQ,getDPadX,LPAREN,RPAREN,SEMI,RETURN,LPAREN,x,<MASK>,SUB,0.5,RPAREN,SEMI,RBRACE","    public boolean getDPadLeft() {
,      double x = getDPadX();
,      return (x <MASK> -0.5);
,    }
"
b6d08fd3-a673-4a77-8d9f-bf9a01922a85,1e83c127-fdf4-4ff7-803b-89ccb0b85676,SLASH,"void,avoidHills,LPAREN,RPAREN,LBRACE,IF,LPAREN,moveManager,DOT,joinedCircuit,LPAREN,RPAREN,RPAREN,RETURN,SEMI,IF,LPAREN,app,DOT,landscape,EQEQ,null,RPAREN,RETURN,SEMI,Vector3d,p_,EQ,p,DOT,plus,LPAREN,v,RPAREN,SEMI,float,h,EQ,p,DOT,z,SUB,app,DOT,landscape,DOT,getHeight,LPAREN,p,DOT,x,COMMA,p,DOT,y,RPAREN,SEMI,float,h_,EQ,p,DOT,z,SUB,app,DOT,landscape,DOT,getHeight,LPAREN,p_,DOT,x,COMMA,p_,DOT,y,RPAREN,SEMI,float,dh,EQ,h_,SUB,h,SEMI,IF,LPAREN,h,LT,0,RPAREN,RETURN,SEMI,IF,LPAREN,dh,LT,0,AMPAMP,h,LT,my_turn_radius,RPAREN,LBRACE,Vector3d,w,EQ,v,DOT,crossed,LPAREN,NEW,Vector3d,LPAREN,0,COMMA,0,COMMA,1,RPAREN,RPAREN,DOT,scaleBy,LPAREN,ds,<MASK>,my_turn_radius,RPAREN,SEMI,Vector3d,p__,EQ,p_,DOT,plus,LPAREN,w,RPAREN,SEMI,float,h__,EQ,p,DOT,z,SUB,app,DOT,landscape,DOT,getHeight,LPAREN,p__,DOT,x,COMMA,p__,DOT,y,RPAREN,SEMI,IF,LPAREN,h__,GTEQ,h_,RPAREN,LBRACE,makeTurn,LPAREN,1,RPAREN,SEMI,RBRACE,ELSE,LBRACE,makeTurn,LPAREN,SUB,1,RPAREN,SEMI,RBRACE,RBRACE,RBRACE","    void avoidHills() {
,        if (moveManager.joinedCircuit()) return;
,        if (app.landscape == null) return;
,
,        Vector3d p_ = p.plus(v);
,
,        float h = p.z - app.landscape.getHeight(p.x, p.y);
,        float h_ = p.z - app.landscape.getHeight(p_.x, p_.y);
,        float dh = h_ - h;
,
,        if (h < 0) return; <MASK>/too late !
,
,        if (dh < 0 && h < my_turn_radius) {
,            //float ONE_WING = (float) 0.2;
,            //float r = (h - ONE_WING) * (ds/dh) * (ds/dh);
,
,            // turn left or right ? see if moving right a bit gives a greater h than straight on
,            Vector3d w = v.crossed(new Vector3d(0, 0, 1)).scaleBy(ds / my_turn_radius);
,            Vector3d p__ = p_.plus(w);
,            float h__ = p.z - app.landscape.getHeight(p__.x, p__.y);
,            if (h__ >= h_) {
,                makeTurn(1); //turn right
,            } else {
,                makeTurn(-1); //turn left
,            }
,        }
,    }
"
0cadc92e-3d00-4c9b-b4a2-174a03a56a77,20816b42-8d1e-49dc-b5ac-22c1f3395abd,PLUS,"MONKEYS_AT,Override,PUBLIC,double,eval,LPAREN,Map,LT,String,COMMA,Double,GT,vars,RPAREN,LBRACE,RETURN,left,DOT,eval,LPAREN,vars,RPAREN,<MASK>,right,DOT,eval,LPAREN,vars,RPAREN,SEMI,RBRACE","	@Override
,	public double eval(Map<String, Double> vars) {
,		return left.eval(vars) <MASK> right.eval(vars);
,	}
"
aed9046f-504a-49f9-b9ef-f36cca22ba93,a1158ea1-cabb-474a-9a29-9302b4d5edf8,SLASH,"PUBLIC,double,getZaliczkaNaPod,LPAREN,RPAREN,LBRACE,RETURN,LPAREN,getPodstawaOpodatkowana0,LPAREN,RPAREN,STAR,18,RPAREN,<MASK>,100,SEMI,RBRACE","	public double getZaliczkaNaPod() {
,		return (getPodstawaOpodatkowana0()*18) <MASK> 100;
,	}
"
43299084-fe66-4b9a-96f4-74cc1dc78e11,0b881414-2f3a-4655-a2a5-fb5e825f218b,SLASH,"PUBLIC,void,testGet,LPAREN,RPAREN,THROWS,Exception,LBRACE,init,LPAREN,RPAREN,SEMI,long,sum,EQ,0,SEMI,Jpacker,jdbc,EQ,JpackerUtils,DOT,getJpacker,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,10,SEMI,i,PLUSPLUS,RPAREN,LBRACE,Jpacker,jdbc2,EQ,JpackerUtils,DOT,getJpacker,LPAREN,RPAREN,SEMI,long,start,EQ,System,DOT,currentTimeMillis,LPAREN,RPAREN,SEMI,TestModel,test,EQ,jdbc2,DOT,get,LPAREN,TestModel,DOT,CLASS,COMMA,i,RPAREN,SEMI,long,end,EQ,System,DOT,currentTimeMillis,LPAREN,RPAREN,SEMI,sum,PLUSEQ,end,SUB,start,SEMI,jdbc2,DOT,close,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,end,SUB,start,RPAREN,SEMI,RBRACE,Jpacker,jdbc3,EQ,JpackerUtils,DOT,getJpacker,LPAREN,RPAREN,SEMI,long,start,EQ,System,DOT,currentTimeMillis,LPAREN,RPAREN,SEMI,TestModel,test,EQ,jdbc3,DOT,get,LPAREN,TestModel,DOT,CLASS,COMMA,100,RPAREN,SEMI,long,end,EQ,System,DOT,currentTimeMillis,LPAREN,RPAREN,SEMI,sum,PLUSEQ,end,SUB,start,SEMI,Jpacker,jdbc4,EQ,JpackerUtils,DOT,getJpacker,LPAREN,RPAREN,SEMI,long,start2,EQ,System,DOT,currentTimeMillis,LPAREN,RPAREN,SEMI,TestModel,test2,EQ,jdbc4,DOT,get,LPAREN,TestModel,DOT,CLASS,COMMA,101,RPAREN,SEMI,long,end2,EQ,System,DOT,currentTimeMillis,LPAREN,RPAREN,SEMI,jdbc4,DOT,close,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,end2,SUB,start2,RPAREN,SEMI,jdbc3,DOT,close,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,end,SUB,start,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,sum,PLUS,""   "",PLUS,LPAREN,sum,<MASK>,2000,RPAREN,RPAREN,SEMI,Jpacker,jdbc5,EQ,JpackerUtils,DOT,getJpacker,LPAREN,RPAREN,SEMI,long,start3,EQ,System,DOT,currentTimeMillis,LPAREN,RPAREN,SEMI,TestModel,test3,EQ,jdbc5,DOT,get,LPAREN,TestModel,DOT,CLASS,COMMA,100,RPAREN,SEMI,long,end3,EQ,System,DOT,currentTimeMillis,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,end3,SUB,start3,RPAREN,SEMI,jdbc5,DOT,close,LPAREN,RPAREN,SEMI,jdbc,DOT,close,LPAREN,RPAREN,SEMI,RBRACE","	public void testGet() throws Exception{
,		init();
,		
,		
,		long sum = 0;
,		Jpacker jdbc = JpackerUtils.getJpacker();
,		
,		for(int i=0;i<10;i++){
,			Jpacker jdbc2 = JpackerUtils.getJpacker();
,			
,			long start = System.currentTimeMillis();
,			TestModel test = jdbc2.get(TestModel.class, i);
,			long end = System.currentTimeMillis();
,			
,			sum += end-start;
,			jdbc2.close();
,			System.out.println(end-start);
,			
,			
,		}
,<MASK>/		System.out.println(test);
,		
,		Jpacker jdbc3 = JpackerUtils.getJpacker();
,		long start = System.currentTimeMillis();
,		TestModel test = jdbc3.get(TestModel.class, 100);
,		long end = System.currentTimeMillis();
,		
,		sum += end-start;
,		
,			Jpacker jdbc4 = JpackerUtils.getJpacker();
,			
,			long start2 = System.currentTimeMillis();
,			TestModel test2 = jdbc4.get(TestModel.class, 101);
,			long end2 = System.currentTimeMillis();
,			
,			jdbc4.close();
,			System.out.println(end2-start2);
,			
,		jdbc3.close();
,		System.out.println(end-start);
,		
,		System.out.println(sum +""   ""+(sum/2000));
,		
,		
,		
,			Jpacker jdbc5 = JpackerUtils.getJpacker();
,			
,			long start3 = System.currentTimeMillis();
,			TestModel test3 = jdbc5.get(TestModel.class, 100);
,			long end3 = System.currentTimeMillis();
,			System.out.println(end3-start3);
,			jdbc5.close();
,		
,		jdbc.close();
,//		System.out.println(recs);
,//		
,//		assertTrue(recs.size() > 0);
,	
,	}
"
ea91ca9d-c4a2-44a2-9a1f-e35ca896736e,19afeb9e-a135-4303-a353-c460c33f43c2,LTEQ,"PRIVATE,void,pop,LPAREN,char,c,RPAREN,THROWS,JSONException,LBRACE,IF,LPAREN,this,DOT,top,<MASK>,0,RPAREN,LBRACE,THROW,NEW,JSONException,LPAREN,""Nesting error."",RPAREN,SEMI,RBRACE,char,m,EQ,this,DOT,stack,LBRACKET,this,DOT,top,SUB,1,RBRACKET,EQEQ,null,QUES,a,COLON,k,SEMI,IF,LPAREN,m,BANGEQ,c,RPAREN,LBRACE,THROW,NEW,JSONException,LPAREN,""Nesting error."",RPAREN,SEMI,RBRACE,this,DOT,top,SUBEQ,1,SEMI,this,DOT,mode,EQ,this,DOT,top,EQEQ,0,QUES,d,COLON,this,DOT,stack,LBRACKET,this,DOT,top,SUB,1,RBRACKET,EQEQ,null,QUES,a,COLON,k,SEMI,RBRACE","    private void pop(char c) throws JSONException {
,        if (this.top <MASK> 0) {
,            throw new JSONException(""Nesting error."");
,        }
,        char m = this.stack[this.top - 1] == null ? 'a' : 'k';
,        if (m != c) {
,            throw new JSONException(""Nesting error."");
,        }
,        this.top -= 1;
,        this.mode = this.top == 0
,            ? 'd'
,            : this.stack[this.top - 1] == null
,            ? 'a'
,            : 'k';
,    }
"
31f7469d-93db-41f2-893b-7e4f5668accc,d3208299-16d5-4bbe-aa39-745402602a9d,SUB,"MONKEYS_AT,Override,PUBLIC,void,update,LPAREN,Observable,o,COMMA,Object,arg,RPAREN,LBRACE,IF,LPAREN,arg,DOT,equals,LPAREN,ObservableList,DOT,Event,DOT,ADD,RPAREN,RPAREN,LBRACE,List,LT,String,GT,l,EQ,LPAREN,List,RPAREN,o,SEMI,shift,LPAREN,l,DOT,get,LPAREN,l,DOT,size,LPAREN,RPAREN,<MASK>,1,RPAREN,RPAREN,SEMI,RBRACE,RBRACE","    @Override
,    public void update(Observable o, Object arg) {
,        if (arg.equals(ObservableList.Event.ADD)) {
,            List<String> l = (List) o;
,            shift(l.get(l.size() <MASK> 1));
,        }
,    }
"
85e73bf4-198d-4e97-95ec-bfad228c11ea,99b7b937-2955-44f5-a58b-220bb7b758ea,STAR,"MONKEYS_AT,Test,PUBLIC,void,testSingleIntFieldIndex,LPAREN,RPAREN,THROWS,Exception,LBRACE,FINAL,String,INDEX_NAME,EQ,""singleIntField"",SEMI,IndexManager,indexManager,EQ,NEW,IndexManager,LPAREN,TEST_UTIL,DOT,getConfiguration,LPAREN,RPAREN,RPAREN,SEMI,IndexDefinition,indexDef,EQ,NEW,IndexDefinition,LPAREN,INDEX_NAME,COMMA,INDEX_NAME,RPAREN,SEMI,indexDef,DOT,addIntegerField,LPAREN,""field1"",RPAREN,SEMI,indexManager,DOT,createIndex,LPAREN,indexDef,RPAREN,SEMI,Index,index,EQ,indexManager,DOT,getIndex,LPAREN,INDEX_NAME,COMMA,INDEX_NAME,RPAREN,SEMI,FINAL,int,COUNT,EQ,1000,SEMI,FINAL,int,MAXVALUE,EQ,Integer,DOT,MAX_VALUE,SEMI,int,LBRACKET,RBRACKET,values,EQ,NEW,int,LBRACKET,COUNT,RBRACKET,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,COUNT,SEMI,i,PLUSPLUS,RPAREN,LBRACE,values,LBRACKET,i,RBRACKET,EQ,LPAREN,int,RPAREN,LPAREN,Math,DOT,random,LPAREN,RPAREN,<MASK>,MAXVALUE,RPAREN,SEMI,RBRACE,FOR,LPAREN,int,value,COLON,values,RPAREN,LBRACE,IndexEntry,entry,EQ,NEW,IndexEntry,LPAREN,RPAREN,SEMI,entry,DOT,addField,LPAREN,""field1"",COMMA,value,RPAREN,SEMI,index,DOT,addEntry,LPAREN,entry,COMMA,Bytes,DOT,toBytes,LPAREN,""key"",PLUS,value,RPAREN,RPAREN,SEMI,RBRACE,Query,query,EQ,NEW,Query,LPAREN,RPAREN,SEMI,query,DOT,setRangeCondition,LPAREN,""field1"",COMMA,NEW,Integer,LPAREN,0,RPAREN,COMMA,NEW,Integer,LPAREN,MAXVALUE,RPAREN,RPAREN,SEMI,QueryResult,result,EQ,index,DOT,performQuery,LPAREN,query,RPAREN,SEMI,Arrays,DOT,sort,LPAREN,values,RPAREN,SEMI,FOR,LPAREN,int,value,COLON,values,RPAREN,LBRACE,assertEquals,LPAREN,""key"",PLUS,value,COMMA,Bytes,DOT,toString,LPAREN,result,DOT,next,LPAREN,RPAREN,RPAREN,RPAREN,SEMI,RBRACE,assertNull,LPAREN,result,DOT,next,LPAREN,RPAREN,RPAREN,SEMI,RBRACE","    @Test
,    public void testSingleIntFieldIndex() throws Exception {
,        final String INDEX_NAME = ""singleIntField"";
,        IndexManager indexManager = new IndexManager(TEST_UTIL.getConfiguration());
,
,        IndexDefinition indexDef = new IndexDefinition(INDEX_NAME, INDEX_NAME);
,        indexDef.addIntegerField(""field1"");
,        indexManager.createIndex(indexDef);
,        Index index = indexManager.getIndex(INDEX_NAME, INDEX_NAME);
,
,        final int COUNT = 1000;
,        final int MAXVALUE = Integer.MAX_VALUE;
,        int[] values = new int[COUNT];
,
,        for (int i = 0; i < COUNT; i++) {
,            values[i] = (int)(Math.random() <MASK> MAXVALUE);
,        }
,
,        for (int value : values) {
,            IndexEntry entry = new IndexEntry();
,            entry.addField(""field1"", value);
,            index.addEntry(entry, Bytes.toBytes(""key"" + value));
,        }
,
,        Query query = new Query();
,        query.setRangeCondition(""field1"", new Integer(0), new Integer(MAXVALUE));
,        QueryResult result = index.performQuery(query);
,
,        Arrays.sort(values);
,
,        for (int value : values) {
,            assertEquals(""key"" + value, Bytes.toString(result.next()));
,        }
,
,        assertNull(result.next());
,    }
"
96ad2b1f-2213-467d-9114-99ed9ca40d4d,f90d5e2b-89ca-42f0-9054-5a65e027b254,PERCENT,"PUBLIC,STATIC,void,main,LPAREN,String,args,LBRACKET,RBRACKET,RPAREN,THROWS,IOException,LBRACE,int,i,EQ,0,SEMI,File,file,EQ,NEW,File,LPAREN,""C:/Users/Amey/workspace/example3/newFile.txt"",RPAREN,SEMI,Scanner,sc,EQ,NEW,Scanner,LPAREN,System,DOT,in,RPAREN,SEMI,sc,DOT,nextLine,LPAREN,RPAREN,SEMI,BufferedOutputStream,out,EQ,NEW,BufferedOutputStream,LPAREN,NEW,FileOutputStream,LPAREN,file,RPAREN,RPAREN,SEMI,byte,LBRACKET,RBRACKET,byteArray,EQ,NEW,byte,LBRACKET,1024,RBRACKET,SEMI,WHILE,LPAREN,i,LT,100,RPAREN,LBRACE,out,DOT,write,LPAREN,LPAREN,i,PLUS,"""",RPAREN,DOT,getBytes,LPAREN,RPAREN,RPAREN,SEMI,IF,LPAREN,i,<MASK>,10,EQEQ,0,RPAREN,out,DOT,write,LPAREN,""\n"",DOT,getBytes,LPAREN,RPAREN,RPAREN,SEMI,i,PLUSPLUS,SEMI,RBRACE,out,DOT,close,LPAREN,RPAREN,SEMI,System,DOT,exit,LPAREN,0,RPAREN,SEMI,RBRACE","	public static void main(String args[]) throws IOException{
,		int i = 0;
,		
,		File file = new File(""C:/Users/Amey/workspace/example3/newFile.txt"");
,		// block this process
,		Scanner sc = new Scanner(System.in);
,		sc.nextLine();
,		BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file));
,		byte[] byteArray = new byte[1024];
,		while (i<100) {
,			
,			out.write((i + """").getBytes());
,			if(i<MASK>10==0)
,				out.write(""\n"".getBytes());
,			i++;
,		}
,
,		out.close();
,		System.exit(0);
,	}
"
1f47bbd6-87b5-4b44-b120-6b0f23f01251,0d36163b-b70b-46ff-aee9-43f637a0e32f,PERCENT,"PUBLIC,List,LT,Node,GT,findPath,LPAREN,Vector2i,start,COMMA,Vector2i,finish,RPAREN,LBRACE,List,LT,Node,GT,openList,EQ,NEW,ArrayList,LT,Node,GT,LPAREN,RPAREN,SEMI,List,LT,Node,GT,closedList,EQ,NEW,ArrayList,LT,Node,GT,LPAREN,RPAREN,SEMI,Node,current,EQ,NEW,Node,LPAREN,start,COMMA,null,COMMA,0,COMMA,start,DOT,getDistance,LPAREN,finish,RPAREN,RPAREN,SEMI,openList,DOT,add,LPAREN,current,RPAREN,SEMI,int,iterations,EQ,0,SEMI,WHILE,LPAREN,openList,DOT,size,LPAREN,RPAREN,GT,0,RPAREN,LBRACE,IF,LPAREN,iterations,GT,100,RPAREN,LBRACE,BREAK,SEMI,RBRACE,iterations,PLUSPLUS,SEMI,Collections,DOT,sort,LPAREN,openList,COMMA,nodeSort,RPAREN,SEMI,current,EQ,openList,DOT,get,LPAREN,0,RPAREN,SEMI,openList,DOT,remove,LPAREN,current,RPAREN,SEMI,IF,LPAREN,current,DOT,tile,DOT,equals,LPAREN,finish,RPAREN,RPAREN,LBRACE,List,LT,Node,GT,path,EQ,NEW,ArrayList,LT,Node,GT,LPAREN,RPAREN,SEMI,WHILE,LPAREN,current,DOT,parent,BANGEQ,null,RPAREN,LBRACE,path,DOT,add,LPAREN,current,RPAREN,SEMI,current,EQ,current,DOT,parent,SEMI,RBRACE,openList,DOT,clear,LPAREN,RPAREN,SEMI,closedList,DOT,clear,LPAREN,RPAREN,SEMI,RETURN,path,SEMI,RBRACE,ELSE,LBRACE,closedList,DOT,add,LPAREN,current,RPAREN,SEMI,int,cX,EQ,current,DOT,tile,DOT,getX,LPAREN,RPAREN,SEMI,int,cY,EQ,current,DOT,tile,DOT,getY,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,9,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,i,EQEQ,4,RPAREN,LBRACE,CONTINUE,SEMI,RBRACE,int,nbX,EQ,LPAREN,i,<MASK>,3,RPAREN,SUB,1,SEMI,int,nbY,EQ,LPAREN,i,SLASH,3,RPAREN,SUB,1,SEMI,IF,LPAREN,getTile,LPAREN,cX,PLUS,nbX,COMMA,cY,PLUS,nbY,RPAREN,EQEQ,null,BARBAR,getTile,LPAREN,cX,PLUS,nbX,COMMA,cY,PLUS,nbY,RPAREN,DOT,isSolid,LPAREN,RPAREN,RPAREN,LBRACE,CONTINUE,SEMI,RBRACE,Vector2i,nbV,EQ,NEW,Vector2i,LPAREN,cX,PLUS,nbX,COMMA,cY,PLUS,nbY,RPAREN,SEMI,IF,LPAREN,getNodeFromList,LPAREN,nbV,COMMA,closedList,RPAREN,BANGEQ,null,RPAREN,LBRACE,CONTINUE,SEMI,RBRACE,double,gCost,EQ,current,DOT,gCost,PLUS,current,DOT,tile,DOT,getDistance,LPAREN,nbV,RPAREN,SEMI,Node,nbN,EQ,getNodeFromList,LPAREN,nbV,COMMA,openList,RPAREN,SEMI,IF,LPAREN,nbN,EQEQ,null,BARBAR,nbN,DOT,gCost,GT,gCost,RPAREN,LBRACE,double,hCost,EQ,nbV,DOT,getDistance,LPAREN,finish,RPAREN,SEMI,IF,LPAREN,nbN,BANGEQ,null,RPAREN,LBRACE,nbN,DOT,parent,EQ,current,SEMI,nbN,DOT,gCost,EQ,gCost,SEMI,nbN,DOT,hCost,EQ,hCost,SEMI,nbN,DOT,fCost,EQ,gCost,PLUS,hCost,SEMI,RBRACE,ELSE,LBRACE,nbN,EQ,NEW,Node,LPAREN,nbV,COMMA,current,COMMA,gCost,COMMA,hCost,RPAREN,SEMI,openList,DOT,add,LPAREN,nbN,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,RBRACE,RBRACE,closedList,DOT,clear,LPAREN,RPAREN,SEMI,RETURN,null,SEMI,RBRACE","    public List<Node> findPath(Vector2i start, Vector2i finish) {
,
,	List<Node> openList = new ArrayList<Node>();
,	List<Node> closedList = new ArrayList<Node>();
,
,	Node current = new Node(start, null, 0, start.getDistance(finish));
,	openList.add(current);
,
,	int iterations = 0;
,
,	while (openList.size() > 0) {
,	    if (iterations > 100) {
,		break;
,	    }
,
,	    iterations++;
,	    Collections.sort(openList, nodeSort);
,	    current = openList.get(0);
,	    openList.remove(current);
,	    if (current.tile.equals(finish)) {
,		List<Node> path = new ArrayList<Node>();
,		while (current.parent != null) {
,		    path.add(current);
,		    current = current.parent;
,		}
,		openList.clear();
,		closedList.clear();
,		return path;
,	    } else {
,		closedList.add(current);
,		int cX = current.tile.getX();
,		int cY = current.tile.getY();
,		for (int i = 0; i < 9; i++) {
,		    if (i == 4) {
,			continue;
,		    }
,		    int nbX = (i <MASK> 3) - 1;
,		    int nbY = (i / 3) - 1;
,
,		    if (getTile(cX + nbX, cY + nbY) == null || getTile(cX + nbX, cY + nbY).isSolid()) {
,			continue;
,		    }
,		    Vector2i nbV = new Vector2i(cX + nbX, cY + nbY);
,
,		    if (getNodeFromList(nbV, closedList) != null) {
,			continue;
,		    }
,
,		    double gCost = current.gCost + current.tile.getDistance(nbV);
,
,		    Node nbN = getNodeFromList(nbV, openList);
,		    if (nbN == null || nbN.gCost > gCost) {
,			double hCost = nbV.getDistance(finish);
,			if (nbN != null) {
,			    nbN.parent = current;
,			    nbN.gCost = gCost;
,			    nbN.hCost = hCost;
,			    nbN.fCost = gCost + hCost;
,			} else {
,			    nbN = new Node(nbV, current, gCost, hCost);
,			    openList.add(nbN);
,			}
,		    }
,		}
,	    }
,
,	}
,	closedList.clear();
,	return null;
,    }
"
eac7db55-f1c9-4e74-95f6-9c62d4d48b4c,5a4d4963-605f-490c-8a24-d958a6d8fe36,PLUS,"PUBLIC,STATIC,String,convertStreamToString,LPAREN,InputStream,is,RPAREN,LBRACE,BufferedReader,reader,EQ,NEW,BufferedReader,LPAREN,NEW,InputStreamReader,LPAREN,is,RPAREN,RPAREN,SEMI,StringBuilder,sb,EQ,NEW,StringBuilder,LPAREN,RPAREN,SEMI,String,line,EQ,null,SEMI,TRY,LBRACE,WHILE,LPAREN,LPAREN,line,EQ,reader,DOT,readLine,LPAREN,RPAREN,RPAREN,BANGEQ,null,RPAREN,LBRACE,sb,DOT,append,LPAREN,line,<MASK>,""\n"",RPAREN,SEMI,RBRACE,RBRACE,CATCH,LPAREN,IOException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,FINALLY,LBRACE,TRY,LBRACE,is,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,IOException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,RETURN,sb,DOT,toString,LPAREN,RPAREN,SEMI,RBRACE","	public static String convertStreamToString(InputStream is) {
,		BufferedReader reader = new BufferedReader(new InputStreamReader(is));
,		StringBuilder sb = new StringBuilder();
,		String line = null;
,		try {
,			while ((line = reader.readLine()) != null) {
,				sb.append(line <MASK> ""\n"");
,			}
,		} catch (IOException e) {
,			e.printStackTrace();
,		} finally {
,			try {
,				is.close();
,			} catch (IOException e) {
,				e.printStackTrace();
,			}
,		}
,		return sb.toString();
,	}
"
2170437a-9f53-47a2-b3cb-257eca2eb4ab,fca13be9-4d87-493b-b1b5-b0f6e2906c43,EQEQ,"PUBLIC,STATIC,DataAccess,getDataAccess,LPAREN,RPAREN,LBRACE,IF,LPAREN,dataAccessService,<MASK>,null,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""Connection to data access has not been established."",RPAREN,SEMI,System,DOT,exit,LPAREN,1,RPAREN,SEMI,RBRACE,RETURN,dataAccessService,SEMI,RBRACE","	public static DataAccess getDataAccess()
,	{
,		if (dataAccessService <MASK> null)
,		{
,			System.out
,					.println(""Connection to data access has not been established."");
,			System.exit(1);
,		}
,		return dataAccessService;
,	}
"
0a4ca423-774e-4648-9a00-98a0346992be,f7cc34a6-7621-4825-9ac2-809837f73831,EQEQ,"PUBLIC,FINAL,File,copy,LPAREN,FINAL,Directory,destDirectory,COMMA,FINAL,String,newFileName,RPAREN,THROWS,FileNotOnDiskException,COMMA,DiskReadException,LBRACE,checkExists,LPAREN,RPAREN,SEMI,String,destFileName,EQ,"""",SEMI,IF,LPAREN,destDirectory,BANGEQ,null,RPAREN,destFileName,PLUSEQ,destDirectory,DOT,toString,LPAREN,RPAREN,SEMI,ELSE,destFileName,PLUSEQ,this,DOT,getParent,LPAREN,RPAREN,SEMI,IF,LPAREN,newFileName,BANGEQ,null,RPAREN,destFileName,PLUSEQ,separatorChar,PLUS,newFileName,DOT,toString,LPAREN,RPAREN,SEMI,ELSE,destFileName,PLUSEQ,separatorChar,PLUS,this,DOT,getName,LPAREN,RPAREN,SEMI,TRY,LBRACE,FINAL,File,destFile,EQ,NEW,File,LPAREN,destFileName,RPAREN,SEMI,IF,LPAREN,this,DOT,getCanonicalPath,LPAREN,RPAREN,DOT,equals,LPAREN,destFile,DOT,getCanonicalPath,LPAREN,RPAREN,RPAREN,RPAREN,RETURN,this,SEMI,IF,LPAREN,destFile,DOT,canWrite,LPAREN,RPAREN,<MASK>,false,RPAREN,destFile,DOT,clean,LPAREN,RPAREN,SEMI,FileInputStream,fis,EQ,null,SEMI,FileOutputStream,fos,EQ,null,SEMI,FileChannel,input,EQ,null,SEMI,FileChannel,output,EQ,null,SEMI,TRY,LBRACE,fis,EQ,NEW,FileInputStream,LPAREN,this,RPAREN,SEMI,fos,EQ,NEW,FileOutputStream,LPAREN,destFile,RPAREN,SEMI,input,EQ,fis,DOT,getChannel,LPAREN,RPAREN,SEMI,output,EQ,fos,DOT,getChannel,LPAREN,RPAREN,SEMI,long,size,EQ,input,DOT,size,LPAREN,RPAREN,SEMI,long,pos,EQ,0,SEMI,long,count,EQ,0,SEMI,WHILE,LPAREN,pos,LT,size,RPAREN,LBRACE,count,EQ,size,SUB,pos,GT,FILE_COPY_BUFFER_SIZE,QUES,FILE_COPY_BUFFER_SIZE,COLON,size,SUB,pos,SEMI,pos,PLUSEQ,output,DOT,transferFrom,LPAREN,input,COMMA,pos,COMMA,count,RPAREN,SEMI,RBRACE,RBRACE,FINALLY,LBRACE,this,DOT,closeStream,LPAREN,output,RPAREN,SEMI,this,DOT,closeStream,LPAREN,fos,RPAREN,SEMI,this,DOT,closeStream,LPAREN,input,RPAREN,SEMI,this,DOT,closeStream,LPAREN,fis,RPAREN,SEMI,RBRACE,IF,LPAREN,this,DOT,length,LPAREN,RPAREN,BANGEQ,destFile,DOT,length,LPAREN,RPAREN,RPAREN,THROW,NEW,DiskReadException,LPAREN,""Failed to copy full contents ["",PLUS,this,DOT,toString,LPAREN,RPAREN,PLUS,""]=>["",PLUS,destFile,DOT,toString,LPAREN,RPAREN,PLUS,""'"",RPAREN,SEMI,destFile,DOT,setLastModified,LPAREN,this,DOT,lastModified,LPAREN,RPAREN,RPAREN,SEMI,RETURN,destFile,SEMI,RBRACE,CATCH,LPAREN,FINAL,IOException,e,RPAREN,LBRACE,THROW,NEW,DiskReadException,LPAREN,""File Copy ["",PLUS,this,DOT,toString,LPAREN,RPAREN,PLUS,""]=>["",PLUS,destFileName,DOT,toString,LPAREN,RPAREN,PLUS,""]"",COMMA,e,RPAREN,SEMI,RBRACE,RBRACE","	public final File copy(final Directory destDirectory, final String newFileName) throws FileNotOnDiskException, DiskReadException {
,		checkExists();
,
,		String destFileName = """";
,
,		if (destDirectory != null) destFileName += destDirectory.toString();
,		else destFileName += this.getParent();
,
,		if (newFileName != null) destFileName += separatorChar + newFileName.toString();
,		else destFileName += separatorChar + this.getName();
,
,		try {
,			final File destFile = new File(destFileName);
,			//FileUtils.copyFile(this, destFile);
,
,			///////
,			if (this.getCanonicalPath().equals(destFile.getCanonicalPath())) return this;
,			if (destFile.canWrite() <MASK> false) destFile.clean();
,
,			FileInputStream fis = null;
,			FileOutputStream fos = null;
,			FileChannel input = null;
,			FileChannel output = null;
,			try {
,				fis = new FileInputStream(this);
,				fos = new FileOutputStream(destFile);
,				input = fis.getChannel();
,				output = fos.getChannel();
,				long size = input.size();
,				long pos = 0;
,				long count = 0;
,				while (pos < size) {
,					count = size - pos > FILE_COPY_BUFFER_SIZE ? FILE_COPY_BUFFER_SIZE : size - pos;
,					pos += output.transferFrom(input, pos, count);
,				}
,			} finally {
,				this.closeStream(output);
,				this.closeStream(fos);
,				this.closeStream(input);
,				this.closeStream(fis);
,			}
,
,			if (this.length() != destFile.length())
,				throw new DiskReadException(""Failed to copy full contents ["" + this.toString() + ""]=>["" + destFile.toString() + ""'"");
,
,			destFile.setLastModified(this.lastModified());
,
,			////////
,
,			return destFile;
,		} catch (final IOException e) {
,			throw new DiskReadException(""File Copy ["" + this.toString() + ""]=>["" + destFileName.toString() + ""]"", e);
,		}
,	}
"
38ed5e2e-bfac-4cc9-94e0-5ee38dabb0ca,6b797f12-56d0-43c8-bbf7-336bf981f577,EQEQ,"PUBLIC,boolean,isSuperset,LPAREN,Collection,LT,QUES,GT,coll,RPAREN,LBRACE,IF,LPAREN,coll,<MASK>,this,RPAREN,RETURN,true,SEMI,ELSE,IF,LPAREN,size,LPAREN,RPAREN,LT,coll,DOT,size,LPAREN,RPAREN,RPAREN,RETURN,false,SEMI,ELSE,IF,LPAREN,coll,INSTANCEOF,FHashSet,RPAREN,LBRACE,FHashSet,LT,Object,GT,fhs,EQ,LPAREN,FHashSet,LT,Object,GT,RPAREN,coll,SEMI,RETURN,isSubset,LPAREN,fhs,DOT,tree,COMMA,tree,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,coll,INSTANCEOF,FLinkedHashSet,RPAREN,LBRACE,FLinkedHashSet,LT,Object,GT,flhs,EQ,LPAREN,FLinkedHashSet,LT,Object,GT,RPAREN,coll,SEMI,RETURN,isSubset,LPAREN,flhs,DOT,set_tree,COMMA,tree,RPAREN,SEMI,RBRACE,ELSE,LBRACE,FOR,LPAREN,Object,elt,COLON,coll,RPAREN,IF,LPAREN,BANG,contains,LPAREN,tree,COMMA,elt,COMMA,hashCode,LPAREN,elt,RPAREN,RPAREN,RPAREN,RETURN,false,SEMI,RETURN,true,SEMI,RBRACE,RBRACE","    public boolean isSuperset(Collection<?> coll) {
,	if (coll <MASK> this) return true;
,	else if (size() < coll.size()) return false;
,	else if (coll instanceof FHashSet) {
,	    FHashSet<Object> fhs = (FHashSet<Object>)coll;
,	    return isSubset(fhs.tree, tree);
,	} else if (coll instanceof FLinkedHashSet) {
,	    FLinkedHashSet<Object> flhs = (FLinkedHashSet<Object>)coll;
,	    return isSubset(flhs.set_tree, tree);
,	} else {
,	    for (Object elt : coll)
,		if (!contains(tree, elt, hashCode(elt))) return false;
,	    return true;
,	}
,    }
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,2ea31359-0e3f-41e0-adfb-cc490524d17d,LT,"PUBLIC,void,drawObjects,LPAREN,BufferedImage,canvas,COMMA,boolean,fill,RPAREN,LBRACE,BufferedImage,image,EQ,NEW,BufferedImage,LPAREN,_width,COMMA,_height,COMMA,BufferedImage,DOT,TYPE_INT_RGB,RPAREN,SEMI,Graphics2D,g,EQ,image,DOT,createGraphics,LPAREN,RPAREN,SEMI,g,DOT,drawImage,LPAREN,VisionUtils,DOT,convert2grey,LPAREN,canvas,RPAREN,COMMA,0,COMMA,0,COMMA,null,RPAREN,SEMI,FOR,LPAREN,int,x,EQ,0,SEMI,x,<MASK>,_width,SEMI,x,PLUSPLUS,RPAREN,LBRACE,image,DOT,setRGB,LPAREN,x,COMMA,_ground,COMMA,ff0000,RPAREN,SEMI,RBRACE,IF,LPAREN,fill,RPAREN,LBRACE,FOR,LPAREN,ConnectedComponent,d,COLON,_draw,RPAREN,d,DOT,draw,LPAREN,image,COMMA,false,COMMA,false,RPAREN,SEMI,RBRACE,FOR,LPAREN,Body,b,COLON,_drawShape,RPAREN,LBRACE,IF,LPAREN,b,BANGEQ,null,RPAREN,b,DOT,draw,LPAREN,g,COMMA,false,COMMA,Color,DOT,RED,RPAREN,SEMI,RBRACE,canvas,DOT,createGraphics,LPAREN,RPAREN,DOT,drawImage,LPAREN,image,COMMA,0,COMMA,0,COMMA,null,RPAREN,SEMI,RBRACE","    public void drawObjects(BufferedImage canvas, boolean fill)
,    {   
,        BufferedImage image = new BufferedImage(_width, _height, BufferedImage.TYPE_INT_RGB);
,        Graphics2D g = image.createGraphics();
,        
,        g.drawImage(VisionUtils.convert2grey(canvas), 0, 0, null);    
,        
,        // draw ground level
,        for (int x = 0; x <MASK> _width; x++)
,        {
,            image.setRGB(x, _ground, 0xff0000);
,        }
,        
,        if (fill)
,        {
,            //draw connected components    
,            for (ConnectedComponent d : _draw)
,                d.draw(image, false, false);
,        }
,        //System.out.println("" draw shape "" + _gameObjects.size());
,        for (Body b : _drawShape)
,        {
,        	//System.out.println("" draw shape"");
,        	if (b != null)
,        		b.draw(g, false, Color.RED);
,        }  
,        canvas.createGraphics().drawImage(image, 0, 0, null);
,    }
"
5883a93b-9479-4dd3-81f5-15604dababbe,d3a70d5b-de52-4805-a65a-e8542fc1a029,SLASH,"MONKEYS_AT,Override,PUBLIC,NumberInteger,div,LPAREN,NumberInteger,b,RPAREN,THROWS,AbstractException,LBRACE,IF,LPAREN,b,DOT,val,EQEQ,0,RPAREN,THROW,NEW,DivisionByZeroException,LPAREN,""division by zero"",RPAREN,SEMI,RETURN,NEW,NumberInteger,LPAREN,val,<MASK>,b,DOT,val,RPAREN,SEMI,RBRACE","    @Override
,    public NumberInteger div(NumberInteger b) throws AbstractException {
,        if (b.val == 0)
,            throw new DivisionByZeroException(""division by zero"");
,
,        return new NumberInteger(val <MASK> b.val);
,    }
"
eac7db55-f1c9-4e74-95f6-9c62d4d48b4c,17403f42-3ca0-4037-b667-3e0ab94c3ae0,PLUS,"void,button_load_clicked,LPAREN,RPAREN,LBRACE,FileDialog,dialog,EQ,NEW,FileDialog,LPAREN,NEW,Frame,LPAREN,RPAREN,COMMA,""Load"",COMMA,FileDialog,DOT,LOAD,RPAREN,SEMI,dialog,DOT,setVisible,LPAREN,true,RPAREN,SEMI,String,filename,EQ,dialog,DOT,getDirectory,LPAREN,RPAREN,<MASK>,dialog,DOT,getFile,LPAREN,RPAREN,SEMI,IF,LPAREN,filename,EQEQ,null,RPAREN,RETURN,SEMI,clear_all,LPAREN,RPAREN,SEMI,TRY,LBRACE,BufferedReader,fp,EQ,NEW,BufferedReader,LPAREN,NEW,FileReader,LPAREN,filename,RPAREN,RPAREN,SEMI,String,line,SEMI,WHILE,LPAREN,LPAREN,line,EQ,fp,DOT,readLine,LPAREN,RPAREN,RPAREN,BANGEQ,null,RPAREN,LBRACE,StringTokenizer,st,EQ,NEW,StringTokenizer,LPAREN,line,COMMA,"" \t\n\r\f:"",RPAREN,SEMI,IF,LPAREN,st,DOT,countTokens,LPAREN,RPAREN,EQEQ,5,RPAREN,LBRACE,byte,value,EQ,LPAREN,byte,RPAREN,atoi,LPAREN,st,DOT,nextToken,LPAREN,RPAREN,RPAREN,SEMI,st,DOT,nextToken,LPAREN,RPAREN,SEMI,double,x,EQ,atof,LPAREN,st,DOT,nextToken,LPAREN,RPAREN,RPAREN,SEMI,st,DOT,nextToken,LPAREN,RPAREN,SEMI,double,y,EQ,atof,LPAREN,st,DOT,nextToken,LPAREN,RPAREN,RPAREN,SEMI,point_list,DOT,addElement,LPAREN,NEW,point,LPAREN,x,COMMA,y,COMMA,value,RPAREN,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,st,DOT,countTokens,LPAREN,RPAREN,EQEQ,3,RPAREN,LBRACE,double,y,EQ,atof,LPAREN,st,DOT,nextToken,LPAREN,RPAREN,RPAREN,SEMI,st,DOT,nextToken,LPAREN,RPAREN,SEMI,double,x,EQ,atof,LPAREN,st,DOT,nextToken,LPAREN,RPAREN,RPAREN,SEMI,point_list,DOT,addElement,LPAREN,NEW,point,LPAREN,x,COMMA,y,COMMA,current_value,RPAREN,RPAREN,SEMI,RBRACE,ELSE,BREAK,SEMI,RBRACE,fp,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,IOException,e,RPAREN,LBRACE,System,DOT,err,DOT,print,LPAREN,e,RPAREN,SEMI,RBRACE,draw_all_points,LPAREN,RPAREN,SEMI,RBRACE","	void button_load_clicked()
,	{
,		FileDialog dialog = new FileDialog(new Frame(),""Load"",FileDialog.LOAD);
,		dialog.setVisible(true);
,		String filename = dialog.getDirectory() <MASK> dialog.getFile();
,		if (filename == null) return;
,		clear_all();
,		try {
,			BufferedReader fp = new BufferedReader(new FileReader(filename));
,			String line;
,			while((line = fp.readLine()) != null)
,			{
,				StringTokenizer st = new StringTokenizer(line,"" \t\n\r\f:"");
,				if(st.countTokens() == 5)
,				{
,					byte value = (byte)atoi(st.nextToken());
,					st.nextToken();
,					double x = atof(st.nextToken());
,					st.nextToken();
,					double y = atof(st.nextToken());
,					point_list.addElement(new point(x,y,value));
,				}
,				else if(st.countTokens() == 3)
,				{
,					double y = atof(st.nextToken());
,					st.nextToken();
,					double x = atof(st.nextToken());
,					point_list.addElement(new point(x,y,current_value));
,				}else
,					break;
,			}
,			fp.close();
,		} catch (IOException e) { System.err.print(e); }
,		draw_all_points();
,	}
"
38ed5e2e-bfac-4cc9-94e0-5ee38dabb0ca,0eae115e-7eb0-4874-b6a2-8fb30062a102,EQEQ,"PUBLIC,boolean,isEmpty,LPAREN,RPAREN,LBRACE,RETURN,tree,<MASK>,null,SEMI,RBRACE","    public boolean isEmpty() {
,	return tree <MASK> null;
,    }
"
e804bdf1-7a07-4e36-aee6-aba6a427cf38,c55f8897-3fd7-488b-8b42-214da5318d88,GTEQ,"PUBLIC,int,LBRACKET,RBRACKET,getArrayOfIncidentEdgeWeights,LPAREN,int,i,RPAREN,THROWS,IllegalArgumentException,LBRACE,IF,LPAREN,i,LT,0,BARBAR,i,<MASK>,numberOfVertices,RPAREN,LBRACE,String,errorMessage,EQ,""Allows vertex indizes are 0.."",PLUS,LPAREN,numberOfVertices,SUB,1,RPAREN,PLUS,""."",SEMI,THROW,NEW,IllegalArgumentException,LPAREN,errorMessage,RPAREN,SEMI,RBRACE,int,n,EQ,adjacencyList,LBRACKET,i,RBRACKET,DOT,size,LPAREN,RPAREN,SEMI,int,LBRACKET,RBRACKET,edgeWeights,EQ,NEW,int,LBRACKET,n,RBRACKET,SEMI,FOR,LPAREN,int,j,EQ,0,SEMI,j,LT,n,SEMI,j,PLUSPLUS,RPAREN,LBRACE,edgeWeights,LBRACKET,j,RBRACKET,EQ,1,SEMI,RBRACE,RETURN,edgeWeights,SEMI,RBRACE","	public int[] getArrayOfIncidentEdgeWeights(int i)
,			throws IllegalArgumentException {
,		// check the passed vertex index
,		if (i < 0 || i <MASK> numberOfVertices) {
,			String errorMessage =
,				""Allows vertex indizes are 0..""
,				+ (numberOfVertices - 1) + ""."";
,			
,			throw new IllegalArgumentException(errorMessage);
,		}
,		
,		// get the number of vertices adjacent to vertex i
,		int n = adjacencyList[i].size();
,		
,		// create new edge weight array and fill with 1s
,		int[] edgeWeights = new int[n];
,		
,		for (int j = 0; j < n; j++) {
,			edgeWeights[j] = 1;
,		}
,		
,		return edgeWeights;
,	}
"
e23a14ed-58fe-4876-ad96-b3838a2fcace,02e3be72-e214-4cab-8eb2-7a41e8431714,EQEQ,"STATIC,int,minPathLength,LPAREN,int,requiredLevel,COMMA,int,currentHeight,COMMA,int,currentWidth,COMMA,int,currentMinPath,COMMA,int,previousLevelMinPath,COMMA,int,currentPath,COMMA,int,LBRACKET,RBRACKET,LBRACKET,RBRACKET,triangle,RPAREN,LBRACE,IF,LPAREN,currentHeight,PLUS,currentWidth,<MASK>,requiredLevel,RPAREN,RETURN,Math,DOT,min,LPAREN,currentPath,COMMA,currentMinPath,RPAREN,SEMI,IF,LPAREN,currentPath,PLUS,previousLevelMinPath,GT,currentMinPath,RPAREN,RETURN,currentMinPath,SEMI,int,up,EQ,20000,STAR,SIZE,SEMI,int,right,EQ,20000,STAR,SIZE,SEMI,int,down,EQ,20000,STAR,SIZE,SEMI,int,left,EQ,20000,STAR,SIZE,SEMI,IF,LPAREN,currentHeight,GT,0,RPAREN,up,EQ,minPathLength,LPAREN,requiredLevel,COMMA,currentHeight,SUB,1,COMMA,currentWidth,COMMA,currentMinPath,COMMA,previousLevelMinPath,COMMA,currentPath,PLUS,triangle,LBRACKET,currentHeight,SUB,1,RBRACKET,LBRACKET,currentWidth,RBRACKET,COMMA,triangle,RPAREN,SEMI,IF,LPAREN,currentWidth,LT,triangle,LBRACKET,currentHeight,RBRACKET,DOT,length,SUB,1,RPAREN,right,EQ,minPathLength,LPAREN,requiredLevel,COMMA,currentHeight,COMMA,currentWidth,PLUS,1,COMMA,currentMinPath,COMMA,previousLevelMinPath,COMMA,currentPath,PLUS,triangle,LBRACKET,currentHeight,RBRACKET,LBRACKET,currentWidth,PLUS,1,RBRACKET,COMMA,triangle,RPAREN,SEMI,IF,LPAREN,currentHeight,LT,triangle,LBRACKET,currentWidth,RBRACKET,DOT,length,SUB,1,RPAREN,down,EQ,minPathLength,LPAREN,requiredLevel,COMMA,currentHeight,PLUS,1,COMMA,currentWidth,COMMA,currentMinPath,COMMA,previousLevelMinPath,COMMA,currentPath,PLUS,triangle,LBRACKET,currentHeight,PLUS,1,RBRACKET,LBRACKET,currentWidth,RBRACKET,COMMA,triangle,RPAREN,SEMI,IF,LPAREN,currentWidth,GT,0,RPAREN,left,EQ,minPathLength,LPAREN,requiredLevel,COMMA,currentHeight,COMMA,currentWidth,SUB,1,COMMA,currentMinPath,COMMA,previousLevelMinPath,COMMA,currentPath,PLUS,triangle,LBRACKET,currentHeight,RBRACKET,LBRACKET,currentWidth,SUB,1,RBRACKET,COMMA,triangle,RPAREN,SEMI,RETURN,Math,DOT,min,LPAREN,Math,DOT,min,LPAREN,Math,DOT,min,LPAREN,up,COMMA,right,RPAREN,COMMA,down,RPAREN,COMMA,left,RPAREN,SEMI,RBRACE","	static int minPathLength(int requiredLevel, int currentHeight, int currentWidth, int currentMinPath, int previousLevelMinPath, int currentPath, int[][] triangle)
,	{
,		if (currentHeight + currentWidth <MASK> requiredLevel)
,			return Math.min(currentPath, currentMinPath);
,		if (currentPath + previousLevelMinPath > currentMinPath)
,			return currentMinPath;
,		
,		int up = 20000*SIZE;
,		int right = 20000*SIZE;
,		int down = 20000*SIZE;
,		int left = 20000*SIZE;
,		
,		if (currentHeight > 0)
,			up = minPathLength(requiredLevel, currentHeight-1, currentWidth, currentMinPath, previousLevelMinPath, currentPath+triangle[currentHeight-1][currentWidth], triangle);
,		if (currentWidth < triangle[currentHeight].length-1)
,			right = minPathLength(requiredLevel, currentHeight, currentWidth+1, currentMinPath, previousLevelMinPath, currentPath+triangle[currentHeight][currentWidth+1], triangle);
,		if (currentHeight < triangle[currentWidth].length-1)
,			down = minPathLength(requiredLevel, currentHeight+1, currentWidth, currentMinPath, previousLevelMinPath, currentPath+triangle[currentHeight+1][currentWidth], triangle);
,		if (currentWidth > 0)
,			left = minPathLength(requiredLevel, currentHeight, currentWidth-1, currentMinPath, previousLevelMinPath, currentPath+triangle[currentHeight][currentWidth-1], triangle);
,		
,		return Math.min(Math.min(Math.min(up, right), down), left);
,	}
"
113c5414-6c55-466b-b879-a350ab6e0ca2,cb1dd717-0868-45a6-9f07-fa9f8ea0ef9b,EQ,"void,setEatMessage,LPAREN,String,eatMessage,RPAREN,LBRACE,this,DOT,eatMessage,<MASK>,eatMessage,SEMI,RBRACE","	void setEatMessage(String eatMessage) {
,		this.eatMessage <MASK> eatMessage;
,	}
"
113c5414-6c55-466b-b879-a350ab6e0ca2,6d338112-fa4c-4cb6-8056-c88834600f68,EQ,"PUBLIC,void,setName,LPAREN,String,name,RPAREN,LBRACE,this,DOT,name,<MASK>,name,SEMI,RBRACE","	public void setName(String name) {
,		this.name <MASK> name;
,	}
"
73f99f48-ab14-4590-9781-8e43c05bc3ab,c2568efc-15cd-4bed-8c5f-d5fc321ea747,LTEQ,"MONKEYS_AT,Override,PUBLIC,FullResult,stats,LPAREN,int,slot,COMMA,Summarizer,out,COMMA,FullResult,reference,COMMA,HackFilter,ELLIPSIS,filters,RPAREN,THROWS,Exception,LBRACE,Map,LT,String,COMMA,Integer,GT,types,EQ,NEW,HashMap,LT,GT,LPAREN,RPAREN,SEMI,Map,LT,String,COMMA,Integer,GT,basics,EQ,NEW,HashMap,LT,GT,LPAREN,RPAREN,SEMI,Map,LT,Integer,COMMA,Integer,GT,nkeys,EQ,NEW,HashMap,LT,GT,LPAREN,RPAREN,SEMI,Map,LT,Integer,COMMA,Integer,GT,levels,EQ,NEW,HashMap,LT,GT,LPAREN,RPAREN,SEMI,Map,LT,String,COMMA,Integer,GT,levelsPM,EQ,NEW,HashMap,LT,GT,LPAREN,RPAREN,SEMI,Map,LT,String,COMMA,Integer,GT,levelsENE,EQ,NEW,HashMap,LT,GT,LPAREN,RPAREN,SEMI,Map,LT,Integer,COMMA,Integer,GT,levelTotals,EQ,NEW,HashMap,LT,GT,LPAREN,RPAREN,SEMI,Map,LT,Integer,COMMA,Integer,GT,counts,EQ,NEW,HashMap,LT,GT,LPAREN,RPAREN,SEMI,Map,LT,Integer,COMMA,Integer,GT,noOfItems,EQ,NEW,HashMap,LT,GT,LPAREN,RPAREN,SEMI,Map,LT,Integer,COMMA,Integer,GT,noOfResos,EQ,NEW,HashMap,LT,GT,LPAREN,RPAREN,SEMI,Map,LT,Integer,COMMA,Integer,GT,noOfXmps,EQ,NEW,HashMap,LT,GT,LPAREN,RPAREN,SEMI,Map,LT,Integer,COMMA,Integer,GT,noOfOtherNoKAM,EQ,NEW,HashMap,LT,GT,LPAREN,RPAREN,SEMI,Map,LT,String,COMMA,Integer,GT,noOfPattern,EQ,NEW,HashMap,LT,GT,LPAREN,RPAREN,SEMI,Map,LT,String,COMMA,Integer,GT,hackLevelPatterns,EQ,NEW,HashMap,LT,GT,LPAREN,RPAREN,SEMI,Map,LT,String,COMMA,Integer,GT,hackLevelPatternsRESO,EQ,NEW,HashMap,LT,GT,LPAREN,RPAREN,SEMI,Map,LT,String,COMMA,Integer,GT,hackLevelPatternsXMP,EQ,NEW,HashMap,LT,GT,LPAREN,RPAREN,SEMI,Map,LT,String,COMMA,Integer,GT,noOfUSPattern,EQ,NEW,HashMap,LT,GT,LPAREN,RPAREN,SEMI,Map,LT,String,COMMA,Integer,GT,noResoPattern,EQ,NEW,HashMap,LT,GT,LPAREN,RPAREN,SEMI,Map,LT,String,COMMA,Integer,GT,noXMPPattern,EQ,NEW,HashMap,LT,GT,LPAREN,RPAREN,SEMI,Map,LT,String,COMMA,Integer,GT,noOfPatternBig,EQ,NEW,HashMap,LT,GT,LPAREN,RPAREN,SEMI,Map,LT,String,COMMA,Integer,GT,noOfPatternHuge,EQ,NEW,HashMap,LT,GT,LPAREN,RPAREN,SEMI,Map,LT,String,COMMA,Integer,GT,levelPattern,EQ,NEW,HashMap,LT,GT,LPAREN,RPAREN,SEMI,Map,LT,String,COMMA,Integer,GT,rareItems,EQ,NEW,HashMap,LT,GT,LPAREN,RPAREN,SEMI,Map,LT,String,COMMA,Integer,GT,hackers,EQ,NEW,HashMap,LT,GT,LPAREN,RPAREN,SEMI,Map,LT,String,COMMA,Integer,GT,weeks,EQ,NEW,HashMap,LT,GT,LPAREN,RPAREN,SEMI,IMatrix,LT,Integer,COMMA,Integer,GT,levelResults,EQ,NEW,IMatrix,LT,GT,LPAREN,RPAREN,SEMI,Map,LT,Integer,COMMA,Stats1D,GT,levelResults26,EQ,NEW,HashMap,LT,GT,LPAREN,RPAREN,SEMI,Map,LT,Integer,COMMA,Integer,GT,levelCounts,EQ,NEW,HashMap,LT,GT,LPAREN,RPAREN,SEMI,Map,LT,String,COMMA,Stats1D,GT,crossItems,EQ,NEW,HashMap,LT,GT,LPAREN,RPAREN,SEMI,Map,LT,Integer,COMMA,Stats1D,GT,playerLevelVsKeys,EQ,NEW,HashMap,LT,GT,LPAREN,RPAREN,SEMI,Map,LT,Integer,COMMA,Stats1D,GT,hackLevelVsKeys,EQ,NEW,HashMap,LT,GT,LPAREN,RPAREN,SEMI,Map,LT,Integer,COMMA,Integer,GT,getKeysStatsHas,EQ,NEW,HashMap,LT,GT,LPAREN,RPAREN,SEMI,Map,LT,Integer,COMMA,Integer,GT,getKeysStatsHasnot,EQ,NEW,HashMap,LT,GT,LPAREN,RPAREN,SEMI,Stats2D,overHacks,EQ,NEW,Stats2D,LPAREN,RPAREN,SEMI,Stats2D,overHacksNPC,EQ,NEW,Stats2D,LPAREN,RPAREN,SEMI,int,totalCount,EQ,0,SEMI,int,totalCountHas,EQ,0,SEMI,int,totalCountHasnot,EQ,0,SEMI,Set,LT,String,GT,allFullItems,EQ,NEW,HashSet,LT,GT,LPAREN,RPAREN,SEMI,outerloop1,COLON,FOR,LPAREN,HackResult,hackResult,COLON,allHacks,RPAREN,LBRACE,int,hackLevel,EQ,hackResult,DOT,getLevel,LPAREN,RPAREN,SEMI,FOR,LPAREN,HackFilter,fi,COLON,filters,RPAREN,LBRACE,IF,LPAREN,BANG,fi,DOT,accept,LPAREN,hackResult,RPAREN,RPAREN,CONTINUE,outerloop1,SEMI,RBRACE,List,LT,HackItem,GT,items,EQ,hackResult,DOT,hack,DOT,result,LPAREN,slot,RPAREN,SEMI,IF,LPAREN,items,BANGEQ,null,RPAREN,FOR,LPAREN,HackItem,hackItem,COLON,items,RPAREN,LBRACE,String,fullItem,EQ,shortItemName,LPAREN,hackItem,RPAREN,SEMI,IF,LPAREN,hackItem,DOT,level,GT,0,RPAREN,LBRACE,int,relLevel,EQ,hackItem,DOT,level,SUB,hackLevel,SEMI,fullItem,PLUSEQ,""."",PLUS,relLevel,SEMI,RBRACE,allFullItems,DOT,add,LPAREN,fullItem,RPAREN,SEMI,RBRACE,RBRACE,outerloop,COLON,FOR,LPAREN,HackResult,hackResult,COLON,allHacks,RPAREN,LBRACE,int,hackLevel,EQ,hackResult,DOT,getLevel,LPAREN,RPAREN,SEMI,HashSet,LT,String,GT,notSeenItems,EQ,NEW,HashSet,LT,GT,LPAREN,allFullItems,RPAREN,SEMI,IF,LPAREN,BANG,INCL_KEY_AND_MEDIA,RPAREN,LBRACE,notSeenItems,DOT,remove,LPAREN,KEY,RPAREN,SEMI,notSeenItems,DOT,remove,LPAREN,MEDIA,RPAREN,SEMI,RBRACE,FOR,LPAREN,HackFilter,fi,COLON,filters,RPAREN,LBRACE,IF,LPAREN,BANG,fi,DOT,accept,LPAREN,hackResult,RPAREN,RPAREN,CONTINUE,outerloop,SEMI,RBRACE,increment,LPAREN,basics,COMMA,""Hacks"",COMMA,1,RPAREN,SEMI,totalCount,PLUSPLUS,SEMI,boolean,hasKey,EQ,hackResult,DOT,hack,DOT,nkeys,GT,0,SEMI,IF,LPAREN,hasKey,RPAREN,totalCountHas,PLUSPLUS,SEMI,ELSE,totalCountHasnot,PLUSPLUS,SEMI,int,sumCount,EQ,0,SEMI,int,sumResoCount,EQ,0,SEMI,int,sumXmpCount,EQ,0,SEMI,int,sumUSCount,EQ,0,SEMI,int,sumOtherCount,EQ,0,SEMI,int,sumKeyCount,EQ,0,SEMI,int,sumShieldCount,EQ,0,SEMI,int,sumCubeCount,EQ,0,SEMI,String,levelBase,EQ,Integer,DOT,toString,LPAREN,hackResult,DOT,getOverLevel,LPAREN,RPAREN,RPAREN,SEMI,int,relLevelCount,EQ,0,SEMI,int,relLevelSum,EQ,0,SEMI,int,relLevelCountNPC,EQ,0,SEMI,int,relLevelSumNPC,EQ,0,SEMI,int,LBRACKET,RBRACKET,hackLevelSum,EQ,NEW,int,LBRACKET,9,RBRACKET,SEMI,int,LBRACKET,RBRACKET,resoPattern,EQ,NEW,int,LBRACKET,4,RBRACKET,SEMI,int,LBRACKET,RBRACKET,xmpPattern,EQ,NEW,int,LBRACKET,4,RBRACKET,SEMI,increment,LPAREN,nkeys,COMMA,hackResult,DOT,hack,DOT,nkeys,COMMA,1,RPAREN,SEMI,increment,LPAREN,hackers,COMMA,hackResult,DOT,hacker,DOT,name,COMMA,1,RPAREN,SEMI,long,week,EQ,LPAREN,LPAREN,long,RPAREN,LPAREN,hackResult,DOT,timestamp,SLASH,WEEK,RPAREN,RPAREN,STAR,WEEK,STAR,1000,SEMI,increment,LPAREN,weeks,COMMA,String,DOT,format,LPAREN,""%ty-%<tm-%<td"",COMMA,week,RPAREN,COMMA,1,RPAREN,SEMI,increment,LPAREN,levelTotals,COMMA,hackLevel,COMMA,1,RPAREN,SEMI,boolean,hackContainsKey,EQ,false,SEMI,List,LT,HackItem,GT,items,EQ,hackResult,DOT,hack,DOT,result,LPAREN,slot,RPAREN,SEMI,IF,LPAREN,items,BANGEQ,null,RPAREN,FOR,LPAREN,HackItem,hackItem,COLON,items,RPAREN,LBRACE,int,count,EQ,hackItem,DOT,quantity,SEMI,sumCount,PLUSEQ,count,SEMI,increment,LPAREN,basics,COMMA,""Items"",COMMA,1,RPAREN,SEMI,increment,LPAREN,counts,COMMA,count,COMMA,1,RPAREN,SEMI,String,shortName,EQ,shortItemName,LPAREN,hackItem,RPAREN,SEMI,IF,LPAREN,INCL_KEY_AND_MEDIA,BARBAR,BANG,isKAM,LPAREN,hackItem,RPAREN,RPAREN,increment,LPAREN,types,COMMA,shortName,COMMA,count,RPAREN,SEMI,SWITCH,LPAREN,hackItem,DOT,object,RPAREN,LBRACE,CASE,RESO,COLON,sumResoCount,PLUSEQ,hackItem,DOT,quantity,SEMI,BREAK,SEMI,CASE,XMP,COLON,sumXmpCount,PLUSEQ,hackItem,DOT,quantity,SEMI,BREAK,SEMI,CASE,US,COLON,sumUSCount,PLUSEQ,hackItem,DOT,quantity,SEMI,BREAK,SEMI,CASE,KEY,COLON,sumKeyCount,PLUSEQ,hackItem,DOT,quantity,SEMI,hackContainsKey,EQ,true,SEMI,BREAK,SEMI,CASE,SHIELD,COLON,sumShieldCount,PLUSEQ,hackItem,DOT,quantity,SEMI,BREAK,SEMI,CASE,CUBE,COLON,sumCubeCount,PLUSEQ,hackItem,DOT,quantity,SEMI,BREAK,SEMI,RBRACE,String,fullItem,EQ,shortName,SEMI,increment,LPAREN,levelCounts,COMMA,hackLevel,COMMA,1,RPAREN,SEMI,hackLevelSum,LBRACKET,hackItem,DOT,level,RBRACKET,PLUSEQ,count,SEMI,IF,LPAREN,hackItem,DOT,hasRarity,LPAREN,RPAREN,RPAREN,LBRACE,increment,LPAREN,rareItems,COMMA,hackItem,DOT,toString,LPAREN,RPAREN,COMMA,count,RPAREN,SEMI,RBRACE,IF,LPAREN,hackItem,DOT,level,GT,0,RPAREN,LBRACE,levelResults,DOT,inc,LPAREN,hackLevel,COMMA,hackItem,DOT,level,COMMA,count,RPAREN,SEMI,int,relLevel,EQ,hackItem,DOT,level,SUB,hackLevel,SEMI,fullItem,PLUSEQ,""."",PLUS,relLevel,SEMI,relLevelCount,PLUSPLUS,SEMI,relLevelSum,PLUSEQ,relLevel,SEMI,IF,LPAREN,BANG,CUBE,DOT,equals,LPAREN,hackItem,DOT,object,RPAREN,RPAREN,LBRACE,relLevelCountNPC,PLUSPLUS,SEMI,relLevelSumNPC,PLUSEQ,relLevel,SEMI,increment,LPAREN,hackLevelPatterns,COMMA,hackLevel,PLUS,"":"",PLUS,hackItem,DOT,level,COMMA,count,RPAREN,SEMI,RBRACE,increment,LPAREN,levels,COMMA,relLevel,COMMA,count,RPAREN,SEMI,increment,LPAREN,levelsPM,COMMA,relLevel,LT,0,QUES,""-"",COLON,relLevel,EQEQ,0,QUES,""="",COLON,""+"",COMMA,count,RPAREN,SEMI,increment,LPAREN,levelsENE,COMMA,relLevel,EQEQ,0,QUES,""="",COLON,""!="",COMMA,count,RPAREN,SEMI,increment,LPAREN,levelPattern,COMMA,levelBase,PLUS,relLevel,COMMA,count,RPAREN,SEMI,IF,LPAREN,RESO,DOT,equals,LPAREN,hackItem,DOT,object,RPAREN,RPAREN,LBRACE,increment,LPAREN,hackLevelPatternsRESO,COMMA,hackLevel,PLUS,"":"",PLUS,hackItem,DOT,level,COMMA,count,RPAREN,SEMI,resoPattern,LBRACKET,relLevel,PLUS,1,RBRACKET,EQ,count,SEMI,RBRACE,ELSE,IF,LPAREN,XMP,DOT,equals,LPAREN,hackItem,DOT,object,RPAREN,RPAREN,LBRACE,increment,LPAREN,hackLevelPatternsXMP,COMMA,hackLevel,PLUS,"":"",PLUS,hackItem,DOT,level,COMMA,count,RPAREN,SEMI,xmpPattern,LBRACKET,relLevel,PLUS,1,RBRACKET,EQ,count,SEMI,RBRACE,RBRACE,ELSE,IF,LPAREN,isOther,LPAREN,hackItem,RPAREN,RPAREN,LBRACE,sumOtherCount,PLUSEQ,count,SEMI,RBRACE,IF,LPAREN,hackLevel,GT,1,AMPAMP,hackLevel,LT,7,RPAREN,LBRACE,FOR,LPAREN,int,i,EQ,SUB,1,SEMI,i,LT,3,SEMI,i,PLUSPLUS,RPAREN,LBRACE,increment,LPAREN,levelResults26,COMMA,i,COMMA,hackLevelSum,LBRACKET,i,PLUS,hackLevel,RBRACKET,RPAREN,SEMI,RBRACE,RBRACE,notSeenItems,DOT,remove,LPAREN,fullItem,RPAREN,SEMI,IF,LPAREN,INCL_KEY_AND_MEDIA,BARBAR,BANG,isKAM,LPAREN,hackItem,RPAREN,RPAREN,increment,LPAREN,crossItems,COMMA,fullItem,COMMA,count,RPAREN,SEMI,RBRACE,FOR,LPAREN,String,noItem,COLON,notSeenItems,RPAREN,increment,LPAREN,crossItems,COMMA,noItem,COMMA,0,RPAREN,SEMI,increment,LPAREN,noOfResos,COMMA,sumResoCount,COMMA,1,RPAREN,SEMI,increment,LPAREN,noOfXmps,COMMA,sumXmpCount,COMMA,1,RPAREN,SEMI,increment,LPAREN,noOfOtherNoKAM,COMMA,sumOtherCount,COMMA,1,RPAREN,SEMI,increment,LPAREN,noOfUSPattern,COMMA,Integer,DOT,toString,LPAREN,sumResoCount,RPAREN,PLUS,sumXmpCount,PLUS,sumUSCount,COMMA,1,RPAREN,SEMI,increment,LPAREN,noResoPattern,COMMA,ia2str,LPAREN,resoPattern,RPAREN,COMMA,1,RPAREN,SEMI,increment,LPAREN,noXMPPattern,COMMA,ia2str,LPAREN,xmpPattern,RPAREN,COMMA,1,RPAREN,SEMI,increment,LPAREN,noOfPattern,COMMA,Integer,DOT,toString,LPAREN,sumResoCount,RPAREN,PLUS,""/"",PLUS,sumXmpCount,COMMA,1,RPAREN,SEMI,increment,LPAREN,noOfPatternBig,COMMA,Integer,DOT,toString,LPAREN,sumResoCount,RPAREN,PLUS,""/"",PLUS,sumXmpCount,PLUS,""/"",PLUS,sumOtherCount,COMMA,1,RPAREN,SEMI,increment,LPAREN,noOfPatternHuge,COMMA,Integer,DOT,toString,LPAREN,sumResoCount,RPAREN,PLUS,sumXmpCount,PLUS,""-"",PLUS,sumKeyCount,PLUS,sumShieldCount,COMMA,1,RPAREN,SEMI,increment,LPAREN,noOfItems,COMMA,sumCount,COMMA,1,RPAREN,SEMI,increment,LPAREN,playerLevelVsKeys,COMMA,hackResult,DOT,getPlayerLevel,LPAREN,RPAREN,COMMA,sumKeyCount,RPAREN,SEMI,increment,LPAREN,hackLevelVsKeys,COMMA,hackLevel,COMMA,sumKeyCount,RPAREN,SEMI,increment,LPAREN,hasKey,QUES,getKeysStatsHas,COLON,getKeysStatsHasnot,COMMA,hackContainsKey,QUES,1,COLON,0,COMMA,1,RPAREN,SEMI,int,overLevel,EQ,hackResult,DOT,getOverLevel,LPAREN,RPAREN,SEMI,IF,LPAREN,relLevelCount,GT,0,RPAREN,LBRACE,overHacks,DOT,add,LPAREN,overLevel,COMMA,1.0,STAR,relLevelSum,SLASH,relLevelCount,RPAREN,SEMI,RBRACE,IF,LPAREN,relLevelCountNPC,GT,0,RPAREN,LBRACE,overHacksNPC,DOT,add,LPAREN,overLevel,COMMA,1.0,STAR,relLevelSumNPC,SLASH,relLevelCountNPC,RPAREN,SEMI,RBRACE,RBRACE,IF,LPAREN,totalCount,EQEQ,0,RPAREN,RETURN,null,SEMI,FullResult,res,EQ,NEW,FullResult,LPAREN,slot,EQEQ,0,QUES,null,COLON,""Bonus"",COMMA,filters,COMMA,out,RPAREN,SEMI,out,DOT,startColumn,LPAREN,Util,DOT,append,LPAREN,NEW,StringBuilder,LPAREN,RPAREN,COMMA,filters,RPAREN,RPAREN,SEMI,res,DOT,summary,LPAREN,""Basics"",COMMA,basics,COMMA,totalCount,COMMA,true,COMMA,reference,RPAREN,SEMI,res,DOT,summary,LPAREN,""With Key"",COMMA,getKeysStatsHas,COMMA,totalCountHas,COMMA,true,COMMA,reference,RPAREN,SEMI,res,DOT,summary,LPAREN,""WO Key"",COMMA,getKeysStatsHasnot,COMMA,totalCountHasnot,COMMA,true,COMMA,reference,RPAREN,SEMI,IF,LPAREN,longMode,EQEQ,LONG,RPAREN,res,DOT,summary,LPAREN,""hack levels"",COMMA,levelTotals,COMMA,totalCount,COMMA,true,COMMA,reference,RPAREN,SEMI,IF,LPAREN,longMode,EQEQ,LONG,RPAREN,res,DOT,summary,LPAREN,""Items"",COMMA,noOfItems,COMMA,totalCount,COMMA,true,COMMA,reference,RPAREN,SEMI,res,DOT,summary,LPAREN,""Resos"",COMMA,noOfResos,COMMA,totalCount,COMMA,true,COMMA,reference,RPAREN,SEMI,res,DOT,summary,LPAREN,""Xmps"",COMMA,noOfXmps,COMMA,totalCount,COMMA,true,COMMA,reference,RPAREN,SEMI,res,DOT,summary,LPAREN,""Other (no R,XMP,K,M)"",COMMA,noOfOtherNoKAM,COMMA,totalCount,COMMA,true,COMMA,reference,RPAREN,SEMI,IF,LPAREN,longMode,EQEQ,LONG,RPAREN,res,DOT,summary,LPAREN,""nkeys"",COMMA,nkeys,COMMA,totalCount,COMMA,true,COMMA,reference,RPAREN,SEMI,res,DOT,summary,LPAREN,""Short Patterns"",COMMA,noOfPattern,COMMA,totalCount,COMMA,true,COMMA,reference,RPAREN,SEMI,IF,LPAREN,longMode,EQEQ,LONG,RPAREN,res,DOT,summary,LPAREN,""Hacklevel:Itemlevel RESO+XMP"",COMMA,hackLevelPatterns,COMMA,totalCount,COMMA,true,COMMA,reference,RPAREN,SEMI,IF,LPAREN,longMode,EQEQ,LONG,RPAREN,res,DOT,summary,LPAREN,""Hacklevel:Itemlevel RESO"",COMMA,hackLevelPatternsRESO,COMMA,totalCount,COMMA,true,COMMA,reference,RPAREN,SEMI,IF,LPAREN,longMode,EQEQ,LONG,RPAREN,res,DOT,summary,LPAREN,""Hacklevel:Itemlevel XMP"",COMMA,hackLevelPatternsXMP,COMMA,totalCount,COMMA,true,COMMA,reference,RPAREN,SEMI,IF,LPAREN,longMode,EQEQ,LONG,RPAREN,res,DOT,summary,LPAREN,""US Patterns"",COMMA,noOfUSPattern,COMMA,totalCount,COMMA,true,COMMA,reference,RPAREN,SEMI,res,DOT,summary,LPAREN,""Rare Items"",COMMA,rareItems,COMMA,totalCount,COMMA,true,COMMA,reference,RPAREN,SEMI,IF,LPAREN,longMode,EQEQ,LONG,RPAREN,res,DOT,summary,LPAREN,""Long Patterns"",COMMA,noOfPatternBig,COMMA,totalCount,COMMA,true,COMMA,reference,RPAREN,SEMI,IF,LPAREN,longMode,EQEQ,LONG,RPAREN,res,DOT,summary,LPAREN,""Huge Patterns"",COMMA,noOfPatternHuge,COMMA,totalCount,COMMA,true,COMMA,reference,RPAREN,SEMI,res,DOT,summary,LPAREN,""Items by Type"",COMMA,types,COMMA,totalCount,COMMA,true,COMMA,reference,RPAREN,SEMI,res,DOT,summary,LPAREN,""Items by Level"",COMMA,levels,COMMA,totalCount,COMMA,true,COMMA,reference,RPAREN,SEMI,res,DOT,summary,LPAREN,""Items by Level2"",COMMA,levelsPM,COMMA,totalCount,COMMA,true,COMMA,reference,RPAREN,SEMI,res,DOT,summary,LPAREN,""Items by Level3"",COMMA,levelsENE,COMMA,totalCount,COMMA,true,COMMA,reference,RPAREN,SEMI,IF,LPAREN,longMode,EQEQ,LONG,RPAREN,res,DOT,summary,LPAREN,""Patterns of Items by Overlevel, Level"",COMMA,levelPattern,COMMA,totalCount,COMMA,true,COMMA,reference,RPAREN,SEMI,res,DOT,summary2,LPAREN,""Items x Level"",COMMA,crossItems,COMMA,totalCount,COMMA,true,COMMA,reference,RPAREN,SEMI,IF,LPAREN,longMode,EQEQ,LONG,RPAREN,res,DOT,summary2,LPAREN,""Player Level vs Keys"",COMMA,playerLevelVsKeys,COMMA,totalCount,COMMA,true,COMMA,reference,RPAREN,SEMI,IF,LPAREN,longMode,EQEQ,LONG,RPAREN,res,DOT,summary2,LPAREN,""Hack Level vs Keys"",COMMA,hackLevelVsKeys,COMMA,totalCount,COMMA,true,COMMA,reference,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,longMode,EQEQ,LONG,QUES,1,COLON,5,SEMI,i,<MASK>,8,SEMI,i,PLUSPLUS,RPAREN,LBRACE,res,DOT,summary,LPAREN,""Hack Level L"",PLUS,i,COMMA,levelResults,DOT,getRow,LPAREN,i,RPAREN,COMMA,levelCounts,DOT,get,LPAREN,i,RPAREN,COMMA,true,COMMA,reference,RPAREN,SEMI,RBRACE,IF,LPAREN,longMode,EQEQ,LONG,RPAREN,res,DOT,summary,LPAREN,""Hackers"",COMMA,hackers,COMMA,totalCount,COMMA,true,COMMA,reference,RPAREN,SEMI,IF,LPAREN,longMode,EQEQ,LONG,RPAREN,res,DOT,summary,LPAREN,WEEKS,COMMA,weeks,COMMA,totalCount,COMMA,true,COMMA,reference,RPAREN,SEMI,IF,LPAREN,longMode,EQEQ,LONG,RPAREN,res,DOT,summary,LPAREN,""ResoPatterns"",COMMA,noResoPattern,COMMA,totalCount,COMMA,true,COMMA,reference,RPAREN,SEMI,IF,LPAREN,longMode,EQEQ,LONG,RPAREN,res,DOT,summary,LPAREN,""XMPPatterns"",COMMA,noXMPPattern,COMMA,totalCount,COMMA,true,COMMA,reference,RPAREN,SEMI,out,DOT,value,LPAREN,""overHacking-Correlation"",COMMA,overHacks,DOT,correlation,LPAREN,RPAREN,RPAREN,SEMI,out,DOT,value,LPAREN,""overHacking-NonPC-Correlation"",COMMA,overHacksNPC,DOT,correlation,LPAREN,RPAREN,RPAREN,SEMI,out,DOT,endColumn,LPAREN,RPAREN,SEMI,RETURN,res,SEMI,RBRACE","  @Override
,	public FullResult stats(int slot, Summarizer out, FullResult reference, HackFilter... filters)
,      throws Exception
,	{
,		Map<String,Integer> types = new HashMap<>();
,		Map<String,Integer> basics = new HashMap<>();
,		Map<Integer,Integer> nkeys = new HashMap<>();
,		Map<Integer,Integer> levels = new HashMap<>();
,		Map<String,Integer> levelsPM = new HashMap<>();
,		Map<String,Integer> levelsENE = new HashMap<>();
,		Map<Integer,Integer> levelTotals = new HashMap<>();
,		Map<Integer,Integer> counts = new HashMap<>();
,		Map<Integer,Integer> noOfItems = new HashMap<>();
,		Map<Integer,Integer> noOfResos = new HashMap<>();
,		Map<Integer,Integer> noOfXmps = new HashMap<>();
,		Map<Integer,Integer> noOfOtherNoKAM = new HashMap<>();
,		Map<String,Integer> noOfPattern = new HashMap<>();
,		Map<String,Integer> hackLevelPatterns = new HashMap<>();
,		Map<String,Integer> hackLevelPatternsRESO = new HashMap<>();
,		Map<String,Integer> hackLevelPatternsXMP = new HashMap<>();
,		Map<String,Integer> noOfUSPattern = new HashMap<>();
,		Map<String,Integer> noResoPattern = new HashMap<>();
,		Map<String,Integer> noXMPPattern = new HashMap<>();
,		Map<String,Integer> noOfPatternBig = new HashMap<>();
,		Map<String,Integer> noOfPatternHuge = new HashMap<>();
,		Map<String,Integer> levelPattern = new HashMap<>();
,		Map<String,Integer> rareItems = new HashMap<>();
,		Map<String,Integer> hackers = new HashMap<>();
,		Map<String,Integer> weeks = new HashMap<>();
,		IMatrix<Integer,Integer> levelResults = new IMatrix<>();
,		Map<Integer,Stats1D> levelResults26 = new HashMap<>();
,		Map<Integer,Integer> levelCounts = new HashMap<>();
,		Map<String,Stats1D> crossItems = new HashMap<>();
,		Map<Integer,Stats1D> playerLevelVsKeys = new HashMap<>();
,		Map<Integer,Stats1D> hackLevelVsKeys = new HashMap<>();
,		Map<Integer,Integer> getKeysStatsHas = new HashMap<>();
,		Map<Integer,Integer> getKeysStatsHasnot = new HashMap<>();
,		Stats2D overHacks = new Stats2D();
,		Stats2D overHacksNPC = new Stats2D();
,		int totalCount = 0;
,		int totalCountHas = 0;
,		int totalCountHasnot = 0;
,    // XXX Stupid duplication of code to determine all possible item types to count zeros!!
,    Set<String> allFullItems = new HashSet<>();
,outerloop1:    
,		for(HackResult hackResult : allHacks) {
,		  int hackLevel = hackResult.getLevel();
,		  for(HackFilter fi : filters) {
,			  if ( !fi.accept(hackResult) ) continue outerloop1;
,		  }
,      List<HackItem> items = hackResult.hack.result(slot);
,		  if ( items != null ) for(HackItem hackItem : items ) {
,        String fullItem = shortItemName(hackItem);
,        if ( hackItem.level > 0 ) {
,          int relLevel = hackItem.level - hackLevel;
,          fullItem += "".""+relLevel;
,			  }
,        allFullItems.add(fullItem);
,      }
,    }
,outerloop:		
,		for(HackResult hackResult : allHacks) {
,		  int hackLevel = hackResult.getLevel();
,      HashSet<String> notSeenItems = new HashSet<>(allFullItems);
,      if ( !INCL_KEY_AND_MEDIA ) {
,          notSeenItems.remove(KEY);
,          notSeenItems.remove(MEDIA);
,      }
,		  for(HackFilter fi : filters) {
,			  if ( !fi.accept(hackResult) ) continue outerloop;
,		  }
,      increment(basics, ""Hacks"", 1);
,		  totalCount++;
,      boolean hasKey = hackResult.hack.nkeys > 0;
,      if ( hasKey ) totalCountHas++; else totalCountHasnot++;
,		  int sumCount = 0;
,		  int sumResoCount = 0;
,		  int sumXmpCount = 0;
,		  int sumUSCount = 0;
,		  int sumOtherCount = 0;
,		  int sumKeyCount = 0;
,		  int sumShieldCount = 0;
,		  int sumCubeCount = 0;
,		  String levelBase = Integer.toString(hackResult.getOverLevel());
,		  int relLevelCount = 0;
,		  int relLevelSum = 0;
,		  int relLevelCountNPC = 0;
,		  int relLevelSumNPC = 0;
,      int[] hackLevelSum = new int[9];
,      int[] resoPattern = new int[4];
,      int[] xmpPattern = new int[4];
,      increment(nkeys, hackResult.hack.nkeys, 1);
,      increment(hackers, hackResult.hacker.name, 1);
,      long week = ((long) (hackResult.timestamp/ WEEK))*WEEK * 1000;
,      increment(weeks, String.format(""%ty-%<tm-%<td"", week), 1);
,      increment(levelTotals, hackLevel, 1);
,      boolean hackContainsKey = false;
,      List<HackItem> items = hackResult.hack.result(slot);
,		  if ( items != null ) for(HackItem hackItem : items ) {
,        int count = hackItem.quantity;
,        sumCount += count;
,        increment(basics, ""Items"", 1);
,        increment(counts, count, 1);
,        String shortName = shortItemName(hackItem);
,        if ( INCL_KEY_AND_MEDIA || !isKAM(hackItem) ) increment(types, shortName, count);
,        switch ( hackItem.object ) {
,          case RESO: sumResoCount += hackItem.quantity; break;
,          case XMP: sumXmpCount += hackItem.quantity; break;
,          case US: sumUSCount += hackItem.quantity; break;
,          case KEY: sumKeyCount += hackItem.quantity; hackContainsKey = true; break;
,          case SHIELD: sumShieldCount += hackItem.quantity; break;
,          case CUBE: sumCubeCount += hackItem.quantity; break;
,        }
,        String fullItem = shortName;
,        increment(levelCounts, hackLevel, 1);
,        hackLevelSum[hackItem.level] += count;
,        if ( hackItem.hasRarity() ) {
,            increment(rareItems, hackItem.toString(), count);
,        }
,        if ( hackItem.level > 0 ) {
,          levelResults.inc(hackLevel, hackItem.level, count);
,          // XXX this somehow assumes L8 player!
,          int relLevel = hackItem.level - hackLevel;
,          fullItem += "".""+relLevel;
,          relLevelCount++;
,          relLevelSum += relLevel;
,          if ( !CUBE.equals(hackItem.object) ) {
,            relLevelCountNPC++;
,            relLevelSumNPC += relLevel;
,            increment(hackLevelPatterns, hackLevel+"":""+hackItem.level, count);
,          }
,          increment(levels, relLevel, count);
,          increment(levelsPM, relLevel < 0 ? ""-"" : relLevel == 0 ? ""="" : ""+"", count);
,          increment(levelsENE, relLevel == 0 ? ""="" : ""!="", count);
,          increment(levelPattern, levelBase+relLevel, count);
,          if ( RESO.equals(hackItem.object) ) {
,              increment(hackLevelPatternsRESO, hackLevel+"":""+hackItem.level, count);
,              resoPattern[relLevel+1] = count;
,          }
,          else if ( XMP.equals(hackItem.object) ) {
,              increment(hackLevelPatternsXMP, hackLevel+"":""+hackItem.level, count);
,              xmpPattern[relLevel+1] = count;
,          }
,        }
,        else if ( isOther(hackItem) ) {
,          sumOtherCount += count;
,        }
,        if ( hackLevel > 1 && hackLevel < 7 ) {
,            for(int i = -1; i < 3; i++) {
,                increment(levelResults26, i, hackLevelSum[i+hackLevel]);
,            }
,        }
,        notSeenItems.remove(fullItem);
,        if ( INCL_KEY_AND_MEDIA || !isKAM(hackItem) ) increment(crossItems, fullItem, count);
,      }
,      for(String noItem : notSeenItems) increment(crossItems, noItem, 0);
,      increment(noOfResos, sumResoCount, 1);
,      increment(noOfXmps, sumXmpCount, 1);
,      increment(noOfOtherNoKAM, sumOtherCount, 1);
,      increment(noOfUSPattern, Integer.toString(sumResoCount) + sumXmpCount + sumUSCount, 1);
,      increment(noResoPattern, ia2str(resoPattern), 1);
,      increment(noXMPPattern, ia2str(xmpPattern), 1);
,      increment(noOfPattern, Integer.toString(sumResoCount) +""/""+ sumXmpCount, 1);
,      increment(noOfPatternBig, Integer.toString(sumResoCount) +""/""+ sumXmpCount +""/""+ sumOtherCount, 1);
,		  increment(noOfPatternHuge, Integer.toString(sumResoCount) + sumXmpCount + ""-"" + sumKeyCount + sumShieldCount, 1);
,		  increment(noOfItems, sumCount, 1);
,      increment(playerLevelVsKeys, hackResult.getPlayerLevel(), sumKeyCount);
,      increment(hackLevelVsKeys, hackLevel, sumKeyCount);
,      increment(hasKey ? getKeysStatsHas : getKeysStatsHasnot, hackContainsKey ?1:0, 1);
,		  int overLevel = hackResult.getOverLevel();
,		  if ( relLevelCount > 0 ) {
,			  overHacks.add(overLevel,1.0*relLevelSum/relLevelCount);
,		  }
,		  if ( relLevelCountNPC > 0 ) {
,			  overHacksNPC.add(overLevel,1.0*relLevelSumNPC/relLevelCountNPC);
,		  }
,		}
,    if ( totalCount == 0 ) return null;
,    // if (longMode != LONG || totalCount < 10 ) return null;
,    FullResult res = new FullResult(slot == 0 ? null : ""Bonus"", filters, out);
,    out.startColumn(Util.append(new StringBuilder(), filters));
,		res.summary(""Basics"", basics, totalCount, true, reference);
,		res.summary(""With Key"", getKeysStatsHas, totalCountHas, true, reference);
,		res.summary(""WO Key"", getKeysStatsHasnot, totalCountHasnot, true, reference);
,		if(longMode == LONG) res.summary(""hack levels"", levelTotals, totalCount, true, reference);
,		if(longMode == LONG) res.summary(""Items"", noOfItems, totalCount, true, reference);
,		res.summary(""Resos"", noOfResos, totalCount, true, reference);
,		res.summary(""Xmps"", noOfXmps, totalCount, true, reference);
,		res.summary(""Other (no R,XMP,K,M)"", noOfOtherNoKAM, totalCount, true, reference);
,		if(longMode == LONG) res.summary(""nkeys"", nkeys, totalCount, true, reference);
,		res.summary(""Short Patterns"", noOfPattern, totalCount, true, reference);
,    // XXX the next 3 also depend on what players actually hacked recently, so true changes are hard to track.
,		if(longMode == LONG) res.summary(""Hacklevel:Itemlevel RESO+XMP"", hackLevelPatterns, totalCount, true, reference);
,		if(longMode == LONG) res.summary(""Hacklevel:Itemlevel RESO"", hackLevelPatternsRESO, totalCount, true, reference);
,		if(longMode == LONG) res.summary(""Hacklevel:Itemlevel XMP"", hackLevelPatternsXMP, totalCount, true, reference);
,		if(longMode == LONG) res.summary(""US Patterns"", noOfUSPattern, totalCount, true, reference);
,		res.summary(""Rare Items"", rareItems, totalCount, true, reference);
,		if(longMode == LONG) res.summary(""Long Patterns"", noOfPatternBig, totalCount, true, reference);
,		if(longMode == LONG) res.summary(""Huge Patterns"", noOfPatternHuge, totalCount, true, reference);
,		res.summary(""Items by Type"", types, totalCount, true, reference);
,		res.summary(""Items by Level"", levels, totalCount, true, reference);
,		res.summary(""Items by Level2"", levelsPM, totalCount, true, reference);
,		res.summary(""Items by Level3"", levelsENE, totalCount, true, reference);
,		if(longMode == LONG) res.summary(""Patterns of Items by Overlevel, Level"", levelPattern, totalCount, true, reference);
,		res.summary2(""Items x Level"", crossItems, totalCount, true, reference);
,		if(longMode == LONG) res.summary2(""Player Level vs Keys"", playerLevelVsKeys, totalCount, true, reference);
,		if(longMode == LONG) res.summary2(""Hack Level vs Keys"", hackLevelVsKeys, totalCount, true, reference);
,    /*
,    if(longMode == LONG ) {
,        for(int i = 1; i <MASK> 8; i++) {
,            if ( longMode == LONG || i == 1 || i == 7 || i == 8 ) res.summary(""Hack Level L""+i, levelResults.getRow(i), levelCounts.get(i), false, reference);
,            if ( longMode != LONG && i == 2 ) {
,                res.summary2(""Hack Level L2-6 rel."", levelResults26, totalCount, true, reference);
,            }
,        }
,		}
,    */
,    for(int i = longMode == LONG ? 1 : 5; i <= 8; i++) {
,        res.summary(""Hack Level L""+i, levelResults.getRow(i), levelCounts.get(i), true, reference);
,    }
,		if(longMode == LONG) res.summary(""Hackers"", hackers, totalCount, true, reference);
,		if(longMode == LONG) res.summary(WEEKS, weeks, totalCount, true, reference);
,		if(longMode == LONG) res.summary(""ResoPatterns"", noResoPattern, totalCount, true, reference);
,		if(longMode == LONG) res.summary(""XMPPatterns"", noXMPPattern, totalCount, true, reference);
,		out.value(""overHacking-Correlation"", overHacks.correlation());
,		out.value(""overHacking-NonPC-Correlation"", overHacksNPC.correlation());
,    out.endColumn();
,    return res;
,  }
"
9971c369-1cd4-431b-bab2-7edb0b3b68d5,7568c8a6-544d-4438-ae73-8bb6bc4b917b,PLUS,"MONKEYS_AT,Override,DEFAULT,GPerson,P,LPAREN,String,name,COMMA,String,address,RPAREN,LBRACE,RETURN,NEW,GPerson,LPAREN,RPAREN,LBRACE,PUBLIC,LT,Company,COMMA,Dept,COMMA,SubUnit,COMMA,Employee,COMMA,Person,COMMA,Salary,GT,Person,accept,LPAREN,SybAlg,LT,Company,COMMA,Dept,COMMA,SubUnit,COMMA,Employee,COMMA,Person,COMMA,Salary,GT,alg,RPAREN,LBRACE,RETURN,alg,DOT,P,LPAREN,""_"",<MASK>,name,COMMA,address,RPAREN,SEMI,RBRACE,RBRACE,SEMI,RBRACE","	@Override
,	default GPerson P(String name, String address) {
,		return new GPerson() {
,			public <Company, Dept, SubUnit, Employee, Person, Salary> Person accept(
,					SybAlg<Company, Dept, SubUnit, Employee, Person, Salary> alg) {
,				return alg.P(""_"" <MASK> name, address);
,			}
,		};
,	}
"
1b8c895d-7ca3-40d2-8eed-2c6100c60c79,d9dea6ed-999a-487e-a9cd-a62cf94fc976,BANGEQ,"MONKEYS_AT,Override,PUBLIC,void,service,LPAREN,RPAREN,THROWS,IOException,LBRACE,WHILE,LPAREN,true,RPAREN,LBRACE,Socket,socket,EQ,null,SEMI,TRY,LBRACE,socket,EQ,serverSocket,DOT,accept,LPAREN,RPAREN,SEMI,BufferedReader,br,EQ,getBufferedReader,LPAREN,socket,RPAREN,SEMI,String,msg,EQ,br,DOT,readLine,LPAREN,RPAREN,SEMI,log,DOT,info,LPAREN,""Accept a new connection, address = "",PLUS,socket,DOT,getInetAddress,LPAREN,RPAREN,PLUS,"", port = "",PLUS,socket,DOT,getPort,LPAREN,RPAREN,PLUS,"", number = "",PLUS,msg,RPAREN,SEMI,Map,LT,String,COMMA,Object,GT,param,EQ,NEW,HashMap,LT,String,COMMA,Object,GT,LPAREN,RPAREN,SEMI,param,DOT,put,LPAREN,Constants,DOT,IN_USERNO,COMMA,msg,RPAREN,SEMI,param,DOT,put,LPAREN,Constants,DOT,IN_IP,COMMA,socket,DOT,getInetAddress,LPAREN,RPAREN,DOT,toString,LPAREN,RPAREN,RPAREN,SEMI,param,DOT,put,LPAREN,Constants,DOT,IN_PORT,COMMA,socket,DOT,getPort,LPAREN,RPAREN,RPAREN,SEMI,userDao,DOT,setUserIp,LPAREN,param,RPAREN,SEMI,RBRACE,CATCH,LPAREN,Exception,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,log,DOT,error,LPAREN,e,DOT,getMessage,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,FINALLY,LBRACE,IF,LPAREN,null,<MASK>,socket,RPAREN,LBRACE,socket,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,RBRACE","	@Override
,	public void service() throws IOException {
,		while (true) {
,			Socket socket = null;
,			try {
,				socket = serverSocket.accept();// 等待客户端连接
,				BufferedReader br = getBufferedReader(socket);
,				String msg = br.readLine();
,				log.info(""Accept a new connection, address = ""
,						+ socket.getInetAddress() + "", port = ""
,						+ socket.getPort() + "", number = "" + msg);
,				Map<String, Object> param = new HashMap<String, Object>();
,				param.put(Constants.IN_USERNO, msg);
,				param.put(Constants.IN_IP, socket.getInetAddress().toString());
,				param.put(Constants.IN_PORT, socket.getPort());
,				userDao.setUserIp(param);
,			} catch (Exception e) {
,				e.printStackTrace();
,				log.error(e.getMessage());
,			} finally {
,				if (null <MASK> socket) {
,					socket.close();
,				}
,			}
,		}
,	}
"
5ee16f26-d690-4884-9baa-b57e0c8c43d6,92a0585a-0a16-4da4-b918-72cc1d6c8ff7,STAR,"MONKEYS_AT,Override,PUBLIC,void,eventDispatched,LPAREN,AWTEvent,e,RPAREN,LBRACE,IF,LPAREN,e,DOT,getSource,LPAREN,RPAREN,BANGEQ,frame,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,e,DOT,getSource,LPAREN,RPAREN,RPAREN,SEMI,RETURN,SEMI,RBRACE,SEMI,MouseWheelEvent,event,EQ,LPAREN,MouseWheelEvent,RPAREN,e,SEMI,int,modifiers,EQ,event,DOT,getModifiers,LPAREN,RPAREN,SEMI,boolean,big,EQ,LPAREN,modifiers,AMP,InputEvent,DOT,CTRL_MASK,RPAREN,BANGEQ,0,SEMI,int,rotation,EQ,event,DOT,getWheelRotation,LPAREN,RPAREN,SEMI,int,value,EQ,lineEditor,DOT,getSlider,LPAREN,RPAREN,DOT,getValue,LPAREN,RPAREN,SEMI,int,newValue,EQ,value,PLUS,rotation,<MASK>,LPAREN,big,QUES,STEP_SIZE_BIG,COLON,STEP_SIZE,RPAREN,SEMI,lineEditor,DOT,getSlider,LPAREN,RPAREN,DOT,setValue,LPAREN,newValue,RPAREN,SEMI,RBRACE","			@Override
,			public void eventDispatched(AWTEvent e) {
,				if (e.getSource() != frame) {
,					System.out.println(e.getSource());
,					return;
,				}
,				;
,				MouseWheelEvent event = (MouseWheelEvent) e;
,
,				int modifiers = event.getModifiers();
,				boolean big = (modifiers & InputEvent.CTRL_MASK) != 0;
,
,				int rotation = event.getWheelRotation();
,				int value = lineEditor.getSlider().getValue();
,				int newValue = value + rotation
,						<MASK> (big ? STEP_SIZE_BIG : STEP_SIZE);
,				lineEditor.getSlider().setValue(newValue);
,			}
"
33a4da69-3c87-4617-ac37-92c20f86f62c,cfde7dd4-c0f4-4ae5-81be-ad0f0cff6bac,PLUS,"PUBLIC,ElementMenu,LPAREN,Component,e,RPAREN,LBRACE,this,DOT,element,EQ,e,SEMI,JMenuItem,tm,EQ,NEW,JMenuItem,LPAREN,""Menu for "",<MASK>,e,DOT,getName,LPAREN,RPAREN,RPAREN,SEMI,tm,DOT,setFont,LPAREN,NEW,Font,LPAREN,Font,DOT,DIALOG,COMMA,Font,DOT,BOLD,COMMA,14,RPAREN,RPAREN,SEMI,tm,DOT,setForeground,LPAREN,Color,DOT,red,RPAREN,SEMI,tm,DOT,setBackground,LPAREN,Color,DOT,cyan,RPAREN,SEMI,add,LPAREN,tm,RPAREN,SEMI,tm,DOT,setEnabled,LPAREN,false,RPAREN,SEMI,add,LPAREN,NEW,JPopupMenu,DOT,Separator,LPAREN,RPAREN,RPAREN,SEMI,boolean,has,EQ,false,SEMI,IF,LPAREN,e,INSTANCEOF,Plot,BARBAR,e,INSTANCEOF,StateSpaceTrajectory,RPAREN,LBRACE,makeShowItem,LPAREN,RPAREN,SEMI,has,EQ,true,SEMI,RBRACE,IF,LPAREN,e,INSTANCEOF,Editable,RPAREN,LBRACE,IF,LPAREN,has,RPAREN,add,LPAREN,NEW,JPopupMenu,DOT,Separator,LPAREN,RPAREN,RPAREN,SEMI,makeEditItem,LPAREN,RPAREN,SEMI,has,EQ,true,SEMI,RBRACE,IF,LPAREN,BANG,LPAREN,e,INSTANCEOF,Plot,BARBAR,e,INSTANCEOF,StateSpaceTrajectory,RPAREN,RPAREN,LBRACE,IF,LPAREN,has,RPAREN,add,LPAREN,NEW,JPopupMenu,DOT,Separator,LPAREN,RPAREN,RPAREN,SEMI,makeFlipHItem,LPAREN,RPAREN,SEMI,makeFlipVItem,LPAREN,RPAREN,SEMI,RBRACE,makeDeleteItem,LPAREN,RPAREN,SEMI,makeInputItems,LPAREN,RPAREN,SEMI,RBRACE","	public ElementMenu(Component e) {
,		this.element = e;
,
,		JMenuItem tm = new JMenuItem(""Menu for "" <MASK> e.getName());
,		tm.setFont(new Font(Font.DIALOG, Font.BOLD, 14));
,		tm.setForeground(Color.red);
,		tm.setBackground(Color.cyan);
,		add(tm);
,		tm.setEnabled(false);
,
,		add(new JPopupMenu.Separator());
,
,		boolean has = false;
,		if (e instanceof Plot || e instanceof StateSpaceTrajectory) {
,			makeShowItem();
,			has = true;
,		}
,
,		if (e instanceof Editable) {
,			if (has)
,				add(new JPopupMenu.Separator());
,			makeEditItem();
,			has = true;
,		}
,
,		if (!(e instanceof Plot || e instanceof StateSpaceTrajectory)) {
,			if (has)
,				add(new JPopupMenu.Separator());
,			makeFlipHItem();
,			makeFlipVItem();
,		}
,
,		makeDeleteItem();
,
,		// makeOutputItems();
,
,		makeInputItems();
,	}
"
113c5414-6c55-466b-b879-a350ab6e0ca2,f6ea5802-e70e-4f9f-a150-dac511275a48,EQ,"PUBLIC,void,setRow,LPAREN,int,r,RPAREN,LBRACE,row,<MASK>,r,SEMI,RBRACE","	public void setRow(int r) {
,		row <MASK> r;
,	}
"
5ee16f26-d690-4884-9baa-b57e0c8c43d6,b7ba6aac-5566-46a0-9a26-708ffbef619c,STAR,"MONKEYS_AT,Override,PUBLIC,void,eventDispatched,LPAREN,AWTEvent,e,RPAREN,LBRACE,IF,LPAREN,e,DOT,getSource,LPAREN,RPAREN,BANGEQ,dialog,RPAREN,LBRACE,RETURN,SEMI,RBRACE,SEMI,MouseWheelEvent,event,EQ,LPAREN,MouseWheelEvent,RPAREN,e,SEMI,int,modifiers,EQ,event,DOT,getModifiers,LPAREN,RPAREN,SEMI,boolean,big,EQ,LPAREN,modifiers,AMP,InputEvent,DOT,CTRL_MASK,RPAREN,BANGEQ,0,SEMI,int,rotation,EQ,event,DOT,getWheelRotation,LPAREN,RPAREN,SEMI,int,value,EQ,slider,DOT,getValue,LPAREN,RPAREN,SEMI,int,newValue,EQ,value,PLUS,rotation,<MASK>,LPAREN,big,QUES,STEP_SIZE_BIG,COLON,STEP_SIZE,RPAREN,SEMI,slider,DOT,setValue,LPAREN,newValue,RPAREN,SEMI,RBRACE","			@Override
,			public void eventDispatched(AWTEvent e) {
,				if (e.getSource() != dialog) {
,					return;
,				};
,				MouseWheelEvent event = (MouseWheelEvent) e;
,
,				int modifiers = event.getModifiers();
,				boolean big = (modifiers & InputEvent.CTRL_MASK) != 0;
,
,				int rotation = event.getWheelRotation();
,				int value = slider.getValue();
,				int newValue = value + rotation
,						<MASK> (big ? STEP_SIZE_BIG : STEP_SIZE);
,				slider.setValue(newValue);
,			}
"
56952896-479b-43e9-a9cf-c3f3bb9afc0e,0654f33d-852e-4762-8827-ac6a8eb7e056,BANGEQ,"MONKEYS_AT,HandlesEvent,LPAREN,""OrderHistory"",RPAREN,PUBLIC,Resolution,orderHistory,LPAREN,RPAREN,LBRACE,Resolution,r,EQ,NEW,ForwardResolution,LPAREN,""/"",RPAREN,SEMI,IF,LPAREN,ctx,DOT,getUser,LPAREN,RPAREN,<MASK>,null,RPAREN,LBRACE,TRY,LBRACE,this,DOT,orders,EQ,NEW,dao,DOT,OrderDAO,LPAREN,RPAREN,DOT,getOrdersByUserID,LPAREN,ctx,DOT,getUser,LPAREN,RPAREN,DOT,getUserID,LPAREN,RPAREN,RPAREN,DOT,toArray,LPAREN,this,DOT,orders,RPAREN,SEMI,RBRACE,CATCH,LPAREN,SQLException,BAR,NamingException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,r,EQ,NEW,ForwardResolution,LPAREN,""/orderhistory.jsp"",RPAREN,SEMI,RBRACE,RETURN,r,SEMI,RBRACE","	@HandlesEvent(""OrderHistory"")
,	public Resolution orderHistory(){
,		Resolution r = new ForwardResolution(""/"");
,		if(ctx.getUser()<MASK>null){
,			try {
,				this.orders = new dao.OrderDAO().getOrdersByUserID(ctx.getUser().getUserID()).toArray(this.orders);
,			} catch (SQLException | NamingException e) {
,				// TODO Auto-generated catch block
,				e.printStackTrace();
,			}
,			
,			r = new ForwardResolution(""/orderhistory.jsp"");
,		}
,		return r;
,	}
"
113c5414-6c55-466b-b879-a350ab6e0ca2,a295272b-21ee-4050-aaa9-b3da79ed3b77,EQ,"PUBLIC,void,setCost,LPAREN,int,cost,RPAREN,LBRACE,this,DOT,cost,<MASK>,cost,SEMI,RBRACE","	public void setCost(int cost) {
,		this.cost <MASK> cost;
,	}
"
b5ee7e5e-a7bf-41d4-8880-3ac95d2f8822,32f4d77e-4d0a-4460-aeca-ae3e76bd0df2,BANGEQ,"PUBLIC,List,LT,String,GT,getTableNames,LPAREN,RPAREN,LBRACE,List,LT,String,GT,tableNames,EQ,NEW,ArrayList,LT,String,GT,LPAREN,RPAREN,SEMI,TRY,LBRACE,ResultSet,rs,EQ,getTablesAsResultSet,LPAREN,RPAREN,SEMI,WHILE,LPAREN,rs,DOT,next,LPAREN,RPAREN,RPAREN,LBRACE,String,s,EQ,rs,DOT,getString,LPAREN,""TABLE_TYPE"",RPAREN,SEMI,String,name,EQ,rs,DOT,getString,LPAREN,""TABLE_NAME"",RPAREN,SEMI,IF,LPAREN,s,<MASK>,null,AMPAMP,s,DOT,equalsIgnoreCase,LPAREN,""TABLE"",RPAREN,AMPAMP,BANG,name,DOT,equalsIgnoreCase,LPAREN,""spatial_ref_sys"",RPAREN,AMPAMP,BANG,name,DOT,equalsIgnoreCase,LPAREN,""geometry_columns"",RPAREN,RPAREN,LBRACE,tableNames,DOT,add,LPAREN,name,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,CATCH,LPAREN,SQLException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,RETURN,tableNames,SEMI,RBRACE","	public List<String> getTableNames(){
,		List<String> tableNames = new ArrayList<String>();
,		try {
,			ResultSet rs = getTablesAsResultSet();
,			while(rs.next()){
,				String s = rs.getString(""TABLE_TYPE"");
,				String name = rs.getString(""TABLE_NAME"");
,				if(s<MASK>null && s.equalsIgnoreCase(""TABLE"") 
,				 && !name.equalsIgnoreCase(""spatial_ref_sys"") && 
,				 !name.equalsIgnoreCase(""geometry_columns"")){
,				tableNames.add(name);
,				}
,			}
,		} catch (SQLException e) {
,			e.printStackTrace();
,		}
,		return tableNames;
,	}
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,0c59811c-fb8a-4196-bfaf-65faf2f511d0,LT,"PRIVATE,String,printArray,LPAREN,String,LBRACKET,RBRACKET,arr,RPAREN,LBRACE,String,res,EQ,""["",SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,arr,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,i,BANGEQ,arr,DOT,length,SUB,1,RPAREN,LBRACE,res,PLUSEQ,"", "",SEMI,RBRACE,res,PLUSEQ,arr,LBRACKET,i,RBRACKET,SEMI,RBRACE,res,PLUSEQ,""]"",SEMI,RETURN,res,SEMI,RBRACE","  private String printArray(String[] arr) {
,    String res = ""["";
,    
,    for (int i = 0 ; i <MASK> arr.length ; i++) {
,      if (i != arr.length - 1) {
,        res += "", "";
,      }
,      res += arr[i];
,    }
,    
,    res += ""]"";
,    
,    return res;
,  }
"
38ed5e2e-bfac-4cc9-94e0-5ee38dabb0ca,ff7b1d5c-94bd-4005-814a-21a0d4c060a0,EQEQ,"PRIVATE,STATIC,Object,min,LPAREN,Object,subtree,RPAREN,LBRACE,IF,LPAREN,BANG,LPAREN,subtree,INSTANCEOF,Node,RPAREN,RPAREN,LBRACE,Object,LBRACKET,RBRACKET,ary,EQ,LPAREN,Object,LBRACKET,RBRACKET,RPAREN,subtree,SEMI,RETURN,NEW,Entry,LPAREN,ary,LBRACKET,0,RBRACKET,COMMA,ary,LBRACKET,ary,DOT,length,GTGT,1,RBRACKET,RPAREN,SEMI,RBRACE,ELSE,LBRACE,Node,node,EQ,LPAREN,Node,RPAREN,subtree,SEMI,IF,LPAREN,node,DOT,left,<MASK>,null,RPAREN,LBRACE,IF,LPAREN,node,DOT,key,INSTANCEOF,EquivalentMap,RPAREN,RETURN,node,DOT,key,SEMI,ELSE,RETURN,node,SEMI,RBRACE,ELSE,RETURN,min,LPAREN,node,DOT,left,RPAREN,SEMI,RBRACE,RBRACE","    private static Object min(Object subtree) {
,	if (!(subtree instanceof Node)) {
,	    Object[] ary = (Object[])subtree;
,	    return new Entry(ary[0], ary[ary.length >> 1]);
,	} else {
,	    Node node = (Node)subtree;
,	    if (node.left <MASK> null) {
,		if (node.key instanceof EquivalentMap) return node.key;
,		else return node;
,	    } else return min(node.left);
,	}
,    }
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,5926fc4b-79ca-4c93-a841-4d3a9daf83d2,BANGEQ,"MONKEYS_AT,Override,PROTECTED,void,notifyClientListenersNewXXXVector,LPAREN,INDIClient,client,COMMA,Element,xml,RPAREN,LBRACE,String,device,EQ,xml,DOT,getAttribute,LPAREN,""device"",RPAREN,DOT,trim,LPAREN,RPAREN,SEMI,INDIDevice,d,EQ,this,DOT,getDevice,LPAREN,device,RPAREN,SEMI,IF,LPAREN,d,<MASK>,null,RPAREN,LBRACE,d,DOT,sendXMLMessage,LPAREN,xml,RPAREN,SEMI,RBRACE,RBRACE","  @Override
,  protected void notifyClientListenersNewXXXVector(INDIClient client, Element xml) {
,    String device = xml.getAttribute(""device"").trim();
,    INDIDevice d = this.getDevice(device);
,
,    if (d <MASK> null) {
,      d.sendXMLMessage(xml);
,    }
,  }
"
2d8ea22f-74cb-4224-a3bf-081c952c9729,882e1356-b61e-40d3-b12a-25601f6e13c1,STAR,"int,suffle,LPAREN,RPAREN,LBRACE,j,EQ,playlist,DOT,getshuffle,LPAREN,RPAREN,SEMI,k,EQ,LPAREN,LPAREN,int,RPAREN,LPAREN,Math,DOT,random,LPAREN,RPAREN,<MASK>,j,RPAREN,RPAREN,SEMI,RETURN,k,SEMI,RBRACE","    int suffle() {
,        j = playlist.getshuffle();
,        k = ((int) (Math.random() <MASK> j));
,        return k;
,    }
"
1b8c895d-7ca3-40d2-8eed-2c6100c60c79,75f85827-c3ed-46c4-b85c-edf14ebc4a10,LT,"MONKEYS_AT,Override,PUBLIC,void,run,LPAREN,RPAREN,LBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,5,SEMI,PLUSPLUS,i,RPAREN,LBRACE,TRY,LBRACE,Thread,DOT,sleep,LPAREN,100,RPAREN,SEMI,RBRACE,CATCH,LPAREN,InterruptedException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,System,DOT,out,DOT,println,LPAREN,Thread,DOT,currentThread,LPAREN,RPAREN,DOT,getName,LPAREN,RPAREN,PLUS,""\u5356\u51FA\u4E86"",PLUS,foo,DOT,getTicket,LPAREN,RPAREN,PLUS,""\u53F7\u7968!"",RPAREN,SEMI,RBRACE,RBRACE","		@Override
,		public void run() {
,			for (int i = 0; i <MASK> 5; ++i) {
,				try {
,					Thread.sleep(100); // 睡眠10s更能看出效果
,				} catch (InterruptedException e) {
,					e.printStackTrace();
,				}
,				// System.out.println(Thread.currentThread().getName() + ""卖出了"" +
,				// foo.getTicketLeft() + ""号票!"");//非同步
,				System.out.println(Thread.currentThread().getName() + ""卖出了""
,						+ foo.getTicket() + ""号票!"");// 同步
,			}
,		}
"
92951106-a87f-4e0c-9019-4852bf22d1be,48d0ae2e-c2ec-48e3-9700-13d5efd2da88,PLUS,"PUBLIC,void,print,LPAREN,Node,node,RPAREN,LBRACE,IF,LPAREN,node,BANGEQ,null,RPAREN,LBRACE,System,DOT,out,DOT,print,LPAREN,node,DOT,value,<MASK>,"" "",RPAREN,SEMI,print,LPAREN,node,DOT,next,RPAREN,SEMI,RBRACE,ELSE,LBRACE,System,DOT,out,DOT,println,LPAREN,RPAREN,SEMI,RBRACE,RBRACE","	public void print(Node node) {
,		if (node != null) {
,			System.out.print(node.value <MASK> "" "");
,			print(node.next);
,		} else {
,			System.out.println();
,		}
,	}
"
2576a407-9fd6-4f86-aee0-46707642b564,f186144a-2f4d-494b-87a1-169ee60c173a,GT,"PROTECTED,void,editarCrlv,LPAREN,RPAREN,LBRACE,int,index,EQ,gCrlv,DOT,getTableGerenciarCrlvs,LPAREN,RPAREN,DOT,getSelectionModel,LPAREN,RPAREN,DOT,getLeadSelectionIndex,LPAREN,RPAREN,SEMI,IF,LPAREN,index,<MASK>,SUB,1,RPAREN,LBRACE,ViewCrlv,jifCrlv,EQ,NEW,ViewCrlv,LPAREN,RPAREN,SEMI,ControllerCrlv,conCrlv,EQ,NEW,ControllerCrlv,LPAREN,jifCrlv,COMMA,gCrlv,DOT,getCrlv,LPAREN,RPAREN,DOT,get,LPAREN,index,RPAREN,COMMA,gCrlv,RPAREN,SEMI,mw,DOT,getDesktop,LPAREN,RPAREN,DOT,add,LPAREN,jifCrlv,RPAREN,SEMI,jifCrlv,DOT,setVisible,LPAREN,true,RPAREN,SEMI,jifCrlv,DOT,getBtSalvar,LPAREN,RPAREN,DOT,setText,LPAREN,""Salvar Altera\u00E7\u00F5es"",RPAREN,SEMI,RBRACE,ELSE,JOptionPane,DOT,showMessageDialog,LPAREN,mw,COMMA,""Selecione um documento para ser editado!"",RPAREN,SEMI,RBRACE","    protected void editarCrlv(){
,        int index = gCrlv.getTableGerenciarCrlvs().getSelectionModel().getLeadSelectionIndex();
,        if(index <MASK> -1){
,            //gCrlv.getCrlv().get(index);
,            ViewCrlv jifCrlv = new ViewCrlv();
,            ControllerCrlv conCrlv = new ControllerCrlv(jifCrlv, gCrlv.getCrlv().get(index), gCrlv);
,            mw.getDesktop().add(jifCrlv);
,             jifCrlv.setVisible(true);
,            jifCrlv.getBtSalvar().setText(""Salvar Alterações"");
,        }
,        else 
,            JOptionPane.showMessageDialog(mw, ""Selecione um documento para ser editado!"");
,    }
"
b5ee7e5e-a7bf-41d4-8880-3ac95d2f8822,0f95a3b5-b1f9-48ce-82e3-2eca4848e6da,BANGEQ,"PUBLIC,boolean,hasNextRecord,LPAREN,RPAREN,LBRACE,RETURN,nextRecord,<MASK>,null,SEMI,RBRACE","	public boolean hasNextRecord() {
,		return nextRecord <MASK> null;
,	}
"
13ade84f-7d2c-4f3f-a13f-aa7abf8a58a5,23e336f0-96be-448d-ad0a-9e0c15d24775,SUB,"MONKEYS_AT,Override,PUBLIC,int,compare,LPAREN,UndirectedGraphNode,o1,COMMA,UndirectedGraphNode,o2,RPAREN,LBRACE,RETURN,o1,DOT,label,<MASK>,o2,DOT,label,SEMI,RBRACE","			@Override
,			public int compare(UndirectedGraphNode o1, UndirectedGraphNode o2) {
,				return o1.label <MASK> o2.label;
,			}
"
09478113-8f39-4146-870b-8037a6932443,28eb1910-d52e-4d36-abbd-777f6ec28115,EQEQ,"PRIVATE,void,OP_TAY,LPAREN,RPAREN,LBRACE,setNFlag,LPAREN,getBit,LPAREN,getA,LPAREN,RPAREN,COMMA,7,RPAREN,RPAREN,SEMI,setZFlag,LPAREN,getA,LPAREN,RPAREN,<MASK>,0,RPAREN,SEMI,setY,LPAREN,getA,LPAREN,RPAREN,RPAREN,SEMI,RBRACE","    private void OP_TAY()
,    {
,        setNFlag(getBit(getA(), 7));
,        setZFlag(getA() <MASK> 0);
,
,        setY(getA());
,    }
"
a01c84a3-b602-47b9-879e-2c3f4cb148f7,e45b7223-d91e-466c-a332-099bf55b5234,PERCENT,"MONKEYS_AT,Override,PROTECTED,HashEntryPosition,findEntry,LPAREN,K,key,RPAREN,THROWS,InvalidKeyException,LBRACE,int,avail,EQ,SUB,1,SEMI,checkKey,LPAREN,key,RPAREN,SEMI,int,i,EQ,hashValue,LPAREN,key,RPAREN,SEMI,FINAL,int,j,EQ,i,SEMI,DO,LBRACE,Entry,LT,K,COMMA,V,GT,e,EQ,bucket,LBRACKET,i,RBRACKET,SEMI,IF,LPAREN,e,EQEQ,null,RPAREN,LBRACE,IF,LPAREN,avail,LT,0,RPAREN,LBRACE,avail,EQ,i,SEMI,RBRACE,BREAK,SEMI,RBRACE,ELSE,IF,LPAREN,key,DOT,equals,LPAREN,bucket,LBRACKET,i,RBRACKET,DOT,getKey,LPAREN,RPAREN,RPAREN,RPAREN,LBRACE,RETURN,NEW,AbstractHashTableMap,DOT,HashEntryPosition,LPAREN,i,COMMA,AbstractHashTableMap,DOT,OperationType,DOT,found,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,bucket,LBRACKET,i,RBRACKET,EQEQ,AVAILABLE,RPAREN,LBRACE,IF,LPAREN,avail,LT,0,RPAREN,LBRACE,avail,EQ,i,SEMI,RBRACE,RBRACE,i,EQ,LPAREN,i,PLUS,1,RPAREN,<MASK>,capacity,SEMI,RBRACE,WHILE,LPAREN,i,BANGEQ,j,RPAREN,SEMI,RETURN,NEW,AbstractHashTableMap,DOT,HashEntryPosition,LPAREN,avail,COMMA,AbstractHashTableMap,DOT,OperationType,DOT,notFound,RPAREN,SEMI,RBRACE","    @Override
,    protected HashEntryPosition findEntry(K key) throws InvalidKeyException {
,        int avail = -1;
,        checkKey(key);
,        int i = hashValue(key);
,        final int j = i;
,        do {
,            Entry<K, V> e = bucket[i];
,            if (e == null) {
,                if (avail < 0) {
,                    avail = i; // key is not in table
,                }
,                break;
,            } else if (key.equals(bucket[i].getKey())) // we have found our key
,            {
,                return new AbstractHashTableMap.HashEntryPosition(i, AbstractHashTableMap.OperationType.found); // key found
,            } else if (bucket[i] == AVAILABLE) { // bucket is deactivated
,                if (avail < 0) {
,                    avail = i; // remember that this slot is available
,                }
,            }
,            i = (i + 1) <MASK> capacity; // keep looking
,        } while (i != j);
,        return new AbstractHashTableMap.HashEntryPosition(avail, AbstractHashTableMap.OperationType.notFound); // first empty or available slot
,    }
"
08b41d00-9e8d-4e48-94b9-945bef00d612,40b761b8-4bd3-432d-a9fd-ec302e4c681a,GT,"PUBLIC,boolean,checkRetired,LPAREN,int,age,RPAREN,LBRACE,boolean,check,SEMI,IF,LPAREN,age,<MASK>,60,RPAREN,LBRACE,check,EQ,true,SEMI,RBRACE,ELSE,LBRACE,check,EQ,false,SEMI,RBRACE,RETURN,check,SEMI,RBRACE","    public boolean checkRetired(int age) {
,        boolean check;
,        if (age <MASK> 60) {
,            check = true;
,        } else {
,            check = false;
,        }
,        return check;
,    }
"
7fe8faa8-6d71-4d77-acc6-fe9b7d23dda6,e192f11f-d32d-4bbb-83af-4a0e8d6cac98,LTEQ,"PRIVATE,void,initMatrix,LPAREN,int,quality,RPAREN,LBRACE,double,LBRACKET,RBRACKET,AANscaleFactor,EQ,LBRACE,1.0,COMMA,1.387039845,COMMA,1.306562965,COMMA,1.175875602,COMMA,1.0,COMMA,0.785694958,COMMA,0.541196100,COMMA,0.275899379,RBRACE,SEMI,int,i,SEMI,int,j,SEMI,int,index,SEMI,int,Quality,SEMI,int,temp,SEMI,Quality,EQ,quality,SEMI,IF,LPAREN,Quality,<MASK>,0,RPAREN,Quality,EQ,1,SEMI,IF,LPAREN,Quality,GT,100,RPAREN,Quality,EQ,100,SEMI,IF,LPAREN,Quality,LT,50,RPAREN,Quality,EQ,5000,SLASH,Quality,SEMI,ELSE,Quality,EQ,200,SUB,Quality,STAR,2,SEMI,index,EQ,0,SEMI,FOR,LPAREN,i,EQ,0,SEMI,i,LT,8,SEMI,i,PLUSPLUS,RPAREN,LBRACE,FOR,LPAREN,j,EQ,0,SEMI,j,LT,8,SEMI,j,PLUSPLUS,RPAREN,LBRACE,DivisorsLuminance,LBRACKET,index,RBRACKET,EQ,LPAREN,double,RPAREN,LPAREN,LPAREN,double,RPAREN,1.0,SLASH,LPAREN,LPAREN,double,RPAREN,quantum_luminance,LBRACKET,index,RBRACKET,STAR,AANscaleFactor,LBRACKET,i,RBRACKET,STAR,AANscaleFactor,LBRACKET,j,RBRACKET,STAR,LPAREN,double,RPAREN,8.0,RPAREN,RPAREN,SEMI,index,PLUSPLUS,SEMI,RBRACE,RBRACE,index,EQ,0,SEMI,FOR,LPAREN,i,EQ,0,SEMI,i,LT,8,SEMI,i,PLUSPLUS,RPAREN,LBRACE,FOR,LPAREN,j,EQ,0,SEMI,j,LT,8,SEMI,j,PLUSPLUS,RPAREN,LBRACE,DivisorsChrominance,LBRACKET,index,RBRACKET,EQ,LPAREN,double,RPAREN,LPAREN,LPAREN,double,RPAREN,1.0,SLASH,LPAREN,LPAREN,double,RPAREN,quantum_chrominance,LBRACKET,index,RBRACKET,STAR,AANscaleFactor,LBRACKET,i,RBRACKET,STAR,AANscaleFactor,LBRACKET,j,RBRACKET,STAR,LPAREN,double,RPAREN,8.0,RPAREN,RPAREN,SEMI,index,PLUSPLUS,SEMI,RBRACE,RBRACE,quantum,LBRACKET,0,RBRACKET,EQ,quantum_luminance,SEMI,Divisors,LBRACKET,0,RBRACKET,EQ,DivisorsLuminance,SEMI,quantum,LBRACKET,1,RBRACKET,EQ,quantum_chrominance,SEMI,Divisors,LBRACKET,1,RBRACKET,EQ,DivisorsChrominance,SEMI,RBRACE","		private void initMatrix(int quality)
,
,		{
,
,			double[] AANscaleFactor = { 1.0, 1.387039845, 1.306562965, 1.175875602,
,
,			1.0, 0.785694958, 0.541196100, 0.275899379 };
,
,			int i;
,
,			int j;
,
,			int index;
,
,			int Quality;
,
,			int temp;
,
,			// converting quality setting to that specified in the jpeg_quality_scaling
,
,			// method in the IJG Jpeg-6a C libraries
,
,			Quality = quality;
,
,			if (Quality <MASK> 0)
,
,				Quality = 1;
,
,			if (Quality > 100)
,
,				Quality = 100;
,
,			if (Quality < 50)
,
,				Quality = 5000 / Quality;
,
,			else
,
,				Quality = 200 - Quality * 2;
,
,			// Creating the luminance matrix
,
,//			quantum_luminance[0] = 16;
,//
,//			quantum_luminance[1] = 11;
,//
,//			quantum_luminance[2] = 10;
,//
,//			quantum_luminance[3] = 16;
,//
,//			quantum_luminance[4] = 24;
,//
,//			quantum_luminance[5] = 40;
,//
,//			quantum_luminance[6] = 51;
,//
,//			quantum_luminance[7] = 61;
,//
,//			quantum_luminance[8] = 12;
,//
,//			quantum_luminance[9] = 12;
,//
,//			quantum_luminance[10] = 14;
,//
,//			quantum_luminance[11] = 19;
,//
,//			quantum_luminance[12] = 26;
,//
,//			quantum_luminance[13] = 58;
,//
,//			quantum_luminance[14] = 60;
,//
,//			quantum_luminance[15] = 55;
,//
,//			quantum_luminance[16] = 14;
,//
,//			quantum_luminance[17] = 13;
,//
,//			quantum_luminance[18] = 16;
,//
,//			quantum_luminance[19] = 24;
,//
,//			quantum_luminance[20] = 40;
,//
,//			quantum_luminance[21] = 57;
,//
,//			quantum_luminance[22] = 69;
,//
,//			quantum_luminance[23] = 56;
,//
,//			quantum_luminance[24] = 14;
,//
,//			quantum_luminance[25] = 17;
,//
,//			quantum_luminance[26] = 22;
,//
,//			quantum_luminance[27] = 29;
,//
,//			quantum_luminance[28] = 51;
,//
,//			quantum_luminance[29] = 87;
,//
,//			quantum_luminance[30] = 80;
,//
,//			quantum_luminance[31] = 62;
,//
,//			quantum_luminance[32] = 18;
,//
,//			quantum_luminance[33] = 22;
,//
,//			quantum_luminance[34] = 37;
,//
,//			quantum_luminance[35] = 56;
,//
,//			quantum_luminance[36] = 68;
,//
,//			quantum_luminance[37] = 109;
,//
,//			quantum_luminance[38] = 103;
,//
,//			quantum_luminance[39] = 77;
,//
,//			quantum_luminance[40] = 24;
,//
,//			quantum_luminance[41] = 35;
,//
,//			quantum_luminance[42] = 55;
,//
,//			quantum_luminance[43] = 64;
,//
,//			quantum_luminance[44] = 81;
,//
,//			quantum_luminance[45] = 104;
,//
,//			quantum_luminance[46] = 113;
,//
,//			quantum_luminance[47] = 92;
,//
,//			quantum_luminance[48] = 49;
,//
,//			quantum_luminance[49] = 64;
,//
,//			quantum_luminance[50] = 78;
,//
,//			quantum_luminance[51] = 87;
,//
,//			quantum_luminance[52] = 103;
,//
,//			quantum_luminance[53] = 121;
,//
,//			quantum_luminance[54] = 120;
,//
,//			quantum_luminance[55] = 101;
,//
,//			quantum_luminance[56] = 72;
,//
,//			quantum_luminance[57] = 92;
,//
,//			quantum_luminance[58] = 95;
,//
,//			quantum_luminance[59] = 98;
,//
,//			quantum_luminance[60] = 112;
,//
,//			quantum_luminance[61] = 100;
,//
,//			quantum_luminance[62] = 103;
,//
,//			quantum_luminance[63] = 99;
,			
,//			for (j = 0; j < 64; j++)
,//
,//			{
,//
,//				temp = (quantum_luminance[j] * Quality + 50) / 100;
,////				temp = quantum_luminance[j];
,//
,//				if (temp <= 0)
,//					temp = 1;
,//
,//				if (temp > 255)
,//					temp = 255;
,//
,//				quantum_luminance[j] = temp;
,//
,//			}
,
,			index = 0;
,
,			for (i = 0; i < 8; i++) {
,
,				for (j = 0; j < 8; j++) {
,
,					// The divisors for the LL&M method (the slow integer method used in
,
,					// jpeg 6a library).  This method is currently (04/04/98) incompletely
,
,					// implemented.
,
,					//                        DivisorsLuminance[index] = ((double) quantum_luminance[index]) << 3;
,
,					// The divisors for the AAN method (the float method used in jpeg 6a library.
,
,					DivisorsLuminance[index] = (double) ((double) 1.0 / ((double) quantum_luminance[index]
,							* AANscaleFactor[i] * AANscaleFactor[j] * (double) 8.0));
,//					DivisorsLuminance[index] = 1;                        					
,					index++;
,
,				}
,
,			}
,
,			// Creating the chrominance matrix
,
,//			quantum_chrominance[0] = 17;
,//
,//			quantum_chrominance[1] = 18;
,//
,//			quantum_chrominance[2] = 24;
,//
,//			quantum_chrominance[3] = 47;
,//
,//			quantum_chrominance[4] = 99;
,//
,//			quantum_chrominance[5] = 99;
,//
,//			quantum_chrominance[6] = 99;
,//
,//			quantum_chrominance[7] = 99;
,//
,//			quantum_chrominance[8] = 18;
,//
,//			quantum_chrominance[9] = 21;
,//
,//			quantum_chrominance[10] = 26;
,//
,//			quantum_chrominance[11] = 66;
,//
,//			quantum_chrominance[12] = 99;
,//
,//			quantum_chrominance[13] = 99;
,//
,//			quantum_chrominance[14] = 99;
,//
,//			quantum_chrominance[15] = 99;
,//
,//			quantum_chrominance[16] = 24;
,//
,//			quantum_chrominance[17] = 26;
,//
,//			quantum_chrominance[18] = 56;
,//
,//			quantum_chrominance[19] = 99;
,//
,//			quantum_chrominance[20] = 99;
,//
,//			quantum_chrominance[21] = 99;
,//
,//			quantum_chrominance[22] = 99;
,//
,//			quantum_chrominance[23] = 99;
,//
,//			quantum_chrominance[24] = 47;
,//
,//			quantum_chrominance[25] = 66;
,//
,//			quantum_chrominance[26] = 99;
,//
,//			quantum_chrominance[27] = 99;
,//
,//			quantum_chrominance[28] = 99;
,//
,//			quantum_chrominance[29] = 99;
,//
,//			quantum_chrominance[30] = 99;
,//
,//			quantum_chrominance[31] = 99;
,//
,//			quantum_chrominance[32] = 99;
,//
,//			quantum_chrominance[33] = 99;
,//
,//			quantum_chrominance[34] = 99;
,//
,//			quantum_chrominance[35] = 99;
,//
,//			quantum_chrominance[36] = 99;
,//
,//			quantum_chrominance[37] = 99;
,//
,//			quantum_chrominance[38] = 99;
,//
,//			quantum_chrominance[39] = 99;
,//
,//			quantum_chrominance[40] = 99;
,//
,//			quantum_chrominance[41] = 99;
,//
,//			quantum_chrominance[42] = 99;
,//
,//			quantum_chrominance[43] = 99;
,//
,//			quantum_chrominance[44] = 99;
,//
,//			quantum_chrominance[45] = 99;
,//
,//			quantum_chrominance[46] = 99;
,//
,//			quantum_chrominance[47] = 99;
,//
,//			quantum_chrominance[48] = 99;
,//
,//			quantum_chrominance[49] = 99;
,//
,//			quantum_chrominance[50] = 99;
,//
,//			quantum_chrominance[51] = 99;
,//
,//			quantum_chrominance[52] = 99;
,//
,//			quantum_chrominance[53] = 99;
,//
,//			quantum_chrominance[54] = 99;
,//
,//			quantum_chrominance[55] = 99;
,//
,//			quantum_chrominance[56] = 99;
,//
,//			quantum_chrominance[57] = 99;
,//
,//			quantum_chrominance[58] = 99;
,//
,//			quantum_chrominance[59] = 99;
,//
,//			quantum_chrominance[60] = 99;
,//
,//			quantum_chrominance[61] = 99;
,//
,//			quantum_chrominance[62] = 99;
,//
,//			quantum_chrominance[63] = 99;
,
,//			for (j = 0; j < 64; j++)
,//
,//			{
,//
,//				temp = (quantum_chrominance[j] * Quality + 50) / 100;
,//			//	temp = quantum_chrominance[j];
,//
,//				if (temp <= 0)
,//					temp = 1;
,//
,//				if (temp >= 255)
,//					temp = 255;
,//
,//				quantum_chrominance[j] = temp;
,//
,//			}
,
,			index = 0;
,
,			for (i = 0; i < 8; i++) {
,
,				for (j = 0; j < 8; j++) {
,
,					// The divisors for the LL&M method (the slow integer method used in
,
,					// jpeg 6a library).  This method is currently (04/04/98) incompletely
,
,					// implemented.
,
,					//                        DivisorsChrominance[index] = ((double) quantum_chrominance[index]) << 3;
,
,					// The divisors for the AAN method (the float method used in jpeg 6a library.
,
,					DivisorsChrominance[index] = (double) ((double) 1.0 / ((double) quantum_chrominance[index]
,							* AANscaleFactor[i] * AANscaleFactor[j] * (double) 8.0));
,
,//					DivisorsChrominance[index] =1;
,					index++;
,
,				}
,
,			}
,
,			// quantum and Divisors are objects used to hold the appropriate matices
,
,			quantum[0] = quantum_luminance;
,
,			Divisors[0] = DivisorsLuminance;
,
,			quantum[1] = quantum_chrominance;
,
,			Divisors[1] = DivisorsChrominance;
,
,		}
"
6c241594-f2fc-4996-bfc9-c7ef863c220a,583622db-955c-4200-b537-d7e1940696e2,LTEQ,"int,nextDescriptorOffset,LPAREN,int,offset,RPAREN,LBRACE,IF,LPAREN,data,DOT,length,LT,offset,RPAREN,RETURN,SUB,1,SEMI,offset,PLUSEQ,ff,AMP,data,LBRACKET,offset,RBRACKET,SEMI,IF,LPAREN,data,DOT,length,<MASK>,LPAREN,offset,PLUS,2,RPAREN,RPAREN,RETURN,SUB,2,SEMI,RETURN,offset,SEMI,RBRACE","    int nextDescriptorOffset (int offset)
,    {
,	if (data.length < offset)
,	    return -1;
,
,	offset += 0xff & data [offset];
,	if (data.length <MASK> (offset + 2))
,	    return -2;
,	return offset;
,    }
"
9dc56b97-3fea-407c-9846-6a4e260a6d89,e2a86d98-dd69-4f9e-9871-e9d72b6f3249,STAR,"PRIVATE,STATIC,int,decodeSequenceNumber,LPAREN,short,sequenceNumber,RPAREN,LBRACE,RETURN,LPAREN,int,RPAREN,LPAREN,sequenceNumber,LT,0,QUES,sequenceNumber,SUB,2,<MASK>,Short,DOT,MIN_VALUE,COLON,sequenceNumber,RPAREN,SEMI,RBRACE","	private static int decodeSequenceNumber(short sequenceNumber) {
,		return (int) (sequenceNumber < 0 ? sequenceNumber - 2<MASK>Short.MIN_VALUE : sequenceNumber);
,	}
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,1a056b3d-2066-4979-8854-51f84a819a19,LT,"PUBLIC,void,run,LPAREN,RPAREN,LBRACE,aRobot,DOT,loadLevel,LPAREN,currentLevel,RPAREN,SEMI,WHILE,LPAREN,true,RPAREN,LBRACE,GameState,state,EQ,solve,LPAREN,RPAREN,SEMI,IF,LPAREN,state,EQEQ,GameState,DOT,WON,RPAREN,LBRACE,TRY,LBRACE,Thread,DOT,sleep,LPAREN,3000,RPAREN,SEMI,RBRACE,CATCH,LPAREN,InterruptedException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,int,score,EQ,StateUtil,DOT,getScore,LPAREN,ActionRobot,DOT,proxy,RPAREN,SEMI,IF,LPAREN,BANG,scores,DOT,containsKey,LPAREN,currentLevel,RPAREN,RPAREN,scores,DOT,put,LPAREN,currentLevel,COMMA,score,RPAREN,SEMI,ELSE,LBRACE,IF,LPAREN,scores,DOT,get,LPAREN,currentLevel,RPAREN,<MASK>,score,RPAREN,scores,DOT,put,LPAREN,currentLevel,COMMA,score,RPAREN,SEMI,RBRACE,int,totalScore,EQ,0,SEMI,FOR,LPAREN,Integer,key,COLON,scores,DOT,keySet,LPAREN,RPAREN,RPAREN,LBRACE,totalScore,PLUSEQ,scores,DOT,get,LPAREN,key,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,"" Level "",PLUS,key,PLUS,"" Score: "",PLUS,scores,DOT,get,LPAREN,key,RPAREN,PLUS,"" "",RPAREN,SEMI,RBRACE,System,DOT,out,DOT,println,LPAREN,""Total Score: "",PLUS,totalScore,RPAREN,SEMI,aRobot,DOT,loadLevel,LPAREN,PLUSPLUS,currentLevel,RPAREN,SEMI,tp,EQ,NEW,TrajectoryPlanner,LPAREN,RPAREN,SEMI,firstShot,EQ,true,SEMI,RBRACE,ELSE,IF,LPAREN,state,EQEQ,GameState,DOT,LOST,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""Restart"",RPAREN,SEMI,aRobot,DOT,restartLevel,LPAREN,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,state,EQEQ,GameState,DOT,LEVEL_SELECTION,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""Unexpected level selection page, go to the last current level : "",PLUS,currentLevel,RPAREN,SEMI,aRobot,DOT,loadLevel,LPAREN,currentLevel,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,state,EQEQ,GameState,DOT,MAIN_MENU,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""Unexpected main menu page, go to the last current level : "",PLUS,currentLevel,RPAREN,SEMI,ActionRobot,DOT,GoFromMainMenuToLevelSelection,LPAREN,RPAREN,SEMI,aRobot,DOT,loadLevel,LPAREN,currentLevel,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,state,EQEQ,GameState,DOT,EPISODE_MENU,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""Unexpected episode menu page, go to the last current level : "",PLUS,currentLevel,RPAREN,SEMI,ActionRobot,DOT,GoFromMainMenuToLevelSelection,LPAREN,RPAREN,SEMI,aRobot,DOT,loadLevel,LPAREN,currentLevel,RPAREN,SEMI,RBRACE,RBRACE,RBRACE","	public void run() {
,
,		aRobot.loadLevel(currentLevel);
,		while (true) {
,			GameState state = solve();
,			if (state == GameState.WON) {
,				try {
,					Thread.sleep(3000);
,				} catch (InterruptedException e) {
,					e.printStackTrace();
,				}
,				int score = StateUtil.getScore(ActionRobot.proxy);
,				if(!scores.containsKey(currentLevel))
,					scores.put(currentLevel, score);
,				else
,				{
,					if(scores.get(currentLevel) <MASK> score)
,						scores.put(currentLevel, score);
,				}
,				int totalScore = 0;
,				for(Integer key: scores.keySet()){
,
,					totalScore += scores.get(key);
,					System.out.println("" Level "" + key
,							+ "" Score: "" + scores.get(key) + "" "");
,				}
,				System.out.println(""Total Score: "" + totalScore);
,				aRobot.loadLevel(++currentLevel);
,				// make a new trajectory planner whenever a new level is entered
,				tp = new TrajectoryPlanner();
,
,				// first shot on this level, try high shot first
,				firstShot = true;
,			} else if (state == GameState.LOST) {
,				System.out.println(""Restart"");
,				aRobot.restartLevel();
,			} else if (state == GameState.LEVEL_SELECTION) {
,				System.out
,				.println(""Unexpected level selection page, go to the last current level : ""
,						+ currentLevel);
,				aRobot.loadLevel(currentLevel);
,			} else if (state == GameState.MAIN_MENU) {
,				System.out
,				.println(""Unexpected main menu page, go to the last current level : ""
,						+ currentLevel);
,				ActionRobot.GoFromMainMenuToLevelSelection();
,				aRobot.loadLevel(currentLevel);
,			} else if (state == GameState.EPISODE_MENU) {
,				System.out
,				.println(""Unexpected episode menu page, go to the last current level : ""
,						+ currentLevel);
,				ActionRobot.GoFromMainMenuToLevelSelection();
,				aRobot.loadLevel(currentLevel);
,			}
,
,		}
,
,	}
"
8ec044ff-9e5c-46c4-ad39-ccc8ad42dd87,e17c7710-780a-4396-b2f3-a94839732b0b,GT,"PUBLIC,boolean,inventoryExists,LPAREN,String,date,RPAREN,LBRACE,int,itemIndex,EQ,dates,DOT,indexOf,LPAREN,date,RPAREN,SEMI,IF,LPAREN,itemIndex,<MASK>,SUB,1,RPAREN,LBRACE,RETURN,true,SEMI,RBRACE,RETURN,false,SEMI,RBRACE","		public boolean inventoryExists(String date)
,		{
,			int itemIndex = dates.indexOf(date);
,			if(itemIndex<MASK>-1)
,			{
,				return true;
,			}
,			return false;
,		}
"
92951106-a87f-4e0c-9019-4852bf22d1be,60068e17-3643-42e8-8f1d-b0969018a607,PLUS,"PUBLIC,int,get,LPAREN,int,key,RPAREN,LBRACE,int,hash,EQ,LPAREN,key,PERCENT,this,DOT,tableSize,RPAREN,SEMI,WHILE,LPAREN,this,DOT,table,LBRACKET,hash,RBRACKET,BANGEQ,null,AMPAMP,this,DOT,table,LBRACKET,hash,RBRACKET,DOT,key,BANGEQ,key,RPAREN,LBRACE,hash,EQ,LPAREN,hash,<MASK>,1,RPAREN,PERCENT,this,DOT,tableSize,SEMI,RBRACE,IF,LPAREN,this,DOT,table,LBRACKET,hash,RBRACKET,EQEQ,null,RPAREN,LBRACE,RETURN,SUB,1,SEMI,RBRACE,ELSE,LBRACE,RETURN,this,DOT,table,LBRACKET,hash,RBRACKET,DOT,value,SEMI,RBRACE,RBRACE","    public int get(int key) {
,    	int hash = (key % this.tableSize);
,    	
,    	while (this.table[hash] != null && this.table[hash].key != key) {
,    		hash = (hash <MASK> 1) % this.tableSize;
,    	}
,    	
,    	if (this.table[hash] == null) {
,    		return -1;
,    	} else {
,    		return this.table[hash].value;
,    	}
,    }
"
31865c5a-965e-4d07-af21-44a51a00ba58,7ec9d7a2-ffb2-414a-9fce-064768e8a52d,STAR,"PROTECTED,String,evaluateDeepSearch_internalComputation,LPAREN,File,policyFileToTransfer,COMMA,File,dbSQLDumpFileToTransfer,COMMA,float,maxRisk,RPAREN,LBRACE,commonMethod,LPAREN,RPAREN,SEMI,Random,generator,EQ,NEW,Random,LPAREN,System,DOT,currentTimeMillis,LPAREN,RPAREN,RPAREN,SEMI,long,gid,EQ,generator,DOT,nextLong,LPAREN,RPAREN,SEMI,IF,LPAREN,LPAREN,policyFileToTransfer,EQEQ,null,RPAREN,BARBAR,LPAREN,dbSQLDumpFileToTransfer,EQEQ,null,RPAREN,RPAREN,LBRACE,RETURN,""Error: one or more files incorrectly received"",SEMI,RBRACE,IF,LPAREN,gid,LT,0,RPAREN,gid,EQ,gid,<MASK>,LPAREN,SUB,1,RPAREN,SEMI,dba_factory,DOT,evaluateDeepSearch,LPAREN,policyFileToTransfer,COMMA,dbSQLDumpFileToTransfer,COMMA,null,COMMA,gid,COMMA,""working_table"",COMMA,false,COMMA,maxRisk,RPAREN,SEMI,RETURN,""ID: --"",PLUS,gid,PLUS,""--"",SEMI,RBRACE","	protected String evaluateDeepSearch_internalComputation(
,			File policyFileToTransfer, File dbSQLDumpFileToTransfer, float maxRisk) {
,
,		// common initialization method
,		commonMethod();
,		
,		Random generator = new Random(System.currentTimeMillis());
,
,	
,		//Generates the ID which will be associated to the evaluation
,		long gid = generator.nextLong();
,
,		if ((policyFileToTransfer == null) || 
,				(dbSQLDumpFileToTransfer == null)) {
,			return ""Error: one or more files incorrectly received"";
,		}
,
,		if(gid<0)
,			gid = gid<MASK>(-1);
,		
,		dba_factory.evaluateDeepSearch(policyFileToTransfer,
,				dbSQLDumpFileToTransfer, null, gid, ""working_table"", false, maxRisk);
,		
,		return ""ID: --""+gid+""--"";
,	}
"
a4c68a60-241d-4ccc-bb34-58eb273247fe,c148d597-a22b-4088-8607-b50e564be2b2,PLUS,"MONKEYS_AT,Override,PUBLIC,int,hashCode,LPAREN,RPAREN,LBRACE,int,result,EQ,svnPath,BANGEQ,null,QUES,svnPath,DOT,hashCode,LPAREN,RPAREN,COLON,0,SEMI,result,EQ,31,STAR,result,<MASK>,LPAREN,repositoryUrl,BANGEQ,null,QUES,repositoryUrl,DOT,hashCode,LPAREN,RPAREN,COLON,0,RPAREN,SEMI,RETURN,result,SEMI,RBRACE","	@Override public int hashCode() {
,		int result = svnPath != null ? svnPath.hashCode() : 0;
,		result = 31 * result <MASK> (repositoryUrl != null ? repositoryUrl.hashCode() : 0);
,		return result;
,	}
"
5ee16f26-d690-4884-9baa-b57e0c8c43d6,05776dcd-e363-4e89-bc93-170678aca6b0,STAR,"PUBLIC,Matrix,multiplyFromRight,LPAREN,Matrix,other,RPAREN,LBRACE,IF,LPAREN,width,BANGEQ,other,DOT,height,RPAREN,LBRACE,THROW,NEW,IllegalArgumentException,LPAREN,""sizes don't fit"",RPAREN,SEMI,RBRACE,Matrix,result,EQ,NEW,Matrix,LPAREN,height,COMMA,other,DOT,width,RPAREN,SEMI,FOR,LPAREN,int,y,EQ,0,SEMI,y,LT,result,DOT,getHeight,LPAREN,RPAREN,SEMI,y,PLUSPLUS,RPAREN,LBRACE,FOR,LPAREN,int,x,EQ,0,SEMI,x,LT,result,DOT,getWidth,LPAREN,RPAREN,SEMI,x,PLUSPLUS,RPAREN,LBRACE,double,value,EQ,0.0,SEMI,FOR,LPAREN,int,k,EQ,0,SEMI,k,LT,width,SEMI,k,PLUSPLUS,RPAREN,LBRACE,value,PLUSEQ,getValue,LPAREN,k,COMMA,y,RPAREN,<MASK>,other,DOT,getValue,LPAREN,x,COMMA,k,RPAREN,SEMI,RBRACE,result,DOT,setValue,LPAREN,x,COMMA,y,COMMA,value,RPAREN,SEMI,RBRACE,RBRACE,RETURN,result,SEMI,RBRACE","	public Matrix multiplyFromRight(Matrix other)
,	{
,		if (width != other.height) {
,			throw new IllegalArgumentException(""sizes don't fit"");
,		}
,
,		Matrix result = new Matrix(height, other.width);
,		for (int y = 0; y < result.getHeight(); y++) {
,			for (int x = 0; x < result.getWidth(); x++) {
,				double value = 0.0;
,				for (int k = 0; k < width; k++) {
,					value += getValue(k, y) <MASK> other.getValue(x, k);
,				}
,				result.setValue(x, y, value);
,			}
,		}
,		return result;
,	}
"
09478113-8f39-4146-870b-8037a6932443,2dd84a45-7a2d-496a-a036-4ffc841924b7,EQEQ,"PRIVATE,void,loadRomOrState,LPAREN,RPAREN,LBRACE,m_romFileDialog,DOT,setMultiSelectionEnabled,LPAREN,false,RPAREN,SEMI,m_romFileDialog,DOT,addChoosableFileFilter,LPAREN,m_romFileFilter,RPAREN,SEMI,IF,LPAREN,m_romFileDialog,DOT,showOpenDialog,LPAREN,this,RPAREN,<MASK>,JFileChooser,DOT,APPROVE_OPTION,RPAREN,LBRACE,m_rom,EQ,m_romFileDialog,DOT,getSelectedFile,LPAREN,RPAREN,SEMI,m_emuConsole,DOT,getCardridge,LPAREN,RPAREN,DOT,setCartridge,LPAREN,m_rom,RPAREN,SEMI,m_emuConsole,DOT,getCPU,LPAREN,RPAREN,DOT,reset,LPAREN,RPAREN,SEMI,m_emuConsole,DOT,getTIA,LPAREN,RPAREN,DOT,reset,LPAREN,RPAREN,SEMI,m_emuConsole,DOT,getRIOT,LPAREN,RPAREN,DOT,reset,LPAREN,RPAREN,SEMI,m_emuConsole,DOT,setSystemHalted,LPAREN,true,RPAREN,SEMI,m_uiToolsPlayPause,DOT,setIcon,LPAREN,m_uiPlayIcon,RPAREN,SEMI,m_uiDisplay,DOT,setSignal,LPAREN,false,RPAREN,SEMI,m_emuConsole,DOT,getTIA,LPAREN,RPAREN,DOT,getVideo,LPAREN,RPAREN,DOT,setVisibleHeight,LPAREN,VideoMode,DOT,NTSC,COMMA,318,RPAREN,SEMI,m_uiDisplay,DOT,updateDisplayResolution,LPAREN,RPAREN,SEMI,RBRACE,RBRACE","    private void loadRomOrState()
,    {
,        m_romFileDialog.setMultiSelectionEnabled(false);
,        m_romFileDialog.addChoosableFileFilter(m_romFileFilter);
,
,        if (m_romFileDialog.showOpenDialog(this) <MASK> JFileChooser.APPROVE_OPTION)
,        {
,            m_rom = m_romFileDialog.getSelectedFile();
,            m_emuConsole.getCardridge().setCartridge(m_rom);
,
,            m_emuConsole.getCPU().reset();
,            m_emuConsole.getTIA().reset();
,            m_emuConsole.getRIOT().reset();
,
,            // thats all a little crappy... to be cleaned up
,            m_emuConsole.setSystemHalted(true);
,            m_uiToolsPlayPause.setIcon(m_uiPlayIcon);
,            m_uiDisplay.setSignal(false);
,
,            // FOR TESTING PURPOSES
,
,            m_emuConsole.getTIA().getVideo().setVisibleHeight(VideoMode.NTSC, 318);
,            m_uiDisplay.updateDisplayResolution();
,
,            //m_uiDebugger.updateDisAssembly();
,
,            // --------------------
,
,            //m_uiDisplay.start();
,        }
,    }
"
4efd15d4-7259-49ef-bb2b-8984a1154bd6,318d6039-e58e-4f66-b2b2-eb1e0ace8610,SUB,"PUBLIC,STATIC,TMDrillModel,TMgetAllTweetsByKeywordAndDate,LPAREN,String,keywords,COMMA,String,startDate,COMMA,String,endDate,RPAREN,LBRACE,ArrayList,LT,tweetModel,GT,results,EQ,NEW,ArrayList,LT,tweetModel,GT,LPAREN,RPAREN,SEMI,TMDrillModel,tmDrillModel,EQ,NEW,TMDrillModel,LPAREN,RPAREN,SEMI,String,LBRACKET,RBRACKET,start,EQ,startDate,DOT,split,LPAREN,"" "",RPAREN,SEMI,String,LBRACKET,RBRACKET,end,EQ,endDate,DOT,split,LPAREN,"" "",RPAREN,SEMI,tweetModel,t,SEMI,String,tablename,EQ,""temp-"",PLUS,keywords,PLUS,""-"",PLUS,start,LBRACKET,0,RBRACKET,PLUS,""."",PLUS,start,LBRACKET,1,RBRACKET,PLUS,""."",PLUS,start,LBRACKET,2,RBRACKET,PLUS,""-"",PLUS,end,LBRACKET,0,RBRACKET,PLUS,""."",PLUS,end,LBRACKET,1,RBRACKET,PLUS,""."",PLUS,end,LBRACKET,2,RBRACKET,SEMI,SEMI,tablename,EQ,tablename,DOT,replaceAll,LPAREN,"","",COMMA,""|"",RPAREN,SEMI,tablename,EQ,tablename,DOT,replaceAll,LPAREN,"";"",COMMA,""|"",RPAREN,SEMI,tablename,EQ,tablename,DOT,replaceAll,LPAREN,"" "",COMMA,"""",RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,tablename,RPAREN,SEMI,keywords,EQ,keywords,DOT,replaceAll,LPAREN,"","",COMMA,""%' and message like '%"",RPAREN,SEMI,keywords,EQ,keywords,DOT,replaceAll,LPAREN,"";"",COMMA,""%' or message like '%"",RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,keywords,RPAREN,SEMI,String,whereCondition,EQ,"""",SEMI,int,year,EQ,Integer,DOT,parseInt,LPAREN,start,LBRACKET,2,RBRACKET,RPAREN,SEMI,FOR,LPAREN,int,month,EQ,monthNumber,LPAREN,start,LBRACKET,0,RBRACKET,RPAREN,SEMI,month,LTEQ,monthNumber,LPAREN,end,LBRACKET,0,RBRACKET,RPAREN,SEMI,month,PLUSPLUS,RPAREN,LBRACE,int,currentday,EQ,1,SEMI,IF,LPAREN,month,EQEQ,monthNumber,LPAREN,start,LBRACKET,0,RBRACKET,RPAREN,RPAREN,currentday,EQ,Integer,DOT,parseInt,LPAREN,start,LBRACKET,1,RBRACKET,RPAREN,SEMI,FOR,LPAREN,int,day,EQ,currentday,SEMI,day,LTEQ,numDaysinMonth,LPAREN,month,RPAREN,SEMI,day,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,month,EQEQ,monthNumber,LPAREN,end,LBRACKET,0,RBRACKET,RPAREN,AMPAMP,day,GT,Integer,DOT,parseInt,LPAREN,end,LBRACKET,1,RBRACKET,RPAREN,RPAREN,BREAK,SEMI,IF,LPAREN,whereCondition,DOT,equals,LPAREN,"""",RPAREN,RPAREN,whereCondition,EQ,""'"",PLUS,start,LBRACKET,1,RBRACKET,PLUS,"" "",PLUS,start,LBRACKET,0,RBRACKET,PLUS,"" "",PLUS,start,LBRACKET,2,RBRACKET,PLUS,""%'"",SEMI,ELSE,whereCondition,EQ,whereCondition,DOT,concat,LPAREN,"" or date like '"",PLUS,day,PLUS,"" "",PLUS,monthName,LPAREN,month,RPAREN,PLUS,"" "",PLUS,year,PLUS,""%'"",RPAREN,SEMI,RBRACE,RBRACE,System,DOT,out,DOT,println,LPAREN,""[3] "",PLUS,whereCondition,RPAREN,SEMI,TRY,LBRACE,Connection,c,EQ,DBFactory,DOT,getConnection,LPAREN,RPAREN,SEMI,PreparedStatement,ps,EQ,c,DOT,prepareStatement,LPAREN,""DROP TABLE IF EXISTS `"",PLUS,tablename,PLUS,""`; "",RPAREN,SEMI,ps,DOT,execute,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,ps,RPAREN,SEMI,ps,EQ,c,DOT,prepareStatement,LPAREN,""CREATE TABLE `"",PLUS,tablename,PLUS,""` ("",PLUS,""`username` varchar(20) NOT NULL,"",PLUS,""`date` varchar(30) NOT NULL,"",PLUS,""`message` varchar(180) NOT NULL"",PLUS,"")ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;"",RPAREN,SEMI,ps,DOT,execute,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,ps,RPAREN,SEMI,ps,EQ,c,DOT,prepareStatement,LPAREN,""INSERT INTO `"",PLUS,tablename,PLUS,""` (username, date, message) "",PLUS,""SELECT username, date, message FROM `tweets` "",PLUS,""WHERE (message like '%"",PLUS,keywords,PLUS,""%')"",PLUS,""and (date like "",PLUS,whereCondition,PLUS,"" )"",RPAREN,SEMI,ps,DOT,execute,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,ps,RPAREN,SEMI,ps,EQ,c,DOT,prepareStatement,LPAREN,""SELECT * from `"",PLUS,tablename,PLUS,""`;"",RPAREN,SEMI,ResultSet,rs,EQ,ps,DOT,executeQuery,LPAREN,RPAREN,SEMI,WHILE,LPAREN,rs,DOT,next,LPAREN,RPAREN,RPAREN,LBRACE,t,EQ,NEW,tweetModel,LPAREN,RPAREN,SEMI,t,DOT,setUsername,LPAREN,rs,DOT,getString,LPAREN,""username"",RPAREN,RPAREN,SEMI,t,DOT,setDate,LPAREN,rs,DOT,getString,LPAREN,""date"",RPAREN,RPAREN,SEMI,t,DOT,setMessage,LPAREN,cleanTweet,LPAREN,rs,DOT,getString,LPAREN,""message"",RPAREN,RPAREN,RPAREN,SEMI,results,DOT,add,LPAREN,t,RPAREN,SEMI,RBRACE,rs,DOT,close,LPAREN,RPAREN,SEMI,ps,DOT,close,LPAREN,RPAREN,SEMI,c,DOT,close,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""******************************* "",RPAREN,SEMI,TopicModel,tm,EQ,NEW,TopicModel,LPAREN,RPAREN,SEMI,IF,LPAREN,results,DOT,isEmpty,LPAREN,RPAREN,RPAREN,LBRACE,tmDrillModel,EQ,NEW,TMDrillModel,LPAREN,<MASK>,1,RPAREN,SEMI,RBRACE,ELSE,LBRACE,tm,DOT,importData,LPAREN,results,RPAREN,SEMI,tm,DOT,trainTopics,LPAREN,RPAREN,SEMI,tmDrillModel,EQ,NEW,TMDrillModel,LPAREN,0,COMMA,tablename,COMMA,tm,DOT,getAllTopics,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,CATCH,LPAREN,ClassNotFoundException,ex,RPAREN,LBRACE,Logger,DOT,getLogger,LPAREN,tweetHandler,DOT,CLASS,DOT,getName,LPAREN,RPAREN,RPAREN,DOT,log,LPAREN,Level,DOT,SEVERE,COMMA,null,COMMA,ex,RPAREN,SEMI,RBRACE,CATCH,LPAREN,SQLException,ex,RPAREN,LBRACE,Logger,DOT,getLogger,LPAREN,tweetHandler,DOT,CLASS,DOT,getName,LPAREN,RPAREN,RPAREN,DOT,log,LPAREN,Level,DOT,SEVERE,COMMA,null,COMMA,ex,RPAREN,SEMI,RBRACE,RETURN,tmDrillModel,SEMI,RBRACE","    public static TMDrillModel TMgetAllTweetsByKeywordAndDate(String keywords, String startDate, String endDate){
,        ArrayList<tweetModel> results = new ArrayList<tweetModel>();
,        TMDrillModel tmDrillModel = new TMDrillModel();
,        
,        String[] start = startDate.split("" "");
,        String[] end = endDate.split("" "");
,        tweetModel t;
,        
,        String tablename = ""temp<MASK>""+keywords+""-""+start[0]+"".""+start[1]+"".""+start[2]+""-""+end[0]+"".""+end[1]+"".""+end[2];;
,        tablename = tablename.replaceAll("","", ""|"");
,        tablename = tablename.replaceAll("";"", ""|"");
,        tablename = tablename.replaceAll("" "", """");
,           System.out.println(tablename);
,        
,           
,        keywords = keywords.replaceAll("","", ""%\' and message like \'%"");
,        keywords = keywords.replaceAll("";"", ""%\' or message like \'%""); 
,          System.out.println(keywords);
, 
,        String whereCondition = """";
,        
,        int year = Integer.parseInt(start[2]);
,//        for(int year = Integer.parseInt(start[2]); year <= Integer.parseInt(end[2]); year++){
,            for(int month = monthNumber(start[0]); month <= monthNumber(end[0]); month++){
,                int currentday = 1;
,                if(month == monthNumber(start[0]))
,                    currentday = Integer.parseInt(start[1]);
,                
,                for(int day = currentday; day <= numDaysinMonth(month); day++){
,                    if(month == monthNumber(end[0]) && day > Integer.parseInt(end[1]))
,                        break;
,                    if(whereCondition.equals(""""))
,                        whereCondition = ""'"" + start[1] + "" "" + start[0] + "" "" + start[2] + ""%'"";
,                    else
,                        whereCondition = whereCondition.concat("" or date like '"" + day + "" "" + monthName(month) + "" "" + year +""%'"");
,//                    System.out.println(whereCondition);
,                }
,            }
,//        }
,        System.out.println(""[3] "" + whereCondition);
,        
,          try{
,            Connection c = DBFactory.getConnection();
,            PreparedStatement ps = c.prepareStatement(
,                ""DROP TABLE IF EXISTS `"" + tablename + ""`; ""
,                );
,                ps.execute();
,                System.out.println(ps);
,            ps = c.prepareStatement(
,                ""CREATE TABLE `"" + tablename + ""` ("" +
,                ""`username` varchar(20) NOT NULL,"" +
,                ""`date` varchar(30) NOT NULL,"" +
,                ""`message` varchar(180) NOT NULL"" +
,                "")ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;""
,                );
,                ps.execute();
,                System.out.println(ps);
,            ps = c.prepareStatement(
,                ""INSERT INTO `"" + tablename + ""` (username, date, message) "" + 
,                ""SELECT username, date, message FROM `tweets` "" +
,                ""WHERE (message like '%"" + keywords + ""%')"" +
,                ""and (date like ""+whereCondition+"" )""); 
,                ps.execute();   
,                System.out.println(ps);
,            
,            ps = c.prepareStatement(""SELECT * from `"" + tablename + ""`;"");
,            ResultSet rs = ps.executeQuery();
,            
,            while(rs.next()){
,                t = new tweetModel();
,                t.setUsername(rs.getString(""username""));
,                t.setDate(rs.getString(""date""));
,                t.setMessage(cleanTweet(rs.getString(""message"")));
,                results.add(t);
,            }
,            
,            rs.close();
,            ps.close();
,            c.close();
,            
,            System.out.println(""******************************* "");
,            TopicModel tm = new TopicModel();
,            
,            if(results.isEmpty()){
,                tmDrillModel = new TMDrillModel(-1);
,            }else{
,                tm.importData(results);
,                tm.trainTopics();
,                tmDrillModel = new TMDrillModel(0, tablename, tm.getAllTopics());
,            }
,            
,        }catch(ClassNotFoundException ex){
,            Logger.getLogger(tweetHandler.class.getName()).log(Level.SEVERE, null, ex);
,        }catch(SQLException ex){
,            Logger.getLogger(tweetHandler.class.getName()).log(Level.SEVERE, null, ex);
,        }
,        
,        return tmDrillModel;
,    }
"
113c5414-6c55-466b-b879-a350ab6e0ca2,086a5531-8127-42d0-9cb9-838a41636ae3,EQ,"PUBLIC,void,setTile,LPAREN,int,x,COMMA,int,y,COMMA,Tile,tile,RPAREN,LBRACE,grid,LBRACKET,x,RBRACKET,LBRACKET,y,RBRACKET,<MASK>,tile,SEMI,tile,DOT,setRow,LPAREN,y,RPAREN,SEMI,tile,DOT,setColumn,LPAREN,x,RPAREN,SEMI,RBRACE","	public void setTile(int x, int y, Tile tile){
,		grid[x][y] <MASK> tile;
,		tile.setRow(y);
,		tile.setColumn(x);
,	}
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,364aec57-5d34-4980-a9d4-3b58e24359c4,LT,"PUBLIC,STATIC,boolean,verify,LPAREN,byte,buffer,LBRACKET,RBRACKET,RPAREN,LBRACE,byte,sum,EQ,0,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,MESSAGE_SIZE,SUB,1,SEMI,i,PLUSPLUS,RPAREN,LBRACE,sum,PLUSEQ,buffer,LBRACKET,i,RBRACKET,SEMI,RBRACE,RETURN,LPAREN,sum,EQEQ,buffer,LBRACKET,MESSAGE_SIZE,SUB,1,RBRACKET,RPAREN,SEMI,RBRACE","	public static boolean verify(byte buffer[]){
,		byte sum=0;
,		for(int i=0; i<MASK>MESSAGE_SIZE-1; i++){
,			sum+=buffer[i];
,		}
,		//System.out.println(""sum:""+sum+"" buffer[BUFFER_SIZE-1]:""+buffer[BUFFER_SIZE-1]);
,		return (sum == buffer[MESSAGE_SIZE-1]);		
,	}
"
ea91ca9d-c4a2-44a2-9a1f-e35ca896736e,e3a172d9-d087-4921-9638-5a835d6f65e9,LTEQ,"PUBLIC,void,back,LPAREN,RPAREN,THROWS,JSONException,LBRACE,IF,LPAREN,this,DOT,usePrevious,BARBAR,this,DOT,index,<MASK>,0,RPAREN,LBRACE,THROW,NEW,JSONException,LPAREN,""Stepping back two steps is not supported"",RPAREN,SEMI,RBRACE,this,DOT,index,SUBEQ,1,SEMI,this,DOT,character,SUBEQ,1,SEMI,this,DOT,usePrevious,EQ,true,SEMI,this,DOT,eof,EQ,false,SEMI,RBRACE","    public void back() throws JSONException {
,        if (this.usePrevious || this.index <MASK> 0) {
,            throw new JSONException(""Stepping back two steps is not supported"");
,        }
,        this.index -= 1;
,        this.character -= 1;
,        this.usePrevious = true;
,        this.eof = false;
,    }
"
7adec7d8-cee7-4225-a9f6-43a8dd4e76a6,fd37c45b-3f00-4d4e-967a-855c58a3c65e,STAR,"PUBLIC,int,MarketSell,LPAREN,String,product,COMMA,String,strTime,COMMA,double,price,COMMA,int,amount,RPAREN,LBRACE,TRY,LBRACE,SimpleDateFormat,ft,EQ,NEW,SimpleDateFormat,LPAREN,""yyyy-MM-dd HH:mm:ss"",RPAREN,SEMI,Date,time,EQ,ft,DOT,parse,LPAREN,strTime,RPAREN,SEMI,Transaction,tx,EQ,this,DOT,session,DOT,beginTransaction,LPAREN,RPAREN,SEMI,Query,q,EQ,session,DOT,createQuery,LPAREN,""from Position where product = :product"",RPAREN,SEMI,q,DOT,setParameter,LPAREN,""product"",COMMA,product,RPAREN,SEMI,List,list,EQ,q,DOT,list,LPAREN,RPAREN,SEMI,Position,p,EQ,null,SEMI,IF,LPAREN,list,DOT,size,LPAREN,RPAREN,EQEQ,0,RPAREN,LBRACE,p,EQ,NEW,Position,LPAREN,this,DOT,account,COMMA,product,COMMA,amount,<MASK>,SUB,1,RPAREN,SEMI,session,DOT,save,LPAREN,p,RPAREN,SEMI,this,DOT,OpenSellTransaction,LPAREN,time,COMMA,product,COMMA,price,COMMA,amount,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,list,DOT,size,LPAREN,RPAREN,EQEQ,1,RPAREN,LBRACE,p,EQ,LPAREN,Position,RPAREN,list,DOT,get,LPAREN,0,RPAREN,SEMI,int,totalAmount,EQ,p,DOT,getAmount,LPAREN,RPAREN,SUB,amount,SEMI,IF,LPAREN,p,DOT,getAmount,LPAREN,RPAREN,LT,0,RPAREN,LBRACE,p,DOT,setAmount,LPAREN,totalAmount,RPAREN,SEMI,session,DOT,update,LPAREN,p,RPAREN,SEMI,this,DOT,OpenSellTransaction,LPAREN,time,COMMA,product,COMMA,price,COMMA,amount,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,p,DOT,getAmount,LPAREN,RPAREN,GT,0,RPAREN,LBRACE,IF,LPAREN,totalAmount,LT,0,RPAREN,LBRACE,THROW,NEW,CloseMoreThanOpened,LPAREN,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,totalAmount,EQEQ,0,RPAREN,LBRACE,session,DOT,delete,LPAREN,p,RPAREN,SEMI,this,DOT,CloseSellTransaction,LPAREN,time,COMMA,product,COMMA,price,COMMA,amount,RPAREN,SEMI,RBRACE,ELSE,LBRACE,p,DOT,setAmount,LPAREN,totalAmount,RPAREN,SEMI,session,DOT,update,LPAREN,p,RPAREN,SEMI,this,DOT,CloseSellTransaction,LPAREN,time,COMMA,product,COMMA,price,COMMA,amount,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,ELSE,LBRACE,THROW,NEW,MultiplePositions,LPAREN,product,RPAREN,SEMI,RBRACE,tx,DOT,commit,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,String,DOT,format,LPAREN,""%s - sell %d mini lot %s at %f"",COMMA,strTime,COMMA,amount,COMMA,product,COMMA,price,RPAREN,RPAREN,SEMI,RETURN,p,DOT,getId,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,ParseException,ex,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""Error occurred when parsing "",PLUS,strTime,RPAREN,SEMI,ex,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,RETURN,0,SEMI,RBRACE","	public int MarketSell(String product, String strTime, double price, int amount) {
,		try {
,            SimpleDateFormat ft = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"");
,            Date time = ft.parse(strTime);
,			Transaction tx = this.session.beginTransaction();
,            Query q = session.createQuery(""from Position where product = :product"");
,            q.setParameter(""product"", product);
,            List list = q.list();
,            Position p = null;
,            if(list.size() == 0) {
,                p = new Position(this.account, product, amount<MASK>-1);
,                session.save(p);
,                this.OpenSellTransaction(time, product, price, amount);
,            }
,            else if(list.size() == 1) { // add to existing position or close position
,                p = (Position) list.get(0);
,                int totalAmount = p.getAmount() - amount;
,                if(p.getAmount() < 0) { // add to existing position
,                    p.setAmount(totalAmount);
,                    session.update(p);
,                    this.OpenSellTransaction(time, product, price, amount);
,                }
,                else if(p.getAmount() > 0) { // close existing position
,                    if(totalAmount < 0) {
,                        throw new CloseMoreThanOpened();
,                    }
,                    else if(totalAmount == 0) {
,                        session.delete(p);
,                        this.CloseSellTransaction(time, product, price, amount);
,                    }
,                    else {
,                        p.setAmount(totalAmount);
,                        session.update(p);
,                        this.CloseSellTransaction(time, product, price, amount);
,                    }
,                }
,            }
,            else {
,                throw new MultiplePositions(product);
,            }
,			tx.commit();
,			System.out.println(String.format(""%s - sell %d mini lot %s at %f"", strTime, amount, product, price));
,			return p.getId();
,		}
,		catch(ParseException ex) {
,			System.out.println(""Error occurred when parsing "" + strTime);
,			ex.printStackTrace();
,		}
,
,		return 0;
,	}
"
a4c68a60-241d-4ccc-bb34-58eb273247fe,d5399a81-682d-40bd-ae7b-bb9f7e596e11,PLUS,"STATIC,List,LT,VcsCommit,GT,parseCommits,LPAREN,String,xml,RPAREN,LBRACE,TRY,LBRACE,CommitReadingHandler,commitReadingHandler,EQ,NEW,CommitReadingHandler,LPAREN,RPAREN,SEMI,SAXParserFactory,parserFactory,EQ,SAXParserFactory,DOT,newInstance,LPAREN,RPAREN,SEMI,XMLReader,xmlReader,EQ,parserFactory,DOT,newSAXParser,LPAREN,RPAREN,DOT,getXMLReader,LPAREN,RPAREN,SEMI,xmlReader,DOT,setContentHandler,LPAREN,commitReadingHandler,RPAREN,SEMI,xmlReader,DOT,parse,LPAREN,NEW,InputSource,LPAREN,NEW,StringReader,LPAREN,xml,RPAREN,RPAREN,RPAREN,SEMI,RETURN,commitReadingHandler,DOT,commits,SEMI,RBRACE,CATCH,LPAREN,SAXException,e,RPAREN,LBRACE,THROW,NEW,RuntimeException,LPAREN,""Failed to parse xml: "",<MASK>,xml,COMMA,e,RPAREN,SEMI,RBRACE,CATCH,LPAREN,ParserConfigurationException,BAR,IOException,e,RPAREN,LBRACE,THROW,NEW,RuntimeException,LPAREN,e,RPAREN,SEMI,RBRACE,RBRACE","	static List<VcsCommit> parseCommits(String xml) {
,		try {
,			CommitReadingHandler commitReadingHandler = new CommitReadingHandler();
,
,			SAXParserFactory parserFactory = SAXParserFactory.newInstance();
,			XMLReader xmlReader = parserFactory.newSAXParser().getXMLReader();
,			xmlReader.setContentHandler(commitReadingHandler);
,			xmlReader.parse(new InputSource(new StringReader(xml)));
,
,			return commitReadingHandler.commits;
,		} catch (SAXException e) {
,			throw new RuntimeException(""Failed to parse xml: "" <MASK> xml, e);
,		} catch (ParserConfigurationException | IOException e) {
,			throw new RuntimeException(e);
,		}
,	}
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,ef71428d-191a-4895-98e1-6ff4285d733c,LT,"PROTECTED,INDIDevice,getDevice,LPAREN,String,deviceName,RPAREN,LBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,devices,DOT,size,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,devices,DOT,get,LPAREN,i,RPAREN,DOT,hasName,LPAREN,deviceName,RPAREN,RPAREN,LBRACE,RETURN,devices,DOT,get,LPAREN,i,RPAREN,SEMI,RBRACE,RBRACE,RETURN,null,SEMI,RBRACE","  protected INDIDevice getDevice(String deviceName) {
,    for (int i = 0 ; i <MASK> devices.size() ; i++) {
,      if (devices.get(i).hasName(deviceName)) {
,        return devices.get(i);
,      }
,    }
,
,    return null;
,  }
"
33a4da69-3c87-4617-ac37-92c20f86f62c,026f2906-f75c-4bea-a670-0bd9e361441c,PLUS,"PUBLIC,void,setFormula,LPAREN,String,LBRACKET,RBRACKET,formula,RPAREN,LBRACE,int,dim,EQ,1,SEMI,IF,LPAREN,formula,BANGEQ,null,RPAREN,dim,EQ,formula,DOT,length,SEMI,ELSE,formula,EQ,NEW,String,LBRACKET,RBRACKET,LBRACE,""0"",RBRACE,SEMI,IF,LPAREN,numSpinner,BANGEQ,null,RPAREN,numSpinner,DOT,setCrt,LPAREN,dim,RPAREN,SEMI,IF,LPAREN,numField,BANGEQ,null,RPAREN,numField,DOT,setText,LPAREN,"""",<MASK>,dim,RPAREN,SEMI,this,DOT,formula,EQ,formula,SEMI,display,LPAREN,RPAREN,SEMI,RBRACE","	public void setFormula(String[] formula) {
,		int dim = 1;
,		if (formula != null)
,			dim = formula.length;
,		else
,			formula = new String[] { ""0"" };
,		if (numSpinner != null)
,			numSpinner.setCrt(dim);
,		if (numField != null)
,			numField.setText("""" <MASK> dim);
,
,		this.formula = formula;
,
,		display();
,	}
"
b61d6017-337e-4ccd-b964-a6b5e3d0cb20,0b21d1be-d3e5-4c50-800b-b6e8d1831761,EQEQ,"PUBLIC,Menu,select,LPAREN,int,index,RPAREN,LBRACE,IF,LPAREN,index,<MASK>,PREVIOUS,RPAREN,LBRACE,IF,LPAREN,_parent,BANGEQ,this,RPAREN,LBRACE,RETURN,_parent,SEMI,RBRACE,ELSE,LBRACE,System,DOT,out,DOT,println,LPAREN,""[Menu] The menu option you have selected is not valid!"",RPAREN,SEMI,RETURN,this,SEMI,RBRACE,RBRACE,RETURN,_selector,DOT,select,LPAREN,this,COMMA,index,RPAREN,SEMI,RBRACE","    public Menu select(int index) {
,        /* Top menu does not have a PREVIOUS option */
,        if (index <MASK> PREVIOUS) {
,            if (_parent != this) {
,                return _parent;
,            } else {
,                System.out
,                    .println(""[Menu] The menu option you have selected is not valid!"");
,                return this;
,            }
,        }
,
,        return _selector.select(this, index);
,    }
"
113c5414-6c55-466b-b879-a350ab6e0ca2,aa1351f2-22c8-461a-bc86-4b5dff06b0f0,EQ,"PUBLIC,STATIC,String,LBRACKET,RBRACKET,csvHeaders,LPAREN,RPAREN,LBRACE,String,LBRACKET,RBRACKET,headers,<MASK>,LBRACE,""Name"",COMMA,""HP"",COMMA,""NaturalArmour"",COMMA,""Strength"",COMMA,""Dexterity"",COMMA,""Speed"",COMMA,""AttackBonus"",COMMA,""BaseMeleeDamage"",COMMA,""BaseMeleeDescription"",COMMA,""SightRange"",COMMA,""Difficulty"",COMMA,""Special"",RBRACE,SEMI,RETURN,headers,SEMI,RBRACE","	public static String[] csvHeaders() {
,		String[] headers <MASK> {""Name"", ""HP"", ""NaturalArmour"", ""Strength"", ""Dexterity"", ""Speed"", ""AttackBonus"", ""BaseMeleeDamage"", ""BaseMeleeDescription"", ""SightRange"", ""Difficulty"", ""Special""};
,		return headers;
,	}
"
b5ee7e5e-a7bf-41d4-8880-3ac95d2f8822,c7cdd656-77a9-413c-9b4b-7bd8eb7c2017,BANGEQ,"PRIVATE,void,init,LPAREN,InputStream,inputstream,RPAREN,THROWS,JDBFException,LBRACE,TRY,LBRACE,stream,EQ,NEW,DataInputStream,LPAREN,inputstream,RPAREN,SEMI,int,i,EQ,readHeader,LPAREN,RPAREN,SEMI,fields,EQ,NEW,JDBField,LBRACKET,i,RBRACKET,SEMI,int,j,EQ,1,SEMI,FOR,LPAREN,int,k,EQ,0,SEMI,k,LT,i,SEMI,k,PLUSPLUS,RPAREN,LBRACE,fields,LBRACKET,k,RBRACKET,EQ,readFieldHeader,LPAREN,RPAREN,SEMI,IF,LPAREN,fields,LBRACKET,k,RBRACKET,<MASK>,null,RPAREN,LBRACE,nFieldCount,PLUSPLUS,SEMI,j,PLUSEQ,fields,LBRACKET,k,RBRACKET,DOT,getLength,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,nextRecord,EQ,NEW,byte,LBRACKET,j,RBRACKET,SEMI,TRY,LBRACE,stream,DOT,readFully,LPAREN,nextRecord,RPAREN,SEMI,RBRACE,CATCH,LPAREN,EOFException,eofexception,RPAREN,LBRACE,nextRecord,EQ,null,SEMI,stream,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,int,pos,EQ,0,SEMI,boolean,hasBegin,EQ,false,SEMI,FOR,LPAREN,int,p,EQ,0,SEMI,p,LT,j,SEMI,p,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,nextRecord,LBRACKET,p,RBRACKET,EQEQ,20,BARBAR,nextRecord,LBRACKET,p,RBRACKET,EQEQ,2A,RPAREN,LBRACE,hasBegin,EQ,true,SEMI,pos,EQ,p,SEMI,BREAK,SEMI,RBRACE,RBRACE,IF,LPAREN,pos,GT,0,RPAREN,LBRACE,byte,LBRACKET,RBRACKET,others,EQ,NEW,byte,LBRACKET,pos,RBRACKET,SEMI,stream,DOT,readFully,LPAREN,others,RPAREN,SEMI,FOR,LPAREN,int,p,EQ,0,SEMI,p,LT,j,SUB,pos,SEMI,p,PLUSPLUS,RPAREN,LBRACE,nextRecord,LBRACKET,p,RBRACKET,EQ,nextRecord,LBRACKET,p,PLUS,pos,RBRACKET,SEMI,RBRACE,FOR,LPAREN,int,p,EQ,0,SEMI,p,LT,pos,SEMI,p,PLUSPLUS,RPAREN,LBRACE,nextRecord,LBRACKET,j,SUB,p,SUB,1,RBRACKET,EQ,others,LBRACKET,pos,SUB,p,SUB,1,RBRACKET,SEMI,RBRACE,RBRACE,RBRACE,CATCH,LPAREN,IOException,ioexception,RPAREN,LBRACE,THROW,NEW,JDBFException,LPAREN,ioexception,RPAREN,SEMI,RBRACE,RBRACE","	private void init(InputStream inputstream) throws JDBFException {
,		try {
,			stream = new DataInputStream(inputstream);
,			int i = readHeader();
,			fields = new JDBField[i];
,			int j = 1;
,			for (int k = 0; k < i; k++) {
,				fields[k] = readFieldHeader();
,				if (fields[k] <MASK> null) {
,					nFieldCount++;
,					j += fields[k].getLength();
,				}
,			}
,
,			nextRecord = new byte[j];
,			try {
,				stream.readFully(nextRecord);
,			} catch (EOFException eofexception) {
,				nextRecord = null;
,				stream.close();
,			}
,
,			int pos = 0;
,			boolean hasBegin = false;
,			for (int p = 0; p < j; p++) {
,				if (nextRecord[p] == 0X20 || nextRecord[p] == 0X2A) {
,					hasBegin = true;
,					pos = p;
,					break;
,				}
,			}
,			if (pos > 0) {
,				byte[] others = new byte[pos];
,				stream.readFully(others);
,
,				for (int p = 0; p < j - pos; p++) {
,					nextRecord[p] = nextRecord[p + pos];
,				}
,				for (int p = 0; p < pos; p++) {
,					nextRecord[j - p - 1] = others[pos - p - 1];
,				}
,			}
,
,		} catch (IOException ioexception) {
,			throw new JDBFException(ioexception);
,		}
,	}
"
2c256aad-07f6-40b2-9094-75e0a779805c,c604ede4-dd53-4968-a54c-9ab9d3aff4bc,PERCENT,"PUBLIC,STATIC,List,LT,Player,GT,createPlayerList,LPAREN,List,LT,PlayerInfo,GT,playerInfos,COMMA,RuleSet,ruleSet,RPAREN,LBRACE,List,LT,Player,GT,playerList,EQ,NEW,ArrayList,LT,Player,GT,LPAREN,RPAREN,SEMI,PlayerFactory,playerFactory,EQ,NEW,PlayerFactory,LPAREN,ruleSet,COMMA,playerInfos,DOT,size,LPAREN,RPAREN,RPAREN,SEMI,FOR,LPAREN,PlayerInfo,playerInfo,COLON,playerInfos,RPAREN,LBRACE,playerList,DOT,add,LPAREN,playerFactory,DOT,getPlayer,LPAREN,playerInfo,RPAREN,RPAREN,SEMI,RBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,playerList,DOT,size,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,playerList,DOT,get,LPAREN,i,RPAREN,DOT,setLeftPlayer,LPAREN,playerList,DOT,get,LPAREN,LPAREN,i,PLUS,1,RPAREN,<MASK>,playerList,DOT,size,LPAREN,RPAREN,RPAREN,DOT,getId,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,RETURN,playerList,SEMI,RBRACE","	public static List<Player> createPlayerList(List<PlayerInfo> playerInfos, RuleSet ruleSet) {
,		
,		List<Player> playerList = new ArrayList<Player>();
,		
,		PlayerFactory playerFactory = new PlayerFactory(ruleSet, playerInfos.size());
,		
,		for (PlayerInfo playerInfo : playerInfos) {
,			playerList.add(playerFactory.getPlayer(playerInfo));
,		}
,		
,		// must set left player of each player
,		for (int i = 0; i < playerList.size(); i++) {
,			playerList.get(i).setLeftPlayer(playerList.get((i+1) <MASK> playerList.size()).getId());
,		}
,		
,		return playerList;
,		
,	}
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,d0016f4c-820b-4e66-9ccf-2988bfde8a2f,BANGEQ,"PUBLIC,STATIC,List,LT,Point2D,GT,ConnectionPoint,LPAREN,ABObject,o1,COMMA,ABObject,o2,RPAREN,LBRACE,List,LT,Point2D,GT,connection_p,EQ,NEW,ArrayList,LT,Point2D,GT,LPAREN,RPAREN,SEMI,IF,LPAREN,o1,DOT,id,<MASK>,o2,DOT,id,RPAREN,LBRACE,List,LT,Point2D,GT,pointsO1,EQ,MathFunctions,DOT,getObjectContourPoints,LPAREN,o1,RPAREN,SEMI,List,LT,Point2D,GT,pointsO2,EQ,MathFunctions,DOT,getObjectContourPoints,LPAREN,o2,RPAREN,SEMI,double,error_distance,EQ,2.0,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,pointsO1,DOT,size,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,Point2D,p1,EQ,pointsO1,DOT,get,LPAREN,i,RPAREN,SEMI,FOR,LPAREN,int,j,EQ,0,SEMI,j,LT,pointsO2,DOT,size,LPAREN,RPAREN,SEMI,j,PLUSPLUS,RPAREN,LBRACE,Point2D,p2,EQ,pointsO2,DOT,get,LPAREN,j,RPAREN,SEMI,double,distance,EQ,Distance2Points,LPAREN,p1,COMMA,p2,RPAREN,SEMI,IF,LPAREN,distance,LT,error_distance,RPAREN,LBRACE,connection_p,DOT,add,LPAREN,p1,RPAREN,SEMI,connection_p,DOT,add,LPAREN,p2,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,RBRACE,RETURN,connection_p,SEMI,RBRACE","	public static List<Point2D> ConnectionPoint (ABObject o1, ABObject o2)
,	{
,		List<Point2D> connection_p = new ArrayList<Point2D>();
,		if (o1.id <MASK> o2.id)
,		{
,			List<Point2D> pointsO1 = MathFunctions.getObjectContourPoints(o1);
,			List<Point2D> pointsO2 = MathFunctions.getObjectContourPoints(o2);
,			//System.out.println(""Object "" + o1.id + "" size : "" + pointsO1.size());
,			//System.out.println(""Object "" + o2.id + "" size : "" + pointsO2.size());
,			double error_distance = 2.0;
,			
,			for (int i = 0; i < pointsO1.size(); i++)
,			{
,				Point2D p1 = pointsO1.get(i);
,				for (int j = 0; j < pointsO2.size(); j++)
,				{
,					Point2D p2 = pointsO2.get(j);
,					double distance = Distance2Points(p1, p2);
,					//System.out.println(""Distance between "" + p1 + "", "" + p2 + "" = "" + distance);
,					if (distance < error_distance)
,					{
,						/*System.out.println(""Distance between "" + ""("" +  p1.x + "", "" + p1.y + "")"" + 
,									""("" + p2.x + "", "" + p2.y + "")"" + 
,								"" = "" + distance);*/
,						connection_p.add(p1);
,						connection_p.add(p2);
,					}
,				}
,			}
,		}
,		return connection_p;
,	}
"
01c59a48-47c5-47fe-9d56-82849516c5e7,5b50bca7-d478-402c-82ec-cb3e17f26afe,GTEQ,"PUBLIC,String,LBRACKET,RBRACKET,getHourlyPastPrecip,LPAREN,RPAREN,THROWS,Exception,LBRACE,String,LBRACKET,RBRACKET,precipPast,EQ,NEW,String,LBRACKET,pastTimes,DOT,length,RBRACKET,SEMI,TRY,LBRACE,layers,PLUSPLUS,SEMI,BufferedReader,br,EQ,NEW,BufferedReader,LPAREN,NEW,InputStreamReader,LPAREN,NEW,URL,LPAREN,MakeURL,DOT,pastHourlyURL,LPAREN,zip,RPAREN,RPAREN,DOT,openStream,LPAREN,RPAREN,RPAREN,RPAREN,SEMI,String,line,EQ,br,DOT,readLine,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,pastTimes,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,precipPast,LBRACKET,i,RBRACKET,EQ,"""",SEMI,RBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,pastTimes,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,TRY,LBRACE,IF,LPAREN,pastTimes,DOT,length,SUB,1,SUB,i,<MASK>,2,RPAREN,LBRACE,WHILE,LPAREN,BANG,line,DOT,contains,LPAREN,""<b>"",PLUS,pastTimes,LBRACKET,i,RBRACKET,PLUS,"":"",RPAREN,AMPAMP,BANG,line,DOT,contains,LPAREN,""<b>"",PLUS,pastTimes,LBRACKET,i,PLUS,1,RBRACKET,PLUS,"":"",RPAREN,AMPAMP,BANG,line,DOT,contains,LPAREN,""<b>"",PLUS,pastTimes,LBRACKET,i,PLUS,2,RBRACKET,PLUS,"":"",RPAREN,RPAREN,LBRACE,line,EQ,br,DOT,readLine,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,ELSE,IF,LPAREN,pastTimes,DOT,length,SUB,1,SUB,i,EQEQ,1,RPAREN,LBRACE,WHILE,LPAREN,BANG,line,DOT,contains,LPAREN,""<b>"",PLUS,pastTimes,LBRACKET,i,RBRACKET,PLUS,"":"",RPAREN,AMPAMP,BANG,line,DOT,contains,LPAREN,""<b>"",PLUS,pastTimes,LBRACKET,i,PLUS,1,RBRACKET,PLUS,"":"",RPAREN,RPAREN,LBRACE,line,EQ,br,DOT,readLine,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,ELSE,IF,LPAREN,pastTimes,DOT,length,SUB,1,SUB,i,EQEQ,0,RPAREN,LBRACE,WHILE,LPAREN,BANG,line,DOT,contains,LPAREN,""<b>"",PLUS,pastTimes,LBRACKET,i,RBRACKET,PLUS,"":"",RPAREN,RPAREN,LBRACE,line,EQ,br,DOT,readLine,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,IF,LPAREN,line,DOT,contains,LPAREN,""<b>"",PLUS,pastTimes,LBRACKET,i,PLUS,1,RBRACKET,PLUS,"":"",RPAREN,RPAREN,LBRACE,i,PLUSPLUS,SEMI,RBRACE,ELSE,IF,LPAREN,line,DOT,contains,LPAREN,""<b>"",PLUS,pastTimes,LBRACKET,i,PLUS,2,RBRACKET,PLUS,"":"",RPAREN,RPAREN,LBRACE,i,PLUSEQ,2,SEMI,RBRACE,WHILE,LPAREN,BANG,line,DOT,contains,LPAREN,""&deg;F"",RPAREN,RPAREN,LBRACE,line,EQ,br,DOT,readLine,LPAREN,RPAREN,SEMI,RBRACE,int,index,EQ,line,DOT,indexOf,LPAREN,""10\"">"",RPAREN,PLUS,4,SEMI,WHILE,LPAREN,line,DOT,charAt,LPAREN,index,RPAREN,BANGEQ,<,RPAREN,LBRACE,precipPast,LBRACKET,i,RBRACKET,EQ,precipPast,LBRACKET,i,RBRACKET,PLUS,line,DOT,charAt,LPAREN,index,RPAREN,SEMI,index,PLUSPLUS,SEMI,RBRACE,RBRACE,CATCH,LPAREN,Exception,e,RPAREN,LBRACE,RETURN,precipPast,SEMI,RBRACE,RBRACE,RBRACE,CATCH,LPAREN,Exception,e,RPAREN,LBRACE,IF,LPAREN,layers,GT,5,RPAREN,LBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,wundergroundHours,SEMI,i,PLUSPLUS,RPAREN,LBRACE,precipPast,LBRACKET,i,RBRACKET,EQ,"""",SEMI,RBRACE,WeatherRecorder,DOT,printError,LPAREN,e,COMMA,zip,RPAREN,SEMI,layers,EQ,0,SEMI,RETURN,precipPast,SEMI,RBRACE,ELSE,LBRACE,Thread,DOT,sleep,LPAREN,2000,RPAREN,SEMI,RETURN,getHourlyForecastTemps,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,layers,EQ,0,SEMI,RETURN,precipPast,SEMI,RBRACE","	public String[] getHourlyPastPrecip() throws Exception {
,		String[] precipPast = new String[pastTimes.length];
,		try {
,			layers++;
,			BufferedReader br = new BufferedReader(new InputStreamReader(
,					new URL(MakeURL.pastHourlyURL(zip)).openStream()));
,
,			// FileWriter fileWriter = new FileWriter(""test.html"", false);
,			// PrintWriter out = new PrintWriter(fileWriter, true);
,			// out.println(MakeURL.pastHourlyURL(zip));
,
,			String line = br.readLine();
,			// out.println(out);
,
,			for (int i = 0; i < pastTimes.length; i++) {
,				precipPast[i] = """";
,			}
,			for (int i = 0; i < pastTimes.length; i++) {
,				try {
,					if (pastTimes.length - 1 - i <MASK> 2) {
,						while (!line.contains(""<b>"" + pastTimes[i] + "":"")
,								&& !line.contains(""<b>"" + pastTimes[i + 1]
,										+ "":"")
,								&& !line.contains(""<b>"" + pastTimes[i + 2]
,										+ "":"")) {
,							line = br.readLine();
,							// out.println(out);
,						}
,					} else if (pastTimes.length - 1 - i == 1) {
,						while (!line.contains(""<b>"" + pastTimes[i] + "":"")
,								&& !line.contains(""<b>"" + pastTimes[i + 1]
,										+ "":"")) {
,							line = br.readLine();
,							// out.println(out);
,						}
,					} else if (pastTimes.length - 1 - i == 0) {
,						while (!line.contains(""<b>"" + pastTimes[i] + "":"")) {
,							line = br.readLine();
,							// out.println(out);
,						}
,					}
,
,					if (line.contains(""<b>"" + pastTimes[i + 1] + "":"")) {
,						i++;
,					} else if (line.contains(""<b>"" + pastTimes[i + 2] + "":"")) {
,						i += 2;
,					}
,
,					while (!line.contains(""&deg;F"")) {
,						line = br.readLine();
,						// out.println(out);
,					}
,
,					int index = line.indexOf(""10\"">"") + 4;
,					while (line.charAt(index) != '<') {
,						precipPast[i] = precipPast[i] + line.charAt(index);
,						index++;
,					}
,				} catch (Exception e) {
,					return precipPast;
,				}
,			}
,		} catch (Exception e) {
,			if (layers > 5) {
,				for (int i = 0; i < wundergroundHours; i++) {
,					precipPast[i] = """";
,				}
,				WeatherRecorder.printError(e, zip);
,				layers = 0;
,				return precipPast;
,			} else {
,				Thread.sleep(2000);
,				return getHourlyForecastTemps();
,			}
,		}
,		layers = 0;
,		return precipPast;
,
,	}
"
bdd57b74-b6eb-44ce-a3b5-6aef0fec0007,e54bcf37-8e34-42fd-b9ad-c76eeff463aa,SLASH,"PUBLIC,int,getAverageTimeInMs,LPAREN,RPAREN,LBRACE,long,lSum,EQ,0,SEMI,FINAL,int,iCount,EQ,m_listTimeInMs,DOT,size,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,iCount,SEMI,i,PLUSPLUS,RPAREN,LBRACE,lSum,PLUSEQ,m_listTimeInMs,DOT,get,LPAREN,i,RPAREN,SEMI,RBRACE,RETURN,LPAREN,int,RPAREN,LPAREN,iCount,GT,0,QUES,LPAREN,lSum,<MASK>,iCount,RPAREN,COLON,SUB,1,RPAREN,SEMI,RBRACE","		public int getAverageTimeInMs() {
,			long lSum = 0;
,			final int iCount = m_listTimeInMs.size();
,
,			for (int i = 0; i < iCount; i++) {
,				lSum += m_listTimeInMs.get(i);
,			}
,
,			return (int)(iCount > 0 ? (lSum <MASK> iCount) : -1);
,		}
"
56952896-479b-43e9-a9cf-c3f3bb9afc0e,57664c7e-a479-4b52-afb8-6b88d34fb668,SUB,"MONKEYS_AT,Test,PUBLIC,void,test_removeUser,LPAREN,RPAREN,THROWS,Exception,LBRACE,User,newUser,EQ,NEW,User,LPAREN,<MASK>,1,COMMA,""Jim"",COMMA,""321 Test Road"",COMMA,""Columbus"",COMMA,""OH"",COMMA,""43230"",COMMA,""6148881234"",RPAREN,SEMI,int,userId,EQ,uDAO,DOT,createUser,LPAREN,newUser,RPAREN,SEMI,User,testUser,EQ,uDAO,DOT,getUserByUserID,LPAREN,userId,RPAREN,SEMI,assertTrue,LPAREN,""NAME did not match"",COMMA,testUser,DOT,getName,LPAREN,RPAREN,DOT,equalsIgnoreCase,LPAREN,""Jim"",RPAREN,RPAREN,SEMI,assertTrue,LPAREN,""ADDRESS did not match"",COMMA,testUser,DOT,getAddress,LPAREN,RPAREN,DOT,equalsIgnoreCase,LPAREN,""321 Test Road"",RPAREN,RPAREN,SEMI,assertTrue,LPAREN,""CITY did not match"",COMMA,testUser,DOT,getCity,LPAREN,RPAREN,DOT,equalsIgnoreCase,LPAREN,""Columbus"",RPAREN,RPAREN,SEMI,assertTrue,LPAREN,""STATE did not match"",COMMA,testUser,DOT,getState,LPAREN,RPAREN,DOT,equalsIgnoreCase,LPAREN,""OH"",RPAREN,RPAREN,SEMI,assertTrue,LPAREN,""ZIP did not match"",COMMA,testUser,DOT,getZip,LPAREN,RPAREN,DOT,equalsIgnoreCase,LPAREN,""43230"",RPAREN,RPAREN,SEMI,assertTrue,LPAREN,""PHONE did not match"",COMMA,testUser,DOT,getPhone,LPAREN,RPAREN,DOT,equalsIgnoreCase,LPAREN,""6148881234"",RPAREN,RPAREN,SEMI,uDAO,DOT,removeUser,LPAREN,testUser,RPAREN,SEMI,testUser,EQ,uDAO,DOT,getUserByUserID,LPAREN,userId,RPAREN,SEMI,assertNull,LPAREN,""expected no record to be returned (null)"",COMMA,testUser,RPAREN,SEMI,RBRACE","    @Test
,    public void test_removeUser() throws Exception {
,        User newUser = new User(<MASK>1, ""Jim"", ""321 Test Road"", ""Columbus"", ""OH"",
,                ""43230"", ""6148881234"");
,        int userId = uDAO.createUser(newUser);
,        User testUser = uDAO.getUserByUserID(userId);
,
,        // should exist here
,        assertTrue(""NAME did not match"",
,                testUser.getName().equalsIgnoreCase(""Jim""));
,        assertTrue(""ADDRESS did not match"", testUser.getAddress()
,                .equalsIgnoreCase(""321 Test Road""));
,        assertTrue(""CITY did not match"",
,                testUser.getCity().equalsIgnoreCase(""Columbus""));
,        assertTrue(""STATE did not match"",
,                testUser.getState().equalsIgnoreCase(""OH""));
,        assertTrue(""ZIP did not match"",
,                testUser.getZip().equalsIgnoreCase(""43230""));
,        assertTrue(""PHONE did not match"",
,                testUser.getPhone().equalsIgnoreCase(""6148881234""));
,
,        uDAO.removeUser(testUser);
,        // but not here
,        testUser = uDAO.getUserByUserID(userId);
,        assertNull(""expected no record to be returned (null)"", testUser);
,    }
"
7adec7d8-cee7-4225-a9f6-43a8dd4e76a6,788fe473-0b87-42ff-853d-018a85ea59eb,STAR,"PUBLIC,void,UpdateLimitSell,LPAREN,String,product,COMMA,MarketData,bid,COMMA,MarketData,ask,RPAREN,LBRACE,List,LT,PendingOrder,GT,list,EQ,this,DOT,getLimitSellOrders,LPAREN,product,RPAREN,SEMI,FOR,LPAREN,PendingOrder,po,COLON,list,RPAREN,LBRACE,IF,LPAREN,bid,DOT,getHigh,LPAREN,RPAREN,GTEQ,po,DOT,getPrice,LPAREN,RPAREN,RPAREN,LBRACE,double,price,EQ,0,SEMI,IF,LPAREN,bid,DOT,getOpen,LPAREN,RPAREN,GTEQ,po,DOT,getPrice,LPAREN,RPAREN,RPAREN,LBRACE,price,EQ,bid,DOT,getOpen,LPAREN,RPAREN,SEMI,RBRACE,ELSE,LBRACE,price,EQ,po,DOT,getPrice,LPAREN,RPAREN,SEMI,RBRACE,this,DOT,MarketSell,LPAREN,po,DOT,getProduct,LPAREN,RPAREN,COMMA,bid,DOT,getStart,LPAREN,RPAREN,COMMA,price,COMMA,po,DOT,getAmount,LPAREN,RPAREN,<MASK>,SUB,1,RPAREN,SEMI,this,DOT,DeletePendingOrder,LPAREN,po,RPAREN,SEMI,RBRACE,RBRACE,RBRACE","	public void UpdateLimitSell(String product, MarketData bid, MarketData ask) {
,        List<PendingOrder> list = this.getLimitSellOrders(product);
,        for(PendingOrder po: list) {
,            if(bid.getHigh() >= po.getPrice()) {
,                double price = 0;
,                if(bid.getOpen() >= po.getPrice()) {
,                    price = bid.getOpen();
,                }
,                else {
,                    price = po.getPrice();
,                }
,                this.MarketSell(po.getProduct(), bid.getStart(), price, po.getAmount() <MASK> -1);
,                this.DeletePendingOrder(po);
,                //System.out.println(""limit sell ===> market sell"");
,            }
,        }
,    }
"
57cc1a58-8f23-49b4-bcf8-6b2866c3102b,1e025280-4e29-4cdc-86ef-4d15524e17c8,GT,"PRIVATE,boolean,insertNewUserPlayListInfo,LPAREN,CodeStringBean,codeStringBean,COMMA,UserInfoBean,infoBean,RPAREN,LBRACE,TRY,LBRACE,connection,EQ,NEW,DatabaseConnection,LPAREN,RPAREN,DOT,getConnection,LPAREN,RPAREN,SEMI,String,insert_UserPlaylist,EQ,""INSERT into userplaylistinfo ( trackid , username , count ) VALUES (?,?,?)"",SEMI,PreparedStatement,prepareStatement,EQ,connection,DOT,prepareStatement,LPAREN,insert_UserPlaylist,RPAREN,SEMI,prepareStatement,DOT,setString,LPAREN,1,COMMA,codeStringBean,DOT,getTrack_ID,LPAREN,RPAREN,RPAREN,SEMI,prepareStatement,DOT,setString,LPAREN,2,COMMA,infoBean,DOT,getUsername,LPAREN,RPAREN,RPAREN,SEMI,prepareStatement,DOT,setInt,LPAREN,3,COMMA,1,RPAREN,SEMI,int,executeUpdate,EQ,prepareStatement,DOT,executeUpdate,LPAREN,RPAREN,SEMI,IF,LPAREN,executeUpdate,<MASK>,0,RPAREN,LBRACE,RETURN,true,SEMI,RBRACE,ELSE,LBRACE,trackInfo,DOT,reverseInfo,LPAREN,codeStringBean,DOT,getTrack_ID,LPAREN,RPAREN,RPAREN,SEMI,RETURN,false,SEMI,RBRACE,RBRACE,CATCH,LPAREN,SQLException,ex,RPAREN,LBRACE,trackInfo,DOT,reverseInfo,LPAREN,codeStringBean,DOT,getTrack_ID,LPAREN,RPAREN,RPAREN,SEMI,Logger,DOT,getLogger,LPAREN,CodeStringInfo,DOT,CLASS,DOT,getName,LPAREN,RPAREN,RPAREN,DOT,log,LPAREN,Level,DOT,SEVERE,COMMA,null,COMMA,ex,RPAREN,SEMI,RBRACE,RETURN,false,SEMI,RBRACE","    private boolean insertNewUserPlayListInfo(CodeStringBean codeStringBean, UserInfoBean infoBean) {
,        try {
,            connection = new DatabaseConnection().getConnection();
,            String insert_UserPlaylist = ""INSERT into userplaylistinfo ( trackid , username , count ) VALUES (?,?,?)"";
,            PreparedStatement prepareStatement = connection.prepareStatement(insert_UserPlaylist);
,            prepareStatement.setString(1, codeStringBean.getTrack_ID());
,            prepareStatement.setString(2, infoBean.getUsername());
,            prepareStatement.setInt(3, 1);
,            int executeUpdate = prepareStatement.executeUpdate();
,            if (executeUpdate <MASK> 0) {
,                return true;
,            } else {
,                trackInfo.reverseInfo(codeStringBean.getTrack_ID());
,
,                return false;
,            }
,
,        } catch (SQLException ex) {
,            trackInfo.reverseInfo(codeStringBean.getTrack_ID());
,
,            Logger.getLogger(CodeStringInfo.class.getName()).log(Level.SEVERE, null, ex);
,        }
,        return false;
,
,
,    }
"
dd0b8baf-c022-4efa-99dd-425e9c39b04c,9d471028-32d7-4a76-b142-3feea4d4e48f,SLASH,"PUBLIC,STATIC,float,lerp,LPAREN,float,origin,COMMA,float,target,COMMA,int,steps,COMMA,int,maxSteps,RPAREN,LBRACE,RETURN,origin,PLUS,LPAREN,target,SUB,origin,RPAREN,STAR,LPAREN,float,RPAREN,steps,<MASK>,LPAREN,float,RPAREN,maxSteps,SEMI,RBRACE","    public static float lerp(float origin, float target, int steps, int maxSteps) {
,        return origin + (target - origin) * (float) steps <MASK> (float) maxSteps;
,    }
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,f84e5084-fe21-46c1-9dad-b113d6cd397d,SUB,"PUBLIC,STATIC,void,AddLineEquations,LPAREN,int,LBRACKET,RBRACKET,x,COMMA,int,LBRACKET,RBRACKET,y,COMMA,List,LT,double,LBRACKET,RBRACKET,GT,list,RPAREN,LBRACE,int,lines,EQ,0,SEMI,WHILE,LPAREN,true,RPAREN,LBRACE,int,x1,EQ,x,LBRACKET,lines,RBRACKET,SEMI,int,y1,EQ,y,LBRACKET,lines,RBRACKET,SEMI,IF,LPAREN,lines,BANGEQ,x,DOT,length,<MASK>,1,RPAREN,LBRACE,int,x2,EQ,x,LBRACKET,lines,PLUS,1,RBRACKET,SEMI,int,y2,EQ,y,LBRACKET,lines,PLUS,1,RBRACKET,SEMI,list,DOT,add,LPAREN,LineEquation,LPAREN,x1,COMMA,y1,COMMA,x2,COMMA,y2,RPAREN,RPAREN,SEMI,RBRACE,ELSE,LBRACE,int,x2,EQ,x,LBRACKET,0,RBRACKET,SEMI,int,y2,EQ,y,LBRACKET,0,RBRACKET,SEMI,list,DOT,add,LPAREN,LineEquation,LPAREN,x1,COMMA,y1,COMMA,x2,COMMA,y2,RPAREN,RPAREN,SEMI,BREAK,SEMI,RBRACE,lines,PLUSPLUS,SEMI,RBRACE,RBRACE","   public static void AddLineEquations (int[] x, int[] y, List<double[]> list)
,   {
,	   int lines = 0;
,	   while(true)
,	   {
,		   int x1 = x[lines];
,		   int y1 = y[lines];
,		   if (lines != x.length<MASK>1)
,		   {
,			   int x2 = x[lines+1];
,			   int y2 = y[lines+1];
,			   list.add(LineEquation(x1, y1, x2, y2));
,		   }
,		   else
,		   {
,			   int x2 = x[0];
,			   int y2 = y[0];
,
,			   list.add(LineEquation(x1, y1, x2, y2));
,			   break;
,		   } 		
,		   lines++;
,	   }
,   }
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,8cdab3a8-11ec-4a2c-b648-03c7ee630103,BANGEQ,"MONKEYS_AT,Override,PUBLIC,void,write,LPAREN,int,theByte,RPAREN,THROWS,java,DOT,io,DOT,IOException,LBRACE,IF,LPAREN,suspendEncoding,RPAREN,LBRACE,this,DOT,out,DOT,write,LPAREN,theByte,RPAREN,SEMI,RETURN,SEMI,RBRACE,IF,LPAREN,encode,RPAREN,LBRACE,buffer,LBRACKET,position,PLUSPLUS,RBRACKET,EQ,LPAREN,byte,RPAREN,theByte,SEMI,IF,LPAREN,position,GTEQ,bufferLength,RPAREN,LBRACE,this,DOT,out,DOT,write,LPAREN,encode3to4,LPAREN,b4,COMMA,buffer,COMMA,bufferLength,COMMA,options,RPAREN,RPAREN,SEMI,lineLength,PLUSEQ,4,SEMI,IF,LPAREN,breakLines,AMPAMP,lineLength,GTEQ,MAX_LINE_LENGTH,RPAREN,LBRACE,this,DOT,out,DOT,write,LPAREN,NEW_LINE,RPAREN,SEMI,lineLength,EQ,0,SEMI,RBRACE,position,EQ,0,SEMI,RBRACE,RBRACE,ELSE,LBRACE,IF,LPAREN,decodabet,LBRACKET,theByte,AMP,7f,RBRACKET,GT,WHITE_SPACE_ENC,RPAREN,LBRACE,buffer,LBRACKET,position,PLUSPLUS,RBRACKET,EQ,LPAREN,byte,RPAREN,theByte,SEMI,IF,LPAREN,position,GTEQ,bufferLength,RPAREN,LBRACE,int,len,EQ,Base64,DOT,decode4to3,LPAREN,buffer,COMMA,0,COMMA,b4,COMMA,0,COMMA,options,RPAREN,SEMI,out,DOT,write,LPAREN,b4,COMMA,0,COMMA,len,RPAREN,SEMI,position,EQ,0,SEMI,RBRACE,RBRACE,ELSE,IF,LPAREN,decodabet,LBRACKET,theByte,AMP,7f,RBRACKET,<MASK>,WHITE_SPACE_ENC,RPAREN,LBRACE,THROW,NEW,java,DOT,io,DOT,IOException,LPAREN,""Invalid character in Base64 data."",RPAREN,SEMI,RBRACE,RBRACE,RBRACE","    @Override
,    public void write(int theByte)
,            throws java.io.IOException {
,      // Encoding suspended?
,      if (suspendEncoding) {
,        this.out.write(theByte);
,        return;
,      }   // end if: supsended
,
,      // Encode?
,      if (encode) {
,        buffer[ position++] = (byte) theByte;
,        if (position >= bufferLength) { // Enough to encode.
,
,          this.out.write(encode3to4(b4, buffer, bufferLength, options));
,
,          lineLength += 4;
,          if (breakLines && lineLength >= MAX_LINE_LENGTH) {
,            this.out.write(NEW_LINE);
,            lineLength = 0;
,          }   // end if: end of line
,
,          position = 0;
,        }   // end if: enough to output
,      } // end if: encoding
,      // Else, Decoding
,      else {
,        // Meaningful Base64 character?
,        if (decodabet[ theByte & 0x7f] > WHITE_SPACE_ENC) {
,          buffer[ position++] = (byte) theByte;
,          if (position >= bufferLength) { // Enough to output.
,
,            int len = Base64.decode4to3(buffer, 0, b4, 0, options);
,            out.write(b4, 0, len);
,            position = 0;
,          }   // end if: enough to output
,        } // end if: meaningful base64 character
,        else if (decodabet[ theByte & 0x7f] <MASK> WHITE_SPACE_ENC) {
,          throw new java.io.IOException(""Invalid character in Base64 data."");
,        }   // end else: not white space either
,      }   // end else: decoding
,    }   // end write
"
5735492c-ae75-4373-9d1e-6986d063d859,86b5920b-15fa-4455-916d-b650d77351f7,LT,"MONKEYS_AT,Override,PUBLIC,void,run,LPAREN,RPAREN,LBRACE,int,localInt,EQ,0,SEMI,TRY,LBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,20,SEMI,i,PLUSPLUS,RPAREN,LBRACE,localInt,PLUSPLUS,SEMI,IF,LPAREN,localInt,EQEQ,10,RPAREN,LBRACE,Thread,DOT,sleep,LPAREN,5000,RPAREN,SEMI,RBRACE,System,DOT,err,DOT,println,LPAREN,""["",PLUS,Thread,DOT,currentThread,LPAREN,RPAREN,DOT,getId,LPAREN,RPAREN,PLUS,""]\u5F53i="",PLUS,i,PLUS,""\u83B7\u53D6staticInt \u7684\u503C:"",PLUS,localInt,RPAREN,SEMI,RBRACE,RBRACE,CATCH,LPAREN,InterruptedException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,RBRACE","	@Override
,	public void run() {
,		int localInt = 0;
,
,		try {
,			for (int i = 0; i <MASK> 20; i++) {
,				localInt++;
,				if (localInt == 10) {
,					Thread.sleep(5000);
,				}
,				System.err.println(""["" + Thread.currentThread().getId() + ""]当i="" + i + ""获取staticInt 的值:"" + localInt);
,			}
,		} catch (InterruptedException e) {
,			e.printStackTrace();
,		}
,	}
"
92951106-a87f-4e0c-9019-4852bf22d1be,9d84ec1b-0f83-4268-8e66-fcc1d4858eb9,PLUS,"PUBLIC,void,print,LPAREN,RPAREN,LBRACE,Node,helper,EQ,this,DOT,first,SEMI,WHILE,LPAREN,helper,BANGEQ,null,RPAREN,LBRACE,System,DOT,out,DOT,print,LPAREN,helper,DOT,value,<MASK>,"" "",RPAREN,SEMI,helper,EQ,helper,DOT,next,SEMI,RBRACE,System,DOT,out,DOT,println,LPAREN,RPAREN,SEMI,RBRACE","	public void print() {
,		Node helper = this.first;
,		
,		while(helper != null) {
,			System.out.print(helper.value <MASK> "" "");
,			helper = helper.next;
,		}
,		System.out.println();
,	}
"
12ebe684-3f3f-4621-9ee2-64477080ca9b,f6c876d8-827e-4ad0-b60e-580100aacf07,PERCENT,"PUBLIC,void,pad,LPAREN,int,factor,RPAREN,THROWS,IOException,LBRACE,int,padding,EQ,factor,SUB,LPAREN,int,RPAREN,LPAREN,nrBits,<MASK>,factor,RPAREN,SEMI,int,excess,EQ,padding,AMP,7,SEMI,IF,LPAREN,excess,GT,0,RPAREN,LBRACE,this,DOT,write,LPAREN,0,COMMA,excess,RPAREN,SEMI,padding,SUBEQ,excess,SEMI,RBRACE,WHILE,LPAREN,padding,GT,0,RPAREN,LBRACE,this,DOT,write,LPAREN,0,COMMA,8,RPAREN,SEMI,padding,SUBEQ,8,SEMI,RBRACE,this,DOT,out,DOT,flush,LPAREN,RPAREN,SEMI,RBRACE","    public void pad(int factor) throws IOException {
,        int padding = factor - (int) (nrBits <MASK> factor);
,        int excess = padding & 7;
,        if (excess > 0) {
,            this.write(0, excess);
,            padding -= excess;
,        }
,        while (padding > 0) {
,            this.write(0, 8);
,            padding -= 8;
,        }
,        this.out.flush();
,    }
"
8ec044ff-9e5c-46c4-ad39-ccc8ad42dd87,59b2c14a-09db-4af9-a343-cc6d249525be,GT,"PUBLIC,void,removeSupplier,LPAREN,String,suppl,RPAREN,LBRACE,int,oindex,EQ,suppliers,DOT,indexOf,LPAREN,suppl,RPAREN,SEMI,IF,LPAREN,oindex,<MASK>,SUB,1,RPAREN,LBRACE,suppliers,DOT,remove,LPAREN,oindex,RPAREN,SEMI,supplierItems,DOT,remove,LPAREN,oindex,RPAREN,SEMI,RBRACE,RBRACE","		public void removeSupplier(String suppl)
,		{
,			int oindex = suppliers.indexOf(suppl);
,			if(oindex<MASK>-1)
,			{
,				suppliers.remove(oindex);
,				supplierItems.remove(oindex);
,			}
,		}
"
5dc601a4-7cf6-4107-99f0-8942a78affb2,0fd12391-fad1-404d-a234-0af1b91a866a,STAR,"PUBLIC,STATIC,void,main,LPAREN,String,LBRACKET,RBRACKET,args,RPAREN,LBRACE,Comparable,LBRACKET,RBRACKET,arrayChar,EQ,LBRACE,S,COMMA,H,COMMA,E,COMMA,L,COMMA,L,COMMA,S,COMMA,O,COMMA,R,COMMA,T,COMMA,E,COMMA,X,COMMA,A,COMMA,M,COMMA,P,COMMA,L,COMMA,E,RBRACE,SEMI,int,length,EQ,arrayChar,DOT,length,SEMI,int,h,EQ,1,SEMI,WHILE,LPAREN,h,LT,length,SLASH,3,RPAREN,LBRACE,h,EQ,h,<MASK>,3,PLUS,1,SEMI,System,DOT,out,DOT,println,LPAREN,""top==>"",PLUS,h,RPAREN,SEMI,RBRACE,WHILE,LPAREN,h,GTEQ,1,RPAREN,LBRACE,FOR,LPAREN,int,i,EQ,h,SEMI,i,LT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,FOR,LPAREN,int,j,EQ,i,SEMI,j,GTEQ,h,AMPAMP,less,LPAREN,arrayChar,LBRACKET,j,RBRACKET,COMMA,arrayChar,LBRACKET,j,SUB,h,RBRACKET,RPAREN,SEMI,j,SUBEQ,h,RPAREN,LBRACE,exchange,LPAREN,arrayChar,COMMA,j,COMMA,j,SUB,h,RPAREN,SEMI,RBRACE,RBRACE,h,EQ,h,SLASH,3,SEMI,System,DOT,out,DOT,println,LPAREN,h,RPAREN,SEMI,RBRACE,show,LPAREN,arrayChar,RPAREN,SEMI,RBRACE","	public static void main(String[] args) {
,		Comparable[] arrayChar = {'S','H','E','L','L', 'S', 'O', 'R', 'T', 'E', 'X', 'A', 'M', 'P',
,				'L', 'E' };
,		int length = arrayChar.length;
,		int h = 1;
,		while (h < length / 3) {
,			h = h <MASK> 3 + 1;
,			System.out.println(""top==>""+h);
,		}
,
,		while (h >= 1) {
,			for (int i = h; i < length; i++) {
,				for (int j = i; j >= h && less(arrayChar[j], arrayChar[j - h]); j -= h) {
,					exchange(arrayChar, j, j - h);
,				}
,			}
,			h = h / 3;
,			System.out.println(h);
,		}
,		show(arrayChar);
,	}
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,d77ad77f-599f-41c1-a29a-abd16810b3b3,LT,"MONKEYS_AT,Override,PUBLIC,void,parseXML,LPAREN,Document,doc,RPAREN,LBRACE,Element,el,EQ,doc,DOT,getDocumentElement,LPAREN,RPAREN,SEMI,IF,LPAREN,el,DOT,getNodeName,LPAREN,RPAREN,DOT,compareTo,LPAREN,""INDI"",RPAREN,BANGEQ,0,RPAREN,LBRACE,RETURN,SEMI,RBRACE,NodeList,nodes,EQ,el,DOT,getChildNodes,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,nodes,DOT,getLength,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,Node,n,EQ,nodes,DOT,item,LPAREN,i,RPAREN,SEMI,IF,LPAREN,n,INSTANCEOF,Element,RPAREN,LBRACE,Element,child,EQ,LPAREN,Element,RPAREN,n,SEMI,String,name,EQ,child,DOT,getNodeName,LPAREN,RPAREN,SEMI,IF,LPAREN,name,DOT,equals,LPAREN,""getProperties"",RPAREN,RPAREN,LBRACE,processGetProperties,LPAREN,child,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,name,DOT,equals,LPAREN,""newTextVector"",RPAREN,RPAREN,LBRACE,processNewXXXVector,LPAREN,child,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,name,DOT,equals,LPAREN,""newNumberVector"",RPAREN,RPAREN,LBRACE,processNewXXXVector,LPAREN,child,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,name,DOT,equals,LPAREN,""newSwitchVector"",RPAREN,RPAREN,LBRACE,processNewXXXVector,LPAREN,child,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,name,DOT,equals,LPAREN,""newBLOBVector"",RPAREN,RPAREN,LBRACE,processNewXXXVector,LPAREN,child,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,name,DOT,equals,LPAREN,""enableBLOB"",RPAREN,RPAREN,LBRACE,processEnableBLOB,LPAREN,child,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,RBRACE","  @Override
,  public void parseXML(Document doc) {
,    Element el = doc.getDocumentElement();
,
,    if (el.getNodeName().compareTo(""INDI"") != 0) {
,      return;
,    }
,
,    NodeList nodes = el.getChildNodes();
,
,    for (int i = 0 ; i <MASK> nodes.getLength() ; i++) {
,      Node n = nodes.item(i);
,
,      if (n instanceof Element) {
,        Element child = (Element) n;
,
,        String name = child.getNodeName();
,
,        if (name.equals(""getProperties"")) {
,          processGetProperties(child);
,        } else if (name.equals(""newTextVector"")) {
,          processNewXXXVector(child);
,        } else if (name.equals(""newNumberVector"")) {
,          processNewXXXVector(child);
,        } else if (name.equals(""newSwitchVector"")) {
,          processNewXXXVector(child);
,        } else if (name.equals(""newBLOBVector"")) {
,          processNewXXXVector(child);
,        } else if (name.equals(""enableBLOB"")) {
,          processEnableBLOB(child);
,        }
,      }
,    }
,  }
"
38ed5e2e-bfac-4cc9-94e0-5ee38dabb0ca,27ccabd7-4420-4ab7-a50b-6dc1e96561a8,EQEQ,"PUBLIC,boolean,equals,LPAREN,Object,obj,RPAREN,LBRACE,IF,LPAREN,obj,<MASK>,null,RPAREN,RETURN,false,SEMI,ELSE,IF,LPAREN,BANG,LPAREN,obj,INSTANCEOF,Map,DOT,Entry,RPAREN,RPAREN,RETURN,false,SEMI,ELSE,LBRACE,Map,DOT,Entry,LT,Object,COMMA,Object,GT,ent,EQ,LPAREN,Map,DOT,Entry,LT,Object,COMMA,Object,GT,RPAREN,obj,SEMI,RETURN,eql,LPAREN,key,COMMA,ent,DOT,getKey,LPAREN,RPAREN,RPAREN,AMPAMP,eql,LPAREN,value,COMMA,ent,DOT,getValue,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,RBRACE","	public boolean equals(Object obj) {
,	    if (obj <MASK> null) return false;
,	    else if (!(obj instanceof Map.Entry)) return false;
,	    else {
,		Map.Entry<Object, Object> ent = (Map.Entry<Object, Object>)obj;
,		return eql(key, ent.getKey()) && eql(value, ent.getValue());
,	    }
,	}
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,2a14b732-1952-431e-af27-de0d98bd1f0e,LT,"PUBLIC,Rectangle,findSling,LPAREN,RPAREN,LBRACE,IF,LPAREN,_sling,BANGEQ,null,RPAREN,RETURN,_sling,SEMI,int,minY,EQ,999999,SEMI,ConnectedComponent,sling,EQ,null,SEMI,FOR,LPAREN,ConnectedComponent,c,COLON,_components,RPAREN,LBRACE,int,top,EQ,c,DOT,boundingBox,LPAREN,RPAREN,LBRACKET,1,RBRACKET,SEMI,IF,LPAREN,c,DOT,getType,LPAREN,RPAREN,EQEQ,ImageSegmenter,DOT,SLING,AMPAMP,top,<MASK>,minY,RPAREN,LBRACE,minY,EQ,top,SEMI,sling,EQ,c,SEMI,RBRACE,RBRACE,IF,LPAREN,sling,EQEQ,null,RPAREN,RETURN,null,SEMI,_draw,DOT,add,LPAREN,sling,RPAREN,SEMI,_drawShape,DOT,add,LPAREN,sling,DOT,getBody,LPAREN,RPAREN,RPAREN,SEMI,int,bound,LBRACKET,RBRACKET,EQ,sling,DOT,boundingBox,LPAREN,RPAREN,SEMI,_sling,EQ,NEW,Rectangle,LPAREN,bound,LBRACKET,0,RBRACKET,COMMA,bound,LBRACKET,1,RBRACKET,COMMA,bound,LBRACKET,2,RBRACKET,SUB,bound,LBRACKET,0,RBRACKET,COMMA,bound,LBRACKET,3,RBRACKET,SUB,bound,LBRACKET,1,RBRACKET,RPAREN,SEMI,_ref,EQ,NEW,Point,LPAREN,RPAREN,SEMI,_ref,DOT,x,EQ,LPAREN,int,RPAREN,LPAREN,_sling,DOT,x,PLUS,_sling,DOT,height,STAR,X_OFFSET,RPAREN,SEMI,_ref,DOT,y,EQ,LPAREN,int,RPAREN,LPAREN,_sling,DOT,y,PLUS,_sling,DOT,height,STAR,Y_OFFSET,RPAREN,SEMI,RETURN,_sling,SEMI,RBRACE","    public Rectangle findSling()
,    {
,        if (_sling != null) return _sling;
,        
,        // use the highest sling typed component
,        int minY = 999999;
,        ConnectedComponent sling = null;
,        for (ConnectedComponent c : _components)
,        {
,            int top = c.boundingBox()[1];
,            if (c.getType() == ImageSegmenter.SLING 
,                && top <MASK> minY)
,            {
,                minY = top;
,                sling = c;
,            }
,        }
,        if (sling == null)
,            return null;
,            
,        _draw.add(sling);
,        _drawShape.add(sling.getBody());
,        
,        // find bounding box of the slingshot and reference point
,        int bound[] = sling.boundingBox();
,        _sling = new Rectangle(bound[0], bound[1], bound[2]-bound[0], bound[3]-bound[1]);
,        _ref = new Point();
,        _ref.x = (int) (_sling.x + _sling.height * X_OFFSET);
,        _ref.y = (int) (_sling.y + _sling.height * Y_OFFSET);
,        
,        return _sling;
,    }
"
a12f1b40-1037-49ca-8a3a-6cc46fb26c88,3528a4c5-77f7-42a6-8d12-6cdf6db86154,SLASH,"PUBLIC,STATIC,void,main,LPAREN,String,LBRACKET,RBRACKET,args,RPAREN,LBRACE,Scanner,kb,EQ,NEW,Scanner,LPAREN,System,DOT,in,RPAREN,SEMI,int,b1,COMMA,b2,COMMA,hasil,SEMI,TRY,LBRACE,System,DOT,out,DOT,print,LPAREN,""Bilangan 1: "",RPAREN,SEMI,b1,EQ,kb,DOT,nextInt,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,print,LPAREN,""Bilangan 2: "",RPAREN,SEMI,b2,EQ,kb,DOT,nextInt,LPAREN,RPAREN,SEMI,hasil,EQ,b1,<MASK>,b2,SEMI,System,DOT,out,DOT,println,LPAREN,""Hasil: "",PLUS,hasil,RPAREN,SEMI,RBRACE,CATCH,LPAREN,InputMismatchException,e,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""Error: "",PLUS,e,DOT,getMessage,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,ArithmeticException,e,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""Error: "",PLUS,e,DOT,getMessage,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,FINALLY,LBRACE,kb,DOT,close,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""Done!"",RPAREN,SEMI,RBRACE,RBRACE","	public static void main(String[] args) {
,		Scanner kb = new Scanner(System.in);
,		int b1, b2, hasil;
,		
,		try {
,			System.out.print(""Bilangan 1: ""); b1 = kb.nextInt();
,			System.out.print(""Bilangan 2: ""); b2 = kb.nextInt();
,			hasil = b1<MASK>b2;
,			System.out.println(""Hasil: "" + hasil);
,		} catch (InputMismatchException e) {
,			System.out.println(""Error: "" + e.getMessage());
,		} catch (ArithmeticException e) {
,			System.out.println(""Error: "" + e.getMessage());
,		} finally {
,			kb.close();
,			System.out.println(""Done!"");
,		}
,		 
,	}
"
cc1c4187-1182-4cd3-a559-9895584ed311,de411950-eb5b-4e68-9a51-b511172ad6d9,GTEQ,"PUBLIC,STATIC,String,LBRACKET,RBRACKET,justify,LPAREN,String,LBRACKET,RBRACKET,textIn,RPAREN,LBRACE,int,maxLength,EQ,0,SEMI,String,LBRACKET,RBRACKET,justified,EQ,NEW,String,LBRACKET,textIn,DOT,length,RBRACKET,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,textIn,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,int,length,EQ,textIn,LBRACKET,i,RBRACKET,DOT,length,LPAREN,RPAREN,SEMI,IF,LPAREN,length,<MASK>,maxLength,RPAREN,maxLength,EQ,length,SEMI,justified,LBRACKET,i,RBRACKET,EQ,"""",SEMI,RBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,textIn,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,WHILE,LPAREN,justified,LBRACKET,i,RBRACKET,DOT,length,LPAREN,RPAREN,PLUS,textIn,LBRACKET,i,RBRACKET,DOT,length,LPAREN,RPAREN,BANGEQ,maxLength,RPAREN,LBRACE,justified,LBRACKET,i,RBRACKET,PLUSEQ,"" "",SEMI,RBRACE,justified,LBRACKET,i,RBRACKET,PLUSEQ,textIn,LBRACKET,i,RBRACKET,SEMI,RBRACE,RETURN,justified,SEMI,RBRACE","	public static String[] justify(String[] textIn){
,		int maxLength=0;
,		String[] justified=new String[textIn.length];
,		for(int i=0;i<textIn.length;i++){
,			int length=textIn[i].length();
,			if(length<MASK>maxLength)maxLength=length;
,			justified[i]="""";
,		}
,		for(int i=0;i<textIn.length;i++){
,			while(justified[i].length()+textIn[i].length()!=maxLength){
,				justified[i]+="" "";
,			}
,			justified[i]+=textIn[i];
,			
,		}
,		
,		return justified;
,	}
"
38ed5e2e-bfac-4cc9-94e0-5ee38dabb0ca,4c543d4a-c255-4189-b881-4eb7f90fdd04,EQEQ,"PUBLIC,Elt,arb,LPAREN,RPAREN,LBRACE,IF,LPAREN,tree,<MASK>,null,RPAREN,THROW,NEW,NoSuchElementException,LPAREN,RPAREN,SEMI,ELSE,IF,LPAREN,BANG,LPAREN,tree,INSTANCEOF,Node,RPAREN,RPAREN,LBRACE,Object,LBRACKET,RBRACKET,ary,EQ,LPAREN,Object,LBRACKET,RBRACKET,RPAREN,tree,SEMI,int,len,EQ,ary,DOT,length,SEMI,RETURN,LPAREN,Elt,RPAREN,ary,LBRACKET,len,GTGT,1,RBRACKET,SEMI,RBRACE,ELSE,LBRACE,Node,node,EQ,LPAREN,Node,RPAREN,tree,SEMI,IF,LPAREN,node,DOT,element,INSTANCEOF,EquivalentSet,RPAREN,RETURN,LPAREN,Elt,RPAREN,LPAREN,LPAREN,EquivalentSet,RPAREN,node,DOT,element,RPAREN,DOT,contents,DOT,get,LPAREN,0,RPAREN,SEMI,ELSE,RETURN,LPAREN,Elt,RPAREN,node,DOT,element,SEMI,RBRACE,RBRACE","    public Elt arb() {
,	if (tree <MASK> null) throw new NoSuchElementException();
,	else if (!(tree instanceof Node)) {
,	    Object[] ary = (Object[])tree;
,	    int len = ary.length;
,	    return (Elt)ary[len >> 1];
,	} else {
,	    Node node = (Node)tree;
,	    if (node.element instanceof EquivalentSet)
,		return (Elt)((EquivalentSet)node.element).contents.get(0);
,	    else return (Elt)node.element;
,	}
,    }
"
af41f0e5-7563-4e91-b562-9ffd68ee49d6,1faa56e3-9af8-4386-9cdf-53d7ac764420,PERCENT,"PUBLIC,void,progressWrite,LPAREN,String,line,COMMA,boolean,appendTime,COMMA,int,retry,RPAREN,LBRACE,SYNCHRONIZED,LPAREN,lock,RPAREN,LBRACE,Thread,DOT,interrupted,LPAREN,RPAREN,SEMI,IF,LPAREN,progressInfoBoard,BANGEQ,null,RPAREN,LBRACE,IF,LPAREN,appendTime,RPAREN,LBRACE,long,t,EQ,System,DOT,currentTimeMillis,LPAREN,RPAREN,SUB,startTime,SEMI,t,SLASHEQ,1000,SEMI,String,m,EQ,String,DOT,valueOf,LPAREN,t,SLASH,60,RPAREN,SEMI,IF,LPAREN,m,DOT,length,LPAREN,RPAREN,LT,2,RPAREN,m,EQ,""0"",PLUS,m,SEMI,String,s,EQ,String,DOT,valueOf,LPAREN,t,<MASK>,60,RPAREN,SEMI,IF,LPAREN,s,DOT,length,LPAREN,RPAREN,LT,2,RPAREN,s,EQ,""0"",PLUS,s,SEMI,line,EQ,Messages,DOT,getString,LPAREN,""WorkplacePanel.17"",RPAREN,PLUS,m,PLUS,"":"",PLUS,s,PLUS,"" "",PLUS,line,SEMI,RBRACE,StyledDocument,doc,EQ,progressInfoBoard,DOT,getStyledDocument,LPAREN,RPAREN,SEMI,TRY,LBRACE,IF,LPAREN,doc,DOT,getLength,LPAREN,RPAREN,GT,1024,STAR,16,RPAREN,LBRACE,doc,DOT,remove,LPAREN,0,COMMA,1024,STAR,8,RPAREN,SEMI,RBRACE,doc,DOT,insertString,LPAREN,doc,DOT,getLength,LPAREN,RPAREN,COMMA,line,PLUS,""\n"",COMMA,null,RPAREN,SEMI,progressInfoBoard,DOT,setCaretPosition,LPAREN,doc,DOT,getLength,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,Throwable,e,RPAREN,LBRACE,IF,LPAREN,retry,GT,0,RPAREN,LBRACE,TRY,LBRACE,Thread,DOT,sleep,LPAREN,10,RPAREN,SEMI,RBRACE,CATCH,LPAREN,Throwable,ee,RPAREN,LBRACE,RBRACE,progressWrite,LPAREN,line,COMMA,false,COMMA,retry,SUB,1,RPAREN,SEMI,RBRACE,ELSE,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,line,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,RBRACE,RBRACE","	public void progressWrite(String line, boolean appendTime, int retry) {
,		synchronized (lock) {
,			Thread.interrupted();
,			if(progressInfoBoard!=null) {
,				if(appendTime) {
,					long t=System.currentTimeMillis()-startTime;
,					t/=1000;
,					String m=String.valueOf(t/60);
,					if(m.length()<2) m=""0""+m; //$NON-NLS-1$
,					String s=String.valueOf(t<MASK>60);
,					if(s.length()<2) s=""0""+s; //$NON-NLS-1$
,					
,					line=Messages.getString(""WorkplacePanel.17"")+m+"":""+s+"" ""+line; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
,				}
,				StyledDocument doc=progressInfoBoard.getStyledDocument();
,				try {
,					if(doc.getLength()>1024*16) {
,						doc.remove(0,1024*8);
,					}
,					doc.insertString(doc.getLength(),line+""\n"",null); //$NON-NLS-1$
,					progressInfoBoard.setCaretPosition(doc.getLength());
,				} catch(Throwable e) {
,					if(retry>0) {
,						try { Thread.sleep(10); } catch(Throwable ee) {/*nop*/}
,						progressWrite(line,false, retry-1);
,					} else {
,						e.printStackTrace();
,						System.out.println(line);
,					}
,				}
,			}
,		}
,	}
"
7fe8faa8-6d71-4d77-acc6-fe9b7d23dda6,4088f7d4-bfc1-41bc-aeaf-83b6c4f83605,GT,"int,LBRACKET,RBRACKET,getTable,LPAREN,RPAREN,LBRACE,IF,LPAREN,count,<MASK>,lim,RPAREN,RETURN,null,SEMI,ELSE,RETURN,tbl,SEMI,RBRACE","		int[] getTable( )
,		{
,			if ( count <MASK> lim )
,				return null;
,			else
,				return tbl;
,		}
"
a7d6e1ab-1124-4912-b023-4d34ef70d86a,b3721ca6-8828-4943-85e2-f688cd4b142e,GTEQ,"MONKEYS_AT,Override,PUBLIC,boolean,accept,LPAREN,File,pathname,RPAREN,LBRACE,IF,LPAREN,pathname,DOT,isDirectory,LPAREN,RPAREN,RPAREN,RETURN,false,SEMI,long,lastDays,EQ,System,DOT,currentTimeMillis,LPAREN,RPAREN,SUB,LPAREN,DAYS,STAR,24,STAR,60,STAR,60,STAR,1000,RPAREN,SEMI,RETURN,LPAREN,pathname,DOT,lastModified,LPAREN,RPAREN,<MASK>,lastDays,RPAREN,SEMI,RBRACE","        @Override
,        public boolean accept(File pathname) {
,            if (pathname.isDirectory()) return false;
,            
,            long lastDays = System.currentTimeMillis() - (DAYS * 24 * 60 * 60 * 1000);
,            return (pathname.lastModified() <MASK> lastDays);
,        }
"
113c5414-6c55-466b-b879-a350ab6e0ca2,46767854-4933-495a-b05f-0eaeae26c4a1,EQ,"PUBLIC,void,setMaxHP,LPAREN,int,maxHP,RPAREN,LBRACE,this,DOT,maxHP,<MASK>,maxHP,SEMI,RBRACE","	public void setMaxHP(int maxHP) {
,		this.maxHP <MASK> maxHP;
,	}
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,8fa9e1ad-8ea2-4c1e-a044-3323ddba6748,LT,"PRIVATE,void,processNewNumberVector,LPAREN,Element,xml,RPAREN,LBRACE,INDIProperty,prop,EQ,processNewXXXVector,LPAREN,xml,RPAREN,SEMI,IF,LPAREN,prop,EQEQ,null,RPAREN,LBRACE,RETURN,SEMI,RBRACE,IF,LPAREN,BANG,LPAREN,prop,INSTANCEOF,INDINumberProperty,RPAREN,RPAREN,LBRACE,RETURN,SEMI,RBRACE,INDIElementAndValue,LBRACKET,RBRACKET,evs,EQ,processINDIElements,LPAREN,prop,COMMA,xml,RPAREN,SEMI,Date,timestamp,EQ,INDIDateFormat,DOT,parseTimestamp,LPAREN,xml,DOT,getAttribute,LPAREN,""timestamp"",RPAREN,RPAREN,SEMI,INDINumberElementAndValue,LBRACKET,RBRACKET,newEvs,EQ,NEW,INDINumberElementAndValue,LBRACKET,evs,DOT,length,RBRACKET,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,newEvs,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,newEvs,LBRACKET,i,RBRACKET,EQ,LPAREN,INDINumberElementAndValue,RPAREN,evs,LBRACKET,i,RBRACKET,SEMI,RBRACE,processNewNumberValue,LPAREN,LPAREN,INDINumberProperty,RPAREN,prop,COMMA,timestamp,COMMA,newEvs,RPAREN,SEMI,RBRACE","  private void processNewNumberVector(Element xml) {
,    INDIProperty prop = processNewXXXVector(xml);
,
,    if (prop == null) {
,      return;
,    }
,
,    if (!(prop instanceof INDINumberProperty)) {
,      return;
,    }
,
,    INDIElementAndValue[] evs = processINDIElements(prop, xml);
,
,    Date timestamp = INDIDateFormat.parseTimestamp(xml.getAttribute(""timestamp""));
,
,    INDINumberElementAndValue[] newEvs = new INDINumberElementAndValue[evs.length];
,
,    for (int i = 0 ; i <MASK> newEvs.length ; i++) {
,      newEvs[i] = (INDINumberElementAndValue)evs[i];
,    }
,
,    processNewNumberValue((INDINumberProperty)prop, timestamp, newEvs);
,  }
"
09478113-8f39-4146-870b-8037a6932443,4b407bd5-be8d-4957-922b-e1205af01967,EQEQ,"PRIVATE,void,OP_ASL,LPAREN,RPAREN,LBRACE,int,iMem,EQ,readOperand,LPAREN,RPAREN,SEMI,int,iVal,EQ,int8,LPAREN,iMem,LTLT,1,RPAREN,SEMI,setCFlag,LPAREN,getBit,LPAREN,iMem,COMMA,7,RPAREN,RPAREN,SEMI,setNFlag,LPAREN,getBit,LPAREN,iVal,COMMA,7,RPAREN,RPAREN,SEMI,setZFlag,LPAREN,iVal,<MASK>,0,RPAREN,SEMI,writeOperand,LPAREN,iVal,RPAREN,SEMI,RBRACE","    private void OP_ASL()
,    {
,        int iMem = readOperand();
,        int iVal = int8(iMem << 1);
,
,        setCFlag(getBit(iMem, 7));
,        setNFlag(getBit(iVal, 7));
,        setZFlag(iVal <MASK> 0);
,
,        writeOperand(iVal);
,    }
"
4f72d818-d8b1-4f36-aab6-20bf234b1cd2,169f4ecd-8325-4efb-8dcc-d38b5aab4cac,SLASH,"PUBLIC,void,render,LPAREN,Graphics,g,RPAREN,LBRACE,Image,im,EQ,null,SEMI,TRY,LBRACE,im,EQ,NEW,Image,LPAREN,""data/image/Pebbles.png"",RPAREN,SEMI,RBRACE,CATCH,LPAREN,SlickException,e1,RPAREN,LBRACE,THROW,NEW,NullPointerException,LPAREN,""Pebbles.png does not exist!"",RPAREN,SEMI,RBRACE,FOR,LPAREN,int,x,EQ,0,SEMI,x,LT,Constants,DOT,GAME_WIDTH,SEMI,x,PLUSEQ,im,DOT,getWidth,LPAREN,RPAREN,RPAREN,LBRACE,FOR,LPAREN,int,y,EQ,0,SEMI,y,LT,Constants,DOT,GAME_HEIGHT,SEMI,y,PLUSEQ,im,DOT,getHeight,LPAREN,RPAREN,RPAREN,LBRACE,im,DOT,draw,LPAREN,x,COMMA,y,RPAREN,SEMI,RBRACE,RBRACE,sortEntities,LPAREN,RPAREN,SEMI,Color,color,SEMI,FOR,LPAREN,Entity,e,COLON,entities,RPAREN,LBRACE,g,DOT,drawAnimation,LPAREN,images,DOT,getAnimation,LPAREN,e,RPAREN,COMMA,e,DOT,getX,LPAREN,RPAREN,COMMA,e,DOT,getY,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,FOR,LPAREN,Player,p,COLON,model,DOT,getPlayers,LPAREN,RPAREN,RPAREN,LBRACE,Hero,h,EQ,p,DOT,getHero,LPAREN,RPAREN,SEMI,IF,LPAREN,h,DOT,getMana,LPAREN,RPAREN,LT,100,RPAREN,LBRACE,g,DOT,setColor,LPAREN,Color,DOT,black,RPAREN,SEMI,g,DOT,fillRect,LPAREN,h,DOT,getX,LPAREN,RPAREN,COMMA,h,DOT,getY,LPAREN,RPAREN,PLUS,Constants,DOT,TILE_SIZE,COMMA,Constants,DOT,TILE_SIZE,COMMA,8,RPAREN,SEMI,g,DOT,setColor,LPAREN,h,DOT,getTeam,LPAREN,RPAREN,DOT,getColor,LPAREN,RPAREN,RPAREN,SEMI,g,DOT,fillRect,LPAREN,h,DOT,getX,LPAREN,RPAREN,COMMA,h,DOT,getY,LPAREN,RPAREN,PLUS,Constants,DOT,TILE_SIZE,COMMA,LPAREN,Constants,DOT,TILE_SIZE,STAR,LPAREN,h,DOT,getMana,LPAREN,RPAREN,<MASK>,100f,RPAREN,RPAREN,COMMA,8,RPAREN,SEMI,RBRACE,RBRACE,FOR,LPAREN,Entity,e,COLON,entities,RPAREN,LBRACE,IF,LPAREN,e,INSTANCEOF,Tower,RPAREN,LBRACE,Tower,t,EQ,LPAREN,Tower,RPAREN,e,SEMI,String,s,SEMI,g,DOT,setColor,LPAREN,Color,DOT,cyan,RPAREN,SEMI,g,DOT,drawString,LPAREN,t,DOT,getPowerUp,LPAREN,RPAREN,DOT,toString,LPAREN,RPAREN,COMMA,t,DOT,getX,LPAREN,RPAREN,COMMA,t,DOT,getY,LPAREN,RPAREN,PLUS,Constants,DOT,TILE_SIZE,STAR,1.5f,RPAREN,SEMI,RBRACE,RBRACE,statusBar,DOT,render,LPAREN,g,COMMA,model,DOT,getPlayers,LPAREN,RPAREN,RPAREN,SEMI,RBRACE","	public void render(Graphics g) {
,		
,		<MASK>/Draw background
,		Image im = null;
,		try {
,			im = new Image(""data/image/Pebbles.png"");
,		} catch (SlickException e1) {
,			throw new NullPointerException(""Pebbles.png does not exist!"");
,		}
,		for (int x = 0; x < Constants.GAME_WIDTH; x += im.getWidth()){
,			for (int y = 0; y < Constants.GAME_HEIGHT; y += im.getHeight()){
,				im.draw(x, y);
,			}
,		}
,		
,		
,		//Sort entities
,		sortEntities();
,		
,		Color color;
,		//Draw all entities
,		for (Entity e: entities){
,		   	g.drawAnimation(images.getAnimation(e), e.getX(), e.getY()); 
,		   //	g.drawRect(e.getCollisionBox().getX(), e.getCollisionBox().getY(), e.getCollisionBox().getWidth(), e.getCollisionBox().getHeight());
,
,		}
,		
,		//Draw mana bars if necessary
,		for(Player p: model.getPlayers()){
,			Hero h = p.getHero();
,			
,			
,			if (h.getMana() < 100){
,				g.setColor(Color.black);
,				g.fillRect(h.getX(),h.getY()+Constants.TILE_SIZE,Constants.TILE_SIZE,8);
,				g.setColor(h.getTeam().getColor());
,				g.fillRect(h.getX(),h.getY()+Constants.TILE_SIZE,(Constants.TILE_SIZE * (h.getMana()/100f)),8);
,			}
,		}
,	
,		for (Entity e: entities){
,			if (e instanceof Tower){
,				Tower t = (Tower)e;
,				String s;
,				g.setColor(Color.cyan);
,				g.drawString(t.getPowerUp().toString(), t.getX(), t.getY() + Constants.TILE_SIZE * 1.5f);
,			}
,		}
,		 
,		//Draw statusbar
,		statusBar.render(g,model.getPlayers());
,		 
,		/* //Debug drawing of tiles
,		for(int x = 0; x < Constants.GAME_WIDTH; x += 32) {
,		    for(int y = 0; y < Constants.GAME_HEIGHT; y += 32) {
,		        g.drawRect(x, y, Constants.TILE_SIZE, Constants.TILE_SIZE);
,		    }
,		}*/ 
,	}
"
09478113-8f39-4146-870b-8037a6932443,10d2ff37-ec72-4fd7-b1d1-f04845fcb7e0,EQEQ,"PRIVATE,void,OP_EOR,LPAREN,RPAREN,LBRACE,int,iMem,EQ,readOperand,LPAREN,RPAREN,SEMI,int,iVal,EQ,getA,LPAREN,RPAREN,CARET,iMem,SEMI,setNFlag,LPAREN,getBit,LPAREN,iVal,COMMA,7,RPAREN,RPAREN,SEMI,setZFlag,LPAREN,iVal,<MASK>,0,RPAREN,SEMI,setA,LPAREN,iVal,RPAREN,SEMI,RBRACE","    private void OP_EOR()
,    {
,        int iMem = readOperand();
,        int iVal = getA() ^ iMem;
,
,        setNFlag(getBit(iVal, 7));
,        setZFlag(iVal <MASK> 0);
,
,        setA(iVal);
,    }
"
113c5414-6c55-466b-b879-a350ab6e0ca2,187216bb-613f-48e0-b88d-6a7238040953,EQ,"void,setStackable,LPAREN,boolean,stackable,RPAREN,LBRACE,this,DOT,stackable,<MASK>,stackable,SEMI,RBRACE","	void setStackable(boolean stackable) {
,		this.stackable <MASK> stackable;
,	}
"
56952896-479b-43e9-a9cf-c3f3bb9afc0e,c4e506d7-8bca-4bb5-9a39-a0b81e19f8f0,SUB,"MONKEYS_AT,Test,PUBLIC,void,test_removeProduct,LPAREN,RPAREN,THROWS,Exception,LBRACE,Product,newProd,EQ,NEW,Product,LPAREN,<MASK>,1,COMMA,""tacos"",COMMA,""tacos desc"",COMMA,""mexican food"",COMMA,15.99,COMMA,5,COMMA,10,COMMA,5,COMMA,false,COMMA,""imgpath"",RPAREN,SEMI,int,prodId,EQ,pDAO,DOT,createProduct,LPAREN,newProd,RPAREN,SEMI,Product,testProd,EQ,pDAO,DOT,getProductByProductID,LPAREN,prodId,RPAREN,SEMI,assertTrue,LPAREN,""name did not match"",COMMA,testProd,DOT,getProductName,LPAREN,RPAREN,DOT,equalsIgnoreCase,LPAREN,""tacos"",RPAREN,RPAREN,SEMI,assertTrue,LPAREN,""description did not match"",COMMA,testProd,DOT,getDescription,LPAREN,RPAREN,DOT,equalsIgnoreCase,LPAREN,""tacos desc"",RPAREN,RPAREN,SEMI,assertTrue,LPAREN,""categoryName did not match"",COMMA,testProd,DOT,getCategoryName,LPAREN,RPAREN,DOT,equalsIgnoreCase,LPAREN,""mexican food"",RPAREN,RPAREN,SEMI,assertTrue,LPAREN,""price did not match"",COMMA,testProd,DOT,getUnitPrice,LPAREN,RPAREN,EQEQ,15.99,RPAREN,SEMI,assertTrue,LPAREN,""amt_in_stock did not match"",COMMA,testProd,DOT,getUnitsInStock,LPAREN,RPAREN,EQEQ,5,RPAREN,SEMI,assertTrue,LPAREN,""amt_on_order did not match"",COMMA,testProd,DOT,getUnitsOnOrder,LPAREN,RPAREN,EQEQ,10,RPAREN,SEMI,assertTrue,LPAREN,""threshold did not match"",COMMA,testProd,DOT,getReorderLevel,LPAREN,RPAREN,EQEQ,5,RPAREN,SEMI,assertFalse,LPAREN,""discontinued flag did not match"",COMMA,testProd,DOT,isDiscontinued,LPAREN,RPAREN,RPAREN,SEMI,assertTrue,LPAREN,testProd,DOT,getImagePath,LPAREN,RPAREN,DOT,equalsIgnoreCase,LPAREN,""imgpath"",RPAREN,RPAREN,SEMI,pDAO,DOT,removeProduct,LPAREN,testProd,RPAREN,SEMI,testProd,EQ,pDAO,DOT,getProductByProductID,LPAREN,prodId,RPAREN,SEMI,assertNull,LPAREN,""expected no record to be returned (null)"",COMMA,testProd,RPAREN,SEMI,RBRACE","    @Test
,    public void test_removeProduct() throws Exception {
,        Product newProd = new Product(<MASK>1, ""tacos"", ""tacos desc"",
,                ""mexican food"", 15.99, 5, 10, 5, false, ""imgpath"");
,
,        int prodId = pDAO.createProduct(newProd);
,        Product testProd = pDAO.getProductByProductID(prodId);
,
,        // should exist here
,        assertTrue(""name did not match"", testProd.getProductName()
,                .equalsIgnoreCase(""tacos""));
,        assertTrue(""description did not match"", testProd.getDescription()
,                .equalsIgnoreCase(""tacos desc""));
,        assertTrue(""categoryName did not match"", testProd.getCategoryName()
,                .equalsIgnoreCase(""mexican food""));
,        assertTrue(""price did not match"", testProd.getUnitPrice() == 15.99);
,        assertTrue(""amt_in_stock did not match"",
,                testProd.getUnitsInStock() == 5);
,        assertTrue(""amt_on_order did not match"",
,                testProd.getUnitsOnOrder() == 10);
,        assertTrue(""threshold did not match"", testProd.getReorderLevel() == 5);
,        assertFalse(""discontinued flag did not match"",
,                testProd.isDiscontinued());
,        assertTrue(testProd.getImagePath().equalsIgnoreCase(""imgpath""));
,
,        pDAO.removeProduct(testProd);
,        // but not here
,        testProd = pDAO.getProductByProductID(prodId);
,        assertNull(""expected no record to be returned (null)"", testProd);
,    }
"
b6d08fd3-a673-4a77-8d9f-bf9a01922a85,4ea1e4ff-7ff3-4baf-b1e7-27cbdbee20df,SLASH,"void,reverse,LPAREN,RPAREN,LBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,wires,DOT,size,LPAREN,RPAREN,<MASK>,2,SUB,1,SEMI,i,PLUSPLUS,RPAREN,LBRACE,int,j,EQ,wires,DOT,size,LPAREN,RPAREN,SUB,1,SUB,i,SEMI,PolyLine,wire1,EQ,wires,DOT,elementAt,LPAREN,i,RPAREN,SEMI,PolyLine,wire2,EQ,wires,DOT,elementAt,LPAREN,j,RPAREN,SEMI,wires,DOT,setElementAt,LPAREN,wire2,COMMA,i,RPAREN,SEMI,wires,DOT,setElementAt,LPAREN,wire1,COMMA,j,RPAREN,SEMI,RBRACE,RBRACE","    void reverse() {
,        for (int i = 0; i < wires.size() <MASK> 2 - 1; i++) {
,            int j = wires.size() - 1 - i;
,            PolyLine wire1 = wires.elementAt(i);
,            PolyLine wire2 = wires.elementAt(j);
,
,            wires.setElementAt(wire2, i);
,            wires.setElementAt(wire1, j);
,
,        }
,    }
"
9dc56b97-3fea-407c-9846-6a4e260a6d89,f49602e4-bd63-48df-b974-222b383a26e5,STAR,"PRIVATE,STATIC,byte,encodeConnectionId,LPAREN,int,connectionId,RPAREN,THROWS,ConnectionIdOutOfRangeException,LBRACE,IF,LPAREN,connectionId,BANGEQ,Packet,DOT,ANONYMOUS_CONNECTION_ID,AMPAMP,LPAREN,connectionId,LT,Packet,DOT,MINIMUM_CONNECTION_ID,BARBAR,connectionId,GT,Packet,DOT,MAXIMUM_CONNECTION_ID,RPAREN,RPAREN,THROW,NEW,ConnectionIdOutOfRangeException,LPAREN,connectionId,RPAREN,SEMI,RETURN,LPAREN,byte,RPAREN,LPAREN,connectionId,GT,Byte,DOT,MAX_VALUE,QUES,connectionId,PLUS,2,<MASK>,Byte,DOT,MIN_VALUE,COLON,connectionId,RPAREN,SEMI,RBRACE","	private static byte encodeConnectionId(int connectionId) throws ConnectionIdOutOfRangeException {
,		if(connectionId != Packet.ANONYMOUS_CONNECTION_ID && (connectionId < Packet.MINIMUM_CONNECTION_ID || connectionId > Packet.MAXIMUM_CONNECTION_ID))
,			throw new ConnectionIdOutOfRangeException(connectionId);
,		return (byte) (connectionId > Byte.MAX_VALUE ? connectionId + 2<MASK>Byte.MIN_VALUE : connectionId);
,	}
"
b792a0be-4219-4d3e-95ef-36bcf8d3d523,32ef2ea4-0f56-4163-b969-a6db2c3ff271,GTEQ,"MONKEYS_AT,Override,PUBLIC,void,sell,LPAREN,Command,cmd,RPAREN,LBRACE,cmd,DOT,execute,LPAREN,RPAREN,SEMI,IF,LPAREN,Storage,DOT,getInstance,LPAREN,RPAREN,DOT,getRevenue,LPAREN,RPAREN,LT,10000.0,RPAREN,LBRACE,restaurant,DOT,setState,LPAREN,restaurant,DOT,getBadstate,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,Storage,DOT,getInstance,LPAREN,RPAREN,DOT,getRevenue,LPAREN,RPAREN,<MASK>,10000.0,AMPAMP,Storage,DOT,getInstance,LPAREN,RPAREN,DOT,getRevenue,LPAREN,RPAREN,LT,20000.0,RPAREN,LBRACE,restaurant,DOT,setState,LPAREN,restaurant,DOT,getNormalstate,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,ELSE,LBRACE,restaurant,DOT,setState,LPAREN,restaurant,DOT,getGoodstate,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,RBRACE","	@Override
,	public void sell(Command cmd) 
,	{
,		cmd.execute();
,		if(Storage.getInstance().getRevenue() < 10000.0)
,		{
,			restaurant.setState(restaurant.getBadstate());
,		}else if(Storage.getInstance().getRevenue() <MASK> 10000.0 && Storage.getInstance().getRevenue() < 20000.0)
,		{
,			restaurant.setState(restaurant.getNormalstate());
,		}
,		else
,		{
,			restaurant.setState(restaurant.getGoodstate());
,		}
,	}
"
ee6285e4-70fb-4aa1-99e0-6f8cd1871b27,969e6d93-0ff9-41cd-ad56-67771754d06e,LTEQ,"PUBLIC,STATIC,void,main,LPAREN,String,args,LBRACKET,RBRACKET,RPAREN,LBRACE,int,total,EQ,1632442,SEMI,int,limit,EQ,108829,SEMI,long,begin,EQ,System,DOT,currentTimeMillis,LPAREN,RPAREN,SEMI,ExecutorService,executorService,EQ,Executors,DOT,newFixedThreadPool,LPAREN,total,SLASH,limit,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,total,SLASH,limit,SEMI,i,PLUSPLUS,RPAREN,LBRACE,SetAuthorRelation_In,test,EQ,NEW,SetAuthorRelation_In,LPAREN,i,STAR,limit,COMMA,limit,COMMA,""T"",PLUS,i,RPAREN,SEMI,executorService,DOT,execute,LPAREN,test,RPAREN,SEMI,RBRACE,executorService,DOT,shutdown,LPAREN,RPAREN,SEMI,WHILE,LPAREN,BANG,executorService,DOT,isTerminated,LPAREN,RPAREN,RPAREN,LBRACE,RBRACE,long,end,EQ,System,DOT,currentTimeMillis,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""total time: "",PLUS,LPAREN,end,SUB,begin,RPAREN,SLASH,1000,RPAREN,SEMI,RBRACE","	public static void main(String args[]) {
,		int total = 1632442;
,		int limit = 108829;
,		long begin = System.currentTimeMillis();
,		ExecutorService executorService = Executors.newFixedThreadPool(total
,				/ limit);
,		for (int i = 0; i <MASK> total / limit; i++) {
,			SetAuthorRelation_In test = new SetAuthorRelation_In(i * limit,
,					limit, ""T"" + i);
,			executorService.execute(test);
,		}
,		executorService.shutdown();
,		while (!executorService.isTerminated()) {
,		}
,		long end = System.currentTimeMillis();
,		System.out.println(""total time: "" + (end - begin) / 1000);
,	}
"
56952896-479b-43e9-a9cf-c3f3bb9afc0e,08f81e0d-5d2b-4aa7-92c7-17d386ec6fa7,SUB,"MONKEYS_AT,Test,PUBLIC,void,test_removeOrderByOrderID,LPAREN,RPAREN,THROWS,Exception,LBRACE,UserDAO,uDAO,EQ,NEW,UserDAO,LPAREN,RPAREN,SEMI,User,newUser,EQ,NEW,User,LPAREN,<MASK>,1,COMMA,""Jim"",COMMA,""321 Test Road"",COMMA,""Columbus"",COMMA,""OH"",COMMA,""43230"",COMMA,""6148881234"",RPAREN,SEMI,int,userId,EQ,uDAO,DOT,createUser,LPAREN,newUser,RPAREN,SEMI,int,orderId,EQ,oDAO,DOT,createOrderByUserID,LPAREN,userId,RPAREN,SEMI,Order,testOrd,EQ,oDAO,DOT,getOrderByOrderID,LPAREN,orderId,RPAREN,SEMI,assertEquals,LPAREN,userId,COMMA,testOrd,DOT,getUserID,LPAREN,RPAREN,RPAREN,SEMI,oDAO,DOT,removeOrderByOrderID,LPAREN,orderId,RPAREN,SEMI,testOrd,EQ,oDAO,DOT,getOrderByOrderID,LPAREN,orderId,RPAREN,SEMI,assertNull,LPAREN,""expected no record to be returned (null)"",COMMA,testOrd,RPAREN,SEMI,uDAO,DOT,removeUserByUserID,LPAREN,userId,RPAREN,SEMI,uDAO,DOT,closeConnection,LPAREN,RPAREN,SEMI,oDAO,DOT,removeOrderByOrderID,LPAREN,orderId,RPAREN,SEMI,RBRACE","    @Test
,    public void test_removeOrderByOrderID() throws Exception {
,        UserDAO uDAO = new UserDAO();
,        User newUser = new User(<MASK>1, ""Jim"", ""321 Test Road"", ""Columbus"", ""OH"",
,                ""43230"", ""6148881234"");
,        int userId = uDAO.createUser(newUser);
,        int orderId = oDAO.createOrderByUserID(userId);
,        Order testOrd = oDAO.getOrderByOrderID(orderId);
,
,        // should exist here
,        assertEquals(userId, testOrd.getUserID());
,
,        oDAO.removeOrderByOrderID(orderId);
,        // but not here
,        testOrd = oDAO.getOrderByOrderID(orderId);
,        assertNull(""expected no record to be returned (null)"", testOrd);
,
,        // clean up
,        uDAO.removeUserByUserID(userId);
,        uDAO.closeConnection();
,
,        // what happens if I try to remove it twice ?
,        oDAO.removeOrderByOrderID(orderId);
,
,    }
"
63ee1274-7add-4bc5-a057-e2079298f295,3cf881cc-a281-489f-86af-b8e88122d36a,SUB,"PRIVATE,STATIC,void,test10,LPAREN,RPAREN,THROWS,FileNotFoundException,LBRACE,String,input,EQ,""new\n"",PLUS,""pick up key\n"",PLUS,""wait\n"",PLUS,""unlock door with key\n"",PLUS,""go through cell door\n"",PLUS,""new\n"",PLUS,""pick up key\n"",PLUS,""wait\n"",PLUS,""unlock door with key\n"",PLUS,""go through cell door\n"",PLUS,""quit\n"",PLUS,""y\n"",SEMI,HashMap,LT,Integer,COMMA,String,GT,output,EQ,NEW,HashMap,LT,Integer,COMMA,String,GT,LPAREN,RPAREN,SEMI,boolean,passed,EQ,true,SEMI,TRY,LBRACE,in,EQ,NEW,ByteArrayInputStream,LPAREN,input,DOT,getBytes,LPAREN,RPAREN,RPAREN,SEMI,System,DOT,setIn,LPAREN,in,RPAREN,SEMI,out,EQ,NEW,PrintStream,LPAREN,""testing.txt"",RPAREN,SEMI,System,DOT,setOut,LPAREN,out,RPAREN,SEMI,Game,DOT,main,LPAREN,null,RPAREN,SEMI,RBRACE,CATCH,LPAREN,ExitException,se,RPAREN,LBRACE,RBRACE,CATCH,LPAREN,Exception,e,RPAREN,LBRACE,System,DOT,setOut,LPAREN,stdout,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""Error: "",RPAREN,SEMI,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,passed,EQ,false,SEMI,RBRACE,FINALLY,LBRACE,System,DOT,setOut,LPAREN,stdout,RPAREN,SEMI,MONKEYS_AT,SuppressWarnings,LPAREN,""resource"",RPAREN,Scanner,sc,EQ,NEW,Scanner,LPAREN,NEW,File,LPAREN,""testing.txt"",RPAREN,RPAREN,SEMI,ArrayList,LT,String,GT,testOutput,EQ,NEW,ArrayList,LT,String,GT,LPAREN,RPAREN,SEMI,WHILE,LPAREN,sc,DOT,hasNextLine,LPAREN,RPAREN,RPAREN,LBRACE,testOutput,DOT,add,LPAREN,sc,DOT,nextLine,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,output,DOT,put,LPAREN,12,COMMA,"">> You pick up a cell key."",RPAREN,SEMI,output,DOT,put,LPAREN,13,COMMA,""The guard walks toward your cell."",RPAREN,SEMI,output,DOT,put,LPAREN,14,COMMA,"">> Some time goes by."",RPAREN,SEMI,output,DOT,put,LPAREN,15,COMMA,""The guard peers into the cell, checking that the door is secured, then continues on."",RPAREN,SEMI,output,DOT,put,LPAREN,18,COMMA,"">> You walk through the cell door."",RPAREN,SEMI,output,DOT,put,LPAREN,21,COMMA,""The guard walks away from your cell."",RPAREN,SEMI,output,DOT,put,LPAREN,22,COMMA,""You escape silently into the shadows."",RPAREN,SEMI,output,DOT,put,LPAREN,23,COMMA,""YOU WON!"",RPAREN,SEMI,output,DOT,put,LPAREN,36,COMMA,"">> You pick up a cell key."",RPAREN,SEMI,output,DOT,put,LPAREN,37,COMMA,""The guard walks toward your cell."",RPAREN,SEMI,output,DOT,put,LPAREN,38,COMMA,"">> Some time goes by."",RPAREN,SEMI,output,DOT,put,LPAREN,39,COMMA,""The guard peers into the cell, checking that the door is secured, then continues on."",RPAREN,SEMI,output,DOT,put,LPAREN,42,COMMA,"">> You walk through the cell door."",RPAREN,SEMI,output,DOT,put,LPAREN,45,COMMA,""The guard walks away from your cell."",RPAREN,SEMI,output,DOT,put,LPAREN,46,COMMA,""You escape silently into the shadows."",RPAREN,SEMI,output,DOT,put,LPAREN,47,COMMA,""YOU WON!"",RPAREN,SEMI,output,DOT,put,LPAREN,testOutput,DOT,size,LPAREN,RPAREN,<MASK>,1,COMMA,"">>"",RPAREN,SEMI,IF,LPAREN,passed,RPAREN,LBRACE,FOR,LPAREN,Map,DOT,Entry,LT,Integer,COMMA,String,GT,entry,COLON,output,DOT,entrySet,LPAREN,RPAREN,RPAREN,LBRACE,IF,LPAREN,BANG,testOutput,DOT,get,LPAREN,entry,DOT,getKey,LPAREN,RPAREN,RPAREN,DOT,equals,LPAREN,entry,DOT,getValue,LPAREN,RPAREN,RPAREN,RPAREN,LBRACE,passed,EQ,false,SEMI,System,DOT,out,DOT,println,LPAREN,""test10 failed: Line "",PLUS,entry,DOT,getKey,LPAREN,RPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""\tExpected: "",PLUS,entry,DOT,getValue,LPAREN,RPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""\tReceived: "",PLUS,testOutput,DOT,get,LPAREN,entry,DOT,getKey,LPAREN,RPAREN,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,IF,LPAREN,passed,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""test10 passed"",RPAREN,SEMI,RBRACE,RBRACE,ELSE,LBRACE,System,DOT,out,DOT,println,LPAREN,""test10 failed: error"",RPAREN,SEMI,RBRACE,RBRACE,RBRACE","	private static void test10() throws FileNotFoundException {
,		//Test winning the game twice in a row
,		String input = ""new\n"" + ""pick up key\n"" + ""wait\n""
,				+ ""unlock door with key\n"" + ""go through cell door\n"" + ""new\n"" + ""pick up key\n"" + ""wait\n""
,				+ ""unlock door with key\n"" + ""go through cell door\n"" + ""quit\n"" + ""y\n"";
,
,		HashMap<Integer, String> output = new HashMap<Integer, String>();
,
,		boolean passed = true;
,		try {
,			in = new ByteArrayInputStream(input.getBytes());
,			System.setIn(in);
,			out = new PrintStream(""testing.txt"");
,			System.setOut(out);
,			Game.main(null);
,		} catch (ExitException se) {
,
,		} catch (Exception e) {
,			System.setOut(stdout);
,			System.out.println(""Error: "");
,			e.printStackTrace();
,			passed = false;
,		} finally {
,			System.setOut(stdout);
,			@SuppressWarnings(""resource"")
,			Scanner sc = new Scanner(new File(""testing.txt""));
,			ArrayList<String> testOutput = new ArrayList<String>();
,			while (sc.hasNextLine()) {
,				testOutput.add(sc.nextLine());
,			}
,			
,			//The expected output for specific lines
,			output.put(12,"">> You pick up a cell key."");
,			output.put(13,""The guard walks toward your cell."");
,			output.put(14,"">> Some time goes by."");
,			output.put(15,""The guard peers into the cell, checking that the door is secured, then continues on."");
,			output.put(18,"">> You walk through the cell door."");
,			output.put(21,""The guard walks away from your cell."");
,			output.put(22,""You escape silently into the shadows."");
,			output.put(23,""YOU WON!"");
,			
,			output.put(36,"">> You pick up a cell key."");
,			output.put(37,""The guard walks toward your cell."");
,			output.put(38,"">> Some time goes by."");
,			output.put(39,""The guard peers into the cell, checking that the door is secured, then continues on."");
,			output.put(42,"">> You walk through the cell door."");
,			output.put(45,""The guard walks away from your cell."");
,			output.put(46,""You escape silently into the shadows."");
,			output.put(47,""YOU WON!"");
,			
,			output.put(testOutput.size() <MASK> 1, "">>"");
,
,			if (passed) {
,				for (Map.Entry<Integer, String> entry : output.entrySet()) {
,					if (!testOutput.get(entry.getKey())
,							.equals(entry.getValue())) {
,						passed = false;
,						System.out.println(""test10 failed: Line ""
,								+ entry.getKey());
,						System.out.println(""\tExpected: "" + entry.getValue());
,						System.out.println(""\tReceived: ""
,								+ testOutput.get(entry.getKey()));
,					}
,				}
,				if (passed) {
,					System.out.println(""test10 passed"");
,				}
,			} else {
,				System.out.println(""test10 failed: error"");
,			}
,		}
,	}
"
3913c395-db09-4ac4-8282-49a81b6a21f4,89f2d2a9-2d2b-447e-add7-935241ffff22,LT,"PUBLIC,STATIC,String,fill,LPAREN,String,a,COMMA,String,b,COMMA,int,l,RPAREN,LBRACE,assert,BANG,b,DOT,isEmpty,LPAREN,RPAREN,SEMI,String,rv,EQ,a,SEMI,WHILE,LPAREN,rv,DOT,length,LPAREN,RPAREN,<MASK>,l,RPAREN,LBRACE,rv,EQ,b,PLUS,rv,SEMI,RBRACE,RETURN,rv,SEMI,RBRACE","	public static String fill(String a, String b, int l) {
,		assert !b.isEmpty();
,		String rv = a;
,		while (rv.length() <MASK> l) {
,			rv = b + rv;
,		}
,		return rv;
,	}
"
cc1c4187-1182-4cd3-a559-9895584ed311,1b384897-1aae-4203-89f4-dfea895abe70,GTEQ,"PUBLIC,String,canAccess,LPAREN,int,LBRACKET,RBRACKET,rights,COMMA,int,minPermission,RPAREN,LBRACE,StringBuilder,permission,EQ,NEW,StringBuilder,LPAREN,rights,DOT,length,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,rights,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,rights,LBRACKET,i,RBRACKET,<MASK>,minPermission,RPAREN,LBRACE,permission,DOT,append,LPAREN,""A"",RPAREN,SEMI,RBRACE,ELSE,LBRACE,permission,DOT,append,LPAREN,""D"",RPAREN,SEMI,RBRACE,RBRACE,RETURN,permission,DOT,toString,LPAREN,RPAREN,SEMI,RBRACE","	public String canAccess(int[] rights, int minPermission) {
,		StringBuilder permission=new StringBuilder(rights.length);
,		for(int i=0;i<rights.length;i++){
,			if(rights[i]<MASK>minPermission){
,				permission.append(""A"");
,			}
,			else {
,				permission.append(""D"");
,			}
,		}
,		return permission.toString();
,	}
"
85e73bf4-198d-4e97-95ec-bfad228c11ea,86f4c68c-b9f0-4c46-8155-c9e724724f7f,STAR,"MONKEYS_AT,Override,PUBLIC,byte,LBRACKET,RBRACKET,toBytes,LPAREN,Object,value,RPAREN,LBRACE,byte,LBRACKET,RBRACKET,bytes,EQ,NEW,byte,LBRACKET,getLength,LPAREN,RPAREN,RBRACKET,SEMI,BigDecimal,dec,EQ,LPAREN,BigDecimal,RPAREN,value,SEMI,BigInteger,mantissa,EQ,dec,DOT,unscaledValue,LPAREN,RPAREN,SEMI,int,exp,EQ,dec,DOT,precision,LPAREN,RPAREN,SUB,dec,DOT,scale,LPAREN,RPAREN,SEMI,int,signum,EQ,dec,DOT,signum,LPAREN,RPAREN,SEMI,byte,LBRACKET,RBRACKET,mantissaBytes,EQ,mantissa,DOT,toByteArray,LPAREN,RPAREN,SEMI,mantissaBytes,LBRACKET,0,RBRACKET,EQ,LPAREN,byte,RPAREN,LPAREN,mantissaBytes,LBRACKET,0,RBRACKET,CARET,80,RPAREN,SEMI,IF,LPAREN,LPAREN,exp,GT,LPAREN,EXP_OFFSET,SUB,1,RPAREN,RPAREN,BARBAR,LPAREN,exp,LT,LPAREN,SUB,1,<MASK>,EXP_OFFSET,RPAREN,RPAREN,RPAREN,LBRACE,THROW,NEW,RuntimeException,LPAREN,""Cannot convert number to sortable decimal: exp = "",PLUS,exp,PLUS,"", mantissa = [0.]"",PLUS,mantissa,RPAREN,SEMI,RBRACE,exp,PLUSEQ,EXP_OFFSET,SEMI,IF,LPAREN,signum,LT,0,RPAREN,LBRACE,exp,CARETEQ,FF,SEMI,RBRACE,bytes,LBRACKET,0,RBRACKET,EQ,LPAREN,byte,RPAREN,exp,SEMI,exp,GTGTGTEQ,8,SEMI,bytes,LBRACKET,1,RBRACKET,EQ,LPAREN,byte,RPAREN,exp,SEMI,IF,LPAREN,signum,GTEQ,0,RPAREN,LBRACE,bytes,LBRACKET,0,RBRACKET,EQ,LPAREN,byte,RPAREN,LPAREN,bytes,LBRACKET,0,RBRACKET,BAR,80,RPAREN,SEMI,RBRACE,ELSE,LBRACE,bytes,LBRACKET,0,RBRACKET,EQ,LPAREN,byte,RPAREN,LPAREN,bytes,LBRACKET,0,RBRACKET,AMP,7F,RPAREN,SEMI,RBRACE,int,mantissaLength,EQ,Math,DOT,min,LPAREN,mantissaBytes,DOT,length,COMMA,length,SUB,2,RPAREN,SEMI,System,DOT,arraycopy,LPAREN,mantissaBytes,COMMA,0,COMMA,bytes,COMMA,2,COMMA,mantissaLength,RPAREN,SEMI,RETURN,bytes,SEMI,RBRACE","    @Override
,    public byte[] toBytes(Object value) {
,        byte[] bytes = new byte[getLength()];
,        BigDecimal dec = (BigDecimal)value;
,
,        BigInteger mantissa = dec.unscaledValue();
,        int exp = dec.precision() - dec.scale();
,        int signum = dec.signum();
,
,        byte[] mantissaBytes = mantissa.toByteArray();
,        // Mantissabytes are in two's complement, just invert the sign bit
,        mantissaBytes[0] = (byte)(mantissaBytes[0] ^ 0x80);
,
,        if ((exp > (EXP_OFFSET - 1)) || (exp < (-1 <MASK> EXP_OFFSET))) {
,            throw new RuntimeException(""Cannot convert number to sortable decimal: exp = "" + exp + "", mantissa = [0.]"" + mantissa);
,        }
,
,        // Similar to IEEE floating points, add an offset to the exponent so that it becomes 0-based.
,        exp += EXP_OFFSET;
,
,        // For negative numbers, flip the exponent
,        if (signum < 0) {
,            exp ^= 0xFF;
,        }
,
,        // Copy exponent into result array
,        bytes[0] = (byte)exp;
,        exp >>>= 8;
,        bytes[1] = (byte)exp;
,
,        // Set the sign bit
,        if (signum >= 0) {
,            bytes[0] = (byte)(bytes[0] | 0x80);
,        } else {
,            bytes[0] = (byte)(bytes[0] & 0x7F);
,        }
,
,        // Copy mantissa into result array
,        int mantissaLength = Math.min(mantissaBytes.length, length - 2);
,        System.arraycopy(mantissaBytes, 0, bytes, 2, mantissaLength);
,
,        return bytes;
,    }
"
b6d08fd3-a673-4a77-8d9f-bf9a01922a85,09dc3c7d-7d5c-4695-b2d6-3081c84b67d9,SLASH,"MONKEYS_AT,Override,PUBLIC,Vector3d,getFocus,LPAREN,RPAREN,LBRACE,float,yCenter,EQ,currentTile,STAR,TILE_WIDTH,PLUS,TILE_WIDTH,<MASK>,2,SEMI,RETURN,NEW,Vector3d,LPAREN,0,COMMA,yCenter,COMMA,0,RPAREN,SEMI,RBRACE","    @Override
,    public Vector3d getFocus() {
,        float yCenter = currentTile * TILE_WIDTH + TILE_WIDTH <MASK> 2;
,        return new Vector3d(0, yCenter, 0);
,    }
"
ad0a2aad-9ad8-443c-832f-88b9f64460ed,de306a17-9250-4993-a713-2ff79b2a8e1e,EQ,"PROTECTED,void,end,LPAREN,RPAREN,LBRACE,IF,LPAREN,BANG,feederSolenoid,DOT,isSetIn,LPAREN,RPAREN,RPAREN,LBRACE,feeder,DOT,isIn,<MASK>,false,SEMI,RBRACE,SmartDashboard,DOT,putBoolean,LPAREN,""ShooterIsIn"",COMMA,feeder,DOT,isIn,RPAREN,SEMI,RBRACE","    protected void end() {
,        if (!feederSolenoid.isSetIn()) {
,            feeder.isIn <MASK> false;
,        }
,        SmartDashboard.putBoolean(""ShooterIsIn"", feeder.isIn);
,    }
"
2171d474-c7ae-45f9-a2ad-aefcd5d5ec31,362f7601-e0bb-4828-9533-18290a81d44e,PERCENT,"PUBLIC,STATIC,BitfieldMessage,craft,LPAREN,BitSet,availablePieces,RPAREN,LBRACE,byte,LBRACKET,RBRACKET,bitfield,EQ,NEW,byte,LBRACKET,availablePieces,DOT,length,LPAREN,RPAREN,SLASH,8,PLUS,1,RBRACKET,SEMI,FOR,LPAREN,int,i,EQ,availablePieces,DOT,nextSetBit,LPAREN,0,RPAREN,SEMI,i,GTEQ,0,SEMI,i,EQ,availablePieces,DOT,nextSetBit,LPAREN,i,PLUS,1,RPAREN,RPAREN,LBRACE,bitfield,LBRACKET,i,SLASH,8,RBRACKET,BAREQ,1,LTLT,LPAREN,7,SUB,LPAREN,i,<MASK>,8,RPAREN,RPAREN,SEMI,RBRACE,ByteBuffer,buffer,EQ,ByteBuffer,DOT,allocate,LPAREN,BitfieldMessage,DOT,BASE_SIZE,PLUS,4,PLUS,bitfield,DOT,length,RPAREN,SEMI,buffer,DOT,putInt,LPAREN,BitfieldMessage,DOT,BASE_SIZE,PLUS,bitfield,DOT,length,RPAREN,SEMI,buffer,DOT,put,LPAREN,Message,DOT,Type,DOT,BITFIELD,DOT,getTypeByte,LPAREN,RPAREN,RPAREN,SEMI,buffer,DOT,put,LPAREN,ByteBuffer,DOT,wrap,LPAREN,bitfield,RPAREN,RPAREN,SEMI,RETURN,NEW,BitfieldMessage,LPAREN,buffer,COMMA,availablePieces,RPAREN,SEMI,RBRACE","		public static BitfieldMessage craft(BitSet availablePieces) {
,			byte[] bitfield = new byte[availablePieces.length()/8 + 1];
,			for (int i=availablePieces.nextSetBit(0); i >= 0;
,					i=availablePieces.nextSetBit(i+1)) {
,				bitfield[i/8] |= 1 << (7 -(i <MASK> 8));
,			}
,
,			ByteBuffer buffer = ByteBuffer.allocate(BitfieldMessage.BASE_SIZE +
,					4 + bitfield.length);
,			buffer.putInt(BitfieldMessage.BASE_SIZE + bitfield.length);
,			buffer.put(Message.Type.BITFIELD.getTypeByte());
,			buffer.put(ByteBuffer.wrap(bitfield));
,			return new BitfieldMessage(buffer, availablePieces);
,		}
"
38ed5e2e-bfac-4cc9-94e0-5ee38dabb0ca,0466fbc5-d1bf-4e00-a152-334bc8855af6,EQEQ,"PUBLIC,FHashMap,LT,Key,COMMA,Val,GT,with,LPAREN,Key,key,COMMA,Val,value,COMMA,BinaryOp,LT,Val,GT,valCombiner,RPAREN,LBRACE,Object,t,EQ,with,LPAREN,tree,COMMA,key,COMMA,hashCode,LPAREN,key,RPAREN,COMMA,value,COMMA,valCombiner,RPAREN,SEMI,IF,LPAREN,t,<MASK>,tree,RPAREN,RETURN,this,SEMI,ELSE,RETURN,NEW,FHashMap,LT,Key,COMMA,Val,GT,LPAREN,t,COMMA,dflt,RPAREN,SEMI,RBRACE","    public FHashMap<Key, Val> with(Key key, Val value, BinaryOp<Val> valCombiner) {
,	Object t = with(tree, key, hashCode(key), value, valCombiner);
,	if (t <MASK> tree) return this;
,	else return new FHashMap<Key, Val>(t, dflt);
,    }
"
2170437a-9f53-47a2-b3cb-257eca2eb4ab,c871e146-c7a5-4ae4-a85a-dacc0221643b,EQEQ,"PUBLIC,void,setPriority,LPAREN,PriorityCode,priority,RPAREN,LBRACE,IF,LPAREN,priority,<MASK>,null,RPAREN,LBRACE,THROW,NEW,IllegalArgumentException,LPAREN,""Priority cannot be null!"",RPAREN,SEMI,RBRACE,this,DOT,priority,EQ,priority,SEMI,RBRACE","	public void setPriority(PriorityCode priority)
,	{
,		if (priority <MASK> null)
,		{
,			throw new IllegalArgumentException(""Priority cannot be null!"");
,		}
,		this.priority = priority;
,	}
"
8435b374-5b00-4732-9cf1-0c238d864bf2,9759cbcc-c146-4a8d-89a2-059be318f903,GT,"PUBLIC,void,setFontSize,LPAREN,int,size,RPAREN,LBRACE,IF,LPAREN,size,<MASK>,0,RPAREN,LBRACE,Font,font,SEMI,IF,LPAREN,_font,BANGEQ,null,RPAREN,font,EQ,_font,SEMI,ELSE,font,EQ,_pane,DOT,getGraphics,LPAREN,RPAREN,DOT,getFont,LPAREN,RPAREN,SEMI,_font,EQ,NEW,Font,LPAREN,font,DOT,getFamily,LPAREN,RPAREN,COMMA,font,DOT,getStyle,LPAREN,RPAREN,COMMA,size,RPAREN,SEMI,_graphics,DOT,setFont,LPAREN,_font,RPAREN,SEMI,_fm,EQ,_graphics,DOT,getFontMetrics,LPAREN,RPAREN,SEMI,RBRACE,RBRACE","		public void setFontSize(int size) {
,			if (size<MASK>0) {
,				Font font;
,				if (_font!=null)
,					font=_font;
,				else
,					font=_pane.getGraphics().getFont();
,				_font=new Font(font.getFamily(),font.getStyle(),size);
,				_graphics.setFont(_font);
,				_fm=_graphics.getFontMetrics();
,			}
,		}
"
09478113-8f39-4146-870b-8037a6932443,852479ae-f9f2-4f46-920e-2f4e5754716c,EQEQ,"PRIVATE,void,OP_TXA,LPAREN,RPAREN,LBRACE,setNFlag,LPAREN,getBit,LPAREN,getX,LPAREN,RPAREN,COMMA,7,RPAREN,RPAREN,SEMI,setZFlag,LPAREN,getX,LPAREN,RPAREN,<MASK>,0,RPAREN,SEMI,setA,LPAREN,getX,LPAREN,RPAREN,RPAREN,SEMI,RBRACE","    private void OP_TXA()
,    {
,        setNFlag(getBit(getX(), 7));
,        setZFlag(getX() <MASK> 0);
,
,        setA(getX());
,    }
"
113c5414-6c55-466b-b879-a350ab6e0ca2,3d5d2c71-d398-40cd-a922-62c0315f7619,EQ,"PUBLIC,void,setTag,LPAREN,String,tag,RPAREN,LBRACE,this,DOT,tag,<MASK>,tag,SEMI,RBRACE","	public void setTag(String tag) {
,		this.tag <MASK> tag;
,	}
"
37134524-36c4-486f-85f7-06f1a52cb561,019fa9dd-c986-427a-ad78-b75d3887d046,SLASH,"PUBLIC,CoreEngine,LPAREN,int,width,COMMA,int,height,COMMA,double,framerate,COMMA,QuantumGame,game,RPAREN,LBRACE,this,DOT,isRunning,EQ,false,SEMI,this,DOT,game,EQ,game,SEMI,this,DOT,width,EQ,width,SEMI,this,DOT,height,EQ,height,SEMI,this,DOT,frameTime,EQ,1.0,<MASK>,framerate,SEMI,RBRACE","    public CoreEngine(int width, int height, double framerate, QuantumGame game) {
,        this.isRunning = false;
,        this.game = game;
,        this.width = width;
,        this.height = height;
,        this.frameTime = 1.0<MASK>framerate;
,    }
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,0a697509-ce62-4ed3-a8e9-ff53b2f2abca,BANGEQ,"PRIVATE,boolean,loadLevel,LPAREN,GameState,state,COMMA,int,i,RPAREN,LBRACE,ActionRobot,DOT,GoFromMainMenuToLevelSelection,LPAREN,RPAREN,SEMI,IF,LPAREN,state,EQEQ,GameState,DOT,WON,BARBAR,state,EQEQ,GameState,DOT,LOST,RPAREN,LBRACE,LBRACE,proxy,DOT,send,LPAREN,NEW,ProxyClickMessage,LPAREN,342,COMMA,382,RPAREN,RPAREN,SEMI,TRY,LBRACE,Thread,DOT,sleep,LPAREN,1000,RPAREN,SEMI,RBRACE,CATCH,LPAREN,InterruptedException,e1,RPAREN,LBRACE,e1,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,IF,LPAREN,pageSwitch,RPAREN,LBRACE,proxy,DOT,send,LPAREN,NEW,ProxyClickMessage,LPAREN,378,COMMA,451,RPAREN,RPAREN,SEMI,TRY,LBRACE,Thread,DOT,sleep,LPAREN,1000,RPAREN,SEMI,RBRACE,CATCH,LPAREN,InterruptedException,e1,RPAREN,LBRACE,e1,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,pageSwitch,EQ,false,SEMI,RBRACE,proxy,DOT,send,LPAREN,NEW,ProxyClickMessage,LPAREN,54,PLUS,LPAREN,LPAREN,i,SUB,1,RPAREN,PERCENT,7,RPAREN,STAR,86,COMMA,110,PLUS,LPAREN,LPAREN,i,SUB,1,RPAREN,SLASH,7,RPAREN,STAR,100,RPAREN,RPAREN,SEMI,TRY,LBRACE,Thread,DOT,sleep,LPAREN,1000,RPAREN,SEMI,RBRACE,CATCH,LPAREN,InterruptedException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,IF,LPAREN,i,EQEQ,1,RPAREN,proxy,DOT,send,LPAREN,NEW,ProxyClickMessage,LPAREN,1176,COMMA,704,RPAREN,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,state,EQEQ,GameState,DOT,PLAYING,RPAREN,LBRACE,proxy,DOT,send,LPAREN,NEW,ProxyClickMessage,LPAREN,48,COMMA,44,RPAREN,RPAREN,SEMI,TRY,LBRACE,Thread,DOT,sleep,LPAREN,1000,RPAREN,SEMI,RBRACE,CATCH,LPAREN,InterruptedException,e1,RPAREN,LBRACE,e1,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,proxy,DOT,send,LPAREN,NEW,ProxyClickMessage,LPAREN,168,COMMA,28,RPAREN,RPAREN,SEMI,TRY,LBRACE,Thread,DOT,sleep,LPAREN,1000,RPAREN,SEMI,RBRACE,CATCH,LPAREN,InterruptedException,e1,RPAREN,LBRACE,e1,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,IF,LPAREN,pageSwitch,RPAREN,LBRACE,proxy,DOT,send,LPAREN,NEW,ProxyClickMessage,LPAREN,378,COMMA,451,RPAREN,RPAREN,SEMI,TRY,LBRACE,Thread,DOT,sleep,LPAREN,1000,RPAREN,SEMI,RBRACE,CATCH,LPAREN,InterruptedException,e1,RPAREN,LBRACE,e1,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,pageSwitch,EQ,false,SEMI,RBRACE,proxy,DOT,send,LPAREN,NEW,ProxyClickMessage,LPAREN,54,PLUS,LPAREN,LPAREN,i,SUB,1,RPAREN,PERCENT,7,RPAREN,STAR,86,COMMA,110,PLUS,LPAREN,LPAREN,i,SUB,1,RPAREN,SLASH,7,RPAREN,STAR,100,RPAREN,RPAREN,SEMI,TRY,LBRACE,Thread,DOT,sleep,LPAREN,1000,RPAREN,SEMI,RBRACE,CATCH,LPAREN,InterruptedException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,IF,LPAREN,i,EQEQ,1,RPAREN,proxy,DOT,send,LPAREN,NEW,ProxyClickMessage,LPAREN,1176,COMMA,704,RPAREN,RPAREN,SEMI,RBRACE,ELSE,LBRACE,IF,LPAREN,pageSwitch,RPAREN,LBRACE,proxy,DOT,send,LPAREN,NEW,ProxyClickMessage,LPAREN,378,COMMA,451,RPAREN,RPAREN,SEMI,TRY,LBRACE,Thread,DOT,sleep,LPAREN,1000,RPAREN,SEMI,RBRACE,CATCH,LPAREN,InterruptedException,e1,RPAREN,LBRACE,e1,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,pageSwitch,EQ,false,SEMI,RBRACE,proxy,DOT,send,LPAREN,NEW,ProxyClickMessage,LPAREN,54,PLUS,LPAREN,LPAREN,i,SUB,1,RPAREN,PERCENT,7,RPAREN,STAR,86,COMMA,110,PLUS,LPAREN,LPAREN,i,SUB,1,RPAREN,SLASH,7,RPAREN,STAR,100,RPAREN,RPAREN,SEMI,TRY,LBRACE,Thread,DOT,sleep,LPAREN,1000,RPAREN,SEMI,RBRACE,CATCH,LPAREN,InterruptedException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,IF,LPAREN,i,EQEQ,1,RPAREN,proxy,DOT,send,LPAREN,NEW,ProxyClickMessage,LPAREN,1176,COMMA,704,RPAREN,RPAREN,SEMI,RBRACE,GameState,_state,EQ,StateUtil,DOT,getGameState,LPAREN,proxy,RPAREN,SEMI,int,count,EQ,0,SEMI,WHILE,LPAREN,_state,<MASK>,GameState,DOT,PLAYING,AMPAMP,count,LT,3,RPAREN,LBRACE,TRY,LBRACE,Thread,DOT,sleep,LPAREN,3000,RPAREN,SEMI,RBRACE,CATCH,LPAREN,InterruptedException,e1,RPAREN,LBRACE,e1,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,count,PLUSPLUS,SEMI,_state,EQ,StateUtil,DOT,getGameState,LPAREN,proxy,RPAREN,SEMI,RBRACE,IF,LPAREN,_state,EQEQ,GameState,DOT,PLAYING,RPAREN,LBRACE,FOR,LPAREN,int,k,EQ,0,SEMI,k,LT,15,SEMI,k,PLUSPLUS,RPAREN,LBRACE,proxy,DOT,send,LPAREN,NEW,ProxyMouseWheelMessage,LPAREN,SUB,1,RPAREN,RPAREN,SEMI,RBRACE,TRY,LBRACE,Thread,DOT,sleep,LPAREN,2000,RPAREN,SEMI,RBRACE,CATCH,LPAREN,InterruptedException,e1,RPAREN,LBRACE,e1,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,RETURN,true,SEMI,RBRACE","private boolean loadLevel(GameState state,int i)
,{
,    // if still at main menu or episode menu, skip it. 
,	ActionRobot.GoFromMainMenuToLevelSelection();
,	
,	
,	if(state == GameState.WON || state == GameState.LOST)
,	{
,	
,		/*if(state == GameState.WON && i >= current + 1)
,			  proxy.send(new ProxyClickMessage(500,375)); // go to the next level
,*/	/*if(state == GameState.WON)*/ { 
,		 
,		 	proxy.send(new ProxyClickMessage(342,382));//Click the left most button at the end page
,		 	try {
,				Thread.sleep(1000);
,			} catch (InterruptedException e1) {
,				e1.printStackTrace();
,			}
,		 	if(pageSwitch)
,		 	{
,		 		 proxy.send(new ProxyClickMessage(378, 451)); 
,		 		try {
,					Thread.sleep(1000);
,				} catch (InterruptedException e1) {
,					e1.printStackTrace();
,				}
,		 		pageSwitch = false;
,		 	}
,			 proxy.send(new ProxyClickMessage(54 + ((i-1)%7) * 86,110 + ((i-1)/7) * 100)); 
,		 try {
,				Thread.sleep(1000);
,			} catch (InterruptedException e) {
,			
,				e.printStackTrace();
,			}
,	 }
,		 if(i == 1)
,		//skip the animation, the animation does not appear in the SD mode.
,			 proxy.send(new ProxyClickMessage(1176,704)); 
,	}
,	else if(state == GameState.PLAYING)
,		{
,			proxy.send(new ProxyClickMessage(48,44));//Click the left most button, pause
,			  try {
,					Thread.sleep(1000);
,				} catch (InterruptedException e1) {
,
,					e1.printStackTrace();
,				}
,			  proxy.send(new ProxyClickMessage(168,28));//Click the left most button, pause
,			  try {
,					Thread.sleep(1000);
,				} catch (InterruptedException e1) {
,					e1.printStackTrace();
,				}
,			  if(pageSwitch)
,			 	{
,			 		 proxy.send(new ProxyClickMessage(378, 451)); 
,			 		try {
,						Thread.sleep(1000);
,					} catch (InterruptedException e1) {
,						e1.printStackTrace();
,					}
,			 		pageSwitch = false;
,			 	}
,				 proxy.send(new ProxyClickMessage(54 + ((i-1)%7) * 86,110 + ((i-1)/7) * 100)); 
,			  try {
,					Thread.sleep(1000);
,				} catch (InterruptedException e) {
,		
,					e.printStackTrace();
,				}
,				 if(i == 1)
,					 proxy.send(new ProxyClickMessage(1176,704)); 
,		}
,	else
,	{
,		if(pageSwitch)
,	 	{
,	 		 proxy.send(new ProxyClickMessage(378, 451)); 
,	 		try {
,				Thread.sleep(1000);
,			} catch (InterruptedException e1) {
,				e1.printStackTrace();
,			}
,	 		pageSwitch = false;
,	 	}
,		proxy.send(new ProxyClickMessage(54 + ((i-1)%7) * 86,110 + ((i-1)/7) * 100)); 
,		 try {
,			Thread.sleep(1000);
,		} catch (InterruptedException e) {
,		
,			e.printStackTrace();
,		}
,		 if(i == 1)
,			 proxy.send(new ProxyClickMessage(1176,704)); 
,	}
,	
,	  //Wait 9000 seconds for loading the level
,	  GameState _state = StateUtil.getGameState(proxy);
,	  int count = 0; // at most wait 10 seconds
,	   while(_state<MASK> GameState.PLAYING&& count < 3){
,	   try {
,			Thread.sleep(3000);
,		} catch (InterruptedException e1) {
,			
,			e1.printStackTrace();
,		}
,	   count ++;
,	   _state = StateUtil.getGameState(proxy);
,	   
,	   }
,	   
,     if(_state == GameState.PLAYING){
,
,    
,	   for (int k = 0; k < 15; k++) 
,	   {
,		   proxy.send(new ProxyMouseWheelMessage(-1));
,	   }
,	   
,	   try {
,			Thread.sleep(2000);
,		} catch (InterruptedException e1) {
,			
,			e1.printStackTrace();
,		}
,	 
,     }
,     
,   
,   //  System.out.println(""current: "" + current + ""  i  "" + i);
,     return true;
,
,}
"
38ed5e2e-bfac-4cc9-94e0-5ee38dabb0ca,a3f8b5d5-5585-41ef-b371-cb913eff6b1f,EQEQ,"STATIC,boolean,equals,LPAREN,Object,tree1,COMMA,Object,tree2,RPAREN,LBRACE,IF,LPAREN,tree1,<MASK>,tree2,RPAREN,RETURN,true,SEMI,int,size1,EQ,treeSize,LPAREN,tree1,RPAREN,COMMA,size2,EQ,treeSize,LPAREN,tree2,RPAREN,SEMI,IF,LPAREN,size1,BANGEQ,size2,RPAREN,RETURN,false,SEMI,ELSE,RETURN,equals,LPAREN,tree1,COMMA,0,COMMA,tree2,COMMA,0,COMMA,0,COMMA,size1,RPAREN,SEMI,RBRACE","    /*pkg*/ static boolean equals(Object tree1, Object tree2) {
,	if (tree1 <MASK> tree2) return true;
,	int size1 = treeSize(tree1), size2 = treeSize(tree2);
,	if (size1 != size2) return false;
,	else return equals(tree1, 0, tree2, 0, 0, size1);
,    }
"
38ed5e2e-bfac-4cc9-94e0-5ee38dabb0ca,9a776d73-160b-4f2d-9ba5-9b6a36f90515,EQEQ,"PRIVATE,STATIC,Object,lessMin,LPAREN,Object,subtree,RPAREN,LBRACE,IF,LPAREN,BANG,LPAREN,subtree,INSTANCEOF,Node,RPAREN,RPAREN,LBRACE,Object,LBRACKET,RBRACKET,ary,EQ,LPAREN,Object,LBRACKET,RBRACKET,RPAREN,subtree,SEMI,RETURN,subseq2,LPAREN,ary,COMMA,1,COMMA,ary,DOT,length,GTGT,1,RPAREN,SEMI,RBRACE,ELSE,LBRACE,Node,node,EQ,LPAREN,Node,RPAREN,subtree,SEMI,IF,LPAREN,node,DOT,left,<MASK>,null,RPAREN,RETURN,node,DOT,right,SEMI,ELSE,RETURN,concat,LPAREN,node,DOT,key,COMMA,node,DOT,khash,COMMA,node,DOT,value,COMMA,lessMin,LPAREN,node,DOT,left,RPAREN,COMMA,node,DOT,right,RPAREN,SEMI,RBRACE,RBRACE","    private static Object lessMin(Object subtree) {
,	if (!(subtree instanceof Node)) {
,	    Object[] ary = (Object[])subtree;
,	    return subseq2(ary, 1, ary.length >> 1);
,	} else {
,	    Node node = (Node)subtree;
,	    if (node.left <MASK> null) return node.right;
,	    else return concat(node.key, node.khash, node.value,
,			       lessMin(node.left), node.right);
,	}
,    }
"
ca71ff97-f13f-4754-9fe6-55e1b1ff5a2a,00f78809-4289-43b8-be53-66e1a64350f1,PLUS,"PUBLIC,STATIC,Person,create,LPAREN,Supplier,LT,Person,GT,supplier,RPAREN,LBRACE,Person,person,EQ,supplier,DOT,get,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""'create()' has been called and created class "",<MASK>,person,RPAREN,SEMI,RETURN,person,SEMI,RBRACE","    public static Person create(Supplier<Person> supplier){
,        Person person = supplier.get();
,        System.out.println(""'create()' has been called and created class "" <MASK> person);
,        return person;
,    }
"
e804bdf1-7a07-4e36-aee6-aba6a427cf38,2f3e4949-a182-41fa-9841-d7b4926d9cb2,GTEQ,"PUBLIC,double,getHalfAverage,LPAREN,double,LBRACKET,RBRACKET,values,RPAREN,LBRACE,double,avg,EQ,0,SEMI,int,count,EQ,0,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,values,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,i,<MASK>,values,DOT,length,SLASH,2,RPAREN,LBRACE,avg,PLUSEQ,values,LBRACKET,i,RBRACKET,SEMI,count,PLUSPLUS,SEMI,RBRACE,RBRACE,avg,SLASHEQ,count,SEMI,avg,SLASHEQ,1000000,SEMI,RETURN,avg,SEMI,RBRACE","	public double getHalfAverage(double[] values) {
,		double avg = 0;
,		int count=0;
,		for (int i = 0; i < values.length; i++) {
,			if(i<MASK>values.length/2){
,				avg += values[i];
,				count++;
,			}
,		}
,		avg /= count;
,		avg /=1000000;
,		
,		return avg;
,	}
"
46d8f694-b1f9-40ac-a94e-e9d7b8a315c4,2db91703-2088-471a-a86f-30c9b733dc04,LTEQ,"PUBLIC,STATIC,void,main,LPAREN,String,LBRACKET,RBRACKET,args,RPAREN,LBRACE,int,factorial,EQ,1,SEMI,int,n,EQ,3,SEMI,FOR,LPAREN,int,i,EQ,1,SEMI,i,<MASK>,n,SEMI,i,PLUSPLUS,RPAREN,LBRACE,factorial,STAREQ,i,SEMI,RBRACE,System,DOT,out,DOT,println,LPAREN,""Factorial.main() "",PLUS,factorial,RPAREN,SEMI,RBRACE","	public static void main(String[] args) {
,		int factorial = 1;
,		int n = 3;
,		for(int i=1; i<MASK>n; i++){
,			factorial *= i;
,		}
,		
,		System.out.println(""Factorial.main() ""+factorial);
,	}
"
6c241594-f2fc-4996-bfc9-c7ef863c220a,bd6d2b04-ed47-4ca1-bff3-aa7d8a7c93a4,LTEQ,"PUBLIC,void,suspend,LPAREN,int,port,RPAREN,THROWS,IOException,LBRACE,IF,LPAREN,port,<MASK>,0,BARBAR,port,GT,ports,RPAREN,THROW,NEW,IllegalArgumentException,LPAREN,RPAREN,SEMI,ControlMessage,DOT,setFeature,LPAREN,dev,COMMA,ControlMessage,DOT,TYPE_CLASS,BAR,ControlMessage,DOT,RECIPIENT_OTHER,COMMA,PORT_SUSPEND,COMMA,port,RPAREN,SEMI,RBRACE","    public void suspend (int port)
,    throws IOException
,    {
,	if (port <MASK> 0 || port > ports)
,	    throw new IllegalArgumentException ();
,	ControlMessage.setFeature (dev,
,	    ControlMessage.TYPE_CLASS | ControlMessage.RECIPIENT_OTHER,
,	    PORT_SUSPEND,
,	    port
,	    );
,    }
"
d71e9d90-d7d7-40b1-b4fa-c5316adcd69a,30d3fb42-0563-4f92-9b1b-b9b5c20b650c,GT,"PUBLIC,void,shiftComputationIndex,LPAREN,RPAREN,LBRACE,IF,LPAREN,this,DOT,inlayer,AMPAMP,LPAREN,this,DOT,compctr,<MASK>,0,RPAREN,RPAREN,LBRACE,this,DOT,compidx,PLUSPLUS,SEMI,this,DOT,compctr,EQ,0,SEMI,RBRACE,RBRACE","    public void shiftComputationIndex() {
,        if (this.inlayer && (this.compctr <MASK> 0)) {
,            this.compidx++;
,            this.compctr = 0;
,        }
,    }
"
113c5414-6c55-466b-b879-a350ab6e0ca2,3b04fb9f-8246-431d-b2da-0535cef9b931,EQ,"PUBLIC,void,identify,LPAREN,RPAREN,LBRACE,cursorMode,<MASK>,true,SEMI,controller,DOT,createCursor,LPAREN,RPAREN,SEMI,RBRACE","	public void identify() {
,		cursorMode <MASK> true;
,		controller.createCursor();
,	}
"
113c5414-6c55-466b-b879-a350ab6e0ca2,a64a0cc5-f0e2-4481-b162-496a9484c3a2,EQ,"PUBLIC,void,setStrength,LPAREN,int,strength,RPAREN,LBRACE,this,DOT,strength,<MASK>,strength,SEMI,RBRACE","	public void setStrength(int strength) {
,		this.strength <MASK> strength;
,	}
"
3913c395-db09-4ac4-8282-49a81b6a21f4,a15de5f5-484f-477f-895b-113b711c22c0,BANGEQ,"MONKEYS_AT,Override,PUBLIC,List,LT,Point,GT,findPath,LPAREN,Point,from,COMMA,Point,to,RPAREN,LBRACE,IF,LPAREN,BANG,map,DOT,isPassable,LPAREN,to,RPAREN,RPAREN,RETURN,null,SEMI,openList,EQ,NEW,ArrayList,LT,GT,LPAREN,RPAREN,SEMI,closedList,EQ,NEW,ArrayList,LT,GT,LPAREN,RPAREN,SEMI,openList,DOT,add,LPAREN,NEW,Node,LPAREN,from,RPAREN,RPAREN,SEMI,Rectangle,localBounds,EQ,map,DOT,getBounds,LPAREN,from,RPAREN,SEMI,int,dx,COMMA,dy,SEMI,FOR,LPAREN,dy,EQ,0,SEMI,dy,LT,localBounds,DOT,height,SEMI,dy,PLUSPLUS,RPAREN,LBRACE,FOR,LPAREN,dx,EQ,0,SEMI,dx,LT,localBounds,DOT,width,SEMI,dx,PLUSPLUS,RPAREN,LBRACE,nodes,LBRACKET,localBounds,DOT,x,PLUS,dx,RBRACKET,LBRACKET,localBounds,DOT,y,PLUS,dy,RBRACKET,DOT,reset,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,int,x,COMMA,y,SEMI,Point,p,SEMI,int,maxDepth,EQ,0,SEMI,double,cost,SEMI,boolean,found,EQ,false,SEMI,WHILE,LPAREN,BANG,openList,DOT,isEmpty,LPAREN,RPAREN,AMPAMP,maxDepth,LT,MAX_DEPTH,RPAREN,LBRACE,Collections,DOT,sort,LPAREN,openList,RPAREN,SEMI,cur,EQ,openList,DOT,get,LPAREN,0,RPAREN,SEMI,IF,LPAREN,cur,DOT,p,DOT,equals,LPAREN,to,RPAREN,RPAREN,LBRACE,found,EQ,true,SEMI,BREAK,SEMI,RBRACE,openList,DOT,remove,LPAREN,0,RPAREN,SEMI,closedList,DOT,add,LPAREN,cur,RPAREN,SEMI,Node,n,SEMI,FOR,LPAREN,dy,EQ,SUB,1,SEMI,dy,LTEQ,1,SEMI,dy,PLUSPLUS,RPAREN,LBRACE,FOR,LPAREN,dx,EQ,SUB,1,SEMI,dx,LTEQ,1,SEMI,dx,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,dx,EQEQ,0,AMPAMP,dy,EQEQ,0,RPAREN,CONTINUE,SEMI,x,EQ,cur,DOT,p,DOT,x,PLUS,dx,SEMI,y,EQ,cur,DOT,p,DOT,y,PLUS,dy,SEMI,p,EQ,NEW,Point,LPAREN,x,COMMA,y,RPAREN,SEMI,IF,LPAREN,BANG,map,DOT,isPassable,LPAREN,p,RPAREN,RPAREN,CONTINUE,SEMI,n,EQ,nodes,LBRACKET,x,RBRACKET,LBRACKET,y,RBRACKET,SEMI,cost,EQ,cur,DOT,g,PLUS,Math,DOT,sqrt,LPAREN,dx,STAR,dx,PLUS,dy,STAR,dy,RPAREN,SEMI,IF,LPAREN,cost,LT,nodes,LBRACKET,x,RBRACKET,LBRACKET,y,RBRACKET,DOT,g,RPAREN,LBRACE,openList,DOT,remove,LPAREN,n,RPAREN,SEMI,closedList,DOT,remove,LPAREN,n,RPAREN,SEMI,n,DOT,reset,LPAREN,RPAREN,SEMI,RBRACE,IF,LPAREN,BANG,openList,DOT,contains,LPAREN,n,RPAREN,AMPAMP,BANG,closedList,DOT,contains,LPAREN,n,RPAREN,RPAREN,LBRACE,nodes,LBRACKET,x,RBRACKET,LBRACKET,y,RBRACKET,DOT,g,EQ,cost,SEMI,nodes,LBRACKET,x,RBRACKET,LBRACKET,y,RBRACKET,DOT,h,EQ,getHeuristicCost,LPAREN,p,COMMA,to,RPAREN,SEMI,nodes,LBRACKET,x,RBRACKET,LBRACKET,y,RBRACKET,DOT,setParent,LPAREN,nodes,LBRACKET,cur,DOT,p,DOT,x,RBRACKET,LBRACKET,cur,DOT,p,DOT,y,RBRACKET,RPAREN,SEMI,IF,LPAREN,nodes,LBRACKET,x,RBRACKET,LBRACKET,y,RBRACKET,DOT,depth,GT,maxDepth,RPAREN,LBRACE,maxDepth,EQ,nodes,LBRACKET,x,RBRACKET,LBRACKET,y,RBRACKET,DOT,depth,SEMI,RBRACE,openList,DOT,add,LPAREN,nodes,LBRACKET,x,RBRACKET,LBRACKET,y,RBRACKET,RPAREN,SEMI,RBRACE,RBRACE,RBRACE,RBRACE,IF,LPAREN,BANG,found,RPAREN,LBRACE,RETURN,null,SEMI,RBRACE,ELSE,LBRACE,List,LT,Point,GT,path,EQ,NEW,ArrayList,LT,GT,LPAREN,RPAREN,SEMI,Node,n,EQ,nodes,LBRACKET,to,DOT,x,RBRACKET,LBRACKET,to,DOT,y,RBRACKET,SEMI,WHILE,LPAREN,n,DOT,parent,<MASK>,null,RPAREN,LBRACE,path,DOT,add,LPAREN,0,COMMA,n,DOT,p,RPAREN,SEMI,n,EQ,n,DOT,parent,SEMI,RBRACE,RETURN,path,SEMI,RBRACE,RBRACE","	@Override
,	public List<Point> findPath(Point from, Point to) {
,		if (!map.isPassable(to))
,			return null;
,		
,		// Initialize.		
,		openList = new ArrayList<>();
,		closedList = new ArrayList<>();
,		openList.add(new Node(from));
,		
,		// Clear local bounding box of starting point.
,		Rectangle localBounds = map.getBounds(from);
,		int dx, dy;
,		for (dy = 0; dy < localBounds.height; dy++) {
,			for (dx = 0; dx < localBounds.width; dx++) {
,				nodes[localBounds.x+dx][localBounds.y+dy].reset();
,			}
,		}
,		
,		// Search path.
,		int x, y;
,		Point p;
,		int maxDepth = 0;
,		double cost;
,		boolean found = false;
,		while (!openList.isEmpty() && maxDepth < MAX_DEPTH) {
,			// Select node with the lowest cost.
,			Collections.sort(openList);
,			cur = openList.get(0);
,			
,			if (cur.p.equals(to)) {
,				// Found the best path!
,				found = true;
,				break;
,			}
,			
,			openList.remove(0);
,			closedList.add(cur);
,			
,			// Check its neighbors.
,			Node n;
,			for (dy = -1; dy <= 1; dy++) {
,				for (dx = -1; dx <= 1; dx++) {
,					if (dx == 0 && dy == 0)
,						continue;
,					
,					x = cur.p.x + dx;
,					y = cur.p.y + dy;
,					p = new Point(x, y);
,					
,					if (!map.isPassable(p))
,						continue;
,
,					n = nodes[x][y];
,					cost = cur.g + Math.sqrt(dx*dx+dy*dy);
,					
,					if (cost < nodes[x][y].g) {
,						openList.remove(n);
,						closedList.remove(n);
,						n.reset();
,					}
,					
,					if (!openList.contains(n) && !closedList.contains(n)) {
,						nodes[x][y].g = cost;
,						nodes[x][y].h = getHeuristicCost(p, to);
,						nodes[x][y].setParent(nodes[cur.p.x][cur.p.y]);
,						if (nodes[x][y].depth > maxDepth) {
,							maxDepth = nodes[x][y].depth;
,						}
,						openList.add(nodes[x][y]);
,					}
,					
,				}
,			}
,			
,		}
,		
,		// Search has finished.
,		
,		if (!found) {
,			return null;
,		} else {
,			List<Point> path = new ArrayList<>();
,			Node n = nodes[to.x][to.y];
,			while (n.parent <MASK> null) {
,				path.add(0, n.p);
,				n = n.parent;
,			}
,			return path;
,		}
,	}
"
68422d14-68e8-42b7-9437-f6891889f4fc,167a90a5-4b19-4a36-b5ec-2a31f6ed82b8,PERCENT,"PUBLIC,TimeDuration,subtract,LPAREN,TimeDuration,t,RPAREN,LBRACE,TimeDuration,newTime,EQ,NEW,TimeDuration,LPAREN,this,RPAREN,SEMI,newTime,DOT,minutes,SUBEQ,t,DOT,minutes,SEMI,newTime,DOT,hour,SUBEQ,t,DOT,hour,SEMI,IF,LPAREN,newTime,DOT,hour,LT,0,RPAREN,RETURN,null,SEMI,IF,LPAREN,newTime,DOT,minutes,LT,0,RPAREN,LBRACE,newTime,DOT,hour,PLUSEQ,newTime,DOT,minutes,SLASH,60,SUB,1,SEMI,IF,LPAREN,newTime,DOT,hour,LT,0,RPAREN,RETURN,null,SEMI,newTime,DOT,minutes,EQ,60,PLUS,newTime,DOT,minutes,<MASK>,60,SEMI,RBRACE,RETURN,newTime,SEMI,RBRACE","	public TimeDuration subtract(TimeDuration t) {
,		TimeDuration newTime = new TimeDuration(this);
,		newTime.minutes -= t.minutes;
,		newTime.hour -= t.hour;
,		if(newTime.hour < 0) return null;
,		if(newTime.minutes < 0) {
,			newTime.hour += newTime.minutes/60 - 1;
,			if(newTime.hour < 0)return null;
,			newTime.minutes = 60 + newTime.minutes<MASK>60; 
,		}
,		return newTime;
,	}
"
958e93a1-b2a6-4224-84dc-8b9367c491c7,c23f033a-30fe-4da9-ac24-0874c60a57b2,GTEQ,"MONKEYS_AT,Override,PUBLIC,void,write,LPAREN,Object,object,COMMA,Output,output,RPAREN,LBRACE,IF,LPAREN,object,BANGEQ,null,RPAREN,LBRACE,Serializer,LT,QUES,GT,serializer,EQ,config,DOT,getSerializerForClass,LPAREN,object,DOT,getClass,LPAREN,RPAREN,RPAREN,SEMI,short,referenceId,EQ,REFERENCE_RESOLVER,DOT,getReferenceId,LPAREN,object,COMMA,serializer,DOT,getId,LPAREN,RPAREN,COMMA,serializer,DOT,isImmutable,LPAREN,RPAREN,RPAREN,SEMI,IF,LPAREN,referenceId,<MASK>,0,RPAREN,LBRACE,output,DOT,writeClassId,LPAREN,getId,LPAREN,RPAREN,RPAREN,SEMI,output,DOT,writeShort,LPAREN,referenceId,RPAREN,SEMI,RBRACE,RBRACE,RBRACE","    @Override
,    public void write(Object object, Output output) {
,        if (object != null) {
,            Serializer<?> serializer = config.getSerializerForClass(object.getClass());
,            short referenceId = REFERENCE_RESOLVER.getReferenceId(object, serializer.getId(), serializer.isImmutable());
,            if (referenceId <MASK> 0) {
,                output.writeClassId(getId());
,                output.writeShort(referenceId);
,            }
,        }
,    }
"
e03d1a2f-9ec0-4127-b57f-aac96a5f146a,267315db-3d62-43b4-8737-4fa8b9dc864b,GTEQ,"PUBLIC,STATIC,void,main,LPAREN,String,LBRACKET,RBRACKET,args,RPAREN,LBRACE,IF,LPAREN,args,DOT,length,LT,1,RPAREN,LBRACE,System,DOT,err,DOT,println,LPAREN,""Usage: newsgroups newsserver [pattern]"",RPAREN,SEMI,RETURN,SEMI,RBRACE,NNTPClient,client,EQ,NEW,NNTPClient,LPAREN,RPAREN,SEMI,String,pattern,EQ,args,DOT,length,<MASK>,2,QUES,args,LBRACKET,1,RBRACKET,COLON,"""",SEMI,TRY,LBRACE,client,DOT,connect,LPAREN,args,LBRACKET,0,RBRACKET,RPAREN,SEMI,int,j,EQ,0,SEMI,TRY,LBRACE,FOR,LPAREN,String,s,COLON,client,DOT,iterateNewsgroupListing,LPAREN,pattern,RPAREN,RPAREN,LBRACE,j,PLUSPLUS,SEMI,System,DOT,out,DOT,println,LPAREN,s,RPAREN,SEMI,RBRACE,RBRACE,CATCH,LPAREN,IOException,e1,RPAREN,LBRACE,e1,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,System,DOT,out,DOT,println,LPAREN,j,RPAREN,SEMI,j,EQ,0,SEMI,FOR,LPAREN,NewsgroupInfo,n,COLON,client,DOT,iterateNewsgroups,LPAREN,pattern,RPAREN,RPAREN,LBRACE,j,PLUSPLUS,SEMI,System,DOT,out,DOT,println,LPAREN,n,DOT,getNewsgroup,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,System,DOT,out,DOT,println,LPAREN,j,RPAREN,SEMI,RBRACE,CATCH,LPAREN,IOException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,FINALLY,LBRACE,TRY,LBRACE,IF,LPAREN,client,DOT,isConnected,LPAREN,RPAREN,RPAREN,LBRACE,client,DOT,disconnect,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,CATCH,LPAREN,IOException,e,RPAREN,LBRACE,System,DOT,err,DOT,println,LPAREN,""Error disconnecting from server."",RPAREN,SEMI,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,System,DOT,exit,LPAREN,1,RPAREN,SEMI,RBRACE,RBRACE,RBRACE","    public static void main(String[] args)
,    {
,        if (args.length < 1)
,        {
,            System.err.println(""Usage: newsgroups newsserver [pattern]"");
,            return;
,        }
,
,        NNTPClient client = new NNTPClient();
,        String pattern = args.length <MASK> 2 ? args[1] : """";
,
,        try
,        {
,            client.connect(args[0]);
,
,            int j = 0;
,            try {
,                for(String s : client.iterateNewsgroupListing(pattern)) {
,                    j++;
,                    System.out.println(s);
,                }
,            } catch (IOException e1) {
,                e1.printStackTrace();
,            }
,            System.out.println(j);
,
,            j = 0;
,            for(NewsgroupInfo n : client.iterateNewsgroups(pattern)) {
,                j++;
,                System.out.println(n.getNewsgroup());
,            }
,            System.out.println(j);
,        }
,        catch (IOException e)
,        {
,            e.printStackTrace();
,        }
,        finally
,        {
,            try
,            {
,                if (client.isConnected()) {
,                    client.disconnect();
,                }
,            }
,            catch (IOException e)
,            {
,                System.err.println(""Error disconnecting from server."");
,                e.printStackTrace();
,                System.exit(1);
,            }
,        }
,
,    }
"
3913c395-db09-4ac4-8282-49a81b6a21f4,daf6d521-6e58-4b96-8592-eb451fb983a2,LT,"PUBLIC,void,clear,LPAREN,RPAREN,LBRACE,entities,DOT,clear,LPAREN,RPAREN,SEMI,IF,LPAREN,children,EQEQ,null,RPAREN,RETURN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,4,SEMI,i,PLUSPLUS,RPAREN,LBRACE,children,LBRACKET,i,RBRACKET,DOT,clear,LPAREN,RPAREN,SEMI,RBRACE,RBRACE","	public void clear() {
,		entities.clear();
,		if (children == null) return;
,		for (int i = 0; i <MASK> 4; i++) {
,			children[i].clear();
,		}
,	}
"
7b0ae379-c293-480e-8c64-3374a3631947,709ccd3f-a504-411d-8cfb-969a0be8d640,SUB,"PUBLIC,STATIC,List,LT,String,GT,generate,LPAREN,List,LT,String,GT,list,RPAREN,LBRACE,IF,LPAREN,list,DOT,size,LPAREN,RPAREN,EQEQ,1,RPAREN,LBRACE,RETURN,list,SEMI,RBRACE,List,LT,String,GT,result,EQ,NEW,ArrayList,LT,GT,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,list,DOT,size,LPAREN,RPAREN,<MASK>,1,SEMI,i,PLUSPLUS,RPAREN,LBRACE,List,LT,String,GT,left,EQ,generate,LPAREN,list,DOT,subList,LPAREN,0,COMMA,i,PLUS,1,RPAREN,RPAREN,SEMI,List,LT,String,GT,right,EQ,generate,LPAREN,list,DOT,subList,LPAREN,i,PLUS,1,COMMA,list,DOT,size,LPAREN,RPAREN,RPAREN,RPAREN,SEMI,FOR,LPAREN,String,l,COLON,left,RPAREN,LBRACE,FOR,LPAREN,String,r,COLON,right,RPAREN,LBRACE,result,DOT,add,LPAREN,""("",PLUS,l,PLUS,r,PLUS,"")"",RPAREN,SEMI,RBRACE,RBRACE,RBRACE,RETURN,result,SEMI,RBRACE","    public static List<String> generate(List<String> list) {
,        if (list.size() == 1) {
,            return list;
,        }
,        List<String> result = new ArrayList<>();
,        for (int i = 0; i < list.size() <MASK> 1; i++) {
,            List<String> left = generate(list.subList(0, i + 1));
,            List<String> right = generate(list.subList(i + 1, list.size()));
,            for (String l : left) {
,                for (String r : right) {
,                    result.add(""("" + l + r + "")"");
,                }
,            }
,        }
,        return result;
,    }
"
811987a2-df8f-411b-b35a-1f251eaec687,dd6c7bd4-a62b-4ef8-9797-d1936a9b9a04,SLASH,"PUBLIC,Coords,getNeuronCoordinate,LPAREN,int,neuronNumber,RPAREN,LBRACE,int,x,EQ,LPAREN,LPAREN,neuronNumber,SUB,1,RPAREN,<MASK>,colNumber,RPAREN,PLUS,1,SEMI,int,y,EQ,neuronNumber,SUB,LPAREN,LPAREN,x,SUB,1,RPAREN,STAR,colNumber,RPAREN,SEMI,RETURN,NEW,Coords,LPAREN,x,COMMA,y,RPAREN,SEMI,RBRACE","    public Coords getNeuronCoordinate(int neuronNumber) {
,        int x = ((neuronNumber - 1) <MASK> colNumber) + 1;
,        int y = neuronNumber - ((x - 1) * colNumber);
,
,        return new Coords(x, y);
,    }
"
7b37a4d3-9846-4b12-9860-e336321ade31,76ecf7ab-07a5-4707-ab50-903b2bbd878a,GT,"PRIVATE,void,checarVendaAberto,LPAREN,RPAREN,THROWS,Exception,LBRACE,IF,LPAREN,id,DOT,length,LPAREN,RPAREN,<MASK>,0,AMPAMP,id,BANGEQ,""0"",RPAREN,abrir,LPAREN,RPAREN,SEMI,ELSE,venda,EQ,NEW,Venda,LPAREN,RPAREN,SEMI,RBRACE","    private void checarVendaAberto()  throws Exception  {
,        if(id.length() <MASK> 0 && id != ""0"")
,            abrir();
,        else
,            venda = new Venda();
,    }
"
b6d08fd3-a673-4a77-8d9f-bf9a01922a85,ad3c534a-ac4d-4c35-ba48-a3f1e5d499a9,SLASH,"void,makeTurn,LPAREN,float,dir,RPAREN,LBRACE,v,DOT,z,EQ,0,SEMI,Vector3d,w,EQ,NEW,Vector3d,LPAREN,0,COMMA,0,COMMA,1,RPAREN,DOT,cross,LPAREN,v,RPAREN,DOT,scaleBy,LPAREN,SUB,dir,STAR,ds,<MASK>,my_turn_radius,RPAREN,SEMI,v,DOT,add,LPAREN,w,RPAREN,DOT,scaleToLength,LPAREN,ds,RPAREN,SEMI,roll,LPAREN,dir,RPAREN,SEMI,RBRACE","    void makeTurn(float dir) {
,        v.z = 0;    <MASK>/work in xy plane
,        Vector3d w = new Vector3d(0, 0, 1).cross(v).scaleBy(-dir * ds / my_turn_radius);
,        v.add(w).scaleToLength(ds); //ds is in xy only
,        roll(dir);
,    }
"
56952896-479b-43e9-a9cf-c3f3bb9afc0e,4f203f61-06aa-43e8-998f-23254d755565,SUB,"MONKEYS_AT,Test,PUBLIC,void,test_removeOrder,LPAREN,RPAREN,THROWS,Exception,LBRACE,UserDAO,uDAO,EQ,NEW,UserDAO,LPAREN,RPAREN,SEMI,User,newUser,EQ,NEW,User,LPAREN,<MASK>,1,COMMA,""Jim"",COMMA,""321 Test Road"",COMMA,""Columbus"",COMMA,""OH"",COMMA,""43230"",COMMA,""6148881234"",RPAREN,SEMI,int,userId,EQ,uDAO,DOT,createUser,LPAREN,newUser,RPAREN,SEMI,int,orderId,EQ,oDAO,DOT,createOrderByUserID,LPAREN,userId,RPAREN,SEMI,Order,testOrd,EQ,oDAO,DOT,getOrderByOrderID,LPAREN,orderId,RPAREN,SEMI,assertEquals,LPAREN,userId,COMMA,testOrd,DOT,getUserID,LPAREN,RPAREN,RPAREN,SEMI,oDAO,DOT,removeOrder,LPAREN,testOrd,RPAREN,SEMI,testOrd,EQ,oDAO,DOT,getOrderByOrderID,LPAREN,orderId,RPAREN,SEMI,assertNull,LPAREN,""expected no record to be returned (null)"",COMMA,testOrd,RPAREN,SEMI,uDAO,DOT,removeUserByUserID,LPAREN,userId,RPAREN,SEMI,uDAO,DOT,closeConnection,LPAREN,RPAREN,SEMI,oDAO,DOT,removeOrderByOrderID,LPAREN,orderId,RPAREN,SEMI,RBRACE","    @Test
,    public void test_removeOrder() throws Exception {
,        UserDAO uDAO = new UserDAO();
,        User newUser = new User(<MASK>1, ""Jim"", ""321 Test Road"", ""Columbus"", ""OH"",
,                ""43230"", ""6148881234"");
,        int userId = uDAO.createUser(newUser);
,        int orderId = oDAO.createOrderByUserID(userId);
,        Order testOrd = oDAO.getOrderByOrderID(orderId);
,
,        // should exist here
,        assertEquals(userId, testOrd.getUserID());
,
,        oDAO.removeOrder(testOrd);
,        // but not here
,        testOrd = oDAO.getOrderByOrderID(orderId);
,        assertNull(""expected no record to be returned (null)"", testOrd);
,
,        // clean up
,        uDAO.removeUserByUserID(userId);
,        uDAO.closeConnection();
,
,        // what happens if I try to remove it twice ?
,        // oDAO.removeOrder(testOrd); // this will fail because testOrd is now
,        // null
,        oDAO.removeOrderByOrderID(orderId);
,
,    }
"
3913c395-db09-4ac4-8282-49a81b6a21f4,cf67c97e-7c82-4c2e-a052-eceb24ab50b7,LT,"PUBLIC,void,render,LPAREN,Graphics2D,g,RPAREN,LBRACE,g,DOT,setColor,LPAREN,RENDER_COL,RPAREN,SEMI,IF,LPAREN,children,EQEQ,null,RPAREN,LBRACE,g,DOT,drawRect,LPAREN,bounds,DOT,x,COMMA,bounds,DOT,y,COMMA,bounds,DOT,width,COMMA,bounds,DOT,height,RPAREN,SEMI,RETURN,SEMI,RBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,4,SEMI,i,PLUSPLUS,RPAREN,LBRACE,children,LBRACKET,i,RBRACKET,DOT,render,LPAREN,g,RPAREN,SEMI,RBRACE,RBRACE","	public void render(Graphics2D g) {
,		g.setColor(RENDER_COL);
,		if (children == null) {
,			g.drawRect(bounds.x, bounds.y, bounds.width, bounds.height);
,			return;
,		}
,		for (int i = 0; i <MASK> 4; i++) {
,			children[i].render(g);
,		}
,	}
"
7adec7d8-cee7-4225-a9f6-43a8dd4e76a6,15d91d30-9cfb-437c-bf9b-1b9bb18f2706,STAR,"PUBLIC,STATIC,double,getGrossLoss,LPAREN,ArrayList,LT,ClosedTransaction,GT,closed,RPAREN,LBRACE,Iterator,LT,ClosedTransaction,GT,i,EQ,closed,DOT,iterator,LPAREN,RPAREN,SEMI,double,total,EQ,0,SEMI,WHILE,LPAREN,i,DOT,hasNext,LPAREN,RPAREN,RPAREN,LBRACE,double,pl,EQ,i,DOT,next,LPAREN,RPAREN,DOT,getPl,LPAREN,RPAREN,SEMI,IF,LPAREN,pl,LT,0,RPAREN,LBRACE,total,PLUSEQ,pl,SEMI,RBRACE,RBRACE,RETURN,total,<MASK>,SUB,1,SEMI,RBRACE","	public static double getGrossLoss(ArrayList<ClosedTransaction> closed) {
,		Iterator<ClosedTransaction> i = closed.iterator();
,		double total = 0;
,		while(i.hasNext()) {
,			double pl = i.next().getPl();
,			if(pl < 0) {
,				total += pl;
,			}
,		}
,		return total <MASK> -1;
,	}
"
113c5414-6c55-466b-b879-a350ab6e0ca2,47c6c3f4-0c94-426f-8479-a6f8dd98f319,EQ,"PUBLIC,void,setHpCounter,LPAREN,int,hpCounter,RPAREN,LBRACE,this,DOT,hpCounter,<MASK>,hpCounter,SEMI,RBRACE","	public void setHpCounter(int hpCounter) {
,		this.hpCounter <MASK> hpCounter;
,	}
"
84803027-c3ab-45b1-9882-409f74632474,c88c4816-e4b4-4925-bd6d-cd0500d82a17,PERCENT,"PRIVATE,int,indexCycle,LPAREN,int,index,COMMA,int,delta,RPAREN,LBRACE,int,size,EQ,m_Components,DOT,length,SEMI,int,next,EQ,LPAREN,index,PLUS,delta,PLUS,size,RPAREN,<MASK>,size,SEMI,RETURN,next,SEMI,RBRACE","	private int indexCycle(int index, int delta) {
,		int size = m_Components.length;
,		int next = (index + delta + size) <MASK> size;
,		return next;
,	}
"
46b67b7f-680f-46e8-8d0d-ebfce935cfd6,8417e968-e118-4ded-8470-f16c4d24a4cc,SLASH,"PRIVATE,STATIC,double,userX,LPAREN,double,x,RPAREN,LBRACE,RETURN,xmin,PLUS,x,STAR,LPAREN,xmax,SUB,xmin,RPAREN,<MASK>,width,SEMI,RBRACE","    private static double   userX(double x) { return xmin + x * (xmax - xmin) <MASK> width;    }
"
3913c395-db09-4ac4-8282-49a81b6a21f4,79fee53e-13b8-4613-95d1-0aba06e23e28,LT,"MONKEYS_AT,Subscribe,PUBLIC,void,onShot,LPAREN,UnitAttackEvent,u,RPAREN,LBRACE,IF,LPAREN,System,DOT,currentTimeMillis,LPAREN,RPAREN,SUB,lastShotSnd,<MASK>,SHOT_SND_DELAY,RPAREN,LBRACE,RETURN,SEMI,RBRACE,playSound,LPAREN,""mg0.wav"",COMMA,0.5f,RPAREN,SEMI,lastShotSnd,EQ,System,DOT,currentTimeMillis,LPAREN,RPAREN,SEMI,RBRACE","	@Subscribe
,	public void onShot(UnitAttackEvent u) {
,		if (System.currentTimeMillis() - lastShotSnd <MASK> SHOT_SND_DELAY) {
,			return;
,		}
,		playSound(""mg0.wav"", 0.5f);
,		lastShotSnd = System.currentTimeMillis(); 
,	}
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,a9b8c9bb-058c-4997-9659-406c1a49229f,BANGEQ,"PRIVATE,void,parseXMLElement,LPAREN,Element,xml,RPAREN,LBRACE,INDIDriver,subd,EQ,getSubdriver,LPAREN,xml,RPAREN,SEMI,IF,LPAREN,subd,<MASK>,null,RPAREN,LBRACE,subd,DOT,parseXMLElement,LPAREN,xml,RPAREN,SEMI,RBRACE,ELSE,LBRACE,String,name,EQ,xml,DOT,getNodeName,LPAREN,RPAREN,SEMI,IF,LPAREN,name,DOT,equals,LPAREN,""getProperties"",RPAREN,RPAREN,LBRACE,processGetProperties,LPAREN,xml,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,name,DOT,equals,LPAREN,""newTextVector"",RPAREN,RPAREN,LBRACE,processNewTextVector,LPAREN,xml,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,name,DOT,equals,LPAREN,""newSwitchVector"",RPAREN,RPAREN,LBRACE,processNewSwitchVector,LPAREN,xml,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,name,DOT,equals,LPAREN,""newNumberVector"",RPAREN,RPAREN,LBRACE,processNewNumberVector,LPAREN,xml,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,name,DOT,equals,LPAREN,""newBLOBVector"",RPAREN,RPAREN,LBRACE,processNewBLOBVector,LPAREN,xml,RPAREN,SEMI,RBRACE,RBRACE,RBRACE","  private void parseXMLElement(Element xml) {
,    INDIDriver subd = getSubdriver(xml);
,
,    if (subd <MASK> null) {
,      subd.parseXMLElement(xml);
,    } else {
,      String name = xml.getNodeName();
,
,      if (name.equals(""getProperties"")) {
,        processGetProperties(xml);
,      } else if (name.equals(""newTextVector"")) {
,        processNewTextVector(xml);
,      } else if (name.equals(""newSwitchVector"")) {
,        processNewSwitchVector(xml);
,      } else if (name.equals(""newNumberVector"")) {
,        processNewNumberVector(xml);
,      } else if (name.equals(""newBLOBVector"")) {
,        processNewBLOBVector(xml);
,      }
,    }
,  }
"
4efd15d4-7259-49ef-bb2b-8984a1154bd6,c9b48fd4-e832-464f-861c-5b0eb49e8dfd,LT,"PRIVATE,void,insertNgram,LPAREN,RPAREN,LBRACE,model,EQ,LPAREN,DefaultTableModel,RPAREN,ngramtweetTable,DOT,getModel,LPAREN,RPAREN,SEMI,model,DOT,setRowCount,LPAREN,0,RPAREN,SEMI,String,t,SEMI,double,i,SEMI,FOR,LPAREN,int,num,EQ,0,SEMI,num,<MASK>,lmDM,DOT,getTopList,LPAREN,RPAREN,DOT,size,LPAREN,RPAREN,SEMI,num,PLUSPLUS,RPAREN,LBRACE,t,EQ,lmDM,DOT,getTopList,LPAREN,RPAREN,DOT,get,LPAREN,num,RPAREN,DOT,getTweet,LPAREN,RPAREN,SEMI,i,EQ,lmDM,DOT,getTopList,LPAREN,RPAREN,DOT,get,LPAREN,num,RPAREN,DOT,getScore,LPAREN,RPAREN,SEMI,model,DOT,addRow,LPAREN,NEW,Object,LBRACKET,RBRACKET,LBRACE,t,COMMA,i,RBRACE,RPAREN,SEMI,RBRACE,RBRACE","    private void insertNgram(){
,       model = (DefaultTableModel)ngramtweetTable.getModel();
,       model.setRowCount(0);
,       
,        String t;
,        double i;
,            for(int num = 0; num <MASK> lmDM.getTopList().size(); num++){
,               t= lmDM.getTopList().get(num).getTweet();
,               i= lmDM.getTopList().get(num).getScore();
,                     model.addRow(new Object[]{t,i});
,            }
,                
,    }
"
4efd15d4-7259-49ef-bb2b-8984a1154bd6,89cb83d8-9e23-46f7-aadf-1274c38f5d36,SUB,"PUBLIC,STATIC,TMDrillModel,TMgetAllTweetsByDate,LPAREN,String,startDate,COMMA,String,endDate,RPAREN,LBRACE,ArrayList,LT,tweetModel,GT,results,EQ,NEW,ArrayList,LT,tweetModel,GT,LPAREN,RPAREN,SEMI,TMDrillModel,tmDrillModel,EQ,NEW,TMDrillModel,LPAREN,RPAREN,SEMI,String,LBRACKET,RBRACKET,start,EQ,startDate,DOT,split,LPAREN,"" "",RPAREN,SEMI,String,LBRACKET,RBRACKET,end,EQ,endDate,DOT,split,LPAREN,"" "",RPAREN,SEMI,tweetModel,t,SEMI,String,tablename,EQ,""temp-"",PLUS,start,LBRACKET,0,RBRACKET,PLUS,""."",PLUS,start,LBRACKET,1,RBRACKET,PLUS,""."",PLUS,start,LBRACKET,2,RBRACKET,PLUS,""-"",PLUS,end,LBRACKET,0,RBRACKET,PLUS,""."",PLUS,end,LBRACKET,1,RBRACKET,PLUS,""."",PLUS,end,LBRACKET,2,RBRACKET,SEMI,System,DOT,out,DOT,println,LPAREN,tablename,RPAREN,SEMI,String,whereCondition,EQ,"""",SEMI,int,year,EQ,Integer,DOT,parseInt,LPAREN,start,LBRACKET,2,RBRACKET,RPAREN,SEMI,FOR,LPAREN,int,month,EQ,monthNumber,LPAREN,start,LBRACKET,0,RBRACKET,RPAREN,SEMI,month,LTEQ,monthNumber,LPAREN,end,LBRACKET,0,RBRACKET,RPAREN,SEMI,month,PLUSPLUS,RPAREN,LBRACE,int,currentday,EQ,1,SEMI,IF,LPAREN,month,EQEQ,monthNumber,LPAREN,start,LBRACKET,0,RBRACKET,RPAREN,RPAREN,currentday,EQ,Integer,DOT,parseInt,LPAREN,start,LBRACKET,1,RBRACKET,RPAREN,SEMI,FOR,LPAREN,int,day,EQ,currentday,SEMI,day,LTEQ,numDaysinMonth,LPAREN,month,RPAREN,SEMI,day,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,month,EQEQ,monthNumber,LPAREN,end,LBRACKET,0,RBRACKET,RPAREN,AMPAMP,day,GT,Integer,DOT,parseInt,LPAREN,end,LBRACKET,1,RBRACKET,RPAREN,RPAREN,BREAK,SEMI,IF,LPAREN,whereCondition,DOT,equals,LPAREN,"""",RPAREN,RPAREN,whereCondition,EQ,""'"",PLUS,start,LBRACKET,1,RBRACKET,PLUS,"" "",PLUS,start,LBRACKET,0,RBRACKET,PLUS,"" "",PLUS,start,LBRACKET,2,RBRACKET,PLUS,""%'"",SEMI,ELSE,whereCondition,EQ,whereCondition,DOT,concat,LPAREN,"" or date like '"",PLUS,day,PLUS,"" "",PLUS,monthName,LPAREN,month,RPAREN,PLUS,"" "",PLUS,year,PLUS,""%'"",RPAREN,SEMI,RBRACE,RBRACE,System,DOT,out,DOT,println,LPAREN,""[3] "",PLUS,whereCondition,RPAREN,SEMI,TRY,LBRACE,Connection,c,EQ,DBFactory,DOT,getConnection,LPAREN,RPAREN,SEMI,PreparedStatement,ps,EQ,c,DOT,prepareStatement,LPAREN,""DROP TABLE IF EXISTS `"",PLUS,tablename,PLUS,""`; "",RPAREN,SEMI,ps,DOT,execute,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,ps,RPAREN,SEMI,ps,EQ,c,DOT,prepareStatement,LPAREN,""CREATE TABLE `"",PLUS,tablename,PLUS,""` ("",PLUS,""`username` varchar(20) NOT NULL,"",PLUS,""`date` varchar(30) NOT NULL,"",PLUS,""`message` varchar(180) NOT NULL"",PLUS,"")ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;"",RPAREN,SEMI,ps,DOT,execute,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,ps,RPAREN,SEMI,ps,EQ,c,DOT,prepareStatement,LPAREN,""INSERT INTO `"",PLUS,tablename,PLUS,""` (username, date, message) "",PLUS,""SELECT username, date, message FROM `tweets` "",PLUS,""WHERE date like "",PLUS,whereCondition,RPAREN,SEMI,ps,DOT,execute,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,ps,RPAREN,SEMI,ps,EQ,c,DOT,prepareStatement,LPAREN,""SELECT * from `"",PLUS,tablename,PLUS,""`;"",RPAREN,SEMI,ResultSet,rs,EQ,ps,DOT,executeQuery,LPAREN,RPAREN,SEMI,WHILE,LPAREN,rs,DOT,next,LPAREN,RPAREN,RPAREN,LBRACE,t,EQ,NEW,tweetModel,LPAREN,RPAREN,SEMI,t,DOT,setUsername,LPAREN,rs,DOT,getString,LPAREN,""username"",RPAREN,RPAREN,SEMI,t,DOT,setDate,LPAREN,rs,DOT,getString,LPAREN,""date"",RPAREN,RPAREN,SEMI,t,DOT,setMessage,LPAREN,cleanTweet,LPAREN,rs,DOT,getString,LPAREN,""message"",RPAREN,RPAREN,RPAREN,SEMI,results,DOT,add,LPAREN,t,RPAREN,SEMI,RBRACE,rs,DOT,close,LPAREN,RPAREN,SEMI,ps,DOT,close,LPAREN,RPAREN,SEMI,c,DOT,close,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,println,LPAREN,""******************************* "",RPAREN,SEMI,TopicModel,tm,EQ,NEW,TopicModel,LPAREN,RPAREN,SEMI,IF,LPAREN,results,DOT,isEmpty,LPAREN,RPAREN,RPAREN,LBRACE,tmDrillModel,EQ,NEW,TMDrillModel,LPAREN,<MASK>,1,RPAREN,SEMI,RBRACE,ELSE,LBRACE,tm,DOT,importData,LPAREN,results,RPAREN,SEMI,tm,DOT,trainTopics,LPAREN,RPAREN,SEMI,tmDrillModel,EQ,NEW,TMDrillModel,LPAREN,0,COMMA,tablename,COMMA,tm,DOT,getAllTopics,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,CATCH,LPAREN,ClassNotFoundException,ex,RPAREN,LBRACE,Logger,DOT,getLogger,LPAREN,tweetHandler,DOT,CLASS,DOT,getName,LPAREN,RPAREN,RPAREN,DOT,log,LPAREN,Level,DOT,SEVERE,COMMA,null,COMMA,ex,RPAREN,SEMI,RBRACE,CATCH,LPAREN,SQLException,ex,RPAREN,LBRACE,Logger,DOT,getLogger,LPAREN,tweetHandler,DOT,CLASS,DOT,getName,LPAREN,RPAREN,RPAREN,DOT,log,LPAREN,Level,DOT,SEVERE,COMMA,null,COMMA,ex,RPAREN,SEMI,RBRACE,RETURN,tmDrillModel,SEMI,RBRACE","    public static TMDrillModel TMgetAllTweetsByDate(String startDate, String endDate){
,        ArrayList<tweetModel> results = new ArrayList<tweetModel>();
,        TMDrillModel tmDrillModel = new TMDrillModel();
,        
,        String[] start = startDate.split("" "");  //[0] month, [1] day, [2] year
,        String[] end = endDate.split("" "");
,        tweetModel t;
,        
,        String tablename = ""temp<MASK>"" + start[0]+"".""+start[1]+"".""+start[2]+""-""+end[0]+"".""+end[1]+"".""+end[2];
,        System.out.println(tablename);
,        
,        String whereCondition = """";
,        
,        int year = Integer.parseInt(start[2]);
,//        for(int year = Integer.parseInt(start[2]); year <= Integer.parseInt(end[2]); year++){
,            for(int month = monthNumber(start[0]); month <= monthNumber(end[0]); month++){
,                int currentday = 1;
,                if(month == monthNumber(start[0]))
,                    currentday = Integer.parseInt(start[1]);
,                
,//                System.out.println(""[2.5] ""+whereCondition);
,                for(int day = currentday; day <= numDaysinMonth(month); day++){
,                    if(month == monthNumber(end[0]) && day > Integer.parseInt(end[1]))
,                        break;
,                    if(whereCondition.equals(""""))
,                        whereCondition = ""'"" + start[1] + "" "" + start[0] + "" "" + start[2] + ""%'"";
,                    else
,                        whereCondition = whereCondition.concat("" or date like '"" + day + "" "" + monthName(month) + "" "" + year +""%'"");
,//                    System.out.println(""[2] ""+whereCondition);
,                }
,            }
,//        }
,        System.out.println(""[3] "" + whereCondition);
,        
,        try{
,            Connection c = DBFactory.getConnection();
,            PreparedStatement ps = c.prepareStatement(
,                ""DROP TABLE IF EXISTS `"" + tablename + ""`; ""
,                );
,                ps.execute();
,                System.out.println(ps);
,            ps = c.prepareStatement(
,                ""CREATE TABLE `"" + tablename + ""` ("" +
,                ""`username` varchar(20) NOT NULL,"" +
,                ""`date` varchar(30) NOT NULL,"" +
,                ""`message` varchar(180) NOT NULL"" +
,                "")ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;""
,                );
,                ps.execute();
,                System.out.println(ps);
,            ps = c.prepareStatement(
,                ""INSERT INTO `"" + tablename + ""` (username, date, message) "" + 
,                ""SELECT username, date, message FROM `tweets` "" +
,                ""WHERE date like "" + whereCondition);
,                ps.execute();   
,                System.out.println(ps);
,                //SELECT * FROM `Seasons` WHERE (date_field BETWEEN '2010-01-30 14:15:55' AND '2010-09-29 10:15:55')
,            
,            ps = c.prepareStatement(""SELECT * from `"" + tablename + ""`;"");
,            ResultSet rs = ps.executeQuery();
,            
,            while(rs.next()){
,                t = new tweetModel();
,                t.setUsername(rs.getString(""username""));
,                t.setDate(rs.getString(""date""));
,                t.setMessage(cleanTweet(rs.getString(""message"")));
,                results.add(t);
,            }
,            
,            rs.close();
,            ps.close();
,            c.close();
,            
,            System.out.println(""******************************* "");
,            
,            TopicModel tm = new TopicModel();
,            
,            if(results.isEmpty()){
,                tmDrillModel = new TMDrillModel(-1);
,            }else{
,                tm.importData(results);
,                tm.trainTopics();
,                tmDrillModel = new TMDrillModel(0, tablename, tm.getAllTopics());
,            }
,            
,        }catch(ClassNotFoundException ex){
,            Logger.getLogger(tweetHandler.class.getName()).log(Level.SEVERE, null, ex);
,        }catch(SQLException ex){
,            Logger.getLogger(tweetHandler.class.getName()).log(Level.SEVERE, null, ex);
,        }
,         
,        return tmDrillModel;
,    }
"
08b41d00-9e8d-4e48-94b9-945bef00d612,7016b7a7-d684-4eac-8850-87c818adde2f,LTEQ,"PUBLIC,STATIC,void,main,LPAREN,String,LBRACKET,RBRACKET,args,RPAREN,LBRACE,int,employeeNumber,COMMA,activeYear,SEMI,float,sellValue,COMMA,bonus,EQ,0,COMMA,totalBonus,EQ,0,SEMI,Scanner,scan,EQ,NEW,Scanner,LPAREN,System,DOT,in,RPAREN,SEMI,System,DOT,out,DOT,print,LPAREN,""\u0E08\u0E33\u0E19\u0E27\u0E19\u0E1E\u0E19\u0E31\u0E01\u0E07\u0E32\u0E19(\u0E04\u0E19) >>> "",RPAREN,SEMI,employeeNumber,EQ,scan,DOT,nextInt,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,1,SEMI,i,<MASK>,employeeNumber,SEMI,i,PLUSPLUS,RPAREN,LBRACE,System,DOT,out,DOT,print,LPAREN,""\u0E22\u0E2D\u0E14\u0E02\u0E32\u0E22\u0E02\u0E2D\u0E07\u0E1E\u0E19\u0E31\u0E01\u0E07\u0E32\u0E19\u0E04\u0E19\u0E17\u0E35\u0E48 "",PLUS,i,PLUS,"" (\u0E1A\u0E32\u0E17) >>> "",RPAREN,SEMI,sellValue,EQ,scan,DOT,nextFloat,LPAREN,RPAREN,SEMI,System,DOT,out,DOT,print,LPAREN,""\u0E23\u0E30\u0E22\u0E30\u0E40\u0E27\u0E25\u0E32\u0E01\u0E32\u0E23\u0E17\u0E33\u0E07\u0E32\u0E19(\u0E1B\u0E35) >>> "",RPAREN,SEMI,activeYear,EQ,scan,DOT,nextInt,LPAREN,RPAREN,SEMI,IF,LPAREN,activeYear,GTEQ,5,RPAREN,LBRACE,bonus,EQ,0.05f,STAR,sellValue,SEMI,RBRACE,ELSE,IF,LPAREN,activeYear,GTEQ,1,RPAREN,LBRACE,bonus,EQ,0.03f,STAR,sellValue,SEMI,RBRACE,totalBonus,PLUSEQ,bonus,SEMI,System,DOT,out,DOT,printf,LPAREN,""\u0E1E\u0E19\u0E31\u0E01\u0E07\u0E32\u0E19\u0E04\u0E19\u0E17\u0E35\u0E48 %d \u0E44\u0E14\u0E49\u0E23\u0E31\u0E1A\u0E42\u0E1A\u0E19\u0E31\u0E2A\u0E40\u0E1B\u0E47\u0E19\u0E40\u0E07\u0E34\u0E19 %,.2f \u0E1A\u0E32\u0E17\n"",COMMA,i,COMMA,bonus,RPAREN,SEMI,RBRACE,System,DOT,out,DOT,printf,LPAREN,""\u0E23\u0E27\u0E21 \u0E08\u0E33\u0E19\u0E27\u0E19\u0E40\u0E07\u0E34\u0E19\u0E42\u0E1A\u0E19\u0E31\u0E2A\u0E17\u0E35\u0E48\u0E1A\u0E23\u0E34\u0E29\u0E31\u0E17\u0E15\u0E49\u0E2D\u0E07\u0E08\u0E48\u0E32\u0E22\u0E17\u0E31\u0E49\u0E07\u0E2B\u0E21\u0E14\u0E40\u0E17\u0E48\u0E32\u0E01\u0E31\u0E1A %,.2f \u0E1A\u0E32\u0E17\n"",COMMA,totalBonus,RPAREN,SEMI,RBRACE","    public static void main(String[] args) {
,        int employeeNumber, activeYear;
,        float sellValue, bonus = 0, totalBonus = 0;
,        Scanner scan = new Scanner(System.in);
,        System.out.print(""จำนวนพนักงาน(คน) >>> "");
,        employeeNumber = scan.nextInt();
,        for (int i = 1; i <MASK> employeeNumber; i++) {
,            System.out.print(""ยอดขายของพนักงานคนที่ "" + i + "" (บาท) >>> "");
,            sellValue = scan.nextFloat();
,            System.out.print(""ระยะเวลาการทำงาน(ปี) >>> "");
,            activeYear = scan.nextInt();
,            if (activeYear >= 5) {
,                bonus = 0.05f * sellValue;
,            } else if (activeYear >= 1) {
,                bonus = 0.03f * sellValue;
,            }
,            totalBonus += bonus;
,            System.out.printf(""พนักงานคนที่ %d ได้รับโบนัสเป็นเงิน %,.2f บาท\n"", i, bonus);
,        }
,        System.out.printf(""รวม จำนวนเงินโบนัสที่บริษัทต้องจ่ายทั้งหมดเท่ากับ %,.2f บาท\n"", totalBonus);
,    }
"
eac7db55-f1c9-4e74-95f6-9c62d4d48b4c,10b7d163-d0f6-475a-b4ec-974056250d83,PLUS,"PUBLIC,STATIC,void,main,LPAREN,String,LBRACKET,RBRACKET,argv,RPAREN,LBRACE,NEW,AppletFrame,LPAREN,""svm_toy"",COMMA,NEW,svm_toy,LPAREN,RPAREN,COMMA,500,COMMA,500,<MASK>,50,RPAREN,SEMI,RBRACE","	public static void main(String[] argv)
,	{
,		new AppletFrame(""svm_toy"",new svm_toy(),500,500<MASK>50);
,	}
"
6c241594-f2fc-4996-bfc9-c7ef863c220a,48e8552d-7f71-480c-a136-e87ebc7ccd27,LTEQ,"PRIVATE,STATIC,void,printHubDetails,LPAREN,int,indent,COMMA,Device,dev,RPAREN,LBRACE,TRY,LBRACE,Hub,h,EQ,NEW,Hub,LPAREN,dev,RPAREN,SEMI,int,ports,EQ,h,DOT,getNumPorts,LPAREN,RPAREN,SEMI,boolean,indicator,EQ,h,DOT,isIndicator,LPAREN,RPAREN,SEMI,indentLine,LPAREN,indent,COMMA,LPAREN,h,DOT,isRootHub,LPAREN,RPAREN,QUES,""Root "",COLON,"""",RPAREN,PLUS,""Hub, "",PLUS,ports,PLUS,"" ports"",RPAREN,SEMI,indentLine,LPAREN,indent,COMMA,""overcurrent protection: "",PLUS,h,DOT,getOverCurrentMode,LPAREN,RPAREN,RPAREN,SEMI,indentLine,LPAREN,indent,COMMA,""power switching: "",PLUS,h,DOT,getPowerSwitchingMode,LPAREN,RPAREN,RPAREN,SEMI,IF,LPAREN,indicator,RPAREN,indentLine,LPAREN,indent,COMMA,""has port indicator LEDs"",RPAREN,SEMI,IF,LPAREN,h,DOT,isCompound,LPAREN,RPAREN,RPAREN,indentLine,LPAREN,indent,COMMA,""part of a compound device"",RPAREN,SEMI,indent,SUBEQ,4,SEMI,indentLine,LPAREN,indent,COMMA,"""",RPAREN,SEMI,FOR,LPAREN,int,i,EQ,1,SEMI,i,<MASK>,ports,SEMI,i,PLUSPLUS,RPAREN,LBRACE,Device,child,EQ,dev,DOT,getChild,LPAREN,i,RPAREN,SEMI,IF,LPAREN,child,EQEQ,null,RPAREN,CONTINUE,SEMI,indentLine,LPAREN,indent,COMMA,""<!-- Port "",PLUS,i,PLUS,LPAREN,h,DOT,isRemovable,LPAREN,i,RPAREN,QUES,"""",COLON,"" is built-in."",RPAREN,PLUS,"" -->"",RPAREN,SEMI,printDevice,LPAREN,indent,COMMA,child,RPAREN,SEMI,RBRACE,RBRACE,CATCH,LPAREN,IOException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,System,DOT,out,RPAREN,SEMI,RBRACE,RBRACE","    private static void printHubDetails (int indent, Device dev)
,    {
,	try {
,	    Hub		h = new Hub (dev);
,	    int		ports = h.getNumPorts ();
,	    boolean	indicator = h.isIndicator ();
,
,	    indentLine (indent,
,		(h.isRootHub () ? ""Root "" : """")
,		+ ""Hub, ""
,		+ ports
,		+ "" ports""
,		);
,	    indentLine (indent,
,		""overcurrent protection: ""
,		+ h.getOverCurrentMode ()
,		);
,	    indentLine (indent,
,		""power switching: ""
,		+ h.getPowerSwitchingMode ()
,		);
,	    if (indicator)
,		indentLine (indent, ""has port indicator LEDs"");
,	    if (h.isCompound ())
,		indentLine (indent, ""part of a compound device"");
,
,	    // not showing POTPGT, or hub's own current draw
,
,	    indent -= 4;
,	    indentLine (indent, """");
,	    for (int i = 1; i <MASK> ports; i++) {
,		Device child = dev.getChild (i);
,
,		if (child == null)
,		    continue;
,
,		indentLine (indent, ""<!-- Port ""
,			+ i
,			+ (h.isRemovable (i) ? """" : "" is built-in."")
,			+ "" -->"");
,		printDevice (indent, child);
,	    }
,
,	} catch (IOException e) {
,	    e.printStackTrace (System.out);
,	}
,    }
"
4efd15d4-7259-49ef-bb2b-8984a1154bd6,0ed74ba2-9c50-47a9-83cc-a02924a2ee1f,SUB,"MONKEYS_AT,Override,PUBLIC,int,compare,LPAREN,Tfidf,o1,COMMA,Tfidf,o2,RPAREN,LBRACE,TRY,LBRACE,IF,LPAREN,o1,DOT,getScore,LPAREN,RPAREN,GT,o2,DOT,getScore,LPAREN,RPAREN,RPAREN,LBRACE,RETURN,<MASK>,1,SEMI,RBRACE,ELSE,IF,LPAREN,o1,DOT,getScore,LPAREN,RPAREN,LT,o2,DOT,getScore,LPAREN,RPAREN,RPAREN,LBRACE,RETURN,1,SEMI,RBRACE,RBRACE,CATCH,LPAREN,Exception,e,RPAREN,LBRACE,System,DOT,err,DOT,println,LPAREN,e,DOT,toString,LPAREN,RPAREN,RPAREN,SEMI,RBRACE,RETURN,0,SEMI,RBRACE","        @Override
,        public int compare(Tfidf o1, Tfidf o2) {
,          
,            try{
,                if (o1.getScore() > o2.getScore()) {
,                    return <MASK>1;
,                } else if (o1.getScore() < o2.getScore()) {
,                    return 1;
,                }
,            }catch(Exception e){
,                System.err.println(e.toString());
,        }
,            return 0;
,        }
"
bb99f4c1-f6e4-4451-9385-5b7ab901572f,cb4fb258-3abd-43de-8021-e09056f4436b,GTEQ,"PRIVATE,int,substringCount,LPAREN,String,to_find,COMMA,String,source,RPAREN,LBRACE,int,rv,EQ,SUB,1,SEMI,int,idx,EQ,0,SEMI,DO,LBRACE,rv,PLUSPLUS,SEMI,idx,EQ,source,DOT,indexOf,LPAREN,to_find,COMMA,idx,GT,0,QUES,idx,PLUS,1,COLON,idx,RPAREN,SEMI,RBRACE,WHILE,LPAREN,idx,<MASK>,0,RPAREN,SEMI,RETURN,rv,SEMI,RBRACE","    private int substringCount(String to_find, String source)
,    {
,        int rv = -1;
,        int idx = 0;
,
,        do {
,            rv++;
,            idx = source.indexOf(to_find, idx > 0 ? idx+1 : idx);
,        } while (idx <MASK> 0);
,
,        return rv;
,    }
"
0a4ca423-774e-4648-9a00-98a0346992be,ca6fde75-a3d3-4f37-9fd1-d68244013c47,EQEQ,"PRIVATE,FINAL,List,LT,File,GT,deepListFiles,LPAREN,List,LT,File,GT,files,COMMA,FINAL,Directory,directory,RPAREN,LBRACE,IF,LPAREN,files,<MASK>,null,RPAREN,files,EQ,NEW,ArrayList,LT,File,GT,LPAREN,RPAREN,SEMI,FINAL,List,LT,DiskUnit,GT,found,EQ,directory,DOT,getUnitsWithin,LPAREN,RPAREN,SEMI,IF,LPAREN,found,BANGEQ,null,RPAREN,LBRACE,FOR,LPAREN,FINAL,DiskUnit,unit,COLON,found,RPAREN,LBRACE,IF,LPAREN,unit,INSTANCEOF,File,RPAREN,files,DOT,add,LPAREN,LPAREN,File,RPAREN,unit,RPAREN,SEMI,ELSE,deepListFiles,LPAREN,files,COMMA,LPAREN,Directory,RPAREN,unit,RPAREN,SEMI,RBRACE,RBRACE,RETURN,files,SEMI,RBRACE","	private final List<File> deepListFiles(List<File> files, final Directory directory) {
,		if (files <MASK> null)
,			files = new ArrayList<File>();
,		final List<DiskUnit> found = directory.getUnitsWithin();
,		if (found != null) {
,			for (final DiskUnit unit : found) {
,				if (unit instanceof File) files.add((File) unit);
,				else deepListFiles(files, (Directory) unit);
,			}
,		}
,		return files;
,	}
"
38ed5e2e-bfac-4cc9-94e0-5ee38dabb0ca,c4cac444-5271-405e-a5a5-2d53348a748f,EQEQ,"PUBLIC,boolean,isSubset,LPAREN,Collection,LT,QUES,GT,coll,RPAREN,LBRACE,IF,LPAREN,coll,<MASK>,this,RPAREN,RETURN,true,SEMI,ELSE,IF,LPAREN,size,LPAREN,RPAREN,GT,coll,DOT,size,LPAREN,RPAREN,RPAREN,RETURN,false,SEMI,ELSE,IF,LPAREN,coll,INSTANCEOF,FHashSet,RPAREN,LBRACE,FHashSet,LT,Object,GT,fhs,EQ,LPAREN,FHashSet,LT,Object,GT,RPAREN,coll,SEMI,RETURN,isSubset,LPAREN,tree,COMMA,fhs,DOT,tree,RPAREN,SEMI,RBRACE,ELSE,IF,LPAREN,coll,INSTANCEOF,FLinkedHashSet,RPAREN,LBRACE,FLinkedHashSet,LT,Object,GT,flhs,EQ,LPAREN,FLinkedHashSet,LT,Object,GT,RPAREN,coll,SEMI,RETURN,isSubset,LPAREN,tree,COMMA,flhs,DOT,set_tree,RPAREN,SEMI,RBRACE,ELSE,LBRACE,FOR,LPAREN,Elt,elt,COLON,this,RPAREN,IF,LPAREN,BANG,coll,DOT,contains,LPAREN,elt,RPAREN,RPAREN,RETURN,false,SEMI,RETURN,true,SEMI,RBRACE,RBRACE","    public boolean isSubset(Collection<?> coll) {
,	if (coll <MASK> this) return true;
,	else if (size() > coll.size()) return false;
,	else if (coll instanceof FHashSet) {
,	    FHashSet<Object> fhs = (FHashSet<Object>)coll;
,	    return isSubset(tree, fhs.tree);
,	} else if (coll instanceof FLinkedHashSet) {
,	    FLinkedHashSet<Object> flhs = (FLinkedHashSet<Object>)coll;
,	    return isSubset(tree, flhs.set_tree);
,	} else {
,	    for (Elt elt : this)
,		if (!coll.contains(elt)) return false;
,	    return true;
,	}
,    }
"
41539c05-83ff-49b8-a839-9292483dddc3,227c60a6-0cb6-4d38-85ca-044d2ead3f37,PERCENT,"PUBLIC,boolean,checkTime,LPAREN,int,min_time,COMMA,int,max_time,COMMA,int,increment,RPAREN,LBRACE,RETURN,gametime,GT,min_time,AMPAMP,gametime,LT,max_time,AMPAMP,LPAREN,LPAREN,gametime,SUB,1,RPAREN,<MASK>,increment,RPAREN,LT,getGameSpeed,LPAREN,RPAREN,SEMI,RBRACE","	public boolean checkTime(int min_time,int max_time,int increment) {
,		return gametime>min_time && gametime<max_time
,		       && ((gametime-1)<MASK>increment)<getGameSpeed();
,	}
"
35ade180-d88e-4313-85ee-c83da04287fd,b03a330d-e01a-480e-b7eb-4eea265cc076,BANGEQ,"PUBLIC,STATIC,void,main,LPAREN,String,LBRACKET,RBRACKET,args,RPAREN,LBRACE,TRY,LBRACE,FINAL,String,strMatrix,EQ,""08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08"",PLUS,"";"",PLUS,""49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00"",PLUS,"";"",PLUS,""81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65"",PLUS,"";"",PLUS,""52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91"",PLUS,"";"",PLUS,""22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80"",PLUS,"";"",PLUS,""24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50"",PLUS,"";"",PLUS,""32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70"",PLUS,"";"",PLUS,""67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21"",PLUS,"";"",PLUS,""24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72"",PLUS,"";"",PLUS,""21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95"",PLUS,"";"",PLUS,""78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92"",PLUS,"";"",PLUS,""16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57"",PLUS,"";"",PLUS,""86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58"",PLUS,"";"",PLUS,""19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40"",PLUS,"";"",PLUS,""04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66"",PLUS,"";"",PLUS,""88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69"",PLUS,"";"",PLUS,""04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36"",PLUS,"";"",PLUS,""20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16"",PLUS,"";"",PLUS,""20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54"",PLUS,"";"",PLUS,""01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48"",SEMI,FINAL,String,LBRACKET,RBRACKET,strRows,EQ,strMatrix,DOT,split,LPAREN,"";"",RPAREN,SEMI,FINAL,int,rows,EQ,strRows,DOT,length,SEMI,FINAL,int,LBRACKET,RBRACKET,LBRACKET,RBRACKET,matrix,EQ,NEW,int,LBRACKET,rows,RBRACKET,LBRACKET,RBRACKET,SEMI,FOR,LPAREN,int,row,EQ,0,SEMI,row,LT,rows,SEMI,row,PLUSPLUS,RPAREN,LBRACE,FINAL,String,LBRACKET,RBRACKET,strColumns,EQ,strRows,LBRACKET,row,RBRACKET,DOT,split,LPAREN,"" "",RPAREN,SEMI,FINAL,int,columns,EQ,strColumns,DOT,length,SEMI,matrix,LBRACKET,row,RBRACKET,EQ,NEW,int,LBRACKET,columns,RBRACKET,SEMI,IF,LPAREN,row,GT,0,RPAREN,LBRACE,IF,LPAREN,columns,<MASK>,matrix,LBRACKET,row,SUB,1,RBRACKET,DOT,length,RPAREN,LBRACE,THROW,NEW,Exception,LPAREN,""column discrepancy."",RPAREN,SEMI,RBRACE,RBRACE,FOR,LPAREN,int,column,EQ,0,SEMI,column,LT,columns,SEMI,column,PLUSPLUS,RPAREN,LBRACE,matrix,LBRACKET,row,RBRACKET,LBRACKET,column,RBRACKET,EQ,Integer,DOT,parseInt,LPAREN,strColumns,LBRACKET,column,RBRACKET,RPAREN,SEMI,RBRACE,RBRACE,FINAL,int,columns,EQ,matrix,LBRACKET,0,RBRACKET,DOT,length,SEMI,int,max,EQ,0,SEMI,FOR,LPAREN,int,row,EQ,0,SEMI,row,LT,rows,SUB,4,SEMI,row,PLUSPLUS,RPAREN,LBRACE,FOR,LPAREN,int,col,EQ,0,SEMI,col,LT,columns,SUB,4,SEMI,col,PLUSPLUS,RPAREN,LBRACE,int,prod,SEMI,int,c,SEMI,int,r,SEMI,IF,LPAREN,row,EQEQ,6,AMPAMP,col,EQEQ,8,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,""m[7][9] = "",PLUS,matrix,LBRACKET,row,RBRACKET,LBRACKET,col,RBRACKET,RPAREN,SEMI,RBRACE,r,EQ,row,SEMI,c,EQ,col,SEMI,prod,EQ,1,SEMI,FOR,LPAREN,r,EQ,row,SEMI,r,LT,row,PLUS,4,SEMI,r,PLUSPLUS,RPAREN,LBRACE,int,num,EQ,matrix,LBRACKET,r,RBRACKET,LBRACKET,c,RBRACKET,SEMI,System,DOT,out,DOT,println,LPAREN,num,RPAREN,SEMI,prod,STAREQ,num,SEMI,RBRACE,IF,LPAREN,prod,GT,max,RPAREN,LBRACE,max,EQ,prod,SEMI,RBRACE,r,EQ,row,SEMI,c,EQ,col,SEMI,prod,EQ,1,SEMI,FOR,LPAREN,c,EQ,col,SEMI,c,LT,col,PLUS,4,SEMI,c,PLUSPLUS,RPAREN,LBRACE,int,num,EQ,matrix,LBRACKET,r,RBRACKET,LBRACKET,c,RBRACKET,SEMI,System,DOT,out,DOT,println,LPAREN,num,RPAREN,SEMI,prod,STAREQ,num,SEMI,RBRACE,IF,LPAREN,prod,GT,max,RPAREN,LBRACE,max,EQ,prod,SEMI,RBRACE,r,EQ,row,SEMI,c,EQ,col,SEMI,prod,EQ,1,SEMI,FOR,LPAREN,c,EQ,col,SEMI,c,LT,col,PLUS,4,SEMI,c,PLUSPLUS,RPAREN,LBRACE,int,num,EQ,matrix,LBRACKET,r,RBRACKET,LBRACKET,c,RBRACKET,SEMI,r,PLUSPLUS,SEMI,System,DOT,out,DOT,println,LPAREN,num,RPAREN,SEMI,prod,STAREQ,num,SEMI,RBRACE,IF,LPAREN,prod,GT,max,RPAREN,LBRACE,max,EQ,prod,SEMI,RBRACE,r,EQ,row,PLUS,4,SEMI,c,EQ,col,SEMI,prod,EQ,1,SEMI,FOR,LPAREN,c,EQ,col,SEMI,c,LT,col,PLUS,4,SEMI,c,PLUSPLUS,RPAREN,LBRACE,r,SUBSUB,SEMI,int,num,EQ,matrix,LBRACKET,r,RBRACKET,LBRACKET,c,RBRACKET,SEMI,System,DOT,out,DOT,println,LPAREN,num,RPAREN,SEMI,prod,STAREQ,num,SEMI,RBRACE,IF,LPAREN,prod,GT,max,RPAREN,LBRACE,max,EQ,prod,SEMI,RBRACE,RBRACE,RBRACE,System,DOT,out,DOT,println,LPAREN,""# answer = "",PLUS,max,RPAREN,SEMI,RBRACE,CATCH,LPAREN,Exception,ex,RPAREN,LBRACE,ex,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,RBRACE","    public static void main(String[] args) {
,        try {
,            // prepare data
,            final String strMatrix = ""08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08"" + "";""
,                    + ""49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00"" + "";""
,                    + ""81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65"" + "";""
,                    + ""52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91"" + "";""
,                    + ""22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80"" + "";""
,                    + ""24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50"" + "";""
,                    + ""32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70"" + "";""
,                    + ""67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21"" + "";""
,                    + ""24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72"" + "";""
,                    + ""21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95"" + "";""
,                    + ""78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92"" + "";""
,                    + ""16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57"" + "";""
,                    + ""86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58"" + "";""
,                    + ""19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40"" + "";""
,                    + ""04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66"" + "";""
,                    + ""88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69"" + "";""
,                    + ""04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36"" + "";""
,                    + ""20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16"" + "";""
,                    + ""20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54"" + "";""
,                    + ""01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48"";
,            final String[] strRows = strMatrix.split("";"");
,            final int rows = strRows.length;
,            final int[][] matrix = new int[rows][];
,            for (int row = 0; row < rows; row++) {
,                final String[] strColumns = strRows[row].split("" "");
,                final int columns = strColumns.length;
,                matrix[row] = new int[columns];
,                if (row > 0) {
,                    if (columns <MASK> matrix[row - 1].length) {
,                        throw new Exception(""column discrepancy."");
,                    }
,                }
,                for (int column = 0; column < columns; column++) {
,                    matrix[row][column] = Integer.parseInt(strColumns[column]);
,                }
,            }
,            final int columns = matrix[0].length;
,
,            // compute max
,            int max = 0;
,            for (int row = 0; row < rows - 4; row++) {
,                for (int col = 0; col < columns - 4; col++) {
,
,                    int prod;
,                    int c;
,                    int r;
,                    if (row == 6 && col == 8) {
,                        System.out.println(""m[7][9] = "" + matrix[row][col]);
,                    }
,                    // along row
,                    r = row;
,                    c = col;
,                    prod = 1;
,                    for (r = row; r < row + 4; r++) {
,                        int num = matrix[r][c];
,                        System.out.println(num);
,                        prod *= num;
,                    }
,                    if (prod > max) {
,                        max = prod;
,                    }
,
,                    // along col
,                    r = row;
,                    c = col;
,                    prod = 1;
,                    for (c = col; c < col + 4; c++) {
,                        int num = matrix[r][c];
,                        System.out.println(num);
,                        prod *= num;
,                    }
,                    if (prod > max) {
,                        max = prod;
,                    }
,
,                    // along diagonal
,                    r = row;
,                    c = col;
,                    prod = 1;
,                    for (c = col; c < col + 4; c++) {
,                        int num = matrix[r][c];
,                        r++;
,                        System.out.println(num);
,                        prod *= num;
,                    }
,                    if (prod > max) {
,                        max = prod;
,                    }
,
,                    // along negative diagonal
,                    r = row + 4;
,                    c = col;
,                    prod = 1;
,                    for (c = col; c < col + 4; c++) {
,                        r--;
,                        int num = matrix[r][c];
,                        System.out.println(num);
,                        prod *= num;
,                    }
,                    if (prod > max) {
,                        max = prod;
,                    }
,
,                }
,            }
,
,            // done
,            System.out.println(""# answer = "" + max);
,        } catch (Exception ex) {
,            ex.printStackTrace();
,        }
,    }
"
113c5414-6c55-466b-b879-a350ab6e0ca2,fa660505-ea05-4919-9f37-6e14ce4e8eb5,EQ,"PUBLIC,ImageRegistry,LBRACKET,RBRACKET,getAllTileSets,LPAREN,RPAREN,LBRACE,ImageRegistry,LBRACKET,RBRACKET,all,<MASK>,NEW,ImageRegistry,LBRACKET,tileSets,DOT,size,LPAREN,RPAREN,RBRACKET,SEMI,tileSets,DOT,values,LPAREN,RPAREN,DOT,toArray,LPAREN,all,RPAREN,SEMI,RETURN,all,SEMI,RBRACE","	public ImageRegistry[] getAllTileSets(){
,		ImageRegistry[] all <MASK> new ImageRegistry[tileSets.size()];
,		tileSets.values().toArray(all);
,		return all;
,	}
"
b5ee7e5e-a7bf-41d4-8880-3ac95d2f8822,ac3ed475-1038-4741-9359-acb05715578c,PLUS,"PUBLIC,void,readFile,LPAREN,String,filename,RPAREN,LBRACE,BufferedReader,br,EQ,null,SEMI,TRY,LBRACE,br,EQ,NEW,BufferedReader,LPAREN,NEW,FileReader,LPAREN,NEW,File,LPAREN,filename,RPAREN,RPAREN,RPAREN,SEMI,String,header,EQ,br,DOT,readLine,LPAREN,RPAREN,SEMI,IF,LPAREN,header,EQEQ,null,RPAREN,LBRACE,System,DOT,out,DOT,println,LPAREN,filename,<MASK>,"" is empty.  Exiting"",RPAREN,SEMI,System,DOT,exit,LPAREN,SUB,1,RPAREN,SEMI,RBRACE,String,ln,EQ,br,DOT,readLine,LPAREN,RPAREN,SEMI,WHILE,LPAREN,ln,BANGEQ,null,RPAREN,LBRACE,String,LBRACKET,RBRACKET,split,EQ,ln,DOT,split,LPAREN,""\t"",RPAREN,SEMI,double,x,EQ,Double,DOT,parseDouble,LPAREN,split,LBRACKET,xfield,RBRACKET,RPAREN,SEMI,double,y,EQ,Double,DOT,parseDouble,LPAREN,split,LBRACKET,yfield,RBRACKET,RPAREN,SEMI,double,z,EQ,Double,DOT,parseDouble,LPAREN,split,LBRACKET,zfield,RBRACKET,RPAREN,SEMI,int,x_idx,EQ,LPAREN,int,RPAREN,LPAREN,x,SUB,west,SLASH,xdim,RPAREN,SEMI,int,y_idx,EQ,LPAREN,int,RPAREN,LPAREN,y,SUB,south,SLASH,ydim,RPAREN,SEMI,int,z_idx,EQ,LPAREN,int,RPAREN,LPAREN,z,SUB,bottom,SLASH,zdim,RPAREN,SEMI,br,DOT,readLine,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,CATCH,LPAREN,FileNotFoundException,e,RPAREN,LBRACE,e,DOT,printStackTrace,LPAREN,RPAREN,SEMI,RBRACE,CATCH,LPAREN,IOException,e,RPAREN,LBRACE,RBRACE,RBRACE","	public void readFile(String filename){
,		BufferedReader br = null;
,		try {
,			br = new BufferedReader(new FileReader(new File(filename)));
,			String header = br.readLine();
,			if (header==null){
,				System.out.println(filename <MASK> "" is empty.  Exiting"");
,				System.exit(-1);
,			}
,			
,			String ln = br.readLine();
,			while (ln!=null){
,				String[] split = ln.split(""\t"");
,				double x = Double.parseDouble(split[xfield]);
,				double y = Double.parseDouble(split[yfield]);
,				double z = Double.parseDouble(split[zfield]);
,				int x_idx = (int) (x-west/xdim);
,				int y_idx = (int) (y-south/ydim);
,				int z_idx = (int) (z-bottom/zdim);
,				br.readLine();
,			}
,			
,		} catch (FileNotFoundException e) {
,			e.printStackTrace();
,		} catch (IOException e){
,			
,		}
,	}
"
cc1c4187-1182-4cd3-a559-9895584ed311,383403ef-18f2-4997-b1af-6569d03a3e7f,GTEQ,"PUBLIC,String,times,LPAREN,String,sFactor,COMMA,int,iFactor,RPAREN,LBRACE,IF,LPAREN,iFactor,EQEQ,0,RPAREN,RETURN,"""",SEMI,IF,LPAREN,sFactor,DOT,equals,LPAREN,"""",RPAREN,RPAREN,RETURN,"""",SEMI,IF,LPAREN,iFactor,LT,0,RPAREN,LBRACE,String,reversed,EQ,"""",SEMI,FOR,LPAREN,int,i,EQ,sFactor,DOT,length,LPAREN,RPAREN,SUB,1,SEMI,i,<MASK>,0,SEMI,i,SUBSUB,RPAREN,LBRACE,reversed,PLUSEQ,sFactor,DOT,charAt,LPAREN,i,RPAREN,SEMI,RBRACE,sFactor,EQ,reversed,SEMI,RBRACE,StringBuilder,s,EQ,NEW,StringBuilder,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,Math,DOT,abs,LPAREN,iFactor,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,s,DOT,append,LPAREN,sFactor,RPAREN,SEMI,RBRACE,RETURN,s,DOT,toString,LPAREN,RPAREN,SEMI,RBRACE","	public String times(String sFactor, int iFactor) {
,		if (iFactor == 0)
,			return """";
,		if (sFactor.equals(""""))
,			return """";
,
,		if (iFactor < 0) {
,			String reversed = """";
,			for (int i = sFactor.length() - 1; i <MASK> 0; i--) {
,				reversed += sFactor.charAt(i);
,			}
,			sFactor = reversed;
,		}
,
,		StringBuilder s = new StringBuilder();
,		for (int i = 0; i < Math.abs(iFactor); i++) {
,			s.append(sFactor);
,		}
,		return s.toString();
,	}
"
7a6d4ee7-a11c-445d-8f58-7963e611bee0,333fb323-282a-4860-8da1-7a3d51dd6ec1,LT,"PUBLIC,boolean,isAnswerChoosen,LPAREN,RPAREN,LBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,answers,DOT,size,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,answers,DOT,get,LPAREN,i,RPAREN,DOT,getBackground,LPAREN,RPAREN,BANGEQ,SKYBLUE,RPAREN,RETURN,true,SEMI,RBRACE,RETURN,false,SEMI,RBRACE","	public boolean isAnswerChoosen()
,	{
,		for(int i = 0; i <MASK> answers.size(); i++)
,		{
,			if(answers.get(i).getBackground() != SKYBLUE)
,				return true;
,		}
,		return false;
,	}
"
b1d29837-1f95-40a2-98dc-d3762b71a15d,9ea660be-8d36-4daa-838d-7a8785ccb850,GT,"MONKEYS_AT,Override,PUBLIC,void,onUpdate,LPAREN,RPAREN,LBRACE,FINAL,ModModel,LBRACKET,RBRACKET,l,EQ,modTable,DOT,getModel,LPAREN,RPAREN,DOT,getSelectedMods,LPAREN,RPAREN,SEMI,IF,LPAREN,l,DOT,length,<MASK>,0,RPAREN,LBRACE,Updater,DOT,open,LPAREN,l,RPAREN,SEMI,synchronizeMods,LPAREN,l,RPAREN,SEMI,RBRACE,RBRACE","	@Override
,	public void onUpdate() {
,		final ModModel[] l = modTable.getModel().getSelectedMods();
,		if (l.length <MASK> 0) {
,			Updater.open(l);
,			synchronizeMods(l);
,		}
,	}
"
a4c68a60-241d-4ccc-bb34-58eb273247fe,397c5d3d-e636-42fb-bcfd-ad3b67b8c226,PLUS,"MONKEYS_AT,Override,PUBLIC,CloneResult,cloneToLocal,LPAREN,RPAREN,LBRACE,IF,LPAREN,repositoryUrl,EQEQ,null,AMPAMP,settings,DOT,failFast,LPAREN,RPAREN,RPAREN,LBRACE,THROW,NEW,IllegalStateException,LPAREN,""Cannot clone repository because remote url is not specified for root: "",<MASK>,this,RPAREN,SEMI,RBRACE,RETURN,execute,LPAREN,NEW,GitClone,LPAREN,settings,DOT,gitPath,LPAREN,RPAREN,COMMA,repositoryUrl,COMMA,localPath,RPAREN,COMMA,CloneResult,DOT,adapter,RPAREN,SEMI,RBRACE","	@Override public CloneResult cloneToLocal() {
,		if (repositoryUrl == null && settings.failFast()) {
,			throw new IllegalStateException(""Cannot clone repository because remote url is not specified for root: "" <MASK> this);
,		}
,		return execute(new GitClone(settings.gitPath(), repositoryUrl, localPath), CloneResult.adapter);
,	}
"
d71e9d90-d7d7-40b1-b4fa-c5316adcd69a,a7384219-6ecf-4639-8055-cc3ef3aae3df,GT,"PRIVATE,STATIC,int,maxSize,LPAREN,FINAL,double,LBRACKET,RBRACKET,LBRACKET,RBRACKET,data,RPAREN,LBRACE,int,max,EQ,0,SEMI,FOR,LPAREN,double,LBRACKET,RBRACKET,s,COLON,data,RPAREN,LBRACE,FINAL,int,size,EQ,s,DOT,length,SEMI,IF,LPAREN,size,<MASK>,max,RPAREN,max,EQ,size,SEMI,RBRACE,RETURN,max,SEMI,RBRACE","    private static int maxSize(final double[][] data) {
,        int max = 0;
,        for (double[] s : data) {
,            final int size = s.length;
,            if (size <MASK> max) max = size;
,        }
,        return max;
,    }
"
7a6d4ee7-a11c-445d-8f58-7963e611bee0,4e3a1b06-226b-490f-9762-248fe6306cdb,BANGEQ,"MONKEYS_AT,Override,PUBLIC,void,build,LPAREN,RPAREN,LBRACE,setInstance,LPAREN,this,RPAREN,SEMI,JFileChooser,dialog,EQ,NEW,JFileChooser,LPAREN,RPAREN,SEMI,dialog,DOT,setFileFilter,LPAREN,NEW,FileNameExtensionFilter,LPAREN,""Custom Quiz File (.quiz)"",COMMA,""quiz"",RPAREN,RPAREN,SEMI,int,res,EQ,dialog,DOT,showOpenDialog,LPAREN,contentPane,RPAREN,SEMI,IF,LPAREN,res,<MASK>,JFileChooser,DOT,APPROVE_OPTION,RPAREN,LBRACE,JOptionPane,DOT,showMessageDialog,LPAREN,null,COMMA,""You have to select a file to start the quiz!"",COMMA,""Quiz Viewer v1.6"",COMMA,JOptionPane,DOT,WARNING_MESSAGE,RPAREN,SEMI,this,DOT,exit,LPAREN,RPAREN,SEMI,RETURN,SEMI,RBRACE,this,DOT,file,EQ,dialog,DOT,getSelectedFile,LPAREN,RPAREN,SEMI,IF,LPAREN,BANG,file,DOT,exists,LPAREN,RPAREN,RPAREN,LBRACE,JOptionPane,DOT,showMessageDialog,LPAREN,null,COMMA,""Cannot open file: File not exists!"",COMMA,""Quiz Viewer v1.6"",COMMA,JOptionPane,DOT,ERROR_MESSAGE,RPAREN,SEMI,this,DOT,exit,LPAREN,RPAREN,SEMI,RETURN,SEMI,RBRACE,IF,LPAREN,BANG,file,DOT,getName,LPAREN,RPAREN,DOT,endsWith,LPAREN,"".quiz"",RPAREN,RPAREN,LBRACE,JOptionPane,DOT,showMessageDialog,LPAREN,null,COMMA,""Cannot open file: Wrong or unsupported type!"",COMMA,""Quiz Viewer v1.6"",COMMA,JOptionPane,DOT,ERROR_MESSAGE,RPAREN,SEMI,this,DOT,exit,LPAREN,RPAREN,SEMI,RETURN,SEMI,RBRACE,TRY,LBRACE,byte,LBRACKET,RBRACKET,data,EQ,FileManager,DOT,readBytes,LPAREN,file,RPAREN,SEMI,CustomQuiz,quiz,EQ,LPAREN,CustomQuiz,RPAREN,ClassSerialiser,DOT,readData,LPAREN,data,COMMA,CustomQuiz,DOT,CLASS,COMMA,""UTF-8"",RPAREN,SEMI,this,DOT,quiz,EQ,quiz,SEMI,RBRACE,CATCH,LPAREN,Exception,ex,RPAREN,LBRACE,JOptionPane,DOT,showMessageDialog,LPAREN,null,COMMA,""Cannot open file: Invalid or broken file!"",COMMA,""Quiz Viewer v1.6"",COMMA,JOptionPane,DOT,ERROR_MESSAGE,RPAREN,SEMI,this,DOT,exit,LPAREN,RPAREN,SEMI,RETURN,SEMI,RBRACE,setFocusable,LPAREN,true,RPAREN,SEMI,addKeyListener,LPAREN,this,RPAREN,SEMI,setResizable,LPAREN,false,RPAREN,SEMI,setTitle,LPAREN,""Quiz Viewer v1.6: $title"",RPAREN,SEMI,setBounds,LPAREN,100,COMMA,100,COMMA,1280,COMMA,1024,RPAREN,SEMI,setDefaultCloseOperation,LPAREN,JFrame,DOT,DO_NOTHING_ON_CLOSE,RPAREN,SEMI,FrameRunner,DOT,centerWindow,LPAREN,this,RPAREN,SEMI,this,DOT,finished,EQ,false,SEMI,addWindowListener,LPAREN,NEW,WindowAdapter,LPAREN,RPAREN,LBRACE,MONKEYS_AT,Override,PUBLIC,void,windowClosing,LPAREN,WindowEvent,arg0,RPAREN,LBRACE,IF,LPAREN,finished,EQEQ,false,RPAREN,LBRACE,success,EQ,false,SEMI,index,EQ,quiz,DOT,getQuestions,LPAREN,RPAREN,DOT,size,LPAREN,RPAREN,SEMI,nextQuestion,LPAREN,RPAREN,SEMI,RETURN,SEMI,RBRACE,IF,LPAREN,getWindowState,LPAREN,RPAREN,EQEQ,WindowState,DOT,FULLSCREEN,RPAREN,LBRACE,switchFullscreen,LPAREN,RPAREN,SEMI,RBRACE,setVisible,LPAREN,false,RPAREN,SEMI,exit,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,RPAREN,SEMI,this,DOT,contentPane,EQ,NEW,JPanel,LPAREN,RPAREN,SEMI,this,DOT,contentPane,DOT,setLayout,LPAREN,null,RPAREN,SEMI,setContentPane,LPAREN,this,DOT,contentPane,RPAREN,SEMI,lblTitle,EQ,NEW,JLabel,LPAREN,""$title"",RPAREN,SEMI,lblTitle,DOT,setFocusable,LPAREN,false,RPAREN,SEMI,lblTitle,DOT,setForeground,LPAREN,NEW,Color,LPAREN,0,COMMA,0,COMMA,0,RPAREN,RPAREN,SEMI,lblTitle,DOT,setFont,LPAREN,NEW,Font,LPAREN,""Tahoma"",COMMA,Font,DOT,PLAIN,COMMA,46,RPAREN,RPAREN,SEMI,lblTitle,DOT,setHorizontalAlignment,LPAREN,SwingConstants,DOT,CENTER,RPAREN,SEMI,lblTitle,DOT,setBounds,LPAREN,10,COMMA,35,COMMA,1244,COMMA,100,RPAREN,SEMI,contentPane,DOT,add,LPAREN,lblTitle,RPAREN,SEMI,lblQuestion,EQ,NEW,JTextField,LPAREN,""$question"",RPAREN,SEMI,lblQuestion,DOT,setBackground,LPAREN,Color,DOT,WHITE,RPAREN,SEMI,lblQuestion,DOT,setForeground,LPAREN,Color,DOT,BLACK,RPAREN,SEMI,lblQuestion,DOT,setHorizontalAlignment,LPAREN,SwingConstants,DOT,CENTER,RPAREN,SEMI,lblQuestion,DOT,setCursor,LPAREN,Cursor,DOT,getPredefinedCursor,LPAREN,Cursor,DOT,DEFAULT_CURSOR,RPAREN,RPAREN,SEMI,lblQuestion,DOT,setEditable,LPAREN,false,RPAREN,SEMI,lblQuestion,DOT,setFocusable,LPAREN,false,RPAREN,SEMI,lblQuestion,DOT,setBorder,LPAREN,NEW,LineBorder,LPAREN,NEW,Color,LPAREN,0,COMMA,0,COMMA,255,RPAREN,COMMA,3,COMMA,true,RPAREN,RPAREN,SEMI,lblQuestion,DOT,setFont,LPAREN,NEW,Font,LPAREN,""Arial"",COMMA,Font,DOT,PLAIN,COMMA,32,RPAREN,RPAREN,SEMI,lblQuestion,DOT,setBounds,LPAREN,37,COMMA,175,COMMA,1200,COMMA,575,RPAREN,SEMI,contentPane,DOT,add,LPAREN,lblQuestion,RPAREN,SEMI,this,DOT,answers,EQ,NEW,ArrayList,LT,JButton,GT,LPAREN,RPAREN,SEMI,btnAnswerA,EQ,NEW,JButton,LPAREN,""$answerA"",RPAREN,SEMI,btnAnswerA,DOT,setFocusable,LPAREN,false,RPAREN,SEMI,btnAnswerA,DOT,addActionListener,LPAREN,this,RPAREN,SEMI,btnAnswerA,DOT,setBackground,LPAREN,SKYBLUE,RPAREN,SEMI,btnAnswerA,DOT,setForeground,LPAREN,Color,DOT,BLACK,RPAREN,SEMI,btnAnswerA,DOT,setBorder,LPAREN,NEW,LineBorder,LPAREN,SystemColor,DOT,textHighlight,COMMA,3,COMMA,true,RPAREN,RPAREN,SEMI,btnAnswerA,DOT,setFont,LPAREN,NEW,Font,LPAREN,""Dialog"",COMMA,Font,DOT,PLAIN,COMMA,20,RPAREN,RPAREN,SEMI,btnAnswerA,DOT,setBounds,LPAREN,40,COMMA,793,COMMA,375,COMMA,150,RPAREN,SEMI,answers,DOT,add,LPAREN,0,COMMA,btnAnswerA,RPAREN,SEMI,contentPane,DOT,add,LPAREN,btnAnswerA,RPAREN,SEMI,btnAnswerB,EQ,NEW,JButton,LPAREN,""$answerB"",RPAREN,SEMI,btnAnswerB,DOT,setFocusable,LPAREN,false,RPAREN,SEMI,btnAnswerB,DOT,addActionListener,LPAREN,this,RPAREN,SEMI,btnAnswerB,DOT,setBackground,LPAREN,SKYBLUE,RPAREN,SEMI,btnAnswerB,DOT,setForeground,LPAREN,Color,DOT,BLACK,RPAREN,SEMI,btnAnswerB,DOT,setBorder,LPAREN,NEW,LineBorder,LPAREN,SystemColor,DOT,textHighlight,COMMA,3,COMMA,true,RPAREN,RPAREN,SEMI,btnAnswerB,DOT,setFont,LPAREN,NEW,Font,LPAREN,""Dialog"",COMMA,Font,DOT,PLAIN,COMMA,20,RPAREN,RPAREN,SEMI,btnAnswerB,DOT,setBounds,LPAREN,449,COMMA,793,COMMA,375,COMMA,150,RPAREN,SEMI,answers,DOT,add,LPAREN,1,COMMA,btnAnswerB,RPAREN,SEMI,contentPane,DOT,add,LPAREN,btnAnswerB,RPAREN,SEMI,btnAnswerC,EQ,NEW,JButton,LPAREN,""$answerC"",RPAREN,SEMI,btnAnswerC,DOT,setFocusable,LPAREN,false,RPAREN,SEMI,btnAnswerC,DOT,addActionListener,LPAREN,this,RPAREN,SEMI,btnAnswerC,DOT,setBackground,LPAREN,SKYBLUE,RPAREN,SEMI,btnAnswerC,DOT,setForeground,LPAREN,Color,DOT,BLACK,RPAREN,SEMI,btnAnswerC,DOT,setBorder,LPAREN,NEW,LineBorder,LPAREN,SystemColor,DOT,textHighlight,COMMA,3,COMMA,true,RPAREN,RPAREN,SEMI,btnAnswerC,DOT,setFont,LPAREN,NEW,Font,LPAREN,""Dialog"",COMMA,Font,DOT,PLAIN,COMMA,20,RPAREN,RPAREN,SEMI,btnAnswerC,DOT,setBounds,LPAREN,859,COMMA,793,COMMA,375,COMMA,150,RPAREN,SEMI,answers,DOT,add,LPAREN,2,COMMA,btnAnswerC,RPAREN,SEMI,contentPane,DOT,add,LPAREN,btnAnswerC,RPAREN,SEMI,this,DOT,loadQuiz,LPAREN,RPAREN,SEMI,this,DOT,switchFullscreen,LPAREN,RPAREN,SEMI,RBRACE","	@Override
,	public void build() 
,	{
,		setInstance(this);	
,		JFileChooser dialog = new JFileChooser();
,		dialog.setFileFilter(new FileNameExtensionFilter(""Custom Quiz File (.quiz)"", ""quiz""));
,		int res = dialog.showOpenDialog(contentPane);
,		if(res <MASK> JFileChooser.APPROVE_OPTION) 
,		{
,			JOptionPane.showMessageDialog(null, ""You have to select a file to start the quiz!"", ""Quiz Viewer v1.6"", JOptionPane.WARNING_MESSAGE);
,			this.exit();
,			return;
,		}
,		
,		this.file = dialog.getSelectedFile();
,		if(!file.exists())
,		{
,			JOptionPane.showMessageDialog(null, ""Cannot open file: File not exists!"", ""Quiz Viewer v1.6"", JOptionPane.ERROR_MESSAGE);
,			this.exit();
,			return;
,		}
,		
,		if(!file.getName().endsWith("".quiz""))
,		{
,			JOptionPane.showMessageDialog(null, ""Cannot open file: Wrong or unsupported type!"", ""Quiz Viewer v1.6"", JOptionPane.ERROR_MESSAGE);
,			this.exit();
,			return;
,		}
,		
,		try
,		{
,			byte[] data = FileManager.readBytes(file);
,			CustomQuiz quiz = (CustomQuiz) ClassSerialiser.readData(data, CustomQuiz.class, ""UTF-8"");
,			this.quiz = quiz;
,		}
,		catch(Exception ex)
,		{
,			JOptionPane.showMessageDialog(null, ""Cannot open file: Invalid or broken file!"", ""Quiz Viewer v1.6"", JOptionPane.ERROR_MESSAGE);
,			this.exit();
,			return;
,		}
,		
,		setFocusable(true);
,		addKeyListener(this);
,		setResizable(false);
,	    setTitle(""Quiz Viewer v1.6: $title"");
,	    setBounds(100, 100, 1280, 1024);
,	    setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
,	    FrameRunner.centerWindow(this);
,	    
,	    this.finished = false;
,		addWindowListener(new WindowAdapter() 
,		{
,			@Override
,			public void windowClosing(WindowEvent arg0) 
,			{
,				if(finished == false)
,				{
,					success = false;
,					index = quiz.getQuestions().size();
,					nextQuestion();
,					return;
,				}
,				
,				if(getWindowState() == WindowState.FULLSCREEN)
,				{
,					switchFullscreen();
,				}			
,				setVisible(false);
,				exit();
,			}
,		});
,	    
,	    this.contentPane = new JPanel();
,	    this.contentPane.setLayout(null);
,	    setContentPane(this.contentPane);
,	    
,	    lblTitle = new JLabel(""$title"");
,	    lblTitle.setFocusable(false);
,	    lblTitle.setForeground(new Color(0, 0, 0));
,	    lblTitle.setFont(new Font(""Tahoma"", Font.PLAIN, 46));
,	    lblTitle.setHorizontalAlignment(SwingConstants.CENTER);
,	    lblTitle.setBounds(10, 35, 1244, 100);
,	    contentPane.add(lblTitle);
,	    
,	    lblQuestion = new JTextField(""$question"");
,	    lblQuestion.setBackground(Color.WHITE);
,	    lblQuestion.setForeground(Color.BLACK);
,	    lblQuestion.setHorizontalAlignment(SwingConstants.CENTER);
,	    lblQuestion.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
,	    lblQuestion.setEditable(false);
,	    lblQuestion.setFocusable(false);
,	    lblQuestion.setBorder(new LineBorder(new Color(0, 0, 255), 3, true));
,	    lblQuestion.setFont(new Font(""Arial"", Font.PLAIN, 32));
,	    lblQuestion.setBounds(37, 175, 1200, 575);
,	    contentPane.add(lblQuestion);
,	     
,	    this.answers = new ArrayList<JButton>();
,	    btnAnswerA = new JButton(""$answerA"");
,	    btnAnswerA.setFocusable(false);
,	    btnAnswerA.addActionListener(this);
,	    btnAnswerA.setBackground(SKYBLUE);
,	    btnAnswerA.setForeground(Color.BLACK);
,	    btnAnswerA.setBorder(new LineBorder(SystemColor.textHighlight, 3, true));
,	    btnAnswerA.setFont(new Font(""Dialog"", Font.PLAIN, 20));
,	    btnAnswerA.setBounds(40, 793, 375, 150);
,	    answers.add(0, btnAnswerA);
,	    contentPane.add(btnAnswerA);
,	    
,	    btnAnswerB = new JButton(""$answerB"");
,	    btnAnswerB.setFocusable(false);
,	    btnAnswerB.addActionListener(this);
,	    btnAnswerB.setBackground(SKYBLUE);
,	    btnAnswerB.setForeground(Color.BLACK);
,	    btnAnswerB.setBorder(new LineBorder(SystemColor.textHighlight, 3, true));
,	    btnAnswerB.setFont(new Font(""Dialog"", Font.PLAIN, 20));
,	    btnAnswerB.setBounds(449, 793, 375, 150);
,	    answers.add(1, btnAnswerB);
,	    contentPane.add(btnAnswerB);
,	    
,	    btnAnswerC = new JButton(""$answerC"");
,	    btnAnswerC.setFocusable(false);
,	    btnAnswerC.addActionListener(this);
,	    btnAnswerC.setBackground(SKYBLUE);
,	    btnAnswerC.setForeground(Color.BLACK);
,	    btnAnswerC.setBorder(new LineBorder(SystemColor.textHighlight, 3, true));
,	    btnAnswerC.setFont(new Font(""Dialog"", Font.PLAIN, 20));
,	    btnAnswerC.setBounds(859, 793, 375, 150);
,	    answers.add(2, btnAnswerC);
,	    contentPane.add(btnAnswerC);
,	    this.loadQuiz();
,	    
,	    this.switchFullscreen();
,	}
"
b909a4a2-cc4e-4ca8-b5d4-c15dd437a773,dbf73d90-4fde-4521-845c-97b363b6acbf,PERCENT,"PUBLIC,void,writeToFile,LPAREN,DataOutputStream,os,RPAREN,THROWS,IOException,LBRACE,IF,LPAREN,os,DOT,size,LPAREN,RPAREN,<MASK>,2,EQEQ,1,RPAREN,os,DOT,writeByte,LPAREN,00,RPAREN,SEMI,long,offset,EQ,4,STAR,Sounds,DOT,size,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,SoundOffsets,DOT,size,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,long,SndOfs,EQ,SoundOffsets,DOT,get,LPAREN,i,RPAREN,PLUS,offset,SEMI,System,DOT,out,DOT,printf,LPAREN,""Sound %d: %x -> %x\n"",COMMA,i,COMMA,SoundOffsets,DOT,get,LPAREN,i,RPAREN,COMMA,SndOfs,RPAREN,SEMI,os,DOT,writeByte,LPAREN,LPAREN,byte,RPAREN,LPAREN,LPAREN,SndOfs,GTGT,0,RPAREN,AMP,ff,RPAREN,RPAREN,SEMI,os,DOT,writeByte,LPAREN,LPAREN,byte,RPAREN,LPAREN,LPAREN,SndOfs,GTGT,8,RPAREN,AMP,ff,RPAREN,RPAREN,SEMI,os,DOT,writeByte,LPAREN,LPAREN,byte,RPAREN,LPAREN,LPAREN,SndOfs,GTGT,16,RPAREN,AMP,ff,RPAREN,RPAREN,SEMI,os,DOT,writeByte,LPAREN,LPAREN,byte,RPAREN,LPAREN,LPAREN,SndOfs,GTGT,24,RPAREN,AMP,ff,RPAREN,RPAREN,SEMI,RBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,Sounds,DOT,size,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,FOR,LPAREN,int,sample,EQ,0,SEMI,sample,LT,LPAREN,Sounds,DOT,get,LPAREN,i,RPAREN,DOT,length,RPAREN,SEMI,sample,PLUSPLUS,RPAREN,LBRACE,os,DOT,writeByte,LPAREN,Sounds,DOT,get,LPAREN,i,RPAREN,LBRACKET,sample,RBRACKET,RPAREN,SEMI,RBRACE,RBRACE,RBRACE","	public void writeToFile (DataOutputStream os) throws IOException {
,
,		// we must start on even byte address
,		if (os.size() <MASK> 2 == 1)
,			os.writeByte (0x00);
,		// output table with sound offsets to file
,		long offset = 4*Sounds.size();
,		for (int i = 0; i < SoundOffsets.size(); i++) {
,			
,				long SndOfs = SoundOffsets.get(i) + offset;
,			System.out.printf (""Sound %d: %x -> %x\n"", i, SoundOffsets.get(i), SndOfs);
,				os.writeByte ( (byte) ((SndOfs >>  0) & 0xff));
,				os.writeByte ( (byte) ((SndOfs >>  8) & 0xff));
,				os.writeByte ( (byte) ((SndOfs >> 16) & 0xff));
,				os.writeByte ( (byte) ((SndOfs >> 24) & 0xff));
,		}
,		// output Sounds to stream
,		for (int i = 0; i < Sounds.size(); i++) {
,			for (int sample = 0; sample <(Sounds.get(i).length); sample++) {
,				os.writeByte(Sounds.get(i)[sample]);
,			}
,		}
,	}
"
2170437a-9f53-47a2-b3cb-257eca2eb4ab,a39d1ff7-1ca5-4148-be20-df43672dd3f2,EQEQ,"PUBLIC,void,setStatus,LPAREN,StatusCode,status,RPAREN,LBRACE,IF,LPAREN,status,<MASK>,null,RPAREN,LBRACE,THROW,NEW,IllegalArgumentException,LPAREN,""Status cannot be null!"",RPAREN,SEMI,RBRACE,this,DOT,status,EQ,status,SEMI,RBRACE","	public void setStatus(StatusCode status)
,	{
,		if (status <MASK> null)
,		{
,			throw new IllegalArgumentException(""Status cannot be null!"");
,		}
,		this.status = status;
,	}
"
ee6285e4-70fb-4aa1-99e0-6f8cd1871b27,a33c8f1a-cf91-4d8d-99c7-1e32eb52ae52,LTEQ,"PUBLIC,String,getRatioOfTwoArray,LPAREN,List,LT,String,GT,list1,COMMA,List,LT,String,GT,list2,RPAREN,LBRACE,int,common,EQ,0,SEMI,int,total,EQ,0,SEMI,IF,LPAREN,list1,DOT,size,LPAREN,RPAREN,GT,list2,DOT,size,LPAREN,RPAREN,RPAREN,LBRACE,total,EQ,list1,DOT,size,LPAREN,RPAREN,SEMI,FOR,LPAREN,String,obj,COLON,list2,RPAREN,LBRACE,IF,LPAREN,list1,DOT,contains,LPAREN,obj,RPAREN,RPAREN,LBRACE,common,PLUSPLUS,SEMI,RBRACE,ELSE,LBRACE,total,PLUSPLUS,SEMI,RBRACE,RBRACE,RBRACE,ELSE,LBRACE,total,EQ,list2,DOT,size,LPAREN,RPAREN,SEMI,FOR,LPAREN,String,obj,COLON,list1,RPAREN,LBRACE,IF,LPAREN,list2,DOT,contains,LPAREN,obj,RPAREN,RPAREN,LBRACE,common,PLUSPLUS,SEMI,RBRACE,ELSE,LBRACE,total,PLUSPLUS,SEMI,RBRACE,RBRACE,RBRACE,IF,LPAREN,common,<MASK>,5,RPAREN,RETURN,"""",SEMI,ELSE,RETURN,common,PLUS,"" "",PLUS,total,SEMI,RBRACE","	public String getRatioOfTwoArray(List<String> list1, List<String> list2) {
,		int common = 0;
,		int total = 0;
,		if (list1.size() > list2.size()) {
,			total = list1.size();
,			for (String obj : list2) {
,				if (list1.contains(obj)) {
,					common++;
,				} else {
,					total++;
,				}
,			}
,		} else {
,			total = list2.size();
,			for (String obj : list1) {
,				if (list2.contains(obj)) {
,					common++;
,				} else {
,					total++;
,				}
,			}
,		}
,		if (common <MASK> 5)
,			return """";
,		else
,			return common + "" "" + total;
,	}
"
ddf8dc60-3532-4ff4-b03f-31f76626818d,adef4ef8-cbdf-4ce3-8a93-e919207b7fb8,LT,"PUBLIC,STATIC,boolean,CheckRule,LPAREN,ERA,relation,COMMA,int,rule,RPAREN,LBRACE,boolean,check,EQ,false,SEMI,ERA,LBRACKET,RBRACKET,temp,EQ,LBRACE,RBRACE,SEMI,IF,LPAREN,rule,EQEQ,141,BARBAR,rule,EQEQ,182,BARBAR,rule,EQEQ,171,RPAREN,LBRACE,IF,LPAREN,relation,EQEQ,rule141,RPAREN,LBRACE,check,EQ,true,SEMI,RETURN,check,SEMI,RBRACE,RBRACE,ELSE,IF,LPAREN,rule,EQEQ,143,BARBAR,rule,EQEQ,181,BARBAR,rule,EQEQ,173,RPAREN,LBRACE,IF,LPAREN,relation,EQEQ,rule143,RPAREN,LBRACE,check,EQ,true,SEMI,RETURN,check,SEMI,RBRACE,RBRACE,ELSE,IF,LPAREN,rule,EQEQ,13,BARBAR,rule,EQEQ,16,RPAREN,temp,EQ,rule13,SEMI,ELSE,IF,LPAREN,rule,EQEQ,121,BARBAR,rule,EQEQ,151,RPAREN,temp,EQ,rule121,SEMI,ELSE,IF,LPAREN,rule,EQEQ,122,BARBAR,rule,EQEQ,152,RPAREN,temp,EQ,rule122,SEMI,ELSE,IF,LPAREN,rule,EQEQ,142,BARBAR,rule,EQEQ,172,RPAREN,temp,EQ,rule142,SEMI,ELSE,IF,LPAREN,rule,EQEQ,144,BARBAR,rule,EQEQ,174,RPAREN,temp,EQ,rule144,SEMI,ELSE,IF,LPAREN,rule,EQEQ,31,RPAREN,temp,EQ,rule31,SEMI,ELSE,IF,LPAREN,rule,EQEQ,321,RPAREN,temp,EQ,rule321,SEMI,ELSE,IF,LPAREN,rule,EQEQ,322,RPAREN,temp,EQ,rule322,SEMI,ELSE,IF,LPAREN,rule,EQEQ,323,RPAREN,temp,EQ,rule323,SEMI,ELSE,IF,LPAREN,rule,EQEQ,331,RPAREN,temp,EQ,rule33,SEMI,ELSE,IF,LPAREN,rule,EQEQ,332,RPAREN,temp,EQ,_rule33,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,temp,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,IF,LPAREN,relation,EQEQ,temp,LBRACKET,i,RBRACKET,RPAREN,LBRACE,check,EQ,true,SEMI,BREAK,SEMI,RBRACE,RBRACE,RETURN,check,SEMI,RBRACE","	public static boolean CheckRule(ERA relation, int rule)
,	{
,		boolean check = false;
,		ERA[] temp = {};
,		if (rule == 141 || rule == 182 || rule == 171)
,		{
,			if (relation == rule141)
,			{
,				check = true;
,				return check;
,			}
,		}
,		else if (rule == 143 || rule == 181 || rule == 173)
,		{
,			if (relation == rule143)
,			{
,				check = true;
,				return check;
,			}
,		}
,		else if (rule == 13 || rule == 16)
,			temp = rule13;
,		else if (rule == 121 || rule == 151)
,			temp = rule121;
,		else if (rule == 122 || rule == 152)
,			temp = rule122;
,		else if (rule == 142 || rule == 172)
,			temp = rule142;
,		else if (rule == 144 || rule == 174)
,			temp = rule144;
,		else if (rule == 31)
,			temp = rule31;
,		else if (rule == 321)
,			temp = rule321;
,		else if (rule == 322)
,			temp = rule322;
,		else if (rule == 323)
,			temp = rule323;
,		else if (rule == 331)
,			temp = rule33;
,		else if (rule == 332)
,			temp = _rule33;
,		for (int i = 0; i <MASK> temp.length; i++)
,		{
,			if (relation == temp[i])
,			{
,				check = true;
,				break;
,			}
,		}
,		return check;
,	}
"
92951106-a87f-4e0c-9019-4852bf22d1be,ee7e2d19-95a9-45a5-a016-1ef58b78e998,PLUS,"PUBLIC,void,printReverse,LPAREN,Node,node,RPAREN,LBRACE,IF,LPAREN,node,BANGEQ,null,RPAREN,LBRACE,System,DOT,out,DOT,print,LPAREN,node,DOT,value,<MASK>,"" "",RPAREN,SEMI,print,LPAREN,node,DOT,previous,RPAREN,SEMI,RBRACE,ELSE,LBRACE,System,DOT,out,DOT,println,LPAREN,RPAREN,SEMI,RBRACE,RBRACE","	public void printReverse(Node node) {
,		if (node != null) {
,			System.out.print(node.value <MASK> "" "");
,			print(node.previous);
,		} else {
,			System.out.println();
,		}
,	}
"
dd0b8baf-c022-4efa-99dd-425e9c39b04c,6fa493ed-e9e2-42a7-9bb1-26f1deee0e17,SLASH,"MONKEYS_AT,Override,PUBLIC,void,onRender,LPAREN,int,mouseX,COMMA,int,mouseY,RPAREN,LBRACE,TextureRegistry,DOT,getTexture,LPAREN,""/textures/settling.png"",RPAREN,DOT,bindTexture,LPAREN,RPAREN,SEMI,GuiHelper,DOT,drawTexturedRectangle,LPAREN,LPAREN,float,RPAREN,this,DOT,width,<MASK>,2.0F,SUB,300,COMMA,40.0F,COMMA,600.0F,COMMA,250.0F,COMMA,0.0F,COMMA,0.0F,COMMA,1.0F,COMMA,1.0F,RPAREN,SEMI,RBRACE","    @Override
,    public void onRender(int mouseX, int mouseY) {
,        TextureRegistry.getTexture(""<MASK>textures/settling.png"").bindTexture();
,
,        GuiHelper.drawTexturedRectangle((float) this.width / 2.0F - 300, 40.0F, 600.0F, 250.0F, 0.0F, 0.0F, 1.0F, 1.0F);
,    }
"
bbc9f6a0-390c-4409-a212-8916d3c861c1,90f8e526-0fb6-43b7-aefc-d564bf061765,PLUS,"PRIVATE,void,createGUIComponents,LPAREN,RPAREN,LBRACE,this,DOT,leftNoticePanel,EQ,NEW,JPanel,LPAREN,RPAREN,SEMI,leftNoticePanel,DOT,setLayout,LPAREN,null,RPAREN,SEMI,JLabel,startText,EQ,NEW,JLabel,LPAREN,scenarioStep,DOT,HELP,RPAREN,SEMI,startText,DOT,setBounds,LPAREN,0,COMMA,DEFAULT_LABEL_MARGIN,COMMA,STEP_PANEL_X_SIZE,SUB,DEFAULT_LABEL_MARGIN,COMMA,STEP_PANEL_Y_SIZE,SUB,DEFAULT_LABEL_MARGIN,RPAREN,SEMI,startText,DOT,setVerticalAlignment,LPAREN,SwingConstants,DOT,TOP,RPAREN,SEMI,startText,DOT,setHorizontalAlignment,LPAREN,SwingConstants,DOT,LEFT,RPAREN,SEMI,leftNoticePanel,DOT,add,LPAREN,startText,RPAREN,SEMI,this,DOT,rightTablePanel,EQ,NEW,JPanel,LPAREN,RPAREN,SEMI,rightTablePanel,DOT,setBorder,LPAREN,NEW,EtchedBorder,LPAREN,EtchedBorder,DOT,LOWERED,RPAREN,RPAREN,SEMI,rightTablePanel,DOT,setLayout,LPAREN,null,RPAREN,SEMI,JLabel,tableTitleOS,EQ,NEW,JLabel,LPAREN,""Betriebssysteme"",RPAREN,SEMI,tableTitleOS,DOT,setBounds,LPAREN,DEFAULT_LABEL_MARGIN,COMMA,DEFAULT_LABEL_MARGIN,COMMA,SCENARIO_GUI_DETAIL_ELEMENT_WIDTH,SUB,2,STAR,DEFAULT_LABEL_MARGIN,COMMA,20,RPAREN,SEMI,JLabel,tableTitleSoftware,EQ,NEW,JLabel,LPAREN,""Software"",RPAREN,SEMI,tableTitleSoftware,DOT,setBounds,LPAREN,DEFAULT_LABEL_MARGIN,COMMA,DEFAULT_LABEL_MARGIN,<MASK>,260,COMMA,SCENARIO_GUI_DETAIL_ELEMENT_WIDTH,SUB,2,STAR,DEFAULT_LABEL_MARGIN,COMMA,20,RPAREN,SEMI,BetriebssystemJTableModel,tableModelOS,EQ,NEW,BetriebssystemJTableModel,LPAREN,NEW,BetriebssystemDao,LPAREN,RPAREN,COMMA,this,DOT,scenarioStep,DOT,generateQueryOSFromOWL,LPAREN,RPAREN,RPAREN,SEMI,JTable,tableOS,EQ,NEW,JTable,LPAREN,tableModelOS,RPAREN,SEMI,tableOS,DOT,setBounds,LPAREN,0,COMMA,0,COMMA,SCENARIO_GUI_DETAIL_ELEMENT_WIDTH,SUB,2,STAR,DEFAULT_LABEL_MARGIN,COMMA,230,RPAREN,SEMI,tableOS,DOT,getColumnModel,LPAREN,RPAREN,DOT,getColumn,LPAREN,0,RPAREN,DOT,setMaxWidth,LPAREN,60,RPAREN,SEMI,JScrollPane,paneOS,EQ,NEW,JScrollPane,LPAREN,tableOS,RPAREN,SEMI,paneOS,DOT,setBounds,LPAREN,DEFAULT_LABEL_MARGIN,COMMA,30,COMMA,SCENARIO_GUI_DETAIL_ELEMENT_WIDTH,SUB,2,STAR,DEFAULT_LABEL_MARGIN,COMMA,230,RPAREN,SEMI,SoftwareJTableModel,tableModelSoftware,EQ,NEW,SoftwareJTableModel,LPAREN,NEW,SoftwareDao,LPAREN,RPAREN,COMMA,this,DOT,scenarioStep,DOT,generateQuerySoftware,LPAREN,RPAREN,RPAREN,SEMI,JTable,tableGraphics,EQ,NEW,JTable,LPAREN,tableModelSoftware,RPAREN,SEMI,tableGraphics,DOT,setBounds,LPAREN,0,COMMA,0,COMMA,SCENARIO_GUI_DETAIL_ELEMENT_WIDTH,SUB,2,STAR,DEFAULT_LABEL_MARGIN,COMMA,230,RPAREN,SEMI,tableGraphics,DOT,getColumnModel,LPAREN,RPAREN,DOT,getColumn,LPAREN,0,RPAREN,DOT,setMaxWidth,LPAREN,60,RPAREN,SEMI,JScrollPane,paneSoftware,EQ,NEW,JScrollPane,LPAREN,tableGraphics,RPAREN,SEMI,paneSoftware,DOT,setBounds,LPAREN,DEFAULT_LABEL_MARGIN,COMMA,290,COMMA,SCENARIO_GUI_DETAIL_ELEMENT_WIDTH,SUB,2,STAR,DEFAULT_LABEL_MARGIN,COMMA,230,RPAREN,SEMI,this,DOT,rightTablePanel,DOT,add,LPAREN,tableTitleOS,RPAREN,SEMI,this,DOT,rightTablePanel,DOT,add,LPAREN,tableTitleSoftware,RPAREN,SEMI,this,DOT,rightTablePanel,DOT,add,LPAREN,paneOS,RPAREN,SEMI,this,DOT,rightTablePanel,DOT,add,LPAREN,paneSoftware,RPAREN,SEMI,RBRACE","	private void createGUIComponents(){
,		
,		// Panel für die Dropdown-Liste. Wird von der Haupt-GUI platziert
,		this.leftNoticePanel = new JPanel();
,		leftNoticePanel.setLayout(null);
,		
,		// Text einbauen
,		JLabel startText = new JLabel(scenarioStep.HELP);
,		startText.setBounds(0, DEFAULT_LABEL_MARGIN, 
,						STEP_PANEL_X_SIZE - DEFAULT_LABEL_MARGIN, STEP_PANEL_Y_SIZE - DEFAULT_LABEL_MARGIN);
,		startText.setVerticalAlignment(SwingConstants.TOP);
,		startText.setHorizontalAlignment(SwingConstants.LEFT);
,		leftNoticePanel.add(startText);
,		
,		// Das Panel selbst
,		this.rightTablePanel = new JPanel();
,		rightTablePanel.setBorder(new EtchedBorder(EtchedBorder.LOWERED));
,		rightTablePanel.setLayout(null);
,		
,		// Tabellentitel
,		JLabel tableTitleOS = new JLabel(""Betriebssysteme"");
,		tableTitleOS.setBounds(DEFAULT_LABEL_MARGIN, DEFAULT_LABEL_MARGIN, SCENARIO_GUI_DETAIL_ELEMENT_WIDTH - 2 * DEFAULT_LABEL_MARGIN, 20);
,		JLabel tableTitleSoftware = new JLabel(""Software"");
,		tableTitleSoftware.setBounds(DEFAULT_LABEL_MARGIN, DEFAULT_LABEL_MARGIN <MASK> 260, SCENARIO_GUI_DETAIL_ELEMENT_WIDTH - 2 * DEFAULT_LABEL_MARGIN, 20);
,		
,		// Betriebssystemtabelle
,//		BetriebssystemJTableModel tableModelOS = new BetriebssystemJTableModel(new BetriebssystemDao(), this.scenarioStep.generateQueryOS());
,		BetriebssystemJTableModel tableModelOS = new BetriebssystemJTableModel(new BetriebssystemDao(), this.scenarioStep.generateQueryOSFromOWL());
,		JTable tableOS = new JTable(tableModelOS);
,		tableOS.setBounds(0, 0, SCENARIO_GUI_DETAIL_ELEMENT_WIDTH - 2 * DEFAULT_LABEL_MARGIN, 230);
,		tableOS.getColumnModel().getColumn(0).setMaxWidth(60);
,		
,		JScrollPane paneOS = new JScrollPane(tableOS);
,		paneOS.setBounds(DEFAULT_LABEL_MARGIN, 30, SCENARIO_GUI_DETAIL_ELEMENT_WIDTH - 2 * DEFAULT_LABEL_MARGIN, 230);
,		
,		// Softwaretabelle
,		SoftwareJTableModel tableModelSoftware = new SoftwareJTableModel(new SoftwareDao(), this.scenarioStep.generateQuerySoftware());
,		JTable tableGraphics = new JTable(tableModelSoftware);
,		tableGraphics.setBounds(0, 0, SCENARIO_GUI_DETAIL_ELEMENT_WIDTH - 2 * DEFAULT_LABEL_MARGIN, 230);
,		tableGraphics.getColumnModel().getColumn(0).setMaxWidth(60);
,		
,		JScrollPane paneSoftware = new JScrollPane(tableGraphics);
,		paneSoftware.setBounds(DEFAULT_LABEL_MARGIN, 290, SCENARIO_GUI_DETAIL_ELEMENT_WIDTH - 2 * DEFAULT_LABEL_MARGIN, 230);
,		
,		
,		// Tabelle einbauen
,		this.rightTablePanel.add(tableTitleOS);
,		this.rightTablePanel.add(tableTitleSoftware);
,		this.rightTablePanel.add(paneOS);
,		this.rightTablePanel.add(paneSoftware);
,
,	}
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,44a550cf-db64-4512-88c9-a7ef92a583e3,LT,"MONKEYS_AT,Override,PUBLIC,void,write,LPAREN,byte,LBRACKET,RBRACKET,theBytes,COMMA,int,off,COMMA,int,len,RPAREN,THROWS,java,DOT,io,DOT,IOException,LBRACE,IF,LPAREN,suspendEncoding,RPAREN,LBRACE,this,DOT,out,DOT,write,LPAREN,theBytes,COMMA,off,COMMA,len,RPAREN,SEMI,RETURN,SEMI,RBRACE,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,len,SEMI,i,PLUSPLUS,RPAREN,LBRACE,write,LPAREN,theBytes,LBRACKET,off,PLUS,i,RBRACKET,RPAREN,SEMI,RBRACE,RBRACE","    @Override
,    public void write(byte[] theBytes, int off, int len)
,            throws java.io.IOException {
,      // Encoding suspended?
,      if (suspendEncoding) {
,        this.out.write(theBytes, off, len);
,        return;
,      }   // end if: supsended
,
,      for (int i = 0 ; i <MASK> len ; i++) {
,        write(theBytes[ off + i]);
,      }   // end for: each byte written
,
,    }   // end write
"
113c5414-6c55-466b-b879-a350ab6e0ca2,eb8dc9cb-0748-4692-8540-bef16ecab3a0,EQ,"PUBLIC,void,deleteCursor,LPAREN,RPAREN,LBRACE,messenger,DOT,updateTile,LPAREN,cursor,DOT,getLocation,LPAREN,RPAREN,DOT,getColumn,LPAREN,RPAREN,COMMA,cursor,DOT,getLocation,LPAREN,RPAREN,DOT,getRow,LPAREN,RPAREN,RPAREN,SEMI,cursor,<MASK>,null,SEMI,RBRACE","	public void deleteCursor() {
,		messenger.updateTile(cursor.getLocation().getColumn(), cursor.getLocation().getRow());
,		cursor <MASK> null;
,	}
"
09478113-8f39-4146-870b-8037a6932443,bd0760ef-ba62-42e0-b6f4-e407afcf4766,EQEQ,"PRIVATE,void,m_uiToolsPlayPause_actionPerformed,LPAREN,ActionEvent,e,RPAREN,LBRACE,IF,LPAREN,m_emuConsole,DOT,getSystemHalted,LPAREN,RPAREN,RPAREN,LBRACE,IF,LPAREN,m_rom,<MASK>,null,RPAREN,loadRomOrState,LPAREN,RPAREN,SEMI,IF,LPAREN,m_rom,BANGEQ,null,RPAREN,LBRACE,m_emuConsole,DOT,setSystemHalted,LPAREN,false,RPAREN,SEMI,m_uiToolsPlayPause,DOT,setIcon,LPAREN,m_uiPauseIcon,RPAREN,SEMI,RBRACE,RBRACE,ELSE,LBRACE,m_emuConsole,DOT,setSystemHalted,LPAREN,true,RPAREN,SEMI,m_uiToolsPlayPause,DOT,setIcon,LPAREN,m_uiPlayIcon,RPAREN,SEMI,RBRACE,IF,LPAREN,m_rom,BANGEQ,null,RPAREN,m_uiDisplay,DOT,setSignal,LPAREN,true,RPAREN,SEMI,RBRACE","    private void m_uiToolsPlayPause_actionPerformed(ActionEvent e)
,    {
,        if (m_emuConsole.getSystemHalted())
,        {
,            // these conditions should be replaced by a more
,            // consistent method of Console
,            if (m_rom <MASK> null) loadRomOrState();
,            
,            if (m_rom != null)
,            {
,                m_emuConsole.setSystemHalted(false);
,                m_uiToolsPlayPause.setIcon(m_uiPauseIcon);
,            }
,
,            //if (m_rom != null && !m_uiDisplay.isRunning()) m_uiDisplay.start();
,        }
,        else
,        {
,            m_emuConsole.setSystemHalted(true);
,            m_uiToolsPlayPause.setIcon(m_uiPlayIcon);
,        }
,
,        if (m_rom != null) m_uiDisplay.setSignal(true);
,    }
"
80f137fe-1147-4585-ae40-e81a59ba8a89,93978b44-959a-4738-9376-73cc6d91ab31,STAR,"PRIVATE,int,getReinforcement,LPAREN,Player,p,RPAREN,LBRACE,IF,LPAREN,gameView,DOT,getRoundNumber,LPAREN,RPAREN,EQEQ,1,RPAREN,LBRACE,int,playerno,EQ,gameView,DOT,getPlayers,LPAREN,RPAREN,DOT,size,LPAREN,RPAREN,SUB,2,SEMI,IF,LPAREN,playerno,GT,4,RPAREN,LBRACE,playerno,EQ,4,SEMI,RBRACE,RETURN,40,SUB,playerno,<MASK>,5,SUB,gameView,DOT,getOwnedCountryNo,LPAREN,p,RPAREN,SEMI,RBRACE,ELSE,LBRACE,Collection,LT,Country,GT,countries,EQ,gameView,DOT,getCountries,LPAREN,RPAREN,SEMI,int,countryno,EQ,0,SEMI,FOR,LPAREN,Country,c,COLON,countries,RPAREN,LBRACE,IF,LPAREN,c,DOT,getOwner,LPAREN,RPAREN,EQEQ,p,RPAREN,LBRACE,countryno,PLUSPLUS,SEMI,RBRACE,RBRACE,int,reinforcement,EQ,countryno,SLASH,3,SEMI,Collection,LT,Continent,GT,continents,EQ,gameView,DOT,getContinents,LPAREN,RPAREN,SEMI,FOR,LPAREN,Continent,continent,COLON,continents,RPAREN,LBRACE,boolean,ownedEveryCountry,EQ,true,SEMI,Collection,LT,Country,GT,contCountries,EQ,continent,DOT,getCountries,LPAREN,RPAREN,SEMI,FOR,LPAREN,Country,c,COLON,contCountries,RPAREN,LBRACE,IF,LPAREN,c,DOT,getOwner,LPAREN,RPAREN,BANGEQ,p,RPAREN,LBRACE,ownedEveryCountry,EQ,false,SEMI,BREAK,SEMI,RBRACE,RBRACE,IF,LPAREN,ownedEveryCountry,RPAREN,LBRACE,reinforcement,PLUSEQ,getContinentReinforcement,LPAREN,continent,RPAREN,SEMI,RBRACE,RBRACE,IF,LPAREN,reinforcement,LT,3,RPAREN,LBRACE,reinforcement,EQ,3,SEMI,RBRACE,RETURN,reinforcement,SEMI,RBRACE,RBRACE","    private int getReinforcement(Player p) {
,        if (gameView.getRoundNumber() == 1) {
,            int playerno = gameView.getPlayers().size() - 2;
,            if (playerno > 4) {
,                playerno = 4;
,            }
,            return 40 - playerno <MASK> 5 - gameView.getOwnedCountryNo(p);
,        } else {
,            Collection<Country> countries = gameView.getCountries();
,            int countryno = 0;
,            // Count owned territorry
,            for (Country c : countries) {
,                if (c.getOwner() == p) {
,                    countryno++;
,                }
,            }
,            int reinforcement = countryno / 3;
,
,            // Count continents
,            Collection<Continent> continents = gameView.getContinents();
,            for (Continent continent : continents) {
,                boolean ownedEveryCountry = true;
,                Collection<Country> contCountries = continent.getCountries();
,                for (Country c : contCountries) {
,                    if (c.getOwner() != p) {
,                        ownedEveryCountry = false;
,                        break;
,                    }
,                }
,                if (ownedEveryCountry) {
,                    reinforcement += getContinentReinforcement(continent);
,                }
,            }
,            if (reinforcement < 3) {
,                reinforcement = 3;
,            }
,            return reinforcement;
,        }
,    }
"
8b02bf36-3970-4fd2-ac11-287131435c5d,a6fb2c4d-265e-470c-8acd-10c191b257db,LTEQ,"PRIVATE,void,initPlayers,LPAREN,RPAREN,LBRACE,myPlayers,EQ,NEW,ArrayList,LT,Player,GT,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,1,SEMI,i,<MASK>,myNumPlayers,SEMI,i,PLUSPLUS,RPAREN,LBRACE,myPlayers,DOT,add,LPAREN,NEW,Player,LPAREN,i,COMMA,myNumMeeples,RPAREN,RPAREN,SEMI,RBRACE,myCurrentPlayer,EQ,myPlayers,DOT,get,LPAREN,0,RPAREN,SEMI,hasCompletedLastTurn,EQ,true,SEMI,RBRACE","	private void initPlayers() {
,		myPlayers = new ArrayList<Player>();
,		for (int i = 1; i <MASK> myNumPlayers; i++) {
,			myPlayers.add(new Player(i, myNumMeeples));
,		}
,		myCurrentPlayer = myPlayers.get(0);
,		hasCompletedLastTurn = true;  //set to true to allow first player to get tile
,	}
"
b5ee7e5e-a7bf-41d4-8880-3ac95d2f8822,f1d50263-ea1c-4d33-ac58-a25913e05bbd,PLUS,"PUBLIC,String,getOutputName,LPAREN,String,name,RPAREN,LBRACE,RETURN,name,<MASK>,""_o"",SEMI,RBRACE","	public String getOutputName(String name){
,		return name <MASK> ""_o"";
,	}
"
2dd830d4-e85f-41ec-b5a4-78a5402d9efb,172323cc-dee6-4376-bd93-c75b724bae19,SUB,"PUBLIC,void,dropPlayerFromFestival,LPAREN,RPAREN,LBRACE,this,DOT,isInFestival,EQ,false,SEMI,this,DOT,festivalBid,EQ,0,SEMI,this,DOT,tabCount,EQ,<MASK>,1,SEMI,RBRACE","	public void dropPlayerFromFestival(){
,		this.isInFestival = false;
,		this.festivalBid = 0;
,		this.tabCount = <MASK>1;
,	}
"
37134524-36c4-486f-85f7-06f1a52cb561,8255d67b-063c-461a-be9d-2e61254dd549,SLASH,"PUBLIC,AnimationFrame,getFrame,LPAREN,RPAREN,LBRACE,AnimationFrame,low,EQ,NEW,AnimationFrame,LPAREN,RPAREN,SEMI,AnimationFrame,high,EQ,NEW,AnimationFrame,LPAREN,RPAREN,SEMI,AnimationFrame,res,EQ,NEW,AnimationFrame,LPAREN,RPAREN,SEMI,FOR,LPAREN,AnimationFrame,f,COLON,frames,RPAREN,LBRACE,IF,LPAREN,f,DOT,getTime,LPAREN,RPAREN,LT,totalTime,RPAREN,low,EQ,f,SEMI,IF,LPAREN,f,DOT,getTime,LPAREN,RPAREN,GT,totalTime,RPAREN,LBRACE,high,EQ,f,SEMI,BREAK,SEMI,RBRACE,RBRACE,float,timeDif,EQ,high,DOT,getTime,LPAREN,RPAREN,SUB,low,DOT,getTime,LPAREN,RPAREN,SEMI,float,lerpVar,EQ,LPAREN,totalTime,SUB,low,DOT,getTime,LPAREN,RPAREN,RPAREN,<MASK>,timeDif,SEMI,res,DOT,setPosition,LPAREN,VectorMath,DOT,lerp,LPAREN,lerpVar,COMMA,low,DOT,getPosition,LPAREN,RPAREN,COMMA,high,DOT,getPosition,LPAREN,RPAREN,RPAREN,RPAREN,SEMI,res,DOT,setRotation,LPAREN,VectorMath,DOT,lerp,LPAREN,lerpVar,COMMA,low,DOT,getRotation,LPAREN,RPAREN,COMMA,high,DOT,getRotation,LPAREN,RPAREN,RPAREN,RPAREN,SEMI,res,DOT,setScale,LPAREN,VectorMath,DOT,lerp,LPAREN,lerpVar,COMMA,low,DOT,getScale,LPAREN,RPAREN,COMMA,high,DOT,getScale,LPAREN,RPAREN,RPAREN,RPAREN,SEMI,RETURN,res,SEMI,RBRACE","    public AnimationFrame getFrame(){       
,        AnimationFrame low = new AnimationFrame();
,        AnimationFrame high = new AnimationFrame();
,        AnimationFrame res = new AnimationFrame();
,        
,        for(AnimationFrame f : frames){
,            if(f.getTime() < totalTime)
,                low = f;
,            if(f.getTime() > totalTime){
,                high = f;
,                break;
,            }
,        }
,        
,        float timeDif = high.getTime() - low.getTime();
,        float lerpVar = (totalTime - low.getTime())<MASK>timeDif;
,        
,        res.setPosition(VectorMath.lerp(lerpVar, low.getPosition(), high.getPosition()));
,        res.setRotation(VectorMath.lerp(lerpVar, low.getRotation(), high.getRotation()));
,        res.setScale(VectorMath.lerp(lerpVar, low.getScale(), high.getScale()));
,        return res;
,    }
"
285a0131-ff18-48e6-ab98-d32b43e40d3e,40b87600-9666-4b59-80a6-3fc8b2c82819,LT,"MONKEYS_AT,Override,PROTECTED,String,LBRACKET,RBRACKET,getNames,LPAREN,RPAREN,LBRACE,String,LBRACKET,RBRACKET,ns,EQ,NEW,String,LBRACKET,names,DOT,size,LPAREN,RPAREN,RBRACKET,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,<MASK>,ns,DOT,length,SEMI,i,PLUSPLUS,RPAREN,LBRACE,ns,LBRACKET,i,RBRACKET,EQ,names,DOT,get,LPAREN,i,RPAREN,SEMI,RBRACE,RETURN,ns,SEMI,RBRACE","  @Override
,  protected String[] getNames() {
,    String[] ns = new String[names.size()];
,
,    for (int i = 0; i <MASK> ns.length; i++) {
,      ns[i] = names.get(i);
,    }
,
,    return ns;
,  }
"
d71e9d90-d7d7-40b1-b4fa-c5316adcd69a,f5894522-1a94-4852-99ae-617edf6be328,LTEQ,"PROTECTED,void,copyGradOutput,LPAREN,FINAL,int,source,COMMA,FINAL,int,dest,COMMA,FINAL,int,layer,RPAREN,LBRACE,FINAL,int,albd,EQ,this,DOT,structure,DOT,layers,LBRACKET,layer,RBRACKET,DOT,arrayslbd,SEMI,FINAL,int,aubd,EQ,this,DOT,structure,DOT,layers,LBRACKET,layer,RBRACKET,DOT,arraysubd,SEMI,FOR,LPAREN,int,i,EQ,albd,SEMI,i,<MASK>,aubd,SEMI,i,PLUSPLUS,RPAREN,LBRACE,FINAL,CellArray,a,EQ,this,DOT,structure,DOT,arrays,LBRACKET,i,RBRACKET,SEMI,IF,LPAREN,LPAREN,a,DOT,celltype,BANGEQ,CellType,DOT,VALUE,RPAREN,AMPAMP,LPAREN,a,DOT,layer,BANGEQ,this,DOT,structure,DOT,outputlayer,RPAREN,RPAREN,LBRACE,DoubleTools,DOT,copy,LPAREN,this,DOT,data,DOT,gradoutput,LBRACKET,source,RBRACKET,COMMA,a,DOT,cellslbd,COMMA,this,DOT,data,DOT,gradoutput,LBRACKET,dest,RBRACKET,COMMA,a,DOT,cellslbd,COMMA,a,DOT,cellsnum,RPAREN,SEMI,RBRACE,RBRACE,RBRACE","    protected void copyGradOutput(final int source, final int dest, final int layer) {
,        //
,        // copy grad output from previous context buffer.
,        //
,        final int albd = this.structure.layers[layer].arrayslbd;
,        final int aubd = this.structure.layers[layer].arraysubd;
,        //
,        for (int i = albd; i <MASK> aubd; i++) {
,            final CellArray a = this.structure.arrays[i];
,            if (
,                (a.celltype != CellType.VALUE) && 
,                (a.layer != this.structure.outputlayer)
,            ) {
,                DoubleTools.copy(
,                    this.data.gradoutput[source], a.cellslbd,
,                    this.data.gradoutput[dest], a.cellslbd, a.cellsnum
,                );
,                /*
,                DoubleTools.copy(
,                    this.data.gradinput[source], a.cellslbd,
,                    this.data.gradinput[dest], a.cellslbd, a.cellsnum
,                );
,                */
,                           
,            }
,        }
,    }
"
d71e9d90-d7d7-40b1-b4fa-c5316adcd69a,e73f3e3e-ab61-46eb-9778-1e956c9535a4,LTEQ,"PRIVATE,void,computeWeightDiffs,LPAREN,RPAREN,LBRACE,FOR,LPAREN,int,i,EQ,1,SEMI,i,<MASK>,this,DOT,weightsnum,SEMI,i,PLUSPLUS,RPAREN,LBRACE,FINAL,double,mw,EQ,this,DOT,dweightslast,LBRACKET,i,RBRACKET,STAR,this,DOT,alpha,SEMI,this,DOT,dweights,LBRACKET,i,RBRACKET,EQ,LPAREN,this,DOT,mu,STAR,this,DOT,dweights,LBRACKET,i,RBRACKET,RPAREN,PLUS,mw,SEMI,RBRACE,RBRACE","    private void computeWeightDiffs() {
,        //
,        // add momentum and multiply learning rate mu. 
,        //
,        for (int i = 1; i <MASK> this.weightsnum; i++) {
,            //
,            // calculate momentum.
,            //
,            final double mw = this.dweightslast[i] * this.alpha; 
,            this.dweights[i] = (this.mu * this.dweights[i]) + mw;
,        }  
,    }
"
fd30f660-1c5c-4584-8533-91ca2ad4829d,dca5fc9e-3c32-4595-a451-903ab3edaeb3,STAR,"PUBLIC,Timeline,getSaaieTijdlijn,LPAREN,FINAL,Modelverzameling,ab,RPAREN,LBRACE,IF,LPAREN,timeline,EQEQ,null,RPAREN,LBRACE,int,laatste,EQ,0,SEMI,IF,LPAREN,zinnen,DOT,size,LPAREN,RPAREN,EQEQ,1,RPAREN,LBRACE,timeline,EQ,NEW,Timeline,LPAREN,RPAREN,SEMI,timeline,DOT,getKeyFrames,LPAREN,RPAREN,DOT,add,LPAREN,NEW,KeyFrame,LPAREN,Duration,DOT,seconds,LPAREN,0,RPAREN,COMMA,NEW,EventHandler,LPAREN,RPAREN,LBRACE,MONKEYS_AT,Override,PUBLIC,void,handle,LPAREN,Event,event,RPAREN,LBRACE,ab,DOT,getTekstVakModel,LPAREN,RPAREN,DOT,setZin,LPAREN,zinnen,DOT,get,LPAREN,0,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,RPAREN,RPAREN,SEMI,RBRACE,ELSE,LBRACE,timeline,EQ,NEW,Timeline,LPAREN,RPAREN,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,zinnen,DOT,size,LPAREN,RPAREN,SEMI,i,PLUSPLUS,RPAREN,LBRACE,FINAL,int,hulp,EQ,i,SEMI,laatste,EQ,i,SEMI,timeline,DOT,getKeyFrames,LPAREN,RPAREN,DOT,add,LPAREN,NEW,KeyFrame,LPAREN,Duration,DOT,seconds,LPAREN,hulp,RPAREN,COMMA,NEW,EventHandler,LPAREN,RPAREN,LBRACE,MONKEYS_AT,Override,PUBLIC,void,handle,LPAREN,Event,event,RPAREN,LBRACE,ab,DOT,getTekstVakModel,LPAREN,RPAREN,DOT,setZin,LPAREN,zinnen,DOT,get,LPAREN,hulp,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,RPAREN,RPAREN,SEMI,RBRACE,RBRACE,timeline,DOT,getKeyFrames,LPAREN,RPAREN,DOT,add,LPAREN,NEW,KeyFrame,LPAREN,Duration,DOT,millis,LPAREN,500,PLUS,laatste,<MASK>,1000,RPAREN,COMMA,NEW,EventHandler,LPAREN,RPAREN,LBRACE,MONKEYS_AT,Override,PUBLIC,void,handle,LPAREN,Event,event,RPAREN,LBRACE,doPersonageBeinvloeding,LPAREN,ab,RPAREN,SEMI,RBRACE,RBRACE,RPAREN,RPAREN,SEMI,RBRACE,RETURN,timeline,SEMI,RBRACE","    public Timeline  getSaaieTijdlijn(final Modelverzameling ab){
,       if(timeline == null){
,           int laatste=0; 
,           if(zinnen.size() == 1){
,             timeline = new Timeline();
,                          timeline.getKeyFrames().add(new KeyFrame(Duration.seconds(0),
,                                  new EventHandler() {
,                                         @Override
,                                          public void handle(Event event) {
,                                                ab.getTekstVakModel().setZin(zinnen.get(0));
,                                         }
,                                }));
,                    
,               }else{
,                            timeline = new Timeline();
,                              for(int i=0; i < zinnen.size(); i++){
,                              final int hulp = i;
,                              laatste=i;
,                              timeline.getKeyFrames().add(new KeyFrame(Duration.seconds(hulp),
,                                      new EventHandler() {
,                                             @Override
,                                              public void handle(Event event) {
,                                                 ab.getTekstVakModel().setZin(zinnen.get(hulp));
,                                             }
,                                    }));
,                                }
,                            
,                    }
,
,          timeline.getKeyFrames().add(new KeyFrame(Duration.millis(500+laatste<MASK>1000),
,                  new EventHandler() {
,                         @Override
,                          public void handle(Event event) {
,                            doPersonageBeinvloeding(ab);
,                         }
,                }));
,                        
,            
,            
,       }
,       
,       return timeline;
,               
,    }
"
ad0a2aad-9ad8-443c-832f-88b9f64460ed,7bdfaa15-62bb-45b2-a631-9d792d94da84,EQ,"PROTECTED,void,initialize,LPAREN,RPAREN,LBRACE,IF,LPAREN,feeder,DOT,isIn,RPAREN,LBRACE,feederSolenoid,DOT,setOut,LPAREN,RPAREN,SEMI,feeder,DOT,isIn,<MASK>,true,SEMI,setTimeout,LPAREN,0.5,RPAREN,SEMI,RBRACE,ELSE,LBRACE,setTimeout,LPAREN,0.0,RPAREN,SEMI,RBRACE,RBRACE","    protected void initialize() {
,        if (feeder.isIn) {
,            feederSolenoid.setOut();
,            feeder.isIn <MASK> true;
,            setTimeout(0.5);
,        } else {
,            setTimeout(0.0);
,        }
,    }
"
113c5414-6c55-466b-b879-a350ab6e0ca2,a29ba3ee-6f6d-4382-b872-03be3a986a53,EQ,"PUBLIC,void,setEatEffects,LPAREN,ArrayList,LT,String,GT,effects,RPAREN,LBRACE,eatEffects,<MASK>,effects,SEMI,RBRACE","	public void setEatEffects(ArrayList<String> effects) {
,		eatEffects <MASK> effects;
,	}
"
62a978c0-a836-480d-8f9b-c958fbbc7ff5,44a3f056-ff88-4bea-ae52-599e7ff5bc1d,SLASH,"PRIVATE,STATIC,byte,LBRACKET,RBRACKET,toByteArray,LPAREN,FINAL,int,intValue,RPAREN,LBRACE,int,byteNum,EQ,LPAREN,40,SUB,numberOfLeadingZeros,LPAREN,intValue,LT,0,QUES,TILDE,intValue,COLON,intValue,RPAREN,RPAREN,<MASK>,8,SEMI,byte,LBRACKET,RBRACKET,byteArray,EQ,NEW,byte,LBRACKET,4,RBRACKET,SEMI,FOR,LPAREN,int,i,EQ,0,SEMI,i,LT,byteNum,SEMI,i,PLUSPLUS,RPAREN,byteArray,LBRACKET,3,SUB,i,RBRACKET,EQ,LPAREN,byte,RPAREN,LPAREN,intValue,GTGTGT,LPAREN,i,STAR,8,RPAREN,RPAREN,SEMI,RETURN,LPAREN,byteArray,RPAREN,SEMI,RBRACE","	private static byte[] toByteArray (final int intValue) {
,		int    byteNum   = (40 - numberOfLeadingZeros (intValue < 0 ? ~intValue : intValue)) <MASK> 8;
,		byte[] byteArray = new byte[4];
,
,		for (int i = 0; i < byteNum; i++)
,			byteArray[3 - i] = (byte) (intValue >>> (i * 8));
,
,		return (byteArray);
,	}
"
ad0a2aad-9ad8-443c-832f-88b9f64460ed,219fef53-05e1-4f95-9730-6958b7d95625,EQ,"PROTECTED,void,end,LPAREN,RPAREN,LBRACE,driveTrain,DOT,turnBtn,<MASK>,false,SEMI,RBRACE","    protected void end() {
,        driveTrain.turnBtn <MASK> false;
,    }
"
c694737b-29b6-48d5-90c3-b6e0b6d64d88,bfc04832-5f05-4368-bb4b-f899e9f241cb,PERCENT,"PROTECTED,int,getMaxRowOfWhack,LPAREN,int,whack,RPAREN,LBRACE,IF,LPAREN,whack,GT,countWhacks,LPAREN,RPAREN,SUB,numColumns,RPAREN,LBRACE,RETURN,numRows,SUB,1,SEMI,RBRACE,int,centerRow,EQ,getCenterRow,LPAREN,RPAREN,SEMI,int,adjustment,EQ,centerRow,<MASK>,2,SEMI,RETURN,2,STAR,whack,PLUS,adjustment,SEMI,RBRACE","    protected int getMaxRowOfWhack(int whack) {
,        if (whack > countWhacks() - numColumns) {
,            return numRows - 1;
,        }
,        int centerRow = getCenterRow();
,        int adjustment = centerRow <MASK> 2;
,        return 2 * whack + adjustment;
,    }
"
9b07119d-5d87-44cb-94ac-77a9d4fc6019,433255e0-8cfa-4b33-b823-9e11a962128f,LTEQ,"PRIVATE,boolean,isHoliday,LPAREN,Calendar,cal,RPAREN,LBRACE,boolean,esfesta,EQ,false,SEMI,int,diaSetmana,EQ,0,SEMI,SWITCH,LPAREN,cal,DOT,get,LPAREN,Calendar,DOT,DAY_OF_WEEK,RPAREN,RPAREN,LBRACE,CASE,Calendar,DOT,MONDAY,COLON,diaSetmana,EQ,1,SEMI,BREAK,SEMI,CASE,Calendar,DOT,TUESDAY,COLON,diaSetmana,EQ,2,SEMI,BREAK,SEMI,CASE,Calendar,DOT,WEDNESDAY,COLON,diaSetmana,EQ,3,SEMI,BREAK,SEMI,CASE,Calendar,DOT,THURSDAY,COLON,diaSetmana,EQ,4,SEMI,BREAK,SEMI,CASE,Calendar,DOT,FRIDAY,COLON,diaSetmana,EQ,5,SEMI,BREAK,SEMI,CASE,Calendar,DOT,SATURDAY,COLON,diaSetmana,EQ,6,SEMI,BREAK,SEMI,CASE,Calendar,DOT,SUNDAY,COLON,diaSetmana,EQ,7,SEMI,BREAK,SEMI,RBRACE,IF,LPAREN,diaSetmana,GT,5,RPAREN,LBRACE,RETURN,true,SEMI,RBRACE,ArrayList,LT,BeanFestiu,GT,festius,EQ,client,DOT,getDatesCollection,LPAREN,RPAREN,DOT,getFestius,LPAREN,RPAREN,SEMI,java,DOT,util,DOT,Date,utilDate,EQ,cal,DOT,getTime,LPAREN,RPAREN,SEMI,Calendar,m_cal2,EQ,Calendar,DOT,getInstance,LPAREN,RPAREN,SEMI,m_cal2,DOT,setTime,LPAREN,utilDate,RPAREN,SEMI,m_cal2,DOT,set,LPAREN,Calendar,DOT,HOUR_OF_DAY,COMMA,0,RPAREN,SEMI,m_cal2,DOT,set,LPAREN,Calendar,DOT,MINUTE,COMMA,0,RPAREN,SEMI,m_cal2,DOT,set,LPAREN,Calendar,DOT,SECOND,COMMA,0,RPAREN,SEMI,m_cal2,DOT,set,LPAREN,Calendar,DOT,MILLISECOND,COMMA,0,RPAREN,SEMI,java,DOT,sql,DOT,Date,sqlDate,EQ,NEW,java,DOT,sql,DOT,Date,LPAREN,m_cal2,DOT,getTime,LPAREN,RPAREN,DOT,getTime,LPAREN,RPAREN,RPAREN,SEMI,FOR,LPAREN,BeanFestiu,bf,COLON,festius,RPAREN,LBRACE,IF,LPAREN,sqlDate,DOT,compareTo,LPAREN,bf,DOT,getDesde,LPAREN,RPAREN,RPAREN,GTEQ,0,AMPAMP,sqlDate,DOT,compareTo,LPAREN,bf,DOT,getFins,LPAREN,RPAREN,RPAREN,<MASK>,0,RPAREN,LBRACE,esfesta,EQ,true,SEMI,BREAK,SEMI,RBRACE,RBRACE,RETURN,esfesta,SEMI,RBRACE","    private boolean isHoliday(Calendar cal)
,    {
,          boolean esfesta = false;
,          
,          int diaSetmana = 0;
,          switch(cal.get(Calendar.DAY_OF_WEEK))
,          {
,              case Calendar.MONDAY: diaSetmana = 1; break;
,              case Calendar.TUESDAY: diaSetmana = 2; break;
,              case Calendar.WEDNESDAY: diaSetmana = 3; break;
,              case Calendar.THURSDAY: diaSetmana = 4; break;
,              case Calendar.FRIDAY: diaSetmana = 5; break;
,              case Calendar.SATURDAY: diaSetmana = 6; break;
,              case Calendar.SUNDAY: diaSetmana = 7; break;
,          }
,       
,          if(diaSetmana>5) {
,              return true; //Considera weekends as holiday
,          }  
,          
,          //Lazy single instance of festius
,          ArrayList<BeanFestiu> festius = client.getDatesCollection().getFestius();
,       
,          //5-11-2011: Bug :: estic comparant sql.Date amb util.Date
,          //El problema es que util.Date conserva hores,minuts, etc.
,          
,          java.util.Date utilDate = cal.getTime();
,          Calendar m_cal2 = Calendar.getInstance();
,          m_cal2.setTime(utilDate);
,          m_cal2.set(Calendar.HOUR_OF_DAY, 0);
,          m_cal2.set(Calendar.MINUTE, 0);
,          m_cal2.set(Calendar.SECOND, 0);
,          m_cal2.set(Calendar.MILLISECOND, 0); 
,          java.sql.Date sqlDate = new java.sql.Date(m_cal2.getTime().getTime());
,          
,          //java.sql.Date mdate = new java.sql.Date( utilDate.getTime() );
,
,          for(BeanFestiu bf: festius){
,
,               if(sqlDate.compareTo(bf.getDesde()) >=0 && sqlDate.compareTo(bf.getFins()) <MASK>0)
,               {
,                    esfesta = true;
,                    break;
,              }
,          }
,
,        return esfesta;
,    }
"
38ed5e2e-bfac-4cc9-94e0-5ee38dabb0ca,7a6ecb39-7850-4ce7-8674-d59556032561,EQEQ,"PUBLIC,boolean,isEmpty,LPAREN,RPAREN,LBRACE,RETURN,tree,<MASK>,null,SEMI,RBRACE","    public boolean isEmpty() {
,	return tree <MASK> null;
,    }
"
2170437a-9f53-47a2-b3cb-257eca2eb4ab,71f55e22-a8ca-4698-9f0c-e0430636ce65,EQEQ,"MONKEYS_AT,Override,PUBLIC,void,widgetSelected,LPAREN,SelectionEvent,arg0,RPAREN,LBRACE,User,user,SEMI,TRY,LBRACE,user,EQ,NEW,User,LPAREN,txtUserName,DOT,getText,LPAREN,RPAREN,RPAREN,SEMI,userAccess,DOT,getUsers,LPAREN,RPAREN,SEMI,IF,LPAREN,userAccess,DOT,addUser,LPAREN,user,RPAREN,<MASK>,false,RPAREN,LBRACE,MyMessageBox,error,EQ,NEW,MyMessageBox,LPAREN,shell,COMMA,""Username already exists"",COMMA,""Please create a unique username."",COMMA,""OK"",RPAREN,SEMI,error,DOT,open,LPAREN,RPAREN,SEMI,RBRACE,ELSE,LBRACE,MyMessageBox,success,EQ,NEW,MyMessageBox,LPAREN,shell,COMMA,""User created"",COMMA,""User has been created."",COMMA,""OK"",RPAREN,SEMI,success,DOT,open,LPAREN,RPAREN,SEMI,shell,DOT,close,LPAREN,RPAREN,SEMI,RBRACE,RBRACE,CATCH,LPAREN,IllegalArgumentException,iae,RPAREN,LBRACE,MyMessageBox,error,EQ,NEW,MyMessageBox,LPAREN,shell,COMMA,""Illegal username"",COMMA,""Make sure your username only contains alphanumeric characters."",COMMA,""OK"",RPAREN,SEMI,error,DOT,open,LPAREN,RPAREN,SEMI,RBRACE,RBRACE","			@Override
,			public void widgetSelected(SelectionEvent arg0) {
,				User user;
,				try
,				{
,					user = new User(txtUserName.getText());
,					userAccess.getUsers();
,					if (userAccess.addUser(user) <MASK> false)
,					{
,						MyMessageBox error = new MyMessageBox(shell, ""Username already exists"", ""Please create a unique username."", ""OK"");
,						error.open();
,					}
,					else
,					{
,						MyMessageBox success = new MyMessageBox(shell, ""User created"", ""User has been created."", ""OK"");
,						success.open();
,						shell.close();
,					}
,				}
,				catch (IllegalArgumentException iae)
,				{
,					MyMessageBox error = new MyMessageBox(shell, ""Illegal username"", ""Make sure your username only contains alphanumeric characters."", ""OK"");
,					error.open();
,				}
,			}
"
875ed1bc-1c92-4cd5-aec8-a5e68ef60cdc,e76504a8-5251-4aeb-8142-c426968c6356,STAR,"MONKEYS_AT,Override,PUBLIC,int,hashCode,LPAREN,RPAREN,LBRACE,int,hash,EQ,7,SEMI,hash,EQ,79,<MASK>,hash,PLUS,LPAREN,this,DOT,value,BANGEQ,null,QUES,this,DOT,value,DOT,hashCode,LPAREN,RPAREN,COLON,0,RPAREN,SEMI,RETURN,hash,SEMI,RBRACE","    @Override
,    public int hashCode() {
,        int hash = 7;
,        hash = 79 <MASK> hash + (this.value != null ? this.value.hashCode() : 0);
,        return hash;
,    }
"
